
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001103c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08011288  08011288  00012288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011418  08011418  00013180  2**0
                  CONTENTS
  4 .ARM          00000008  08011418  08011418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011420  08011420  00013180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011420  08011420  00012420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011424  08011424  00012424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  08011428  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000122c  20000180  080115a8  00013180  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200013ac  080115a8  000133ac  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00013180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000262d2  00000000  00000000  000131b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e16  00000000  00000000  00039488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de8  00000000  00000000  0003e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016ea  00000000  00000000  00040088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000082b8  00000000  00000000  00041772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a1f0  00000000  00000000  00049a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014b7cc  00000000  00000000  00073c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bf3e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008858  00000000  00000000  001bf42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001c7c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	08011270 	.word	0x08011270

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	08011270 	.word	0x08011270

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <log_generic>:
{
    current_level = level;
}

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b0c7      	sub	sp, #284	@ 0x11c
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	4604      	mov	r4, r0
 80005ac:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80005b0:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 80005b4:	6001      	str	r1, [r0, #0]
 80005b6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80005ba:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80005be:	600a      	str	r2, [r1, #0]
 80005c0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80005c4:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80005c8:	6013      	str	r3, [r2, #0]
 80005ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005ce:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80005d2:	4622      	mov	r2, r4
 80005d4:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 80005d6:	4b16      	ldr	r3, [pc, #88]	@ (8000630 <log_generic+0x8c>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80005de:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 80005e2:	7812      	ldrb	r2, [r2, #0]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d31e      	bcc.n	8000626 <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80005e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005ec:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80005f0:	f107 0010 	add.w	r0, r7, #16
 80005f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80005f8:	6812      	ldr	r2, [r2, #0]
 80005fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005fe:	f00f fe4b 	bl	8010298 <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800060a:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800060e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000612:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000616:	4807      	ldr	r0, [pc, #28]	@ (8000634 <log_generic+0x90>)
 8000618:	9000      	str	r0, [sp, #0]
 800061a:	6812      	ldr	r2, [r2, #0]
 800061c:	6809      	ldr	r1, [r1, #0]
 800061e:	4806      	ldr	r0, [pc, #24]	@ (8000638 <log_generic+0x94>)
 8000620:	f00f fdba 	bl	8010198 <iprintf>
 8000624:	e000      	b.n	8000628 <log_generic+0x84>
        return;
 8000626:	bf00      	nop
}
 8000628:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800062c:	46bd      	mov	sp, r7
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	20000000 	.word	0x20000000
 8000634:	08011298 	.word	0x08011298
 8000638:	08011288 	.word	0x08011288

0800063c <log_info>:
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
    va_end(args);
}

void log_info(const char *fmt, ...)
{
 800063c:	b40f      	push	{r0, r1, r2, r3}
 800063e:	b580      	push	{r7, lr}
 8000640:	b084      	sub	sp, #16
 8000642:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	4a05      	ldr	r2, [pc, #20]	@ (8000668 <log_info+0x2c>)
 8000652:	4906      	ldr	r1, [pc, #24]	@ (800066c <log_info+0x30>)
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff ffa5 	bl	80005a4 <log_generic>
    va_end(args);
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr
 8000668:	080112b0 	.word	0x080112b0
 800066c:	080112b8 	.word	0x080112b8

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f001 fc98 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f8a4 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 fba6 	bl	8000dcc <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000680:	f000 fb42 	bl	8000d08 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8000684:	f000 fa5c 	bl	8000b40 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000688:	f000 f92c 	bl	80008e4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800068c:	f000 fa02 	bl	8000a94 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000690:	f000 faee 	bl	8000c70 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000694:	f000 f97c 	bl	8000990 <MX_RTC_Init>
  MX_RNG_Init();
 8000698:	f000 f964 	bl	8000964 <MX_RNG_Init>
  MX_HASH_Init();
 800069c:	f000 f908 	bl	80008b0 <MX_HASH_Init>
  MX_USART3_UART_Init();
 80006a0:	f000 fa9a 	bl	8000bd8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 80006a4:	bf00      	nop
 80006a6:	4b44      	ldr	r3, [pc, #272]	@ (80007b8 <main+0x148>)
 80006a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d0fa      	beq.n	80006a6 <main+0x36>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80006b0:	2000      	movs	r0, #0
 80006b2:	f001 fa5f 	bl	8001b74 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f001 fa5c 	bl	8001b74 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80006bc:	2002      	movs	r0, #2
 80006be:	f001 fa59 	bl	8001b74 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006c2:	2101      	movs	r1, #1
 80006c4:	2000      	movs	r0, #0
 80006c6:	f001 faf5 	bl	8001cb4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80006ca:	4b3c      	ldr	r3, [pc, #240]	@ (80007bc <main+0x14c>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80006d2:	4b3a      	ldr	r3, [pc, #232]	@ (80007bc <main+0x14c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80006d8:	4b38      	ldr	r3, [pc, #224]	@ (80007bc <main+0x14c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80006de:	4b37      	ldr	r3, [pc, #220]	@ (80007bc <main+0x14c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80006e4:	4b35      	ldr	r3, [pc, #212]	@ (80007bc <main+0x14c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80006ea:	4934      	ldr	r1, [pc, #208]	@ (80007bc <main+0x14c>)
 80006ec:	2000      	movs	r0, #0
 80006ee:	f001 fb7b 	bl	8001de8 <BSP_COM_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <main+0x8c>
  {
    Error_Handler();
 80006f8:	f000 fc64 	bl	8000fc4 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 80006fc:	2000      	movs	r0, #0
 80006fe:	f001 faaf 	bl	8001c60 <BSP_LED_Toggle>
 8000702:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000706:	f001 fd0d 	bl	8002124 <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 800070a:	2002      	movs	r0, #2
 800070c:	f001 faa8 	bl	8001c60 <BSP_LED_Toggle>
 8000710:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000714:	f001 fd06 	bl	8002124 <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000718:	2001      	movs	r0, #1
 800071a:	f001 faa1 	bl	8001c60 <BSP_LED_Toggle>
 800071e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000722:	f001 fcff 	bl	8002124 <HAL_Delay>
	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000726:	2000      	movs	r0, #0
 8000728:	f001 fa9a 	bl	8001c60 <BSP_LED_Toggle>
 800072c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000730:	f001 fcf8 	bl	8002124 <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000734:	2002      	movs	r0, #2
 8000736:	f001 fa93 	bl	8001c60 <BSP_LED_Toggle>
 800073a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800073e:	f001 fcf1 	bl	8002124 <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000742:	2001      	movs	r0, #1
 8000744:	f001 fa8c 	bl	8001c60 <BSP_LED_Toggle>
 8000748:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074c:	f001 fcea 	bl	8002124 <HAL_Delay>
	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000750:	2000      	movs	r0, #0
 8000752:	f001 fa85 	bl	8001c60 <BSP_LED_Toggle>
 8000756:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800075a:	f001 fce3 	bl	8002124 <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 800075e:	2002      	movs	r0, #2
 8000760:	f001 fa7e 	bl	8001c60 <BSP_LED_Toggle>
 8000764:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000768:	f001 fcdc 	bl	8002124 <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 800076c:	2001      	movs	r0, #1
 800076e:	f001 fa77 	bl	8001c60 <BSP_LED_Toggle>
 8000772:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000776:	f001 fcd5 	bl	8002124 <HAL_Delay>
	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 800077a:	2000      	movs	r0, #0
 800077c:	f001 fa70 	bl	8001c60 <BSP_LED_Toggle>
 8000780:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000784:	f001 fcce 	bl	8002124 <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000788:	2002      	movs	r0, #2
 800078a:	f001 fa69 	bl	8001c60 <BSP_LED_Toggle>
 800078e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000792:	f001 fcc7 	bl	8002124 <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000796:	2001      	movs	r0, #1
 8000798:	f001 fa62 	bl	8001c60 <BSP_LED_Toggle>
 800079c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007a0:	f001 fcc0 	bl	8002124 <HAL_Delay>

  while (1)
  {
	log_info("Hughie, You’ve Done A Murder. Comparatively Speaking, This Will Be A Piece Of Cake.\n\r");
 80007a4:	4806      	ldr	r0, [pc, #24]	@ (80007c0 <main+0x150>)
 80007a6:	f7ff ff49 	bl	800063c <log_info>
	HAL_Delay(1000);
 80007aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ae:	f001 fcb9 	bl	8002124 <HAL_Delay>
	log_info("Hughie, You’ve Done A Murder. Comparatively Speaking, This Will Be A Piece Of Cake.\n\r");
 80007b2:	bf00      	nop
 80007b4:	e7f6      	b.n	80007a4 <main+0x134>
 80007b6:	bf00      	nop
 80007b8:	200007b4 	.word	0x200007b4
 80007bc:	2000019c 	.word	0x2000019c
 80007c0:	080112e0 	.word	0x080112e0

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b09c      	sub	sp, #112	@ 0x70
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	2250      	movs	r2, #80	@ 0x50
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f00f fd6e 	bl	80102b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ea:	4b2f      	ldr	r3, [pc, #188]	@ (80008a8 <SystemClock_Config+0xe4>)
 80007ec:	691b      	ldr	r3, [r3, #16]
 80007ee:	4a2e      	ldr	r2, [pc, #184]	@ (80008a8 <SystemClock_Config+0xe4>)
 80007f0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80007f4:	6113      	str	r3, [r2, #16]
 80007f6:	4b2c      	ldr	r3, [pc, #176]	@ (80008a8 <SystemClock_Config+0xe4>)
 80007f8:	691b      	ldr	r3, [r3, #16]
 80007fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000802:	bf00      	nop
 8000804:	4b28      	ldr	r3, [pc, #160]	@ (80008a8 <SystemClock_Config+0xe4>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	f003 0308 	and.w	r3, r3, #8
 800080c:	2b08      	cmp	r3, #8
 800080e:	d1f9      	bne.n	8000804 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000810:	2329      	movs	r3, #41	@ 0x29
 8000812:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000814:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800081a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800081e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000820:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000824:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800082a:	2303      	movs	r3, #3
 800082c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800082e:	2304      	movs	r3, #4
 8000830:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000832:	23fa      	movs	r3, #250	@ 0xfa
 8000834:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800083a:	2302      	movs	r3, #2
 800083c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000842:	2304      	movs	r3, #4
 8000844:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000846:	2300      	movs	r3, #0
 8000848:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	4618      	mov	r0, r3
 8000854:	f003 fe94 	bl	8004580 <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800085e:	f000 fbb1 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	231f      	movs	r3, #31
 8000864:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000866:	2303      	movs	r3, #3
 8000868:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	2105      	movs	r1, #5
 8000880:	4618      	mov	r0, r3
 8000882:	f004 fab5 	bl	8004df0 <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800088c:	f000 fb9a 	bl	8000fc4 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <SystemClock_Config+0xe8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000898:	4a04      	ldr	r2, [pc, #16]	@ (80008ac <SystemClock_Config+0xe8>)
 800089a:	f043 0320 	orr.w	r3, r3, #32
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	3770      	adds	r7, #112	@ 0x70
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	44020800 	.word	0x44020800
 80008ac:	40022000 	.word	0x40022000

080008b0 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_HASH_Init+0x2c>)
 80008b6:	4a0a      	ldr	r2, [pc, #40]	@ (80008e0 <MX_HASH_Init+0x30>)
 80008b8:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_NO_SWAP;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_HASH_Init+0x2c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA1;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_HASH_Init+0x2c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_HASH_Init+0x2c>)
 80008c8:	f001 ffec 	bl	80028a4 <HAL_HASH_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_HASH_Init+0x26>
  {
    Error_Handler();
 80008d2:	f000 fb77 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200001ac 	.word	0x200001ac
 80008e0:	420c0400 	.word	0x420c0400

080008e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <MX_I2C1_Init+0x74>)
 80008ea:	4a1c      	ldr	r2, [pc, #112]	@ (800095c <MX_I2C1_Init+0x78>)
 80008ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_I2C1_Init+0x74>)
 80008f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000960 <MX_I2C1_Init+0x7c>)
 80008f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <MX_I2C1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fa:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_I2C1_Init+0x74>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <MX_I2C1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_I2C1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800091e:	480e      	ldr	r0, [pc, #56]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000920:	f001 fff8 	bl	8002914 <HAL_I2C_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800092a:	f000 fb4b 	bl	8000fc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800092e:	2100      	movs	r1, #0
 8000930:	4809      	ldr	r0, [pc, #36]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000932:	f002 f88a 	bl	8002a4a <HAL_I2CEx_ConfigAnalogFilter>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800093c:	f000 fb42 	bl	8000fc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000940:	2100      	movs	r1, #0
 8000942:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_I2C1_Init+0x74>)
 8000944:	f002 f8cc 	bl	8002ae0 <HAL_I2CEx_ConfigDigitalFilter>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800094e:	f000 fb39 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200001ec 	.word	0x200001ec
 800095c:	40005400 	.word	0x40005400
 8000960:	10c043e5 	.word	0x10c043e5

08000964 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000968:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <MX_RNG_Init+0x24>)
 800096a:	4a08      	ldr	r2, [pc, #32]	@ (800098c <MX_RNG_Init+0x28>)
 800096c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_RNG_Init+0x24>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	@ (8000988 <MX_RNG_Init+0x24>)
 8000976:	f009 fdd5 	bl	800a524 <HAL_RNG_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000980:	f000 fb20 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000240 	.word	0x20000240
 800098c:	420c0800 	.word	0x420c0800

08000990 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08e      	sub	sp, #56	@ 0x38
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009be:	4b33      	ldr	r3, [pc, #204]	@ (8000a8c <MX_RTC_Init+0xfc>)
 80009c0:	4a33      	ldr	r2, [pc, #204]	@ (8000a90 <MX_RTC_Init+0x100>)
 80009c2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009c4:	4b31      	ldr	r3, [pc, #196]	@ (8000a8c <MX_RTC_Init+0xfc>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009ca:	4b30      	ldr	r3, [pc, #192]	@ (8000a8c <MX_RTC_Init+0xfc>)
 80009cc:	227f      	movs	r2, #127	@ 0x7f
 80009ce:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009d0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a8c <MX_RTC_Init+0xfc>)
 80009d2:	22ff      	movs	r2, #255	@ 0xff
 80009d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009d6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a8c <MX_RTC_Init+0xfc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009dc:	4b2b      	ldr	r3, [pc, #172]	@ (8000a8c <MX_RTC_Init+0xfc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009e2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a8c <MX_RTC_Init+0xfc>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009e8:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <MX_RTC_Init+0xfc>)
 80009ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80009f0:	4b26      	ldr	r3, [pc, #152]	@ (8000a8c <MX_RTC_Init+0xfc>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80009f6:	4b25      	ldr	r3, [pc, #148]	@ (8000a8c <MX_RTC_Init+0xfc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009fc:	4823      	ldr	r0, [pc, #140]	@ (8000a8c <MX_RTC_Init+0xfc>)
 80009fe:	f009 fe2f 	bl	800a660 <HAL_RTC_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000a08:	f000 fadc 	bl	8000fc4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	481a      	ldr	r0, [pc, #104]	@ (8000a8c <MX_RTC_Init+0xfc>)
 8000a24:	f00a f882 	bl	800ab2c <HAL_RTCEx_PrivilegeModeSet>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a2e:	f000 fac9 	bl	8000fc4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480f      	ldr	r0, [pc, #60]	@ (8000a8c <MX_RTC_Init+0xfc>)
 8000a50:	f009 fe88 	bl	800a764 <HAL_RTC_SetTime>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000a5a:	f000 fab3 	bl	8000fc4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a62:	2301      	movs	r3, #1
 8000a64:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2201      	movs	r2, #1
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_RTC_Init+0xfc>)
 8000a76:	f009 ff07 	bl	800a888 <HAL_RTC_SetDate>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000a80:	f000 faa0 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	3738      	adds	r7, #56	@ 0x38
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000254 	.word	0x20000254
 8000a90:	44007800 	.word	0x44007800

08000a94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a98:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000a9a:	4a28      	ldr	r2, [pc, #160]	@ (8000b3c <MX_SPI1_Init+0xa8>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a9e:	4b26      	ldr	r3, [pc, #152]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000aa0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000aa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa6:	4b24      	ldr	r3, [pc, #144]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aac:	4b22      	ldr	r3, [pc, #136]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000aae:	2207      	movs	r2, #7
 8000ab0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000ac0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ac4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000ac8:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000acc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ada:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000ae2:	2207      	movs	r2, #7
 8000ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000ae8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aec:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000aee:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000af4:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000afa:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b00:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b06:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b12:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b18:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <MX_SPI1_Init+0xa4>)
 8000b26:	f00a f82f 	bl	800ab88 <HAL_SPI_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000b30:	f000 fa48 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000284 	.word	0x20000284
 8000b3c:	40013000 	.word	0x40013000

08000b40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b44:	4b22      	ldr	r3, [pc, #136]	@ (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b46:	4a23      	ldr	r2, [pc, #140]	@ (8000bd4 <MX_USART2_UART_Init+0x94>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	@ (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b76:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b82:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b88:	4811      	ldr	r0, [pc, #68]	@ (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b8a:	f00a f988 	bl	800ae9e <HAL_UART_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b94:	f000 fa16 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000b9c:	f00a feb4 	bl	800b908 <HAL_UARTEx_SetTxFifoThreshold>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ba6:	f000 fa0d 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000baa:	2100      	movs	r1, #0
 8000bac:	4808      	ldr	r0, [pc, #32]	@ (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000bae:	f00a fee9 	bl	800b984 <HAL_UARTEx_SetRxFifoThreshold>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bb8:	f000 fa04 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	@ (8000bd0 <MX_USART2_UART_Init+0x90>)
 8000bbe:	f00a fe6a 	bl	800b896 <HAL_UARTEx_DisableFifoMode>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bc8:	f000 f9fc 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000314 	.word	0x20000314
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	@ (8000c68 <MX_USART3_UART_Init+0x90>)
 8000bde:	4a23      	ldr	r2, [pc, #140]	@ (8000c6c <MX_USART3_UART_Init+0x94>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000be2:	4b21      	ldr	r3, [pc, #132]	@ (8000c68 <MX_USART3_UART_Init+0x90>)
 8000be4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <MX_USART3_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <MX_USART3_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <MX_USART3_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_USART3_UART_Init+0x90>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <MX_USART3_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <MX_USART3_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <MX_USART3_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c14:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <MX_USART3_UART_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <MX_USART3_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c20:	4811      	ldr	r0, [pc, #68]	@ (8000c68 <MX_USART3_UART_Init+0x90>)
 8000c22:	f00a f93c 	bl	800ae9e <HAL_UART_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c2c:	f000 f9ca 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c30:	2100      	movs	r1, #0
 8000c32:	480d      	ldr	r0, [pc, #52]	@ (8000c68 <MX_USART3_UART_Init+0x90>)
 8000c34:	f00a fe68 	bl	800b908 <HAL_UARTEx_SetTxFifoThreshold>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c3e:	f000 f9c1 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4808      	ldr	r0, [pc, #32]	@ (8000c68 <MX_USART3_UART_Init+0x90>)
 8000c46:	f00a fe9d 	bl	800b984 <HAL_UARTEx_SetRxFifoThreshold>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c50:	f000 f9b8 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <MX_USART3_UART_Init+0x90>)
 8000c56:	f00a fe1e 	bl	800b896 <HAL_UARTEx_DisableFifoMode>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c60:	f000 f9b0 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200003a8 	.word	0x200003a8
 8000c6c:	40004800 	.word	0x40004800

08000c70 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c74:	4b22      	ldr	r3, [pc, #136]	@ (8000d00 <MX_USART6_UART_Init+0x90>)
 8000c76:	4a23      	ldr	r2, [pc, #140]	@ (8000d04 <MX_USART6_UART_Init+0x94>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	@ (8000d00 <MX_USART6_UART_Init+0x90>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b1f      	ldr	r3, [pc, #124]	@ (8000d00 <MX_USART6_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <MX_USART6_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d00 <MX_USART6_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <MX_USART6_UART_Init+0x90>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <MX_USART6_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <MX_USART6_UART_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <MX_USART6_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <MX_USART6_UART_Init+0x90>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <MX_USART6_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000cb8:	4811      	ldr	r0, [pc, #68]	@ (8000d00 <MX_USART6_UART_Init+0x90>)
 8000cba:	f00a f8f0 	bl	800ae9e <HAL_UART_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000cc4:	f000 f97e 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	480d      	ldr	r0, [pc, #52]	@ (8000d00 <MX_USART6_UART_Init+0x90>)
 8000ccc:	f00a fe1c 	bl	800b908 <HAL_UARTEx_SetTxFifoThreshold>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000cd6:	f000 f975 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4808      	ldr	r0, [pc, #32]	@ (8000d00 <MX_USART6_UART_Init+0x90>)
 8000cde:	f00a fe51 	bl	800b984 <HAL_UARTEx_SetRxFifoThreshold>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce8:	f000 f96c 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	@ (8000d00 <MX_USART6_UART_Init+0x90>)
 8000cee:	f00a fdd2 	bl	800b896 <HAL_UARTEx_DisableFifoMode>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf8:	f000 f964 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000043c 	.word	0x2000043c
 8000d04:	40006400 	.word	0x40006400

08000d08 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8000d0c:	4b29      	ldr	r3, [pc, #164]	@ (8000db4 <MX_USB_PCD_Init+0xac>)
 8000d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8000db8 <MX_USB_PCD_Init+0xb0>)
 8000d10:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000d14:	4b27      	ldr	r3, [pc, #156]	@ (8000db4 <MX_USB_PCD_Init+0xac>)
 8000d16:	4a29      	ldr	r2, [pc, #164]	@ (8000dbc <MX_USB_PCD_Init+0xb4>)
 8000d18:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000d1a:	4b26      	ldr	r3, [pc, #152]	@ (8000db4 <MX_USB_PCD_Init+0xac>)
 8000d1c:	2208      	movs	r2, #8
 8000d1e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000d20:	4b24      	ldr	r3, [pc, #144]	@ (8000db4 <MX_USB_PCD_Init+0xac>)
 8000d22:	2202      	movs	r2, #2
 8000d24:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d26:	4b23      	ldr	r3, [pc, #140]	@ (8000db4 <MX_USB_PCD_Init+0xac>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000d2c:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <MX_USB_PCD_Init+0xac>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000d32:	4b20      	ldr	r3, [pc, #128]	@ (8000db4 <MX_USB_PCD_Init+0xac>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000d38:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <MX_USB_PCD_Init+0xac>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000db4 <MX_USB_PCD_Init+0xac>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <MX_USB_PCD_Init+0xac>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <MX_USB_PCD_Init+0xac>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <MX_USB_PCD_Init+0xac>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000d56:	4817      	ldr	r0, [pc, #92]	@ (8000db4 <MX_USB_PCD_Init+0xac>)
 8000d58:	f001 ff71 	bl	8002c3e <HAL_PCD_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8000d62:	f000 f92f 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8000d66:	2200      	movs	r2, #0
 8000d68:	4915      	ldr	r1, [pc, #84]	@ (8000dc0 <MX_USB_PCD_Init+0xb8>)
 8000d6a:	4813      	ldr	r0, [pc, #76]	@ (8000db8 <MX_USB_PCD_Init+0xb0>)
 8000d6c:	f00d fe14 	bl	800e998 <USBD_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8000d76:	f000 f925 	bl	8000fc4 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000d7a:	4912      	ldr	r1, [pc, #72]	@ (8000dc4 <MX_USB_PCD_Init+0xbc>)
 8000d7c:	480e      	ldr	r0, [pc, #56]	@ (8000db8 <MX_USB_PCD_Init+0xb0>)
 8000d7e:	f00d fe3b 	bl	800e9f8 <USBD_RegisterClass>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8000d88:	f000 f91c 	bl	8000fc4 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8000d8c:	490e      	ldr	r1, [pc, #56]	@ (8000dc8 <MX_USB_PCD_Init+0xc0>)
 8000d8e:	480a      	ldr	r0, [pc, #40]	@ (8000db8 <MX_USB_PCD_Init+0xb0>)
 8000d90:	f00d fa58 	bl	800e244 <USBD_CDC_RegisterInterface>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8000d9a:	f000 f913 	bl	8000fc4 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <MX_USB_PCD_Init+0xb0>)
 8000da0:	f00d fe60 	bl	800ea64 <USBD_Start>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8000daa:	f000 f90b 	bl	8000fc4 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200004d0 	.word	0x200004d0
 8000db8:	200007b4 	.word	0x200007b4
 8000dbc:	40016000 	.word	0x40016000
 8000dc0:	200000d4 	.word	0x200000d4
 8000dc4:	20000038 	.word	0x20000038
 8000dc8:	200000b8 	.word	0x200000b8

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	@ 0x30
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de2:	4b72      	ldr	r3, [pc, #456]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000de8:	4a70      	ldr	r2, [pc, #448]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000dea:	f043 0310 	orr.w	r3, r3, #16
 8000dee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000df2:	4b6e      	ldr	r3, [pc, #440]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	61bb      	str	r3, [r7, #24]
 8000dfe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e00:	4b6a      	ldr	r3, [pc, #424]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e06:	4a69      	ldr	r2, [pc, #420]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e10:	4b66      	ldr	r3, [pc, #408]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1e:	4b63      	ldr	r3, [pc, #396]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e24:	4a61      	ldr	r2, [pc, #388]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e2e:	4b5f      	ldr	r3, [pc, #380]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b5b      	ldr	r3, [pc, #364]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e42:	4a5a      	ldr	r2, [pc, #360]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e4c:	4b57      	ldr	r3, [pc, #348]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	4b54      	ldr	r3, [pc, #336]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e60:	4a52      	ldr	r2, [pc, #328]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e6a:	4b50      	ldr	r3, [pc, #320]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e78:	4b4c      	ldr	r3, [pc, #304]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e7e:	4a4b      	ldr	r2, [pc, #300]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e88:	4b48      	ldr	r3, [pc, #288]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e8e:	f003 0308 	and.w	r3, r3, #8
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e96:	4b45      	ldr	r3, [pc, #276]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e9c:	4a43      	ldr	r2, [pc, #268]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ea2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ea6:	4b41      	ldr	r3, [pc, #260]	@ (8000fac <MX_GPIO_Init+0x1e0>)
 8000ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000eb4:	2332      	movs	r3, #50	@ 0x32
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec4:	230b      	movs	r3, #11
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4838      	ldr	r0, [pc, #224]	@ (8000fb0 <MX_GPIO_Init+0x1e4>)
 8000ed0:	f001 fb64 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ed4:	2384      	movs	r3, #132	@ 0x84
 8000ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee4:	230b      	movs	r3, #11
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	4831      	ldr	r0, [pc, #196]	@ (8000fb4 <MX_GPIO_Init+0x1e8>)
 8000ef0:	f001 fb54 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000ef4:	2310      	movs	r3, #16
 8000ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	482b      	ldr	r0, [pc, #172]	@ (8000fb4 <MX_GPIO_Init+0x1e8>)
 8000f08:	f001 fb48 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8000f0c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f12:	2303      	movs	r3, #3
 8000f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4825      	ldr	r0, [pc, #148]	@ (8000fb8 <MX_GPIO_Init+0x1ec>)
 8000f22:	f001 fb3b 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f34:	2302      	movs	r3, #2
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f38:	230b      	movs	r3, #11
 8000f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	481d      	ldr	r0, [pc, #116]	@ (8000fb8 <MX_GPIO_Init+0x1ec>)
 8000f44:	f001 fb2a 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000f48:	2380      	movs	r3, #128	@ 0x80
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <MX_GPIO_Init+0x1f0>)
 8000f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4819      	ldr	r0, [pc, #100]	@ (8000fc0 <MX_GPIO_Init+0x1f4>)
 8000f5c:	f001 fb1e 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000f60:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f72:	230b      	movs	r3, #11
 8000f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4810      	ldr	r0, [pc, #64]	@ (8000fc0 <MX_GPIO_Init+0x1f4>)
 8000f7e:	f001 fb0d 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000f82:	23c0      	movs	r3, #192	@ 0xc0
 8000f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f92:	2308      	movs	r3, #8
 8000f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4806      	ldr	r0, [pc, #24]	@ (8000fb8 <MX_GPIO_Init+0x1ec>)
 8000f9e:	f001 fafd 	bl	800259c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3730      	adds	r7, #48	@ 0x30
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	44020c00 	.word	0x44020c00
 8000fb0:	42020800 	.word	0x42020800
 8000fb4:	42020000 	.word	0x42020000
 8000fb8:	42020400 	.word	0x42020400
 8000fbc:	10110000 	.word	0x10110000
 8000fc0:	42021800 	.word	0x42021800

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <Error_Handler+0x8>

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <HAL_HASH_MspInit+0x34>)
 8000fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fee:	4a09      	ldr	r2, [pc, #36]	@ (8001014 <HAL_HASH_MspInit+0x34>)
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_HASH_MspInit+0x34>)
 8000ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	44020c00 	.word	0x44020c00

08001018 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0cc      	sub	sp, #304	@ 0x130
 800101c:	af00      	add	r7, sp, #0
 800101e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001022:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001026:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001038:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800103c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001040:	4618      	mov	r0, r3
 8001042:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001046:	461a      	mov	r2, r3
 8001048:	2100      	movs	r1, #0
 800104a:	f00f f933 	bl	80102b4 <memset>
  if(hi2c->Instance==I2C1)
 800104e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001052:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a33      	ldr	r2, [pc, #204]	@ (8001128 <HAL_I2C_MspInit+0x110>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d15e      	bne.n	800111e <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001060:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001064:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001068:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001074:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001078:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800107c:	2200      	movs	r2, #0
 800107e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	4618      	mov	r0, r3
 8001088:	f004 f9f4 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8001092:	f7ff ff97 	bl	8000fc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b25      	ldr	r3, [pc, #148]	@ (800112c <HAL_I2C_MspInit+0x114>)
 8001098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800109c:	4a23      	ldr	r2, [pc, #140]	@ (800112c <HAL_I2C_MspInit+0x114>)
 800109e:	f043 0302 	orr.w	r3, r3, #2
 80010a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010a6:	4b21      	ldr	r3, [pc, #132]	@ (800112c <HAL_I2C_MspInit+0x114>)
 80010a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ac:	f003 0202 	and.w	r2, r3, #2
 80010b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80010b4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80010be:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80010c2:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010cc:	2312      	movs	r3, #18
 80010ce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010de:	2304      	movs	r3, #4
 80010e0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80010e8:	4619      	mov	r1, r3
 80010ea:	4811      	ldr	r0, [pc, #68]	@ (8001130 <HAL_I2C_MspInit+0x118>)
 80010ec:	f001 fa56 	bl	800259c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f0:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <HAL_I2C_MspInit+0x114>)
 80010f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010f6:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <HAL_I2C_MspInit+0x114>)
 80010f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010fc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001100:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <HAL_I2C_MspInit+0x114>)
 8001102:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001106:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800110a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800110e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001118:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800111c:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800111e:	bf00      	nop
 8001120:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40005400 	.word	0x40005400
 800112c:	44020c00 	.word	0x44020c00
 8001130:	42020400 	.word	0x42020400

08001134 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0c6      	sub	sp, #280	@ 0x118
 8001138:	af00      	add	r7, sp, #0
 800113a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800113e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001142:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001144:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800114c:	4618      	mov	r0, r3
 800114e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001152:	461a      	mov	r2, r3
 8001154:	2100      	movs	r1, #0
 8001156:	f00f f8ad 	bl	80102b4 <memset>
  if(hrng->Instance==RNG)
 800115a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800115e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a1d      	ldr	r2, [pc, #116]	@ (80011dc <HAL_RNG_MspInit+0xa8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d131      	bne.n	80011d0 <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800116c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001170:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001174:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001180:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001188:	2200      	movs	r2, #0
 800118a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4618      	mov	r0, r3
 8001194:	f004 f96e 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 800119e:	f7ff ff11 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80011a2:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <HAL_RNG_MspInit+0xac>)
 80011a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011a8:	4a0d      	ldr	r2, [pc, #52]	@ (80011e0 <HAL_RNG_MspInit+0xac>)
 80011aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <HAL_RNG_MspInit+0xac>)
 80011b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b8:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80011bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011ce:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80011d0:	bf00      	nop
 80011d2:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	420c0800 	.word	0x420c0800
 80011e0:	44020c00 	.word	0x44020c00

080011e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0c6      	sub	sp, #280	@ 0x118
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80011f2:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011fc:	4618      	mov	r0, r3
 80011fe:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001202:	461a      	mov	r2, r3
 8001204:	2100      	movs	r1, #0
 8001206:	f00f f855 	bl	80102b4 <memset>
  if(hrtc->Instance==RTC)
 800120a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800120e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a21      	ldr	r2, [pc, #132]	@ (800129c <HAL_RTC_MspInit+0xb8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d13a      	bne.n	8001292 <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800121c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001220:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001224:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001230:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800123c:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4618      	mov	r0, r3
 8001246:	f004 f915 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8001250:	f7ff feb8 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <HAL_RTC_MspInit+0xbc>)
 8001256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800125a:	4a11      	ldr	r2, [pc, #68]	@ (80012a0 <HAL_RTC_MspInit+0xbc>)
 800125c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001260:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001264:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <HAL_RTC_MspInit+0xbc>)
 8001266:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800126a:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <HAL_RTC_MspInit+0xbc>)
 800126c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001270:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001274:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_RTC_MspInit+0xbc>)
 8001276:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800127a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800127e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001282:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800128c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001290:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001292:	bf00      	nop
 8001294:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	44007800 	.word	0x44007800
 80012a0:	44020c00 	.word	0x44020c00

080012a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b0ce      	sub	sp, #312	@ 0x138
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012ae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80012b2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012c8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80012cc:	4618      	mov	r0, r3
 80012ce:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80012d2:	461a      	mov	r2, r3
 80012d4:	2100      	movs	r1, #0
 80012d6:	f00e ffed 	bl	80102b4 <memset>
  if(hspi->Instance==SPI1)
 80012da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012de:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a49      	ldr	r2, [pc, #292]	@ (800140c <HAL_SPI_MspInit+0x168>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	f040 808a 	bne.w	8001402 <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012f2:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80012f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001302:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001306:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800130a:	2200      	movs	r2, #0
 800130c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	4618      	mov	r0, r3
 8001316:	f004 f8ad 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8001320:	f7ff fe50 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001324:	4b3a      	ldr	r3, [pc, #232]	@ (8001410 <HAL_SPI_MspInit+0x16c>)
 8001326:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800132a:	4a39      	ldr	r2, [pc, #228]	@ (8001410 <HAL_SPI_MspInit+0x16c>)
 800132c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001330:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001334:	4b36      	ldr	r3, [pc, #216]	@ (8001410 <HAL_SPI_MspInit+0x16c>)
 8001336:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800133a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800133e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001342:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800134c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001350:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b2f      	ldr	r3, [pc, #188]	@ (8001410 <HAL_SPI_MspInit+0x16c>)
 8001354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001358:	4a2d      	ldr	r2, [pc, #180]	@ (8001410 <HAL_SPI_MspInit+0x16c>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001362:	4b2b      	ldr	r3, [pc, #172]	@ (8001410 <HAL_SPI_MspInit+0x16c>)
 8001364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001368:	f003 0201 	and.w	r2, r3, #1
 800136c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001370:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800137a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800137e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001380:	4b23      	ldr	r3, [pc, #140]	@ (8001410 <HAL_SPI_MspInit+0x16c>)
 8001382:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001386:	4a22      	ldr	r2, [pc, #136]	@ (8001410 <HAL_SPI_MspInit+0x16c>)
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001390:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <HAL_SPI_MspInit+0x16c>)
 8001392:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001396:	f003 0208 	and.w	r2, r3, #8
 800139a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800139e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013ac:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80013ae:	2360      	movs	r3, #96	@ 0x60
 80013b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013c6:	2305      	movs	r3, #5
 80013c8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80013d0:	4619      	mov	r1, r3
 80013d2:	4810      	ldr	r0, [pc, #64]	@ (8001414 <HAL_SPI_MspInit+0x170>)
 80013d4:	f001 f8e2 	bl	800259c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013f0:	2305      	movs	r3, #5
 80013f2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f6:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80013fa:	4619      	mov	r1, r3
 80013fc:	4806      	ldr	r0, [pc, #24]	@ (8001418 <HAL_SPI_MspInit+0x174>)
 80013fe:	f001 f8cd 	bl	800259c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001402:	bf00      	nop
 8001404:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40013000 	.word	0x40013000
 8001410:	44020c00 	.word	0x44020c00
 8001414:	42020000 	.word	0x42020000
 8001418:	42020c00 	.word	0x42020c00

0800141c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b0d2      	sub	sp, #328	@ 0x148
 8001420:	af00      	add	r7, sp, #0
 8001422:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001426:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800142a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800143c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001440:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001444:	4618      	mov	r0, r3
 8001446:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800144a:	461a      	mov	r2, r3
 800144c:	2100      	movs	r1, #0
 800144e:	f00e ff31 	bl	80102b4 <memset>
  if(huart->Instance==USART2)
 8001452:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001456:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4ac7      	ldr	r2, [pc, #796]	@ (800177c <HAL_UART_MspInit+0x360>)
 8001460:	4293      	cmp	r3, r2
 8001462:	f040 808a 	bne.w	800157a <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001466:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800146a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800146e:	f04f 0202 	mov.w	r2, #2
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800147a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800147e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001482:	2200      	movs	r2, #0
 8001484:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001486:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800148a:	4618      	mov	r0, r3
 800148c:	f003 fff2 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8001496:	f7ff fd95 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800149a:	4bb9      	ldr	r3, [pc, #740]	@ (8001780 <HAL_UART_MspInit+0x364>)
 800149c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014a0:	4ab7      	ldr	r2, [pc, #732]	@ (8001780 <HAL_UART_MspInit+0x364>)
 80014a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80014aa:	4bb5      	ldr	r3, [pc, #724]	@ (8001780 <HAL_UART_MspInit+0x364>)
 80014ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014b0:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 80014b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80014b8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80014c2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014c6:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	4bad      	ldr	r3, [pc, #692]	@ (8001780 <HAL_UART_MspInit+0x364>)
 80014ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ce:	4aac      	ldr	r2, [pc, #688]	@ (8001780 <HAL_UART_MspInit+0x364>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014d8:	4ba9      	ldr	r3, [pc, #676]	@ (8001780 <HAL_UART_MspInit+0x364>)
 80014da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014de:	f003 0201 	and.w	r2, r3, #1
 80014e2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80014e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80014f0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014f4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f6:	4ba2      	ldr	r3, [pc, #648]	@ (8001780 <HAL_UART_MspInit+0x364>)
 80014f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014fc:	4aa0      	ldr	r2, [pc, #640]	@ (8001780 <HAL_UART_MspInit+0x364>)
 80014fe:	f043 0308 	orr.w	r3, r3, #8
 8001502:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001506:	4b9e      	ldr	r3, [pc, #632]	@ (8001780 <HAL_UART_MspInit+0x364>)
 8001508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800150c:	f003 0208 	and.w	r2, r3, #8
 8001510:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001514:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800151e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001522:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001524:	2308      	movs	r3, #8
 8001526:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800153c:	2307      	movs	r3, #7
 800153e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001546:	4619      	mov	r1, r3
 8001548:	488e      	ldr	r0, [pc, #568]	@ (8001784 <HAL_UART_MspInit+0x368>)
 800154a:	f001 f827 	bl	800259c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800154e:	2320      	movs	r3, #32
 8001550:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001566:	2307      	movs	r3, #7
 8001568:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156c:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001570:	4619      	mov	r1, r3
 8001572:	4885      	ldr	r0, [pc, #532]	@ (8001788 <HAL_UART_MspInit+0x36c>)
 8001574:	f001 f812 	bl	800259c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001578:	e0fb      	b.n	8001772 <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART3)
 800157a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800157e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a81      	ldr	r2, [pc, #516]	@ (800178c <HAL_UART_MspInit+0x370>)
 8001588:	4293      	cmp	r3, r2
 800158a:	f040 808c 	bne.w	80016a6 <HAL_UART_MspInit+0x28a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800158e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001592:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001596:	f04f 0204 	mov.w	r2, #4
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80015a6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015aa:	2200      	movs	r2, #0
 80015ac:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 ff5e 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 80015be:	f7ff fd01 	bl	8000fc4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001780 <HAL_UART_MspInit+0x364>)
 80015c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015c8:	4a6d      	ldr	r2, [pc, #436]	@ (8001780 <HAL_UART_MspInit+0x364>)
 80015ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015ce:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80015d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001780 <HAL_UART_MspInit+0x364>)
 80015d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015d8:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80015dc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80015e0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80015ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015ee:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f0:	4b63      	ldr	r3, [pc, #396]	@ (8001780 <HAL_UART_MspInit+0x364>)
 80015f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015f6:	4a62      	ldr	r2, [pc, #392]	@ (8001780 <HAL_UART_MspInit+0x364>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001600:	4b5f      	ldr	r3, [pc, #380]	@ (8001780 <HAL_UART_MspInit+0x364>)
 8001602:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001606:	f003 0202 	and.w	r2, r3, #2
 800160a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800160e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001618:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800161c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800161e:	4b58      	ldr	r3, [pc, #352]	@ (8001780 <HAL_UART_MspInit+0x364>)
 8001620:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001624:	4a56      	ldr	r2, [pc, #344]	@ (8001780 <HAL_UART_MspInit+0x364>)
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800162e:	4b54      	ldr	r3, [pc, #336]	@ (8001780 <HAL_UART_MspInit+0x364>)
 8001630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001634:	f003 0208 	and.w	r2, r3, #8
 8001638:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800163c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001646:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800164a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800164c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001650:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001666:	2307      	movs	r3, #7
 8001668:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001670:	4619      	mov	r1, r3
 8001672:	4847      	ldr	r0, [pc, #284]	@ (8001790 <HAL_UART_MspInit+0x374>)
 8001674:	f000 ff92 	bl	800259c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001678:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800167c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001692:	2307      	movs	r3, #7
 8001694:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001698:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800169c:	4619      	mov	r1, r3
 800169e:	483a      	ldr	r0, [pc, #232]	@ (8001788 <HAL_UART_MspInit+0x36c>)
 80016a0:	f000 ff7c 	bl	800259c <HAL_GPIO_Init>
}
 80016a4:	e065      	b.n	8001772 <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART6)
 80016a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80016aa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a38      	ldr	r2, [pc, #224]	@ (8001794 <HAL_UART_MspInit+0x378>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d15c      	bne.n	8001772 <HAL_UART_MspInit+0x356>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80016b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80016bc:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80016c0:	f04f 0220 	mov.w	r2, #32
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 80016cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80016d0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016d4:	2200      	movs	r2, #0
 80016d6:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 fec9 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 80016e8:	f7ff fc6c 	bl	8000fc4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80016ec:	4b24      	ldr	r3, [pc, #144]	@ (8001780 <HAL_UART_MspInit+0x364>)
 80016ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016f2:	4a23      	ldr	r2, [pc, #140]	@ (8001780 <HAL_UART_MspInit+0x364>)
 80016f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016f8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80016fc:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <HAL_UART_MspInit+0x364>)
 80016fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001702:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8001706:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800170a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001714:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001718:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <HAL_UART_MspInit+0x364>)
 800171c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001720:	4a17      	ldr	r2, [pc, #92]	@ (8001780 <HAL_UART_MspInit+0x364>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <HAL_UART_MspInit+0x364>)
 800172c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001730:	f003 0204 	and.w	r2, r3, #4
 8001734:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001738:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001742:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001746:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001748:	23c0      	movs	r3, #192	@ 0xc0
 800174a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001760:	2307      	movs	r3, #7
 8001762:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001766:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800176a:	4619      	mov	r1, r3
 800176c:	480a      	ldr	r0, [pc, #40]	@ (8001798 <HAL_UART_MspInit+0x37c>)
 800176e:	f000 ff15 	bl	800259c <HAL_GPIO_Init>
}
 8001772:	bf00      	nop
 8001774:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40004400 	.word	0x40004400
 8001780:	44020c00 	.word	0x44020c00
 8001784:	42020000 	.word	0x42020000
 8001788:	42020c00 	.word	0x42020c00
 800178c:	40004800 	.word	0x40004800
 8001790:	42020400 	.word	0x42020400
 8001794:	40006400 	.word	0x40006400
 8001798:	42020800 	.word	0x42020800

0800179c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b0c6      	sub	sp, #280	@ 0x118
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017aa:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80017b4:	4618      	mov	r0, r3
 80017b6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80017ba:	461a      	mov	r2, r3
 80017bc:	2100      	movs	r1, #0
 80017be:	f00e fd79 	bl	80102b4 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80017c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017c6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a22      	ldr	r2, [pc, #136]	@ (8001858 <HAL_PCD_MspInit+0xbc>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d13b      	bne.n	800184c <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80017d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017d8:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0310 	mov.w	r3, #16
 80017e4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80017e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80017f0:	2230      	movs	r2, #48	@ 0x30
 80017f2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 fe3a 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 8001806:	f7ff fbdd 	bl	8000fc4 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 800180a:	f002 fea9 	bl	8004560 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800180e:	4b13      	ldr	r3, [pc, #76]	@ (800185c <HAL_PCD_MspInit+0xc0>)
 8001810:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001814:	4a11      	ldr	r2, [pc, #68]	@ (800185c <HAL_PCD_MspInit+0xc0>)
 8001816:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800181a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800181e:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <HAL_PCD_MspInit+0xc0>)
 8001820:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001824:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8001828:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800182c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001836:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800183a:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	204a      	movs	r0, #74	@ 0x4a
 8001842:	f000 fd4b 	bl	80022dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 8001846:	204a      	movs	r0, #74	@ 0x4a
 8001848:	f000 fd62 	bl	8002310 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 800184c:	bf00      	nop
 800184e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40016000 	.word	0x40016000
 800185c:	44020c00 	.word	0x44020c00

08001860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <NMI_Handler+0x4>

08001868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <HardFault_Handler+0x4>

08001870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <MemManage_Handler+0x4>

08001878 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <UsageFault_Handler+0x4>

08001888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b6:	f000 fc15 	bl	80020e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}

080018be <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f000 fa6e 	bl	8001da4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <USB_DRD_FS_IRQHandler+0x10>)
 80018d2:	f001 fad7 	bl	8002e84 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200004d0 	.word	0x200004d0

080018e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e00a      	b.n	8001908 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018f2:	f3af 8000 	nop.w
 80018f6:	4601      	mov	r1, r0
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	60ba      	str	r2, [r7, #8]
 80018fe:	b2ca      	uxtb	r2, r1
 8001900:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3301      	adds	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	429a      	cmp	r2, r3
 800190e:	dbf0      	blt.n	80018f2 <_read+0x12>
  }

  return len;
 8001910:	687b      	ldr	r3, [r7, #4]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e009      	b.n	8001940 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	60ba      	str	r2, [r7, #8]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f000 fabb 	bl	8001eb0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	dbf1      	blt.n	800192c <_write+0x12>
  }
  return len;
 8001948:	687b      	ldr	r3, [r7, #4]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <_close>:

int _close(int file)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800197a:	605a      	str	r2, [r3, #4]
  return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_isatty>:

int _isatty(int file)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c4:	4a14      	ldr	r2, [pc, #80]	@ (8001a18 <_sbrk+0x5c>)
 80019c6:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <_sbrk+0x60>)
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d0:	4b13      	ldr	r3, [pc, #76]	@ (8001a20 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d102      	bne.n	80019de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d8:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <_sbrk+0x64>)
 80019da:	4a12      	ldr	r2, [pc, #72]	@ (8001a24 <_sbrk+0x68>)
 80019dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019de:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d207      	bcs.n	80019fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ec:	f00e fcb0 	bl	8010350 <__errno>
 80019f0:	4603      	mov	r3, r0
 80019f2:	220c      	movs	r2, #12
 80019f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	e009      	b.n	8001a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019fc:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a02:	4b07      	ldr	r3, [pc, #28]	@ (8001a20 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	4a05      	ldr	r2, [pc, #20]	@ (8001a20 <_sbrk+0x64>)
 8001a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200a0000 	.word	0x200a0000
 8001a1c:	00000500 	.word	0x00000500
 8001a20:	20000a90 	.word	0x20000a90
 8001a24:	200013b0 	.word	0x200013b0

08001a28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a2e:	4b35      	ldr	r3, [pc, #212]	@ (8001b04 <SystemInit+0xdc>)
 8001a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a34:	4a33      	ldr	r2, [pc, #204]	@ (8001b04 <SystemInit+0xdc>)
 8001a36:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a3a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001a3e:	4b32      	ldr	r3, [pc, #200]	@ (8001b08 <SystemInit+0xe0>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001a44:	4b30      	ldr	r3, [pc, #192]	@ (8001b08 <SystemInit+0xe0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b08 <SystemInit+0xe0>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001a50:	4b2d      	ldr	r3, [pc, #180]	@ (8001b08 <SystemInit+0xe0>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	492c      	ldr	r1, [pc, #176]	@ (8001b08 <SystemInit+0xe0>)
 8001a56:	4b2d      	ldr	r3, [pc, #180]	@ (8001b0c <SystemInit+0xe4>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b08 <SystemInit+0xe0>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001a62:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <SystemInit+0xe0>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001a68:	4b27      	ldr	r3, [pc, #156]	@ (8001b08 <SystemInit+0xe0>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001a6e:	4b26      	ldr	r3, [pc, #152]	@ (8001b08 <SystemInit+0xe0>)
 8001a70:	4a27      	ldr	r2, [pc, #156]	@ (8001b10 <SystemInit+0xe8>)
 8001a72:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001a74:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <SystemInit+0xe0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001a7a:	4b23      	ldr	r3, [pc, #140]	@ (8001b08 <SystemInit+0xe0>)
 8001a7c:	4a24      	ldr	r2, [pc, #144]	@ (8001b10 <SystemInit+0xe8>)
 8001a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001a80:	4b21      	ldr	r3, [pc, #132]	@ (8001b08 <SystemInit+0xe0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001a86:	4b20      	ldr	r3, [pc, #128]	@ (8001b08 <SystemInit+0xe0>)
 8001a88:	4a21      	ldr	r2, [pc, #132]	@ (8001b10 <SystemInit+0xe8>)
 8001a8a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b08 <SystemInit+0xe0>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001a92:	4b1d      	ldr	r3, [pc, #116]	@ (8001b08 <SystemInit+0xe0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a1c      	ldr	r2, [pc, #112]	@ (8001b08 <SystemInit+0xe0>)
 8001a98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <SystemInit+0xe0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001aa4:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <SystemInit+0xdc>)
 8001aa6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001aaa:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001aac:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <SystemInit+0xec>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001ab4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001abc:	d003      	beq.n	8001ac6 <SystemInit+0x9e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001ac4:	d117      	bne.n	8001af6 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001ac6:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <SystemInit+0xec>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001ad2:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <SystemInit+0xec>)
 8001ad4:	4a10      	ldr	r2, [pc, #64]	@ (8001b18 <SystemInit+0xf0>)
 8001ad6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <SystemInit+0xec>)
 8001ada:	4a10      	ldr	r2, [pc, #64]	@ (8001b1c <SystemInit+0xf4>)
 8001adc:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001ade:	4b0d      	ldr	r3, [pc, #52]	@ (8001b14 <SystemInit+0xec>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8001b14 <SystemInit+0xec>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <SystemInit+0xec>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4a09      	ldr	r2, [pc, #36]	@ (8001b14 <SystemInit+0xec>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	61d3      	str	r3, [r2, #28]
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00
 8001b08:	44020c00 	.word	0x44020c00
 8001b0c:	eae2eae3 	.word	0xeae2eae3
 8001b10:	01010280 	.word	0x01010280
 8001b14:	40022000 	.word	0x40022000
 8001b18:	08192a3b 	.word	0x08192a3b
 8001b1c:	4c5d6e7f 	.word	0x4c5d6e7f

08001b20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b20:	480d      	ldr	r0, [pc, #52]	@ (8001b58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b22:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b24:	f7ff ff80 	bl	8001a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b28:	480c      	ldr	r0, [pc, #48]	@ (8001b5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b2a:	490d      	ldr	r1, [pc, #52]	@ (8001b60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <LoopForever+0xe>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b40:	4c0a      	ldr	r4, [pc, #40]	@ (8001b6c <LoopForever+0x16>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b4e:	f00e fc05 	bl	801035c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b52:	f7fe fd8d 	bl	8000670 <main>

08001b56 <LoopForever>:

LoopForever:
    b LoopForever
 8001b56:	e7fe      	b.n	8001b56 <LoopForever>
  ldr   r0, =_estack
 8001b58:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b60:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001b64:	08011428 	.word	0x08011428
  ldr r2, =_sbss
 8001b68:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001b6c:	200013ac 	.word	0x200013ac

08001b70 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b70:	e7fe      	b.n	8001b70 <ADC1_IRQHandler>
	...

08001b74 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	@ 0x30
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d009      	beq.n	8001b9c <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d006      	beq.n	8001b9c <BSP_LED_Init+0x28>
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d003      	beq.n	8001b9c <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b94:	f06f 0301 	mvn.w	r3, #1
 8001b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b9a:	e055      	b.n	8001c48 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d10f      	bne.n	8001bc2 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8001ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c54 <BSP_LED_Init+0xe0>)
 8001ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8001c54 <BSP_LED_Init+0xe0>)
 8001baa:	f043 0320 	orr.w	r3, r3, #32
 8001bae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bb2:	4b28      	ldr	r3, [pc, #160]	@ (8001c54 <BSP_LED_Init+0xe0>)
 8001bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	e021      	b.n	8001c06 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10f      	bne.n	8001be8 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8001bc8:	4b22      	ldr	r3, [pc, #136]	@ (8001c54 <BSP_LED_Init+0xe0>)
 8001bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bce:	4a21      	ldr	r2, [pc, #132]	@ (8001c54 <BSP_LED_Init+0xe0>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <BSP_LED_Init+0xe0>)
 8001bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	e00e      	b.n	8001c06 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001be8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <BSP_LED_Init+0xe0>)
 8001bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bee:	4a19      	ldr	r2, [pc, #100]	@ (8001c54 <BSP_LED_Init+0xe0>)
 8001bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bf4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bf8:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <BSP_LED_Init+0xe0>)
 8001bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	4a13      	ldr	r2, [pc, #76]	@ (8001c58 <BSP_LED_Init+0xe4>)
 8001c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c0e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c5c <BSP_LED_Init+0xe8>)
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	f107 0218 	add.w	r2, r7, #24
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fcb6 	bl	800259c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <BSP_LED_Init+0xe8>)
 8001c34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	4a07      	ldr	r2, [pc, #28]	@ (8001c58 <BSP_LED_Init+0xe4>)
 8001c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c40:	2200      	movs	r2, #0
 8001c42:	4619      	mov	r1, r3
 8001c44:	f000 fdfc 	bl	8002840 <HAL_GPIO_WritePin>
  }

  return ret;
 8001c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3730      	adds	r7, #48	@ 0x30
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	44020c00 	.word	0x44020c00
 8001c58:	080113b0 	.word	0x080113b0
 8001c5c:	2000000c 	.word	0x2000000c

08001c60 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d009      	beq.n	8001c88 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <BSP_LED_Toggle+0x28>
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d003      	beq.n	8001c88 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c80:	f06f 0301 	mvn.w	r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	e00b      	b.n	8001ca0 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	4a08      	ldr	r2, [pc, #32]	@ (8001cac <BSP_LED_Toggle+0x4c>)
 8001c8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	4907      	ldr	r1, [pc, #28]	@ (8001cb0 <BSP_LED_Toggle+0x50>)
 8001c94:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f000 fde8 	bl	8002870 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000000c 	.word	0x2000000c
 8001cb0:	080113b0 	.word	0x080113b0

08001cb4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	71fb      	strb	r3, [r7, #7]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001cc4:	4b30      	ldr	r3, [pc, #192]	@ (8001d88 <BSP_PB_Init+0xd4>)
 8001cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cca:	4a2f      	ldr	r2, [pc, #188]	@ (8001d88 <BSP_PB_Init+0xd4>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d88 <BSP_PB_Init+0xd4>)
 8001cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ce6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cec:	2302      	movs	r3, #2
 8001cee:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001cf0:	79bb      	ldrb	r3, [r7, #6]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10c      	bne.n	8001d10 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	4a23      	ldr	r2, [pc, #140]	@ (8001d8c <BSP_PB_Init+0xd8>)
 8001cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d02:	f107 020c 	add.w	r2, r7, #12
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 fc47 	bl	800259c <HAL_GPIO_Init>
 8001d0e:	e036      	b.n	8001d7e <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001d10:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <BSP_PB_Init+0xdc>)
 8001d12:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	4a1d      	ldr	r2, [pc, #116]	@ (8001d8c <BSP_PB_Init+0xd8>)
 8001d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1c:	f107 020c 	add.w	r2, r7, #12
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fc3a 	bl	800259c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001d28:	79fa      	ldrb	r2, [r7, #7]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4a18      	ldr	r2, [pc, #96]	@ (8001d94 <BSP_PB_Init+0xe0>)
 8001d34:	441a      	add	r2, r3
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	4917      	ldr	r1, [pc, #92]	@ (8001d98 <BSP_PB_Init+0xe4>)
 8001d3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4610      	mov	r0, r2
 8001d42:	f000 fbcf 	bl	80024e4 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001d46:	79fa      	ldrb	r2, [r7, #7]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4a10      	ldr	r2, [pc, #64]	@ (8001d94 <BSP_PB_Init+0xe0>)
 8001d52:	1898      	adds	r0, r3, r2
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	4a11      	ldr	r2, [pc, #68]	@ (8001d9c <BSP_PB_Init+0xe8>)
 8001d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	2100      	movs	r1, #0
 8001d60:	f000 fb94 	bl	800248c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001d64:	2018      	movs	r0, #24
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	4a0d      	ldr	r2, [pc, #52]	@ (8001da0 <BSP_PB_Init+0xec>)
 8001d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	4619      	mov	r1, r3
 8001d72:	f000 fab3 	bl	80022dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001d76:	2318      	movs	r3, #24
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fac9 	bl	8002310 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	44020c00 	.word	0x44020c00
 8001d8c:	20000018 	.word	0x20000018
 8001d90:	10110000 	.word	0x10110000
 8001d94:	20000a94 	.word	0x20000a94
 8001d98:	080113b8 	.word	0x080113b8
 8001d9c:	2000001c 	.word	0x2000001c
 8001da0:	20000020 	.word	0x20000020

08001da4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001dae:	79fa      	ldrb	r2, [r7, #7]
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <BSP_PB_IRQHandler+0x28>)
 8001dba:	4413      	add	r3, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 fba5 	bl	800250c <HAL_EXTI_IRQHandler>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000a94 	.word	0x20000a94

08001dd0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001dfe:	f06f 0301 	mvn.w	r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	e018      	b.n	8001e38 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	2294      	movs	r2, #148	@ 0x94
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <BSP_COM_Init+0x5c>)
 8001e10:	4413      	add	r3, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f870 	bl	8001ef8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	2294      	movs	r2, #148	@ 0x94
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	4a08      	ldr	r2, [pc, #32]	@ (8001e44 <BSP_COM_Init+0x5c>)
 8001e22:	4413      	add	r3, r2
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f80e 	bl	8001e48 <MX_USART_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001e32:	f06f 0303 	mvn.w	r3, #3
 8001e36:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001e38:	68fb      	ldr	r3, [r7, #12]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000aa0 	.word	0x20000aa0

08001e48 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001e52:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <MX_USART_Init+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	220c      	movs	r2, #12
 8001e66:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	895b      	ldrh	r3, [r3, #10]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	891b      	ldrh	r3, [r3, #8]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	899b      	ldrh	r3, [r3, #12]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e94:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f008 fffe 	bl	800ae9e <HAL_UART_Init>
 8001ea2:	4603      	mov	r3, r0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000008 	.word	0x20000008

08001eb0 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001eb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <__io_putchar+0x30>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2394      	movs	r3, #148	@ 0x94
 8001ec0:	fb02 f303 	mul.w	r3, r2, r3
 8001ec4:	4a07      	ldr	r2, [pc, #28]	@ (8001ee4 <__io_putchar+0x34>)
 8001ec6:	1898      	adds	r0, r3, r2
 8001ec8:	1d39      	adds	r1, r7, #4
 8001eca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f009 f835 	bl	800af3e <HAL_UART_Transmit>
  return ch;
 8001ed4:	687b      	ldr	r3, [r7, #4]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000b34 	.word	0x20000b34
 8001ee4:	20000aa0 	.word	0x20000aa0

08001ee8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7ff ff6f 	bl	8001dd0 <BSP_PB_Callback>
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	@ 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001f00:	4b27      	ldr	r3, [pc, #156]	@ (8001fa0 <COM1_MspInit+0xa8>)
 8001f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f06:	4a26      	ldr	r2, [pc, #152]	@ (8001fa0 <COM1_MspInit+0xa8>)
 8001f08:	f043 0308 	orr.w	r3, r3, #8
 8001f0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f10:	4b23      	ldr	r3, [pc, #140]	@ (8001fa0 <COM1_MspInit+0xa8>)
 8001f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001f1e:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <COM1_MspInit+0xa8>)
 8001f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f24:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa0 <COM1_MspInit+0xa8>)
 8001f26:	f043 0308 	orr.w	r3, r3, #8
 8001f2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa0 <COM1_MspInit+0xa8>)
 8001f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001f3c:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <COM1_MspInit+0xa8>)
 8001f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f42:	4a17      	ldr	r2, [pc, #92]	@ (8001fa0 <COM1_MspInit+0xa8>)
 8001f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f48:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001f4c:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <COM1_MspInit+0xa8>)
 8001f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001f5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f5e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001f64:	2302      	movs	r3, #2
 8001f66:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001f6c:	2307      	movs	r3, #7
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	480b      	ldr	r0, [pc, #44]	@ (8001fa4 <COM1_MspInit+0xac>)
 8001f78:	f000 fb10 	bl	800259c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001f7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f80:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001f86:	2307      	movs	r3, #7
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4804      	ldr	r0, [pc, #16]	@ (8001fa4 <COM1_MspInit+0xac>)
 8001f92:	f000 fb03 	bl	800259c <HAL_GPIO_Init>
}
 8001f96:	bf00      	nop
 8001f98:	3728      	adds	r7, #40	@ 0x28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	44020c00 	.word	0x44020c00
 8001fa4:	42020c00 	.word	0x42020c00

08001fa8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fac:	2003      	movs	r0, #3
 8001fae:	f000 f98a 	bl	80022c6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001fb2:	f003 f8d5 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <HAL_Init+0x44>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	490b      	ldr	r1, [pc, #44]	@ (8001ff0 <HAL_Init+0x48>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff4 <HAL_Init+0x4c>)
 8001fca:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001fcc:	2004      	movs	r0, #4
 8001fce:	f000 f9cf 	bl	8002370 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fd2:	200f      	movs	r0, #15
 8001fd4:	f000 f810 	bl	8001ff8 <HAL_InitTick>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e002      	b.n	8001fe8 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe2:	f7fe fff5 	bl	8000fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	44020c00 	.word	0x44020c00
 8001ff0:	08011398 	.word	0x08011398
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002004:	4b33      	ldr	r3, [pc, #204]	@ (80020d4 <HAL_InitTick+0xdc>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e05c      	b.n	80020ca <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002010:	4b31      	ldr	r3, [pc, #196]	@ (80020d8 <HAL_InitTick+0xe0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b04      	cmp	r3, #4
 800201a:	d10c      	bne.n	8002036 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800201c:	4b2f      	ldr	r3, [pc, #188]	@ (80020dc <HAL_InitTick+0xe4>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b2c      	ldr	r3, [pc, #176]	@ (80020d4 <HAL_InitTick+0xdc>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800202a:	fbb3 f3f1 	udiv	r3, r3, r1
 800202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e037      	b.n	80020a6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002036:	f000 f9f3 	bl	8002420 <HAL_SYSTICK_GetCLKSourceConfig>
 800203a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d023      	beq.n	800208a <HAL_InitTick+0x92>
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d82d      	bhi.n	80020a4 <HAL_InitTick+0xac>
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_InitTick+0x5e>
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d00d      	beq.n	8002070 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002054:	e026      	b.n	80020a4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002056:	4b21      	ldr	r3, [pc, #132]	@ (80020dc <HAL_InitTick+0xe4>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b1e      	ldr	r3, [pc, #120]	@ (80020d4 <HAL_InitTick+0xdc>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	4619      	mov	r1, r3
 8002060:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002064:	fbb3 f3f1 	udiv	r3, r3, r1
 8002068:	fbb2 f3f3 	udiv	r3, r2, r3
 800206c:	60fb      	str	r3, [r7, #12]
        break;
 800206e:	e01a      	b.n	80020a6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002070:	4b18      	ldr	r3, [pc, #96]	@ (80020d4 <HAL_InitTick+0xdc>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800207a:	fbb3 f3f2 	udiv	r3, r3, r2
 800207e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	60fb      	str	r3, [r7, #12]
        break;
 8002088:	e00d      	b.n	80020a6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800208a:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <HAL_InitTick+0xdc>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002094:	fbb3 f3f2 	udiv	r3, r3, r2
 8002098:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800209c:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a0:	60fb      	str	r3, [r7, #12]
        break;
 80020a2:	e000      	b.n	80020a6 <HAL_InitTick+0xae>
        break;
 80020a4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f940 	bl	800232c <HAL_SYSTICK_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e009      	b.n	80020ca <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b6:	2200      	movs	r2, #0
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	f04f 30ff 	mov.w	r0, #4294967295
 80020be:	f000 f90d 	bl	80022dc <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80020c2:	4a07      	ldr	r2, [pc, #28]	@ (80020e0 <HAL_InitTick+0xe8>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000028 	.word	0x20000028
 80020d8:	e000e010 	.word	0xe000e010
 80020dc:	20000004 	.word	0x20000004
 80020e0:	20000024 	.word	0x20000024

080020e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020e8:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_IncTick+0x20>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <HAL_IncTick+0x24>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <HAL_IncTick+0x24>)
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000028 	.word	0x20000028
 8002108:	20000b38 	.word	0x20000b38

0800210c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return uwTick;
 8002110:	4b03      	ldr	r3, [pc, #12]	@ (8002120 <HAL_GetTick+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000b38 	.word	0x20000b38

08002124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7ff ffee 	bl	800210c <HAL_GetTick>
 8002130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d005      	beq.n	800214a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213e:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <HAL_Delay+0x44>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4413      	add	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800214a:	bf00      	nop
 800214c:	f7ff ffde 	bl	800210c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	429a      	cmp	r2, r3
 800215a:	d8f7      	bhi.n	800214c <HAL_Delay+0x28>
  {
  }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000028 	.word	0x20000028

0800216c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800217c:	4b0c      	ldr	r3, [pc, #48]	@ (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002188:	4013      	ands	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800219c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219e:	4a04      	ldr	r2, [pc, #16]	@ (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	60d3      	str	r3, [r2, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b8:	4b04      	ldr	r3, [pc, #16]	@ (80021cc <__NVIC_GetPriorityGrouping+0x18>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	f003 0307 	and.w	r3, r3, #7
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	db0b      	blt.n	80021fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	4907      	ldr	r1, [pc, #28]	@ (8002208 <__NVIC_EnableIRQ+0x38>)
 80021ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	2001      	movs	r0, #1
 80021f2:	fa00 f202 	lsl.w	r2, r0, r2
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000e100 	.word	0xe000e100

0800220c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800221c:	2b00      	cmp	r3, #0
 800221e:	db0a      	blt.n	8002236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	490c      	ldr	r1, [pc, #48]	@ (8002258 <__NVIC_SetPriority+0x4c>)
 8002226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	440b      	add	r3, r1
 8002230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002234:	e00a      	b.n	800224c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4908      	ldr	r1, [pc, #32]	@ (800225c <__NVIC_SetPriority+0x50>)
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	3b04      	subs	r3, #4
 8002244:	0112      	lsls	r2, r2, #4
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	440b      	add	r3, r1
 800224a:	761a      	strb	r2, [r3, #24]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000e100 	.word	0xe000e100
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	@ 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f1c3 0307 	rsb	r3, r3, #7
 800227a:	2b04      	cmp	r3, #4
 800227c:	bf28      	it	cs
 800227e:	2304      	movcs	r3, #4
 8002280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3304      	adds	r3, #4
 8002286:	2b06      	cmp	r3, #6
 8002288:	d902      	bls.n	8002290 <NVIC_EncodePriority+0x30>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3b03      	subs	r3, #3
 800228e:	e000      	b.n	8002292 <NVIC_EncodePriority+0x32>
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	401a      	ands	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	4313      	orrs	r3, r2
         );
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	@ 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ff4c 	bl	800216c <__NVIC_SetPriorityGrouping>
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022ea:	f7ff ff63 	bl	80021b4 <__NVIC_GetPriorityGrouping>
 80022ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68b9      	ldr	r1, [r7, #8]
 80022f4:	6978      	ldr	r0, [r7, #20]
 80022f6:	f7ff ffb3 	bl	8002260 <NVIC_EncodePriority>
 80022fa:	4602      	mov	r2, r0
 80022fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff ff82 	bl	800220c <__NVIC_SetPriority>
}
 8002308:	bf00      	nop
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ff56 	bl	80021d0 <__NVIC_EnableIRQ>
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800233c:	d301      	bcc.n	8002342 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800233e:	2301      	movs	r3, #1
 8002340:	e00d      	b.n	800235e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002342:	4a0a      	ldr	r2, [pc, #40]	@ (800236c <HAL_SYSTICK_Config+0x40>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800234a:	4b08      	ldr	r3, [pc, #32]	@ (800236c <HAL_SYSTICK_Config+0x40>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002350:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_SYSTICK_Config+0x40>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a05      	ldr	r2, [pc, #20]	@ (800236c <HAL_SYSTICK_Config+0x40>)
 8002356:	f043 0303 	orr.w	r3, r3, #3
 800235a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000e010 	.word	0xe000e010

08002370 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b04      	cmp	r3, #4
 800237c:	d844      	bhi.n	8002408 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800237e:	a201      	add	r2, pc, #4	@ (adr r2, 8002384 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002384:	080023a7 	.word	0x080023a7
 8002388:	080023c5 	.word	0x080023c5
 800238c:	080023e7 	.word	0x080023e7
 8002390:	08002409 	.word	0x08002409
 8002394:	08002399 	.word	0x08002399
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002398:	4b1f      	ldr	r3, [pc, #124]	@ (8002418 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1e      	ldr	r2, [pc, #120]	@ (8002418 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	6013      	str	r3, [r2, #0]
      break;
 80023a4:	e031      	b.n	800240a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80023a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002418 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002418 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023ac:	f023 0304 	bic.w	r3, r3, #4
 80023b0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80023b2:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80023b8:	4a18      	ldr	r2, [pc, #96]	@ (800241c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023ba:	f023 030c 	bic.w	r3, r3, #12
 80023be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80023c2:	e022      	b.n	800240a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80023c4:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a13      	ldr	r2, [pc, #76]	@ (8002418 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023ca:	f023 0304 	bic.w	r3, r3, #4
 80023ce:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80023d0:	4b12      	ldr	r3, [pc, #72]	@ (800241c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80023d6:	f023 030c 	bic.w	r3, r3, #12
 80023da:	4a10      	ldr	r2, [pc, #64]	@ (800241c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80023e4:	e011      	b.n	800240a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80023e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002418 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023ec:	f023 0304 	bic.w	r3, r3, #4
 80023f0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80023f2:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80023f8:	f023 030c 	bic.w	r3, r3, #12
 80023fc:	4a07      	ldr	r2, [pc, #28]	@ (800241c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023fe:	f043 0308 	orr.w	r3, r3, #8
 8002402:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002406:	e000      	b.n	800240a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002408:	bf00      	nop
  }
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000e010 	.word	0xe000e010
 800241c:	44020c00 	.word	0x44020c00

08002420 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002426:	4b17      	ldr	r3, [pc, #92]	@ (8002484 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002432:	2304      	movs	r3, #4
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	e01e      	b.n	8002476 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002438:	4b13      	ldr	r3, [pc, #76]	@ (8002488 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800243a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2b08      	cmp	r3, #8
 8002448:	d00f      	beq.n	800246a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b08      	cmp	r3, #8
 800244e:	d80f      	bhi.n	8002470 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b04      	cmp	r3, #4
 800245a:	d003      	beq.n	8002464 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800245c:	e008      	b.n	8002470 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
        break;
 8002462:	e008      	b.n	8002476 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002464:	2301      	movs	r3, #1
 8002466:	607b      	str	r3, [r7, #4]
        break;
 8002468:	e005      	b.n	8002476 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800246a:	2302      	movs	r3, #2
 800246c:	607b      	str	r3, [r7, #4]
        break;
 800246e:	e002      	b.n	8002476 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002470:	2300      	movs	r3, #0
 8002472:	607b      	str	r3, [r7, #4]
        break;
 8002474:	bf00      	nop
    }
  }
  return systick_source;
 8002476:	687b      	ldr	r3, [r7, #4]
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000e010 	.word	0xe000e010
 8002488:	44020c00 	.word	0x44020c00

0800248c <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	460b      	mov	r3, r1
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800249e:	7afb      	ldrb	r3, [r7, #11]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d011      	beq.n	80024c8 <HAL_EXTI_RegisterCallback+0x3c>
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	dc13      	bgt.n	80024d0 <HAL_EXTI_RegisterCallback+0x44>
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_EXTI_RegisterCallback+0x26>
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d007      	beq.n	80024c0 <HAL_EXTI_RegisterCallback+0x34>
 80024b0:	e00e      	b.n	80024d0 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	609a      	str	r2, [r3, #8]
      break;
 80024be:	e00a      	b.n	80024d6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	605a      	str	r2, [r3, #4]
      break;
 80024c6:	e006      	b.n	80024d6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	609a      	str	r2, [r3, #8]
      break;
 80024ce:	e002      	b.n	80024d6 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	75fb      	strb	r3, [r7, #23]
      break;
 80024d4:	bf00      	nop
  }

  return status;
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	371c      	adds	r7, #28
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e003      	b.n	8002500 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80024fe:	2300      	movs	r3, #0
  }
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	2201      	movs	r2, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <HAL_EXTI_IRQHandler+0x88>)
 8002536:	4413      	add	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	4b0d      	ldr	r3, [pc, #52]	@ (8002598 <HAL_EXTI_IRQHandler+0x8c>)
 8002564:	4413      	add	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d009      	beq.n	800258c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	4798      	blx	r3
    }
  }
}
 800258c:	bf00      	nop
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	4402200c 	.word	0x4402200c
 8002598:	44022010 	.word	0x44022010

0800259c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80025aa:	e136      	b.n	800281a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2101      	movs	r1, #1
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	fa01 f303 	lsl.w	r3, r1, r3
 80025b8:	4013      	ands	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 8128 	beq.w	8002814 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x38>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b12      	cmp	r3, #18
 80025d2:	d125      	bne.n	8002620 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	08da      	lsrs	r2, r3, #3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3208      	adds	r2, #8
 80025dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	220f      	movs	r2, #15
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4013      	ands	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f003 020f 	and.w	r2, r3, #15
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	4313      	orrs	r3, r2
 8002610:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	08da      	lsrs	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3208      	adds	r2, #8
 800261a:	6979      	ldr	r1, [r7, #20]
 800261c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4013      	ands	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0203 	and.w	r2, r3, #3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	4313      	orrs	r3, r2
 800264c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d00b      	beq.n	8002674 <HAL_GPIO_Init+0xd8>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d007      	beq.n	8002674 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002668:	2b11      	cmp	r3, #17
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b12      	cmp	r3, #18
 8002672:	d130      	bne.n	80026d6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	2203      	movs	r2, #3
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4013      	ands	r3, r2
 800268a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026aa:	2201      	movs	r2, #1
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4013      	ands	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	f003 0201 	and.w	r2, r3, #1
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d017      	beq.n	800270e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2203      	movs	r2, #3
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4013      	ands	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d07c      	beq.n	8002814 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800271a:	4a47      	ldr	r2, [pc, #284]	@ (8002838 <HAL_GPIO_Init+0x29c>)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3318      	adds	r3, #24
 8002722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002726:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	220f      	movs	r2, #15
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	4013      	ands	r3, r2
 800273c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	0a9a      	lsrs	r2, r3, #10
 8002742:	4b3e      	ldr	r3, [pc, #248]	@ (800283c <HAL_GPIO_Init+0x2a0>)
 8002744:	4013      	ands	r3, r2
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	f002 0203 	and.w	r2, r2, #3
 800274c:	00d2      	lsls	r2, r2, #3
 800274e:	4093      	lsls	r3, r2
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	4313      	orrs	r3, r2
 8002754:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002756:	4938      	ldr	r1, [pc, #224]	@ (8002838 <HAL_GPIO_Init+0x29c>)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	089b      	lsrs	r3, r3, #2
 800275c:	3318      	adds	r3, #24
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002764:	4b34      	ldr	r3, [pc, #208]	@ (8002838 <HAL_GPIO_Init+0x29c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	43db      	mvns	r3, r3
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4013      	ands	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002788:	4a2b      	ldr	r2, [pc, #172]	@ (8002838 <HAL_GPIO_Init+0x29c>)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800278e:	4b2a      	ldr	r3, [pc, #168]	@ (8002838 <HAL_GPIO_Init+0x29c>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	43db      	mvns	r3, r3
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	4013      	ands	r3, r2
 800279c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80027b2:	4a21      	ldr	r2, [pc, #132]	@ (8002838 <HAL_GPIO_Init+0x29c>)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80027b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002838 <HAL_GPIO_Init+0x29c>)
 80027ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027be:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4013      	ands	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80027de:	4a16      	ldr	r2, [pc, #88]	@ (8002838 <HAL_GPIO_Init+0x29c>)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80027e6:	4b14      	ldr	r3, [pc, #80]	@ (8002838 <HAL_GPIO_Init+0x29c>)
 80027e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027ec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4013      	ands	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800280c:	4a0a      	ldr	r2, [pc, #40]	@ (8002838 <HAL_GPIO_Init+0x29c>)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	3301      	adds	r3, #1
 8002818:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	f47f aec1 	bne.w	80025ac <HAL_GPIO_Init+0x10>
  }
}
 800282a:	bf00      	nop
 800282c:	bf00      	nop
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	44022000 	.word	0x44022000
 800283c:	002f7f7f 	.word	0x002f7f7f

08002840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
 800284c:	4613      	mov	r3, r2
 800284e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002850:	787b      	ldrb	r3, [r7, #1]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800285c:	e002      	b.n	8002864 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002882:	887a      	ldrh	r2, [r7, #2]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4013      	ands	r3, r2
 8002888:	041a      	lsls	r2, r3, #16
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	43d9      	mvns	r1, r3
 800288e:	887b      	ldrh	r3, [r7, #2]
 8002890:	400b      	ands	r3, r1
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	619a      	str	r2, [r3, #24]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e02a      	b.n	800290c <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe fb88 	bl	8000fe0 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 80028e6:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	68f9      	ldr	r1, [r7, #12]
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e08d      	b.n	8002a42 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe fb6c 	bl	8001018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	@ 0x24
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002964:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002974:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d107      	bne.n	800298e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	e006      	b.n	800299c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800299a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d108      	bne.n	80029b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	e007      	b.n	80029c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69d9      	ldr	r1, [r3, #28]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1a      	ldr	r2, [r3, #32]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d138      	bne.n	8002ad2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e032      	b.n	8002ad4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2224      	movs	r2, #36	@ 0x24
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a9c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6819      	ldr	r1, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0201 	orr.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ad2:	2302      	movs	r3, #2
  }
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	d139      	bne.n	8002b6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e033      	b.n	8002b6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2224      	movs	r2, #36	@ 0x24
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0201 	orr.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
  }
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002b84:	230a      	movs	r3, #10
 8002b86:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002b88:	e002      	b.n	8002b90 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f9      	bne.n	8002b8a <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bac:	b29b      	uxth	r3, r3
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002bc6:	230a      	movs	r3, #10
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002bca:	e002      	b.n	8002bd2 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f9      	bne.n	8002bcc <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8002bd8:	887b      	ldrh	r3, [r7, #2]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002be0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	0c1b      	lsrs	r3, r3, #16
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bee:	b29b      	uxth	r3, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002c08:	230a      	movs	r3, #10
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002c0c:	e002      	b.n	8002c14 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f9      	bne.n	8002c0e <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8002c1a:	887b      	ldrh	r3, [r7, #2]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c30:	b29b      	uxth	r3, r3
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af02      	add	r7, sp, #8
 8002c44:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0f3      	b.n	8002e38 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d106      	bne.n	8002c6a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7fe fd99 	bl	800179c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f008 ff59 	bl	800bb2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7c1a      	ldrb	r2, [r3, #16]
 8002c84:	f88d 2000 	strb.w	r2, [sp]
 8002c88:	3304      	adds	r3, #4
 8002c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c8c:	f008 ff1d 	bl	800baca <USB_CoreInit>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e0ca      	b.n	8002e38 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f008 ff55 	bl	800bb58 <USB_SetCurrentMode>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0bb      	b.n	8002e38 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]
 8002cc4:	e03f      	b.n	8002d46 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cc6:	7bfa      	ldrb	r2, [r7, #15]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3315      	adds	r3, #21
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3314      	adds	r3, #20
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3317      	adds	r3, #23
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	440b      	add	r3, r1
 8002d10:	3324      	adds	r3, #36	@ 0x24
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d16:	7bfa      	ldrb	r2, [r7, #15]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	440b      	add	r3, r1
 8002d24:	3328      	adds	r3, #40	@ 0x28
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	440b      	add	r3, r1
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	3301      	adds	r3, #1
 8002d44:	73fb      	strb	r3, [r7, #15]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	791b      	ldrb	r3, [r3, #4]
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d3ba      	bcc.n	8002cc6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d50:	2300      	movs	r3, #0
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	e044      	b.n	8002de0 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d56:	7bfa      	ldrb	r2, [r7, #15]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	440b      	add	r3, r1
 8002d64:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	440b      	add	r3, r1
 8002d7a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002d7e:	7bfa      	ldrb	r2, [r7, #15]
 8002d80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d82:	7bfa      	ldrb	r2, [r7, #15]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d98:	7bfa      	ldrb	r2, [r7, #15]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	440b      	add	r3, r1
 8002da6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dae:	7bfa      	ldrb	r2, [r7, #15]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dc4:	7bfa      	ldrb	r2, [r7, #15]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	440b      	add	r3, r1
 8002dd2:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	791b      	ldrb	r3, [r3, #4]
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d3b5      	bcc.n	8002d56 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	7c1a      	ldrb	r2, [r3, #16]
 8002df2:	f88d 2000 	strb.w	r2, [sp]
 8002df6:	3304      	adds	r3, #4
 8002df8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dfa:	f008 fed0 	bl	800bb9e <USB_DevInit>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e013      	b.n	8002e38 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	7b1b      	ldrb	r3, [r3, #12]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d102      	bne.n	8002e2c <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f001 fb6b 	bl	8004502 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f00a fd29 	bl	800d888 <USB_DevDisconnect>

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_PCD_Start+0x16>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e012      	b.n	8002e7c <HAL_PCD_Start+0x3c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f008 fe4f 	bl	800bb06 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f00a fcfa 	bl	800d866 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f00a fd0a 	bl	800d8aa <USB_ReadInterrupts>
 8002e96:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 faf2 	bl	800348c <PCD_EP_ISR_Handler>

    return;
 8002ea8:	e0de      	b.n	8003068 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d010      	beq.n	8002ed6 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8002ec2:	400b      	ands	r3, r1
 8002ec4:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f00b fbbb 	bl	800e642 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ecc:	2100      	movs	r1, #0
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f8e1 	bl	8003096 <HAL_PCD_SetAddress>

    return;
 8002ed4:	e0c8      	b.n	8003068 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8002eee:	400b      	ands	r3, r1
 8002ef0:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002ef2:	e0b9      	b.n	8003068 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8002f0c:	400b      	ands	r3, r1
 8002f0e:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002f10:	e0aa      	b.n	8003068 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d029      	beq.n	8002f70 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0204 	bic.w	r2, r2, #4
 8002f2a:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0208 	bic.w	r2, r2, #8
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d107      	bne.n	8002f56 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f4e:	2100      	movs	r1, #0
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f001 faf8 	bl	8004546 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f893 	bl	8003082 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002f6a:	400b      	ands	r3, r1
 8002f6c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002f6e:	e07b      	b.n	8003068 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d01c      	beq.n	8002fb4 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0208 	orr.w	r2, r2, #8
 8002f88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8002f98:	400b      	ands	r3, r1
 8002f9a:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0204 	orr.w	r2, r2, #4
 8002faa:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f85e 	bl	800306e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002fb2:	e059      	b.n	8003068 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d033      	beq.n	8003026 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8002fcc:	400b      	ands	r3, r1
 8002fce:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d121      	bne.n	800301e <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0204 	orr.w	r2, r2, #4
 8002fe8:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0208 	orr.w	r2, r2, #8
 8002ff8:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003008:	089b      	lsrs	r3, r3, #2
 800300a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003014:	2101      	movs	r1, #1
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f001 fa95 	bl	8004546 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800301c:	e024      	b.n	8003068 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f825 	bl	800306e <HAL_PCD_SuspendCallback>
    return;
 8003024:	e020      	b.n	8003068 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00c      	beq.n	800304a <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 800303e:	400b      	ands	r3, r1
 8003040:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f00b faef 	bl	800e626 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003048:	e00e      	b.n	8003068 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8003062:	400b      	ands	r3, r1
 8003064:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8003066:	bf00      	nop
  }
}
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_PCD_SetAddress+0x1a>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e012      	b.n	80030d6 <HAL_PCD_SetAddress+0x40>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	4611      	mov	r1, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f00a fbba 	bl	800d840 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	4608      	mov	r0, r1
 80030e8:	4611      	mov	r1, r2
 80030ea:	461a      	mov	r2, r3
 80030ec:	4603      	mov	r3, r0
 80030ee:	70fb      	strb	r3, [r7, #3]
 80030f0:	460b      	mov	r3, r1
 80030f2:	803b      	strh	r3, [r7, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003100:	2b00      	cmp	r3, #0
 8003102:	da0f      	bge.n	8003124 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	f003 0207 	and.w	r2, r3, #7
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	3310      	adds	r3, #16
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	4413      	add	r3, r2
 8003118:	3304      	adds	r3, #4
 800311a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	705a      	strb	r2, [r3, #1]
 8003122:	e00f      	b.n	8003144 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	f003 0207 	and.w	r2, r3, #7
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	4413      	add	r3, r2
 800313a:	3304      	adds	r3, #4
 800313c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	b2da      	uxtb	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003150:	883b      	ldrh	r3, [r7, #0]
 8003152:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	78ba      	ldrb	r2, [r7, #2]
 800315e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003160:	78bb      	ldrb	r3, [r7, #2]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d102      	bne.n	800316c <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_PCD_EP_Open+0x9c>
 8003176:	2302      	movs	r3, #2
 8003178:	e00e      	b.n	8003198 <HAL_PCD_EP_Open+0xba>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68f9      	ldr	r1, [r7, #12]
 8003188:	4618      	mov	r0, r3
 800318a:	f008 fd2b 	bl	800bbe4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8003196:	7afb      	ldrb	r3, [r7, #11]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	da0f      	bge.n	80031d4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	f003 0207 	and.w	r2, r3, #7
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	3310      	adds	r3, #16
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	4413      	add	r3, r2
 80031c8:	3304      	adds	r3, #4
 80031ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	705a      	strb	r2, [r3, #1]
 80031d2:	e00f      	b.n	80031f4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 0207 	and.w	r2, r3, #7
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	3304      	adds	r3, #4
 80031ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_PCD_EP_Close+0x6e>
 800320a:	2302      	movs	r3, #2
 800320c:	e00e      	b.n	800322c <HAL_PCD_EP_Close+0x8c>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68f9      	ldr	r1, [r7, #12]
 800321c:	4618      	mov	r0, r3
 800321e:	f009 f841 	bl	800c2a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	460b      	mov	r3, r1
 8003242:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003244:	7afb      	ldrb	r3, [r7, #11]
 8003246:	f003 0207 	and.w	r2, r3, #7
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4413      	add	r3, r2
 800325a:	3304      	adds	r3, #4
 800325c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2200      	movs	r2, #0
 800326e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2200      	movs	r2, #0
 8003274:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003276:	7afb      	ldrb	r3, [r7, #11]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	b2da      	uxtb	r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6979      	ldr	r1, [r7, #20]
 8003288:	4618      	mov	r0, r3
 800328a:	f009 f995 	bl	800c5b8 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	f003 0207 	and.w	r2, r3, #7
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	440b      	add	r3, r1
 80032b6:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	460b      	mov	r3, r1
 80032d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d8:	7afb      	ldrb	r3, [r7, #11]
 80032da:	f003 0207 	and.w	r2, r3, #7
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	3310      	adds	r3, #16
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	3304      	adds	r3, #4
 80032ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2201      	movs	r2, #1
 8003314:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003316:	7afb      	ldrb	r3, [r7, #11]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	b2da      	uxtb	r2, r3
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6979      	ldr	r1, [r7, #20]
 8003328:	4618      	mov	r0, r3
 800332a:	f009 f945 	bl	800c5b8 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	7912      	ldrb	r2, [r2, #4]
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e040      	b.n	80033d8 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800335a:	2b00      	cmp	r3, #0
 800335c:	da0f      	bge.n	800337e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	f003 0207 	and.w	r2, r3, #7
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	3310      	adds	r3, #16
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	3304      	adds	r3, #4
 8003374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	705a      	strb	r2, [r3, #1]
 800337c:	e00d      	b.n	800339a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	4413      	add	r3, r2
 8003390:	3304      	adds	r3, #4
 8003392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2201      	movs	r2, #1
 800339e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_PCD_EP_SetStall+0x82>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e00e      	b.n	80033d8 <HAL_PCD_EP_SetStall+0xa0>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68f9      	ldr	r1, [r7, #12]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f00a f95f 	bl	800d68c <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	7912      	ldrb	r2, [r2, #4]
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e042      	b.n	8003484 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003402:	2b00      	cmp	r3, #0
 8003404:	da0f      	bge.n	8003426 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	f003 0207 	and.w	r2, r3, #7
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	3310      	adds	r3, #16
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	3304      	adds	r3, #4
 800341c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	705a      	strb	r2, [r3, #1]
 8003424:	e00f      	b.n	8003446 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	f003 0207 	and.w	r2, r3, #7
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	4413      	add	r3, r2
 800343c:	3304      	adds	r3, #4
 800343e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	b2da      	uxtb	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_PCD_EP_ClrStall+0x86>
 8003462:	2302      	movs	r3, #2
 8003464:	e00e      	b.n	8003484 <HAL_PCD_EP_ClrStall+0xa4>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68f9      	ldr	r1, [r7, #12]
 8003474:	4618      	mov	r0, r3
 8003476:	f00a f94f 	bl	800d718 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08e      	sub	sp, #56	@ 0x38
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003494:	e326      	b.n	8003ae4 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349c:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800349e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 80034aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 8124 	bne.w	80036fc <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80034b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d13e      	bne.n	800353c <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b89      	ldr	r3, [pc, #548]	@ (80036ec <PCD_EP_ISR_Handler+0x260>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034d4:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3314      	adds	r3, #20
 80034da:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80034f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	441a      	add	r2, r3
 8003500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003502:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003504:	2100      	movs	r1, #0
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f00b f873 	bl	800e5f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	7c5b      	ldrb	r3, [r3, #17]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 82e6 	beq.w	8003ae4 <PCD_EP_ISR_Handler+0x658>
 8003518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b00      	cmp	r3, #0
 800351e:	f040 82e1 	bne.w	8003ae4 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	7c5b      	ldrb	r3, [r3, #17]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800352c:	b2da      	uxtb	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	745a      	strb	r2, [r3, #17]
 800353a:	e2d3      	b.n	8003ae4 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003542:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800354c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800354e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003552:	2b00      	cmp	r3, #0
 8003554:	d027      	beq.n	80035a6 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f7ff fb09 	bl	8002b78 <PCD_GET_EP_RX_CNT>
 8003566:	4603      	mov	r3, r0
 8003568:	461a      	mov	r2, r3
 800356a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6818      	ldr	r0, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8003578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800357c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003580:	b29b      	uxth	r3, r3
 8003582:	f00a fa01 	bl	800d988 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b58      	ldr	r3, [pc, #352]	@ (80036f0 <PCD_EP_ISR_Handler+0x264>)
 800358e:	4013      	ands	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800359c:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f00a fffa 	bl	800e598 <HAL_PCD_SetupStageCallback>
 80035a4:	e29e      	b.n	8003ae4 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 80035a6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f280 829a 	bge.w	8003ae4 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	4b4e      	ldr	r3, [pc, #312]	@ (80036f0 <PCD_EP_ISR_Handler+0x264>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035c6:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	4619      	mov	r1, r3
 80035d2:	4610      	mov	r0, r2
 80035d4:	f7ff fad0 	bl	8002b78 <PCD_GET_EP_RX_CNT>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035de:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80035e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d019      	beq.n	800361c <PCD_EP_ISR_Handler+0x190>
 80035e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d015      	beq.n	800361c <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f6:	6959      	ldr	r1, [r3, #20]
 80035f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003600:	b29b      	uxth	r3, r3
 8003602:	f00a f9c1 	bl	800d988 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	441a      	add	r2, r3
 8003610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003612:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003614:	2100      	movs	r1, #0
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f00a ffd0 	bl	800e5bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003624:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003626:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800362a:	2b00      	cmp	r3, #0
 800362c:	f040 825a 	bne.w	8003ae4 <PCD_EP_ISR_Handler+0x658>
 8003630:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003632:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003636:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800363a:	f000 8253 	beq.w	8003ae4 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800363e:	4b2d      	ldr	r3, [pc, #180]	@ (80036f4 <PCD_EP_ISR_Handler+0x268>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	4a2c      	ldr	r2, [pc, #176]	@ (80036f4 <PCD_EP_ISR_Handler+0x268>)
 8003644:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8003648:	6053      	str	r3, [r2, #4]
 800364a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <PCD_EP_ISR_Handler+0x1d4>
 8003652:	4b28      	ldr	r3, [pc, #160]	@ (80036f4 <PCD_EP_ISR_Handler+0x268>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4a27      	ldr	r2, [pc, #156]	@ (80036f4 <PCD_EP_ISR_Handler+0x268>)
 8003658:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800365c:	6053      	str	r3, [r2, #4]
 800365e:	e02e      	b.n	80036be <PCD_EP_ISR_Handler+0x232>
 8003660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2b3e      	cmp	r3, #62	@ 0x3e
 8003666:	d814      	bhi.n	8003692 <PCD_EP_ISR_Handler+0x206>
 8003668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <PCD_EP_ISR_Handler+0x1f6>
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	3301      	adds	r3, #1
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	4b1c      	ldr	r3, [pc, #112]	@ (80036f4 <PCD_EP_ISR_Handler+0x268>)
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	069b      	lsls	r3, r3, #26
 800368a:	491a      	ldr	r1, [pc, #104]	@ (80036f4 <PCD_EP_ISR_Handler+0x268>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
 8003690:	e015      	b.n	80036be <PCD_EP_ISR_Handler+0x232>
 8003692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <PCD_EP_ISR_Handler+0x220>
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	4b11      	ldr	r3, [pc, #68]	@ (80036f4 <PCD_EP_ISR_Handler+0x268>)
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	069b      	lsls	r3, r3, #26
 80036b4:	4313      	orrs	r3, r2
 80036b6:	4a0f      	ldr	r2, [pc, #60]	@ (80036f4 <PCD_EP_ISR_Handler+0x268>)
 80036b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036bc:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4b0c      	ldr	r3, [pc, #48]	@ (80036f8 <PCD_EP_ISR_Handler+0x26c>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e1fb      	b.n	8003ae4 <PCD_EP_ISR_Handler+0x658>
 80036ec:	07ff8f0f 	.word	0x07ff8f0f
 80036f0:	07ff0f8f 	.word	0x07ff0f8f
 80036f4:	40016400 	.word	0x40016400
 80036f8:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800370e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003712:	2b00      	cmp	r3, #0
 8003714:	f280 80bd 	bge.w	8003892 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	4b9e      	ldr	r3, [pc, #632]	@ (80039a4 <PCD_EP_ISR_Handler+0x518>)
 800372a:	4013      	ands	r3, r2
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003742:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003744:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	4413      	add	r3, r2
 8003758:	3304      	adds	r3, #4
 800375a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800375c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375e:	7b1b      	ldrb	r3, [r3, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d116      	bne.n	8003792 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	4619      	mov	r1, r3
 800376e:	4610      	mov	r0, r2
 8003770:	f7ff fa02 	bl	8002b78 <PCD_GET_EP_RX_CNT>
 8003774:	4603      	mov	r3, r0
 8003776:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8003778:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800377a:	2b00      	cmp	r3, #0
 800377c:	d067      	beq.n	800384e <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003784:	6959      	ldr	r1, [r3, #20]
 8003786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003788:	88da      	ldrh	r2, [r3, #6]
 800378a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800378c:	f00a f8fc 	bl	800d988 <USB_ReadPMA>
 8003790:	e05d      	b.n	800384e <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003794:	78db      	ldrb	r3, [r3, #3]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d108      	bne.n	80037ac <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800379a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800379c:	461a      	mov	r2, r3
 800379e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f9ad 	bl	8003b00 <HAL_PCD_EP_DB_Receive>
 80037a6:	4603      	mov	r3, r0
 80037a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80037aa:	e050      	b.n	800384e <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4b7a      	ldr	r3, [pc, #488]	@ (80039a8 <PCD_EP_ISR_Handler+0x51c>)
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	441a      	add	r2, r3
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80037da:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d016      	beq.n	8003822 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	4619      	mov	r1, r3
 80037fe:	4610      	mov	r0, r2
 8003800:	f7ff f9db 	bl	8002bba <PCD_GET_EP_DBUF0_CNT>
 8003804:	4603      	mov	r3, r0
 8003806:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8003808:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01f      	beq.n	800384e <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003814:	6959      	ldr	r1, [r3, #20]
 8003816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003818:	891a      	ldrh	r2, [r3, #8]
 800381a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800381c:	f00a f8b4 	bl	800d988 <USB_ReadPMA>
 8003820:	e015      	b.n	800384e <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f7ff f9e5 	bl	8002bfc <PCD_GET_EP_DBUF1_CNT>
 8003832:	4603      	mov	r3, r0
 8003834:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8003836:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003842:	6959      	ldr	r1, [r3, #20]
 8003844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003846:	895a      	ldrh	r2, [r3, #10]
 8003848:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800384a:	f00a f89d 	bl	800d988 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800384e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003850:	69da      	ldr	r2, [r3, #28]
 8003852:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003854:	441a      	add	r2, r3
 8003856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003858:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800385a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003860:	441a      	add	r2, r3
 8003862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003864:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d004      	beq.n	8003878 <PCD_EP_ISR_Handler+0x3ec>
 800386e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	429a      	cmp	r2, r3
 8003876:	d206      	bcs.n	8003886 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	4619      	mov	r1, r3
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f00a fe9c 	bl	800e5bc <HAL_PCD_DataOutStageCallback>
 8003884:	e005      	b.n	8003892 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800388c:	4618      	mov	r0, r3
 800388e:	f008 fe93 	bl	800c5b8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8003892:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8123 	beq.w	8003ae4 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 800389e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	3310      	adds	r3, #16
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	4413      	add	r3, r2
 80038b0:	3304      	adds	r3, #4
 80038b2:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b39      	ldr	r3, [pc, #228]	@ (80039ac <PCD_EP_ISR_Handler+0x520>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038de:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80038e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e2:	78db      	ldrb	r3, [r3, #3]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	f040 80b8 	bne.w	8003a5a <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 80038ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ec:	2200      	movs	r2, #0
 80038ee:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80038f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f2:	7b1b      	ldrb	r3, [r3, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80a9 	beq.w	8003a4c <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038fa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80038fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	d055      	beq.n	80039b0 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003906:	785b      	ldrb	r3, [r3, #1]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d124      	bne.n	8003956 <PCD_EP_ISR_Handler+0x4ca>
 800390c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003916:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003926:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800392a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800393a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800394a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800394e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	e07a      	b.n	8003a4c <PCD_EP_ISR_Handler+0x5c0>
 8003956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003958:	785b      	ldrb	r3, [r3, #1]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d176      	bne.n	8003a4c <PCD_EP_ISR_Handler+0x5c0>
 800395e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003968:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003978:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800397c:	b292      	uxth	r2, r2
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800398a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800398e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003998:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	e054      	b.n	8003a4c <PCD_EP_ISR_Handler+0x5c0>
 80039a2:	bf00      	nop
 80039a4:	07ff0f8f 	.word	0x07ff0f8f
 80039a8:	07ff8f8f 	.word	0x07ff8f8f
 80039ac:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b2:	785b      	ldrb	r3, [r3, #1]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d124      	bne.n	8003a02 <PCD_EP_ISR_Handler+0x576>
 80039b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039d6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80039da:	605a      	str	r2, [r3, #4]
 80039dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80039fe:	605a      	str	r2, [r3, #4]
 8003a00:	e024      	b.n	8003a4c <PCD_EP_ISR_Handler+0x5c0>
 8003a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a04:	785b      	ldrb	r3, [r3, #1]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d120      	bne.n	8003a4c <PCD_EP_ISR_Handler+0x5c0>
 8003a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a28:	b292      	uxth	r2, r2
 8003a2a:	605a      	str	r2, [r3, #4]
 8003a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003a36:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a48:	6852      	ldr	r2, [r2, #4]
 8003a4a:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	4619      	mov	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f00a fdcd 	bl	800e5f2 <HAL_PCD_DataInStageCallback>
 8003a58:	e044      	b.n	8003ae4 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003a5a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d139      	bne.n	8003ad8 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	0c1b      	lsrs	r3, r3, #16
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a7c:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d906      	bls.n	8003a96 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8003a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a8a:	699a      	ldr	r2, [r3, #24]
 8003a8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003a8e:	1ad2      	subs	r2, r2, r3
 8003a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a92:	619a      	str	r2, [r3, #24]
 8003a94:	e002      	b.n	8003a9c <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8003a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a98:	2200      	movs	r2, #0
 8003a9a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f00a fda1 	bl	800e5f2 <HAL_PCD_DataInStageCallback>
 8003ab0:	e018      	b.n	8003ae4 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003ab8:	441a      	add	r2, r3
 8003aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003abc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003ac4:	441a      	add	r2, r3
 8003ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f008 fd71 	bl	800c5b8 <USB_EPStartXfer>
 8003ad6:	e005      	b.n	8003ae4 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ad8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003ada:	461a      	mov	r2, r3
 8003adc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f8e8 	bl	8003cb4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f47f acd1 	bne.w	8003496 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3738      	adds	r7, #56	@ 0x38
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop

08003b00 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	@ 0x28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b0e:	88fb      	ldrh	r3, [r7, #6]
 8003b10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d062      	beq.n	8003bde <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	4619      	mov	r1, r3
 8003b22:	4610      	mov	r0, r2
 8003b24:	f7ff f849 	bl	8002bba <PCD_GET_EP_DBUF0_CNT>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	8bfb      	ldrh	r3, [r7, #30]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d306      	bcc.n	8003b44 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	8bfb      	ldrh	r3, [r7, #30]
 8003b3c:	1ad2      	subs	r2, r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	619a      	str	r2, [r3, #24]
 8003b42:	e002      	b.n	8003b4a <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2200      	movs	r2, #0
 8003b48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d11b      	bne.n	8003b8a <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4b52      	ldr	r3, [pc, #328]	@ (8003cac <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b6e:	61bb      	str	r3, [r7, #24]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	441a      	add	r2, r3
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b88:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d017      	beq.n	8003bc4 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4b42      	ldr	r3, [pc, #264]	@ (8003cb0 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	441a      	add	r2, r3
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003bc2:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003bc4:	8bfb      	ldrh	r3, [r7, #30]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d06b      	beq.n	8003ca2 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	6959      	ldr	r1, [r3, #20]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	891a      	ldrh	r2, [r3, #8]
 8003bd6:	8bfb      	ldrh	r3, [r7, #30]
 8003bd8:	f009 fed6 	bl	800d988 <USB_ReadPMA>
 8003bdc:	e061      	b.n	8003ca2 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	4619      	mov	r1, r3
 8003be8:	4610      	mov	r0, r2
 8003bea:	f7ff f807 	bl	8002bfc <PCD_GET_EP_DBUF1_CNT>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	8bfb      	ldrh	r3, [r7, #30]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d306      	bcc.n	8003c0a <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	699a      	ldr	r2, [r3, #24]
 8003c00:	8bfb      	ldrh	r3, [r7, #30]
 8003c02:	1ad2      	subs	r2, r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	619a      	str	r2, [r3, #24]
 8003c08:	e002      	b.n	8003c10 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d11b      	bne.n	8003c50 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b20      	ldr	r3, [pc, #128]	@ (8003cac <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	441a      	add	r2, r3
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c4e:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d117      	bne.n	8003c8a <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4b11      	ldr	r3, [pc, #68]	@ (8003cb0 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	623b      	str	r3, [r7, #32]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	441a      	add	r2, r3
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c88:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003c8a:	8bfb      	ldrh	r3, [r7, #30]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	6959      	ldr	r1, [r3, #20]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	895a      	ldrh	r2, [r3, #10]
 8003c9c:	8bfb      	ldrh	r3, [r7, #30]
 8003c9e:	f009 fe73 	bl	800d988 <USB_ReadPMA>
    }
  }

  return count;
 8003ca2:	8bfb      	ldrh	r3, [r7, #30]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3728      	adds	r7, #40	@ 0x28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	07ffbf8f 	.word	0x07ffbf8f
 8003cb0:	07ff8f8f 	.word	0x07ff8f8f

08003cb4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08e      	sub	sp, #56	@ 0x38
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 81d5 	beq.w	8004078 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f7fe ff6e 	bl	8002bba <PCD_GET_EP_DBUF0_CNT>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	8bfb      	ldrh	r3, [r7, #30]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d906      	bls.n	8003cfa <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	8bfb      	ldrh	r3, [r7, #30]
 8003cf2:	1ad2      	subs	r2, r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	619a      	str	r2, [r3, #24]
 8003cf8:	e002      	b.n	8003d00 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f040 80c1 	bne.w	8003e8c <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	785b      	ldrb	r3, [r3, #1]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d124      	bne.n	8003d5c <HAL_PCD_EP_DB_Transmit+0xa8>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d30:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d54:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e024      	b.n	8003da6 <HAL_PCD_EP_DB_Transmit+0xf2>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	785b      	ldrb	r3, [r3, #1]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d120      	bne.n	8003da6 <HAL_PCD_EP_DB_Transmit+0xf2>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d82:	b292      	uxth	r2, r2
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003d90:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	785b      	ldrb	r3, [r3, #1]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d124      	bne.n	8003df8 <HAL_PCD_EP_DB_Transmit+0x144>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003db8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dc8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dcc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ddc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003df0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	e024      	b.n	8003e42 <HAL_PCD_EP_DB_Transmit+0x18e>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d120      	bne.n	8003e42 <HAL_PCD_EP_DB_Transmit+0x18e>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e1e:	b292      	uxth	r2, r2
 8003e20:	605a      	str	r2, [r3, #4]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003e2c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e3e:	6852      	ldr	r2, [r2, #4]
 8003e40:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	4619      	mov	r1, r3
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f00a fbd2 	bl	800e5f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 82e5 	beq.w	8004424 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b8e      	ldr	r3, [pc, #568]	@ (80040a4 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	441a      	add	r2, r3
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	e2cb      	b.n	8004424 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d017      	beq.n	8003ec6 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4b7f      	ldr	r3, [pc, #508]	@ (80040a4 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	441a      	add	r2, r3
 8003eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec4:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	f040 82a9 	bne.w	8004424 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	8bfb      	ldrh	r3, [r7, #30]
 8003ed8:	441a      	add	r2, r3
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	69da      	ldr	r2, [r3, #28]
 8003ee2:	8bfb      	ldrh	r3, [r7, #30]
 8003ee4:	441a      	add	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	6a1a      	ldr	r2, [r3, #32]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d309      	bcc.n	8003f0a <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6a1a      	ldr	r2, [r3, #32]
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	1ad2      	subs	r2, r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	621a      	str	r2, [r3, #32]
 8003f08:	e014      	b.n	8003f34 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8003f12:	8bfb      	ldrh	r3, [r7, #30]
 8003f14:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003f1e:	e009      	b.n	8003f34 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2200      	movs	r2, #0
 8003f32:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	785b      	ldrb	r3, [r3, #1]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d16a      	bne.n	8004012 <HAL_PCD_EP_DB_Transmit+0x35e>
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f5a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d112      	bne.n	8003f8c <HAL_PCD_EP_DB_Transmit+0x2d8>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f84:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	e06a      	b.n	8004062 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f90:	d81e      	bhi.n	8003fd0 <HAL_PCD_EP_DB_Transmit+0x31c>
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8003fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003fb6:	6819      	ldr	r1, [r3, #0]
 8003fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fba:	069a      	lsls	r2, r3, #26
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	e048      	b.n	8004062 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d102      	bne.n	8003fe6 <HAL_PCD_EP_DB_Transmit+0x332>
 8003fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ff0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff8:	069b      	lsls	r3, r3, #26
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004006:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800400a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e027      	b.n	8004062 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	785b      	ldrb	r3, [r3, #1]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d123      	bne.n	8004062 <HAL_PCD_EP_DB_Transmit+0x3ae>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004024:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004034:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004038:	b292      	uxth	r2, r2
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004046:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800404a:	6819      	ldr	r1, [r3, #0]
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	041a      	lsls	r2, r3, #16
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800405a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800405e:	430a      	orrs	r2, r1
 8004060:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6959      	ldr	r1, [r3, #20]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	891a      	ldrh	r2, [r3, #8]
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	b29b      	uxth	r3, r3
 8004072:	f009 fc28 	bl	800d8c6 <USB_WritePMA>
 8004076:	e1d5      	b.n	8004424 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	4619      	mov	r1, r3
 8004082:	4610      	mov	r0, r2
 8004084:	f7fe fdba 	bl	8002bfc <PCD_GET_EP_DBUF1_CNT>
 8004088:	4603      	mov	r3, r0
 800408a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	699a      	ldr	r2, [r3, #24]
 8004090:	8bfb      	ldrh	r3, [r7, #30]
 8004092:	429a      	cmp	r2, r3
 8004094:	d308      	bcc.n	80040a8 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	699a      	ldr	r2, [r3, #24]
 800409a:	8bfb      	ldrh	r3, [r7, #30]
 800409c:	1ad2      	subs	r2, r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	619a      	str	r2, [r3, #24]
 80040a2:	e004      	b.n	80040ae <HAL_PCD_EP_DB_Transmit+0x3fa>
 80040a4:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2200      	movs	r2, #0
 80040ac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f040 80c1 	bne.w	800423a <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	785b      	ldrb	r3, [r3, #1]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d124      	bne.n	800410a <HAL_PCD_EP_DB_Transmit+0x456>
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040de:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004102:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e024      	b.n	8004154 <HAL_PCD_EP_DB_Transmit+0x4a0>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d120      	bne.n	8004154 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800411c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800412c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004130:	b292      	uxth	r2, r2
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800413e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800414c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d124      	bne.n	80041a6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004166:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004176:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800417a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800418a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800419a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800419e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80041a2:	605a      	str	r2, [r3, #4]
 80041a4:	e024      	b.n	80041f0 <HAL_PCD_EP_DB_Transmit+0x53c>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	785b      	ldrb	r3, [r3, #1]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d120      	bne.n	80041f0 <HAL_PCD_EP_DB_Transmit+0x53c>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041cc:	b292      	uxth	r2, r2
 80041ce:	605a      	str	r2, [r3, #4]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80041da:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041ec:	6852      	ldr	r2, [r2, #4]
 80041ee:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	4619      	mov	r1, r3
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f00a f9fb 	bl	800e5f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041fc:	88fb      	ldrh	r3, [r7, #6]
 80041fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004202:	2b00      	cmp	r3, #0
 8004204:	f040 810e 	bne.w	8004424 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4b95      	ldr	r3, [pc, #596]	@ (8004470 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 800421a:	4013      	ands	r3, r2
 800421c:	623b      	str	r3, [r7, #32]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	441a      	add	r2, r3
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	e0f4      	b.n	8004424 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d117      	bne.n	8004274 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4b86      	ldr	r3, [pc, #536]	@ (8004470 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8004256:	4013      	ands	r3, r2
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	441a      	add	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800426e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004272:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800427a:	2b01      	cmp	r3, #1
 800427c:	f040 80d2 	bne.w	8004424 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	695a      	ldr	r2, [r3, #20]
 8004284:	8bfb      	ldrh	r3, [r7, #30]
 8004286:	441a      	add	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	8bfb      	ldrh	r3, [r7, #30]
 8004292:	441a      	add	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	6a1a      	ldr	r2, [r3, #32]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d309      	bcc.n	80042b8 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	6a1a      	ldr	r2, [r3, #32]
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	1ad2      	subs	r2, r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	621a      	str	r2, [r3, #32]
 80042b6:	e014      	b.n	80042e2 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d106      	bne.n	80042ce <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 80042c0:	8bfb      	ldrh	r3, [r7, #30]
 80042c2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80042cc:	e009      	b.n	80042e2 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2200      	movs	r2, #0
 80042d8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	785b      	ldrb	r3, [r3, #1]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d16a      	bne.n	80043c0 <HAL_PCD_EP_DB_Transmit+0x70c>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004304:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004308:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	2b00      	cmp	r3, #0
 8004312:	d112      	bne.n	800433a <HAL_PCD_EP_DB_Transmit+0x686>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800431e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800432e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004332:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004336:	605a      	str	r2, [r3, #4]
 8004338:	e06a      	b.n	8004410 <HAL_PCD_EP_DB_Transmit+0x75c>
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	2b3e      	cmp	r3, #62	@ 0x3e
 800433e:	d81e      	bhi.n	800437e <HAL_PCD_EP_DB_Transmit+0x6ca>
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	085b      	lsrs	r3, r3, #1
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_PCD_EP_DB_Transmit+0x6a2>
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	3301      	adds	r3, #1
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004360:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004364:	6859      	ldr	r1, [r3, #4]
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	069a      	lsls	r2, r3, #26
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004374:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004378:	430a      	orrs	r2, r1
 800437a:	605a      	str	r2, [r3, #4]
 800437c:	e048      	b.n	8004410 <HAL_PCD_EP_DB_Transmit+0x75c>
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	2b00      	cmp	r3, #0
 800438c:	d102      	bne.n	8004394 <HAL_PCD_EP_DB_Transmit+0x6e0>
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	3b01      	subs	r3, #1
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800439e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	069b      	lsls	r3, r3, #26
 80043a8:	431a      	orrs	r2, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043b8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	e027      	b.n	8004410 <HAL_PCD_EP_DB_Transmit+0x75c>
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	785b      	ldrb	r3, [r3, #1]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d123      	bne.n	8004410 <HAL_PCD_EP_DB_Transmit+0x75c>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043e6:	b292      	uxth	r2, r2
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043f8:	6859      	ldr	r1, [r3, #4]
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	041a      	lsls	r2, r3, #16
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004408:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800440c:	430a      	orrs	r2, r1
 800440e:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6959      	ldr	r1, [r3, #20]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	895a      	ldrh	r2, [r3, #10]
 800441c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441e:	b29b      	uxth	r3, r3
 8004420:	f009 fa51 	bl	800d8c6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	4b0f      	ldr	r3, [pc, #60]	@ (8004474 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8004436:	4013      	ands	r3, r2
 8004438:	633b      	str	r3, [r7, #48]	@ 0x30
 800443a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443c:	f083 0310 	eor.w	r3, r3, #16
 8004440:	633b      	str	r3, [r7, #48]	@ 0x30
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	f083 0320 	eor.w	r3, r3, #32
 8004448:	633b      	str	r3, [r7, #48]	@ 0x30
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	441a      	add	r2, r3
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800445e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004462:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3738      	adds	r7, #56	@ 0x38
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	07ff8f8f 	.word	0x07ff8f8f
 8004474:	07ff8fbf 	.word	0x07ff8fbf

08004478 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	607b      	str	r3, [r7, #4]
 8004482:	460b      	mov	r3, r1
 8004484:	817b      	strh	r3, [r7, #10]
 8004486:	4613      	mov	r3, r2
 8004488:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800448a:	897b      	ldrh	r3, [r7, #10]
 800448c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00c      	beq.n	80044b0 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004496:	897b      	ldrh	r3, [r7, #10]
 8004498:	f003 0207 	and.w	r2, r3, #7
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	3310      	adds	r3, #16
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4413      	add	r3, r2
 80044aa:	3304      	adds	r3, #4
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	e00a      	b.n	80044c6 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044b0:	897a      	ldrh	r2, [r7, #10]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	3304      	adds	r3, #4
 80044c4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80044c6:	893b      	ldrh	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d107      	bne.n	80044dc <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2200      	movs	r2, #0
 80044d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	80da      	strh	r2, [r3, #6]
 80044da:	e00b      	b.n	80044f4 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2201      	movs	r2, #1
 80044e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004502:	b480      	push	{r7}
 8004504:	b085      	sub	sp, #20
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004524:	f043 0201 	orr.w	r2, r3, #1
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004530:	f043 0202 	orr.w	r2, r3, #2
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	460b      	mov	r3, r1
 8004550:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
	...

08004560 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8004564:	4b05      	ldr	r3, [pc, #20]	@ (800457c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004568:	4a04      	ldr	r2, [pc, #16]	@ (800457c <HAL_PWREx_EnableVddUSB+0x1c>)
 800456a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800456e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	44020800 	.word	0x44020800

08004580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d102      	bne.n	8004594 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f000 bc28 	b.w	8004de4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004594:	4b94      	ldr	r3, [pc, #592]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f003 0318 	and.w	r3, r3, #24
 800459c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800459e:	4b92      	ldr	r3, [pc, #584]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80045a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d05b      	beq.n	800466c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d005      	beq.n	80045c6 <HAL_RCC_OscConfig+0x46>
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	2b18      	cmp	r3, #24
 80045be:	d114      	bne.n	80045ea <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d111      	bne.n	80045ea <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d102      	bne.n	80045d4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f000 bc08 	b.w	8004de4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80045d4:	4b84      	ldr	r3, [pc, #528]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	041b      	lsls	r3, r3, #16
 80045e2:	4981      	ldr	r1, [pc, #516]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80045e8:	e040      	b.n	800466c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d023      	beq.n	800463a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80045f2:	4b7d      	ldr	r3, [pc, #500]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a7c      	ldr	r2, [pc, #496]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80045f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fe:	f7fd fd85 	bl	800210c <HAL_GetTick>
 8004602:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004606:	f7fd fd81 	bl	800210c <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e3e5      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004618:	4b73      	ldr	r3, [pc, #460]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004624:	4b70      	ldr	r3, [pc, #448]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	041b      	lsls	r3, r3, #16
 8004632:	496d      	ldr	r1, [pc, #436]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 8004634:	4313      	orrs	r3, r2
 8004636:	618b      	str	r3, [r1, #24]
 8004638:	e018      	b.n	800466c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800463a:	4b6b      	ldr	r3, [pc, #428]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a6a      	ldr	r2, [pc, #424]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 8004640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004646:	f7fd fd61 	bl	800210c <HAL_GetTick>
 800464a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800464e:	f7fd fd5d 	bl	800210c <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e3c1      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004660:	4b61      	ldr	r3, [pc, #388]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80a0 	beq.w	80047ba <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	2b10      	cmp	r3, #16
 800467e:	d005      	beq.n	800468c <HAL_RCC_OscConfig+0x10c>
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	2b18      	cmp	r3, #24
 8004684:	d109      	bne.n	800469a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d106      	bne.n	800469a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	f040 8092 	bne.w	80047ba <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e3a4      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a2:	d106      	bne.n	80046b2 <HAL_RCC_OscConfig+0x132>
 80046a4:	4b50      	ldr	r3, [pc, #320]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a4f      	ldr	r2, [pc, #316]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80046aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	e058      	b.n	8004764 <HAL_RCC_OscConfig+0x1e4>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d112      	bne.n	80046e0 <HAL_RCC_OscConfig+0x160>
 80046ba:	4b4b      	ldr	r3, [pc, #300]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a4a      	ldr	r2, [pc, #296]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80046c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	4b48      	ldr	r3, [pc, #288]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a47      	ldr	r2, [pc, #284]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80046cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	4b45      	ldr	r3, [pc, #276]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a44      	ldr	r2, [pc, #272]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80046d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e041      	b.n	8004764 <HAL_RCC_OscConfig+0x1e4>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046e8:	d112      	bne.n	8004710 <HAL_RCC_OscConfig+0x190>
 80046ea:	4b3f      	ldr	r3, [pc, #252]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a3e      	ldr	r2, [pc, #248]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80046f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	4b3c      	ldr	r3, [pc, #240]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a3b      	ldr	r2, [pc, #236]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80046fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	4b39      	ldr	r3, [pc, #228]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a38      	ldr	r2, [pc, #224]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	e029      	b.n	8004764 <HAL_RCC_OscConfig+0x1e4>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004718:	d112      	bne.n	8004740 <HAL_RCC_OscConfig+0x1c0>
 800471a:	4b33      	ldr	r3, [pc, #204]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a32      	ldr	r2, [pc, #200]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 8004720:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	4b30      	ldr	r3, [pc, #192]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a2f      	ldr	r2, [pc, #188]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 800472c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	4b2d      	ldr	r3, [pc, #180]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a2c      	ldr	r2, [pc, #176]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e011      	b.n	8004764 <HAL_RCC_OscConfig+0x1e4>
 8004740:	4b29      	ldr	r3, [pc, #164]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a28      	ldr	r2, [pc, #160]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 8004746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	4b26      	ldr	r3, [pc, #152]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a25      	ldr	r2, [pc, #148]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 8004752:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	4b23      	ldr	r3, [pc, #140]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a22      	ldr	r2, [pc, #136]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 800475e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d013      	beq.n	8004794 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476c:	f7fd fcce 	bl	800210c <HAL_GetTick>
 8004770:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004774:	f7fd fcca 	bl	800210c <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	@ 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e32e      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004786:	4b18      	ldr	r3, [pc, #96]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0x1f4>
 8004792:	e012      	b.n	80047ba <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fd fcba 	bl	800210c <HAL_GetTick>
 8004798:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800479c:	f7fd fcb6 	bl	800210c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	@ 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e31a      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ae:	4b0e      	ldr	r3, [pc, #56]	@ (80047e8 <HAL_RCC_OscConfig+0x268>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 809a 	beq.w	80048fc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <HAL_RCC_OscConfig+0x25a>
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	2b18      	cmp	r3, #24
 80047d2:	d149      	bne.n	8004868 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d146      	bne.n	8004868 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d104      	bne.n	80047ec <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e2fe      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
 80047e6:	bf00      	nop
 80047e8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d11c      	bne.n	800482c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80047f2:	4b9a      	ldr	r3, [pc, #616]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0218 	and.w	r2, r3, #24
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d014      	beq.n	800482c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004802:	4b96      	ldr	r3, [pc, #600]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f023 0218 	bic.w	r2, r3, #24
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	4993      	ldr	r1, [pc, #588]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004810:	4313      	orrs	r3, r2
 8004812:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004814:	f000 fdd0 	bl	80053b8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004818:	4b91      	ldr	r3, [pc, #580]	@ (8004a60 <HAL_RCC_OscConfig+0x4e0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f7fd fbeb 	bl	8001ff8 <HAL_InitTick>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e2db      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482c:	f7fd fc6e 	bl	800210c <HAL_GetTick>
 8004830:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004834:	f7fd fc6a 	bl	800210c <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e2ce      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004846:	4b85      	ldr	r3, [pc, #532]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f0      	beq.n	8004834 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004852:	4b82      	ldr	r3, [pc, #520]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	497e      	ldr	r1, [pc, #504]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004862:	4313      	orrs	r3, r2
 8004864:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004866:	e049      	b.n	80048fc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d02c      	beq.n	80048ca <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004870:	4b7a      	ldr	r3, [pc, #488]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f023 0218 	bic.w	r2, r3, #24
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	4977      	ldr	r1, [pc, #476]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004882:	4b76      	ldr	r3, [pc, #472]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a75      	ldr	r2, [pc, #468]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488e:	f7fd fc3d 	bl	800210c <HAL_GetTick>
 8004892:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004896:	f7fd fc39 	bl	800210c <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e29d      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a8:	4b6c      	ldr	r3, [pc, #432]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80048b4:	4b69      	ldr	r3, [pc, #420]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	041b      	lsls	r3, r3, #16
 80048c2:	4966      	ldr	r1, [pc, #408]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	610b      	str	r3, [r1, #16]
 80048c8:	e018      	b.n	80048fc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ca:	4b64      	ldr	r3, [pc, #400]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a63      	ldr	r2, [pc, #396]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fd fc19 	bl	800210c <HAL_GetTick>
 80048da:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80048de:	f7fd fc15 	bl	800210c <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e279      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048f0:	4b5a      	ldr	r3, [pc, #360]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1f0      	bne.n	80048de <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b00      	cmp	r3, #0
 8004906:	d03c      	beq.n	8004982 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01c      	beq.n	800494a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004910:	4b52      	ldr	r3, [pc, #328]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004916:	4a51      	ldr	r2, [pc, #324]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004918:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800491c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004920:	f7fd fbf4 	bl	800210c <HAL_GetTick>
 8004924:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004928:	f7fd fbf0 	bl	800210c <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e254      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800493a:	4b48      	ldr	r3, [pc, #288]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 800493c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004940:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0ef      	beq.n	8004928 <HAL_RCC_OscConfig+0x3a8>
 8004948:	e01b      	b.n	8004982 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800494a:	4b44      	ldr	r3, [pc, #272]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 800494c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004950:	4a42      	ldr	r2, [pc, #264]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004952:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004956:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495a:	f7fd fbd7 	bl	800210c <HAL_GetTick>
 800495e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004962:	f7fd fbd3 	bl	800210c <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e237      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004974:	4b39      	ldr	r3, [pc, #228]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800497a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1ef      	bne.n	8004962 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 80d2 	beq.w	8004b34 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004990:	4b34      	ldr	r3, [pc, #208]	@ (8004a64 <HAL_RCC_OscConfig+0x4e4>)
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d118      	bne.n	80049ce <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800499c:	4b31      	ldr	r3, [pc, #196]	@ (8004a64 <HAL_RCC_OscConfig+0x4e4>)
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	4a30      	ldr	r2, [pc, #192]	@ (8004a64 <HAL_RCC_OscConfig+0x4e4>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a8:	f7fd fbb0 	bl	800210c <HAL_GetTick>
 80049ac:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b0:	f7fd fbac 	bl	800210c <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e210      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80049c2:	4b28      	ldr	r3, [pc, #160]	@ (8004a64 <HAL_RCC_OscConfig+0x4e4>)
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d108      	bne.n	80049e8 <HAL_RCC_OscConfig+0x468>
 80049d6:	4b21      	ldr	r3, [pc, #132]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 80049d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049dc:	4a1f      	ldr	r2, [pc, #124]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80049e6:	e074      	b.n	8004ad2 <HAL_RCC_OscConfig+0x552>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d118      	bne.n	8004a22 <HAL_RCC_OscConfig+0x4a2>
 80049f0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 80049f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049f6:	4a19      	ldr	r2, [pc, #100]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a00:	4b16      	ldr	r3, [pc, #88]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004a02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a06:	4a15      	ldr	r2, [pc, #84]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004a08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a0c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a10:	4b12      	ldr	r3, [pc, #72]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a16:	4a11      	ldr	r2, [pc, #68]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004a18:	f023 0304 	bic.w	r3, r3, #4
 8004a1c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a20:	e057      	b.n	8004ad2 <HAL_RCC_OscConfig+0x552>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b05      	cmp	r3, #5
 8004a28:	d11e      	bne.n	8004a68 <HAL_RCC_OscConfig+0x4e8>
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004a2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a30:	4a0a      	ldr	r2, [pc, #40]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004a32:	f043 0304 	orr.w	r3, r3, #4
 8004a36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a3a:	4b08      	ldr	r3, [pc, #32]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a40:	4a06      	ldr	r2, [pc, #24]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a4a:	4b04      	ldr	r3, [pc, #16]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a50:	4a02      	ldr	r2, [pc, #8]	@ (8004a5c <HAL_RCC_OscConfig+0x4dc>)
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a5a:	e03a      	b.n	8004ad2 <HAL_RCC_OscConfig+0x552>
 8004a5c:	44020c00 	.word	0x44020c00
 8004a60:	20000024 	.word	0x20000024
 8004a64:	44020800 	.word	0x44020800
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b85      	cmp	r3, #133	@ 0x85
 8004a6e:	d118      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x522>
 8004a70:	4ba2      	ldr	r3, [pc, #648]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a76:	4aa1      	ldr	r2, [pc, #644]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004a78:	f043 0304 	orr.w	r3, r3, #4
 8004a7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a80:	4b9e      	ldr	r3, [pc, #632]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004a82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a86:	4a9d      	ldr	r2, [pc, #628]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a90:	4b9a      	ldr	r3, [pc, #616]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a96:	4a99      	ldr	r2, [pc, #612]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004aa0:	e017      	b.n	8004ad2 <HAL_RCC_OscConfig+0x552>
 8004aa2:	4b96      	ldr	r3, [pc, #600]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004aa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004aa8:	4a94      	ldr	r2, [pc, #592]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ab2:	4b92      	ldr	r3, [pc, #584]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004ab4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ab8:	4a90      	ldr	r2, [pc, #576]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004aba:	f023 0304 	bic.w	r3, r3, #4
 8004abe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ac2:	4b8e      	ldr	r3, [pc, #568]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ac8:	4a8c      	ldr	r2, [pc, #560]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ace:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d016      	beq.n	8004b08 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ada:	f7fd fb17 	bl	800210c <HAL_GetTick>
 8004ade:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ae0:	e00a      	b.n	8004af8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae2:	f7fd fb13 	bl	800210c <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e175      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004af8:	4b80      	ldr	r3, [pc, #512]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0ed      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x562>
 8004b06:	e015      	b.n	8004b34 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b08:	f7fd fb00 	bl	800210c <HAL_GetTick>
 8004b0c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b10:	f7fd fafc 	bl	800210c <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e15e      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b26:	4b75      	ldr	r3, [pc, #468]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1ed      	bne.n	8004b10 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d036      	beq.n	8004bae <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d019      	beq.n	8004b7c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b48:	4b6c      	ldr	r3, [pc, #432]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a6b      	ldr	r2, [pc, #428]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004b4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b54:	f7fd fada 	bl	800210c <HAL_GetTick>
 8004b58:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004b5c:	f7fd fad6 	bl	800210c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e13a      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004b6e:	4b63      	ldr	r3, [pc, #396]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x5dc>
 8004b7a:	e018      	b.n	8004bae <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b7c:	4b5f      	ldr	r3, [pc, #380]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a5e      	ldr	r2, [pc, #376]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004b82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b88:	f7fd fac0 	bl	800210c <HAL_GetTick>
 8004b8c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004b90:	f7fd fabc 	bl	800210c <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e120      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004ba2:	4b56      	ldr	r3, [pc, #344]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f0      	bne.n	8004b90 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 8115 	beq.w	8004de2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	2b18      	cmp	r3, #24
 8004bbc:	f000 80af 	beq.w	8004d1e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	f040 8086 	bne.w	8004cd6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004bca:	4b4c      	ldr	r3, [pc, #304]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a4b      	ldr	r2, [pc, #300]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004bd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd6:	f7fd fa99 	bl	800210c <HAL_GetTick>
 8004bda:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004bde:	f7fd fa95 	bl	800210c <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e0f9      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bf0:	4b42      	ldr	r3, [pc, #264]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f0      	bne.n	8004bde <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004bfc:	4b3f      	ldr	r3, [pc, #252]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c04:	f023 0303 	bic.w	r3, r3, #3
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c10:	0212      	lsls	r2, r2, #8
 8004c12:	430a      	orrs	r2, r1
 8004c14:	4939      	ldr	r1, [pc, #228]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	025b      	lsls	r3, r3, #9
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c34:	3b01      	subs	r3, #1
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	3b01      	subs	r3, #1
 8004c44:	061b      	lsls	r3, r3, #24
 8004c46:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c4a:	492c      	ldr	r1, [pc, #176]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004c50:	4b2a      	ldr	r3, [pc, #168]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c54:	4a29      	ldr	r2, [pc, #164]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004c56:	f023 0310 	bic.w	r3, r3, #16
 8004c5a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c60:	4a26      	ldr	r2, [pc, #152]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004c66:	4b25      	ldr	r3, [pc, #148]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6a:	4a24      	ldr	r2, [pc, #144]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004c6c:	f043 0310 	orr.w	r3, r3, #16
 8004c70:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004c72:	4b22      	ldr	r3, [pc, #136]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c76:	f023 020c 	bic.w	r2, r3, #12
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7e:	491f      	ldr	r1, [pc, #124]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004c84:	4b1d      	ldr	r3, [pc, #116]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c88:	f023 0220 	bic.w	r2, r3, #32
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c90:	491a      	ldr	r1, [pc, #104]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c96:	4b19      	ldr	r3, [pc, #100]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9a:	4a18      	ldr	r2, [pc, #96]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004ca2:	4b16      	ldr	r3, [pc, #88]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a15      	ldr	r2, [pc, #84]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004ca8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cae:	f7fd fa2d 	bl	800210c <HAL_GetTick>
 8004cb2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004cb6:	f7fd fa29 	bl	800210c <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e08d      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f0      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x736>
 8004cd4:	e085      	b.n	8004de2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004cd6:	4b09      	ldr	r3, [pc, #36]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a08      	ldr	r2, [pc, #32]	@ (8004cfc <HAL_RCC_OscConfig+0x77c>)
 8004cdc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce2:	f7fd fa13 	bl	800210c <HAL_GetTick>
 8004ce6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004ce8:	e00a      	b.n	8004d00 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004cea:	f7fd fa0f 	bl	800210c <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d903      	bls.n	8004d00 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e073      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
 8004cfc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d00:	4b3a      	ldr	r3, [pc, #232]	@ (8004dec <HAL_RCC_OscConfig+0x86c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1ee      	bne.n	8004cea <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004d0c:	4b37      	ldr	r3, [pc, #220]	@ (8004dec <HAL_RCC_OscConfig+0x86c>)
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d10:	4a36      	ldr	r2, [pc, #216]	@ (8004dec <HAL_RCC_OscConfig+0x86c>)
 8004d12:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004d16:	f023 0303 	bic.w	r3, r3, #3
 8004d1a:	6293      	str	r3, [r2, #40]	@ 0x28
 8004d1c:	e061      	b.n	8004de2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004d1e:	4b33      	ldr	r3, [pc, #204]	@ (8004dec <HAL_RCC_OscConfig+0x86c>)
 8004d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d22:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d24:	4b31      	ldr	r3, [pc, #196]	@ (8004dec <HAL_RCC_OscConfig+0x86c>)
 8004d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d28:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d031      	beq.n	8004d96 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f003 0203 	and.w	r2, r3, #3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d12a      	bne.n	8004d96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	0a1b      	lsrs	r3, r3, #8
 8004d44:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d122      	bne.n	8004d96 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d5a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d11a      	bne.n	8004d96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	0a5b      	lsrs	r3, r3, #9
 8004d64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d111      	bne.n	8004d96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d7e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d108      	bne.n	8004d96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	0e1b      	lsrs	r3, r3, #24
 8004d88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d90:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d001      	beq.n	8004d9a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e024      	b.n	8004de4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004d9a:	4b14      	ldr	r3, [pc, #80]	@ (8004dec <HAL_RCC_OscConfig+0x86c>)
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9e:	08db      	lsrs	r3, r3, #3
 8004da0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d01a      	beq.n	8004de2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004dac:	4b0f      	ldr	r3, [pc, #60]	@ (8004dec <HAL_RCC_OscConfig+0x86c>)
 8004dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db0:	4a0e      	ldr	r2, [pc, #56]	@ (8004dec <HAL_RCC_OscConfig+0x86c>)
 8004db2:	f023 0310 	bic.w	r3, r3, #16
 8004db6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fd f9a8 	bl	800210c <HAL_GetTick>
 8004dbc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004dbe:	bf00      	nop
 8004dc0:	f7fd f9a4 	bl	800210c <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d0f9      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dd0:	4a06      	ldr	r2, [pc, #24]	@ (8004dec <HAL_RCC_OscConfig+0x86c>)
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004dd6:	4b05      	ldr	r3, [pc, #20]	@ (8004dec <HAL_RCC_OscConfig+0x86c>)
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dda:	4a04      	ldr	r2, [pc, #16]	@ (8004dec <HAL_RCC_OscConfig+0x86c>)
 8004ddc:	f043 0310 	orr.w	r3, r3, #16
 8004de0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3720      	adds	r7, #32
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	44020c00 	.word	0x44020c00

08004df0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e19e      	b.n	8005142 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e04:	4b83      	ldr	r3, [pc, #524]	@ (8005014 <HAL_RCC_ClockConfig+0x224>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d910      	bls.n	8004e34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e12:	4b80      	ldr	r3, [pc, #512]	@ (8005014 <HAL_RCC_ClockConfig+0x224>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f023 020f 	bic.w	r2, r3, #15
 8004e1a:	497e      	ldr	r1, [pc, #504]	@ (8005014 <HAL_RCC_ClockConfig+0x224>)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e22:	4b7c      	ldr	r3, [pc, #496]	@ (8005014 <HAL_RCC_ClockConfig+0x224>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d001      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e186      	b.n	8005142 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d012      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695a      	ldr	r2, [r3, #20]
 8004e44:	4b74      	ldr	r3, [pc, #464]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	0a1b      	lsrs	r3, r3, #8
 8004e4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d909      	bls.n	8004e66 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004e52:	4b71      	ldr	r3, [pc, #452]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	496d      	ldr	r1, [pc, #436]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d012      	beq.n	8004e98 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	4b68      	ldr	r3, [pc, #416]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	091b      	lsrs	r3, r3, #4
 8004e7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d909      	bls.n	8004e98 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004e84:	4b64      	ldr	r3, [pc, #400]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	4961      	ldr	r1, [pc, #388]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d010      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	4b5b      	ldr	r3, [pc, #364]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d908      	bls.n	8004ec6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004eb4:	4b58      	ldr	r3, [pc, #352]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4955      	ldr	r1, [pc, #340]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d010      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	4b50      	ldr	r3, [pc, #320]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d908      	bls.n	8004ef4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004ee2:	4b4d      	ldr	r3, [pc, #308]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f023 020f 	bic.w	r2, r3, #15
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	494a      	ldr	r1, [pc, #296]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 8093 	beq.w	8005028 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d107      	bne.n	8004f1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004f0a:	4b43      	ldr	r3, [pc, #268]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d121      	bne.n	8004f5a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e113      	b.n	8005142 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f22:	4b3d      	ldr	r3, [pc, #244]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d115      	bne.n	8004f5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e107      	b.n	8005142 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d107      	bne.n	8004f4a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004f3a:	4b37      	ldr	r3, [pc, #220]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e0fb      	b.n	8005142 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f4a:	4b33      	ldr	r3, [pc, #204]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e0f3      	b.n	8005142 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f023 0203 	bic.w	r2, r3, #3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	492c      	ldr	r1, [pc, #176]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6c:	f7fd f8ce 	bl	800210c <HAL_GetTick>
 8004f70:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d112      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f7a:	e00a      	b.n	8004f92 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004f7c:	f7fd f8c6 	bl	800210c <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e0d7      	b.n	8005142 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f92:	4b21      	ldr	r3, [pc, #132]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f003 0318 	and.w	r3, r3, #24
 8004f9a:	2b18      	cmp	r3, #24
 8004f9c:	d1ee      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x18c>
 8004f9e:	e043      	b.n	8005028 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d112      	bne.n	8004fce <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fa8:	e00a      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004faa:	f7fd f8af 	bl	800210c <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e0c0      	b.n	8005142 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fc0:	4b15      	ldr	r3, [pc, #84]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	f003 0318 	and.w	r3, r3, #24
 8004fc8:	2b10      	cmp	r3, #16
 8004fca:	d1ee      	bne.n	8004faa <HAL_RCC_ClockConfig+0x1ba>
 8004fcc:	e02c      	b.n	8005028 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d122      	bne.n	800501c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004fd6:	e00a      	b.n	8004fee <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd8:	f7fd f898 	bl	800210c <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e0a9      	b.n	8005142 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004fee:	4b0a      	ldr	r3, [pc, #40]	@ (8005018 <HAL_RCC_ClockConfig+0x228>)
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f003 0318 	and.w	r3, r3, #24
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	d1ee      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0x1e8>
 8004ffa:	e015      	b.n	8005028 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004ffc:	f7fd f886 	bl	800210c <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800500a:	4293      	cmp	r3, r2
 800500c:	d906      	bls.n	800501c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e097      	b.n	8005142 <HAL_RCC_ClockConfig+0x352>
 8005012:	bf00      	nop
 8005014:	40022000 	.word	0x40022000
 8005018:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800501c:	4b4b      	ldr	r3, [pc, #300]	@ (800514c <HAL_RCC_ClockConfig+0x35c>)
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	f003 0318 	and.w	r3, r3, #24
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e9      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d010      	beq.n	8005056 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	4b44      	ldr	r3, [pc, #272]	@ (800514c <HAL_RCC_ClockConfig+0x35c>)
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	429a      	cmp	r2, r3
 8005042:	d208      	bcs.n	8005056 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005044:	4b41      	ldr	r3, [pc, #260]	@ (800514c <HAL_RCC_ClockConfig+0x35c>)
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	f023 020f 	bic.w	r2, r3, #15
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	493e      	ldr	r1, [pc, #248]	@ (800514c <HAL_RCC_ClockConfig+0x35c>)
 8005052:	4313      	orrs	r3, r2
 8005054:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005056:	4b3e      	ldr	r3, [pc, #248]	@ (8005150 <HAL_RCC_ClockConfig+0x360>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d210      	bcs.n	8005086 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005064:	4b3a      	ldr	r3, [pc, #232]	@ (8005150 <HAL_RCC_ClockConfig+0x360>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f023 020f 	bic.w	r2, r3, #15
 800506c:	4938      	ldr	r1, [pc, #224]	@ (8005150 <HAL_RCC_ClockConfig+0x360>)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	4313      	orrs	r3, r2
 8005072:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005074:	4b36      	ldr	r3, [pc, #216]	@ (8005150 <HAL_RCC_ClockConfig+0x360>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d001      	beq.n	8005086 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e05d      	b.n	8005142 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b00      	cmp	r3, #0
 8005090:	d010      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	4b2d      	ldr	r3, [pc, #180]	@ (800514c <HAL_RCC_ClockConfig+0x35c>)
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800509e:	429a      	cmp	r2, r3
 80050a0:	d208      	bcs.n	80050b4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80050a2:	4b2a      	ldr	r3, [pc, #168]	@ (800514c <HAL_RCC_ClockConfig+0x35c>)
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	4927      	ldr	r1, [pc, #156]	@ (800514c <HAL_RCC_ClockConfig+0x35c>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d012      	beq.n	80050e6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691a      	ldr	r2, [r3, #16]
 80050c4:	4b21      	ldr	r3, [pc, #132]	@ (800514c <HAL_RCC_ClockConfig+0x35c>)
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d209      	bcs.n	80050e6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80050d2:	4b1e      	ldr	r3, [pc, #120]	@ (800514c <HAL_RCC_ClockConfig+0x35c>)
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	491a      	ldr	r1, [pc, #104]	@ (800514c <HAL_RCC_ClockConfig+0x35c>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d012      	beq.n	8005118 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695a      	ldr	r2, [r3, #20]
 80050f6:	4b15      	ldr	r3, [pc, #84]	@ (800514c <HAL_RCC_ClockConfig+0x35c>)
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	0a1b      	lsrs	r3, r3, #8
 80050fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005100:	429a      	cmp	r2, r3
 8005102:	d209      	bcs.n	8005118 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005104:	4b11      	ldr	r3, [pc, #68]	@ (800514c <HAL_RCC_ClockConfig+0x35c>)
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	490e      	ldr	r1, [pc, #56]	@ (800514c <HAL_RCC_ClockConfig+0x35c>)
 8005114:	4313      	orrs	r3, r2
 8005116:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005118:	f000 f822 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 800511c:	4602      	mov	r2, r0
 800511e:	4b0b      	ldr	r3, [pc, #44]	@ (800514c <HAL_RCC_ClockConfig+0x35c>)
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	490b      	ldr	r1, [pc, #44]	@ (8005154 <HAL_RCC_ClockConfig+0x364>)
 8005128:	5ccb      	ldrb	r3, [r1, r3]
 800512a:	fa22 f303 	lsr.w	r3, r2, r3
 800512e:	4a0a      	ldr	r2, [pc, #40]	@ (8005158 <HAL_RCC_ClockConfig+0x368>)
 8005130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005132:	4b0a      	ldr	r3, [pc, #40]	@ (800515c <HAL_RCC_ClockConfig+0x36c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f7fc ff5e 	bl	8001ff8 <HAL_InitTick>
 800513c:	4603      	mov	r3, r0
 800513e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005140:	7afb      	ldrb	r3, [r7, #11]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	44020c00 	.word	0x44020c00
 8005150:	40022000 	.word	0x40022000
 8005154:	08011398 	.word	0x08011398
 8005158:	20000004 	.word	0x20000004
 800515c:	20000024 	.word	0x20000024

08005160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005160:	b480      	push	{r7}
 8005162:	b089      	sub	sp, #36	@ 0x24
 8005164:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8005166:	4b8c      	ldr	r3, [pc, #560]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f003 0318 	and.w	r3, r3, #24
 800516e:	2b08      	cmp	r3, #8
 8005170:	d102      	bne.n	8005178 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005172:	4b8a      	ldr	r3, [pc, #552]	@ (800539c <HAL_RCC_GetSysClockFreq+0x23c>)
 8005174:	61fb      	str	r3, [r7, #28]
 8005176:	e107      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005178:	4b87      	ldr	r3, [pc, #540]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f003 0318 	and.w	r3, r3, #24
 8005180:	2b00      	cmp	r3, #0
 8005182:	d112      	bne.n	80051aa <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005184:	4b84      	ldr	r3, [pc, #528]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0320 	and.w	r3, r3, #32
 800518c:	2b00      	cmp	r3, #0
 800518e:	d009      	beq.n	80051a4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005190:	4b81      	ldr	r3, [pc, #516]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	08db      	lsrs	r3, r3, #3
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	4a81      	ldr	r2, [pc, #516]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x240>)
 800519c:	fa22 f303 	lsr.w	r3, r2, r3
 80051a0:	61fb      	str	r3, [r7, #28]
 80051a2:	e0f1      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80051a4:	4b7e      	ldr	r3, [pc, #504]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x240>)
 80051a6:	61fb      	str	r3, [r7, #28]
 80051a8:	e0ee      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051aa:	4b7b      	ldr	r3, [pc, #492]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f003 0318 	and.w	r3, r3, #24
 80051b2:	2b10      	cmp	r3, #16
 80051b4:	d102      	bne.n	80051bc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051b6:	4b7b      	ldr	r3, [pc, #492]	@ (80053a4 <HAL_RCC_GetSysClockFreq+0x244>)
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	e0e5      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051bc:	4b76      	ldr	r3, [pc, #472]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	f003 0318 	and.w	r3, r3, #24
 80051c4:	2b18      	cmp	r3, #24
 80051c6:	f040 80dd 	bne.w	8005384 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80051ca:	4b73      	ldr	r3, [pc, #460]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 80051cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80051d4:	4b70      	ldr	r3, [pc, #448]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 80051d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d8:	0a1b      	lsrs	r3, r3, #8
 80051da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80051e0:	4b6d      	ldr	r3, [pc, #436]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 80051e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80051ec:	4b6a      	ldr	r3, [pc, #424]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 80051ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80051f0:	08db      	lsrs	r3, r3, #3
 80051f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	fb02 f303 	mul.w	r3, r2, r3
 80051fc:	ee07 3a90 	vmov	s15, r3
 8005200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005204:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 80b7 	beq.w	800537e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d003      	beq.n	800521e <HAL_RCC_GetSysClockFreq+0xbe>
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b03      	cmp	r3, #3
 800521a:	d056      	beq.n	80052ca <HAL_RCC_GetSysClockFreq+0x16a>
 800521c:	e077      	b.n	800530e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800521e:	4b5e      	ldr	r3, [pc, #376]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b00      	cmp	r3, #0
 8005228:	d02d      	beq.n	8005286 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800522a:	4b5b      	ldr	r3, [pc, #364]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	08db      	lsrs	r3, r3, #3
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	4a5a      	ldr	r2, [pc, #360]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x240>)
 8005236:	fa22 f303 	lsr.w	r3, r2, r3
 800523a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	ee07 3a90 	vmov	s15, r3
 800524c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005254:	4b50      	ldr	r3, [pc, #320]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 8005256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525c:	ee07 3a90 	vmov	s15, r3
 8005260:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005264:	ed97 6a02 	vldr	s12, [r7, #8]
 8005268:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80053a8 <HAL_RCC_GetSysClockFreq+0x248>
 800526c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005270:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005274:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005278:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800527c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005280:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005284:	e065      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	ee07 3a90 	vmov	s15, r3
 800528c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005290:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80053ac <HAL_RCC_GetSysClockFreq+0x24c>
 8005294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005298:	4b3f      	ldr	r3, [pc, #252]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 800529a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800529c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a0:	ee07 3a90 	vmov	s15, r3
 80052a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80052a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80052ac:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80053a8 <HAL_RCC_GetSysClockFreq+0x248>
 80052b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80052b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80052c8:	e043      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	ee07 3a90 	vmov	s15, r3
 80052d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80053b0 <HAL_RCC_GetSysClockFreq+0x250>
 80052d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 80052de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e4:	ee07 3a90 	vmov	s15, r3
 80052e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80052ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80052f0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80053a8 <HAL_RCC_GetSysClockFreq+0x248>
 80052f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80052fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005300:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005308:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800530c:	e021      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	ee07 3a90 	vmov	s15, r3
 8005314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005318:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80053b4 <HAL_RCC_GetSysClockFreq+0x254>
 800531c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005320:	4b1d      	ldr	r3, [pc, #116]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 8005322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005328:	ee07 3a90 	vmov	s15, r3
 800532c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005330:	ed97 6a02 	vldr	s12, [r7, #8]
 8005334:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80053a8 <HAL_RCC_GetSysClockFreq+0x248>
 8005338:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800533c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005340:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005344:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800534c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005350:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8005352:	4b11      	ldr	r3, [pc, #68]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x238>)
 8005354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005356:	0a5b      	lsrs	r3, r3, #9
 8005358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800535c:	3301      	adds	r3, #1
 800535e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800536a:	edd7 6a06 	vldr	s13, [r7, #24]
 800536e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005376:	ee17 3a90 	vmov	r3, s15
 800537a:	61fb      	str	r3, [r7, #28]
 800537c:	e004      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
 8005382:	e001      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8005384:	4b06      	ldr	r3, [pc, #24]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x240>)
 8005386:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8005388:	69fb      	ldr	r3, [r7, #28]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3724      	adds	r7, #36	@ 0x24
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	44020c00 	.word	0x44020c00
 800539c:	003d0900 	.word	0x003d0900
 80053a0:	03d09000 	.word	0x03d09000
 80053a4:	007a1200 	.word	0x007a1200
 80053a8:	46000000 	.word	0x46000000
 80053ac:	4c742400 	.word	0x4c742400
 80053b0:	4af42400 	.word	0x4af42400
 80053b4:	4a742400 	.word	0x4a742400

080053b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80053bc:	f7ff fed0 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 80053c0:	4602      	mov	r2, r0
 80053c2:	4b08      	ldr	r3, [pc, #32]	@ (80053e4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80053c4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80053c6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80053ca:	4907      	ldr	r1, [pc, #28]	@ (80053e8 <HAL_RCC_GetHCLKFreq+0x30>)
 80053cc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80053ce:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80053d2:	fa22 f303 	lsr.w	r3, r2, r3
 80053d6:	4a05      	ldr	r2, [pc, #20]	@ (80053ec <HAL_RCC_GetHCLKFreq+0x34>)
 80053d8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80053da:	4b04      	ldr	r3, [pc, #16]	@ (80053ec <HAL_RCC_GetHCLKFreq+0x34>)
 80053dc:	681b      	ldr	r3, [r3, #0]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	44020c00 	.word	0x44020c00
 80053e8:	08011398 	.word	0x08011398
 80053ec:	20000004 	.word	0x20000004

080053f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80053f4:	f7ff ffe0 	bl	80053b8 <HAL_RCC_GetHCLKFreq>
 80053f8:	4602      	mov	r2, r0
 80053fa:	4b06      	ldr	r3, [pc, #24]	@ (8005414 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	091b      	lsrs	r3, r3, #4
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	4904      	ldr	r1, [pc, #16]	@ (8005418 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005406:	5ccb      	ldrb	r3, [r1, r3]
 8005408:	f003 031f 	and.w	r3, r3, #31
 800540c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005410:	4618      	mov	r0, r3
 8005412:	bd80      	pop	{r7, pc}
 8005414:	44020c00 	.word	0x44020c00
 8005418:	080113a8 	.word	0x080113a8

0800541c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8005420:	f7ff ffca 	bl	80053b8 <HAL_RCC_GetHCLKFreq>
 8005424:	4602      	mov	r2, r0
 8005426:	4b06      	ldr	r3, [pc, #24]	@ (8005440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	0a1b      	lsrs	r3, r3, #8
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	4904      	ldr	r1, [pc, #16]	@ (8005444 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005432:	5ccb      	ldrb	r3, [r1, r3]
 8005434:	f003 031f 	and.w	r3, r3, #31
 8005438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800543c:	4618      	mov	r0, r3
 800543e:	bd80      	pop	{r7, pc}
 8005440:	44020c00 	.word	0x44020c00
 8005444:	080113a8 	.word	0x080113a8

08005448 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800544c:	f7ff ffb4 	bl	80053b8 <HAL_RCC_GetHCLKFreq>
 8005450:	4602      	mov	r2, r0
 8005452:	4b06      	ldr	r3, [pc, #24]	@ (800546c <HAL_RCC_GetPCLK3Freq+0x24>)
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	0b1b      	lsrs	r3, r3, #12
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	4904      	ldr	r1, [pc, #16]	@ (8005470 <HAL_RCC_GetPCLK3Freq+0x28>)
 800545e:	5ccb      	ldrb	r3, [r1, r3]
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd80      	pop	{r7, pc}
 800546c:	44020c00 	.word	0x44020c00
 8005470:	080113a8 	.word	0x080113a8

08005474 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005478:	b0d8      	sub	sp, #352	@ 0x160
 800547a:	af00      	add	r7, sp, #0
 800547c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005480:	2300      	movs	r3, #0
 8005482:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005486:	2300      	movs	r3, #0
 8005488:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800548c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8005498:	2500      	movs	r5, #0
 800549a:	ea54 0305 	orrs.w	r3, r4, r5
 800549e:	d00b      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80054a0:	4bcd      	ldr	r3, [pc, #820]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80054a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054a6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80054aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b0:	4ac9      	ldr	r2, [pc, #804]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80054b2:	430b      	orrs	r3, r1
 80054b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f002 0801 	and.w	r8, r2, #1
 80054c4:	f04f 0900 	mov.w	r9, #0
 80054c8:	ea58 0309 	orrs.w	r3, r8, r9
 80054cc:	d042      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80054ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d4:	2b05      	cmp	r3, #5
 80054d6:	d823      	bhi.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80054d8:	a201      	add	r2, pc, #4	@ (adr r2, 80054e0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	08005529 	.word	0x08005529
 80054e4:	080054f9 	.word	0x080054f9
 80054e8:	0800550d 	.word	0x0800550d
 80054ec:	08005529 	.word	0x08005529
 80054f0:	08005529 	.word	0x08005529
 80054f4:	08005529 	.word	0x08005529
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054fc:	3308      	adds	r3, #8
 80054fe:	4618      	mov	r0, r3
 8005500:	f004 fee0 	bl	800a2c4 <RCCEx_PLL2_Config>
 8005504:	4603      	mov	r3, r0
 8005506:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800550a:	e00e      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800550c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005510:	3330      	adds	r3, #48	@ 0x30
 8005512:	4618      	mov	r0, r3
 8005514:	f004 ff6e 	bl	800a3f4 <RCCEx_PLL3_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800551e:	e004      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005526:	e000      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8005528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800552a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10c      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005532:	4ba9      	ldr	r3, [pc, #676]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005534:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005538:	f023 0107 	bic.w	r1, r3, #7
 800553c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005542:	4aa5      	ldr	r2, [pc, #660]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005544:	430b      	orrs	r3, r1
 8005546:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800554a:	e003      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005550:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005554:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555c:	f002 0a02 	and.w	sl, r2, #2
 8005560:	f04f 0b00 	mov.w	fp, #0
 8005564:	ea5a 030b 	orrs.w	r3, sl, fp
 8005568:	f000 8088 	beq.w	800567c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800556c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005572:	2b28      	cmp	r3, #40	@ 0x28
 8005574:	d868      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005576:	a201      	add	r2, pc, #4	@ (adr r2, 800557c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557c:	08005651 	.word	0x08005651
 8005580:	08005649 	.word	0x08005649
 8005584:	08005649 	.word	0x08005649
 8005588:	08005649 	.word	0x08005649
 800558c:	08005649 	.word	0x08005649
 8005590:	08005649 	.word	0x08005649
 8005594:	08005649 	.word	0x08005649
 8005598:	08005649 	.word	0x08005649
 800559c:	08005621 	.word	0x08005621
 80055a0:	08005649 	.word	0x08005649
 80055a4:	08005649 	.word	0x08005649
 80055a8:	08005649 	.word	0x08005649
 80055ac:	08005649 	.word	0x08005649
 80055b0:	08005649 	.word	0x08005649
 80055b4:	08005649 	.word	0x08005649
 80055b8:	08005649 	.word	0x08005649
 80055bc:	08005635 	.word	0x08005635
 80055c0:	08005649 	.word	0x08005649
 80055c4:	08005649 	.word	0x08005649
 80055c8:	08005649 	.word	0x08005649
 80055cc:	08005649 	.word	0x08005649
 80055d0:	08005649 	.word	0x08005649
 80055d4:	08005649 	.word	0x08005649
 80055d8:	08005649 	.word	0x08005649
 80055dc:	08005651 	.word	0x08005651
 80055e0:	08005649 	.word	0x08005649
 80055e4:	08005649 	.word	0x08005649
 80055e8:	08005649 	.word	0x08005649
 80055ec:	08005649 	.word	0x08005649
 80055f0:	08005649 	.word	0x08005649
 80055f4:	08005649 	.word	0x08005649
 80055f8:	08005649 	.word	0x08005649
 80055fc:	08005651 	.word	0x08005651
 8005600:	08005649 	.word	0x08005649
 8005604:	08005649 	.word	0x08005649
 8005608:	08005649 	.word	0x08005649
 800560c:	08005649 	.word	0x08005649
 8005610:	08005649 	.word	0x08005649
 8005614:	08005649 	.word	0x08005649
 8005618:	08005649 	.word	0x08005649
 800561c:	08005651 	.word	0x08005651
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005620:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005624:	3308      	adds	r3, #8
 8005626:	4618      	mov	r0, r3
 8005628:	f004 fe4c 	bl	800a2c4 <RCCEx_PLL2_Config>
 800562c:	4603      	mov	r3, r0
 800562e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005632:	e00e      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005634:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005638:	3330      	adds	r3, #48	@ 0x30
 800563a:	4618      	mov	r0, r3
 800563c:	f004 feda 	bl	800a3f4 <RCCEx_PLL3_Config>
 8005640:	4603      	mov	r3, r0
 8005642:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005646:	e004      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800564e:	e000      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8005650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005652:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10c      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800565a:	4b5f      	ldr	r3, [pc, #380]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800565c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005660:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005664:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800566a:	4a5b      	ldr	r2, [pc, #364]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800566c:	430b      	orrs	r3, r1
 800566e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005672:	e003      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005674:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005678:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800567c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	f002 0304 	and.w	r3, r2, #4
 8005688:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800568c:	2300      	movs	r3, #0
 800568e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8005692:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8005696:	460b      	mov	r3, r1
 8005698:	4313      	orrs	r3, r2
 800569a:	d04e      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800569c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056a2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80056a6:	d02c      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80056a8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80056ac:	d825      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80056ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056b2:	d028      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80056b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056b8:	d81f      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80056ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80056bc:	d025      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80056be:	2bc0      	cmp	r3, #192	@ 0xc0
 80056c0:	d81b      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80056c2:	2b80      	cmp	r3, #128	@ 0x80
 80056c4:	d00f      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80056c6:	2b80      	cmp	r3, #128	@ 0x80
 80056c8:	d817      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d01f      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80056ce:	2b40      	cmp	r3, #64	@ 0x40
 80056d0:	d113      	bne.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056d6:	3308      	adds	r3, #8
 80056d8:	4618      	mov	r0, r3
 80056da:	f004 fdf3 	bl	800a2c4 <RCCEx_PLL2_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80056e4:	e014      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056ea:	3330      	adds	r3, #48	@ 0x30
 80056ec:	4618      	mov	r0, r3
 80056ee:	f004 fe81 	bl	800a3f4 <RCCEx_PLL3_Config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80056f8:	e00a      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005700:	e006      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005702:	bf00      	nop
 8005704:	e004      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005706:	bf00      	nop
 8005708:	e002      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800570a:	bf00      	nop
 800570c:	e000      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800570e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005710:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10c      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005718:	4b2f      	ldr	r3, [pc, #188]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800571a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800571e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005722:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005728:	4a2b      	ldr	r2, [pc, #172]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800572a:	430b      	orrs	r3, r1
 800572c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005730:	e003      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005732:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005736:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800573a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005742:	f002 0308 	and.w	r3, r2, #8
 8005746:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800574a:	2300      	movs	r3, #0
 800574c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8005750:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8005754:	460b      	mov	r3, r1
 8005756:	4313      	orrs	r3, r2
 8005758:	d056      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800575a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800575e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005760:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005764:	d031      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005766:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800576a:	d82a      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800576c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005770:	d02d      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005772:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005776:	d824      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005778:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800577c:	d029      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800577e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005782:	d81e      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005788:	d011      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800578a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800578e:	d818      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005790:	2b00      	cmp	r3, #0
 8005792:	d023      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005798:	d113      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800579a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800579e:	3308      	adds	r3, #8
 80057a0:	4618      	mov	r0, r3
 80057a2:	f004 fd8f 	bl	800a2c4 <RCCEx_PLL2_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80057ac:	e017      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057b2:	3330      	adds	r3, #48	@ 0x30
 80057b4:	4618      	mov	r0, r3
 80057b6:	f004 fe1d 	bl	800a3f4 <RCCEx_PLL3_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80057c0:	e00d      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80057c8:	e009      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80057ca:	bf00      	nop
 80057cc:	e007      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80057ce:	bf00      	nop
 80057d0:	e005      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80057d2:	bf00      	nop
 80057d4:	e003      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80057d6:	bf00      	nop
 80057d8:	44020c00 	.word	0x44020c00
        break;
 80057dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10c      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80057e6:	4bbb      	ldr	r3, [pc, #748]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80057e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80057ec:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80057f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057f6:	4ab7      	ldr	r2, [pc, #732]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80057f8:	430b      	orrs	r3, r1
 80057fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80057fe:	e003      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005800:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005804:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005808:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800580c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005810:	f002 0310 	and.w	r3, r2, #16
 8005814:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005818:	2300      	movs	r3, #0
 800581a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800581e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8005822:	460b      	mov	r3, r1
 8005824:	4313      	orrs	r3, r2
 8005826:	d053      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8005828:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800582c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800582e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005832:	d031      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005834:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005838:	d82a      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800583a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800583e:	d02d      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005840:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005844:	d824      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005846:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800584a:	d029      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800584c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005850:	d81e      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005856:	d011      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800585c:	d818      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d020      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005866:	d113      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800586c:	3308      	adds	r3, #8
 800586e:	4618      	mov	r0, r3
 8005870:	f004 fd28 	bl	800a2c4 <RCCEx_PLL2_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800587a:	e014      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800587c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005880:	3330      	adds	r3, #48	@ 0x30
 8005882:	4618      	mov	r0, r3
 8005884:	f004 fdb6 	bl	800a3f4 <RCCEx_PLL3_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800588e:	e00a      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005896:	e006      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005898:	bf00      	nop
 800589a:	e004      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800589c:	bf00      	nop
 800589e:	e002      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80058a0:	bf00      	nop
 80058a2:	e000      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80058a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10c      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80058ae:	4b89      	ldr	r3, [pc, #548]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80058b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80058b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80058b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058be:	4a85      	ldr	r2, [pc, #532]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80058c0:	430b      	orrs	r3, r1
 80058c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80058c6:	e003      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d8:	f002 0320 	and.w	r3, r2, #32
 80058dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80058e0:	2300      	movs	r3, #0
 80058e2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80058e6:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80058ea:	460b      	mov	r3, r1
 80058ec:	4313      	orrs	r3, r2
 80058ee:	d053      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80058f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80058fa:	d031      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80058fc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005900:	d82a      	bhi.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005906:	d02d      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800590c:	d824      	bhi.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800590e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005912:	d029      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005914:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005918:	d81e      	bhi.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800591a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800591e:	d011      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005924:	d818      	bhi.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005926:	2b00      	cmp	r3, #0
 8005928:	d020      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800592a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800592e:	d113      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005930:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005934:	3308      	adds	r3, #8
 8005936:	4618      	mov	r0, r3
 8005938:	f004 fcc4 	bl	800a2c4 <RCCEx_PLL2_Config>
 800593c:	4603      	mov	r3, r0
 800593e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005942:	e014      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005944:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005948:	3330      	adds	r3, #48	@ 0x30
 800594a:	4618      	mov	r0, r3
 800594c:	f004 fd52 	bl	800a3f4 <RCCEx_PLL3_Config>
 8005950:	4603      	mov	r3, r0
 8005952:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005956:	e00a      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800595e:	e006      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005960:	bf00      	nop
 8005962:	e004      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005964:	bf00      	nop
 8005966:	e002      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005968:	bf00      	nop
 800596a:	e000      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800596c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800596e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10c      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005976:	4b57      	ldr	r3, [pc, #348]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800597c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8005980:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005986:	4a53      	ldr	r2, [pc, #332]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005988:	430b      	orrs	r3, r1
 800598a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800598e:	e003      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005990:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005994:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005998:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80059a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80059ae:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80059b2:	460b      	mov	r3, r1
 80059b4:	4313      	orrs	r3, r2
 80059b6:	d053      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80059b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059be:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80059c2:	d031      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80059c4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80059c8:	d82a      	bhi.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80059ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ce:	d02d      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80059d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059d4:	d824      	bhi.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80059d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80059da:	d029      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80059dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80059e0:	d81e      	bhi.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80059e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80059e6:	d011      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x598>
 80059e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80059ec:	d818      	bhi.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d020      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80059f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059f6:	d113      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059fc:	3308      	adds	r3, #8
 80059fe:	4618      	mov	r0, r3
 8005a00:	f004 fc60 	bl	800a2c4 <RCCEx_PLL2_Config>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005a0a:	e014      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a10:	3330      	adds	r3, #48	@ 0x30
 8005a12:	4618      	mov	r0, r3
 8005a14:	f004 fcee 	bl	800a3f4 <RCCEx_PLL3_Config>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005a1e:	e00a      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a26:	e006      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005a28:	bf00      	nop
 8005a2a:	e004      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005a2c:	bf00      	nop
 8005a2e:	e002      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005a30:	bf00      	nop
 8005a32:	e000      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10c      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8005a3e:	4b25      	ldr	r3, [pc, #148]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005a40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a44:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8005a48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a4e:	4a21      	ldr	r2, [pc, #132]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005a50:	430b      	orrs	r3, r1
 8005a52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005a56:	e003      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a5c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005a60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005a6c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005a70:	2300      	movs	r3, #0
 8005a72:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005a76:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	d055      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a86:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005a8a:	d033      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005a8c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005a90:	d82c      	bhi.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005a92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a96:	d02f      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005a98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a9c:	d826      	bhi.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005a9e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005aa2:	d02b      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005aa4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005aa8:	d820      	bhi.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005aaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005aae:	d013      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005ab0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ab4:	d81a      	bhi.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d022      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005aba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005abe:	d115      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ac4:	3308      	adds	r3, #8
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f004 fbfc 	bl	800a2c4 <RCCEx_PLL2_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005ad2:	e016      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005ad4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ad8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005adc:	3330      	adds	r3, #48	@ 0x30
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f004 fc88 	bl	800a3f4 <RCCEx_PLL3_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005aea:	e00a      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005af2:	e006      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005af4:	bf00      	nop
 8005af6:	e004      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005af8:	bf00      	nop
 8005afa:	e002      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005afc:	bf00      	nop
 8005afe:	e000      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b02:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10c      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8005b0a:	4bbb      	ldr	r3, [pc, #748]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005b0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005b10:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005b14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b1a:	4ab7      	ldr	r2, [pc, #732]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005b22:	e003      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b24:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b28:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005b2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005b38:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005b42:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005b46:	460b      	mov	r3, r1
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	d053      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8005b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b52:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b56:	d031      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005b58:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b5c:	d82a      	bhi.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005b5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b62:	d02d      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005b64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b68:	d824      	bhi.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005b6a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b6e:	d029      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005b70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b74:	d81e      	bhi.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005b76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b7a:	d011      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005b7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b80:	d818      	bhi.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d020      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005b86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b8a:	d113      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b90:	3308      	adds	r3, #8
 8005b92:	4618      	mov	r0, r3
 8005b94:	f004 fb96 	bl	800a2c4 <RCCEx_PLL2_Config>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005b9e:	e014      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ba4:	3330      	adds	r3, #48	@ 0x30
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f004 fc24 	bl	800a3f4 <RCCEx_PLL3_Config>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005bb2:	e00a      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005bba:	e006      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005bbc:	bf00      	nop
 8005bbe:	e004      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005bc0:	bf00      	nop
 8005bc2:	e002      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005bc4:	bf00      	nop
 8005bc6:	e000      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10c      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8005bd2:	4b89      	ldr	r3, [pc, #548]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005bd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005bd8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005bdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005be0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005be2:	4a85      	ldr	r2, [pc, #532]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005be4:	430b      	orrs	r3, r1
 8005be6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005bea:	e003      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005bf0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005bf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005c00:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005c04:	2300      	movs	r3, #0
 8005c06:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005c0a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4313      	orrs	r3, r2
 8005c12:	d055      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8005c14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c1c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005c20:	d031      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8005c22:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005c26:	d82a      	bhi.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c2c:	d02d      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005c2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c32:	d824      	bhi.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005c34:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005c38:	d029      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005c3a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005c3e:	d81e      	bhi.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005c40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c44:	d011      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8005c46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c4a:	d818      	bhi.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d020      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8005c50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c54:	d113      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f004 fb31 	bl	800a2c4 <RCCEx_PLL2_Config>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005c68:	e014      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c6e:	3330      	adds	r3, #48	@ 0x30
 8005c70:	4618      	mov	r0, r3
 8005c72:	f004 fbbf 	bl	800a3f4 <RCCEx_PLL3_Config>
 8005c76:	4603      	mov	r3, r0
 8005c78:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005c7c:	e00a      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c84:	e006      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005c86:	bf00      	nop
 8005c88:	e004      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005c8a:	bf00      	nop
 8005c8c:	e002      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005c8e:	bf00      	nop
 8005c90:	e000      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10d      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8005c9c:	4b56      	ldr	r3, [pc, #344]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005c9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ca2:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8005ca6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cae:	4a52      	ldr	r2, [pc, #328]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005cb6:	e003      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cbc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005cc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005ccc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005cd6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	d044      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8005ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ce8:	2b05      	cmp	r3, #5
 8005cea:	d823      	bhi.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005cec:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf2:	bf00      	nop
 8005cf4:	08005d3d 	.word	0x08005d3d
 8005cf8:	08005d0d 	.word	0x08005d0d
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	08005d3d 	.word	0x08005d3d
 8005d04:	08005d3d 	.word	0x08005d3d
 8005d08:	08005d3d 	.word	0x08005d3d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d10:	3308      	adds	r3, #8
 8005d12:	4618      	mov	r0, r3
 8005d14:	f004 fad6 	bl	800a2c4 <RCCEx_PLL2_Config>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005d1e:	e00e      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d24:	3330      	adds	r3, #48	@ 0x30
 8005d26:	4618      	mov	r0, r3
 8005d28:	f004 fb64 	bl	800a3f4 <RCCEx_PLL3_Config>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005d32:	e004      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d3a:	e000      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8005d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10d      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8005d46:	4b2c      	ldr	r3, [pc, #176]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005d48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005d4c:	f023 0107 	bic.w	r1, r3, #7
 8005d50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d58:	4a27      	ldr	r2, [pc, #156]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005d5a:	430b      	orrs	r3, r1
 8005d5c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005d60:	e003      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d66:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8005d6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d76:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d80:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d84:	460b      	mov	r3, r1
 8005d86:	4313      	orrs	r3, r2
 8005d88:	d04f      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8005d8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d92:	2b50      	cmp	r3, #80	@ 0x50
 8005d94:	d029      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005d96:	2b50      	cmp	r3, #80	@ 0x50
 8005d98:	d823      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005d9a:	2b40      	cmp	r3, #64	@ 0x40
 8005d9c:	d027      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8005d9e:	2b40      	cmp	r3, #64	@ 0x40
 8005da0:	d81f      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005da2:	2b30      	cmp	r3, #48	@ 0x30
 8005da4:	d025      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005da6:	2b30      	cmp	r3, #48	@ 0x30
 8005da8:	d81b      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005daa:	2b20      	cmp	r3, #32
 8005dac:	d00f      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d817      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d022      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005db6:	2b10      	cmp	r3, #16
 8005db8:	d113      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005dba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f004 fa7f 	bl	800a2c4 <RCCEx_PLL2_Config>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005dcc:	e017      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005dce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dd2:	3330      	adds	r3, #48	@ 0x30
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f004 fb0d 	bl	800a3f4 <RCCEx_PLL3_Config>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005de0:	e00d      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005de8:	e009      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005dea:	bf00      	nop
 8005dec:	e007      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005dee:	bf00      	nop
 8005df0:	e005      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005df2:	bf00      	nop
 8005df4:	e003      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8005df6:	bf00      	nop
 8005df8:	44020c00 	.word	0x44020c00
        break;
 8005dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dfe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10d      	bne.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8005e06:	4baf      	ldr	r3, [pc, #700]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005e08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005e0c:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005e10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e18:	4aaa      	ldr	r2, [pc, #680]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005e1a:	430b      	orrs	r3, r1
 8005e1c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005e20:	e003      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e26:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e40:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4313      	orrs	r3, r2
 8005e48:	d055      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005e4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e52:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005e56:	d031      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8005e58:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005e5c:	d82a      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005e5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e62:	d02d      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005e64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e68:	d824      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005e6a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e6e:	d029      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005e70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e74:	d81e      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005e76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e7a:	d011      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005e7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e80:	d818      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d020      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8005e86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e8a:	d113      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e90:	3308      	adds	r3, #8
 8005e92:	4618      	mov	r0, r3
 8005e94:	f004 fa16 	bl	800a2c4 <RCCEx_PLL2_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005e9e:	e014      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ea0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ea4:	3330      	adds	r3, #48	@ 0x30
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f004 faa4 	bl	800a3f4 <RCCEx_PLL3_Config>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005eb2:	e00a      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005eba:	e006      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005ebc:	bf00      	nop
 8005ebe:	e004      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005ec0:	bf00      	nop
 8005ec2:	e002      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005ec4:	bf00      	nop
 8005ec6:	e000      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10d      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005ed2:	4b7c      	ldr	r3, [pc, #496]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ed8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005edc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ee4:	4a77      	ldr	r2, [pc, #476]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005eec:	e003      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ef2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ef6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f06:	2300      	movs	r3, #0
 8005f08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f10:	460b      	mov	r3, r1
 8005f12:	4313      	orrs	r3, r2
 8005f14:	d03d      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005f16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f22:	d01b      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8005f24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f28:	d814      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005f2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f2e:	d017      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8005f30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f34:	d80e      	bhi.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d014      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8005f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f3e:	d109      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f44:	3330      	adds	r3, #48	@ 0x30
 8005f46:	4618      	mov	r0, r3
 8005f48:	f004 fa54 	bl	800a3f4 <RCCEx_PLL3_Config>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005f52:	e008      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f5a:	e004      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005f5c:	bf00      	nop
 8005f5e:	e002      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005f60:	bf00      	nop
 8005f62:	e000      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10d      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005f6e:	4b55      	ldr	r3, [pc, #340]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005f70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f74:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005f78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f80:	4a50      	ldr	r2, [pc, #320]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005f82:	430b      	orrs	r3, r1
 8005f84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005f88:	e003      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f8e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005f9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fa8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	d03d      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005fb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005fbe:	d01b      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005fc0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005fc4:	d814      	bhi.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005fc6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005fca:	d017      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005fcc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005fd0:	d80e      	bhi.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d014      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8005fd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fda:	d109      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fe0:	3330      	adds	r3, #48	@ 0x30
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f004 fa06 	bl	800a3f4 <RCCEx_PLL3_Config>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005fee:	e008      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005ff6:	e004      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005ff8:	bf00      	nop
 8005ffa:	e002      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005ffc:	bf00      	nop
 8005ffe:	e000      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006002:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10d      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800600a:	4b2e      	ldr	r3, [pc, #184]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800600c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006010:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006014:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006018:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800601c:	4a29      	ldr	r2, [pc, #164]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800601e:	430b      	orrs	r3, r1
 8006020:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006024:	e003      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006026:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800602a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800602e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800603a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800603e:	2300      	movs	r3, #0
 8006040:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006044:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006048:	460b      	mov	r3, r1
 800604a:	4313      	orrs	r3, r2
 800604c:	d040      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800604e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006052:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006056:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800605a:	d01b      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800605c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006060:	d814      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8006062:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006066:	d017      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006068:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800606c:	d80e      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800606e:	2b00      	cmp	r3, #0
 8006070:	d014      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006076:	d109      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006078:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800607c:	3330      	adds	r3, #48	@ 0x30
 800607e:	4618      	mov	r0, r3
 8006080:	f004 f9b8 	bl	800a3f4 <RCCEx_PLL3_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800608a:	e008      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006092:	e004      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006094:	bf00      	nop
 8006096:	e002      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006098:	bf00      	nop
 800609a:	e000      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800609c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d110      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80060a6:	4b07      	ldr	r3, [pc, #28]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80060a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060ac:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80060b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060b8:	4a02      	ldr	r2, [pc, #8]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80060ba:	430b      	orrs	r3, r1
 80060bc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80060c0:	e006      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80060c2:	bf00      	nop
 80060c4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	2100      	movs	r1, #0
 80060da:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80060de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060e6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4313      	orrs	r3, r2
 80060ee:	d03d      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80060f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80060fc:	d01b      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80060fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006102:	d814      	bhi.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006104:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006108:	d017      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800610a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800610e:	d80e      	bhi.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006110:	2b00      	cmp	r3, #0
 8006112:	d014      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8006114:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006118:	d109      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800611a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800611e:	3330      	adds	r3, #48	@ 0x30
 8006120:	4618      	mov	r0, r3
 8006122:	f004 f967 	bl	800a3f4 <RCCEx_PLL3_Config>
 8006126:	4603      	mov	r3, r0
 8006128:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800612c:	e008      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006134:	e004      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006136:	bf00      	nop
 8006138:	e002      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800613a:	bf00      	nop
 800613c:	e000      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800613e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006140:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10d      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006148:	4bbe      	ldr	r3, [pc, #760]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800614a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800614e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006152:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006156:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800615a:	4aba      	ldr	r2, [pc, #744]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800615c:	430b      	orrs	r3, r1
 800615e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006162:	e003      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006164:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006168:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800616c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006178:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800617c:	2300      	movs	r3, #0
 800617e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006182:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006186:	460b      	mov	r3, r1
 8006188:	4313      	orrs	r3, r2
 800618a:	d035      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800618c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006190:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006194:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006198:	d015      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800619a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800619e:	d80e      	bhi.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d012      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80061a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061a8:	d109      	bne.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061ae:	3330      	adds	r3, #48	@ 0x30
 80061b0:	4618      	mov	r0, r3
 80061b2:	f004 f91f 	bl	800a3f4 <RCCEx_PLL3_Config>
 80061b6:	4603      	mov	r3, r0
 80061b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80061bc:	e006      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80061c4:	e002      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80061c6:	bf00      	nop
 80061c8:	e000      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80061ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10d      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80061d4:	4b9b      	ldr	r3, [pc, #620]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80061d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061da:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80061de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061e6:	4a97      	ldr	r2, [pc, #604]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80061e8:	430b      	orrs	r3, r1
 80061ea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80061ee:	e003      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80061f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	2100      	movs	r1, #0
 8006202:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8006206:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800620a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800620e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006212:	460b      	mov	r3, r1
 8006214:	4313      	orrs	r3, r2
 8006216:	d00e      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8006218:	4b8a      	ldr	r3, [pc, #552]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	4a89      	ldr	r2, [pc, #548]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800621e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006222:	61d3      	str	r3, [r2, #28]
 8006224:	4b87      	ldr	r3, [pc, #540]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006226:	69d9      	ldr	r1, [r3, #28]
 8006228:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800622c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006230:	4a84      	ldr	r2, [pc, #528]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006232:	430b      	orrs	r3, r1
 8006234:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006236:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006242:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006246:	2300      	movs	r3, #0
 8006248:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800624c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006250:	460b      	mov	r3, r1
 8006252:	4313      	orrs	r3, r2
 8006254:	d055      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8006256:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800625a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800625e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006262:	d031      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8006264:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006268:	d82a      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800626a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800626e:	d02d      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006274:	d824      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006276:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800627a:	d029      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800627c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006280:	d81e      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006286:	d011      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8006288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800628c:	d818      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800628e:	2b00      	cmp	r3, #0
 8006290:	d020      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006296:	d113      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006298:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800629c:	3308      	adds	r3, #8
 800629e:	4618      	mov	r0, r3
 80062a0:	f004 f810 	bl	800a2c4 <RCCEx_PLL2_Config>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80062aa:	e014      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062b0:	3330      	adds	r3, #48	@ 0x30
 80062b2:	4618      	mov	r0, r3
 80062b4:	f004 f89e 	bl	800a3f4 <RCCEx_PLL3_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80062be:	e00a      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80062c6:	e006      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80062c8:	bf00      	nop
 80062ca:	e004      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80062cc:	bf00      	nop
 80062ce:	e002      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80062d0:	bf00      	nop
 80062d2:	e000      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80062d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10d      	bne.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80062de:	4b59      	ldr	r3, [pc, #356]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80062e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80062e4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80062e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80062f0:	4a54      	ldr	r2, [pc, #336]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80062f2:	430b      	orrs	r3, r1
 80062f4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80062f8:	e003      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006302:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800630e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006312:	2300      	movs	r3, #0
 8006314:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006318:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800631c:	460b      	mov	r3, r1
 800631e:	4313      	orrs	r3, r2
 8006320:	d055      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8006322:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006326:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800632a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800632e:	d031      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8006330:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006334:	d82a      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006336:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800633a:	d02d      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800633c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006340:	d824      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006342:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006346:	d029      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8006348:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800634c:	d81e      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800634e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006352:	d011      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8006354:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006358:	d818      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d020      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800635e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006362:	d113      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006364:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006368:	3308      	adds	r3, #8
 800636a:	4618      	mov	r0, r3
 800636c:	f003 ffaa 	bl	800a2c4 <RCCEx_PLL2_Config>
 8006370:	4603      	mov	r3, r0
 8006372:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006376:	e014      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006378:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800637c:	3330      	adds	r3, #48	@ 0x30
 800637e:	4618      	mov	r0, r3
 8006380:	f004 f838 	bl	800a3f4 <RCCEx_PLL3_Config>
 8006384:	4603      	mov	r3, r0
 8006386:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800638a:	e00a      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006392:	e006      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006394:	bf00      	nop
 8006396:	e004      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006398:	bf00      	nop
 800639a:	e002      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800639c:	bf00      	nop
 800639e:	e000      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80063a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10d      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80063aa:	4b26      	ldr	r3, [pc, #152]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80063ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80063b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80063b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80063bc:	4a21      	ldr	r2, [pc, #132]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80063be:	430b      	orrs	r3, r1
 80063c0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80063c4:	e003      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80063ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d6:	2100      	movs	r1, #0
 80063d8:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80063e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063e8:	460b      	mov	r3, r1
 80063ea:	4313      	orrs	r3, r2
 80063ec:	d057      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80063ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063fa:	d033      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80063fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006400:	d82c      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006402:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006406:	d02f      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8006408:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800640c:	d826      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800640e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006412:	d02b      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8006414:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006418:	d820      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800641a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800641e:	d013      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006420:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006424:	d81a      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d022      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800642a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800642e:	d115      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006430:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006434:	3308      	adds	r3, #8
 8006436:	4618      	mov	r0, r3
 8006438:	f003 ff44 	bl	800a2c4 <RCCEx_PLL2_Config>
 800643c:	4603      	mov	r3, r0
 800643e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8006442:	e016      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8006444:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006448:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800644c:	3330      	adds	r3, #48	@ 0x30
 800644e:	4618      	mov	r0, r3
 8006450:	f003 ffd0 	bl	800a3f4 <RCCEx_PLL3_Config>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800645a:	e00a      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006462:	e006      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006464:	bf00      	nop
 8006466:	e004      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006468:	bf00      	nop
 800646a:	e002      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800646c:	bf00      	nop
 800646e:	e000      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006472:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10d      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800647a:	4bbb      	ldr	r3, [pc, #748]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800647c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006480:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006488:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800648c:	4ab6      	ldr	r2, [pc, #728]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800648e:	430b      	orrs	r3, r1
 8006490:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006494:	e003      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006496:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800649a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800649e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	2100      	movs	r1, #0
 80064a8:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80064ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80064b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4313      	orrs	r3, r2
 80064bc:	d055      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80064be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064c6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80064ca:	d031      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80064cc:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80064d0:	d82a      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80064d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064d6:	d02d      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80064d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064dc:	d824      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80064de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064e2:	d029      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80064e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064e8:	d81e      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80064ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064ee:	d011      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80064f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064f4:	d818      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d020      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80064fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064fe:	d113      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006500:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006504:	3308      	adds	r3, #8
 8006506:	4618      	mov	r0, r3
 8006508:	f003 fedc 	bl	800a2c4 <RCCEx_PLL2_Config>
 800650c:	4603      	mov	r3, r0
 800650e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006512:	e014      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006514:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006518:	3330      	adds	r3, #48	@ 0x30
 800651a:	4618      	mov	r0, r3
 800651c:	f003 ff6a 	bl	800a3f4 <RCCEx_PLL3_Config>
 8006520:	4603      	mov	r3, r0
 8006522:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006526:	e00a      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800652e:	e006      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006530:	bf00      	nop
 8006532:	e004      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006534:	bf00      	nop
 8006536:	e002      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006538:	bf00      	nop
 800653a:	e000      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800653c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800653e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10d      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8006546:	4b88      	ldr	r3, [pc, #544]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006548:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800654c:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8006550:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006554:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006558:	4a83      	ldr	r2, [pc, #524]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800655a:	430b      	orrs	r3, r1
 800655c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006560:	e003      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006562:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006566:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800656a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	2100      	movs	r1, #0
 8006574:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8006578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800657c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006580:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006584:	460b      	mov	r3, r1
 8006586:	4313      	orrs	r3, r2
 8006588:	d055      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800658a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800658e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006592:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006596:	d031      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8006598:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800659c:	d82a      	bhi.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800659e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065a2:	d02d      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80065a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065a8:	d824      	bhi.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80065aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065ae:	d029      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80065b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065b4:	d81e      	bhi.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80065b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065ba:	d011      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80065bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065c0:	d818      	bhi.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d020      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80065c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065ca:	d113      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065d0:	3308      	adds	r3, #8
 80065d2:	4618      	mov	r0, r3
 80065d4:	f003 fe76 	bl	800a2c4 <RCCEx_PLL2_Config>
 80065d8:	4603      	mov	r3, r0
 80065da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80065de:	e014      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065e4:	3330      	adds	r3, #48	@ 0x30
 80065e6:	4618      	mov	r0, r3
 80065e8:	f003 ff04 	bl	800a3f4 <RCCEx_PLL3_Config>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80065f2:	e00a      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80065fa:	e006      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80065fc:	bf00      	nop
 80065fe:	e004      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006600:	bf00      	nop
 8006602:	e002      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006604:	bf00      	nop
 8006606:	e000      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800660a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10d      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8006612:	4b55      	ldr	r3, [pc, #340]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006614:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006618:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800661c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006620:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006624:	4a50      	ldr	r2, [pc, #320]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006626:	430b      	orrs	r3, r1
 8006628:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800662c:	e003      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006632:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006636:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	2100      	movs	r1, #0
 8006640:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8006644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006648:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800664c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006650:	460b      	mov	r3, r1
 8006652:	4313      	orrs	r3, r2
 8006654:	d055      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8006656:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800665a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800665e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006662:	d031      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8006664:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006668:	d82a      	bhi.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800666a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800666e:	d02d      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8006670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006674:	d824      	bhi.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006676:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800667a:	d029      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800667c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006680:	d81e      	bhi.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006682:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006686:	d011      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8006688:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800668c:	d818      	bhi.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800668e:	2b00      	cmp	r3, #0
 8006690:	d020      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8006692:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006696:	d113      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006698:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800669c:	3308      	adds	r3, #8
 800669e:	4618      	mov	r0, r3
 80066a0:	f003 fe10 	bl	800a2c4 <RCCEx_PLL2_Config>
 80066a4:	4603      	mov	r3, r0
 80066a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80066aa:	e014      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066b0:	3330      	adds	r3, #48	@ 0x30
 80066b2:	4618      	mov	r0, r3
 80066b4:	f003 fe9e 	bl	800a3f4 <RCCEx_PLL3_Config>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80066be:	e00a      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80066c6:	e006      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80066c8:	bf00      	nop
 80066ca:	e004      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80066cc:	bf00      	nop
 80066ce:	e002      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80066d0:	bf00      	nop
 80066d2:	e000      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80066d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10d      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80066de:	4b22      	ldr	r3, [pc, #136]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80066e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80066e4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80066e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80066f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80066f2:	430b      	orrs	r3, r1
 80066f4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80066f8:	e003      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006702:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800670e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006712:	2300      	movs	r3, #0
 8006714:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006718:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800671c:	460b      	mov	r3, r1
 800671e:	4313      	orrs	r3, r2
 8006720:	d055      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006722:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006726:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800672a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800672e:	d035      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8006730:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006734:	d82e      	bhi.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006736:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800673a:	d031      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800673c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006740:	d828      	bhi.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006746:	d01b      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8006748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800674c:	d822      	bhi.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8006752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006756:	d009      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8006758:	e01c      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800675a:	4b03      	ldr	r3, [pc, #12]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800675c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675e:	4a02      	ldr	r2, [pc, #8]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006764:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006766:	e01c      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8006768:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800676c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006770:	3308      	adds	r3, #8
 8006772:	4618      	mov	r0, r3
 8006774:	f003 fda6 	bl	800a2c4 <RCCEx_PLL2_Config>
 8006778:	4603      	mov	r3, r0
 800677a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800677e:	e010      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006780:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006784:	3330      	adds	r3, #48	@ 0x30
 8006786:	4618      	mov	r0, r3
 8006788:	f003 fe34 	bl	800a3f4 <RCCEx_PLL3_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006792:	e006      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800679a:	e002      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800679c:	bf00      	nop
 800679e:	e000      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80067a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10d      	bne.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80067aa:	4bc3      	ldr	r3, [pc, #780]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80067ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80067b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80067bc:	4abe      	ldr	r2, [pc, #760]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80067be:	430b      	orrs	r3, r1
 80067c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80067c4:	e003      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80067ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80067da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067de:	2300      	movs	r3, #0
 80067e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067e4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80067e8:	460b      	mov	r3, r1
 80067ea:	4313      	orrs	r3, r2
 80067ec:	d051      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80067ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80067f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067fa:	d033      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80067fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006800:	d82c      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006802:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006806:	d02d      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006808:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800680c:	d826      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800680e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006812:	d019      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8006814:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006818:	d820      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800681e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006822:	d007      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8006824:	e01a      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006826:	4ba4      	ldr	r3, [pc, #656]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682a:	4aa3      	ldr	r2, [pc, #652]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800682c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006830:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006832:	e018      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006834:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006838:	3308      	adds	r3, #8
 800683a:	4618      	mov	r0, r3
 800683c:	f003 fd42 	bl	800a2c4 <RCCEx_PLL2_Config>
 8006840:	4603      	mov	r3, r0
 8006842:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006846:	e00e      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006848:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800684c:	3330      	adds	r3, #48	@ 0x30
 800684e:	4618      	mov	r0, r3
 8006850:	f003 fdd0 	bl	800a3f4 <RCCEx_PLL3_Config>
 8006854:	4603      	mov	r3, r0
 8006856:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800685a:	e004      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006862:	e000      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8006864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006866:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10d      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800686e:	4b92      	ldr	r3, [pc, #584]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006874:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8006878:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800687c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006880:	4a8d      	ldr	r2, [pc, #564]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006882:	430b      	orrs	r3, r1
 8006884:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006888:	e003      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800688e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006892:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800689e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068a0:	2300      	movs	r3, #0
 80068a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80068a8:	460b      	mov	r3, r1
 80068aa:	4313      	orrs	r3, r2
 80068ac:	d032      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80068ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80068b6:	2b05      	cmp	r3, #5
 80068b8:	d80f      	bhi.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d211      	bcs.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d911      	bls.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d109      	bne.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068ca:	3308      	adds	r3, #8
 80068cc:	4618      	mov	r0, r3
 80068ce:	f003 fcf9 	bl	800a2c4 <RCCEx_PLL2_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068d8:	e006      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068e0:	e002      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80068e2:	bf00      	nop
 80068e4:	e000      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80068e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10d      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80068f0:	4b71      	ldr	r3, [pc, #452]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80068f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068f6:	f023 0107 	bic.w	r1, r3, #7
 80068fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006902:	4a6d      	ldr	r2, [pc, #436]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006904:	430b      	orrs	r3, r1
 8006906:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800690a:	e003      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006910:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006914:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	2100      	movs	r1, #0
 800691e:	6739      	str	r1, [r7, #112]	@ 0x70
 8006920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006924:	677b      	str	r3, [r7, #116]	@ 0x74
 8006926:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800692a:	460b      	mov	r3, r1
 800692c:	4313      	orrs	r3, r2
 800692e:	d024      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006930:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006934:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006938:	2b00      	cmp	r3, #0
 800693a:	d005      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800693c:	2b08      	cmp	r3, #8
 800693e:	d005      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006946:	e002      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006948:	bf00      	nop
 800694a:	e000      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800694c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800694e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10d      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006956:	4b58      	ldr	r3, [pc, #352]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800695c:	f023 0108 	bic.w	r1, r3, #8
 8006960:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006964:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006968:	4a53      	ldr	r2, [pc, #332]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800696a:	430b      	orrs	r3, r1
 800696c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006970:	e003      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006972:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006976:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800697a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006986:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006988:	2300      	movs	r3, #0
 800698a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800698c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006990:	460b      	mov	r3, r1
 8006992:	4313      	orrs	r3, r2
 8006994:	f000 80b9 	beq.w	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006998:	4b48      	ldr	r3, [pc, #288]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800699a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699c:	4a47      	ldr	r2, [pc, #284]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069a4:	f7fb fbb2 	bl	800210c <HAL_GetTick>
 80069a8:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80069ac:	e00b      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069ae:	f7fb fbad 	bl	800210c <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d903      	bls.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80069c4:	e005      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80069c6:	4b3d      	ldr	r3, [pc, #244]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80069c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d0ed      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80069d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f040 8093 	bne.w	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80069dc:	4b36      	ldr	r3, [pc, #216]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80069de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069e6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80069ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d023      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80069f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069f6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80069fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d01b      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a02:	4b2d      	ldr	r3, [pc, #180]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a0c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a10:	4b29      	ldr	r3, [pc, #164]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a16:	4a28      	ldr	r2, [pc, #160]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a1c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a20:	4b25      	ldr	r3, [pc, #148]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a26:	4a24      	ldr	r2, [pc, #144]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a30:	4a21      	ldr	r2, [pc, #132]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a32:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006a36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a3a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d019      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a46:	f7fb fb61 	bl	800210c <HAL_GetTick>
 8006a4a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a4e:	e00d      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a50:	f7fb fb5c 	bl	800210c <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006a5a:	1ad2      	subs	r2, r2, r3
 8006a5c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d903      	bls.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8006a6a:	e006      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a6c:	4b12      	ldr	r3, [pc, #72]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0ea      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8006a7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d13a      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006a82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a86:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a92:	d115      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006a94:	4b08      	ldr	r3, [pc, #32]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006a9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006aa0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006aa4:	091b      	lsrs	r3, r3, #4
 8006aa6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006aaa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006aae:	4a02      	ldr	r2, [pc, #8]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ab0:	430b      	orrs	r3, r1
 8006ab2:	61d3      	str	r3, [r2, #28]
 8006ab4:	e00a      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006ab6:	bf00      	nop
 8006ab8:	44020c00 	.word	0x44020c00
 8006abc:	44020800 	.word	0x44020800
 8006ac0:	4b9f      	ldr	r3, [pc, #636]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	4a9e      	ldr	r2, [pc, #632]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ac6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006aca:	61d3      	str	r3, [r2, #28]
 8006acc:	4b9c      	ldr	r3, [pc, #624]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ad2:	4a9b      	ldr	r2, [pc, #620]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ad8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006adc:	4b98      	ldr	r3, [pc, #608]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ade:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006ae2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ae6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aee:	4a94      	ldr	r2, [pc, #592]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006af0:	430b      	orrs	r3, r1
 8006af2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006af6:	e008      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006af8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006afc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8006b00:	e003      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b02:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b06:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006b16:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b18:	2300      	movs	r3, #0
 8006b1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006b20:	460b      	mov	r3, r1
 8006b22:	4313      	orrs	r3, r2
 8006b24:	d035      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006b26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b2a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006b2e:	2b30      	cmp	r3, #48	@ 0x30
 8006b30:	d014      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8006b32:	2b30      	cmp	r3, #48	@ 0x30
 8006b34:	d80e      	bhi.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d012      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8006b3a:	2b20      	cmp	r3, #32
 8006b3c:	d80a      	bhi.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d010      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006b42:	2b10      	cmp	r3, #16
 8006b44:	d106      	bne.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b46:	4b7e      	ldr	r3, [pc, #504]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4a:	4a7d      	ldr	r2, [pc, #500]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b50:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b52:	e008      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b5a:	e004      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006b5c:	bf00      	nop
 8006b5e:	e002      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006b60:	bf00      	nop
 8006b62:	e000      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10d      	bne.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006b6e:	4b74      	ldr	r3, [pc, #464]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b74:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006b78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b7c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006b80:	4a6f      	ldr	r2, [pc, #444]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b82:	430b      	orrs	r3, r1
 8006b84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006b88:	e003      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b8e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006b92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ba4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4313      	orrs	r3, r2
 8006bac:	d033      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bb2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8006bba:	2b40      	cmp	r3, #64	@ 0x40
 8006bbc:	d007      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8006bbe:	e010      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc0:	4b5f      	ldr	r3, [pc, #380]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc4:	4a5e      	ldr	r2, [pc, #376]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bca:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006bcc:	e00d      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006bce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f003 fb75 	bl	800a2c4 <RCCEx_PLL2_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006be0:	e003      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10d      	bne.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8006bf2:	4b53      	ldr	r3, [pc, #332]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006bf4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006bf8:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006bfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c00:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006c04:	4a4e      	ldr	r2, [pc, #312]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c06:	430b      	orrs	r3, r1
 8006c08:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006c0c:	e003      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c12:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006c16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c22:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c24:	2300      	movs	r3, #0
 8006c26:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c28:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	d033      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8006c32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c36:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8006c3e:	2b80      	cmp	r3, #128	@ 0x80
 8006c40:	d007      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8006c42:	e010      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c44:	4b3e      	ldr	r3, [pc, #248]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c48:	4a3d      	ldr	r2, [pc, #244]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c4e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006c50:	e00d      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c56:	3308      	adds	r3, #8
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f003 fb33 	bl	800a2c4 <RCCEx_PLL2_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006c64:	e003      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10d      	bne.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8006c76:	4b32      	ldr	r3, [pc, #200]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c7c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006c80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c84:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006c88:	4a2d      	ldr	r2, [pc, #180]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c8a:	430b      	orrs	r3, r1
 8006c8c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006c90:	e003      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c96:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006c9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ca8:	2300      	movs	r3, #0
 8006caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	d04a      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006cb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	d827      	bhi.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8006cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8006cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc8:	08006cdd 	.word	0x08006cdd
 8006ccc:	08006ceb 	.word	0x08006ceb
 8006cd0:	08006cff 	.word	0x08006cff
 8006cd4:	08006d1b 	.word	0x08006d1b
 8006cd8:	08006d1b 	.word	0x08006d1b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cdc:	4b18      	ldr	r3, [pc, #96]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce0:	4a17      	ldr	r2, [pc, #92]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ce6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006ce8:	e018      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cee:	3308      	adds	r3, #8
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f003 fae7 	bl	800a2c4 <RCCEx_PLL2_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006cfc:	e00e      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006cfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d02:	3330      	adds	r3, #48	@ 0x30
 8006d04:	4618      	mov	r0, r3
 8006d06:	f003 fb75 	bl	800a3f4 <RCCEx_PLL3_Config>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006d10:	e004      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d18:	e000      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8006d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d1c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10f      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006d24:	4b06      	ldr	r3, [pc, #24]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d2a:	f023 0107 	bic.w	r1, r3, #7
 8006d2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d36:	4a02      	ldr	r2, [pc, #8]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006d3e:	e005      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8006d40:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d48:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006d58:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d5e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006d62:	460b      	mov	r3, r1
 8006d64:	4313      	orrs	r3, r2
 8006d66:	f000 8081 	beq.w	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8006d6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	d85f      	bhi.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8006d76:	a201      	add	r2, pc, #4	@ (adr r2, 8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8006d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7c:	08006e01 	.word	0x08006e01
 8006d80:	08006e37 	.word	0x08006e37
 8006d84:	08006e37 	.word	0x08006e37
 8006d88:	08006e37 	.word	0x08006e37
 8006d8c:	08006e37 	.word	0x08006e37
 8006d90:	08006e37 	.word	0x08006e37
 8006d94:	08006e37 	.word	0x08006e37
 8006d98:	08006e37 	.word	0x08006e37
 8006d9c:	08006e0f 	.word	0x08006e0f
 8006da0:	08006e37 	.word	0x08006e37
 8006da4:	08006e37 	.word	0x08006e37
 8006da8:	08006e37 	.word	0x08006e37
 8006dac:	08006e37 	.word	0x08006e37
 8006db0:	08006e37 	.word	0x08006e37
 8006db4:	08006e37 	.word	0x08006e37
 8006db8:	08006e37 	.word	0x08006e37
 8006dbc:	08006e23 	.word	0x08006e23
 8006dc0:	08006e37 	.word	0x08006e37
 8006dc4:	08006e37 	.word	0x08006e37
 8006dc8:	08006e37 	.word	0x08006e37
 8006dcc:	08006e37 	.word	0x08006e37
 8006dd0:	08006e37 	.word	0x08006e37
 8006dd4:	08006e37 	.word	0x08006e37
 8006dd8:	08006e37 	.word	0x08006e37
 8006ddc:	08006e3f 	.word	0x08006e3f
 8006de0:	08006e37 	.word	0x08006e37
 8006de4:	08006e37 	.word	0x08006e37
 8006de8:	08006e37 	.word	0x08006e37
 8006dec:	08006e37 	.word	0x08006e37
 8006df0:	08006e37 	.word	0x08006e37
 8006df4:	08006e37 	.word	0x08006e37
 8006df8:	08006e37 	.word	0x08006e37
 8006dfc:	08006e3f 	.word	0x08006e3f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e00:	4bab      	ldr	r3, [pc, #684]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e04:	4aaa      	ldr	r2, [pc, #680]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e0a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006e0c:	e018      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e12:	3308      	adds	r3, #8
 8006e14:	4618      	mov	r0, r3
 8006e16:	f003 fa55 	bl	800a2c4 <RCCEx_PLL2_Config>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006e20:	e00e      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e26:	3330      	adds	r3, #48	@ 0x30
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f003 fae3 	bl	800a3f4 <RCCEx_PLL3_Config>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006e34:	e004      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006e3c:	e000      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8006e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10d      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006e48:	4b99      	ldr	r3, [pc, #612]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e4e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006e52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e5a:	4a95      	ldr	r2, [pc, #596]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e62:	e003      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e68:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006e6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006e78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e7e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006e82:	460b      	mov	r3, r1
 8006e84:	4313      	orrs	r3, r2
 8006e86:	d04e      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006e88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e94:	d02e      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e9a:	d827      	bhi.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006e9c:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e9e:	d02b      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8006ea0:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ea2:	d823      	bhi.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006ea4:	2b80      	cmp	r3, #128	@ 0x80
 8006ea6:	d017      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006ea8:	2b80      	cmp	r3, #128	@ 0x80
 8006eaa:	d81f      	bhi.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006eb0:	2b40      	cmp	r3, #64	@ 0x40
 8006eb2:	d007      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006eb4:	e01a      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eb6:	4b7e      	ldr	r3, [pc, #504]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eba:	4a7d      	ldr	r2, [pc, #500]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ec0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006ec2:	e01a      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ec4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ec8:	3308      	adds	r3, #8
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f003 f9fa 	bl	800a2c4 <RCCEx_PLL2_Config>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006ed6:	e010      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006edc:	3330      	adds	r3, #48	@ 0x30
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f003 fa88 	bl	800a3f4 <RCCEx_PLL3_Config>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006eea:	e006      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006ef2:	e002      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006ef4:	bf00      	nop
 8006ef6:	e000      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006efa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10d      	bne.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006f02:	4b6b      	ldr	r3, [pc, #428]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f08:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006f0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f14:	4a66      	ldr	r2, [pc, #408]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006f16:	430b      	orrs	r3, r1
 8006f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006f1c:	e003      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f22:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8006f26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006f32:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f34:	2300      	movs	r3, #0
 8006f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f38:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	d055      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006f42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f46:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006f4a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006f4e:	d031      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8006f50:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006f54:	d82a      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006f56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f5a:	d02d      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8006f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f60:	d824      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006f62:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006f66:	d029      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8006f68:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006f6c:	d81e      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f72:	d011      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006f74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f78:	d818      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d020      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8006f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f82:	d113      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f88:	3308      	adds	r3, #8
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f003 f99a 	bl	800a2c4 <RCCEx_PLL2_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006f96:	e014      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f9c:	3330      	adds	r3, #48	@ 0x30
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f003 fa28 	bl	800a3f4 <RCCEx_PLL3_Config>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006faa:	e00a      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006fb2:	e006      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006fb4:	bf00      	nop
 8006fb6:	e004      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006fb8:	bf00      	nop
 8006fba:	e002      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006fbc:	bf00      	nop
 8006fbe:	e000      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fc2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10d      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8006fca:	4b39      	ldr	r3, [pc, #228]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fd0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006fd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fd8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006fdc:	4a34      	ldr	r2, [pc, #208]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006fde:	430b      	orrs	r3, r1
 8006fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006fe4:	e003      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006fee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007000:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007004:	460b      	mov	r3, r1
 8007006:	4313      	orrs	r3, r2
 8007008:	d058      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800700a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800700e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007012:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007016:	d031      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8007018:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800701c:	d82a      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800701e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007022:	d02d      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8007024:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007028:	d824      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800702a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800702e:	d029      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8007030:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007034:	d81e      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800703a:	d011      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800703c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007040:	d818      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007042:	2b00      	cmp	r3, #0
 8007044:	d020      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8007046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800704a:	d113      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800704c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007050:	3308      	adds	r3, #8
 8007052:	4618      	mov	r0, r3
 8007054:	f003 f936 	bl	800a2c4 <RCCEx_PLL2_Config>
 8007058:	4603      	mov	r3, r0
 800705a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800705e:	e014      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007060:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007064:	3330      	adds	r3, #48	@ 0x30
 8007066:	4618      	mov	r0, r3
 8007068:	f003 f9c4 	bl	800a3f4 <RCCEx_PLL3_Config>
 800706c:	4603      	mov	r3, r0
 800706e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8007072:	e00a      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800707a:	e006      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800707c:	bf00      	nop
 800707e:	e004      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007080:	bf00      	nop
 8007082:	e002      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007084:	bf00      	nop
 8007086:	e000      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800708a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800708e:	2b00      	cmp	r3, #0
 8007090:	d110      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8007092:	4b07      	ldr	r3, [pc, #28]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007098:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800709c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070a4:	4902      	ldr	r1, [pc, #8]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80070ac:	e006      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80070ae:	bf00      	nop
 80070b0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070b8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80070bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	2100      	movs	r1, #0
 80070c6:	6239      	str	r1, [r7, #32]
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80070ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80070d2:	460b      	mov	r3, r1
 80070d4:	4313      	orrs	r3, r2
 80070d6:	d055      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80070d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070e0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80070e4:	d031      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80070e6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80070ea:	d82a      	bhi.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80070ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070f0:	d02d      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80070f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070f6:	d824      	bhi.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80070f8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80070fc:	d029      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80070fe:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007102:	d81e      	bhi.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007108:	d011      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800710a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800710e:	d818      	bhi.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d020      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8007114:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007118:	d113      	bne.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800711a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800711e:	3308      	adds	r3, #8
 8007120:	4618      	mov	r0, r3
 8007122:	f003 f8cf 	bl	800a2c4 <RCCEx_PLL2_Config>
 8007126:	4603      	mov	r3, r0
 8007128:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800712c:	e014      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800712e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007132:	3330      	adds	r3, #48	@ 0x30
 8007134:	4618      	mov	r0, r3
 8007136:	f003 f95d 	bl	800a3f4 <RCCEx_PLL3_Config>
 800713a:	4603      	mov	r3, r0
 800713c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007140:	e00a      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007148:	e006      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800714a:	bf00      	nop
 800714c:	e004      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800714e:	bf00      	nop
 8007150:	e002      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007152:	bf00      	nop
 8007154:	e000      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007158:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10d      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8007160:	4b88      	ldr	r3, [pc, #544]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007166:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800716a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800716e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007172:	4984      	ldr	r1, [pc, #528]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007174:	4313      	orrs	r3, r2
 8007176:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800717a:	e003      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007180:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007184:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	2100      	movs	r1, #0
 800718e:	61b9      	str	r1, [r7, #24]
 8007190:	f003 0302 	and.w	r3, r3, #2
 8007194:	61fb      	str	r3, [r7, #28]
 8007196:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800719a:	460b      	mov	r3, r1
 800719c:	4313      	orrs	r3, r2
 800719e:	d03d      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80071a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d81c      	bhi.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80071ac:	a201      	add	r2, pc, #4	@ (adr r2, 80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80071ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b2:	bf00      	nop
 80071b4:	080071ef 	.word	0x080071ef
 80071b8:	080071c5 	.word	0x080071c5
 80071bc:	080071d3 	.word	0x080071d3
 80071c0:	080071ef 	.word	0x080071ef
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c4:	4b6f      	ldr	r3, [pc, #444]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80071c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c8:	4a6e      	ldr	r2, [pc, #440]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80071ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071ce:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80071d0:	e00e      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071d6:	3308      	adds	r3, #8
 80071d8:	4618      	mov	r0, r3
 80071da:	f003 f873 	bl	800a2c4 <RCCEx_PLL2_Config>
 80071de:	4603      	mov	r3, r0
 80071e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80071e4:	e004      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80071ec:	e000      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80071ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10d      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80071f8:	4b62      	ldr	r3, [pc, #392]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80071fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071fe:	f023 0203 	bic.w	r2, r3, #3
 8007202:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007206:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800720a:	495e      	ldr	r1, [pc, #376]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800720c:	4313      	orrs	r3, r2
 800720e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007212:	e003      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007214:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007218:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800721c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	2100      	movs	r1, #0
 8007226:	6139      	str	r1, [r7, #16]
 8007228:	f003 0304 	and.w	r3, r3, #4
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007232:	460b      	mov	r3, r1
 8007234:	4313      	orrs	r3, r2
 8007236:	d03a      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8007238:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800723c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007244:	d00e      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8007246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800724a:	d815      	bhi.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800724c:	2b00      	cmp	r3, #0
 800724e:	d017      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8007250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007254:	d110      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007256:	4b4b      	ldr	r3, [pc, #300]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725a:	4a4a      	ldr	r2, [pc, #296]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800725c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007260:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007262:	e00e      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007264:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007268:	3308      	adds	r3, #8
 800726a:	4618      	mov	r0, r3
 800726c:	f003 f82a 	bl	800a2c4 <RCCEx_PLL2_Config>
 8007270:	4603      	mov	r3, r0
 8007272:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007276:	e004      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800727e:	e000      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8007280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007282:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10d      	bne.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800728a:	4b3e      	ldr	r3, [pc, #248]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800728c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007290:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007294:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007298:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800729c:	4939      	ldr	r1, [pc, #228]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80072a4:	e003      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b6:	2100      	movs	r1, #0
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	f003 0310 	and.w	r3, r3, #16
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80072c4:	460b      	mov	r3, r1
 80072c6:	4313      	orrs	r3, r2
 80072c8:	d038      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80072ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80072d2:	2b30      	cmp	r3, #48	@ 0x30
 80072d4:	d01b      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80072d6:	2b30      	cmp	r3, #48	@ 0x30
 80072d8:	d815      	bhi.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80072da:	2b10      	cmp	r3, #16
 80072dc:	d002      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80072de:	2b20      	cmp	r3, #32
 80072e0:	d007      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80072e2:	e010      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072e4:	4b27      	ldr	r3, [pc, #156]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80072e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e8:	4a26      	ldr	r2, [pc, #152]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80072ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072ee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80072f0:	e00e      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072f6:	3330      	adds	r3, #48	@ 0x30
 80072f8:	4618      	mov	r0, r3
 80072fa:	f003 f87b 	bl	800a3f4 <RCCEx_PLL3_Config>
 80072fe:	4603      	mov	r3, r0
 8007300:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007304:	e004      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800730c:	e000      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800730e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007310:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10d      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007318:	4b1a      	ldr	r3, [pc, #104]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800731a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800731e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007322:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007326:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800732a:	4916      	ldr	r1, [pc, #88]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800732c:	4313      	orrs	r3, r2
 800732e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007332:	e003      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007334:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007338:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800733c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	2100      	movs	r1, #0
 8007346:	6039      	str	r1, [r7, #0]
 8007348:	f003 0308 	and.w	r3, r3, #8
 800734c:	607b      	str	r3, [r7, #4]
 800734e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007352:	460b      	mov	r3, r1
 8007354:	4313      	orrs	r3, r2
 8007356:	d00c      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8007358:	4b0a      	ldr	r3, [pc, #40]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800735a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800735e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007362:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007366:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800736a:	4906      	ldr	r1, [pc, #24]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800736c:	4313      	orrs	r3, r2
 800736e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8007372:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8007376:	4618      	mov	r0, r3
 8007378:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800737c:	46bd      	mov	sp, r7
 800737e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007382:	bf00      	nop
 8007384:	44020c00 	.word	0x44020c00

08007388 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8007388:	b480      	push	{r7}
 800738a:	b08b      	sub	sp, #44	@ 0x2c
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007390:	4bae      	ldr	r3, [pc, #696]	@ (800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007398:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800739a:	4bac      	ldr	r3, [pc, #688]	@ (800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800739c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739e:	f003 0303 	and.w	r3, r3, #3
 80073a2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80073a4:	4ba9      	ldr	r3, [pc, #676]	@ (800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80073a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a8:	0a1b      	lsrs	r3, r3, #8
 80073aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073ae:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80073b0:	4ba6      	ldr	r3, [pc, #664]	@ (800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80073b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b4:	091b      	lsrs	r3, r3, #4
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80073bc:	4ba3      	ldr	r3, [pc, #652]	@ (800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80073be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c0:	08db      	lsrs	r3, r3, #3
 80073c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	fb02 f303 	mul.w	r3, r2, r3
 80073cc:	ee07 3a90 	vmov	s15, r3
 80073d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 8126 	beq.w	800762c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d053      	beq.n	800748e <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d86f      	bhi.n	80074cc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d003      	beq.n	80073fa <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d02b      	beq.n	8007450 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80073f8:	e068      	b.n	80074cc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073fa:	4b94      	ldr	r3, [pc, #592]	@ (800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	08db      	lsrs	r3, r3, #3
 8007400:	f003 0303 	and.w	r3, r3, #3
 8007404:	4a92      	ldr	r2, [pc, #584]	@ (8007650 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007406:	fa22 f303 	lsr.w	r3, r2, r3
 800740a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	ee07 3a90 	vmov	s15, r3
 800741c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800742e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007432:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007654 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800743a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800743e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800744e:	e068      	b.n	8007522 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007658 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800745e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	ee07 3a90 	vmov	s15, r3
 8007468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800746c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007470:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007654 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800747c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007488:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800748c:	e049      	b.n	8007522 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	ee07 3a90 	vmov	s15, r3
 8007494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007498:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800765c <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 800749c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074aa:	ed97 6a04 	vldr	s12, [r7, #16]
 80074ae:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007654 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80074b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80074ca:	e02a      	b.n	8007522 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074cc:	4b5f      	ldr	r3, [pc, #380]	@ (800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	08db      	lsrs	r3, r3, #3
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	4a5e      	ldr	r2, [pc, #376]	@ (8007650 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80074d8:	fa22 f303 	lsr.w	r3, r2, r3
 80074dc:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	ee07 3a90 	vmov	s15, r3
 80074e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	ee07 3a90 	vmov	s15, r3
 80074fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007500:	ed97 6a04 	vldr	s12, [r7, #16]
 8007504:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007654 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800750c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007510:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007520:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007522:	4b4a      	ldr	r3, [pc, #296]	@ (800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800752a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800752e:	d121      	bne.n	8007574 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007530:	4b46      	ldr	r3, [pc, #280]	@ (800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d017      	beq.n	800756c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800753c:	4b43      	ldr	r3, [pc, #268]	@ (800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800753e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007540:	0a5b      	lsrs	r3, r3, #9
 8007542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800754e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007552:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007556:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800755a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800755e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007562:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	e006      	b.n	800757a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	e002      	b.n	800757a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800757a:	4b34      	ldr	r3, [pc, #208]	@ (800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007582:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007586:	d121      	bne.n	80075cc <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007588:	4b30      	ldr	r3, [pc, #192]	@ (800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800758a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d017      	beq.n	80075c4 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007594:	4b2d      	ldr	r3, [pc, #180]	@ (800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007598:	0c1b      	lsrs	r3, r3, #16
 800759a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80075a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075aa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80075ae:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80075b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ba:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	605a      	str	r2, [r3, #4]
 80075c2:	e006      	b.n	80075d2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	605a      	str	r2, [r3, #4]
 80075ca:	e002      	b.n	80075d2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075d2:	4b1e      	ldr	r3, [pc, #120]	@ (800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075de:	d121      	bne.n	8007624 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80075e0:	4b1a      	ldr	r3, [pc, #104]	@ (800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d017      	beq.n	800761c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80075ec:	4b17      	ldr	r3, [pc, #92]	@ (800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075f0:	0e1b      	lsrs	r3, r3, #24
 80075f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80075fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007602:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007606:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800760a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800760e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007612:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800761a:	e010      	b.n	800763e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	609a      	str	r2, [r3, #8]
}
 8007622:	e00c      	b.n	800763e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	609a      	str	r2, [r3, #8]
}
 800762a:	e008      	b.n	800763e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	609a      	str	r2, [r3, #8]
}
 800763e:	bf00      	nop
 8007640:	372c      	adds	r7, #44	@ 0x2c
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	44020c00 	.word	0x44020c00
 8007650:	03d09000 	.word	0x03d09000
 8007654:	46000000 	.word	0x46000000
 8007658:	4a742400 	.word	0x4a742400
 800765c:	4af42400 	.word	0x4af42400

08007660 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8007660:	b480      	push	{r7}
 8007662:	b08b      	sub	sp, #44	@ 0x2c
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007668:	4bae      	ldr	r3, [pc, #696]	@ (8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800766a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800766c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007670:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007672:	4bac      	ldr	r3, [pc, #688]	@ (8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800767c:	4ba9      	ldr	r3, [pc, #676]	@ (8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800767e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007680:	0a1b      	lsrs	r3, r3, #8
 8007682:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007686:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007688:	4ba6      	ldr	r3, [pc, #664]	@ (8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800768a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768c:	091b      	lsrs	r3, r3, #4
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007694:	4ba3      	ldr	r3, [pc, #652]	@ (8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007698:	08db      	lsrs	r3, r3, #3
 800769a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	fb02 f303 	mul.w	r3, r2, r3
 80076a4:	ee07 3a90 	vmov	s15, r3
 80076a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ac:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 8126 	beq.w	8007904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d053      	beq.n	8007766 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d86f      	bhi.n	80077a4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d003      	beq.n	80076d2 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d02b      	beq.n	8007728 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80076d0:	e068      	b.n	80077a4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076d2:	4b94      	ldr	r3, [pc, #592]	@ (8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	08db      	lsrs	r3, r3, #3
 80076d8:	f003 0303 	and.w	r3, r3, #3
 80076dc:	4a92      	ldr	r2, [pc, #584]	@ (8007928 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80076de:	fa22 f303 	lsr.w	r3, r2, r3
 80076e2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	ee07 3a90 	vmov	s15, r3
 80076f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007706:	ed97 6a04 	vldr	s12, [r7, #16]
 800770a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800792c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800770e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800771a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800771e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007722:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007726:	e068      	b.n	80077fa <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007732:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8007736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	ee07 3a90 	vmov	s15, r3
 8007740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007744:	ed97 6a04 	vldr	s12, [r7, #16]
 8007748:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800792c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800774c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007754:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800775c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007760:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007764:	e049      	b.n	80077fa <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	ee07 3a90 	vmov	s15, r3
 800776c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007770:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007934 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8007774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007782:	ed97 6a04 	vldr	s12, [r7, #16]
 8007786:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800792c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800778a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80077a2:	e02a      	b.n	80077fa <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077a4:	4b5f      	ldr	r3, [pc, #380]	@ (8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	08db      	lsrs	r3, r3, #3
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	4a5e      	ldr	r2, [pc, #376]	@ (8007928 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80077b0:	fa22 f303 	lsr.w	r3, r2, r3
 80077b4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	ee07 3a90 	vmov	s15, r3
 80077bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	ee07 3a90 	vmov	s15, r3
 80077c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	ee07 3a90 	vmov	s15, r3
 80077d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d8:	ed97 6a04 	vldr	s12, [r7, #16]
 80077dc:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800792c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80077e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80077f8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077fa:	4b4a      	ldr	r3, [pc, #296]	@ (8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007802:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007806:	d121      	bne.n	800784c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007808:	4b46      	ldr	r3, [pc, #280]	@ (8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800780a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800780c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d017      	beq.n	8007844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007814:	4b43      	ldr	r3, [pc, #268]	@ (8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007818:	0a5b      	lsrs	r3, r3, #9
 800781a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007826:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800782a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800782e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800783a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	e006      	b.n	8007852 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	e002      	b.n	8007852 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007852:	4b34      	ldr	r3, [pc, #208]	@ (8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800785a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800785e:	d121      	bne.n	80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007860:	4b30      	ldr	r3, [pc, #192]	@ (8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d017      	beq.n	800789c <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800786c:	4b2d      	ldr	r3, [pc, #180]	@ (8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800786e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007870:	0c1b      	lsrs	r3, r3, #16
 8007872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800787e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007882:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007886:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800788a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800788e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007892:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	605a      	str	r2, [r3, #4]
 800789a:	e006      	b.n	80078aa <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	605a      	str	r2, [r3, #4]
 80078a2:	e002      	b.n	80078aa <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078b6:	d121      	bne.n	80078fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80078b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d017      	beq.n	80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80078c4:	4b17      	ldr	r3, [pc, #92]	@ (8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c8:	0e1b      	lsrs	r3, r3, #24
 80078ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80078d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078da:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80078de:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80078e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ea:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80078f2:	e010      	b.n	8007916 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	609a      	str	r2, [r3, #8]
}
 80078fa:	e00c      	b.n	8007916 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	609a      	str	r2, [r3, #8]
}
 8007902:	e008      	b.n	8007916 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	609a      	str	r2, [r3, #8]
}
 8007916:	bf00      	nop
 8007918:	372c      	adds	r7, #44	@ 0x2c
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	44020c00 	.word	0x44020c00
 8007928:	03d09000 	.word	0x03d09000
 800792c:	46000000 	.word	0x46000000
 8007930:	4a742400 	.word	0x4a742400
 8007934:	4af42400 	.word	0x4af42400

08007938 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007938:	b480      	push	{r7}
 800793a:	b08b      	sub	sp, #44	@ 0x2c
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007940:	4bae      	ldr	r3, [pc, #696]	@ (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007948:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800794a:	4bac      	ldr	r3, [pc, #688]	@ (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800794c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007954:	4ba9      	ldr	r3, [pc, #676]	@ (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007958:	0a1b      	lsrs	r3, r3, #8
 800795a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800795e:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007960:	4ba6      	ldr	r3, [pc, #664]	@ (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007964:	091b      	lsrs	r3, r3, #4
 8007966:	f003 0301 	and.w	r3, r3, #1
 800796a:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800796c:	4ba3      	ldr	r3, [pc, #652]	@ (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800796e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007970:	08db      	lsrs	r3, r3, #3
 8007972:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	fb02 f303 	mul.w	r3, r2, r3
 800797c:	ee07 3a90 	vmov	s15, r3
 8007980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007984:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 8126 	beq.w	8007bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	2b03      	cmp	r3, #3
 8007994:	d053      	beq.n	8007a3e <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	2b03      	cmp	r3, #3
 800799a:	d86f      	bhi.n	8007a7c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d003      	beq.n	80079aa <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d02b      	beq.n	8007a00 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80079a8:	e068      	b.n	8007a7c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079aa:	4b94      	ldr	r3, [pc, #592]	@ (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	08db      	lsrs	r3, r3, #3
 80079b0:	f003 0303 	and.w	r3, r3, #3
 80079b4:	4a92      	ldr	r2, [pc, #584]	@ (8007c00 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80079b6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ba:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	ee07 3a90 	vmov	s15, r3
 80079cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	ee07 3a90 	vmov	s15, r3
 80079da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079de:	ed97 6a04 	vldr	s12, [r7, #16]
 80079e2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007c04 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80079e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80079fe:	e068      	b.n	8007ad2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	ee07 3a90 	vmov	s15, r3
 8007a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a1c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007a20:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007c04 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007a24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a38:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007a3c:	e049      	b.n	8007ad2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	ee07 3a90 	vmov	s15, r3
 8007a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a48:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007c0c <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007a4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a50:	6a3b      	ldr	r3, [r7, #32]
 8007a52:	ee07 3a90 	vmov	s15, r3
 8007a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a5a:	ed97 6a04 	vldr	s12, [r7, #16]
 8007a5e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007c04 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a76:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007a7a:	e02a      	b.n	8007ad2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a7c:	4b5f      	ldr	r3, [pc, #380]	@ (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	08db      	lsrs	r3, r3, #3
 8007a82:	f003 0303 	and.w	r3, r3, #3
 8007a86:	4a5e      	ldr	r2, [pc, #376]	@ (8007c00 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007a88:	fa22 f303 	lsr.w	r3, r2, r3
 8007a8c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	ee07 3a90 	vmov	s15, r3
 8007a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	ee07 3a90 	vmov	s15, r3
 8007a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	ee07 3a90 	vmov	s15, r3
 8007aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab0:	ed97 6a04 	vldr	s12, [r7, #16]
 8007ab4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007c04 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007ab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007abc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007acc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007ad0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ada:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ade:	d121      	bne.n	8007b24 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007ae0:	4b46      	ldr	r3, [pc, #280]	@ (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d017      	beq.n	8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007aec:	4b43      	ldr	r3, [pc, #268]	@ (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af0:	0a5b      	lsrs	r3, r3, #9
 8007af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007afe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b02:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007b06:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b12:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	e006      	b.n	8007b2a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	e002      	b.n	8007b2a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b2a:	4b34      	ldr	r3, [pc, #208]	@ (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b36:	d121      	bne.n	8007b7c <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007b38:	4b30      	ldr	r3, [pc, #192]	@ (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d017      	beq.n	8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007b44:	4b2d      	ldr	r3, [pc, #180]	@ (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b48:	0c1b      	lsrs	r3, r3, #16
 8007b4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007b56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007b5e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b6a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	605a      	str	r2, [r3, #4]
 8007b72:	e006      	b.n	8007b82 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	605a      	str	r2, [r3, #4]
 8007b7a:	e002      	b.n	8007b82 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b82:	4b1e      	ldr	r3, [pc, #120]	@ (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b8e:	d121      	bne.n	8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007b90:	4b1a      	ldr	r3, [pc, #104]	@ (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d017      	beq.n	8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007b9c:	4b17      	ldr	r3, [pc, #92]	@ (8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ba0:	0e1b      	lsrs	r3, r3, #24
 8007ba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ba6:	ee07 3a90 	vmov	s15, r3
 8007baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007bae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bb2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007bb6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bc2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007bca:	e010      	b.n	8007bee <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	609a      	str	r2, [r3, #8]
}
 8007bd2:	e00c      	b.n	8007bee <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	609a      	str	r2, [r3, #8]
}
 8007bda:	e008      	b.n	8007bee <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	609a      	str	r2, [r3, #8]
}
 8007bee:	bf00      	nop
 8007bf0:	372c      	adds	r7, #44	@ 0x2c
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	44020c00 	.word	0x44020c00
 8007c00:	03d09000 	.word	0x03d09000
 8007c04:	46000000 	.word	0x46000000
 8007c08:	4a742400 	.word	0x4a742400
 8007c0c:	4af42400 	.word	0x4af42400

08007c10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007c10:	b590      	push	{r4, r7, lr}
 8007c12:	b08f      	sub	sp, #60	@ 0x3c
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007c1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c1e:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8007c22:	4321      	orrs	r1, r4
 8007c24:	d150      	bne.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007c26:	4b26      	ldr	r3, [pc, #152]	@ (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c30:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007c32:	4b23      	ldr	r3, [pc, #140]	@ (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d108      	bne.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c46:	d104      	bne.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007c48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c4e:	f002 bb2a 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007c52:	4b1b      	ldr	r3, [pc, #108]	@ (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c60:	d108      	bne.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8007c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c68:	d104      	bne.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8007c6a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c70:	f002 bb19 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007c74:	4b12      	ldr	r3, [pc, #72]	@ (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c80:	d119      	bne.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c88:	d115      	bne.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8007c92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c96:	d30a      	bcc.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007c98:	4b09      	ldr	r3, [pc, #36]	@ (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	0a1b      	lsrs	r3, r3, #8
 8007c9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ca2:	4a08      	ldr	r2, [pc, #32]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007caa:	f002 bafc 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007cb2:	f002 baf8 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cba:	f002 baf4 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007cbe:	bf00      	nop
 8007cc0:	44020c00 	.word	0x44020c00
 8007cc4:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007cc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ccc:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8007cd0:	ea50 0104 	orrs.w	r1, r0, r4
 8007cd4:	f001 8275 	beq.w	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8007cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cdc:	2801      	cmp	r0, #1
 8007cde:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8007ce2:	f082 82dd 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ce6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cea:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8007cee:	ea50 0104 	orrs.w	r1, r0, r4
 8007cf2:	f001 816c 	beq.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8007cf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cfa:	2801      	cmp	r0, #1
 8007cfc:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8007d00:	f082 82ce 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d08:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8007d0c:	ea50 0104 	orrs.w	r1, r0, r4
 8007d10:	f001 8602 	beq.w	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8007d14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d18:	2801      	cmp	r0, #1
 8007d1a:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8007d1e:	f082 82bf 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d26:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8007d2a:	ea50 0104 	orrs.w	r1, r0, r4
 8007d2e:	f001 854c 	beq.w	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8007d32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d36:	2801      	cmp	r0, #1
 8007d38:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8007d3c:	f082 82b0 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d44:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8007d48:	ea50 0104 	orrs.w	r1, r0, r4
 8007d4c:	f001 849e 	beq.w	800968c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8007d50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d54:	2801      	cmp	r0, #1
 8007d56:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8007d5a:	f082 82a1 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d62:	f1a1 0420 	sub.w	r4, r1, #32
 8007d66:	ea50 0104 	orrs.w	r1, r0, r4
 8007d6a:	f001 83e8 	beq.w	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8007d6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d72:	2801      	cmp	r0, #1
 8007d74:	f171 0120 	sbcs.w	r1, r1, #32
 8007d78:	f082 8292 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d80:	f1a1 0410 	sub.w	r4, r1, #16
 8007d84:	ea50 0104 	orrs.w	r1, r0, r4
 8007d88:	f002 8256 	beq.w	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007d8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d90:	2801      	cmp	r0, #1
 8007d92:	f171 0110 	sbcs.w	r1, r1, #16
 8007d96:	f082 8283 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d9e:	f1a1 0408 	sub.w	r4, r1, #8
 8007da2:	ea50 0104 	orrs.w	r1, r0, r4
 8007da6:	f002 81cc 	beq.w	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8007daa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dae:	2801      	cmp	r0, #1
 8007db0:	f171 0108 	sbcs.w	r1, r1, #8
 8007db4:	f082 8274 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007db8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dbc:	1f0c      	subs	r4, r1, #4
 8007dbe:	ea50 0104 	orrs.w	r1, r0, r4
 8007dc2:	f001 8648 	beq.w	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8007dc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dca:	2801      	cmp	r0, #1
 8007dcc:	f171 0104 	sbcs.w	r1, r1, #4
 8007dd0:	f082 8266 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007dd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dd8:	1e8c      	subs	r4, r1, #2
 8007dda:	ea50 0104 	orrs.w	r1, r0, r4
 8007dde:	f002 8143 	beq.w	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8007de2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007de6:	2801      	cmp	r0, #1
 8007de8:	f171 0102 	sbcs.w	r1, r1, #2
 8007dec:	f082 8258 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007df0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007df4:	1e4c      	subs	r4, r1, #1
 8007df6:	ea50 0104 	orrs.w	r1, r0, r4
 8007dfa:	f002 80ce 	beq.w	8009f9a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8007dfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e02:	2801      	cmp	r0, #1
 8007e04:	f171 0101 	sbcs.w	r1, r1, #1
 8007e08:	f082 824a 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e10:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8007e14:	4321      	orrs	r1, r4
 8007e16:	f002 8059 	beq.w	8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8007e1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e1e:	4cd9      	ldr	r4, [pc, #868]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007e20:	42a0      	cmp	r0, r4
 8007e22:	f171 0100 	sbcs.w	r1, r1, #0
 8007e26:	f082 823b 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e2e:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8007e32:	4321      	orrs	r1, r4
 8007e34:	f001 87d9 	beq.w	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8007e38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e3c:	4cd2      	ldr	r4, [pc, #840]	@ (8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007e3e:	42a0      	cmp	r0, r4
 8007e40:	f171 0100 	sbcs.w	r1, r1, #0
 8007e44:	f082 822c 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e4c:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8007e50:	4321      	orrs	r1, r4
 8007e52:	f001 8751 	beq.w	8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8007e56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e5a:	4ccc      	ldr	r4, [pc, #816]	@ (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007e5c:	42a0      	cmp	r0, r4
 8007e5e:	f171 0100 	sbcs.w	r1, r1, #0
 8007e62:	f082 821d 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e6a:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8007e6e:	4321      	orrs	r1, r4
 8007e70:	f001 869a 	beq.w	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8007e74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e78:	4cc5      	ldr	r4, [pc, #788]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8007e7a:	42a0      	cmp	r0, r4
 8007e7c:	f171 0100 	sbcs.w	r1, r1, #0
 8007e80:	f082 820e 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e88:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007e8c:	4321      	orrs	r1, r4
 8007e8e:	f001 8612 	beq.w	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8007e92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e96:	4cbf      	ldr	r4, [pc, #764]	@ (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007e98:	42a0      	cmp	r0, r4
 8007e9a:	f171 0100 	sbcs.w	r1, r1, #0
 8007e9e:	f082 81ff 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ea2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ea6:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8007eaa:	4321      	orrs	r1, r4
 8007eac:	f002 817e 	beq.w	800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007eb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007eb4:	4cb8      	ldr	r4, [pc, #736]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007eb6:	42a0      	cmp	r0, r4
 8007eb8:	f171 0100 	sbcs.w	r1, r1, #0
 8007ebc:	f082 81f0 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ec4:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8007ec8:	4321      	orrs	r1, r4
 8007eca:	f000 829e 	beq.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8007ece:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ed2:	4cb2      	ldr	r4, [pc, #712]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007ed4:	42a0      	cmp	r0, r4
 8007ed6:	f171 0100 	sbcs.w	r1, r1, #0
 8007eda:	f082 81e1 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ede:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ee2:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8007ee6:	4321      	orrs	r1, r4
 8007ee8:	f000 826d 	beq.w	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007eec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ef0:	4cab      	ldr	r4, [pc, #684]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007ef2:	42a0      	cmp	r0, r4
 8007ef4:	f171 0100 	sbcs.w	r1, r1, #0
 8007ef8:	f082 81d2 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007efc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f00:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007f04:	4321      	orrs	r1, r4
 8007f06:	f001 800d 	beq.w	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8007f0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f0e:	4ca5      	ldr	r4, [pc, #660]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007f10:	42a0      	cmp	r0, r4
 8007f12:	f171 0100 	sbcs.w	r1, r1, #0
 8007f16:	f082 81c3 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f1e:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8007f22:	4321      	orrs	r1, r4
 8007f24:	f000 81d0 	beq.w	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8007f28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f2c:	4c9e      	ldr	r4, [pc, #632]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007f2e:	42a0      	cmp	r0, r4
 8007f30:	f171 0100 	sbcs.w	r1, r1, #0
 8007f34:	f082 81b4 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f3c:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8007f40:	4321      	orrs	r1, r4
 8007f42:	f000 8142 	beq.w	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8007f46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f4a:	4c98      	ldr	r4, [pc, #608]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007f4c:	42a0      	cmp	r0, r4
 8007f4e:	f171 0100 	sbcs.w	r1, r1, #0
 8007f52:	f082 81a5 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f5a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8007f5e:	4321      	orrs	r1, r4
 8007f60:	f001 824e 	beq.w	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007f64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f68:	4c91      	ldr	r4, [pc, #580]	@ (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007f6a:	42a0      	cmp	r0, r4
 8007f6c:	f171 0100 	sbcs.w	r1, r1, #0
 8007f70:	f082 8196 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f78:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8007f7c:	4321      	orrs	r1, r4
 8007f7e:	f001 8197 	beq.w	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8007f82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f86:	4c8b      	ldr	r4, [pc, #556]	@ (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007f88:	42a0      	cmp	r0, r4
 8007f8a:	f171 0100 	sbcs.w	r1, r1, #0
 8007f8e:	f082 8187 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f96:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8007f9a:	4321      	orrs	r1, r4
 8007f9c:	f001 8154 	beq.w	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007fa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fa4:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8007fa8:	f171 0100 	sbcs.w	r1, r1, #0
 8007fac:	f082 8178 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007fb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fb4:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007fb8:	4321      	orrs	r1, r4
 8007fba:	f001 80b7 	beq.w	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007fbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fc2:	f248 0401 	movw	r4, #32769	@ 0x8001
 8007fc6:	42a0      	cmp	r0, r4
 8007fc8:	f171 0100 	sbcs.w	r1, r1, #0
 8007fcc:	f082 8168 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007fd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fd4:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8007fd8:	4321      	orrs	r1, r4
 8007fda:	f001 8064 	beq.w	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8007fde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fe2:	f244 0401 	movw	r4, #16385	@ 0x4001
 8007fe6:	42a0      	cmp	r0, r4
 8007fe8:	f171 0100 	sbcs.w	r1, r1, #0
 8007fec:	f082 8158 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ff0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ff4:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8007ff8:	4321      	orrs	r1, r4
 8007ffa:	f001 8011 	beq.w	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8007ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008002:	f242 0401 	movw	r4, #8193	@ 0x2001
 8008006:	42a0      	cmp	r0, r4
 8008008:	f171 0100 	sbcs.w	r1, r1, #0
 800800c:	f082 8148 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008010:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008014:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8008018:	4321      	orrs	r1, r4
 800801a:	f000 871e 	beq.w	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800801e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008022:	f241 0401 	movw	r4, #4097	@ 0x1001
 8008026:	42a0      	cmp	r0, r4
 8008028:	f171 0100 	sbcs.w	r1, r1, #0
 800802c:	f082 8138 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008030:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008034:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8008038:	4321      	orrs	r1, r4
 800803a:	f000 86a8 	beq.w	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800803e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008042:	f640 0401 	movw	r4, #2049	@ 0x801
 8008046:	42a0      	cmp	r0, r4
 8008048:	f171 0100 	sbcs.w	r1, r1, #0
 800804c:	f082 8128 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008050:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008054:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8008058:	4321      	orrs	r1, r4
 800805a:	f000 8632 	beq.w	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800805e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008062:	f240 4401 	movw	r4, #1025	@ 0x401
 8008066:	42a0      	cmp	r0, r4
 8008068:	f171 0100 	sbcs.w	r1, r1, #0
 800806c:	f082 8118 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008070:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008074:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8008078:	4321      	orrs	r1, r4
 800807a:	f000 85b0 	beq.w	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800807e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008082:	f240 2401 	movw	r4, #513	@ 0x201
 8008086:	42a0      	cmp	r0, r4
 8008088:	f171 0100 	sbcs.w	r1, r1, #0
 800808c:	f082 8108 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008090:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008094:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8008098:	4321      	orrs	r1, r4
 800809a:	f000 8535 	beq.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800809e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080a2:	f240 1401 	movw	r4, #257	@ 0x101
 80080a6:	42a0      	cmp	r0, r4
 80080a8:	f171 0100 	sbcs.w	r1, r1, #0
 80080ac:	f082 80f8 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080b4:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 80080b8:	4321      	orrs	r1, r4
 80080ba:	f000 84ba 	beq.w	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80080be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080c2:	2881      	cmp	r0, #129	@ 0x81
 80080c4:	f171 0100 	sbcs.w	r1, r1, #0
 80080c8:	f082 80ea 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080d0:	2821      	cmp	r0, #33	@ 0x21
 80080d2:	f171 0100 	sbcs.w	r1, r1, #0
 80080d6:	d26f      	bcs.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80080d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080dc:	4301      	orrs	r1, r0
 80080de:	f002 80df 	beq.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080e6:	1e42      	subs	r2, r0, #1
 80080e8:	f141 33ff 	adc.w	r3, r1, #4294967295
 80080ec:	2a20      	cmp	r2, #32
 80080ee:	f173 0100 	sbcs.w	r1, r3, #0
 80080f2:	f082 80d5 	bcs.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080f6:	2a1f      	cmp	r2, #31
 80080f8:	f202 80d2 	bhi.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080fc:	a101      	add	r1, pc, #4	@ (adr r1, 8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80080fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008102:	bf00      	nop
 8008104:	08008465 	.word	0x08008465
 8008108:	08008531 	.word	0x08008531
 800810c:	0800a2a1 	.word	0x0800a2a1
 8008110:	080085f1 	.word	0x080085f1
 8008114:	0800a2a1 	.word	0x0800a2a1
 8008118:	0800a2a1 	.word	0x0800a2a1
 800811c:	0800a2a1 	.word	0x0800a2a1
 8008120:	080086c1 	.word	0x080086c1
 8008124:	0800a2a1 	.word	0x0800a2a1
 8008128:	0800a2a1 	.word	0x0800a2a1
 800812c:	0800a2a1 	.word	0x0800a2a1
 8008130:	0800a2a1 	.word	0x0800a2a1
 8008134:	0800a2a1 	.word	0x0800a2a1
 8008138:	0800a2a1 	.word	0x0800a2a1
 800813c:	0800a2a1 	.word	0x0800a2a1
 8008140:	080087a3 	.word	0x080087a3
 8008144:	0800a2a1 	.word	0x0800a2a1
 8008148:	0800a2a1 	.word	0x0800a2a1
 800814c:	0800a2a1 	.word	0x0800a2a1
 8008150:	0800a2a1 	.word	0x0800a2a1
 8008154:	0800a2a1 	.word	0x0800a2a1
 8008158:	0800a2a1 	.word	0x0800a2a1
 800815c:	0800a2a1 	.word	0x0800a2a1
 8008160:	0800a2a1 	.word	0x0800a2a1
 8008164:	0800a2a1 	.word	0x0800a2a1
 8008168:	0800a2a1 	.word	0x0800a2a1
 800816c:	0800a2a1 	.word	0x0800a2a1
 8008170:	0800a2a1 	.word	0x0800a2a1
 8008174:	0800a2a1 	.word	0x0800a2a1
 8008178:	0800a2a1 	.word	0x0800a2a1
 800817c:	0800a2a1 	.word	0x0800a2a1
 8008180:	08008879 	.word	0x08008879
 8008184:	80000001 	.word	0x80000001
 8008188:	40000001 	.word	0x40000001
 800818c:	20000001 	.word	0x20000001
 8008190:	10000001 	.word	0x10000001
 8008194:	08000001 	.word	0x08000001
 8008198:	04000001 	.word	0x04000001
 800819c:	00800001 	.word	0x00800001
 80081a0:	00400001 	.word	0x00400001
 80081a4:	00200001 	.word	0x00200001
 80081a8:	00100001 	.word	0x00100001
 80081ac:	00080001 	.word	0x00080001
 80081b0:	00040001 	.word	0x00040001
 80081b4:	00020001 	.word	0x00020001
 80081b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081bc:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80081c0:	430b      	orrs	r3, r1
 80081c2:	f000 83c4 	beq.w	800894e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80081c6:	f002 b86b 	b.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80081ca:	4ba1      	ldr	r3, [pc, #644]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80081cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081d0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80081d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80081d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081dc:	d036      	beq.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80081de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081e4:	d86b      	bhi.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80081e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081ec:	d02b      	beq.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80081ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081f4:	d863      	bhi.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80081f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081fc:	d01b      	beq.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80081fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008200:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008204:	d85b      	bhi.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008208:	2b00      	cmp	r3, #0
 800820a:	d004      	beq.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800820c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008212:	d008      	beq.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8008214:	e053      	b.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008216:	f107 0320 	add.w	r3, r7, #32
 800821a:	4618      	mov	r0, r3
 800821c:	f7ff f8b4 	bl	8007388 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008222:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008224:	e04e      	b.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008226:	f107 0314 	add.w	r3, r7, #20
 800822a:	4618      	mov	r0, r3
 800822c:	f7ff fa18 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008234:	e046      	b.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008236:	f107 0308 	add.w	r3, r7, #8
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff fb7c 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008244:	e03e      	b.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008246:	4b83      	ldr	r3, [pc, #524]	@ (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008248:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800824a:	e03b      	b.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800824c:	4b80      	ldr	r3, [pc, #512]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800824e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008252:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008256:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008258:	4b7d      	ldr	r3, [pc, #500]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b02      	cmp	r3, #2
 8008262:	d10c      	bne.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008266:	2b00      	cmp	r3, #0
 8008268:	d109      	bne.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800826a:	4b79      	ldr	r3, [pc, #484]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	08db      	lsrs	r3, r3, #3
 8008270:	f003 0303 	and.w	r3, r3, #3
 8008274:	4a78      	ldr	r2, [pc, #480]	@ (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008276:	fa22 f303 	lsr.w	r3, r2, r3
 800827a:	637b      	str	r3, [r7, #52]	@ 0x34
 800827c:	e01e      	b.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800827e:	4b74      	ldr	r3, [pc, #464]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008286:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800828a:	d106      	bne.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800828c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008292:	d102      	bne.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008294:	4b71      	ldr	r3, [pc, #452]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008296:	637b      	str	r3, [r7, #52]	@ 0x34
 8008298:	e010      	b.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800829a:	4b6d      	ldr	r3, [pc, #436]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082a6:	d106      	bne.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 80082a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082ae:	d102      	bne.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80082b0:	4b6b      	ldr	r3, [pc, #428]	@ (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80082b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80082b4:	e002      	b.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80082b6:	2300      	movs	r3, #0
 80082b8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80082ba:	e003      	b.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80082bc:	e002      	b.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082c2:	bf00      	nop
          }
        }
        break;
 80082c4:	f001 bfef 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80082c8:	4b61      	ldr	r3, [pc, #388]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80082ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082ce:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 80082d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80082d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082da:	d036      	beq.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80082dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082e2:	d86b      	bhi.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80082e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80082ea:	d02b      	beq.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80082ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ee:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80082f2:	d863      	bhi.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80082f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082fa:	d01b      	beq.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80082fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008302:	d85b      	bhi.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008306:	2b00      	cmp	r3, #0
 8008308:	d004      	beq.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008310:	d008      	beq.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8008312:	e053      	b.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008314:	f107 0320 	add.w	r3, r7, #32
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff f835 	bl	8007388 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800831e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008320:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008322:	e04e      	b.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008324:	f107 0314 	add.w	r3, r7, #20
 8008328:	4618      	mov	r0, r3
 800832a:	f7ff f999 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008332:	e046      	b.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008334:	f107 0308 	add.w	r3, r7, #8
 8008338:	4618      	mov	r0, r3
 800833a:	f7ff fafd 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008342:	e03e      	b.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008344:	4b43      	ldr	r3, [pc, #268]	@ (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008346:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008348:	e03b      	b.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800834a:	4b41      	ldr	r3, [pc, #260]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800834c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008350:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008354:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008356:	4b3e      	ldr	r3, [pc, #248]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b02      	cmp	r3, #2
 8008360:	d10c      	bne.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8008362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d109      	bne.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008368:	4b39      	ldr	r3, [pc, #228]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	08db      	lsrs	r3, r3, #3
 800836e:	f003 0303 	and.w	r3, r3, #3
 8008372:	4a39      	ldr	r2, [pc, #228]	@ (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008374:	fa22 f303 	lsr.w	r3, r2, r3
 8008378:	637b      	str	r3, [r7, #52]	@ 0x34
 800837a:	e01e      	b.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800837c:	4b34      	ldr	r3, [pc, #208]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008388:	d106      	bne.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800838a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800838c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008390:	d102      	bne.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008392:	4b32      	ldr	r3, [pc, #200]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008394:	637b      	str	r3, [r7, #52]	@ 0x34
 8008396:	e010      	b.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008398:	4b2d      	ldr	r3, [pc, #180]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083a4:	d106      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80083a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083ac:	d102      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80083ae:	4b2c      	ldr	r3, [pc, #176]	@ (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80083b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b2:	e002      	b.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80083b8:	e003      	b.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80083ba:	e002      	b.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80083bc:	2300      	movs	r3, #0
 80083be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083c0:	bf00      	nop
          }
        }
        break;
 80083c2:	f001 bf70 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80083c6:	4b22      	ldr	r3, [pc, #136]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80083c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80083cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083d0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80083d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d108      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083d8:	f107 0320 	add.w	r3, r7, #32
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fe ffd3 	bl	8007388 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80083e6:	f001 bf5e 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80083ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ec:	2b40      	cmp	r3, #64	@ 0x40
 80083ee:	d108      	bne.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083f0:	f107 0314 	add.w	r3, r7, #20
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7ff f933 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083fe:	f001 bf52 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008402:	2300      	movs	r3, #0
 8008404:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008406:	f001 bf4e 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800840a:	4b11      	ldr	r3, [pc, #68]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800840c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008414:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8008416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008418:	2b00      	cmp	r3, #0
 800841a:	d108      	bne.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800841c:	f107 0320 	add.w	r3, r7, #32
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe ffb1 	bl	8007388 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800842a:	f001 bf3c 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800842e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008430:	2b80      	cmp	r3, #128	@ 0x80
 8008432:	d108      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008434:	f107 0314 	add.w	r3, r7, #20
 8008438:	4618      	mov	r0, r3
 800843a:	f7ff f911 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008442:	f001 bf30 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008446:	2300      	movs	r3, #0
 8008448:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800844a:	f001 bf2c 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800844e:	bf00      	nop
 8008450:	44020c00 	.word	0x44020c00
 8008454:	00bb8000 	.word	0x00bb8000
 8008458:	03d09000 	.word	0x03d09000
 800845c:	003d0900 	.word	0x003d0900
 8008460:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008464:	4b9d      	ldr	r3, [pc, #628]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008466:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800846a:	f003 0307 	and.w	r3, r3, #7
 800846e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008472:	2b00      	cmp	r3, #0
 8008474:	d104      	bne.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008476:	f7fc ffd1 	bl	800541c <HAL_RCC_GetPCLK2Freq>
 800847a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800847c:	f001 bf13 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8008480:	4b96      	ldr	r3, [pc, #600]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008488:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800848c:	d10a      	bne.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800848e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008490:	2b01      	cmp	r3, #1
 8008492:	d107      	bne.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008494:	f107 0314 	add.w	r3, r7, #20
 8008498:	4618      	mov	r0, r3
 800849a:	f7ff f8e1 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084a2:	e043      	b.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80084a4:	4b8d      	ldr	r3, [pc, #564]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084b0:	d10a      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80084b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d107      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084b8:	f107 0308 	add.w	r3, r7, #8
 80084bc:	4618      	mov	r0, r3
 80084be:	f7ff fa3b 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80084c6:	e031      	b.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80084c8:	4b84      	ldr	r3, [pc, #528]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0302 	and.w	r3, r3, #2
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d10c      	bne.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80084d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d109      	bne.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084da:	4b80      	ldr	r3, [pc, #512]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	08db      	lsrs	r3, r3, #3
 80084e0:	f003 0303 	and.w	r3, r3, #3
 80084e4:	4a7e      	ldr	r2, [pc, #504]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80084e6:	fa22 f303 	lsr.w	r3, r2, r3
 80084ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80084ec:	e01e      	b.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80084ee:	4b7b      	ldr	r3, [pc, #492]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084fa:	d105      	bne.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80084fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fe:	2b04      	cmp	r3, #4
 8008500:	d102      	bne.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8008502:	4b78      	ldr	r3, [pc, #480]	@ (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008504:	637b      	str	r3, [r7, #52]	@ 0x34
 8008506:	e011      	b.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008508:	4b74      	ldr	r3, [pc, #464]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800850a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	2b02      	cmp	r3, #2
 8008514:	d106      	bne.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8008516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008518:	2b05      	cmp	r3, #5
 800851a:	d103      	bne.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800851c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008520:	637b      	str	r3, [r7, #52]	@ 0x34
 8008522:	e003      	b.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8008524:	2300      	movs	r3, #0
 8008526:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008528:	f001 bebd 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800852c:	f001 bebb 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008530:	4b6a      	ldr	r3, [pc, #424]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008532:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008536:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800853a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800853c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853e:	2b00      	cmp	r3, #0
 8008540:	d104      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008542:	f7fc ff55 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 8008546:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008548:	f001 bead 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800854c:	4b63      	ldr	r3, [pc, #396]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008554:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008558:	d10a      	bne.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855c:	2b08      	cmp	r3, #8
 800855e:	d107      	bne.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008560:	f107 0314 	add.w	r3, r7, #20
 8008564:	4618      	mov	r0, r3
 8008566:	f7ff f87b 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	637b      	str	r3, [r7, #52]	@ 0x34
 800856e:	e03d      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8008570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008572:	2b10      	cmp	r3, #16
 8008574:	d108      	bne.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008576:	f107 0308 	add.w	r3, r7, #8
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff f9dc 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008584:	f001 be8f 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008588:	4b54      	ldr	r3, [pc, #336]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0302 	and.w	r3, r3, #2
 8008590:	2b02      	cmp	r3, #2
 8008592:	d10c      	bne.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8008594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008596:	2b18      	cmp	r3, #24
 8008598:	d109      	bne.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800859a:	4b50      	ldr	r3, [pc, #320]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	08db      	lsrs	r3, r3, #3
 80085a0:	f003 0303 	and.w	r3, r3, #3
 80085a4:	4a4e      	ldr	r2, [pc, #312]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80085a6:	fa22 f303 	lsr.w	r3, r2, r3
 80085aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ac:	e01e      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80085ae:	4b4b      	ldr	r3, [pc, #300]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085ba:	d105      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80085bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085be:	2b20      	cmp	r3, #32
 80085c0:	d102      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80085c2:	4b48      	ldr	r3, [pc, #288]	@ (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80085c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085c6:	e011      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80085c8:	4b44      	ldr	r3, [pc, #272]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80085ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d106      	bne.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80085d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d8:	2b28      	cmp	r3, #40	@ 0x28
 80085da:	d103      	bne.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80085dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80085e2:	e003      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085e8:	f001 be5d 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80085ec:	f001 be5b 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80085f0:	4b3a      	ldr	r3, [pc, #232]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80085f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80085f6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80085fa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80085fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d104      	bne.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008602:	f7fc fef5 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 8008606:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008608:	f001 be4d 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800860c:	4b33      	ldr	r3, [pc, #204]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008614:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008618:	d10a      	bne.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800861a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861c:	2b40      	cmp	r3, #64	@ 0x40
 800861e:	d107      	bne.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008620:	f107 0314 	add.w	r3, r7, #20
 8008624:	4618      	mov	r0, r3
 8008626:	f7ff f81b 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	637b      	str	r3, [r7, #52]	@ 0x34
 800862e:	e045      	b.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008630:	4b2a      	ldr	r3, [pc, #168]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800863c:	d10a      	bne.n	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800863e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008640:	2b80      	cmp	r3, #128	@ 0x80
 8008642:	d107      	bne.n	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008644:	f107 0308 	add.w	r3, r7, #8
 8008648:	4618      	mov	r0, r3
 800864a:	f7ff f975 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	637b      	str	r3, [r7, #52]	@ 0x34
 8008652:	e033      	b.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008654:	4b21      	ldr	r3, [pc, #132]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b02      	cmp	r3, #2
 800865e:	d10c      	bne.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8008660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008662:	2bc0      	cmp	r3, #192	@ 0xc0
 8008664:	d109      	bne.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008666:	4b1d      	ldr	r3, [pc, #116]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	08db      	lsrs	r3, r3, #3
 800866c:	f003 0303 	and.w	r3, r3, #3
 8008670:	4a1b      	ldr	r2, [pc, #108]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008672:	fa22 f303 	lsr.w	r3, r2, r3
 8008676:	637b      	str	r3, [r7, #52]	@ 0x34
 8008678:	e020      	b.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800867a:	4b18      	ldr	r3, [pc, #96]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008682:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008686:	d106      	bne.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8008688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800868e:	d102      	bne.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8008690:	4b14      	ldr	r3, [pc, #80]	@ (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008692:	637b      	str	r3, [r7, #52]	@ 0x34
 8008694:	e012      	b.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008696:	4b11      	ldr	r3, [pc, #68]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d107      	bne.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 80086a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80086aa:	d103      	bne.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80086ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b2:	e003      	b.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80086b4:	2300      	movs	r3, #0
 80086b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086b8:	f001 bdf5 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086bc:	f001 bdf3 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80086c0:	4b06      	ldr	r3, [pc, #24]	@ (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80086c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80086c6:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80086ca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80086cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10a      	bne.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80086d2:	f7fc fe8d 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 80086d6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80086d8:	f001 bde5 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086dc:	44020c00 	.word	0x44020c00
 80086e0:	03d09000 	.word	0x03d09000
 80086e4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80086e8:	4ba0      	ldr	r3, [pc, #640]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086f4:	d10b      	bne.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80086f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086fc:	d107      	bne.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086fe:	f107 0314 	add.w	r3, r7, #20
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe ffac 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	637b      	str	r3, [r7, #52]	@ 0x34
 800870c:	e047      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800870e:	4b97      	ldr	r3, [pc, #604]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800871a:	d10b      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800871c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008722:	d107      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008724:	f107 0308 	add.w	r3, r7, #8
 8008728:	4618      	mov	r0, r3
 800872a:	f7ff f905 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	637b      	str	r3, [r7, #52]	@ 0x34
 8008732:	e034      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008734:	4b8d      	ldr	r3, [pc, #564]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0302 	and.w	r3, r3, #2
 800873c:	2b02      	cmp	r3, #2
 800873e:	d10d      	bne.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8008740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008742:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008746:	d109      	bne.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008748:	4b88      	ldr	r3, [pc, #544]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	08db      	lsrs	r3, r3, #3
 800874e:	f003 0303 	and.w	r3, r3, #3
 8008752:	4a87      	ldr	r2, [pc, #540]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008754:	fa22 f303 	lsr.w	r3, r2, r3
 8008758:	637b      	str	r3, [r7, #52]	@ 0x34
 800875a:	e020      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800875c:	4b83      	ldr	r3, [pc, #524]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008768:	d106      	bne.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800876a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008770:	d102      	bne.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8008772:	4b80      	ldr	r3, [pc, #512]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008774:	637b      	str	r3, [r7, #52]	@ 0x34
 8008776:	e012      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008778:	4b7c      	ldr	r3, [pc, #496]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800877a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800877e:	f003 0302 	and.w	r3, r3, #2
 8008782:	2b02      	cmp	r3, #2
 8008784:	d107      	bne.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8008786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008788:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800878c:	d103      	bne.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800878e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008792:	637b      	str	r3, [r7, #52]	@ 0x34
 8008794:	e003      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800879a:	f001 bd84 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800879e:	f001 bd82 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80087a2:	4b72      	ldr	r3, [pc, #456]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80087a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80087a8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80087ac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80087ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d104      	bne.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80087b4:	f7fc fe1c 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 80087b8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80087ba:	f001 bd74 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80087be:	4b6b      	ldr	r3, [pc, #428]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087ca:	d10b      	bne.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80087cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087d2:	d107      	bne.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087d4:	f107 0314 	add.w	r3, r7, #20
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fe ff41 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80087e2:	e047      	b.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80087e4:	4b61      	ldr	r3, [pc, #388]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087f0:	d10b      	bne.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80087f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087f8:	d107      	bne.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087fa:	f107 0308 	add.w	r3, r7, #8
 80087fe:	4618      	mov	r0, r3
 8008800:	f7ff f89a 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	637b      	str	r3, [r7, #52]	@ 0x34
 8008808:	e034      	b.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800880a:	4b58      	ldr	r3, [pc, #352]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b02      	cmp	r3, #2
 8008814:	d10d      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008818:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800881c:	d109      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800881e:	4b53      	ldr	r3, [pc, #332]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	08db      	lsrs	r3, r3, #3
 8008824:	f003 0303 	and.w	r3, r3, #3
 8008828:	4a51      	ldr	r2, [pc, #324]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800882a:	fa22 f303 	lsr.w	r3, r2, r3
 800882e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008830:	e020      	b.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008832:	4b4e      	ldr	r3, [pc, #312]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800883a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800883e:	d106      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008842:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008846:	d102      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8008848:	4b4a      	ldr	r3, [pc, #296]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800884a:	637b      	str	r3, [r7, #52]	@ 0x34
 800884c:	e012      	b.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800884e:	4b47      	ldr	r3, [pc, #284]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008854:	f003 0302 	and.w	r3, r3, #2
 8008858:	2b02      	cmp	r3, #2
 800885a:	d107      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800885c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008862:	d103      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8008864:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008868:	637b      	str	r3, [r7, #52]	@ 0x34
 800886a:	e003      	b.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800886c:	2300      	movs	r3, #0
 800886e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008870:	f001 bd19 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008874:	f001 bd17 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008878:	4b3c      	ldr	r3, [pc, #240]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800887a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800887e:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8008882:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008886:	2b00      	cmp	r3, #0
 8008888:	d104      	bne.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800888a:	f7fc fdb1 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 800888e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008890:	f001 bd09 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008894:	4b35      	ldr	r3, [pc, #212]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800889c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088a0:	d10b      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088a8:	d107      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088aa:	f107 0314 	add.w	r3, r7, #20
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fed6 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80088b8:	e047      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80088ba:	4b2c      	ldr	r3, [pc, #176]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088c6:	d10b      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80088c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088ce:	d107      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088d0:	f107 0308 	add.w	r3, r7, #8
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7ff f82f 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80088de:	e034      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80088e0:	4b22      	ldr	r3, [pc, #136]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d10d      	bne.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80088ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ee:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80088f2:	d109      	bne.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088f4:	4b1d      	ldr	r3, [pc, #116]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	08db      	lsrs	r3, r3, #3
 80088fa:	f003 0303 	and.w	r3, r3, #3
 80088fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008970 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008900:	fa22 f303 	lsr.w	r3, r2, r3
 8008904:	637b      	str	r3, [r7, #52]	@ 0x34
 8008906:	e020      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008908:	4b18      	ldr	r3, [pc, #96]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008914:	d106      	bne.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8008916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008918:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800891c:	d102      	bne.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800891e:	4b15      	ldr	r3, [pc, #84]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008920:	637b      	str	r3, [r7, #52]	@ 0x34
 8008922:	e012      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008924:	4b11      	ldr	r3, [pc, #68]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800892a:	f003 0302 	and.w	r3, r3, #2
 800892e:	2b02      	cmp	r3, #2
 8008930:	d107      	bne.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8008932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008934:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008938:	d103      	bne.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800893a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800893e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008940:	e003      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008946:	f001 bcae 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800894a:	f001 bcac 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800894e:	4b07      	ldr	r3, [pc, #28]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008950:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008954:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8008958:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800895a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10b      	bne.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008960:	f7fc fd46 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 8008964:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8008966:	f001 bc9e 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800896a:	bf00      	nop
 800896c:	44020c00 	.word	0x44020c00
 8008970:	03d09000 	.word	0x03d09000
 8008974:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008978:	4ba0      	ldr	r3, [pc, #640]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008980:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008984:	d10b      	bne.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8008986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008988:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800898c:	d107      	bne.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800898e:	f107 0314 	add.w	r3, r7, #20
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe fe64 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	637b      	str	r3, [r7, #52]	@ 0x34
 800899c:	e047      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800899e:	4b97      	ldr	r3, [pc, #604]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089aa:	d10b      	bne.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80089ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80089b2:	d107      	bne.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089b4:	f107 0308 	add.w	r3, r7, #8
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fe ffbd 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80089c2:	e034      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80089c4:	4b8d      	ldr	r3, [pc, #564]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d10d      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80089d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80089d6:	d109      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089d8:	4b88      	ldr	r3, [pc, #544]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	08db      	lsrs	r3, r3, #3
 80089de:	f003 0303 	and.w	r3, r3, #3
 80089e2:	4a87      	ldr	r2, [pc, #540]	@ (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80089e4:	fa22 f303 	lsr.w	r3, r2, r3
 80089e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ea:	e020      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80089ec:	4b83      	ldr	r3, [pc, #524]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089f8:	d106      	bne.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80089fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a00:	d102      	bne.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8008a02:	4b80      	ldr	r3, [pc, #512]	@ (8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a06:	e012      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8008a08:	4b7c      	ldr	r3, [pc, #496]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d107      	bne.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8008a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a18:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008a1c:	d103      	bne.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8008a1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a24:	e003      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a2a:	f001 bc3c 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a2e:	f001 bc3a 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8008a32:	4b72      	ldr	r3, [pc, #456]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008a38:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008a3c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d104      	bne.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a44:	f7fc fcd4 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 8008a48:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a4a:	f001 bc2c 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008a4e:	4b6b      	ldr	r3, [pc, #428]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a5a:	d10b      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a62:	d107      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a64:	f107 0314 	add.w	r3, r7, #20
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fe fdf9 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a72:	e047      	b.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008a74:	4b61      	ldr	r3, [pc, #388]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a80:	d10b      	bne.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8008a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a88:	d107      	bne.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a8a:	f107 0308 	add.w	r3, r7, #8
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fe ff52 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a98:	e034      	b.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008a9a:	4b58      	ldr	r3, [pc, #352]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0302 	and.w	r3, r3, #2
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d10d      	bne.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008aac:	d109      	bne.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008aae:	4b53      	ldr	r3, [pc, #332]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	08db      	lsrs	r3, r3, #3
 8008ab4:	f003 0303 	and.w	r3, r3, #3
 8008ab8:	4a51      	ldr	r2, [pc, #324]	@ (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008aba:	fa22 f303 	lsr.w	r3, r2, r3
 8008abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ac0:	e020      	b.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008ac2:	4b4e      	ldr	r3, [pc, #312]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008aca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ace:	d106      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ad6:	d102      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8008ad8:	4b4a      	ldr	r3, [pc, #296]	@ (8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8008adc:	e012      	b.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8008ade:	4b47      	ldr	r3, [pc, #284]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ae4:	f003 0302 	and.w	r3, r3, #2
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d107      	bne.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aee:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008af2:	d103      	bne.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8008af4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008afa:	e003      	b.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b00:	f001 bbd1 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b04:	f001 bbcf 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8008b08:	4b3c      	ldr	r3, [pc, #240]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008b0e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008b12:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d104      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b1a:	f7fc fc69 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 8008b1e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b20:	f001 bbc1 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008b24:	4b35      	ldr	r3, [pc, #212]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b30:	d10b      	bne.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b38:	d107      	bne.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b3a:	f107 0314 	add.w	r3, r7, #20
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe fd8e 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b48:	e047      	b.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8008b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b56:	d10b      	bne.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b5e:	d107      	bne.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b60:	f107 0308 	add.w	r3, r7, #8
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fe fee7 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b6e:	e034      	b.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008b70:	4b22      	ldr	r3, [pc, #136]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0302 	and.w	r3, r3, #2
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d10d      	bne.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b82:	d109      	bne.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b84:	4b1d      	ldr	r3, [pc, #116]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	08db      	lsrs	r3, r3, #3
 8008b8a:	f003 0303 	and.w	r3, r3, #3
 8008b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008b90:	fa22 f303 	lsr.w	r3, r2, r3
 8008b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b96:	e020      	b.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008b98:	4b18      	ldr	r3, [pc, #96]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ba4:	d106      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bac:	d102      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8008bae:	4b15      	ldr	r3, [pc, #84]	@ (8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bb2:	e012      	b.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008bb4:	4b11      	ldr	r3, [pc, #68]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008bb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d107      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008bc8:	d103      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8008bca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bd0:	e003      	b.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bd6:	f001 bb66 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bda:	f001 bb64 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8008bde:	4b07      	ldr	r3, [pc, #28]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008be0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008be4:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8008be8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8008bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10b      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008bf0:	f7fc fbfe 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 8008bf4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8008bf6:	f001 bb56 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bfa:	bf00      	nop
 8008bfc:	44020c00 	.word	0x44020c00
 8008c00:	03d09000 	.word	0x03d09000
 8008c04:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8008c08:	4ba1      	ldr	r3, [pc, #644]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c14:	d10b      	bne.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8008c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c1c:	d107      	bne.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c1e:	f107 0314 	add.w	r3, r7, #20
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe fd1c 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c2c:	e047      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8008c2e:	4b98      	ldr	r3, [pc, #608]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c3a:	d10b      	bne.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c42:	d107      	bne.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c44:	f107 0308 	add.w	r3, r7, #8
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fe fe75 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c52:	e034      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8008c54:	4b8e      	ldr	r3, [pc, #568]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0302 	and.w	r3, r3, #2
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d10d      	bne.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8008c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c62:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008c66:	d109      	bne.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c68:	4b89      	ldr	r3, [pc, #548]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	08db      	lsrs	r3, r3, #3
 8008c6e:	f003 0303 	and.w	r3, r3, #3
 8008c72:	4a88      	ldr	r2, [pc, #544]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008c74:	fa22 f303 	lsr.w	r3, r2, r3
 8008c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c7a:	e020      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8008c7c:	4b84      	ldr	r3, [pc, #528]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c88:	d106      	bne.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c90:	d102      	bne.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8008c92:	4b81      	ldr	r3, [pc, #516]	@ (8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c96:	e012      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8008c98:	4b7d      	ldr	r3, [pc, #500]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d107      	bne.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008cac:	d103      	bne.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8008cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cb4:	e003      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cba:	f001 baf4 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008cbe:	f001 baf2 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8008cc2:	4b73      	ldr	r3, [pc, #460]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008cc4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008cc8:	f003 0307 	and.w	r3, r3, #7
 8008ccc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8008cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d104      	bne.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008cd4:	f7fc fb8c 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 8008cd8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8008cda:	f001 bae4 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8008cde:	4b6c      	ldr	r3, [pc, #432]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ce6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cea:	d10a      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8008cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d107      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cf2:	f107 0314 	add.w	r3, r7, #20
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fe fcb2 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d00:	e043      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8008d02:	4b63      	ldr	r3, [pc, #396]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d0e:	d10a      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8008d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d107      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d16:	f107 0308 	add.w	r3, r7, #8
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fe fe0c 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d24:	e031      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8008d26:	4b5a      	ldr	r3, [pc, #360]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d10c      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8008d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	d109      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d38:	4b55      	ldr	r3, [pc, #340]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	08db      	lsrs	r3, r3, #3
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	4a54      	ldr	r2, [pc, #336]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008d44:	fa22 f303 	lsr.w	r3, r2, r3
 8008d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d4a:	e01e      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8008d4c:	4b50      	ldr	r3, [pc, #320]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d58:	d105      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	d102      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8008d60:	4b4d      	ldr	r3, [pc, #308]	@ (8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d64:	e011      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8008d66:	4b4a      	ldr	r3, [pc, #296]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d106      	bne.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8008d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d76:	2b05      	cmp	r3, #5
 8008d78:	d103      	bne.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8008d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d80:	e003      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8008d82:	2300      	movs	r3, #0
 8008d84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d86:	f001 ba8e 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d8a:	f001 ba8c 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8008d8e:	4b40      	ldr	r3, [pc, #256]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d90:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008d94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d98:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d104      	bne.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008da0:	f7fc fb26 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 8008da4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8008da6:	f001 ba7e 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8008daa:	4b39      	ldr	r3, [pc, #228]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008db2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008db6:	d10a      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8008db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dba:	2b10      	cmp	r3, #16
 8008dbc:	d107      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dbe:	f107 0314 	add.w	r3, r7, #20
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fe fc4c 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dcc:	e043      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8008dce:	4b30      	ldr	r3, [pc, #192]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008dd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dda:	d10a      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dde:	2b20      	cmp	r3, #32
 8008de0:	d107      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008de2:	f107 0308 	add.w	r3, r7, #8
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe fda6 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8008df0:	e031      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8008df2:	4b27      	ldr	r3, [pc, #156]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d10c      	bne.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e00:	2b30      	cmp	r3, #48	@ 0x30
 8008e02:	d109      	bne.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e04:	4b22      	ldr	r3, [pc, #136]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	08db      	lsrs	r3, r3, #3
 8008e0a:	f003 0303 	and.w	r3, r3, #3
 8008e0e:	4a21      	ldr	r2, [pc, #132]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008e10:	fa22 f303 	lsr.w	r3, r2, r3
 8008e14:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e16:	e01e      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8008e18:	4b1d      	ldr	r3, [pc, #116]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e24:	d105      	bne.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8008e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e28:	2b40      	cmp	r3, #64	@ 0x40
 8008e2a:	d102      	bne.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8008e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e30:	e011      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8008e32:	4b17      	ldr	r3, [pc, #92]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e38:	f003 0302 	and.w	r3, r3, #2
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d106      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8008e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e42:	2b50      	cmp	r3, #80	@ 0x50
 8008e44:	d103      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8008e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e4c:	e003      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e52:	f001 ba28 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e56:	f001 ba26 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e60:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008e64:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d104      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008e6c:	f7fc faec 	bl	8005448 <HAL_RCC_GetPCLK3Freq>
 8008e70:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e72:	f001 ba18 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e7c:	d10e      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e7e:	f107 0314 	add.w	r3, r7, #20
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe fbec 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e8c:	f001 ba0b 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e90:	44020c00 	.word	0x44020c00
 8008e94:	03d09000 	.word	0x03d09000
 8008e98:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ea2:	d108      	bne.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ea4:	f107 0308 	add.w	r3, r7, #8
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fe fd45 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008eb2:	f001 b9f8 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008eb6:	4ba4      	ldr	r3, [pc, #656]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d10d      	bne.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008ec8:	d109      	bne.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008eca:	4b9f      	ldr	r3, [pc, #636]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	08db      	lsrs	r3, r3, #3
 8008ed0:	f003 0303 	and.w	r3, r3, #3
 8008ed4:	4a9d      	ldr	r2, [pc, #628]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8008edc:	e020      	b.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008ede:	4b9a      	ldr	r3, [pc, #616]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eea:	d106      	bne.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8008eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ef2:	d102      	bne.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8008ef4:	4b96      	ldr	r3, [pc, #600]	@ (8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ef8:	e012      	b.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008efa:	4b93      	ldr	r3, [pc, #588]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d107      	bne.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8008f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008f0e:	d103      	bne.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8008f10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f16:	e003      	b.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f1c:	f001 b9c3 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f20:	f001 b9c1 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008f24:	4b88      	ldr	r3, [pc, #544]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008f26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f2a:	f003 0307 	and.w	r3, r3, #7
 8008f2e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d104      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008f36:	f7fc fa3f 	bl	80053b8 <HAL_RCC_GetHCLKFreq>
 8008f3a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008f3c:	f001 b9b3 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d104      	bne.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f46:	f7fc f90b 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 8008f4a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008f4c:	f001 b9ab 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d108      	bne.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f56:	f107 0314 	add.w	r3, r7, #20
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fe fb80 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f64:	f001 b99f 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008f68:	4b77      	ldr	r3, [pc, #476]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f74:	d105      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d102      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8008f7c:	4b75      	ldr	r3, [pc, #468]	@ (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8008f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f80:	e023      	b.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008f82:	4b71      	ldr	r3, [pc, #452]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0302 	and.w	r3, r3, #2
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d10c      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d109      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f94:	4b6c      	ldr	r3, [pc, #432]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	08db      	lsrs	r3, r3, #3
 8008f9a:	f003 0303 	and.w	r3, r3, #3
 8008f9e:	4a6b      	ldr	r2, [pc, #428]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa6:	e010      	b.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008fa8:	4b67      	ldr	r3, [pc, #412]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fb4:	d105      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	2b05      	cmp	r3, #5
 8008fba:	d102      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008fbc:	4b64      	ldr	r3, [pc, #400]	@ (8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fc0:	e003      	b.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fc6:	f001 b96e 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fca:	f001 b96c 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008fce:	4b5e      	ldr	r3, [pc, #376]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008fd4:	f003 0308 	and.w	r3, r3, #8
 8008fd8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008fda:	4b5b      	ldr	r3, [pc, #364]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d106      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8008fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d103      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8008fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ff4:	e012      	b.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008ff6:	4b54      	ldr	r3, [pc, #336]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ffc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009000:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009004:	d106      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8009006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009008:	2b08      	cmp	r3, #8
 800900a:	d103      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800900c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009010:	637b      	str	r3, [r7, #52]	@ 0x34
 8009012:	e003      	b.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8009014:	2300      	movs	r3, #0
 8009016:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009018:	f001 b945 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800901c:	f001 b943 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009020:	4b49      	ldr	r3, [pc, #292]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009022:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009026:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800902a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800902c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902e:	2b00      	cmp	r3, #0
 8009030:	d104      	bne.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009032:	f7fc f9dd 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 8009036:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009038:	f001 b935 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800903c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009042:	d108      	bne.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009044:	f107 0308 	add.w	r3, r7, #8
 8009048:	4618      	mov	r0, r3
 800904a:	f7fe fc75 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009052:	f001 b928 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009056:	4b3c      	ldr	r3, [pc, #240]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0302 	and.w	r3, r3, #2
 800905e:	2b02      	cmp	r3, #2
 8009060:	d10d      	bne.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8009062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009064:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009068:	d109      	bne.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800906a:	4b37      	ldr	r3, [pc, #220]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	08db      	lsrs	r3, r3, #3
 8009070:	f003 0303 	and.w	r3, r3, #3
 8009074:	4a35      	ldr	r2, [pc, #212]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009076:	fa22 f303 	lsr.w	r3, r2, r3
 800907a:	637b      	str	r3, [r7, #52]	@ 0x34
 800907c:	e011      	b.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800907e:	4b32      	ldr	r3, [pc, #200]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800908a:	d106      	bne.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800908c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009092:	d102      	bne.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8009094:	4b2e      	ldr	r3, [pc, #184]	@ (8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009096:	637b      	str	r3, [r7, #52]	@ 0x34
 8009098:	e003      	b.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800909a:	2300      	movs	r3, #0
 800909c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800909e:	f001 b902 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80090a2:	f001 b900 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80090a6:	4b28      	ldr	r3, [pc, #160]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80090a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090ac:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80090b0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80090b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d104      	bne.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80090b8:	f7fc f99a 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 80090bc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80090be:	f001 b8f2 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090c8:	d108      	bne.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ca:	f107 0308 	add.w	r3, r7, #8
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fe fc32 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090d8:	f001 b8e5 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80090dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 0302 	and.w	r3, r3, #2
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d10d      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 80090e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80090ee:	d109      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090f0:	4b15      	ldr	r3, [pc, #84]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	08db      	lsrs	r3, r3, #3
 80090f6:	f003 0303 	and.w	r3, r3, #3
 80090fa:	4a14      	ldr	r2, [pc, #80]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80090fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009100:	637b      	str	r3, [r7, #52]	@ 0x34
 8009102:	e011      	b.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8009104:	4b10      	ldr	r3, [pc, #64]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800910c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009110:	d106      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009118:	d102      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800911a:	4b0d      	ldr	r3, [pc, #52]	@ (8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800911c:	637b      	str	r3, [r7, #52]	@ 0x34
 800911e:	e003      	b.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009124:	f001 b8bf 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009128:	f001 b8bd 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800912c:	4b06      	ldr	r3, [pc, #24]	@ (8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800912e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009132:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009136:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8009138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10c      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800913e:	f7fc f983 	bl	8005448 <HAL_RCC_GetPCLK3Freq>
 8009142:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009144:	f001 b8af 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009148:	44020c00 	.word	0x44020c00
 800914c:	03d09000 	.word	0x03d09000
 8009150:	003d0900 	.word	0x003d0900
 8009154:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8009158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800915e:	d108      	bne.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009160:	f107 0308 	add.w	r3, r7, #8
 8009164:	4618      	mov	r0, r3
 8009166:	f7fe fbe7 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800916e:	f001 b89a 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8009172:	4b9f      	ldr	r3, [pc, #636]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 0302 	and.w	r3, r3, #2
 800917a:	2b02      	cmp	r3, #2
 800917c:	d10d      	bne.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800917e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009180:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009184:	d109      	bne.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009186:	4b9a      	ldr	r3, [pc, #616]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	08db      	lsrs	r3, r3, #3
 800918c:	f003 0303 	and.w	r3, r3, #3
 8009190:	4a98      	ldr	r2, [pc, #608]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009192:	fa22 f303 	lsr.w	r3, r2, r3
 8009196:	637b      	str	r3, [r7, #52]	@ 0x34
 8009198:	e011      	b.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800919a:	4b95      	ldr	r3, [pc, #596]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091a6:	d106      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 80091a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80091ae:	d102      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 80091b0:	4b91      	ldr	r3, [pc, #580]	@ (80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80091b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80091b4:	e003      	b.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 80091b6:	2300      	movs	r3, #0
 80091b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091ba:	f001 b874 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80091be:	f001 b872 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80091c2:	4b8b      	ldr	r3, [pc, #556]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80091c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80091c8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80091cc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80091ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d104      	bne.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80091d4:	f7fc f938 	bl	8005448 <HAL_RCC_GetPCLK3Freq>
 80091d8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80091da:	f001 b864 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80091de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091e4:	d108      	bne.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091e6:	f107 0308 	add.w	r3, r7, #8
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fe fba4 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091f4:	f001 b857 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80091f8:	4b7d      	ldr	r3, [pc, #500]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0302 	and.w	r3, r3, #2
 8009200:	2b02      	cmp	r3, #2
 8009202:	d10d      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8009204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009206:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800920a:	d109      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800920c:	4b78      	ldr	r3, [pc, #480]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	08db      	lsrs	r3, r3, #3
 8009212:	f003 0303 	and.w	r3, r3, #3
 8009216:	4a77      	ldr	r2, [pc, #476]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009218:	fa22 f303 	lsr.w	r3, r2, r3
 800921c:	637b      	str	r3, [r7, #52]	@ 0x34
 800921e:	e011      	b.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8009220:	4b73      	ldr	r3, [pc, #460]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800922c:	d106      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800922e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009230:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009234:	d102      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8009236:	4b70      	ldr	r3, [pc, #448]	@ (80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009238:	637b      	str	r3, [r7, #52]	@ 0x34
 800923a:	e003      	b.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800923c:	2300      	movs	r3, #0
 800923e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009240:	f001 b831 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009244:	f001 b82f 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8009248:	4b69      	ldr	r3, [pc, #420]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800924a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800924e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009252:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8009254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009256:	2b00      	cmp	r3, #0
 8009258:	d104      	bne.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800925a:	f7fc f8c9 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 800925e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009260:	f001 b821 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8009264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009266:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800926a:	d108      	bne.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800926c:	f107 0308 	add.w	r3, r7, #8
 8009270:	4618      	mov	r0, r3
 8009272:	f7fe fb61 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800927a:	f001 b814 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800927e:	4b5c      	ldr	r3, [pc, #368]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0302 	and.w	r3, r3, #2
 8009286:	2b02      	cmp	r3, #2
 8009288:	d10e      	bne.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800928a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009290:	d10a      	bne.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009292:	4b57      	ldr	r3, [pc, #348]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	08db      	lsrs	r3, r3, #3
 8009298:	f003 0303 	and.w	r3, r3, #3
 800929c:	4a55      	ldr	r2, [pc, #340]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800929e:	fa22 f303 	lsr.w	r3, r2, r3
 80092a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092a4:	f000 bfff 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80092a8:	2300      	movs	r3, #0
 80092aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092ac:	f000 bffb 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80092b0:	4b4f      	ldr	r3, [pc, #316]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80092b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80092b6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80092ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80092bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092be:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80092c2:	d056      	beq.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80092c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80092ca:	f200 808b 	bhi.w	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80092ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092d4:	d03e      	beq.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80092d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092dc:	f200 8082 	bhi.w	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80092e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092e6:	d027      	beq.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 80092e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092ee:	d879      	bhi.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80092f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092f6:	d017      	beq.n	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80092f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092fe:	d871      	bhi.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009302:	2b00      	cmp	r3, #0
 8009304:	d004      	beq.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8009306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009308:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800930c:	d004      	beq.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800930e:	e069      	b.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009310:	f7fc f89a 	bl	8005448 <HAL_RCC_GetPCLK3Freq>
 8009314:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009316:	e068      	b.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009318:	f107 0314 	add.w	r3, r7, #20
 800931c:	4618      	mov	r0, r3
 800931e:	f7fe f99f 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009326:	e060      	b.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009328:	f107 0308 	add.w	r3, r7, #8
 800932c:	4618      	mov	r0, r3
 800932e:	f7fe fb03 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009336:	e058      	b.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009338:	4b2d      	ldr	r3, [pc, #180]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800933a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800933e:	f003 0302 	and.w	r3, r3, #2
 8009342:	2b02      	cmp	r3, #2
 8009344:	d103      	bne.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8009346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800934a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800934c:	e04d      	b.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009352:	e04a      	b.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009354:	4b26      	ldr	r3, [pc, #152]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009356:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800935a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800935e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009362:	d103      	bne.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8009364:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009368:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800936a:	e03e      	b.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800936c:	2300      	movs	r3, #0
 800936e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009370:	e03b      	b.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009372:	4b1f      	ldr	r3, [pc, #124]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009378:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800937c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800937e:	4b1c      	ldr	r3, [pc, #112]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 0302 	and.w	r3, r3, #2
 8009386:	2b02      	cmp	r3, #2
 8009388:	d10c      	bne.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800938a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800938c:	2b00      	cmp	r3, #0
 800938e:	d109      	bne.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009390:	4b17      	ldr	r3, [pc, #92]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	08db      	lsrs	r3, r3, #3
 8009396:	f003 0303 	and.w	r3, r3, #3
 800939a:	4a16      	ldr	r2, [pc, #88]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800939c:	fa22 f303 	lsr.w	r3, r2, r3
 80093a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a2:	e01e      	b.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093a4:	4b12      	ldr	r3, [pc, #72]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093b0:	d106      	bne.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 80093b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093b8:	d102      	bne.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80093ba:	4b0f      	ldr	r3, [pc, #60]	@ (80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80093bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80093be:	e010      	b.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093c0:	4b0b      	ldr	r3, [pc, #44]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093cc:	d106      	bne.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80093ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093d4:	d102      	bne.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80093d6:	4b09      	ldr	r3, [pc, #36]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80093d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093da:	e002      	b.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80093dc:	2300      	movs	r3, #0
 80093de:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80093e0:	e003      	b.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 80093e2:	e002      	b.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 80093e4:	2300      	movs	r3, #0
 80093e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093e8:	bf00      	nop
          }
        }
        break;
 80093ea:	f000 bf5c 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80093ee:	bf00      	nop
 80093f0:	44020c00 	.word	0x44020c00
 80093f4:	03d09000 	.word	0x03d09000
 80093f8:	003d0900 	.word	0x003d0900
 80093fc:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009400:	4b9e      	ldr	r3, [pc, #632]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009402:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009406:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800940a:	633b      	str	r3, [r7, #48]	@ 0x30
 800940c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009412:	d056      	beq.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8009414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009416:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800941a:	f200 808b 	bhi.w	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800941e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009420:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009424:	d03e      	beq.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8009426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800942c:	f200 8082 	bhi.w	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009432:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009436:	d027      	beq.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8009438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800943e:	d879      	bhi.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009446:	d017      	beq.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8009448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800944e:	d871      	bhi.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009452:	2b00      	cmp	r3, #0
 8009454:	d004      	beq.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8009456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800945c:	d004      	beq.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800945e:	e069      	b.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8009460:	f7fb ffc6 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 8009464:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009466:	e068      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009468:	f107 0314 	add.w	r3, r7, #20
 800946c:	4618      	mov	r0, r3
 800946e:	f7fe f8f7 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009476:	e060      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009478:	f107 0308 	add.w	r3, r7, #8
 800947c:	4618      	mov	r0, r3
 800947e:	f7fe fa5b 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009486:	e058      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009488:	4b7c      	ldr	r3, [pc, #496]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800948a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b02      	cmp	r3, #2
 8009494:	d103      	bne.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8009496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800949a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800949c:	e04d      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800949e:	2300      	movs	r3, #0
 80094a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094a2:	e04a      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80094a4:	4b75      	ldr	r3, [pc, #468]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80094a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094b2:	d103      	bne.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80094b4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80094b8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80094ba:	e03e      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80094bc:	2300      	movs	r3, #0
 80094be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094c0:	e03b      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094c2:	4b6e      	ldr	r3, [pc, #440]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80094c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80094c8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80094cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094ce:	4b6b      	ldr	r3, [pc, #428]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0302 	and.w	r3, r3, #2
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d10c      	bne.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80094da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d109      	bne.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094e0:	4b66      	ldr	r3, [pc, #408]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	08db      	lsrs	r3, r3, #3
 80094e6:	f003 0303 	and.w	r3, r3, #3
 80094ea:	4a65      	ldr	r2, [pc, #404]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80094ec:	fa22 f303 	lsr.w	r3, r2, r3
 80094f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80094f2:	e01e      	b.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094f4:	4b61      	ldr	r3, [pc, #388]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009500:	d106      	bne.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8009502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009508:	d102      	bne.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800950a:	4b5e      	ldr	r3, [pc, #376]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800950c:	637b      	str	r3, [r7, #52]	@ 0x34
 800950e:	e010      	b.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009510:	4b5a      	ldr	r3, [pc, #360]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800951c:	d106      	bne.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800951e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009520:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009524:	d102      	bne.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009526:	4b58      	ldr	r3, [pc, #352]	@ (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009528:	637b      	str	r3, [r7, #52]	@ 0x34
 800952a:	e002      	b.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800952c:	2300      	movs	r3, #0
 800952e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009530:	e003      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8009532:	e002      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8009534:	2300      	movs	r3, #0
 8009536:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009538:	bf00      	nop
          }
        }
        break;
 800953a:	f000 beb4 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800953e:	4b4f      	ldr	r3, [pc, #316]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009540:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009544:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009548:	633b      	str	r3, [r7, #48]	@ 0x30
 800954a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009550:	d056      	beq.n	8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009558:	f200 808b 	bhi.w	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800955c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009562:	d03e      	beq.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8009564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009566:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800956a:	f200 8082 	bhi.w	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800956e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009570:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009574:	d027      	beq.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8009576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009578:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800957c:	d879      	bhi.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800957e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009584:	d017      	beq.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8009586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009588:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800958c:	d871      	bhi.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800958e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009590:	2b00      	cmp	r3, #0
 8009592:	d004      	beq.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8009594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009596:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800959a:	d004      	beq.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800959c:	e069      	b.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800959e:	f7fb ff53 	bl	8005448 <HAL_RCC_GetPCLK3Freq>
 80095a2:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80095a4:	e068      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095a6:	f107 0314 	add.w	r3, r7, #20
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe f858 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095b4:	e060      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095b6:	f107 0308 	add.w	r3, r7, #8
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fe f9bc 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095c4:	e058      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80095c6:	4b2d      	ldr	r3, [pc, #180]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80095c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095cc:	f003 0302 	and.w	r3, r3, #2
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d103      	bne.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80095d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095d8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80095da:	e04d      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80095dc:	2300      	movs	r3, #0
 80095de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095e0:	e04a      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80095e2:	4b26      	ldr	r3, [pc, #152]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80095e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095f0:	d103      	bne.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80095f2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80095f6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80095f8:	e03e      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80095fa:	2300      	movs	r3, #0
 80095fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095fe:	e03b      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009600:	4b1e      	ldr	r3, [pc, #120]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009602:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009606:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800960a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800960c:	4b1b      	ldr	r3, [pc, #108]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0302 	and.w	r3, r3, #2
 8009614:	2b02      	cmp	r3, #2
 8009616:	d10c      	bne.n	8009632 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8009618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800961a:	2b00      	cmp	r3, #0
 800961c:	d109      	bne.n	8009632 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800961e:	4b17      	ldr	r3, [pc, #92]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	08db      	lsrs	r3, r3, #3
 8009624:	f003 0303 	and.w	r3, r3, #3
 8009628:	4a15      	ldr	r2, [pc, #84]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800962a:	fa22 f303 	lsr.w	r3, r2, r3
 800962e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009630:	e01e      	b.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009632:	4b12      	ldr	r3, [pc, #72]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800963a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800963e:	d106      	bne.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8009640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009646:	d102      	bne.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009648:	4b0e      	ldr	r3, [pc, #56]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800964a:	637b      	str	r3, [r7, #52]	@ 0x34
 800964c:	e010      	b.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800964e:	4b0b      	ldr	r3, [pc, #44]	@ (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009656:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800965a:	d106      	bne.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800965c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800965e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009662:	d102      	bne.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009664:	4b08      	ldr	r3, [pc, #32]	@ (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009666:	637b      	str	r3, [r7, #52]	@ 0x34
 8009668:	e002      	b.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800966e:	e003      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8009670:	e002      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8009672:	2300      	movs	r3, #0
 8009674:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009676:	bf00      	nop
          }
        }
        break;
 8009678:	f000 be15 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800967c:	44020c00 	.word	0x44020c00
 8009680:	03d09000 	.word	0x03d09000
 8009684:	003d0900 	.word	0x003d0900
 8009688:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800968c:	4b9e      	ldr	r3, [pc, #632]	@ (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800968e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009692:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8009696:	633b      	str	r3, [r7, #48]	@ 0x30
 8009698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800969e:	d056      	beq.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 80096a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80096a6:	f200 808b 	bhi.w	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80096aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096b0:	d03e      	beq.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80096b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096b8:	f200 8082 	bhi.w	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80096bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80096c2:	d027      	beq.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80096c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80096ca:	d879      	bhi.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80096cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096d2:	d017      	beq.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80096d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096da:	d871      	bhi.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80096dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d004      	beq.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80096e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096e8:	d004      	beq.n	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80096ea:	e069      	b.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80096ec:	f7fb feac 	bl	8005448 <HAL_RCC_GetPCLK3Freq>
 80096f0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80096f2:	e068      	b.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096f4:	f107 0314 	add.w	r3, r7, #20
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fd ffb1 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009702:	e060      	b.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009704:	f107 0308 	add.w	r3, r7, #8
 8009708:	4618      	mov	r0, r3
 800970a:	f7fe f915 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009712:	e058      	b.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009714:	4b7c      	ldr	r3, [pc, #496]	@ (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009716:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800971a:	f003 0302 	and.w	r3, r3, #2
 800971e:	2b02      	cmp	r3, #2
 8009720:	d103      	bne.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8009722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009726:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009728:	e04d      	b.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800972e:	e04a      	b.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009730:	4b75      	ldr	r3, [pc, #468]	@ (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800973a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800973e:	d103      	bne.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8009740:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009744:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009746:	e03e      	b.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009748:	2300      	movs	r3, #0
 800974a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800974c:	e03b      	b.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800974e:	4b6e      	ldr	r3, [pc, #440]	@ (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009754:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009758:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800975a:	4b6b      	ldr	r3, [pc, #428]	@ (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 0302 	and.w	r3, r3, #2
 8009762:	2b02      	cmp	r3, #2
 8009764:	d10c      	bne.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8009766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009768:	2b00      	cmp	r3, #0
 800976a:	d109      	bne.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800976c:	4b66      	ldr	r3, [pc, #408]	@ (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	08db      	lsrs	r3, r3, #3
 8009772:	f003 0303 	and.w	r3, r3, #3
 8009776:	4a65      	ldr	r2, [pc, #404]	@ (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009778:	fa22 f303 	lsr.w	r3, r2, r3
 800977c:	637b      	str	r3, [r7, #52]	@ 0x34
 800977e:	e01e      	b.n	80097be <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009780:	4b61      	ldr	r3, [pc, #388]	@ (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800978c:	d106      	bne.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800978e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009794:	d102      	bne.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009796:	4b5e      	ldr	r3, [pc, #376]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009798:	637b      	str	r3, [r7, #52]	@ 0x34
 800979a:	e010      	b.n	80097be <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800979c:	4b5a      	ldr	r3, [pc, #360]	@ (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097a8:	d106      	bne.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 80097aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097b0:	d102      	bne.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80097b2:	4b58      	ldr	r3, [pc, #352]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80097b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80097b6:	e002      	b.n	80097be <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80097b8:	2300      	movs	r3, #0
 80097ba:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80097bc:	e003      	b.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80097be:	e002      	b.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80097c0:	2300      	movs	r3, #0
 80097c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097c4:	bf00      	nop
          }
        }
        break;
 80097c6:	f000 bd6e 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80097ca:	4b4f      	ldr	r3, [pc, #316]	@ (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80097cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80097d0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80097d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80097d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80097dc:	d056      	beq.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80097de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80097e4:	f200 808b 	bhi.w	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80097e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097ee:	d03e      	beq.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80097f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097f6:	f200 8082 	bhi.w	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80097fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009800:	d027      	beq.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8009802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009804:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009808:	d879      	bhi.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800980a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009810:	d017      	beq.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8009812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009814:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009818:	d871      	bhi.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800981a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981c:	2b00      	cmp	r3, #0
 800981e:	d004      	beq.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8009820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009822:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009826:	d004      	beq.n	8009832 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8009828:	e069      	b.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800982a:	f7fb fe0d 	bl	8005448 <HAL_RCC_GetPCLK3Freq>
 800982e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009830:	e068      	b.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009832:	f107 0314 	add.w	r3, r7, #20
 8009836:	4618      	mov	r0, r3
 8009838:	f7fd ff12 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009840:	e060      	b.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009842:	f107 0308 	add.w	r3, r7, #8
 8009846:	4618      	mov	r0, r3
 8009848:	f7fe f876 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009850:	e058      	b.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009852:	4b2d      	ldr	r3, [pc, #180]	@ (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009858:	f003 0302 	and.w	r3, r3, #2
 800985c:	2b02      	cmp	r3, #2
 800985e:	d103      	bne.n	8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8009860:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009864:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009866:	e04d      	b.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009868:	2300      	movs	r3, #0
 800986a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800986c:	e04a      	b.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800986e:	4b26      	ldr	r3, [pc, #152]	@ (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009878:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800987c:	d103      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800987e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009882:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009884:	e03e      	b.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800988a:	e03b      	b.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800988c:	4b1e      	ldr	r3, [pc, #120]	@ (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800988e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009892:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009896:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009898:	4b1b      	ldr	r3, [pc, #108]	@ (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 0302 	and.w	r3, r3, #2
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d10c      	bne.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 80098a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d109      	bne.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80098aa:	4b17      	ldr	r3, [pc, #92]	@ (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	08db      	lsrs	r3, r3, #3
 80098b0:	f003 0303 	and.w	r3, r3, #3
 80098b4:	4a15      	ldr	r2, [pc, #84]	@ (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80098b6:	fa22 f303 	lsr.w	r3, r2, r3
 80098ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80098bc:	e01e      	b.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098be:	4b12      	ldr	r3, [pc, #72]	@ (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098ca:	d106      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80098cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098d2:	d102      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80098d4:	4b0e      	ldr	r3, [pc, #56]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80098d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80098d8:	e010      	b.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098da:	4b0b      	ldr	r3, [pc, #44]	@ (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098e6:	d106      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80098e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098ee:	d102      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80098f0:	4b08      	ldr	r3, [pc, #32]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80098f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098f4:	e002      	b.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80098fa:	e003      	b.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80098fc:	e002      	b.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80098fe:	2300      	movs	r3, #0
 8009900:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009902:	bf00      	nop
          }
        }
        break;
 8009904:	f000 bccf 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009908:	44020c00 	.word	0x44020c00
 800990c:	03d09000 	.word	0x03d09000
 8009910:	003d0900 	.word	0x003d0900
 8009914:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8009918:	4b9e      	ldr	r3, [pc, #632]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800991a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800991e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009922:	633b      	str	r3, [r7, #48]	@ 0x30
 8009924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009926:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800992a:	d056      	beq.n	80099da <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800992c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009932:	f200 808b 	bhi.w	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800993c:	d03e      	beq.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800993e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009944:	f200 8082 	bhi.w	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800994e:	d027      	beq.n	80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8009950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009952:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009956:	d879      	bhi.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800995e:	d017      	beq.n	8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8009960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009966:	d871      	bhi.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996a:	2b00      	cmp	r3, #0
 800996c:	d004      	beq.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800996e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009970:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009974:	d004      	beq.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8009976:	e069      	b.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009978:	f7fb fd66 	bl	8005448 <HAL_RCC_GetPCLK3Freq>
 800997c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800997e:	e068      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009980:	f107 0314 	add.w	r3, r7, #20
 8009984:	4618      	mov	r0, r3
 8009986:	f7fd fe6b 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800998e:	e060      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009990:	f107 0308 	add.w	r3, r7, #8
 8009994:	4618      	mov	r0, r3
 8009996:	f7fd ffcf 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800999e:	e058      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80099a0:	4b7c      	ldr	r3, [pc, #496]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80099a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099a6:	f003 0302 	and.w	r3, r3, #2
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d103      	bne.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80099ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099b2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80099b4:	e04d      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099ba:	e04a      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80099bc:	4b75      	ldr	r3, [pc, #468]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80099be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099ca:	d103      	bne.n	80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80099cc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80099d0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80099d2:	e03e      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099d8:	e03b      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099da:	4b6e      	ldr	r3, [pc, #440]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80099dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80099e0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80099e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099e6:	4b6b      	ldr	r3, [pc, #428]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0302 	and.w	r3, r3, #2
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d10c      	bne.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80099f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d109      	bne.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80099f8:	4b66      	ldr	r3, [pc, #408]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	08db      	lsrs	r3, r3, #3
 80099fe:	f003 0303 	and.w	r3, r3, #3
 8009a02:	4a65      	ldr	r2, [pc, #404]	@ (8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009a04:	fa22 f303 	lsr.w	r3, r2, r3
 8009a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a0a:	e01e      	b.n	8009a4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a0c:	4b61      	ldr	r3, [pc, #388]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a18:	d106      	bne.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8009a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a20:	d102      	bne.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009a22:	4b5e      	ldr	r3, [pc, #376]	@ (8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a26:	e010      	b.n	8009a4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a28:	4b5a      	ldr	r3, [pc, #360]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a34:	d106      	bne.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8009a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a3c:	d102      	bne.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009a3e:	4b58      	ldr	r3, [pc, #352]	@ (8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a42:	e002      	b.n	8009a4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009a44:	2300      	movs	r3, #0
 8009a46:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009a48:	e003      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8009a4a:	e002      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a50:	bf00      	nop
          }
        }
        break;
 8009a52:	f000 bc28 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009a56:	4b4f      	ldr	r3, [pc, #316]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a60:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009a62:	4b4c      	ldr	r3, [pc, #304]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a6e:	d106      	bne.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d103      	bne.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8009a76:	4b4a      	ldr	r3, [pc, #296]	@ (8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009a78:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009a7a:	f000 bc14 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a84:	d108      	bne.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a86:	f107 0320 	add.w	r3, r7, #32
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fd fc7c 	bl	8007388 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a94:	f000 bc07 	b.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a9e:	d107      	bne.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aa0:	f107 0314 	add.w	r3, r7, #20
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fd fddb 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009aae:	e3fa      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ab4:	e3f7      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009ab6:	4b37      	ldr	r3, [pc, #220]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009abc:	f003 0307 	and.w	r3, r3, #7
 8009ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac4:	2b04      	cmp	r3, #4
 8009ac6:	d861      	bhi.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8009aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ace:	bf00      	nop
 8009ad0:	08009ae5 	.word	0x08009ae5
 8009ad4:	08009af5 	.word	0x08009af5
 8009ad8:	08009b05 	.word	0x08009b05
 8009adc:	08009b15 	.word	0x08009b15
 8009ae0:	08009b1b 	.word	0x08009b1b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ae4:	f107 0320 	add.w	r3, r7, #32
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fd fc4d 	bl	8007388 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009af2:	e04e      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009af4:	f107 0314 	add.w	r3, r7, #20
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7fd fdb1 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b02:	e046      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b04:	f107 0308 	add.w	r3, r7, #8
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fd ff15 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b12:	e03e      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009b14:	4b23      	ldr	r3, [pc, #140]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8009b16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b18:	e03b      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b20:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009b24:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b26:	4b1b      	ldr	r3, [pc, #108]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d10c      	bne.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8009b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d109      	bne.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b38:	4b16      	ldr	r3, [pc, #88]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	08db      	lsrs	r3, r3, #3
 8009b3e:	f003 0303 	and.w	r3, r3, #3
 8009b42:	4a15      	ldr	r2, [pc, #84]	@ (8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009b44:	fa22 f303 	lsr.w	r3, r2, r3
 8009b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b4a:	e01e      	b.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b4c:	4b11      	ldr	r3, [pc, #68]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b58:	d106      	bne.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8009b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b60:	d102      	bne.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009b62:	4b0e      	ldr	r3, [pc, #56]	@ (8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b66:	e010      	b.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b68:	4b0a      	ldr	r3, [pc, #40]	@ (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b74:	d106      	bne.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8009b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b7c:	d102      	bne.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009b7e:	4b08      	ldr	r3, [pc, #32]	@ (8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b82:	e002      	b.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009b84:	2300      	movs	r3, #0
 8009b86:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009b88:	e003      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8009b8a:	e002      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b90:	bf00      	nop
          }
        }
        break;
 8009b92:	e388      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009b94:	44020c00 	.word	0x44020c00
 8009b98:	03d09000 	.word	0x03d09000
 8009b9c:	003d0900 	.word	0x003d0900
 8009ba0:	007a1200 	.word	0x007a1200
 8009ba4:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009ba8:	4ba9      	ldr	r3, [pc, #676]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009bae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009bb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb6:	2b20      	cmp	r3, #32
 8009bb8:	f200 809a 	bhi.w	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8009bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc2:	bf00      	nop
 8009bc4:	08009c49 	.word	0x08009c49
 8009bc8:	08009cf1 	.word	0x08009cf1
 8009bcc:	08009cf1 	.word	0x08009cf1
 8009bd0:	08009cf1 	.word	0x08009cf1
 8009bd4:	08009cf1 	.word	0x08009cf1
 8009bd8:	08009cf1 	.word	0x08009cf1
 8009bdc:	08009cf1 	.word	0x08009cf1
 8009be0:	08009cf1 	.word	0x08009cf1
 8009be4:	08009c59 	.word	0x08009c59
 8009be8:	08009cf1 	.word	0x08009cf1
 8009bec:	08009cf1 	.word	0x08009cf1
 8009bf0:	08009cf1 	.word	0x08009cf1
 8009bf4:	08009cf1 	.word	0x08009cf1
 8009bf8:	08009cf1 	.word	0x08009cf1
 8009bfc:	08009cf1 	.word	0x08009cf1
 8009c00:	08009cf1 	.word	0x08009cf1
 8009c04:	08009c69 	.word	0x08009c69
 8009c08:	08009cf1 	.word	0x08009cf1
 8009c0c:	08009cf1 	.word	0x08009cf1
 8009c10:	08009cf1 	.word	0x08009cf1
 8009c14:	08009cf1 	.word	0x08009cf1
 8009c18:	08009cf1 	.word	0x08009cf1
 8009c1c:	08009cf1 	.word	0x08009cf1
 8009c20:	08009cf1 	.word	0x08009cf1
 8009c24:	08009c79 	.word	0x08009c79
 8009c28:	08009cf1 	.word	0x08009cf1
 8009c2c:	08009cf1 	.word	0x08009cf1
 8009c30:	08009cf1 	.word	0x08009cf1
 8009c34:	08009cf1 	.word	0x08009cf1
 8009c38:	08009cf1 	.word	0x08009cf1
 8009c3c:	08009cf1 	.word	0x08009cf1
 8009c40:	08009cf1 	.word	0x08009cf1
 8009c44:	08009c7f 	.word	0x08009c7f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c48:	f107 0320 	add.w	r3, r7, #32
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7fd fb9b 	bl	8007388 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c56:	e04e      	b.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c58:	f107 0314 	add.w	r3, r7, #20
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fd fcff 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c66:	e046      	b.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c68:	f107 0308 	add.w	r3, r7, #8
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fd fe63 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c76:	e03e      	b.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009c78:	4b76      	ldr	r3, [pc, #472]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009c7a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c7c:	e03b      	b.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c7e:	4b74      	ldr	r3, [pc, #464]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c84:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009c88:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c8a:	4b71      	ldr	r3, [pc, #452]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 0302 	and.w	r3, r3, #2
 8009c92:	2b02      	cmp	r3, #2
 8009c94:	d10c      	bne.n	8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8009c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d109      	bne.n	8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c9c:	4b6c      	ldr	r3, [pc, #432]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	08db      	lsrs	r3, r3, #3
 8009ca2:	f003 0303 	and.w	r3, r3, #3
 8009ca6:	4a6c      	ldr	r2, [pc, #432]	@ (8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cae:	e01e      	b.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cb0:	4b67      	ldr	r3, [pc, #412]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cbc:	d106      	bne.n	8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8009cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cc4:	d102      	bne.n	8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009cc6:	4b65      	ldr	r3, [pc, #404]	@ (8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cca:	e010      	b.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ccc:	4b60      	ldr	r3, [pc, #384]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cd8:	d106      	bne.n	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8009cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ce0:	d102      	bne.n	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009ce2:	4b5f      	ldr	r3, [pc, #380]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ce6:	e002      	b.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009cec:	e003      	b.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8009cee:	e002      	b.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009cf4:	bf00      	nop
          }
        }
        break;
 8009cf6:	e2d6      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009cf8:	4b55      	ldr	r3, [pc, #340]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009cfe:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009d02:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d0a:	d031      	beq.n	8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d12:	d866      	bhi.n	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d16:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d18:	d027      	beq.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1c:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d1e:	d860      	bhi.n	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d22:	2b80      	cmp	r3, #128	@ 0x80
 8009d24:	d019      	beq.n	8009d5a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8009d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d28:	2b80      	cmp	r3, #128	@ 0x80
 8009d2a:	d85a      	bhi.n	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8009d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d34:	2b40      	cmp	r3, #64	@ 0x40
 8009d36:	d008      	beq.n	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8009d38:	e053      	b.n	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d3a:	f107 0320 	add.w	r3, r7, #32
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fd fb22 	bl	8007388 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d46:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d48:	e04e      	b.n	8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d4a:	f107 0314 	add.w	r3, r7, #20
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fd fc86 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d58:	e046      	b.n	8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d5a:	f107 0308 	add.w	r3, r7, #8
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fd fdea 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d68:	e03e      	b.n	8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009d6a:	4b3a      	ldr	r3, [pc, #232]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009d6c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d6e:	e03b      	b.n	8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d70:	4b37      	ldr	r3, [pc, #220]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d76:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d7c:	4b34      	ldr	r3, [pc, #208]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 0302 	and.w	r3, r3, #2
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d10c      	bne.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8009d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d109      	bne.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d8e:	4b30      	ldr	r3, [pc, #192]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	08db      	lsrs	r3, r3, #3
 8009d94:	f003 0303 	and.w	r3, r3, #3
 8009d98:	4a2f      	ldr	r2, [pc, #188]	@ (8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009da0:	e01e      	b.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009da2:	4b2b      	ldr	r3, [pc, #172]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009daa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dae:	d106      	bne.n	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8009db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009db6:	d102      	bne.n	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009db8:	4b28      	ldr	r3, [pc, #160]	@ (8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009dba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dbc:	e010      	b.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009dbe:	4b24      	ldr	r3, [pc, #144]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dca:	d106      	bne.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8009dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009dd2:	d102      	bne.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009dd4:	4b22      	ldr	r3, [pc, #136]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dd8:	e002      	b.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009dde:	e003      	b.n	8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8009de0:	e002      	b.n	8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8009de2:	2300      	movs	r3, #0
 8009de4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009de6:	bf00      	nop
          }
        }
        break;
 8009de8:	e25d      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8009dea:	4b19      	ldr	r3, [pc, #100]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009df0:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009df4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8009df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d103      	bne.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009dfc:	f7fb fb0e 	bl	800541c <HAL_RCC_GetPCLK2Freq>
 8009e00:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009e02:	e250      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009e04:	4b12      	ldr	r3, [pc, #72]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e10:	d10b      	bne.n	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8009e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e18:	d107      	bne.n	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e1a:	f107 0314 	add.w	r3, r7, #20
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fd fc1e 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e28:	e04f      	b.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8009e2a:	4b09      	ldr	r3, [pc, #36]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e36:	d115      	bne.n	8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8009e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e3e:	d111      	bne.n	8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e40:	f107 0308 	add.w	r3, r7, #8
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fd fd77 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e4e:	e03c      	b.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8009e50:	44020c00 	.word	0x44020c00
 8009e54:	00bb8000 	.word	0x00bb8000
 8009e58:	03d09000 	.word	0x03d09000
 8009e5c:	003d0900 	.word	0x003d0900
 8009e60:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009e64:	4b94      	ldr	r3, [pc, #592]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 0302 	and.w	r3, r3, #2
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d10d      	bne.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8009e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e72:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009e76:	d109      	bne.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e78:	4b8f      	ldr	r3, [pc, #572]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	08db      	lsrs	r3, r3, #3
 8009e7e:	f003 0303 	and.w	r3, r3, #3
 8009e82:	4a8e      	ldr	r2, [pc, #568]	@ (800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009e84:	fa22 f303 	lsr.w	r3, r2, r3
 8009e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e8a:	e01e      	b.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009e8c:	4b8a      	ldr	r3, [pc, #552]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e98:	d106      	bne.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ea0:	d102      	bne.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8009ea2:	4b87      	ldr	r3, [pc, #540]	@ (800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ea6:	e010      	b.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009ea8:	4b83      	ldr	r3, [pc, #524]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009eb4:	d106      	bne.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009ebc:	d102      	bne.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8009ebe:	4b81      	ldr	r3, [pc, #516]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ec2:	e002      	b.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ec8:	e1ed      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009eca:	e1ec      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009ecc:	4b7a      	ldr	r3, [pc, #488]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ed2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009ed6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d103      	bne.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009ede:	f7fb fab3 	bl	8005448 <HAL_RCC_GetPCLK3Freq>
 8009ee2:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009ee4:	e1df      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8009ee6:	4b74      	ldr	r3, [pc, #464]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009eee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ef2:	d10b      	bne.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009efa:	d107      	bne.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009efc:	f107 0314 	add.w	r3, r7, #20
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fd fbad 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f0a:	e045      	b.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8009f0c:	4b6a      	ldr	r3, [pc, #424]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f18:	d10b      	bne.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f20:	d107      	bne.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f22:	f107 0308 	add.w	r3, r7, #8
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fd fd06 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f30:	e032      	b.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8009f32:	4b61      	ldr	r3, [pc, #388]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d10d      	bne.n	8009f5a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009f44:	d109      	bne.n	8009f5a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f46:	4b5c      	ldr	r3, [pc, #368]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	08db      	lsrs	r3, r3, #3
 8009f4c:	f003 0303 	and.w	r3, r3, #3
 8009f50:	4a5a      	ldr	r2, [pc, #360]	@ (800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009f52:	fa22 f303 	lsr.w	r3, r2, r3
 8009f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f58:	e01e      	b.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8009f5a:	4b57      	ldr	r3, [pc, #348]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f66:	d106      	bne.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8009f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f6e:	d102      	bne.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8009f70:	4b53      	ldr	r3, [pc, #332]	@ (800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f74:	e010      	b.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8009f76:	4b50      	ldr	r3, [pc, #320]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f82:	d106      	bne.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8009f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f86:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009f8a:	d102      	bne.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8009f8c:	4b4d      	ldr	r3, [pc, #308]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f90:	e002      	b.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8009f92:	2300      	movs	r3, #0
 8009f94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f96:	e186      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f98:	e185      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009f9a:	4b47      	ldr	r3, [pc, #284]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009fa0:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009fa4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d103      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009fac:	f7fb fa36 	bl	800541c <HAL_RCC_GetPCLK2Freq>
 8009fb0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009fb2:	e178      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009fb4:	4b40      	ldr	r3, [pc, #256]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009fc0:	d10b      	bne.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fc8:	d107      	bne.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fca:	f107 0314 	add.w	r3, r7, #20
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fd fb46 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fd8:	e045      	b.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8009fda:	4b37      	ldr	r3, [pc, #220]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fe6:	d10b      	bne.n	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fee:	d107      	bne.n	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ff0:	f107 0308 	add.w	r3, r7, #8
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7fd fc9f 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ffe:	e032      	b.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800a000:	4b2d      	ldr	r3, [pc, #180]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 0302 	and.w	r3, r3, #2
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d10d      	bne.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800a00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a012:	d109      	bne.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a014:	4b28      	ldr	r3, [pc, #160]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	08db      	lsrs	r3, r3, #3
 800a01a:	f003 0303 	and.w	r3, r3, #3
 800a01e:	4a27      	ldr	r2, [pc, #156]	@ (800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a020:	fa22 f303 	lsr.w	r3, r2, r3
 800a024:	637b      	str	r3, [r7, #52]	@ 0x34
 800a026:	e01e      	b.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800a028:	4b23      	ldr	r3, [pc, #140]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a034:	d106      	bne.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800a036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a038:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a03c:	d102      	bne.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800a03e:	4b20      	ldr	r3, [pc, #128]	@ (800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a040:	637b      	str	r3, [r7, #52]	@ 0x34
 800a042:	e010      	b.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800a044:	4b1c      	ldr	r3, [pc, #112]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a04c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a050:	d106      	bne.n	800a060 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800a052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a054:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a058:	d102      	bne.n	800a060 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800a05a:	4b1a      	ldr	r3, [pc, #104]	@ (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a05c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a05e:	e002      	b.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a064:	e11f      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a066:	e11e      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a068:	4b13      	ldr	r3, [pc, #76]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a06a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a06e:	f003 0303 	and.w	r3, r3, #3
 800a072:	633b      	str	r3, [r7, #48]	@ 0x30
 800a074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a076:	2b03      	cmp	r3, #3
 800a078:	d85f      	bhi.n	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800a07a:	a201      	add	r2, pc, #4	@ (adr r2, 800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800a07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a080:	0800a091 	.word	0x0800a091
 800a084:	0800a099 	.word	0x0800a099
 800a088:	0800a0a9 	.word	0x0800a0a9
 800a08c:	0800a0c9 	.word	0x0800a0c9

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800a090:	f7fb f992 	bl	80053b8 <HAL_RCC_GetHCLKFreq>
 800a094:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a096:	e053      	b.n	800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a098:	f107 0320 	add.w	r3, r7, #32
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fd f973 	bl	8007388 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a0a6:	e04b      	b.n	800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0a8:	f107 0314 	add.w	r3, r7, #20
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fd fad7 	bl	8007660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a0b6:	e043      	b.n	800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a0b8:	44020c00 	.word	0x44020c00
 800a0bc:	03d09000 	.word	0x03d09000
 800a0c0:	003d0900 	.word	0x003d0900
 800a0c4:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0c8:	4b79      	ldr	r3, [pc, #484]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a0ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a0ce:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a0d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0d4:	4b76      	ldr	r3, [pc, #472]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0302 	and.w	r3, r3, #2
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d10c      	bne.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800a0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d109      	bne.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0e6:	4b72      	ldr	r3, [pc, #456]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	08db      	lsrs	r3, r3, #3
 800a0ec:	f003 0303 	and.w	r3, r3, #3
 800a0f0:	4a70      	ldr	r2, [pc, #448]	@ (800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800a0f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0f8:	e01e      	b.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0fa:	4b6d      	ldr	r3, [pc, #436]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a102:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a106:	d106      	bne.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800a108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a10a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a10e:	d102      	bne.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a110:	4b69      	ldr	r3, [pc, #420]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800a112:	637b      	str	r3, [r7, #52]	@ 0x34
 800a114:	e010      	b.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a116:	4b66      	ldr	r3, [pc, #408]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a11e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a122:	d106      	bne.n	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800a124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a126:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a12a:	d102      	bne.n	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a12c:	4b63      	ldr	r3, [pc, #396]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800a12e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a130:	e002      	b.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a136:	e003      	b.n	800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a138:	e002      	b.n	800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800a13a:	2300      	movs	r3, #0
 800a13c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a13e:	bf00      	nop
          }
        }
        break;
 800a140:	e0b1      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800a142:	4b5b      	ldr	r3, [pc, #364]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a148:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a14c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800a14e:	4b58      	ldr	r3, [pc, #352]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a154:	f003 0302 	and.w	r3, r3, #2
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d106      	bne.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800a15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d103      	bne.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800a162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a166:	637b      	str	r3, [r7, #52]	@ 0x34
 800a168:	e01f      	b.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800a16a:	4b51      	ldr	r3, [pc, #324]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a16c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a174:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a178:	d106      	bne.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800a17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17c:	2b40      	cmp	r3, #64	@ 0x40
 800a17e:	d103      	bne.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800a180:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a184:	637b      	str	r3, [r7, #52]	@ 0x34
 800a186:	e010      	b.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800a188:	4b49      	ldr	r3, [pc, #292]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a194:	d106      	bne.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800a196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a198:	2b80      	cmp	r3, #128	@ 0x80
 800a19a:	d103      	bne.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800a19c:	f248 0312 	movw	r3, #32786	@ 0x8012
 800a1a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1a2:	e002      	b.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a1a8:	e07d      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a1aa:	e07c      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a1ac:	4b40      	ldr	r3, [pc, #256]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a1ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a1b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a1b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a1b8:	4b3d      	ldr	r3, [pc, #244]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a1c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1c4:	d105      	bne.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d102      	bne.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800a1cc:	4b3c      	ldr	r3, [pc, #240]	@ (800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a1ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1d0:	e031      	b.n	800a236 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800a1d2:	4b37      	ldr	r3, [pc, #220]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1de:	d10a      	bne.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e2:	2b10      	cmp	r3, #16
 800a1e4:	d107      	bne.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1e6:	f107 0320 	add.w	r3, r7, #32
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fd f8cc 	bl	8007388 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1f4:	e01f      	b.n	800a236 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800a1f6:	4b2e      	ldr	r3, [pc, #184]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a1f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1fc:	f003 0302 	and.w	r3, r3, #2
 800a200:	2b02      	cmp	r3, #2
 800a202:	d106      	bne.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800a204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a206:	2b20      	cmp	r3, #32
 800a208:	d103      	bne.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800a20a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a20e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a210:	e011      	b.n	800a236 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800a212:	4b27      	ldr	r3, [pc, #156]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a21c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a220:	d106      	bne.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800a222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a224:	2b30      	cmp	r3, #48	@ 0x30
 800a226:	d103      	bne.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800a228:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a22c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a22e:	e002      	b.n	800a236 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800a230:	2300      	movs	r3, #0
 800a232:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a234:	e037      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a236:	e036      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800a238:	4b1d      	ldr	r3, [pc, #116]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a23a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a23e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a242:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800a244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a246:	2b10      	cmp	r3, #16
 800a248:	d107      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a24a:	f107 0320 	add.w	r3, r7, #32
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fd f89a 	bl	8007388 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a256:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a258:	e025      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800a25a:	4b15      	ldr	r3, [pc, #84]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a262:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a266:	d10a      	bne.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800a268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26a:	2b20      	cmp	r3, #32
 800a26c:	d107      	bne.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a26e:	f107 0308 	add.w	r3, r7, #8
 800a272:	4618      	mov	r0, r3
 800a274:	f7fd fb60 	bl	8007938 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a27c:	e00f      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800a27e:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a28a:	d105      	bne.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800a28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28e:	2b30      	cmp	r3, #48	@ 0x30
 800a290:	d102      	bne.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800a292:	4b0b      	ldr	r3, [pc, #44]	@ (800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a294:	637b      	str	r3, [r7, #52]	@ 0x34
 800a296:	e002      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800a298:	2300      	movs	r3, #0
 800a29a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800a29c:	e003      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a29e:	e002      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2a4:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800a2a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	373c      	adds	r7, #60	@ 0x3c
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd90      	pop	{r4, r7, pc}
 800a2b0:	44020c00 	.word	0x44020c00
 800a2b4:	03d09000 	.word	0x03d09000
 800a2b8:	003d0900 	.word	0x003d0900
 800a2bc:	007a1200 	.word	0x007a1200
 800a2c0:	02dc6c00 	.word	0x02dc6c00

0800a2c4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800a2cc:	4b48      	ldr	r3, [pc, #288]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a47      	ldr	r2, [pc, #284]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a2d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a2d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a2d8:	f7f7 ff18 	bl	800210c <HAL_GetTick>
 800a2dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2de:	e008      	b.n	800a2f2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a2e0:	f7f7 ff14 	bl	800210c <HAL_GetTick>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d901      	bls.n	800a2f2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	e07a      	b.n	800a3e8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2f2:	4b3f      	ldr	r3, [pc, #252]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1f0      	bne.n	800a2e0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a2fe:	4b3c      	ldr	r3, [pc, #240]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a302:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a306:	f023 0303 	bic.w	r3, r3, #3
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	6811      	ldr	r1, [r2, #0]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	6852      	ldr	r2, [r2, #4]
 800a312:	0212      	lsls	r2, r2, #8
 800a314:	430a      	orrs	r2, r1
 800a316:	4936      	ldr	r1, [pc, #216]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	3b01      	subs	r3, #1
 800a322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	025b      	lsls	r3, r3, #9
 800a32e:	b29b      	uxth	r3, r3
 800a330:	431a      	orrs	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	3b01      	subs	r3, #1
 800a338:	041b      	lsls	r3, r3, #16
 800a33a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a33e:	431a      	orrs	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	3b01      	subs	r3, #1
 800a346:	061b      	lsls	r3, r3, #24
 800a348:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a34c:	4928      	ldr	r1, [pc, #160]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a34e:	4313      	orrs	r3, r2
 800a350:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a352:	4b27      	ldr	r3, [pc, #156]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a356:	f023 020c 	bic.w	r2, r3, #12
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	4924      	ldr	r1, [pc, #144]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a360:	4313      	orrs	r3, r2
 800a362:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a364:	4b22      	ldr	r3, [pc, #136]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a368:	f023 0220 	bic.w	r2, r3, #32
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	69db      	ldr	r3, [r3, #28]
 800a370:	491f      	ldr	r1, [pc, #124]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a372:	4313      	orrs	r3, r2
 800a374:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a376:	4b1e      	ldr	r3, [pc, #120]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a37e:	491c      	ldr	r1, [pc, #112]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a380:	4313      	orrs	r3, r2
 800a382:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a384:	4b1a      	ldr	r3, [pc, #104]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a388:	4a19      	ldr	r2, [pc, #100]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a38a:	f023 0310 	bic.w	r3, r3, #16
 800a38e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a390:	4b17      	ldr	r3, [pc, #92]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a394:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a398:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	6a12      	ldr	r2, [r2, #32]
 800a3a0:	00d2      	lsls	r2, r2, #3
 800a3a2:	4913      	ldr	r1, [pc, #76]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a3a8:	4b11      	ldr	r3, [pc, #68]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ac:	4a10      	ldr	r2, [pc, #64]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a3ae:	f043 0310 	orr.w	r3, r3, #16
 800a3b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a3b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a0d      	ldr	r2, [pc, #52]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a3ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a3be:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a3c0:	f7f7 fea4 	bl	800210c <HAL_GetTick>
 800a3c4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3c6:	e008      	b.n	800a3da <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a3c8:	f7f7 fea0 	bl	800210c <HAL_GetTick>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	1ad3      	subs	r3, r2, r3
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d901      	bls.n	800a3da <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	e006      	b.n	800a3e8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3da:	4b05      	ldr	r3, [pc, #20]	@ (800a3f0 <RCCEx_PLL2_Config+0x12c>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d0f0      	beq.n	800a3c8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a3e6:	2300      	movs	r3, #0

}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	44020c00 	.word	0x44020c00

0800a3f4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a3fc:	4b48      	ldr	r3, [pc, #288]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a47      	ldr	r2, [pc, #284]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a402:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a406:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a408:	f7f7 fe80 	bl	800210c <HAL_GetTick>
 800a40c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a40e:	e008      	b.n	800a422 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a410:	f7f7 fe7c 	bl	800210c <HAL_GetTick>
 800a414:	4602      	mov	r2, r0
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d901      	bls.n	800a422 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e07a      	b.n	800a518 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a422:	4b3f      	ldr	r3, [pc, #252]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1f0      	bne.n	800a410 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a42e:	4b3c      	ldr	r3, [pc, #240]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a432:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a436:	f023 0303 	bic.w	r3, r3, #3
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	6811      	ldr	r1, [r2, #0]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	6852      	ldr	r2, [r2, #4]
 800a442:	0212      	lsls	r2, r2, #8
 800a444:	430a      	orrs	r2, r1
 800a446:	4936      	ldr	r1, [pc, #216]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a448:	4313      	orrs	r3, r2
 800a44a:	630b      	str	r3, [r1, #48]	@ 0x30
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	3b01      	subs	r3, #1
 800a452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	3b01      	subs	r3, #1
 800a45c:	025b      	lsls	r3, r3, #9
 800a45e:	b29b      	uxth	r3, r3
 800a460:	431a      	orrs	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	3b01      	subs	r3, #1
 800a468:	041b      	lsls	r3, r3, #16
 800a46a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a46e:	431a      	orrs	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	695b      	ldr	r3, [r3, #20]
 800a474:	3b01      	subs	r3, #1
 800a476:	061b      	lsls	r3, r3, #24
 800a478:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a47c:	4928      	ldr	r1, [pc, #160]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a482:	4b27      	ldr	r3, [pc, #156]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a486:	f023 020c 	bic.w	r2, r3, #12
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	699b      	ldr	r3, [r3, #24]
 800a48e:	4924      	ldr	r1, [pc, #144]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a490:	4313      	orrs	r3, r2
 800a492:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a494:	4b22      	ldr	r3, [pc, #136]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a498:	f023 0220 	bic.w	r2, r3, #32
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	69db      	ldr	r3, [r3, #28]
 800a4a0:	491f      	ldr	r1, [pc, #124]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a4a6:	4b1e      	ldr	r3, [pc, #120]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a4a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ae:	491c      	ldr	r1, [pc, #112]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a4b4:	4b1a      	ldr	r3, [pc, #104]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a4b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4b8:	4a19      	ldr	r2, [pc, #100]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a4ba:	f023 0310 	bic.w	r3, r3, #16
 800a4be:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a4c0:	4b17      	ldr	r3, [pc, #92]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a4c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4c8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	6a12      	ldr	r2, [r2, #32]
 800a4d0:	00d2      	lsls	r2, r2, #3
 800a4d2:	4913      	ldr	r1, [pc, #76]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a4d8:	4b11      	ldr	r3, [pc, #68]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a4da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4dc:	4a10      	ldr	r2, [pc, #64]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a4de:	f043 0310 	orr.w	r3, r3, #16
 800a4e2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a4e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a0d      	ldr	r2, [pc, #52]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a4ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a4f0:	f7f7 fe0c 	bl	800210c <HAL_GetTick>
 800a4f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4f6:	e008      	b.n	800a50a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a4f8:	f7f7 fe08 	bl	800210c <HAL_GetTick>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	2b02      	cmp	r3, #2
 800a504:	d901      	bls.n	800a50a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a506:	2303      	movs	r3, #3
 800a508:	e006      	b.n	800a518 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a50a:	4b05      	ldr	r3, [pc, #20]	@ (800a520 <RCCEx_PLL3_Config+0x12c>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a512:	2b00      	cmp	r3, #0
 800a514:	d0f0      	beq.n	800a4f8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	44020c00 	.word	0x44020c00

0800a524 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e08c      	b.n	800a650 <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	7a5b      	ldrb	r3, [r3, #9]
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d105      	bne.n	800a54c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7f6 fdf4 	bl	8001134 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2202      	movs	r2, #2
 800a550:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f022 0204 	bic.w	r2, r2, #4
 800a560:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6859      	ldr	r1, [r3, #4]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	4b3b      	ldr	r3, [pc, #236]	@ (800a658 <HAL_RNG_Init+0x134>)
 800a56c:	430b      	orrs	r3, r1
 800a56e:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800a578:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a37      	ldr	r2, [pc, #220]	@ (800a65c <HAL_RNG_Init+0x138>)
 800a580:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800a590:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a592:	f7f7 fdbb 	bl	800210c <HAL_GetTick>
 800a596:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a598:	e016      	b.n	800a5c8 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a59a:	f7f7 fdb7 	bl	800210c <HAL_GetTick>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	2b04      	cmp	r3, #4
 800a5a6:	d90f      	bls.n	800a5c8 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5b6:	d107      	bne.n	800a5c8 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2202      	movs	r2, #2
 800a5c2:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e043      	b.n	800a650 <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a5d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5d6:	d0e0      	beq.n	800a59a <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f042 0204 	orr.w	r2, r2, #4
 800a5e6:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5f2:	2b40      	cmp	r3, #64	@ 0x40
 800a5f4:	d104      	bne.n	800a600 <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2204      	movs	r2, #4
 800a5fa:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e027      	b.n	800a650 <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800a600:	f7f7 fd84 	bl	800210c <HAL_GetTick>
 800a604:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a606:	e015      	b.n	800a634 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a608:	f7f7 fd80 	bl	800210c <HAL_GetTick>
 800a60c:	4602      	mov	r2, r0
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	2b04      	cmp	r3, #4
 800a614:	d90e      	bls.n	800a634 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	f003 0301 	and.w	r3, r3, #1
 800a620:	2b01      	cmp	r3, #1
 800a622:	d007      	beq.n	800a634 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2204      	movs	r2, #4
 800a628:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2202      	movs	r2, #2
 800a62e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e00d      	b.n	800a650 <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	f003 0301 	and.w	r3, r3, #1
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d1e2      	bne.n	800a608 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	40f00e00 	.word	0x40f00e00
 800a65c:	0003af66 	.word	0x0003af66

0800a660 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d071      	beq.n	800a756 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d106      	bne.n	800a68c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7f6 fdac 	bl	80011e4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2202      	movs	r2, #2
 800a690:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a694:	4b32      	ldr	r3, [pc, #200]	@ (800a760 <HAL_RTC_Init+0x100>)
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	f003 0310 	and.w	r3, r3, #16
 800a69c:	2b10      	cmp	r3, #16
 800a69e:	d051      	beq.n	800a744 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a6a0:	4b2f      	ldr	r3, [pc, #188]	@ (800a760 <HAL_RTC_Init+0x100>)
 800a6a2:	22ca      	movs	r2, #202	@ 0xca
 800a6a4:	625a      	str	r2, [r3, #36]	@ 0x24
 800a6a6:	4b2e      	ldr	r3, [pc, #184]	@ (800a760 <HAL_RTC_Init+0x100>)
 800a6a8:	2253      	movs	r2, #83	@ 0x53
 800a6aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 f9a3 	bl	800a9f8 <RTC_EnterInitMode>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a6b6:	7bfb      	ldrb	r3, [r7, #15]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d13f      	bne.n	800a73c <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a6bc:	4b28      	ldr	r3, [pc, #160]	@ (800a760 <HAL_RTC_Init+0x100>)
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	4a27      	ldr	r2, [pc, #156]	@ (800a760 <HAL_RTC_Init+0x100>)
 800a6c2:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800a6c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6ca:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a6cc:	4b24      	ldr	r3, [pc, #144]	@ (800a760 <HAL_RTC_Init+0x100>)
 800a6ce:	699a      	ldr	r2, [r3, #24]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6859      	ldr	r1, [r3, #4]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	4319      	orrs	r1, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	430b      	orrs	r3, r1
 800a6e0:	491f      	ldr	r1, [pc, #124]	@ (800a760 <HAL_RTC_Init+0x100>)
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68da      	ldr	r2, [r3, #12]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	041b      	lsls	r3, r3, #16
 800a6f0:	491b      	ldr	r1, [pc, #108]	@ (800a760 <HAL_RTC_Init+0x100>)
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a6f6:	4b1a      	ldr	r3, [pc, #104]	@ (800a760 <HAL_RTC_Init+0x100>)
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a706:	430b      	orrs	r3, r1
 800a708:	4915      	ldr	r1, [pc, #84]	@ (800a760 <HAL_RTC_Init+0x100>)
 800a70a:	4313      	orrs	r3, r2
 800a70c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f9ae 	bl	800aa70 <RTC_ExitInitMode>
 800a714:	4603      	mov	r3, r0
 800a716:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800a718:	7bfb      	ldrb	r3, [r7, #15]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10e      	bne.n	800a73c <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800a71e:	4b10      	ldr	r3, [pc, #64]	@ (800a760 <HAL_RTC_Init+0x100>)
 800a720:	699b      	ldr	r3, [r3, #24]
 800a722:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a19      	ldr	r1, [r3, #32]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	69db      	ldr	r3, [r3, #28]
 800a72e:	4319      	orrs	r1, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	695b      	ldr	r3, [r3, #20]
 800a734:	430b      	orrs	r3, r1
 800a736:	490a      	ldr	r1, [pc, #40]	@ (800a760 <HAL_RTC_Init+0x100>)
 800a738:	4313      	orrs	r3, r2
 800a73a:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a73c:	4b08      	ldr	r3, [pc, #32]	@ (800a760 <HAL_RTC_Init+0x100>)
 800a73e:	22ff      	movs	r2, #255	@ 0xff
 800a740:	625a      	str	r2, [r3, #36]	@ 0x24
 800a742:	e001      	b.n	800a748 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a744:	2300      	movs	r3, #0
 800a746:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a748:	7bfb      	ldrb	r3, [r7, #15]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d103      	bne.n	800a756 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2201      	movs	r2, #1
 800a752:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800a756:	7bfb      	ldrb	r3, [r7, #15]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	44007800 	.word	0x44007800

0800a764 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a764:	b590      	push	{r4, r7, lr}
 800a766:	b087      	sub	sp, #28
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a776:	2b01      	cmp	r3, #1
 800a778:	d101      	bne.n	800a77e <HAL_RTC_SetTime+0x1a>
 800a77a:	2302      	movs	r3, #2
 800a77c:	e07e      	b.n	800a87c <HAL_RTC_SetTime+0x118>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2201      	movs	r2, #1
 800a782:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2202      	movs	r2, #2
 800a78a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a78e:	4b3d      	ldr	r3, [pc, #244]	@ (800a884 <HAL_RTC_SetTime+0x120>)
 800a790:	22ca      	movs	r2, #202	@ 0xca
 800a792:	625a      	str	r2, [r3, #36]	@ 0x24
 800a794:	4b3b      	ldr	r3, [pc, #236]	@ (800a884 <HAL_RTC_SetTime+0x120>)
 800a796:	2253      	movs	r2, #83	@ 0x53
 800a798:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f000 f92c 	bl	800a9f8 <RTC_EnterInitMode>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a7a4:	7cfb      	ldrb	r3, [r7, #19]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d159      	bne.n	800a85e <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a7aa:	4b36      	ldr	r3, [pc, #216]	@ (800a884 <HAL_RTC_SetTime+0x120>)
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7b6:	d04d      	beq.n	800a854 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d125      	bne.n	800a80a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a7be:	4b31      	ldr	r3, [pc, #196]	@ (800a884 <HAL_RTC_SetTime+0x120>)
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d102      	bne.n	800a7d0 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f000 f989 	bl	800aaec <RTC_ByteToBcd2>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	785b      	ldrb	r3, [r3, #1]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f000 f982 	bl	800aaec <RTC_ByteToBcd2>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a7ec:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	789b      	ldrb	r3, [r3, #2]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 f97a 	bl	800aaec <RTC_ByteToBcd2>
 800a7f8:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a7fa:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	78db      	ldrb	r3, [r3, #3]
 800a802:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a804:	4313      	orrs	r3, r2
 800a806:	617b      	str	r3, [r7, #20]
 800a808:	e017      	b.n	800a83a <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a80a:	4b1e      	ldr	r3, [pc, #120]	@ (800a884 <HAL_RTC_SetTime+0x120>)
 800a80c:	699b      	ldr	r3, [r3, #24]
 800a80e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a812:	2b00      	cmp	r3, #0
 800a814:	d102      	bne.n	800a81c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	2200      	movs	r2, #0
 800a81a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	785b      	ldrb	r3, [r3, #1]
 800a826:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a828:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a82e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	78db      	ldrb	r3, [r3, #3]
 800a834:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a836:	4313      	orrs	r3, r2
 800a838:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800a83a:	4a12      	ldr	r2, [pc, #72]	@ (800a884 <HAL_RTC_SetTime+0x120>)
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a842:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a846:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800a848:	4b0e      	ldr	r3, [pc, #56]	@ (800a884 <HAL_RTC_SetTime+0x120>)
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	4a0d      	ldr	r2, [pc, #52]	@ (800a884 <HAL_RTC_SetTime+0x120>)
 800a84e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a852:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f000 f90b 	bl	800aa70 <RTC_ExitInitMode>
 800a85a:	4603      	mov	r3, r0
 800a85c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a85e:	4b09      	ldr	r3, [pc, #36]	@ (800a884 <HAL_RTC_SetTime+0x120>)
 800a860:	22ff      	movs	r2, #255	@ 0xff
 800a862:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a864:	7cfb      	ldrb	r3, [r7, #19]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d103      	bne.n	800a872 <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a87a:	7cfb      	ldrb	r3, [r7, #19]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	371c      	adds	r7, #28
 800a880:	46bd      	mov	sp, r7
 800a882:	bd90      	pop	{r4, r7, pc}
 800a884:	44007800 	.word	0x44007800

0800a888 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a888:	b590      	push	{r4, r7, lr}
 800a88a:	b087      	sub	sp, #28
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d101      	bne.n	800a8a2 <HAL_RTC_SetDate+0x1a>
 800a89e:	2302      	movs	r3, #2
 800a8a0:	e071      	b.n	800a986 <HAL_RTC_SetDate+0xfe>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10e      	bne.n	800a8d6 <HAL_RTC_SetDate+0x4e>
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	785b      	ldrb	r3, [r3, #1]
 800a8bc:	f003 0310 	and.w	r3, r3, #16
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d008      	beq.n	800a8d6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	785b      	ldrb	r3, [r3, #1]
 800a8c8:	f023 0310 	bic.w	r3, r3, #16
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	330a      	adds	r3, #10
 800a8d0:	b2da      	uxtb	r2, r3
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d11c      	bne.n	800a916 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	78db      	ldrb	r3, [r3, #3]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f000 f903 	bl	800aaec <RTC_ByteToBcd2>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	785b      	ldrb	r3, [r3, #1]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 f8fc 	bl	800aaec <RTC_ByteToBcd2>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a8f8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	789b      	ldrb	r3, [r3, #2]
 800a8fe:	4618      	mov	r0, r3
 800a900:	f000 f8f4 	bl	800aaec <RTC_ByteToBcd2>
 800a904:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a906:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a910:	4313      	orrs	r3, r2
 800a912:	617b      	str	r3, [r7, #20]
 800a914:	e00e      	b.n	800a934 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	78db      	ldrb	r3, [r3, #3]
 800a91a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	785b      	ldrb	r3, [r3, #1]
 800a920:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a922:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a928:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a930:	4313      	orrs	r3, r2
 800a932:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a934:	4b16      	ldr	r3, [pc, #88]	@ (800a990 <HAL_RTC_SetDate+0x108>)
 800a936:	22ca      	movs	r2, #202	@ 0xca
 800a938:	625a      	str	r2, [r3, #36]	@ 0x24
 800a93a:	4b15      	ldr	r3, [pc, #84]	@ (800a990 <HAL_RTC_SetDate+0x108>)
 800a93c:	2253      	movs	r2, #83	@ 0x53
 800a93e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f000 f859 	bl	800a9f8 <RTC_EnterInitMode>
 800a946:	4603      	mov	r3, r0
 800a948:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a94a:	7cfb      	ldrb	r3, [r7, #19]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10b      	bne.n	800a968 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800a950:	4a0f      	ldr	r2, [pc, #60]	@ (800a990 <HAL_RTC_SetDate+0x108>)
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a958:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a95c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f000 f886 	bl	800aa70 <RTC_ExitInitMode>
 800a964:	4603      	mov	r3, r0
 800a966:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a968:	4b09      	ldr	r3, [pc, #36]	@ (800a990 <HAL_RTC_SetDate+0x108>)
 800a96a:	22ff      	movs	r2, #255	@ 0xff
 800a96c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a96e:	7cfb      	ldrb	r3, [r7, #19]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d103      	bne.n	800a97c <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2201      	movs	r2, #1
 800a978:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a984:	7cfb      	ldrb	r3, [r7, #19]
}
 800a986:	4618      	mov	r0, r3
 800a988:	371c      	adds	r7, #28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd90      	pop	{r4, r7, pc}
 800a98e:	bf00      	nop
 800a990:	44007800 	.word	0x44007800

0800a994 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a99c:	4b15      	ldr	r3, [pc, #84]	@ (800a9f4 <HAL_RTC_WaitForSynchro+0x60>)
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	4a14      	ldr	r2, [pc, #80]	@ (800a9f4 <HAL_RTC_WaitForSynchro+0x60>)
 800a9a2:	f023 0320 	bic.w	r3, r3, #32
 800a9a6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a9a8:	f7f7 fbb0 	bl	800210c <HAL_GetTick>
 800a9ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a9ae:	e013      	b.n	800a9d8 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a9b0:	f7f7 fbac 	bl	800210c <HAL_GetTick>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a9be:	d90b      	bls.n	800a9d8 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a9c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a9f4 <HAL_RTC_WaitForSynchro+0x60>)
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	f003 0320 	and.w	r3, r3, #32
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10c      	bne.n	800a9e6 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2203      	movs	r2, #3
 800a9d0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	e008      	b.n	800a9ea <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a9d8:	4b06      	ldr	r3, [pc, #24]	@ (800a9f4 <HAL_RTC_WaitForSynchro+0x60>)
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	f003 0320 	and.w	r3, r3, #32
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d0e5      	beq.n	800a9b0 <HAL_RTC_WaitForSynchro+0x1c>
 800a9e4:	e000      	b.n	800a9e8 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800a9e6:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	44007800 	.word	0x44007800

0800a9f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800aa04:	4b19      	ldr	r3, [pc, #100]	@ (800aa6c <RTC_EnterInitMode+0x74>)
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d128      	bne.n	800aa62 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800aa10:	4b16      	ldr	r3, [pc, #88]	@ (800aa6c <RTC_EnterInitMode+0x74>)
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	4a15      	ldr	r2, [pc, #84]	@ (800aa6c <RTC_EnterInitMode+0x74>)
 800aa16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa1a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800aa1c:	f7f7 fb76 	bl	800210c <HAL_GetTick>
 800aa20:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aa22:	e013      	b.n	800aa4c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800aa24:	f7f7 fb72 	bl	800210c <HAL_GetTick>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa32:	d90b      	bls.n	800aa4c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800aa34:	4b0d      	ldr	r3, [pc, #52]	@ (800aa6c <RTC_EnterInitMode+0x74>)
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10f      	bne.n	800aa60 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2203      	movs	r2, #3
 800aa48:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aa4c:	4b07      	ldr	r3, [pc, #28]	@ (800aa6c <RTC_EnterInitMode+0x74>)
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d104      	bne.n	800aa62 <RTC_EnterInitMode+0x6a>
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d1e2      	bne.n	800aa24 <RTC_EnterInitMode+0x2c>
 800aa5e:	e000      	b.n	800aa62 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800aa60:	bf00      	nop
        }
      }
    }
  }

  return status;
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	44007800 	.word	0x44007800

0800aa70 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800aa7c:	4b1a      	ldr	r3, [pc, #104]	@ (800aae8 <RTC_ExitInitMode+0x78>)
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	4a19      	ldr	r2, [pc, #100]	@ (800aae8 <RTC_ExitInitMode+0x78>)
 800aa82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa86:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800aa88:	4b17      	ldr	r3, [pc, #92]	@ (800aae8 <RTC_ExitInitMode+0x78>)
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	f003 0320 	and.w	r3, r3, #32
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10c      	bne.n	800aaae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f7ff ff7d 	bl	800a994 <HAL_RTC_WaitForSynchro>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d01e      	beq.n	800aade <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2203      	movs	r2, #3
 800aaa4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	73fb      	strb	r3, [r7, #15]
 800aaac:	e017      	b.n	800aade <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800aaae:	4b0e      	ldr	r3, [pc, #56]	@ (800aae8 <RTC_ExitInitMode+0x78>)
 800aab0:	699b      	ldr	r3, [r3, #24]
 800aab2:	4a0d      	ldr	r2, [pc, #52]	@ (800aae8 <RTC_ExitInitMode+0x78>)
 800aab4:	f023 0320 	bic.w	r3, r3, #32
 800aab8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7ff ff6a 	bl	800a994 <HAL_RTC_WaitForSynchro>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d005      	beq.n	800aad2 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2203      	movs	r2, #3
 800aaca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800aace:	2303      	movs	r3, #3
 800aad0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800aad2:	4b05      	ldr	r3, [pc, #20]	@ (800aae8 <RTC_ExitInitMode+0x78>)
 800aad4:	699b      	ldr	r3, [r3, #24]
 800aad6:	4a04      	ldr	r2, [pc, #16]	@ (800aae8 <RTC_ExitInitMode+0x78>)
 800aad8:	f043 0320 	orr.w	r3, r3, #32
 800aadc:	6193      	str	r3, [r2, #24]
  }
  return status;
 800aade:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	44007800 	.word	0x44007800

0800aaec <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800aafa:	79fb      	ldrb	r3, [r7, #7]
 800aafc:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800aafe:	e005      	b.n	800ab0c <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	3301      	adds	r3, #1
 800ab04:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800ab06:	7afb      	ldrb	r3, [r7, #11]
 800ab08:	3b0a      	subs	r3, #10
 800ab0a:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800ab0c:	7afb      	ldrb	r3, [r7, #11]
 800ab0e:	2b09      	cmp	r3, #9
 800ab10:	d8f6      	bhi.n	800ab00 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	011b      	lsls	r3, r3, #4
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	7afb      	ldrb	r3, [r7, #11]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	b2db      	uxtb	r3, r3
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3714      	adds	r7, #20
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	4910      	ldr	r1, [pc, #64]	@ (800ab80 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800ab40:	4313      	orrs	r3, r2
 800ab42:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	689a      	ldr	r2, [r3, #8]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	699b      	ldr	r3, [r3, #24]
 800ab52:	490c      	ldr	r1, [pc, #48]	@ (800ab84 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ab54:	4313      	orrs	r3, r2
 800ab56:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800ab58:	4b0a      	ldr	r3, [pc, #40]	@ (800ab84 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ab5a:	6a1b      	ldr	r3, [r3, #32]
 800ab5c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	6919      	ldr	r1, [r3, #16]
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	695b      	ldr	r3, [r3, #20]
 800ab68:	041b      	lsls	r3, r3, #16
 800ab6a:	430b      	orrs	r3, r1
 800ab6c:	4905      	ldr	r1, [pc, #20]	@ (800ab84 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	44007800 	.word	0x44007800
 800ab84:	44007c00 	.word	0x44007c00

0800ab88 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d101      	bne.n	800ab9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e162      	b.n	800ae60 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a70      	ldr	r2, [pc, #448]	@ (800ad60 <HAL_SPI_Init+0x1d8>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d018      	beq.n	800abd6 <HAL_SPI_Init+0x4e>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a6e      	ldr	r2, [pc, #440]	@ (800ad64 <HAL_SPI_Init+0x1dc>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d013      	beq.n	800abd6 <HAL_SPI_Init+0x4e>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a6d      	ldr	r2, [pc, #436]	@ (800ad68 <HAL_SPI_Init+0x1e0>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d00e      	beq.n	800abd6 <HAL_SPI_Init+0x4e>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a6b      	ldr	r2, [pc, #428]	@ (800ad6c <HAL_SPI_Init+0x1e4>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d009      	beq.n	800abd6 <HAL_SPI_Init+0x4e>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a6a      	ldr	r2, [pc, #424]	@ (800ad70 <HAL_SPI_Init+0x1e8>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d004      	beq.n	800abd6 <HAL_SPI_Init+0x4e>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a68      	ldr	r2, [pc, #416]	@ (800ad74 <HAL_SPI_Init+0x1ec>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	e000      	b.n	800abd8 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800abd6:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a5f      	ldr	r2, [pc, #380]	@ (800ad60 <HAL_SPI_Init+0x1d8>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d018      	beq.n	800ac1a <HAL_SPI_Init+0x92>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a5d      	ldr	r2, [pc, #372]	@ (800ad64 <HAL_SPI_Init+0x1dc>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d013      	beq.n	800ac1a <HAL_SPI_Init+0x92>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a5c      	ldr	r2, [pc, #368]	@ (800ad68 <HAL_SPI_Init+0x1e0>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d00e      	beq.n	800ac1a <HAL_SPI_Init+0x92>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a5a      	ldr	r2, [pc, #360]	@ (800ad6c <HAL_SPI_Init+0x1e4>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d009      	beq.n	800ac1a <HAL_SPI_Init+0x92>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a59      	ldr	r2, [pc, #356]	@ (800ad70 <HAL_SPI_Init+0x1e8>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d004      	beq.n	800ac1a <HAL_SPI_Init+0x92>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a57      	ldr	r2, [pc, #348]	@ (800ad74 <HAL_SPI_Init+0x1ec>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d105      	bne.n	800ac26 <HAL_SPI_Init+0x9e>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	2b0f      	cmp	r3, #15
 800ac20:	d901      	bls.n	800ac26 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e11c      	b.n	800ae60 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f91e 	bl	800ae68 <SPI_GetPacketSize>
 800ac2c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a4b      	ldr	r2, [pc, #300]	@ (800ad60 <HAL_SPI_Init+0x1d8>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d018      	beq.n	800ac6a <HAL_SPI_Init+0xe2>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a49      	ldr	r2, [pc, #292]	@ (800ad64 <HAL_SPI_Init+0x1dc>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d013      	beq.n	800ac6a <HAL_SPI_Init+0xe2>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a48      	ldr	r2, [pc, #288]	@ (800ad68 <HAL_SPI_Init+0x1e0>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d00e      	beq.n	800ac6a <HAL_SPI_Init+0xe2>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a46      	ldr	r2, [pc, #280]	@ (800ad6c <HAL_SPI_Init+0x1e4>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d009      	beq.n	800ac6a <HAL_SPI_Init+0xe2>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a45      	ldr	r2, [pc, #276]	@ (800ad70 <HAL_SPI_Init+0x1e8>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d004      	beq.n	800ac6a <HAL_SPI_Init+0xe2>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a43      	ldr	r2, [pc, #268]	@ (800ad74 <HAL_SPI_Init+0x1ec>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d102      	bne.n	800ac70 <HAL_SPI_Init+0xe8>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2b08      	cmp	r3, #8
 800ac6e:	d820      	bhi.n	800acb2 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ac74:	4a40      	ldr	r2, [pc, #256]	@ (800ad78 <HAL_SPI_Init+0x1f0>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d018      	beq.n	800acac <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a3f      	ldr	r2, [pc, #252]	@ (800ad7c <HAL_SPI_Init+0x1f4>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d013      	beq.n	800acac <HAL_SPI_Init+0x124>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a3d      	ldr	r2, [pc, #244]	@ (800ad80 <HAL_SPI_Init+0x1f8>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d00e      	beq.n	800acac <HAL_SPI_Init+0x124>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a3c      	ldr	r2, [pc, #240]	@ (800ad84 <HAL_SPI_Init+0x1fc>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d009      	beq.n	800acac <HAL_SPI_Init+0x124>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a3a      	ldr	r2, [pc, #232]	@ (800ad88 <HAL_SPI_Init+0x200>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d004      	beq.n	800acac <HAL_SPI_Init+0x124>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a39      	ldr	r2, [pc, #228]	@ (800ad8c <HAL_SPI_Init+0x204>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d104      	bne.n	800acb6 <HAL_SPI_Init+0x12e>
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2b10      	cmp	r3, #16
 800acb0:	d901      	bls.n	800acb6 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	e0d4      	b.n	800ae60 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d106      	bne.n	800acd0 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7f6 faea 	bl	80012a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2202      	movs	r2, #2
 800acd4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f022 0201 	bic.w	r2, r2, #1
 800ace6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800acf2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800acfc:	d119      	bne.n	800ad32 <HAL_SPI_Init+0x1aa>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad06:	d103      	bne.n	800ad10 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d008      	beq.n	800ad22 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10c      	bne.n	800ad32 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ad1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad20:	d107      	bne.n	800ad32 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ad30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d028      	beq.n	800ad90 <HAL_SPI_Init+0x208>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	2b06      	cmp	r3, #6
 800ad44:	d924      	bls.n	800ad90 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	430a      	orrs	r2, r1
 800ad5a:	601a      	str	r2, [r3, #0]
 800ad5c:	e020      	b.n	800ada0 <HAL_SPI_Init+0x218>
 800ad5e:	bf00      	nop
 800ad60:	40014c00 	.word	0x40014c00
 800ad64:	50014c00 	.word	0x50014c00
 800ad68:	44002000 	.word	0x44002000
 800ad6c:	54002000 	.word	0x54002000
 800ad70:	40015000 	.word	0x40015000
 800ad74:	50015000 	.word	0x50015000
 800ad78:	40013000 	.word	0x40013000
 800ad7c:	50013000 	.word	0x50013000
 800ad80:	40003800 	.word	0x40003800
 800ad84:	50003800 	.word	0x50003800
 800ad88:	40003c00 	.word	0x40003c00
 800ad8c:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ad9e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	69da      	ldr	r2, [r3, #28]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ada8:	431a      	orrs	r2, r3
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	431a      	orrs	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adb2:	ea42 0103 	orr.w	r1, r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	68da      	ldr	r2, [r3, #12]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	430a      	orrs	r2, r1
 800adc0:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adca:	431a      	orrs	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800add0:	431a      	orrs	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	431a      	orrs	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	431a      	orrs	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	695b      	ldr	r3, [r3, #20]
 800ade2:	431a      	orrs	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	431a      	orrs	r2, r3
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	431a      	orrs	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adf4:	431a      	orrs	r2, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	431a      	orrs	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae00:	431a      	orrs	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae06:	431a      	orrs	r2, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae0c:	ea42 0103 	orr.w	r1, r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	430a      	orrs	r2, r1
 800ae1a:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f022 0201 	bic.w	r2, r2, #1
 800ae2a:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00a      	beq.n	800ae4e <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	430a      	orrs	r2, r1
 800ae4c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae74:	095b      	lsrs	r3, r3, #5
 800ae76:	3301      	adds	r3, #1
 800ae78:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	3307      	adds	r3, #7
 800ae86:	08db      	lsrs	r3, r3, #3
 800ae88:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	fb02 f303 	mul.w	r3, r2, r3
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3714      	adds	r7, #20
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr

0800ae9e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b082      	sub	sp, #8
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d101      	bne.n	800aeb0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	e042      	b.n	800af36 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d106      	bne.n	800aec8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f7f6 faaa 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2224      	movs	r2, #36	@ 0x24
 800aecc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f022 0201 	bic.w	r2, r2, #1
 800aede:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d002      	beq.n	800aeee <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fab5 	bl	800b458 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 f8c4 	bl	800b07c <UART_SetConfig>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d101      	bne.n	800aefe <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	e01b      	b.n	800af36 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	685a      	ldr	r2, [r3, #4]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800af0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	689a      	ldr	r2, [r3, #8]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800af1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f042 0201 	orr.w	r2, r2, #1
 800af2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fb34 	bl	800b59c <UART_CheckIdleState>
 800af34:	4603      	mov	r3, r0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3708      	adds	r7, #8
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b08a      	sub	sp, #40	@ 0x28
 800af42:	af02      	add	r7, sp, #8
 800af44:	60f8      	str	r0, [r7, #12]
 800af46:	60b9      	str	r1, [r7, #8]
 800af48:	603b      	str	r3, [r7, #0]
 800af4a:	4613      	mov	r3, r2
 800af4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af54:	2b20      	cmp	r3, #32
 800af56:	f040 808b 	bne.w	800b070 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d002      	beq.n	800af66 <HAL_UART_Transmit+0x28>
 800af60:	88fb      	ldrh	r3, [r7, #6]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	e083      	b.n	800b072 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af74:	2b80      	cmp	r3, #128	@ 0x80
 800af76:	d107      	bne.n	800af88 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	689a      	ldr	r2, [r3, #8]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800af86:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2221      	movs	r2, #33	@ 0x21
 800af94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af98:	f7f7 f8b8 	bl	800210c <HAL_GetTick>
 800af9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	88fa      	ldrh	r2, [r7, #6]
 800afa2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	88fa      	ldrh	r2, [r7, #6]
 800afaa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afb6:	d108      	bne.n	800afca <HAL_UART_Transmit+0x8c>
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	691b      	ldr	r3, [r3, #16]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d104      	bne.n	800afca <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800afc0:	2300      	movs	r3, #0
 800afc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	61bb      	str	r3, [r7, #24]
 800afc8:	e003      	b.n	800afd2 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800afce:	2300      	movs	r3, #0
 800afd0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800afd2:	e030      	b.n	800b036 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	2200      	movs	r2, #0
 800afdc:	2180      	movs	r1, #128	@ 0x80
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f000 fb86 	bl	800b6f0 <UART_WaitOnFlagUntilTimeout>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d005      	beq.n	800aff6 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2220      	movs	r2, #32
 800afee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800aff2:	2303      	movs	r3, #3
 800aff4:	e03d      	b.n	800b072 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10b      	bne.n	800b014 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	881b      	ldrh	r3, [r3, #0]
 800b000:	461a      	mov	r2, r3
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b00a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	3302      	adds	r3, #2
 800b010:	61bb      	str	r3, [r7, #24]
 800b012:	e007      	b.n	800b024 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	781a      	ldrb	r2, [r3, #0]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	3301      	adds	r3, #1
 800b022:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	3b01      	subs	r3, #1
 800b02e:	b29a      	uxth	r2, r3
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d1c8      	bne.n	800afd4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	9300      	str	r3, [sp, #0]
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	2200      	movs	r2, #0
 800b04a:	2140      	movs	r1, #64	@ 0x40
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f000 fb4f 	bl	800b6f0 <UART_WaitOnFlagUntilTimeout>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d005      	beq.n	800b064 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2220      	movs	r2, #32
 800b05c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b060:	2303      	movs	r3, #3
 800b062:	e006      	b.n	800b072 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2220      	movs	r2, #32
 800b068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b06c:	2300      	movs	r3, #0
 800b06e:	e000      	b.n	800b072 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b070:	2302      	movs	r3, #2
  }
}
 800b072:	4618      	mov	r0, r3
 800b074:	3720      	adds	r7, #32
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
	...

0800b07c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b07c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b080:	b094      	sub	sp, #80	@ 0x50
 800b082:	af00      	add	r7, sp, #0
 800b084:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	4b78      	ldr	r3, [pc, #480]	@ (800b274 <UART_SetConfig+0x1f8>)
 800b092:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b096:	689a      	ldr	r2, [r3, #8]
 800b098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	431a      	orrs	r2, r3
 800b09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	431a      	orrs	r2, r3
 800b0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a6:	69db      	ldr	r3, [r3, #28]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4971      	ldr	r1, [pc, #452]	@ (800b278 <UART_SetConfig+0x1fc>)
 800b0b4:	4019      	ands	r1, r3
 800b0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0bc:	430b      	orrs	r3, r1
 800b0be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0cc:	68d9      	ldr	r1, [r3, #12]
 800b0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	ea40 0301 	orr.w	r3, r0, r1
 800b0d6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b0de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	4b64      	ldr	r3, [pc, #400]	@ (800b274 <UART_SetConfig+0x1f8>)
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d009      	beq.n	800b0fc <UART_SetConfig+0x80>
 800b0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	4b63      	ldr	r3, [pc, #396]	@ (800b27c <UART_SetConfig+0x200>)
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d004      	beq.n	800b0fc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0f4:	6a1a      	ldr	r2, [r3, #32]
 800b0f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b106:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b110:	430b      	orrs	r3, r1
 800b112:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b11a:	f023 000f 	bic.w	r0, r3, #15
 800b11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b120:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	ea40 0301 	orr.w	r3, r0, r1
 800b12a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	4b53      	ldr	r3, [pc, #332]	@ (800b280 <UART_SetConfig+0x204>)
 800b132:	429a      	cmp	r2, r3
 800b134:	d102      	bne.n	800b13c <UART_SetConfig+0xc0>
 800b136:	2301      	movs	r3, #1
 800b138:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b13a:	e066      	b.n	800b20a <UART_SetConfig+0x18e>
 800b13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	4b50      	ldr	r3, [pc, #320]	@ (800b284 <UART_SetConfig+0x208>)
 800b142:	429a      	cmp	r2, r3
 800b144:	d102      	bne.n	800b14c <UART_SetConfig+0xd0>
 800b146:	2302      	movs	r3, #2
 800b148:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b14a:	e05e      	b.n	800b20a <UART_SetConfig+0x18e>
 800b14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	4b4d      	ldr	r3, [pc, #308]	@ (800b288 <UART_SetConfig+0x20c>)
 800b152:	429a      	cmp	r2, r3
 800b154:	d102      	bne.n	800b15c <UART_SetConfig+0xe0>
 800b156:	2304      	movs	r3, #4
 800b158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b15a:	e056      	b.n	800b20a <UART_SetConfig+0x18e>
 800b15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	4b4a      	ldr	r3, [pc, #296]	@ (800b28c <UART_SetConfig+0x210>)
 800b162:	429a      	cmp	r2, r3
 800b164:	d102      	bne.n	800b16c <UART_SetConfig+0xf0>
 800b166:	2308      	movs	r3, #8
 800b168:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b16a:	e04e      	b.n	800b20a <UART_SetConfig+0x18e>
 800b16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	4b47      	ldr	r3, [pc, #284]	@ (800b290 <UART_SetConfig+0x214>)
 800b172:	429a      	cmp	r2, r3
 800b174:	d102      	bne.n	800b17c <UART_SetConfig+0x100>
 800b176:	2310      	movs	r3, #16
 800b178:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b17a:	e046      	b.n	800b20a <UART_SetConfig+0x18e>
 800b17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	4b44      	ldr	r3, [pc, #272]	@ (800b294 <UART_SetConfig+0x218>)
 800b182:	429a      	cmp	r2, r3
 800b184:	d102      	bne.n	800b18c <UART_SetConfig+0x110>
 800b186:	2320      	movs	r3, #32
 800b188:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b18a:	e03e      	b.n	800b20a <UART_SetConfig+0x18e>
 800b18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	4b41      	ldr	r3, [pc, #260]	@ (800b298 <UART_SetConfig+0x21c>)
 800b192:	429a      	cmp	r2, r3
 800b194:	d102      	bne.n	800b19c <UART_SetConfig+0x120>
 800b196:	2340      	movs	r3, #64	@ 0x40
 800b198:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b19a:	e036      	b.n	800b20a <UART_SetConfig+0x18e>
 800b19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	4b3e      	ldr	r3, [pc, #248]	@ (800b29c <UART_SetConfig+0x220>)
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d102      	bne.n	800b1ac <UART_SetConfig+0x130>
 800b1a6:	2380      	movs	r3, #128	@ 0x80
 800b1a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1aa:	e02e      	b.n	800b20a <UART_SetConfig+0x18e>
 800b1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	4b3b      	ldr	r3, [pc, #236]	@ (800b2a0 <UART_SetConfig+0x224>)
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d103      	bne.n	800b1be <UART_SetConfig+0x142>
 800b1b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b1ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1bc:	e025      	b.n	800b20a <UART_SetConfig+0x18e>
 800b1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	4b38      	ldr	r3, [pc, #224]	@ (800b2a4 <UART_SetConfig+0x228>)
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d103      	bne.n	800b1d0 <UART_SetConfig+0x154>
 800b1c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1ce:	e01c      	b.n	800b20a <UART_SetConfig+0x18e>
 800b1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	4b34      	ldr	r3, [pc, #208]	@ (800b2a8 <UART_SetConfig+0x22c>)
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d103      	bne.n	800b1e2 <UART_SetConfig+0x166>
 800b1da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1e0:	e013      	b.n	800b20a <UART_SetConfig+0x18e>
 800b1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	4b31      	ldr	r3, [pc, #196]	@ (800b2ac <UART_SetConfig+0x230>)
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d103      	bne.n	800b1f4 <UART_SetConfig+0x178>
 800b1ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b1f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1f2:	e00a      	b.n	800b20a <UART_SetConfig+0x18e>
 800b1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	4b1e      	ldr	r3, [pc, #120]	@ (800b274 <UART_SetConfig+0x1f8>)
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d103      	bne.n	800b206 <UART_SetConfig+0x18a>
 800b1fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b202:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b204:	e001      	b.n	800b20a <UART_SetConfig+0x18e>
 800b206:	2300      	movs	r3, #0
 800b208:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	4b19      	ldr	r3, [pc, #100]	@ (800b274 <UART_SetConfig+0x1f8>)
 800b210:	429a      	cmp	r2, r3
 800b212:	d005      	beq.n	800b220 <UART_SetConfig+0x1a4>
 800b214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	4b18      	ldr	r3, [pc, #96]	@ (800b27c <UART_SetConfig+0x200>)
 800b21a:	429a      	cmp	r2, r3
 800b21c:	f040 8094 	bne.w	800b348 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b220:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b222:	2200      	movs	r2, #0
 800b224:	623b      	str	r3, [r7, #32]
 800b226:	627a      	str	r2, [r7, #36]	@ 0x24
 800b228:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b22c:	f7fc fcf0 	bl	8007c10 <HAL_RCCEx_GetPeriphCLKFreq>
 800b230:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b232:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b234:	2b00      	cmp	r3, #0
 800b236:	f000 80f7 	beq.w	800b428 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b23c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b23e:	4a1c      	ldr	r2, [pc, #112]	@ (800b2b0 <UART_SetConfig+0x234>)
 800b240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b244:	461a      	mov	r2, r3
 800b246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b248:	fbb3 f3f2 	udiv	r3, r3, r2
 800b24c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b250:	685a      	ldr	r2, [r3, #4]
 800b252:	4613      	mov	r3, r2
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	4413      	add	r3, r2
 800b258:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d305      	bcc.n	800b26a <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b264:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b266:	429a      	cmp	r2, r3
 800b268:	d924      	bls.n	800b2b4 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b270:	e069      	b.n	800b346 <UART_SetConfig+0x2ca>
 800b272:	bf00      	nop
 800b274:	44002400 	.word	0x44002400
 800b278:	cfff69f3 	.word	0xcfff69f3
 800b27c:	54002400 	.word	0x54002400
 800b280:	40013800 	.word	0x40013800
 800b284:	40004400 	.word	0x40004400
 800b288:	40004800 	.word	0x40004800
 800b28c:	40004c00 	.word	0x40004c00
 800b290:	40005000 	.word	0x40005000
 800b294:	40006400 	.word	0x40006400
 800b298:	40007800 	.word	0x40007800
 800b29c:	40007c00 	.word	0x40007c00
 800b2a0:	40008000 	.word	0x40008000
 800b2a4:	40006800 	.word	0x40006800
 800b2a8:	40006c00 	.word	0x40006c00
 800b2ac:	40008400 	.word	0x40008400
 800b2b0:	080113bc 	.word	0x080113bc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	61bb      	str	r3, [r7, #24]
 800b2ba:	61fa      	str	r2, [r7, #28]
 800b2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2c0:	4a64      	ldr	r2, [pc, #400]	@ (800b454 <UART_SetConfig+0x3d8>)
 800b2c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	613b      	str	r3, [r7, #16]
 800b2cc:	617a      	str	r2, [r7, #20]
 800b2ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b2d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b2d6:	f7f4 ffd9 	bl	800028c <__aeabi_uldivmod>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	460b      	mov	r3, r1
 800b2de:	4610      	mov	r0, r2
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	f04f 0200 	mov.w	r2, #0
 800b2e6:	f04f 0300 	mov.w	r3, #0
 800b2ea:	020b      	lsls	r3, r1, #8
 800b2ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b2f0:	0202      	lsls	r2, r0, #8
 800b2f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2f4:	6849      	ldr	r1, [r1, #4]
 800b2f6:	0849      	lsrs	r1, r1, #1
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	eb12 0804 	adds.w	r8, r2, r4
 800b302:	eb43 0905 	adc.w	r9, r3, r5
 800b306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	60bb      	str	r3, [r7, #8]
 800b30e:	60fa      	str	r2, [r7, #12]
 800b310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b314:	4640      	mov	r0, r8
 800b316:	4649      	mov	r1, r9
 800b318:	f7f4 ffb8 	bl	800028c <__aeabi_uldivmod>
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	4613      	mov	r3, r2
 800b322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b326:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b32a:	d308      	bcc.n	800b33e <UART_SetConfig+0x2c2>
 800b32c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b32e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b332:	d204      	bcs.n	800b33e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800b334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b33a:	60da      	str	r2, [r3, #12]
 800b33c:	e003      	b.n	800b346 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b344:	e070      	b.n	800b428 <UART_SetConfig+0x3ac>
 800b346:	e06f      	b.n	800b428 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b34a:	69db      	ldr	r3, [r3, #28]
 800b34c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b350:	d13c      	bne.n	800b3cc <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b354:	2200      	movs	r2, #0
 800b356:	603b      	str	r3, [r7, #0]
 800b358:	607a      	str	r2, [r7, #4]
 800b35a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b35e:	f7fc fc57 	bl	8007c10 <HAL_RCCEx_GetPeriphCLKFreq>
 800b362:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b366:	2b00      	cmp	r3, #0
 800b368:	d05e      	beq.n	800b428 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b36e:	4a39      	ldr	r2, [pc, #228]	@ (800b454 <UART_SetConfig+0x3d8>)
 800b370:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b374:	461a      	mov	r2, r3
 800b376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b378:	fbb3 f3f2 	udiv	r3, r3, r2
 800b37c:	005a      	lsls	r2, r3, #1
 800b37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	085b      	lsrs	r3, r3, #1
 800b384:	441a      	add	r2, r3
 800b386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b392:	2b0f      	cmp	r3, #15
 800b394:	d916      	bls.n	800b3c4 <UART_SetConfig+0x348>
 800b396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b39c:	d212      	bcs.n	800b3c4 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b39e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	f023 030f 	bic.w	r3, r3, #15
 800b3a6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3aa:	085b      	lsrs	r3, r3, #1
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	f003 0307 	and.w	r3, r3, #7
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b3c0:	60da      	str	r2, [r3, #12]
 800b3c2:	e031      	b.n	800b428 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b3ca:	e02d      	b.n	800b428 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b3cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	469a      	mov	sl, r3
 800b3d2:	4693      	mov	fp, r2
 800b3d4:	4650      	mov	r0, sl
 800b3d6:	4659      	mov	r1, fp
 800b3d8:	f7fc fc1a 	bl	8007c10 <HAL_RCCEx_GetPeriphCLKFreq>
 800b3dc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b3de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d021      	beq.n	800b428 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3e8:	4a1a      	ldr	r2, [pc, #104]	@ (800b454 <UART_SetConfig+0x3d8>)
 800b3ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3f2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	085b      	lsrs	r3, r3, #1
 800b3fc:	441a      	add	r2, r3
 800b3fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	fbb2 f3f3 	udiv	r3, r2, r3
 800b406:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b40a:	2b0f      	cmp	r3, #15
 800b40c:	d909      	bls.n	800b422 <UART_SetConfig+0x3a6>
 800b40e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b414:	d205      	bcs.n	800b422 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b418:	b29a      	uxth	r2, r3
 800b41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	60da      	str	r2, [r3, #12]
 800b420:	e002      	b.n	800b428 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b422:	2301      	movs	r3, #1
 800b424:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b42a:	2201      	movs	r2, #1
 800b42c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b432:	2201      	movs	r2, #1
 800b434:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b43a:	2200      	movs	r2, #0
 800b43c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b440:	2200      	movs	r2, #0
 800b442:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b444:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3750      	adds	r7, #80	@ 0x50
 800b44c:	46bd      	mov	sp, r7
 800b44e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b452:	bf00      	nop
 800b454:	080113bc 	.word	0x080113bc

0800b458 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b464:	f003 0308 	and.w	r3, r3, #8
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00a      	beq.n	800b482 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	430a      	orrs	r2, r1
 800b480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b486:	f003 0301 	and.w	r3, r3, #1
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00a      	beq.n	800b4a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	430a      	orrs	r2, r1
 800b4a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a8:	f003 0302 	and.w	r3, r3, #2
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00a      	beq.n	800b4c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	430a      	orrs	r2, r1
 800b4c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ca:	f003 0304 	and.w	r3, r3, #4
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00a      	beq.n	800b4e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	430a      	orrs	r2, r1
 800b4e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ec:	f003 0310 	and.w	r3, r3, #16
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00a      	beq.n	800b50a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	430a      	orrs	r2, r1
 800b508:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b50e:	f003 0320 	and.w	r3, r3, #32
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00a      	beq.n	800b52c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	430a      	orrs	r2, r1
 800b52a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b534:	2b00      	cmp	r3, #0
 800b536:	d01a      	beq.n	800b56e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	430a      	orrs	r2, r1
 800b54c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b552:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b556:	d10a      	bne.n	800b56e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	430a      	orrs	r2, r1
 800b56c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00a      	beq.n	800b590 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	430a      	orrs	r2, r1
 800b58e:	605a      	str	r2, [r3, #4]
  }
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b098      	sub	sp, #96	@ 0x60
 800b5a0:	af02      	add	r7, sp, #8
 800b5a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5ac:	f7f6 fdae 	bl	800210c <HAL_GetTick>
 800b5b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 0308 	and.w	r3, r3, #8
 800b5bc:	2b08      	cmp	r3, #8
 800b5be:	d12f      	bne.n	800b620 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5c4:	9300      	str	r3, [sp, #0]
 800b5c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f88e 	bl	800b6f0 <UART_WaitOnFlagUntilTimeout>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d022      	beq.n	800b620 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e2:	e853 3f00 	ldrex	r3, [r3]
 800b5e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b5e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b5ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b5fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b600:	e841 2300 	strex	r3, r2, [r1]
 800b604:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1e6      	bne.n	800b5da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2220      	movs	r2, #32
 800b610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e063      	b.n	800b6e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f003 0304 	and.w	r3, r3, #4
 800b62a:	2b04      	cmp	r3, #4
 800b62c:	d149      	bne.n	800b6c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b62e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b636:	2200      	movs	r2, #0
 800b638:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f857 	bl	800b6f0 <UART_WaitOnFlagUntilTimeout>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d03c      	beq.n	800b6c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b650:	e853 3f00 	ldrex	r3, [r3]
 800b654:	623b      	str	r3, [r7, #32]
   return(result);
 800b656:	6a3b      	ldr	r3, [r7, #32]
 800b658:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b65c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	461a      	mov	r2, r3
 800b664:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b666:	633b      	str	r3, [r7, #48]	@ 0x30
 800b668:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b66c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b66e:	e841 2300 	strex	r3, r2, [r1]
 800b672:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1e6      	bne.n	800b648 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	3308      	adds	r3, #8
 800b680:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	e853 3f00 	ldrex	r3, [r3]
 800b688:	60fb      	str	r3, [r7, #12]
   return(result);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f023 0301 	bic.w	r3, r3, #1
 800b690:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	3308      	adds	r3, #8
 800b698:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b69a:	61fa      	str	r2, [r7, #28]
 800b69c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69e:	69b9      	ldr	r1, [r7, #24]
 800b6a0:	69fa      	ldr	r2, [r7, #28]
 800b6a2:	e841 2300 	strex	r3, r2, [r1]
 800b6a6:	617b      	str	r3, [r7, #20]
   return(result);
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1e5      	bne.n	800b67a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2220      	movs	r2, #32
 800b6b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6be:	2303      	movs	r3, #3
 800b6c0:	e012      	b.n	800b6e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2220      	movs	r2, #32
 800b6c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2220      	movs	r2, #32
 800b6ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3758      	adds	r7, #88	@ 0x58
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	603b      	str	r3, [r7, #0]
 800b6fc:	4613      	mov	r3, r2
 800b6fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b700:	e04f      	b.n	800b7a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b708:	d04b      	beq.n	800b7a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b70a:	f7f6 fcff 	bl	800210c <HAL_GetTick>
 800b70e:	4602      	mov	r2, r0
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	1ad3      	subs	r3, r2, r3
 800b714:	69ba      	ldr	r2, [r7, #24]
 800b716:	429a      	cmp	r2, r3
 800b718:	d302      	bcc.n	800b720 <UART_WaitOnFlagUntilTimeout+0x30>
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d101      	bne.n	800b724 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b720:	2303      	movs	r3, #3
 800b722:	e04e      	b.n	800b7c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f003 0304 	and.w	r3, r3, #4
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d037      	beq.n	800b7a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2b80      	cmp	r3, #128	@ 0x80
 800b736:	d034      	beq.n	800b7a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	2b40      	cmp	r3, #64	@ 0x40
 800b73c:	d031      	beq.n	800b7a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	69db      	ldr	r3, [r3, #28]
 800b744:	f003 0308 	and.w	r3, r3, #8
 800b748:	2b08      	cmp	r3, #8
 800b74a:	d110      	bne.n	800b76e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2208      	movs	r2, #8
 800b752:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f000 f838 	bl	800b7ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2208      	movs	r2, #8
 800b75e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2200      	movs	r2, #0
 800b766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e029      	b.n	800b7c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	69db      	ldr	r3, [r3, #28]
 800b774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b778:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b77c:	d111      	bne.n	800b7a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b786:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f000 f81e 	bl	800b7ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2220      	movs	r2, #32
 800b792:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b79e:	2303      	movs	r3, #3
 800b7a0:	e00f      	b.n	800b7c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	69da      	ldr	r2, [r3, #28]
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	bf0c      	ite	eq
 800b7b2:	2301      	moveq	r3, #1
 800b7b4:	2300      	movne	r3, #0
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	79fb      	ldrb	r3, [r7, #7]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d0a0      	beq.n	800b702 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7ca:	b480      	push	{r7}
 800b7cc:	b095      	sub	sp, #84	@ 0x54
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7da:	e853 3f00 	ldrex	r3, [r3]
 800b7de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b7e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b7f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b7f8:	e841 2300 	strex	r3, r2, [r1]
 800b7fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b800:	2b00      	cmp	r3, #0
 800b802:	d1e6      	bne.n	800b7d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	3308      	adds	r3, #8
 800b80a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b80c:	6a3b      	ldr	r3, [r7, #32]
 800b80e:	e853 3f00 	ldrex	r3, [r3]
 800b812:	61fb      	str	r3, [r7, #28]
   return(result);
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b81a:	f023 0301 	bic.w	r3, r3, #1
 800b81e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	3308      	adds	r3, #8
 800b826:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b828:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b82a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b82c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b82e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b830:	e841 2300 	strex	r3, r2, [r1]
 800b834:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d1e3      	bne.n	800b804 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b840:	2b01      	cmp	r3, #1
 800b842:	d118      	bne.n	800b876 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	e853 3f00 	ldrex	r3, [r3]
 800b850:	60bb      	str	r3, [r7, #8]
   return(result);
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	f023 0310 	bic.w	r3, r3, #16
 800b858:	647b      	str	r3, [r7, #68]	@ 0x44
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b862:	61bb      	str	r3, [r7, #24]
 800b864:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b866:	6979      	ldr	r1, [r7, #20]
 800b868:	69ba      	ldr	r2, [r7, #24]
 800b86a:	e841 2300 	strex	r3, r2, [r1]
 800b86e:	613b      	str	r3, [r7, #16]
   return(result);
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1e6      	bne.n	800b844 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2220      	movs	r2, #32
 800b87a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b88a:	bf00      	nop
 800b88c:	3754      	adds	r7, #84	@ 0x54
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b896:	b480      	push	{r7}
 800b898:	b085      	sub	sp, #20
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d101      	bne.n	800b8ac <HAL_UARTEx_DisableFifoMode+0x16>
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	e027      	b.n	800b8fc <HAL_UARTEx_DisableFifoMode+0x66>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2224      	movs	r2, #36	@ 0x24
 800b8b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f022 0201 	bic.w	r2, r2, #1
 800b8d2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b8da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2220      	movs	r2, #32
 800b8ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3714      	adds	r7, #20
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d101      	bne.n	800b920 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b91c:	2302      	movs	r3, #2
 800b91e:	e02d      	b.n	800b97c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2224      	movs	r2, #36	@ 0x24
 800b92c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f022 0201 	bic.w	r2, r2, #1
 800b946:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	683a      	ldr	r2, [r7, #0]
 800b958:	430a      	orrs	r2, r1
 800b95a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 f84f 	bl	800ba00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2220      	movs	r2, #32
 800b96e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2200      	movs	r2, #0
 800b976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b994:	2b01      	cmp	r3, #1
 800b996:	d101      	bne.n	800b99c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b998:	2302      	movs	r3, #2
 800b99a:	e02d      	b.n	800b9f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2224      	movs	r2, #36	@ 0x24
 800b9a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f022 0201 	bic.w	r2, r2, #1
 800b9c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	683a      	ldr	r2, [r7, #0]
 800b9d4:	430a      	orrs	r2, r1
 800b9d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 f811 	bl	800ba00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2220      	movs	r2, #32
 800b9ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b085      	sub	sp, #20
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d108      	bne.n	800ba22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba20:	e031      	b.n	800ba86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba22:	2308      	movs	r3, #8
 800ba24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba26:	2308      	movs	r3, #8
 800ba28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	0e5b      	lsrs	r3, r3, #25
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	f003 0307 	and.w	r3, r3, #7
 800ba38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	0f5b      	lsrs	r3, r3, #29
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	f003 0307 	and.w	r3, r3, #7
 800ba48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba4a:	7bbb      	ldrb	r3, [r7, #14]
 800ba4c:	7b3a      	ldrb	r2, [r7, #12]
 800ba4e:	4911      	ldr	r1, [pc, #68]	@ (800ba94 <UARTEx_SetNbDataToProcess+0x94>)
 800ba50:	5c8a      	ldrb	r2, [r1, r2]
 800ba52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba56:	7b3a      	ldrb	r2, [r7, #12]
 800ba58:	490f      	ldr	r1, [pc, #60]	@ (800ba98 <UARTEx_SetNbDataToProcess+0x98>)
 800ba5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba68:	7bfb      	ldrb	r3, [r7, #15]
 800ba6a:	7b7a      	ldrb	r2, [r7, #13]
 800ba6c:	4909      	ldr	r1, [pc, #36]	@ (800ba94 <UARTEx_SetNbDataToProcess+0x94>)
 800ba6e:	5c8a      	ldrb	r2, [r1, r2]
 800ba70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba74:	7b7a      	ldrb	r2, [r7, #13]
 800ba76:	4908      	ldr	r1, [pc, #32]	@ (800ba98 <UARTEx_SetNbDataToProcess+0x98>)
 800ba78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ba86:	bf00      	nop
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	080113d4 	.word	0x080113d4
 800ba98:	080113dc 	.word	0x080113dc

0800ba9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baa8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bab4:	f043 0201 	orr.w	r2, r3, #1
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	370c      	adds	r7, #12
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800baca:	b084      	sub	sp, #16
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	f107 001c 	add.w	r0, r7, #28
 800bad8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d101      	bne.n	800bae6 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800bae2:	2301      	movs	r3, #1
 800bae4:	e008      	b.n	800baf8 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f7ff ffd8 	bl	800ba9c <USB_CoreReset>
 800baec:	4603      	mov	r3, r0
 800baee:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800baf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb02:	b004      	add	sp, #16
 800bb04:	4770      	bx	lr

0800bb06 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bb06:	b480      	push	{r7}
 800bb08:	b085      	sub	sp, #20
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bb14:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bb18:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3714      	adds	r7, #20
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bb2e:	b480      	push	{r7}
 800bb30:	b085      	sub	sp, #20
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bb36:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bb3a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	43db      	mvns	r3, r3
 800bb44:	401a      	ands	r2, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3714      	adds	r7, #20
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	460b      	mov	r3, r1
 800bb62:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800bb64:	78fb      	ldrb	r3, [r7, #3]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d106      	bne.n	800bb78 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb6e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	641a      	str	r2, [r3, #64]	@ 0x40
 800bb76:	e00b      	b.n	800bb90 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800bb78:	78fb      	ldrb	r3, [r7, #3]
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d106      	bne.n	800bb8c <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb82:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	641a      	str	r2, [r3, #64]	@ 0x40
 800bb8a:	e001      	b.n	800bb90 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e000      	b.n	800bb92 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800bb9e:	b084      	sub	sp, #16
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	f107 001c 	add.w	r0, r7, #28
 800bbac:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbba:	f023 0201 	bic.w	r2, r3, #1
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f7ff ffc7 	bl	800bb58 <USB_SetCurrentMode>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800bbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbe0:	b004      	add	sp, #16
 800bbe2:	4770      	bx	lr

0800bbe4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b09f      	sub	sp, #124	@ 0x7c
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	4413      	add	r3, r2
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	4ba0      	ldr	r3, [pc, #640]	@ (800be84 <USB_ActivateEndpoint+0x2a0>)
 800bc02:	4013      	ands	r3, r2
 800bc04:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	78db      	ldrb	r3, [r3, #3]
 800bc0a:	2b03      	cmp	r3, #3
 800bc0c:	d819      	bhi.n	800bc42 <USB_ActivateEndpoint+0x5e>
 800bc0e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc14 <USB_ActivateEndpoint+0x30>)
 800bc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc14:	0800bc25 	.word	0x0800bc25
 800bc18:	0800bc39 	.word	0x0800bc39
 800bc1c:	0800bc4b 	.word	0x0800bc4b
 800bc20:	0800bc2f 	.word	0x0800bc2f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bc24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bc2a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800bc2c:	e00e      	b.n	800bc4c <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bc2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc30:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bc34:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800bc36:	e009      	b.n	800bc4c <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bc38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bc3e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800bc40:	e004      	b.n	800bc4c <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800bc48:	e000      	b.n	800bc4c <USB_ActivateEndpoint+0x68>
      break;
 800bc4a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	441a      	add	r2, r3
 800bc56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc60:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	4413      	add	r3, r2
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	4b86      	ldr	r3, [pc, #536]	@ (800be88 <USB_ActivateEndpoint+0x2a4>)
 800bc70:	4013      	ands	r3, r2
 800bc72:	683a      	ldr	r2, [r7, #0]
 800bc74:	7812      	ldrb	r2, [r2, #0]
 800bc76:	4313      	orrs	r3, r2
 800bc78:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	441a      	add	r2, r3
 800bc84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bc86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc8e:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	7b1b      	ldrb	r3, [r3, #12]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f040 8177 	bne.w	800bf88 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	785b      	ldrb	r3, [r3, #1]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d079      	beq.n	800bd96 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	00db      	lsls	r3, r3, #3
 800bca8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bcac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	00db      	lsls	r3, r3, #3
 800bcb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bcbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bcc0:	0c12      	lsrs	r2, r2, #16
 800bcc2:	0412      	lsls	r2, r2, #16
 800bcc4:	601a      	str	r2, [r3, #0]
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	00db      	lsls	r3, r3, #3
 800bccc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bcd0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bcd4:	6819      	ldr	r1, [r3, #0]
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	88db      	ldrh	r3, [r3, #6]
 800bcda:	089b      	lsrs	r3, r3, #2
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	009a      	lsls	r2, r3, #2
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	00db      	lsls	r3, r3, #3
 800bce6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bcea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bcee:	430a      	orrs	r2, r1
 800bcf0:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	4413      	add	r3, r2
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	61bb      	str	r3, [r7, #24]
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d013      	beq.n	800bd32 <USB_ActivateEndpoint+0x14e>
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	4b5c      	ldr	r3, [pc, #368]	@ (800be88 <USB_ActivateEndpoint+0x2a4>)
 800bd18:	4013      	ands	r3, r2
 800bd1a:	617b      	str	r3, [r7, #20]
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	441a      	add	r2, r3
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bd30:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	78db      	ldrb	r3, [r3, #3]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d018      	beq.n	800bd6c <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4413      	add	r3, r2
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	4b51      	ldr	r3, [pc, #324]	@ (800be8c <USB_ActivateEndpoint+0x2a8>)
 800bd48:	4013      	ands	r3, r2
 800bd4a:	60fb      	str	r3, [r7, #12]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f083 0320 	eor.w	r3, r3, #32
 800bd52:	60fb      	str	r3, [r7, #12]
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	441a      	add	r2, r3
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd68:	6013      	str	r3, [r2, #0]
 800bd6a:	e28c      	b.n	800c286 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4413      	add	r3, r2
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	4b44      	ldr	r3, [pc, #272]	@ (800be8c <USB_ActivateEndpoint+0x2a8>)
 800bd7a:	4013      	ands	r3, r2
 800bd7c:	613b      	str	r3, [r7, #16]
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	441a      	add	r2, r3
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd92:	6013      	str	r3, [r2, #0]
 800bd94:	e277      	b.n	800c286 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	00db      	lsls	r3, r3, #3
 800bd9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bda0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bda4:	685a      	ldr	r2, [r3, #4]
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	00db      	lsls	r3, r3, #3
 800bdac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bdb4:	0c12      	lsrs	r2, r2, #16
 800bdb6:	0412      	lsls	r2, r2, #16
 800bdb8:	605a      	str	r2, [r3, #4]
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	00db      	lsls	r3, r3, #3
 800bdc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdc4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bdc8:	6859      	ldr	r1, [r3, #4]
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	88db      	ldrh	r3, [r3, #6]
 800bdce:	089b      	lsrs	r3, r3, #2
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	009a      	lsls	r2, r3, #2
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	00db      	lsls	r3, r3, #3
 800bdda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdde:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bde2:	430a      	orrs	r2, r1
 800bde4:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	00db      	lsls	r3, r3, #3
 800bdec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdf0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bdf4:	685a      	ldr	r2, [r3, #4]
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	00db      	lsls	r3, r3, #3
 800bdfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be04:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800be08:	605a      	str	r2, [r3, #4]
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d112      	bne.n	800be38 <USB_ActivateEndpoint+0x254>
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	00db      	lsls	r3, r3, #3
 800be18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be20:	685a      	ldr	r2, [r3, #4]
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	00db      	lsls	r3, r3, #3
 800be28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be30:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800be34:	605a      	str	r2, [r3, #4]
 800be36:	e04d      	b.n	800bed4 <USB_ActivateEndpoint+0x2f0>
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	2b3e      	cmp	r3, #62	@ 0x3e
 800be3e:	d827      	bhi.n	800be90 <USB_ActivateEndpoint+0x2ac>
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	691b      	ldr	r3, [r3, #16]
 800be44:	085b      	lsrs	r3, r3, #1
 800be46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	691b      	ldr	r3, [r3, #16]
 800be4c:	f003 0301 	and.w	r3, r3, #1
 800be50:	2b00      	cmp	r3, #0
 800be52:	d002      	beq.n	800be5a <USB_ActivateEndpoint+0x276>
 800be54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be56:	3301      	adds	r3, #1
 800be58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	00db      	lsls	r3, r3, #3
 800be60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be68:	6859      	ldr	r1, [r3, #4]
 800be6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be6c:	069a      	lsls	r2, r3, #26
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	00db      	lsls	r3, r3, #3
 800be74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be7c:	430a      	orrs	r2, r1
 800be7e:	605a      	str	r2, [r3, #4]
 800be80:	e028      	b.n	800bed4 <USB_ActivateEndpoint+0x2f0>
 800be82:	bf00      	nop
 800be84:	07ff898f 	.word	0x07ff898f
 800be88:	07ff8f8f 	.word	0x07ff8f8f
 800be8c:	07ff8fbf 	.word	0x07ff8fbf
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	691b      	ldr	r3, [r3, #16]
 800be94:	095b      	lsrs	r3, r3, #5
 800be96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	691b      	ldr	r3, [r3, #16]
 800be9c:	f003 031f 	and.w	r3, r3, #31
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d102      	bne.n	800beaa <USB_ActivateEndpoint+0x2c6>
 800bea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bea6:	3b01      	subs	r3, #1
 800bea8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	00db      	lsls	r3, r3, #3
 800beb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800beb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bebc:	069b      	lsls	r3, r3, #26
 800bebe:	431a      	orrs	r2, r3
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	00db      	lsls	r3, r3, #3
 800bec6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800beca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bece:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bed2:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4413      	add	r3, r2
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d013      	beq.n	800bf14 <USB_ActivateEndpoint+0x330>
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	4413      	add	r3, r2
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	4b9c      	ldr	r3, [pc, #624]	@ (800c16c <USB_ActivateEndpoint+0x588>)
 800befa:	4013      	ands	r3, r2
 800befc:	627b      	str	r3, [r7, #36]	@ 0x24
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	441a      	add	r2, r3
 800bf08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bf0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf12:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d11c      	bne.n	800bf56 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	4413      	add	r3, r2
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	4b91      	ldr	r3, [pc, #580]	@ (800c170 <USB_ActivateEndpoint+0x58c>)
 800bf2a:	4013      	ands	r3, r2
 800bf2c:	61fb      	str	r3, [r7, #28]
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bf34:	61fb      	str	r3, [r7, #28]
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bf3c:	61fb      	str	r3, [r7, #28]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	441a      	add	r2, r3
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf52:	6013      	str	r3, [r2, #0]
 800bf54:	e197      	b.n	800c286 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4413      	add	r3, r2
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	4b83      	ldr	r3, [pc, #524]	@ (800c170 <USB_ActivateEndpoint+0x58c>)
 800bf64:	4013      	ands	r3, r2
 800bf66:	623b      	str	r3, [r7, #32]
 800bf68:	6a3b      	ldr	r3, [r7, #32]
 800bf6a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bf6e:	623b      	str	r3, [r7, #32]
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	441a      	add	r2, r3
 800bf7a:	6a3b      	ldr	r3, [r7, #32]
 800bf7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf84:	6013      	str	r3, [r2, #0]
 800bf86:	e17e      	b.n	800c286 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	78db      	ldrb	r3, [r3, #3]
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	d114      	bne.n	800bfba <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	4413      	add	r3, r2
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	4b73      	ldr	r3, [pc, #460]	@ (800c16c <USB_ActivateEndpoint+0x588>)
 800bf9e:	4013      	ands	r3, r2
 800bfa0:	663b      	str	r3, [r7, #96]	@ 0x60
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	441a      	add	r2, r3
 800bfac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bfae:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800bfb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfb6:	6013      	str	r3, [r2, #0]
 800bfb8:	e013      	b.n	800bfe2 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	4413      	add	r3, r2
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	4b6b      	ldr	r3, [pc, #428]	@ (800c174 <USB_ActivateEndpoint+0x590>)
 800bfc8:	4013      	ands	r3, r2
 800bfca:	667b      	str	r3, [r7, #100]	@ 0x64
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	441a      	add	r2, r3
 800bfd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfe0:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	00db      	lsls	r3, r3, #3
 800bfe8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bfec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	00db      	lsls	r3, r3, #3
 800bff8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bffc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c000:	0c12      	lsrs	r2, r2, #16
 800c002:	0412      	lsls	r2, r2, #16
 800c004:	601a      	str	r2, [r3, #0]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	00db      	lsls	r3, r3, #3
 800c00c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c010:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c014:	6819      	ldr	r1, [r3, #0]
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	891b      	ldrh	r3, [r3, #8]
 800c01a:	089b      	lsrs	r3, r3, #2
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	009a      	lsls	r2, r3, #2
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	00db      	lsls	r3, r3, #3
 800c026:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c02a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c02e:	430a      	orrs	r2, r1
 800c030:	601a      	str	r2, [r3, #0]
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	00db      	lsls	r3, r3, #3
 800c038:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c03c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c040:	685a      	ldr	r2, [r3, #4]
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	00db      	lsls	r3, r3, #3
 800c048:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c04c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c050:	0c12      	lsrs	r2, r2, #16
 800c052:	0412      	lsls	r2, r2, #16
 800c054:	605a      	str	r2, [r3, #4]
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	00db      	lsls	r3, r3, #3
 800c05c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c060:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c064:	6859      	ldr	r1, [r3, #4]
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	895b      	ldrh	r3, [r3, #10]
 800c06a:	089b      	lsrs	r3, r3, #2
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	009a      	lsls	r2, r3, #2
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	00db      	lsls	r3, r3, #3
 800c076:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c07a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c07e:	430a      	orrs	r2, r1
 800c080:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	785b      	ldrb	r3, [r3, #1]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d178      	bne.n	800c17c <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	4413      	add	r3, r2
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	643b      	str	r3, [r7, #64]	@ 0x40
 800c098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c09a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d013      	beq.n	800c0ca <USB_ActivateEndpoint+0x4e6>
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	4413      	add	r3, r2
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	4b2f      	ldr	r3, [pc, #188]	@ (800c16c <USB_ActivateEndpoint+0x588>)
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	441a      	add	r2, r3
 800c0be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c0c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0c8:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4413      	add	r3, r2
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d013      	beq.n	800c10a <USB_ActivateEndpoint+0x526>
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	4413      	add	r3, r2
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	4b1f      	ldr	r3, [pc, #124]	@ (800c16c <USB_ActivateEndpoint+0x588>)
 800c0f0:	4013      	ands	r3, r2
 800c0f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	441a      	add	r2, r3
 800c0fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c100:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c104:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c108:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	4b16      	ldr	r3, [pc, #88]	@ (800c170 <USB_ActivateEndpoint+0x58c>)
 800c118:	4013      	ands	r3, r2
 800c11a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c11e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c122:	633b      	str	r3, [r7, #48]	@ 0x30
 800c124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c126:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c12a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	441a      	add	r2, r3
 800c136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c13c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c140:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	4413      	add	r3, r2
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	4b0a      	ldr	r3, [pc, #40]	@ (800c178 <USB_ActivateEndpoint+0x594>)
 800c150:	4013      	ands	r3, r2
 800c152:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	441a      	add	r2, r3
 800c15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c160:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c168:	6013      	str	r3, [r2, #0]
 800c16a:	e08c      	b.n	800c286 <USB_ActivateEndpoint+0x6a2>
 800c16c:	07ff8f8f 	.word	0x07ff8f8f
 800c170:	07ffbf8f 	.word	0x07ffbf8f
 800c174:	07ff8e8f 	.word	0x07ff8e8f
 800c178:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	4413      	add	r3, r2
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c18a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c18c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c190:	2b00      	cmp	r3, #0
 800c192:	d013      	beq.n	800c1bc <USB_ActivateEndpoint+0x5d8>
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4413      	add	r3, r2
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	4b3d      	ldr	r3, [pc, #244]	@ (800c298 <USB_ActivateEndpoint+0x6b4>)
 800c1a2:	4013      	ands	r3, r2
 800c1a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	441a      	add	r2, r3
 800c1b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c1b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1ba:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4413      	add	r3, r2
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d013      	beq.n	800c1fc <USB_ActivateEndpoint+0x618>
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	4b2d      	ldr	r3, [pc, #180]	@ (800c298 <USB_ActivateEndpoint+0x6b4>)
 800c1e2:	4013      	ands	r3, r2
 800c1e4:	653b      	str	r3, [r7, #80]	@ 0x50
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	441a      	add	r2, r3
 800c1f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c1fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	78db      	ldrb	r3, [r3, #3]
 800c200:	2b01      	cmp	r3, #1
 800c202:	d018      	beq.n	800c236 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4413      	add	r3, r2
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	4b22      	ldr	r3, [pc, #136]	@ (800c29c <USB_ActivateEndpoint+0x6b8>)
 800c212:	4013      	ands	r3, r2
 800c214:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c218:	f083 0320 	eor.w	r3, r3, #32
 800c21c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	441a      	add	r2, r3
 800c228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c22a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c22e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c232:	6013      	str	r3, [r2, #0]
 800c234:	e013      	b.n	800c25e <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	4413      	add	r3, r2
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	4b16      	ldr	r3, [pc, #88]	@ (800c29c <USB_ActivateEndpoint+0x6b8>)
 800c244:	4013      	ands	r3, r2
 800c246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	441a      	add	r2, r3
 800c252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c254:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c25c:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	4413      	add	r3, r2
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	4b0d      	ldr	r3, [pc, #52]	@ (800c2a0 <USB_ActivateEndpoint+0x6bc>)
 800c26c:	4013      	ands	r3, r2
 800c26e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	441a      	add	r2, r3
 800c27a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c27c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c284:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c286:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	377c      	adds	r7, #124	@ 0x7c
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr
 800c296:	bf00      	nop
 800c298:	07ff8f8f 	.word	0x07ff8f8f
 800c29c:	07ff8fbf 	.word	0x07ff8fbf
 800c2a0:	07ffbf8f 	.word	0x07ffbf8f

0800c2a4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b097      	sub	sp, #92	@ 0x5c
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	7b1b      	ldrb	r3, [r3, #12]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d16d      	bne.n	800c392 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	785b      	ldrb	r3, [r3, #1]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d034      	beq.n	800c328 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	4413      	add	r3, r2
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	613b      	str	r3, [r7, #16]
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d013      	beq.n	800c2fe <USB_DeactivateEndpoint+0x5a>
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	4413      	add	r3, r2
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	4b6d      	ldr	r3, [pc, #436]	@ (800c498 <USB_DeactivateEndpoint+0x1f4>)
 800c2e4:	4013      	ands	r3, r2
 800c2e6:	60fb      	str	r3, [r7, #12]
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	441a      	add	r2, r3
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c2fc:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	4413      	add	r3, r2
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	4b64      	ldr	r3, [pc, #400]	@ (800c49c <USB_DeactivateEndpoint+0x1f8>)
 800c30c:	4013      	ands	r3, r2
 800c30e:	60bb      	str	r3, [r7, #8]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	009b      	lsls	r3, r3, #2
 800c318:	441a      	add	r2, r3
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c324:	6013      	str	r3, [r2, #0]
 800c326:	e139      	b.n	800c59c <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	4413      	add	r3, r2
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	61fb      	str	r3, [r7, #28]
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d013      	beq.n	800c368 <USB_DeactivateEndpoint+0xc4>
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	4413      	add	r3, r2
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	4b52      	ldr	r3, [pc, #328]	@ (800c498 <USB_DeactivateEndpoint+0x1f4>)
 800c34e:	4013      	ands	r3, r2
 800c350:	61bb      	str	r3, [r7, #24]
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	441a      	add	r2, r3
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c366:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	4413      	add	r3, r2
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	4b4a      	ldr	r3, [pc, #296]	@ (800c4a0 <USB_DeactivateEndpoint+0x1fc>)
 800c376:	4013      	ands	r3, r2
 800c378:	617b      	str	r3, [r7, #20]
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	441a      	add	r2, r3
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c38a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c38e:	6013      	str	r3, [r2, #0]
 800c390:	e104      	b.n	800c59c <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	785b      	ldrb	r3, [r3, #1]
 800c396:	2b00      	cmp	r3, #0
 800c398:	f040 8084 	bne.w	800c4a4 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d013      	beq.n	800c3dc <USB_DeactivateEndpoint+0x138>
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	4413      	add	r3, r2
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	4b35      	ldr	r3, [pc, #212]	@ (800c498 <USB_DeactivateEndpoint+0x1f4>)
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	441a      	add	r2, r3
 800c3d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c3d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3da:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	4413      	add	r3, r2
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d013      	beq.n	800c41c <USB_DeactivateEndpoint+0x178>
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	4b25      	ldr	r3, [pc, #148]	@ (800c498 <USB_DeactivateEndpoint+0x1f4>)
 800c402:	4013      	ands	r3, r2
 800c404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	441a      	add	r2, r3
 800c410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c416:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c41a:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	4413      	add	r3, r2
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	4b1b      	ldr	r3, [pc, #108]	@ (800c498 <USB_DeactivateEndpoint+0x1f4>)
 800c42a:	4013      	ands	r3, r2
 800c42c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	441a      	add	r2, r3
 800c438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c43e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c442:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	4413      	add	r3, r2
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	4b13      	ldr	r3, [pc, #76]	@ (800c4a0 <USB_DeactivateEndpoint+0x1fc>)
 800c452:	4013      	ands	r3, r2
 800c454:	627b      	str	r3, [r7, #36]	@ 0x24
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	441a      	add	r2, r3
 800c460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c462:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c46a:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	4413      	add	r3, r2
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	4b08      	ldr	r3, [pc, #32]	@ (800c49c <USB_DeactivateEndpoint+0x1f8>)
 800c47a:	4013      	ands	r3, r2
 800c47c:	623b      	str	r3, [r7, #32]
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	441a      	add	r2, r3
 800c488:	6a3b      	ldr	r3, [r7, #32]
 800c48a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c48e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c492:	6013      	str	r3, [r2, #0]
 800c494:	e082      	b.n	800c59c <USB_DeactivateEndpoint+0x2f8>
 800c496:	bf00      	nop
 800c498:	07ff8f8f 	.word	0x07ff8f8f
 800c49c:	07ff8fbf 	.word	0x07ff8fbf
 800c4a0:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	657b      	str	r3, [r7, #84]	@ 0x54
 800c4b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d013      	beq.n	800c4e4 <USB_DeactivateEndpoint+0x240>
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	4413      	add	r3, r2
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	4b38      	ldr	r3, [pc, #224]	@ (800c5ac <USB_DeactivateEndpoint+0x308>)
 800c4ca:	4013      	ands	r3, r2
 800c4cc:	653b      	str	r3, [r7, #80]	@ 0x50
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	441a      	add	r2, r3
 800c4d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c4de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4e2:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	4413      	add	r3, r2
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d013      	beq.n	800c524 <USB_DeactivateEndpoint+0x280>
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	4413      	add	r3, r2
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	4b28      	ldr	r3, [pc, #160]	@ (800c5ac <USB_DeactivateEndpoint+0x308>)
 800c50a:	4013      	ands	r3, r2
 800c50c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	009b      	lsls	r3, r3, #2
 800c516:	441a      	add	r2, r3
 800c518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c51a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c51e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c522:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	4413      	add	r3, r2
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	4b1e      	ldr	r3, [pc, #120]	@ (800c5ac <USB_DeactivateEndpoint+0x308>)
 800c532:	4013      	ands	r3, r2
 800c534:	647b      	str	r3, [r7, #68]	@ 0x44
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	441a      	add	r2, r3
 800c540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c542:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c54a:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	4413      	add	r3, r2
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	4b15      	ldr	r3, [pc, #84]	@ (800c5b0 <USB_DeactivateEndpoint+0x30c>)
 800c55a:	4013      	ands	r3, r2
 800c55c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	441a      	add	r2, r3
 800c568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c56a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c56e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c572:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	4413      	add	r3, r2
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	4b0c      	ldr	r3, [pc, #48]	@ (800c5b4 <USB_DeactivateEndpoint+0x310>)
 800c582:	4013      	ands	r3, r2
 800c584:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	441a      	add	r2, r3
 800c590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c59a:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	375c      	adds	r7, #92	@ 0x5c
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr
 800c5aa:	bf00      	nop
 800c5ac:	07ff8f8f 	.word	0x07ff8f8f
 800c5b0:	07ff8fbf 	.word	0x07ff8fbf
 800c5b4:	07ffbf8f 	.word	0x07ffbf8f

0800c5b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b096      	sub	sp, #88	@ 0x58
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	785b      	ldrb	r3, [r3, #1]
 800c5c6:	2b01      	cmp	r3, #1
 800c5c8:	f040 84ed 	bne.w	800cfa6 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	699a      	ldr	r2, [r3, #24]
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	691b      	ldr	r3, [r3, #16]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d903      	bls.n	800c5e0 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	691b      	ldr	r3, [r3, #16]
 800c5dc:	657b      	str	r3, [r7, #84]	@ 0x54
 800c5de:	e002      	b.n	800c5e6 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	699b      	ldr	r3, [r3, #24]
 800c5e4:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	7b1b      	ldrb	r3, [r3, #12]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d12e      	bne.n	800c64c <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	6959      	ldr	r1, [r3, #20]
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	88da      	ldrh	r2, [r3, #6]
 800c5f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f001 f963 	bl	800d8c6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	00db      	lsls	r3, r3, #3
 800c606:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c60a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	00db      	lsls	r3, r3, #3
 800c616:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c61a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c61e:	b292      	uxth	r2, r2
 800c620:	601a      	str	r2, [r3, #0]
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	00db      	lsls	r3, r3, #3
 800c628:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c62c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c630:	6819      	ldr	r1, [r3, #0]
 800c632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c634:	041a      	lsls	r2, r3, #16
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	00db      	lsls	r3, r3, #3
 800c63c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c640:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c644:	430a      	orrs	r2, r1
 800c646:	601a      	str	r2, [r3, #0]
 800c648:	f000 bc90 	b.w	800cf6c <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	78db      	ldrb	r3, [r3, #3]
 800c650:	2b02      	cmp	r3, #2
 800c652:	f040 8332 	bne.w	800ccba <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	6a1a      	ldr	r2, [r3, #32]
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	429a      	cmp	r2, r3
 800c660:	f240 82e4 	bls.w	800cc2c <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	4413      	add	r3, r2
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	4ba4      	ldr	r3, [pc, #656]	@ (800c904 <USB_EPStartXfer+0x34c>)
 800c672:	4013      	ands	r3, r2
 800c674:	613b      	str	r3, [r7, #16]
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	441a      	add	r2, r3
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c68a:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	6a1a      	ldr	r2, [r3, #32]
 800c690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c692:	1ad2      	subs	r2, r2, r3
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	f000 8161 	beq.w	800c970 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	785b      	ldrb	r3, [r3, #1]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d16a      	bne.n	800c78c <USB_EPStartXfer+0x1d4>
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	00db      	lsls	r3, r3, #3
 800c6bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6c4:	685a      	ldr	r2, [r3, #4]
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	00db      	lsls	r3, r3, #3
 800c6cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6d4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c6d8:	605a      	str	r2, [r3, #4]
 800c6da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d112      	bne.n	800c706 <USB_EPStartXfer+0x14e>
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	00db      	lsls	r3, r3, #3
 800c6e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6ee:	685a      	ldr	r2, [r3, #4]
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	00db      	lsls	r3, r3, #3
 800c6f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6fe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c702:	605a      	str	r2, [r3, #4]
 800c704:	e06a      	b.n	800c7dc <USB_EPStartXfer+0x224>
 800c706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c708:	2b3e      	cmp	r3, #62	@ 0x3e
 800c70a:	d81e      	bhi.n	800c74a <USB_EPStartXfer+0x192>
 800c70c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c70e:	085b      	lsrs	r3, r3, #1
 800c710:	653b      	str	r3, [r7, #80]	@ 0x50
 800c712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c714:	f003 0301 	and.w	r3, r3, #1
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d002      	beq.n	800c722 <USB_EPStartXfer+0x16a>
 800c71c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c71e:	3301      	adds	r3, #1
 800c720:	653b      	str	r3, [r7, #80]	@ 0x50
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	00db      	lsls	r3, r3, #3
 800c728:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c72c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c730:	6859      	ldr	r1, [r3, #4]
 800c732:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c734:	069a      	lsls	r2, r3, #26
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	00db      	lsls	r3, r3, #3
 800c73c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c740:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c744:	430a      	orrs	r2, r1
 800c746:	605a      	str	r2, [r3, #4]
 800c748:	e048      	b.n	800c7dc <USB_EPStartXfer+0x224>
 800c74a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c74c:	095b      	lsrs	r3, r3, #5
 800c74e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c752:	f003 031f 	and.w	r3, r3, #31
 800c756:	2b00      	cmp	r3, #0
 800c758:	d102      	bne.n	800c760 <USB_EPStartXfer+0x1a8>
 800c75a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c75c:	3b01      	subs	r3, #1
 800c75e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	00db      	lsls	r3, r3, #3
 800c766:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c76a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c76e:	685a      	ldr	r2, [r3, #4]
 800c770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c772:	069b      	lsls	r3, r3, #26
 800c774:	431a      	orrs	r2, r3
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	00db      	lsls	r3, r3, #3
 800c77c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c780:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c784:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c788:	605a      	str	r2, [r3, #4]
 800c78a:	e027      	b.n	800c7dc <USB_EPStartXfer+0x224>
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	785b      	ldrb	r3, [r3, #1]
 800c790:	2b01      	cmp	r3, #1
 800c792:	d123      	bne.n	800c7dc <USB_EPStartXfer+0x224>
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	00db      	lsls	r3, r3, #3
 800c79a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c79e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7a2:	685a      	ldr	r2, [r3, #4]
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	00db      	lsls	r3, r3, #3
 800c7aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7b2:	b292      	uxth	r2, r2
 800c7b4:	605a      	str	r2, [r3, #4]
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7c4:	6859      	ldr	r1, [r3, #4]
 800c7c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7c8:	041a      	lsls	r2, r3, #16
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	00db      	lsls	r3, r3, #3
 800c7d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7d8:	430a      	orrs	r2, r1
 800c7da:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	895b      	ldrh	r3, [r3, #10]
 800c7e0:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	6959      	ldr	r1, [r3, #20]
 800c7e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	8b7a      	ldrh	r2, [r7, #26]
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f001 f86a 	bl	800d8c6 <USB_WritePMA>
            ep->xfer_buff += len;
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	695a      	ldr	r2, [r3, #20]
 800c7f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7f8:	441a      	add	r2, r3
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	6a1a      	ldr	r2, [r3, #32]
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	429a      	cmp	r2, r3
 800c808:	d906      	bls.n	800c818 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	6a1a      	ldr	r2, [r3, #32]
 800c80e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c810:	1ad2      	subs	r2, r2, r3
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	621a      	str	r2, [r3, #32]
 800c816:	e005      	b.n	800c824 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	6a1b      	ldr	r3, [r3, #32]
 800c81c:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	2200      	movs	r2, #0
 800c822:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	785b      	ldrb	r3, [r3, #1]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d16d      	bne.n	800c908 <USB_EPStartXfer+0x350>
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	00db      	lsls	r3, r3, #3
 800c832:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c836:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	00db      	lsls	r3, r3, #3
 800c842:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c846:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c84a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c84e:	601a      	str	r2, [r3, #0]
 800c850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c852:	2b00      	cmp	r3, #0
 800c854:	d112      	bne.n	800c87c <USB_EPStartXfer+0x2c4>
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	00db      	lsls	r3, r3, #3
 800c85c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c860:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	00db      	lsls	r3, r3, #3
 800c86c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c870:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c874:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c878:	601a      	str	r2, [r3, #0]
 800c87a:	e06d      	b.n	800c958 <USB_EPStartXfer+0x3a0>
 800c87c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c87e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c880:	d81e      	bhi.n	800c8c0 <USB_EPStartXfer+0x308>
 800c882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c884:	085b      	lsrs	r3, r3, #1
 800c886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c88a:	f003 0301 	and.w	r3, r3, #1
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d002      	beq.n	800c898 <USB_EPStartXfer+0x2e0>
 800c892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c894:	3301      	adds	r3, #1
 800c896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	00db      	lsls	r3, r3, #3
 800c89e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8a6:	6819      	ldr	r1, [r3, #0]
 800c8a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8aa:	069a      	lsls	r2, r3, #26
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	00db      	lsls	r3, r3, #3
 800c8b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8ba:	430a      	orrs	r2, r1
 800c8bc:	601a      	str	r2, [r3, #0]
 800c8be:	e04b      	b.n	800c958 <USB_EPStartXfer+0x3a0>
 800c8c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8c2:	095b      	lsrs	r3, r3, #5
 800c8c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8c8:	f003 031f 	and.w	r3, r3, #31
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d102      	bne.n	800c8d6 <USB_EPStartXfer+0x31e>
 800c8d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	00db      	lsls	r3, r3, #3
 800c8dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8e8:	069b      	lsls	r3, r3, #26
 800c8ea:	431a      	orrs	r2, r3
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	00db      	lsls	r3, r3, #3
 800c8f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c8fe:	601a      	str	r2, [r3, #0]
 800c900:	e02a      	b.n	800c958 <USB_EPStartXfer+0x3a0>
 800c902:	bf00      	nop
 800c904:	07ff8f8f 	.word	0x07ff8f8f
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	785b      	ldrb	r3, [r3, #1]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d123      	bne.n	800c958 <USB_EPStartXfer+0x3a0>
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	00db      	lsls	r3, r3, #3
 800c916:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c91a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	00db      	lsls	r3, r3, #3
 800c926:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c92a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c92e:	b292      	uxth	r2, r2
 800c930:	601a      	str	r2, [r3, #0]
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	00db      	lsls	r3, r3, #3
 800c938:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c93c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c940:	6819      	ldr	r1, [r3, #0]
 800c942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c944:	041a      	lsls	r2, r3, #16
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	00db      	lsls	r3, r3, #3
 800c94c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c950:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c954:	430a      	orrs	r2, r1
 800c956:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	891b      	ldrh	r3, [r3, #8]
 800c95c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	6959      	ldr	r1, [r3, #20]
 800c962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c964:	b29b      	uxth	r3, r3
 800c966:	8b7a      	ldrh	r2, [r7, #26]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 ffac 	bl	800d8c6 <USB_WritePMA>
 800c96e:	e2fd      	b.n	800cf6c <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	785b      	ldrb	r3, [r3, #1]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d16a      	bne.n	800ca4e <USB_EPStartXfer+0x496>
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	00db      	lsls	r3, r3, #3
 800c97e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c982:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	00db      	lsls	r3, r3, #3
 800c98e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c992:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c996:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c99a:	601a      	str	r2, [r3, #0]
 800c99c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d112      	bne.n	800c9c8 <USB_EPStartXfer+0x410>
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	00db      	lsls	r3, r3, #3
 800c9a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	00db      	lsls	r3, r3, #3
 800c9b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9c0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c9c4:	601a      	str	r2, [r3, #0]
 800c9c6:	e06a      	b.n	800ca9e <USB_EPStartXfer+0x4e6>
 800c9c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800c9cc:	d81e      	bhi.n	800ca0c <USB_EPStartXfer+0x454>
 800c9ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9d0:	085b      	lsrs	r3, r3, #1
 800c9d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9d6:	f003 0301 	and.w	r3, r3, #1
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d002      	beq.n	800c9e4 <USB_EPStartXfer+0x42c>
 800c9de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	00db      	lsls	r3, r3, #3
 800c9ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9f2:	6819      	ldr	r1, [r3, #0]
 800c9f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9f6:	069a      	lsls	r2, r3, #26
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	00db      	lsls	r3, r3, #3
 800c9fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca06:	430a      	orrs	r2, r1
 800ca08:	601a      	str	r2, [r3, #0]
 800ca0a:	e048      	b.n	800ca9e <USB_EPStartXfer+0x4e6>
 800ca0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca0e:	095b      	lsrs	r3, r3, #5
 800ca10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca14:	f003 031f 	and.w	r3, r3, #31
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d102      	bne.n	800ca22 <USB_EPStartXfer+0x46a>
 800ca1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	00db      	lsls	r3, r3, #3
 800ca28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca34:	069b      	lsls	r3, r3, #26
 800ca36:	431a      	orrs	r2, r3
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	00db      	lsls	r3, r3, #3
 800ca3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca46:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ca4a:	601a      	str	r2, [r3, #0]
 800ca4c:	e027      	b.n	800ca9e <USB_EPStartXfer+0x4e6>
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	785b      	ldrb	r3, [r3, #1]
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d123      	bne.n	800ca9e <USB_EPStartXfer+0x4e6>
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	00db      	lsls	r3, r3, #3
 800ca5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	00db      	lsls	r3, r3, #3
 800ca6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca74:	b292      	uxth	r2, r2
 800ca76:	601a      	str	r2, [r3, #0]
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	00db      	lsls	r3, r3, #3
 800ca7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca86:	6819      	ldr	r1, [r3, #0]
 800ca88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca8a:	041a      	lsls	r2, r3, #16
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	00db      	lsls	r3, r3, #3
 800ca92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca9a:	430a      	orrs	r2, r1
 800ca9c:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	891b      	ldrh	r3, [r3, #8]
 800caa2:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	6959      	ldr	r1, [r3, #20]
 800caa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caaa:	b29b      	uxth	r3, r3
 800caac:	8b7a      	ldrh	r2, [r7, #26]
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 ff09 	bl	800d8c6 <USB_WritePMA>
            ep->xfer_buff += len;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	695a      	ldr	r2, [r3, #20]
 800cab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caba:	441a      	add	r2, r3
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	6a1a      	ldr	r2, [r3, #32]
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	691b      	ldr	r3, [r3, #16]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d906      	bls.n	800cada <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	6a1a      	ldr	r2, [r3, #32]
 800cad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cad2:	1ad2      	subs	r2, r2, r3
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	621a      	str	r2, [r3, #32]
 800cad8:	e005      	b.n	800cae6 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	6a1b      	ldr	r3, [r3, #32]
 800cade:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	2200      	movs	r2, #0
 800cae4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	785b      	ldrb	r3, [r3, #1]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d16a      	bne.n	800cbc4 <USB_EPStartXfer+0x60c>
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	00db      	lsls	r3, r3, #3
 800caf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caf8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cafc:	685a      	ldr	r2, [r3, #4]
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	00db      	lsls	r3, r3, #3
 800cb04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb0c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cb10:	605a      	str	r2, [r3, #4]
 800cb12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d112      	bne.n	800cb3e <USB_EPStartXfer+0x586>
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	00db      	lsls	r3, r3, #3
 800cb1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb26:	685a      	ldr	r2, [r3, #4]
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	00db      	lsls	r3, r3, #3
 800cb2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb32:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb36:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cb3a:	605a      	str	r2, [r3, #4]
 800cb3c:	e06a      	b.n	800cc14 <USB_EPStartXfer+0x65c>
 800cb3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb40:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb42:	d81e      	bhi.n	800cb82 <USB_EPStartXfer+0x5ca>
 800cb44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb46:	085b      	lsrs	r3, r3, #1
 800cb48:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb4c:	f003 0301 	and.w	r3, r3, #1
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d002      	beq.n	800cb5a <USB_EPStartXfer+0x5a2>
 800cb54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb56:	3301      	adds	r3, #1
 800cb58:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb68:	6859      	ldr	r1, [r3, #4]
 800cb6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb6c:	069a      	lsls	r2, r3, #26
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	00db      	lsls	r3, r3, #3
 800cb74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb7c:	430a      	orrs	r2, r1
 800cb7e:	605a      	str	r2, [r3, #4]
 800cb80:	e048      	b.n	800cc14 <USB_EPStartXfer+0x65c>
 800cb82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb84:	095b      	lsrs	r3, r3, #5
 800cb86:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb8a:	f003 031f 	and.w	r3, r3, #31
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d102      	bne.n	800cb98 <USB_EPStartXfer+0x5e0>
 800cb92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb94:	3b01      	subs	r3, #1
 800cb96:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	00db      	lsls	r3, r3, #3
 800cb9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cba2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cba6:	685a      	ldr	r2, [r3, #4]
 800cba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbaa:	069b      	lsls	r3, r3, #26
 800cbac:	431a      	orrs	r2, r3
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	00db      	lsls	r3, r3, #3
 800cbb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbbc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cbc0:	605a      	str	r2, [r3, #4]
 800cbc2:	e027      	b.n	800cc14 <USB_EPStartXfer+0x65c>
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	785b      	ldrb	r3, [r3, #1]
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d123      	bne.n	800cc14 <USB_EPStartXfer+0x65c>
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	00db      	lsls	r3, r3, #3
 800cbd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbd6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbda:	685a      	ldr	r2, [r3, #4]
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	00db      	lsls	r3, r3, #3
 800cbe2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbe6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbea:	b292      	uxth	r2, r2
 800cbec:	605a      	str	r2, [r3, #4]
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	00db      	lsls	r3, r3, #3
 800cbf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbf8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbfc:	6859      	ldr	r1, [r3, #4]
 800cbfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc00:	041a      	lsls	r2, r3, #16
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	00db      	lsls	r3, r3, #3
 800cc08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc10:	430a      	orrs	r2, r1
 800cc12:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	895b      	ldrh	r3, [r3, #10]
 800cc18:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	6959      	ldr	r1, [r3, #20]
 800cc1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	8b7a      	ldrh	r2, [r7, #26]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 fe4e 	bl	800d8c6 <USB_WritePMA>
 800cc2a:	e19f      	b.n	800cf6c <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	6a1b      	ldr	r3, [r3, #32]
 800cc30:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	4413      	add	r3, r2
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	4ba0      	ldr	r3, [pc, #640]	@ (800cec0 <USB_EPStartXfer+0x908>)
 800cc40:	4013      	ands	r3, r2
 800cc42:	617b      	str	r3, [r7, #20]
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	441a      	add	r2, r3
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc58:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	00db      	lsls	r3, r3, #3
 800cc60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	00db      	lsls	r3, r3, #3
 800cc70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc78:	b292      	uxth	r2, r2
 800cc7a:	601a      	str	r2, [r3, #0]
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	00db      	lsls	r3, r3, #3
 800cc82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc8a:	6819      	ldr	r1, [r3, #0]
 800cc8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc8e:	041a      	lsls	r2, r3, #16
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	00db      	lsls	r3, r3, #3
 800cc96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc9e:	430a      	orrs	r2, r1
 800cca0:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	891b      	ldrh	r3, [r3, #8]
 800cca6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	6959      	ldr	r1, [r3, #20]
 800ccac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	8b7a      	ldrh	r2, [r7, #26]
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 fe07 	bl	800d8c6 <USB_WritePMA>
 800ccb8:	e158      	b.n	800cf6c <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	6a1a      	ldr	r2, [r3, #32]
 800ccbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccc0:	1ad2      	subs	r2, r2, r3
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	4413      	add	r3, r2
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f000 80a3 	beq.w	800ce22 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	785b      	ldrb	r3, [r3, #1]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d16a      	bne.n	800cdba <USB_EPStartXfer+0x802>
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	00db      	lsls	r3, r3, #3
 800ccea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccf2:	685a      	ldr	r2, [r3, #4]
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	00db      	lsls	r3, r3, #3
 800ccfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccfe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd02:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cd06:	605a      	str	r2, [r3, #4]
 800cd08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d112      	bne.n	800cd34 <USB_EPStartXfer+0x77c>
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	00db      	lsls	r3, r3, #3
 800cd14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	00db      	lsls	r3, r3, #3
 800cd24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd2c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cd30:	605a      	str	r2, [r3, #4]
 800cd32:	e06a      	b.n	800ce0a <USB_EPStartXfer+0x852>
 800cd34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd36:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd38:	d81e      	bhi.n	800cd78 <USB_EPStartXfer+0x7c0>
 800cd3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd3c:	085b      	lsrs	r3, r3, #1
 800cd3e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd42:	f003 0301 	and.w	r3, r3, #1
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d002      	beq.n	800cd50 <USB_EPStartXfer+0x798>
 800cd4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	00db      	lsls	r3, r3, #3
 800cd56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd5e:	6859      	ldr	r1, [r3, #4]
 800cd60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd62:	069a      	lsls	r2, r3, #26
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	00db      	lsls	r3, r3, #3
 800cd6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd72:	430a      	orrs	r2, r1
 800cd74:	605a      	str	r2, [r3, #4]
 800cd76:	e048      	b.n	800ce0a <USB_EPStartXfer+0x852>
 800cd78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd7a:	095b      	lsrs	r3, r3, #5
 800cd7c:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd80:	f003 031f 	and.w	r3, r3, #31
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d102      	bne.n	800cd8e <USB_EPStartXfer+0x7d6>
 800cd88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	00db      	lsls	r3, r3, #3
 800cd94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd9c:	685a      	ldr	r2, [r3, #4]
 800cd9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cda0:	069b      	lsls	r3, r3, #26
 800cda2:	431a      	orrs	r2, r3
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	00db      	lsls	r3, r3, #3
 800cdaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdb2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cdb6:	605a      	str	r2, [r3, #4]
 800cdb8:	e027      	b.n	800ce0a <USB_EPStartXfer+0x852>
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	785b      	ldrb	r3, [r3, #1]
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d123      	bne.n	800ce0a <USB_EPStartXfer+0x852>
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	00db      	lsls	r3, r3, #3
 800cdc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdcc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdd0:	685a      	ldr	r2, [r3, #4]
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	00db      	lsls	r3, r3, #3
 800cdd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cddc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cde0:	b292      	uxth	r2, r2
 800cde2:	605a      	str	r2, [r3, #4]
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	00db      	lsls	r3, r3, #3
 800cdea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdf2:	6859      	ldr	r1, [r3, #4]
 800cdf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdf6:	041a      	lsls	r2, r3, #16
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	00db      	lsls	r3, r3, #3
 800cdfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce06:	430a      	orrs	r2, r1
 800ce08:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	895b      	ldrh	r3, [r3, #10]
 800ce0e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	6959      	ldr	r1, [r3, #20]
 800ce14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	8b7a      	ldrh	r2, [r7, #26]
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 fd53 	bl	800d8c6 <USB_WritePMA>
 800ce20:	e0a4      	b.n	800cf6c <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	785b      	ldrb	r3, [r3, #1]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d16d      	bne.n	800cf06 <USB_EPStartXfer+0x94e>
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	00db      	lsls	r3, r3, #3
 800ce30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce48:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ce4c:	601a      	str	r2, [r3, #0]
 800ce4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d112      	bne.n	800ce7a <USB_EPStartXfer+0x8c2>
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	00db      	lsls	r3, r3, #3
 800ce5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	00db      	lsls	r3, r3, #3
 800ce6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce72:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ce76:	601a      	str	r2, [r3, #0]
 800ce78:	e06d      	b.n	800cf56 <USB_EPStartXfer+0x99e>
 800ce7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce7c:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce7e:	d821      	bhi.n	800cec4 <USB_EPStartXfer+0x90c>
 800ce80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce82:	085b      	lsrs	r3, r3, #1
 800ce84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce88:	f003 0301 	and.w	r3, r3, #1
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d002      	beq.n	800ce96 <USB_EPStartXfer+0x8de>
 800ce90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce92:	3301      	adds	r3, #1
 800ce94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	00db      	lsls	r3, r3, #3
 800ce9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cea0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cea4:	6819      	ldr	r1, [r3, #0]
 800cea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cea8:	069a      	lsls	r2, r3, #26
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	00db      	lsls	r3, r3, #3
 800ceb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ceb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ceb8:	430a      	orrs	r2, r1
 800ceba:	601a      	str	r2, [r3, #0]
 800cebc:	e04b      	b.n	800cf56 <USB_EPStartXfer+0x99e>
 800cebe:	bf00      	nop
 800cec0:	07ff8e8f 	.word	0x07ff8e8f
 800cec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cec6:	095b      	lsrs	r3, r3, #5
 800cec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ceca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cecc:	f003 031f 	and.w	r3, r3, #31
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d102      	bne.n	800ceda <USB_EPStartXfer+0x922>
 800ced4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ced6:	3b01      	subs	r3, #1
 800ced8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	00db      	lsls	r3, r3, #3
 800cee0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cee4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceec:	069b      	lsls	r3, r3, #26
 800ceee:	431a      	orrs	r2, r3
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	00db      	lsls	r3, r3, #3
 800cef6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cefa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cefe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cf02:	601a      	str	r2, [r3, #0]
 800cf04:	e027      	b.n	800cf56 <USB_EPStartXfer+0x99e>
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	785b      	ldrb	r3, [r3, #1]
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d123      	bne.n	800cf56 <USB_EPStartXfer+0x99e>
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	00db      	lsls	r3, r3, #3
 800cf14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	00db      	lsls	r3, r3, #3
 800cf24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf2c:	b292      	uxth	r2, r2
 800cf2e:	601a      	str	r2, [r3, #0]
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	00db      	lsls	r3, r3, #3
 800cf36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf3e:	6819      	ldr	r1, [r3, #0]
 800cf40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf42:	041a      	lsls	r2, r3, #16
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	00db      	lsls	r3, r3, #3
 800cf4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf52:	430a      	orrs	r2, r1
 800cf54:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	891b      	ldrh	r3, [r3, #8]
 800cf5a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	6959      	ldr	r1, [r3, #20]
 800cf60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	8b7a      	ldrh	r2, [r7, #26]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fcad 	bl	800d8c6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	4413      	add	r3, r2
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	4b8b      	ldr	r3, [pc, #556]	@ (800d1a8 <USB_EPStartXfer+0xbf0>)
 800cf7a:	4013      	ands	r3, r2
 800cf7c:	60fb      	str	r3, [r7, #12]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f083 0310 	eor.w	r3, r3, #16
 800cf84:	60fb      	str	r3, [r7, #12]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f083 0320 	eor.w	r3, r3, #32
 800cf8c:	60fb      	str	r3, [r7, #12]
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	441a      	add	r2, r3
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfa2:	6013      	str	r3, [r2, #0]
 800cfa4:	e36b      	b.n	800d67e <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	7b1b      	ldrb	r3, [r3, #12]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f040 8081 	bne.w	800d0b2 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	699a      	ldr	r2, [r3, #24]
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d909      	bls.n	800cfd0 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	691b      	ldr	r3, [r3, #16]
 800cfc0:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	699a      	ldr	r2, [r3, #24]
 800cfc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfc8:	1ad2      	subs	r2, r2, r3
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	619a      	str	r2, [r3, #24]
 800cfce:	e005      	b.n	800cfdc <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	699b      	ldr	r3, [r3, #24]
 800cfd4:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	00db      	lsls	r3, r3, #3
 800cfe2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfe6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfea:	685a      	ldr	r2, [r3, #4]
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	00db      	lsls	r3, r3, #3
 800cff2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cff6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cffa:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cffe:	605a      	str	r2, [r3, #4]
 800d000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d002:	2b00      	cmp	r3, #0
 800d004:	d112      	bne.n	800d02c <USB_EPStartXfer+0xa74>
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d010:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d014:	685a      	ldr	r2, [r3, #4]
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	00db      	lsls	r3, r3, #3
 800d01c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d020:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d024:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d028:	605a      	str	r2, [r3, #4]
 800d02a:	e30c      	b.n	800d646 <USB_EPStartXfer+0x108e>
 800d02c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d02e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d030:	d81e      	bhi.n	800d070 <USB_EPStartXfer+0xab8>
 800d032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d034:	085b      	lsrs	r3, r3, #1
 800d036:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d03a:	f003 0301 	and.w	r3, r3, #1
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d002      	beq.n	800d048 <USB_EPStartXfer+0xa90>
 800d042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d044:	3301      	adds	r3, #1
 800d046:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	00db      	lsls	r3, r3, #3
 800d04e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d052:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d056:	6859      	ldr	r1, [r3, #4]
 800d058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d05a:	069a      	lsls	r2, r3, #26
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	00db      	lsls	r3, r3, #3
 800d062:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d066:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d06a:	430a      	orrs	r2, r1
 800d06c:	605a      	str	r2, [r3, #4]
 800d06e:	e2ea      	b.n	800d646 <USB_EPStartXfer+0x108e>
 800d070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d072:	095b      	lsrs	r3, r3, #5
 800d074:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d078:	f003 031f 	and.w	r3, r3, #31
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d102      	bne.n	800d086 <USB_EPStartXfer+0xace>
 800d080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d082:	3b01      	subs	r3, #1
 800d084:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	00db      	lsls	r3, r3, #3
 800d08c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d090:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d094:	685a      	ldr	r2, [r3, #4]
 800d096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d098:	069b      	lsls	r3, r3, #26
 800d09a:	431a      	orrs	r2, r3
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	00db      	lsls	r3, r3, #3
 800d0a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0aa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d0ae:	605a      	str	r2, [r3, #4]
 800d0b0:	e2c9      	b.n	800d646 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	78db      	ldrb	r3, [r3, #3]
 800d0b6:	2b02      	cmp	r3, #2
 800d0b8:	f040 8176 	bne.w	800d3a8 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	785b      	ldrb	r3, [r3, #1]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d173      	bne.n	800d1ac <USB_EPStartXfer+0xbf4>
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	00db      	lsls	r3, r3, #3
 800d0ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	00db      	lsls	r3, r3, #3
 800d0da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0e2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d0e6:	601a      	str	r2, [r3, #0]
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d112      	bne.n	800d116 <USB_EPStartXfer+0xb5e>
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	00db      	lsls	r3, r3, #3
 800d0f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	00db      	lsls	r3, r3, #3
 800d106:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d10a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d10e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d112:	601a      	str	r2, [r3, #0]
 800d114:	e073      	b.n	800d1fe <USB_EPStartXfer+0xc46>
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	691b      	ldr	r3, [r3, #16]
 800d11a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d11c:	d820      	bhi.n	800d160 <USB_EPStartXfer+0xba8>
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	691b      	ldr	r3, [r3, #16]
 800d122:	085b      	lsrs	r3, r3, #1
 800d124:	637b      	str	r3, [r7, #52]	@ 0x34
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	691b      	ldr	r3, [r3, #16]
 800d12a:	f003 0301 	and.w	r3, r3, #1
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d002      	beq.n	800d138 <USB_EPStartXfer+0xb80>
 800d132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d134:	3301      	adds	r3, #1
 800d136:	637b      	str	r3, [r7, #52]	@ 0x34
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	00db      	lsls	r3, r3, #3
 800d13e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d142:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d146:	6819      	ldr	r1, [r3, #0]
 800d148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d14a:	069a      	lsls	r2, r3, #26
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	00db      	lsls	r3, r3, #3
 800d152:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d156:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d15a:	430a      	orrs	r2, r1
 800d15c:	601a      	str	r2, [r3, #0]
 800d15e:	e04e      	b.n	800d1fe <USB_EPStartXfer+0xc46>
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	095b      	lsrs	r3, r3, #5
 800d166:	637b      	str	r3, [r7, #52]	@ 0x34
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	691b      	ldr	r3, [r3, #16]
 800d16c:	f003 031f 	and.w	r3, r3, #31
 800d170:	2b00      	cmp	r3, #0
 800d172:	d102      	bne.n	800d17a <USB_EPStartXfer+0xbc2>
 800d174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d176:	3b01      	subs	r3, #1
 800d178:	637b      	str	r3, [r7, #52]	@ 0x34
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	00db      	lsls	r3, r3, #3
 800d180:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d184:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d18c:	069b      	lsls	r3, r3, #26
 800d18e:	431a      	orrs	r2, r3
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	00db      	lsls	r3, r3, #3
 800d196:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d19a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d19e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d1a2:	601a      	str	r2, [r3, #0]
 800d1a4:	e02b      	b.n	800d1fe <USB_EPStartXfer+0xc46>
 800d1a6:	bf00      	nop
 800d1a8:	07ff8fbf 	.word	0x07ff8fbf
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	785b      	ldrb	r3, [r3, #1]
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d124      	bne.n	800d1fe <USB_EPStartXfer+0xc46>
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	00db      	lsls	r3, r3, #3
 800d1ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	00db      	lsls	r3, r3, #3
 800d1ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1d2:	b292      	uxth	r2, r2
 800d1d4:	601a      	str	r2, [r3, #0]
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	00db      	lsls	r3, r3, #3
 800d1dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1e4:	6819      	ldr	r1, [r3, #0]
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	691b      	ldr	r3, [r3, #16]
 800d1ea:	041a      	lsls	r2, r3, #16
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	00db      	lsls	r3, r3, #3
 800d1f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1fa:	430a      	orrs	r2, r1
 800d1fc:	601a      	str	r2, [r3, #0]
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	785b      	ldrb	r3, [r3, #1]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d170      	bne.n	800d2e8 <USB_EPStartXfer+0xd30>
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	00db      	lsls	r3, r3, #3
 800d20c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d210:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	00db      	lsls	r3, r3, #3
 800d21c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d220:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d224:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d228:	605a      	str	r2, [r3, #4]
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	691b      	ldr	r3, [r3, #16]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d112      	bne.n	800d258 <USB_EPStartXfer+0xca0>
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	00db      	lsls	r3, r3, #3
 800d238:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d23c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d240:	685a      	ldr	r2, [r3, #4]
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	00db      	lsls	r3, r3, #3
 800d248:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d24c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d250:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d254:	605a      	str	r2, [r3, #4]
 800d256:	e070      	b.n	800d33a <USB_EPStartXfer+0xd82>
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d25e:	d820      	bhi.n	800d2a2 <USB_EPStartXfer+0xcea>
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	085b      	lsrs	r3, r3, #1
 800d266:	633b      	str	r3, [r7, #48]	@ 0x30
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	691b      	ldr	r3, [r3, #16]
 800d26c:	f003 0301 	and.w	r3, r3, #1
 800d270:	2b00      	cmp	r3, #0
 800d272:	d002      	beq.n	800d27a <USB_EPStartXfer+0xcc2>
 800d274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d276:	3301      	adds	r3, #1
 800d278:	633b      	str	r3, [r7, #48]	@ 0x30
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	00db      	lsls	r3, r3, #3
 800d280:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d284:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d288:	6859      	ldr	r1, [r3, #4]
 800d28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d28c:	069a      	lsls	r2, r3, #26
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	00db      	lsls	r3, r3, #3
 800d294:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d298:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d29c:	430a      	orrs	r2, r1
 800d29e:	605a      	str	r2, [r3, #4]
 800d2a0:	e04b      	b.n	800d33a <USB_EPStartXfer+0xd82>
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	691b      	ldr	r3, [r3, #16]
 800d2a6:	095b      	lsrs	r3, r3, #5
 800d2a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	691b      	ldr	r3, [r3, #16]
 800d2ae:	f003 031f 	and.w	r3, r3, #31
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d102      	bne.n	800d2bc <USB_EPStartXfer+0xd04>
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	00db      	lsls	r3, r3, #3
 800d2c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2ca:	685a      	ldr	r2, [r3, #4]
 800d2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ce:	069b      	lsls	r3, r3, #26
 800d2d0:	431a      	orrs	r2, r3
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	00db      	lsls	r3, r3, #3
 800d2d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2e0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d2e4:	605a      	str	r2, [r3, #4]
 800d2e6:	e028      	b.n	800d33a <USB_EPStartXfer+0xd82>
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	785b      	ldrb	r3, [r3, #1]
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d124      	bne.n	800d33a <USB_EPStartXfer+0xd82>
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	00db      	lsls	r3, r3, #3
 800d2f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2fe:	685a      	ldr	r2, [r3, #4]
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	00db      	lsls	r3, r3, #3
 800d306:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d30a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d30e:	b292      	uxth	r2, r2
 800d310:	605a      	str	r2, [r3, #4]
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	00db      	lsls	r3, r3, #3
 800d318:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d31c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d320:	6859      	ldr	r1, [r3, #4]
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	691b      	ldr	r3, [r3, #16]
 800d326:	041a      	lsls	r2, r3, #16
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	00db      	lsls	r3, r3, #3
 800d32e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d332:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d336:	430a      	orrs	r2, r1
 800d338:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	69db      	ldr	r3, [r3, #28]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	f000 8181 	beq.w	800d646 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	4413      	add	r3, r2
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d352:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d354:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d004      	beq.n	800d366 <USB_EPStartXfer+0xdae>
 800d35c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d35e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d362:	2b00      	cmp	r3, #0
 800d364:	d10b      	bne.n	800d37e <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d366:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d368:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	f040 816a 	bne.w	800d646 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d372:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f040 8164 	bne.w	800d646 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	4413      	add	r3, r2
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	4b98      	ldr	r3, [pc, #608]	@ (800d5ec <USB_EPStartXfer+0x1034>)
 800d38c:	4013      	ands	r3, r2
 800d38e:	623b      	str	r3, [r7, #32]
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	441a      	add	r2, r3
 800d39a:	6a3b      	ldr	r3, [r7, #32]
 800d39c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d3a4:	6013      	str	r3, [r2, #0]
 800d3a6:	e14e      	b.n	800d646 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	78db      	ldrb	r3, [r3, #3]
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	f040 8148 	bne.w	800d642 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	699a      	ldr	r2, [r3, #24]
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	691b      	ldr	r3, [r3, #16]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d909      	bls.n	800d3d2 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	691b      	ldr	r3, [r3, #16]
 800d3c2:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	699a      	ldr	r2, [r3, #24]
 800d3c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3ca:	1ad2      	subs	r2, r2, r3
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	619a      	str	r2, [r3, #24]
 800d3d0:	e005      	b.n	800d3de <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	699b      	ldr	r3, [r3, #24]
 800d3d6:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	785b      	ldrb	r3, [r3, #1]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d16a      	bne.n	800d4bc <USB_EPStartXfer+0xf04>
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	00db      	lsls	r3, r3, #3
 800d3ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	00db      	lsls	r3, r3, #3
 800d3fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d400:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d404:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d408:	601a      	str	r2, [r3, #0]
 800d40a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d112      	bne.n	800d436 <USB_EPStartXfer+0xe7e>
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	00db      	lsls	r3, r3, #3
 800d416:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d41a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	00db      	lsls	r3, r3, #3
 800d426:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d42a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d42e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d432:	601a      	str	r2, [r3, #0]
 800d434:	e06a      	b.n	800d50c <USB_EPStartXfer+0xf54>
 800d436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d438:	2b3e      	cmp	r3, #62	@ 0x3e
 800d43a:	d81e      	bhi.n	800d47a <USB_EPStartXfer+0xec2>
 800d43c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d43e:	085b      	lsrs	r3, r3, #1
 800d440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d444:	f003 0301 	and.w	r3, r3, #1
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d002      	beq.n	800d452 <USB_EPStartXfer+0xe9a>
 800d44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d44e:	3301      	adds	r3, #1
 800d450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	00db      	lsls	r3, r3, #3
 800d458:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d45c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d460:	6819      	ldr	r1, [r3, #0]
 800d462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d464:	069a      	lsls	r2, r3, #26
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	00db      	lsls	r3, r3, #3
 800d46c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d470:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d474:	430a      	orrs	r2, r1
 800d476:	601a      	str	r2, [r3, #0]
 800d478:	e048      	b.n	800d50c <USB_EPStartXfer+0xf54>
 800d47a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d47c:	095b      	lsrs	r3, r3, #5
 800d47e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d482:	f003 031f 	and.w	r3, r3, #31
 800d486:	2b00      	cmp	r3, #0
 800d488:	d102      	bne.n	800d490 <USB_EPStartXfer+0xed8>
 800d48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d48c:	3b01      	subs	r3, #1
 800d48e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	00db      	lsls	r3, r3, #3
 800d496:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d49a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a2:	069b      	lsls	r3, r3, #26
 800d4a4:	431a      	orrs	r2, r3
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	00db      	lsls	r3, r3, #3
 800d4ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4b4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d4b8:	601a      	str	r2, [r3, #0]
 800d4ba:	e027      	b.n	800d50c <USB_EPStartXfer+0xf54>
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	785b      	ldrb	r3, [r3, #1]
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d123      	bne.n	800d50c <USB_EPStartXfer+0xf54>
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	00db      	lsls	r3, r3, #3
 800d4ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	00db      	lsls	r3, r3, #3
 800d4da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4e2:	b292      	uxth	r2, r2
 800d4e4:	601a      	str	r2, [r3, #0]
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	00db      	lsls	r3, r3, #3
 800d4ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4f4:	6819      	ldr	r1, [r3, #0]
 800d4f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4f8:	041a      	lsls	r2, r3, #16
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	00db      	lsls	r3, r3, #3
 800d500:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d504:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d508:	430a      	orrs	r2, r1
 800d50a:	601a      	str	r2, [r3, #0]
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	785b      	ldrb	r3, [r3, #1]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d16d      	bne.n	800d5f0 <USB_EPStartXfer+0x1038>
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	00db      	lsls	r3, r3, #3
 800d51a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d51e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d522:	685a      	ldr	r2, [r3, #4]
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	00db      	lsls	r3, r3, #3
 800d52a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d52e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d532:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d536:	605a      	str	r2, [r3, #4]
 800d538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d112      	bne.n	800d564 <USB_EPStartXfer+0xfac>
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	00db      	lsls	r3, r3, #3
 800d544:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d548:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d54c:	685a      	ldr	r2, [r3, #4]
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	00db      	lsls	r3, r3, #3
 800d554:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d558:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d55c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d560:	605a      	str	r2, [r3, #4]
 800d562:	e070      	b.n	800d646 <USB_EPStartXfer+0x108e>
 800d564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d566:	2b3e      	cmp	r3, #62	@ 0x3e
 800d568:	d81e      	bhi.n	800d5a8 <USB_EPStartXfer+0xff0>
 800d56a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d56c:	085b      	lsrs	r3, r3, #1
 800d56e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d572:	f003 0301 	and.w	r3, r3, #1
 800d576:	2b00      	cmp	r3, #0
 800d578:	d002      	beq.n	800d580 <USB_EPStartXfer+0xfc8>
 800d57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d57c:	3301      	adds	r3, #1
 800d57e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	00db      	lsls	r3, r3, #3
 800d586:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d58a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d58e:	6859      	ldr	r1, [r3, #4]
 800d590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d592:	069a      	lsls	r2, r3, #26
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	00db      	lsls	r3, r3, #3
 800d59a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d59e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5a2:	430a      	orrs	r2, r1
 800d5a4:	605a      	str	r2, [r3, #4]
 800d5a6:	e04e      	b.n	800d646 <USB_EPStartXfer+0x108e>
 800d5a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5aa:	095b      	lsrs	r3, r3, #5
 800d5ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d5ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5b0:	f003 031f 	and.w	r3, r3, #31
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d102      	bne.n	800d5be <USB_EPStartXfer+0x1006>
 800d5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	00db      	lsls	r3, r3, #3
 800d5c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5cc:	685a      	ldr	r2, [r3, #4]
 800d5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d0:	069b      	lsls	r3, r3, #26
 800d5d2:	431a      	orrs	r2, r3
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	00db      	lsls	r3, r3, #3
 800d5da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5e2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d5e6:	605a      	str	r2, [r3, #4]
 800d5e8:	e02d      	b.n	800d646 <USB_EPStartXfer+0x108e>
 800d5ea:	bf00      	nop
 800d5ec:	07ff8f8f 	.word	0x07ff8f8f
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	785b      	ldrb	r3, [r3, #1]
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d126      	bne.n	800d646 <USB_EPStartXfer+0x108e>
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	00db      	lsls	r3, r3, #3
 800d5fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d602:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d606:	685a      	ldr	r2, [r3, #4]
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	00db      	lsls	r3, r3, #3
 800d60e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d612:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d616:	b292      	uxth	r2, r2
 800d618:	605a      	str	r2, [r3, #4]
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	00db      	lsls	r3, r3, #3
 800d620:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d624:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d628:	6859      	ldr	r1, [r3, #4]
 800d62a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d62c:	041a      	lsls	r2, r3, #16
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	00db      	lsls	r3, r3, #3
 800d634:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d638:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d63c:	430a      	orrs	r2, r1
 800d63e:	605a      	str	r2, [r3, #4]
 800d640:	e001      	b.n	800d646 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800d642:	2301      	movs	r3, #1
 800d644:	e01c      	b.n	800d680 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d646:	687a      	ldr	r2, [r7, #4]
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	4413      	add	r3, r2
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	4b0d      	ldr	r3, [pc, #52]	@ (800d688 <USB_EPStartXfer+0x10d0>)
 800d654:	4013      	ands	r3, r2
 800d656:	61fb      	str	r3, [r7, #28]
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d65e:	61fb      	str	r3, [r7, #28]
 800d660:	69fb      	ldr	r3, [r7, #28]
 800d662:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d666:	61fb      	str	r3, [r7, #28]
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	441a      	add	r2, r3
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d67c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d67e:	2300      	movs	r3, #0
}
 800d680:	4618      	mov	r0, r3
 800d682:	3758      	adds	r7, #88	@ 0x58
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}
 800d688:	07ffbf8f 	.word	0x07ffbf8f

0800d68c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b085      	sub	sp, #20
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	785b      	ldrb	r3, [r3, #1]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d018      	beq.n	800d6d0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4413      	add	r3, r2
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	4b19      	ldr	r3, [pc, #100]	@ (800d710 <USB_EPSetStall+0x84>)
 800d6ac:	4013      	ands	r3, r2
 800d6ae:	60bb      	str	r3, [r7, #8]
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	f083 0310 	eor.w	r3, r3, #16
 800d6b6:	60bb      	str	r3, [r7, #8]
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	441a      	add	r2, r3
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6cc:	6013      	str	r3, [r2, #0]
 800d6ce:	e017      	b.n	800d700 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	009b      	lsls	r3, r3, #2
 800d6d8:	4413      	add	r3, r2
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	4b0d      	ldr	r3, [pc, #52]	@ (800d714 <USB_EPSetStall+0x88>)
 800d6de:	4013      	ands	r3, r2
 800d6e0:	60fb      	str	r3, [r7, #12]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d6e8:	60fb      	str	r3, [r7, #12]
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	009b      	lsls	r3, r3, #2
 800d6f2:	441a      	add	r2, r3
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d700:	2300      	movs	r3, #0
}
 800d702:	4618      	mov	r0, r3
 800d704:	3714      	adds	r7, #20
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop
 800d710:	07ff8fbf 	.word	0x07ff8fbf
 800d714:	07ffbf8f 	.word	0x07ffbf8f

0800d718 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d718:	b480      	push	{r7}
 800d71a:	b089      	sub	sp, #36	@ 0x24
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	7b1b      	ldrb	r3, [r3, #12]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d17c      	bne.n	800d824 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	785b      	ldrb	r3, [r3, #1]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d03c      	beq.n	800d7ac <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d732:	687a      	ldr	r2, [r7, #4]
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	4413      	add	r3, r2
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	613b      	str	r3, [r7, #16]
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d746:	2b00      	cmp	r3, #0
 800d748:	d013      	beq.n	800d772 <USB_EPClearStall+0x5a>
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	4413      	add	r3, r2
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	4b37      	ldr	r3, [pc, #220]	@ (800d834 <USB_EPClearStall+0x11c>)
 800d758:	4013      	ands	r3, r2
 800d75a:	60fb      	str	r3, [r7, #12]
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	441a      	add	r2, r3
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d76c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d770:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	78db      	ldrb	r3, [r3, #3]
 800d776:	2b01      	cmp	r3, #1
 800d778:	d054      	beq.n	800d824 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	4413      	add	r3, r2
 800d784:	681a      	ldr	r2, [r3, #0]
 800d786:	4b2c      	ldr	r3, [pc, #176]	@ (800d838 <USB_EPClearStall+0x120>)
 800d788:	4013      	ands	r3, r2
 800d78a:	60bb      	str	r3, [r7, #8]
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	f083 0320 	eor.w	r3, r3, #32
 800d792:	60bb      	str	r3, [r7, #8]
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	441a      	add	r2, r3
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7a8:	6013      	str	r3, [r2, #0]
 800d7aa:	e03b      	b.n	800d824 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	4413      	add	r3, r2
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	61fb      	str	r3, [r7, #28]
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d013      	beq.n	800d7ec <USB_EPClearStall+0xd4>
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	4413      	add	r3, r2
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	4b18      	ldr	r3, [pc, #96]	@ (800d834 <USB_EPClearStall+0x11c>)
 800d7d2:	4013      	ands	r3, r2
 800d7d4:	61bb      	str	r3, [r7, #24]
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	441a      	add	r2, r3
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d7e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7ea:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	4413      	add	r3, r2
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	4b10      	ldr	r3, [pc, #64]	@ (800d83c <USB_EPClearStall+0x124>)
 800d7fa:	4013      	ands	r3, r2
 800d7fc:	617b      	str	r3, [r7, #20]
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d804:	617b      	str	r3, [r7, #20]
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d80c:	617b      	str	r3, [r7, #20]
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	441a      	add	r2, r3
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d81e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d822:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d824:	2300      	movs	r3, #0
}
 800d826:	4618      	mov	r0, r3
 800d828:	3724      	adds	r7, #36	@ 0x24
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop
 800d834:	07ff8f8f 	.word	0x07ff8f8f
 800d838:	07ff8fbf 	.word	0x07ff8fbf
 800d83c:	07ffbf8f 	.word	0x07ffbf8f

0800d840 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800d840:	b480      	push	{r7}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	460b      	mov	r3, r1
 800d84a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d84c:	78fb      	ldrb	r3, [r7, #3]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d102      	bne.n	800d858 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2280      	movs	r2, #128	@ 0x80
 800d856:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d858:	2300      	movs	r3, #0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	370c      	adds	r7, #12
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr

0800d866 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800d866:	b480      	push	{r7}
 800d868:	b083      	sub	sp, #12
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d872:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d87a:	2300      	movs	r3, #0
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d894:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d89c:	2300      	movs	r3, #0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	370c      	adds	r7, #12
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr

0800d8aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800d8aa:	b480      	push	{r7}
 800d8ac:	b085      	sub	sp, #20
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8b6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3714      	adds	r7, #20
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr

0800d8c6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d8c6:	b480      	push	{r7}
 800d8c8:	b08b      	sub	sp, #44	@ 0x2c
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	60f8      	str	r0, [r7, #12]
 800d8ce:	60b9      	str	r1, [r7, #8]
 800d8d0:	4611      	mov	r1, r2
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	80fb      	strh	r3, [r7, #6]
 800d8d8:	4613      	mov	r3, r2
 800d8da:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d8dc:	88bb      	ldrh	r3, [r7, #4]
 800d8de:	3303      	adds	r3, #3
 800d8e0:	089b      	lsrs	r3, r3, #2
 800d8e2:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d8e4:	88bb      	ldrh	r3, [r7, #4]
 800d8e6:	f003 0303 	and.w	r3, r3, #3
 800d8ea:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800d8f0:	8afb      	ldrh	r3, [r7, #22]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d002      	beq.n	800d8fc <USB_WritePMA+0x36>
  {
    NbWords--;
 800d8f6:	69bb      	ldr	r3, [r7, #24]
 800d8f8:	3b01      	subs	r3, #1
 800d8fa:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d8fc:	88fb      	ldrh	r3, [r7, #6]
 800d8fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d902:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d906:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	623b      	str	r3, [r7, #32]
 800d90c:	e015      	b.n	800d93a <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	3304      	adds	r3, #4
 800d91a:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	3301      	adds	r3, #1
 800d920:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	3301      	adds	r3, #1
 800d926:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	3301      	adds	r3, #1
 800d92c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	3301      	adds	r3, #1
 800d932:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800d934:	6a3b      	ldr	r3, [r7, #32]
 800d936:	3b01      	subs	r3, #1
 800d938:	623b      	str	r3, [r7, #32]
 800d93a:	6a3b      	ldr	r3, [r7, #32]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d1e6      	bne.n	800d90e <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800d940:	8afb      	ldrh	r3, [r7, #22]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d01a      	beq.n	800d97c <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800d946:	2300      	movs	r3, #0
 800d948:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	461a      	mov	r2, r3
 800d950:	6a3b      	ldr	r3, [r7, #32]
 800d952:	00db      	lsls	r3, r3, #3
 800d954:	fa02 f303 	lsl.w	r3, r2, r3
 800d958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d95a:	4313      	orrs	r3, r2
 800d95c:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800d95e:	6a3b      	ldr	r3, [r7, #32]
 800d960:	3301      	adds	r3, #1
 800d962:	623b      	str	r3, [r7, #32]
      pBuf++;
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	3301      	adds	r3, #1
 800d968:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800d96a:	8afb      	ldrh	r3, [r7, #22]
 800d96c:	3b01      	subs	r3, #1
 800d96e:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800d970:	8afb      	ldrh	r3, [r7, #22]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1e9      	bne.n	800d94a <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800d976:	69fb      	ldr	r3, [r7, #28]
 800d978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d97a:	601a      	str	r2, [r3, #0]
  }
}
 800d97c:	bf00      	nop
 800d97e:	372c      	adds	r7, #44	@ 0x2c
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d988:	b480      	push	{r7}
 800d98a:	b08b      	sub	sp, #44	@ 0x2c
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	60f8      	str	r0, [r7, #12]
 800d990:	60b9      	str	r1, [r7, #8]
 800d992:	4611      	mov	r1, r2
 800d994:	461a      	mov	r2, r3
 800d996:	460b      	mov	r3, r1
 800d998:	80fb      	strh	r3, [r7, #6]
 800d99a:	4613      	mov	r3, r2
 800d99c:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d99e:	88bb      	ldrh	r3, [r7, #4]
 800d9a0:	3303      	adds	r3, #3
 800d9a2:	089b      	lsrs	r3, r3, #2
 800d9a4:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d9a6:	88bb      	ldrh	r3, [r7, #4]
 800d9a8:	f003 0303 	and.w	r3, r3, #3
 800d9ac:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d9b2:	88fb      	ldrh	r3, [r7, #6]
 800d9b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9bc:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800d9be:	8b7b      	ldrh	r3, [r7, #26]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d002      	beq.n	800d9ca <USB_ReadPMA+0x42>
  {
    NbWords--;
 800d9c4:	69fb      	ldr	r3, [r7, #28]
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9ce:	e015      	b.n	800d9fc <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800d9d0:	6a3b      	ldr	r3, [r7, #32]
 800d9d2:	681a      	ldr	r2, [r3, #0]
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800d9d8:	6a3b      	ldr	r3, [r7, #32]
 800d9da:	3304      	adds	r3, #4
 800d9dc:	623b      	str	r3, [r7, #32]
    pBuf++;
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d1e6      	bne.n	800d9d0 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800da02:	8b7b      	ldrh	r3, [r7, #26]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d017      	beq.n	800da38 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800da08:	6a3b      	ldr	r3, [r7, #32]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800da0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da10:	b2db      	uxtb	r3, r3
 800da12:	00db      	lsls	r3, r3, #3
 800da14:	693a      	ldr	r2, [r7, #16]
 800da16:	fa22 f303 	lsr.w	r3, r2, r3
 800da1a:	b2da      	uxtb	r2, r3
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	701a      	strb	r2, [r3, #0]
      count++;
 800da20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da22:	3301      	adds	r3, #1
 800da24:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	3301      	adds	r3, #1
 800da2a:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800da2c:	8b7b      	ldrh	r3, [r7, #26]
 800da2e:	3b01      	subs	r3, #1
 800da30:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800da32:	8b7b      	ldrh	r3, [r7, #26]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1ea      	bne.n	800da0e <USB_ReadPMA+0x86>
  }
}
 800da38:	bf00      	nop
 800da3a:	372c      	adds	r7, #44	@ 0x2c
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr

0800da44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	460b      	mov	r3, r1
 800da4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800da50:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800da54:	f000 ff5c 	bl	800e910 <USBD_static_malloc>
 800da58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d109      	bne.n	800da74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	32b0      	adds	r2, #176	@ 0xb0
 800da6a:	2100      	movs	r1, #0
 800da6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800da70:	2302      	movs	r3, #2
 800da72:	e0d4      	b.n	800dc1e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800da74:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800da78:	2100      	movs	r1, #0
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f002 fc1a 	bl	80102b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	32b0      	adds	r2, #176	@ 0xb0
 800da8a:	68f9      	ldr	r1, [r7, #12]
 800da8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	32b0      	adds	r2, #176	@ 0xb0
 800da9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	7c1b      	ldrb	r3, [r3, #16]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d138      	bne.n	800db1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800daac:	4b5e      	ldr	r3, [pc, #376]	@ (800dc28 <USBD_CDC_Init+0x1e4>)
 800daae:	7819      	ldrb	r1, [r3, #0]
 800dab0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dab4:	2202      	movs	r2, #2
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 fe31 	bl	800e71e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dabc:	4b5a      	ldr	r3, [pc, #360]	@ (800dc28 <USBD_CDC_Init+0x1e4>)
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	f003 020f 	and.w	r2, r3, #15
 800dac4:	6879      	ldr	r1, [r7, #4]
 800dac6:	4613      	mov	r3, r2
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	4413      	add	r3, r2
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	440b      	add	r3, r1
 800dad0:	3324      	adds	r3, #36	@ 0x24
 800dad2:	2201      	movs	r2, #1
 800dad4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dad6:	4b55      	ldr	r3, [pc, #340]	@ (800dc2c <USBD_CDC_Init+0x1e8>)
 800dad8:	7819      	ldrb	r1, [r3, #0]
 800dada:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dade:	2202      	movs	r2, #2
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f000 fe1c 	bl	800e71e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dae6:	4b51      	ldr	r3, [pc, #324]	@ (800dc2c <USBD_CDC_Init+0x1e8>)
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	f003 020f 	and.w	r2, r3, #15
 800daee:	6879      	ldr	r1, [r7, #4]
 800daf0:	4613      	mov	r3, r2
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	4413      	add	r3, r2
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	440b      	add	r3, r1
 800dafa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dafe:	2201      	movs	r2, #1
 800db00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800db02:	4b4b      	ldr	r3, [pc, #300]	@ (800dc30 <USBD_CDC_Init+0x1ec>)
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	f003 020f 	and.w	r2, r3, #15
 800db0a:	6879      	ldr	r1, [r7, #4]
 800db0c:	4613      	mov	r3, r2
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	4413      	add	r3, r2
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	440b      	add	r3, r1
 800db16:	3326      	adds	r3, #38	@ 0x26
 800db18:	2210      	movs	r2, #16
 800db1a:	801a      	strh	r2, [r3, #0]
 800db1c:	e035      	b.n	800db8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800db1e:	4b42      	ldr	r3, [pc, #264]	@ (800dc28 <USBD_CDC_Init+0x1e4>)
 800db20:	7819      	ldrb	r1, [r3, #0]
 800db22:	2340      	movs	r3, #64	@ 0x40
 800db24:	2202      	movs	r2, #2
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 fdf9 	bl	800e71e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800db2c:	4b3e      	ldr	r3, [pc, #248]	@ (800dc28 <USBD_CDC_Init+0x1e4>)
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	f003 020f 	and.w	r2, r3, #15
 800db34:	6879      	ldr	r1, [r7, #4]
 800db36:	4613      	mov	r3, r2
 800db38:	009b      	lsls	r3, r3, #2
 800db3a:	4413      	add	r3, r2
 800db3c:	009b      	lsls	r3, r3, #2
 800db3e:	440b      	add	r3, r1
 800db40:	3324      	adds	r3, #36	@ 0x24
 800db42:	2201      	movs	r2, #1
 800db44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800db46:	4b39      	ldr	r3, [pc, #228]	@ (800dc2c <USBD_CDC_Init+0x1e8>)
 800db48:	7819      	ldrb	r1, [r3, #0]
 800db4a:	2340      	movs	r3, #64	@ 0x40
 800db4c:	2202      	movs	r2, #2
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f000 fde5 	bl	800e71e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800db54:	4b35      	ldr	r3, [pc, #212]	@ (800dc2c <USBD_CDC_Init+0x1e8>)
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	f003 020f 	and.w	r2, r3, #15
 800db5c:	6879      	ldr	r1, [r7, #4]
 800db5e:	4613      	mov	r3, r2
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	4413      	add	r3, r2
 800db64:	009b      	lsls	r3, r3, #2
 800db66:	440b      	add	r3, r1
 800db68:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800db6c:	2201      	movs	r2, #1
 800db6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800db70:	4b2f      	ldr	r3, [pc, #188]	@ (800dc30 <USBD_CDC_Init+0x1ec>)
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	f003 020f 	and.w	r2, r3, #15
 800db78:	6879      	ldr	r1, [r7, #4]
 800db7a:	4613      	mov	r3, r2
 800db7c:	009b      	lsls	r3, r3, #2
 800db7e:	4413      	add	r3, r2
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	440b      	add	r3, r1
 800db84:	3326      	adds	r3, #38	@ 0x26
 800db86:	2210      	movs	r2, #16
 800db88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800db8a:	4b29      	ldr	r3, [pc, #164]	@ (800dc30 <USBD_CDC_Init+0x1ec>)
 800db8c:	7819      	ldrb	r1, [r3, #0]
 800db8e:	2308      	movs	r3, #8
 800db90:	2203      	movs	r2, #3
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 fdc3 	bl	800e71e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800db98:	4b25      	ldr	r3, [pc, #148]	@ (800dc30 <USBD_CDC_Init+0x1ec>)
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	f003 020f 	and.w	r2, r3, #15
 800dba0:	6879      	ldr	r1, [r7, #4]
 800dba2:	4613      	mov	r3, r2
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	4413      	add	r3, r2
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	440b      	add	r3, r1
 800dbac:	3324      	adds	r3, #36	@ 0x24
 800dbae:	2201      	movs	r2, #1
 800dbb0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	33b0      	adds	r3, #176	@ 0xb0
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	4413      	add	r3, r2
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d101      	bne.n	800dbec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800dbe8:	2302      	movs	r3, #2
 800dbea:	e018      	b.n	800dc1e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	7c1b      	ldrb	r3, [r3, #16]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d10a      	bne.n	800dc0a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dbf4:	4b0d      	ldr	r3, [pc, #52]	@ (800dc2c <USBD_CDC_Init+0x1e8>)
 800dbf6:	7819      	ldrb	r1, [r3, #0]
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dbfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fe56 	bl	800e8b4 <USBD_LL_PrepareReceive>
 800dc08:	e008      	b.n	800dc1c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc0a:	4b08      	ldr	r3, [pc, #32]	@ (800dc2c <USBD_CDC_Init+0x1e8>)
 800dc0c:	7819      	ldrb	r1, [r3, #0]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dc14:	2340      	movs	r3, #64	@ 0x40
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 fe4c 	bl	800e8b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dc1c:	2300      	movs	r3, #0
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	200000b3 	.word	0x200000b3
 800dc2c:	200000b4 	.word	0x200000b4
 800dc30:	200000b5 	.word	0x200000b5

0800dc34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800dc40:	4b3a      	ldr	r3, [pc, #232]	@ (800dd2c <USBD_CDC_DeInit+0xf8>)
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	4619      	mov	r1, r3
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 fd89 	bl	800e75e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800dc4c:	4b37      	ldr	r3, [pc, #220]	@ (800dd2c <USBD_CDC_DeInit+0xf8>)
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	f003 020f 	and.w	r2, r3, #15
 800dc54:	6879      	ldr	r1, [r7, #4]
 800dc56:	4613      	mov	r3, r2
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	4413      	add	r3, r2
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	440b      	add	r3, r1
 800dc60:	3324      	adds	r3, #36	@ 0x24
 800dc62:	2200      	movs	r2, #0
 800dc64:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800dc66:	4b32      	ldr	r3, [pc, #200]	@ (800dd30 <USBD_CDC_DeInit+0xfc>)
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 fd76 	bl	800e75e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800dc72:	4b2f      	ldr	r3, [pc, #188]	@ (800dd30 <USBD_CDC_DeInit+0xfc>)
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	f003 020f 	and.w	r2, r3, #15
 800dc7a:	6879      	ldr	r1, [r7, #4]
 800dc7c:	4613      	mov	r3, r2
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	4413      	add	r3, r2
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	440b      	add	r3, r1
 800dc86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800dc8e:	4b29      	ldr	r3, [pc, #164]	@ (800dd34 <USBD_CDC_DeInit+0x100>)
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	4619      	mov	r1, r3
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 fd62 	bl	800e75e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800dc9a:	4b26      	ldr	r3, [pc, #152]	@ (800dd34 <USBD_CDC_DeInit+0x100>)
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	f003 020f 	and.w	r2, r3, #15
 800dca2:	6879      	ldr	r1, [r7, #4]
 800dca4:	4613      	mov	r3, r2
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	4413      	add	r3, r2
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	440b      	add	r3, r1
 800dcae:	3324      	adds	r3, #36	@ 0x24
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800dcb4:	4b1f      	ldr	r3, [pc, #124]	@ (800dd34 <USBD_CDC_DeInit+0x100>)
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	f003 020f 	and.w	r2, r3, #15
 800dcbc:	6879      	ldr	r1, [r7, #4]
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	4413      	add	r3, r2
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	440b      	add	r3, r1
 800dcc8:	3326      	adds	r3, #38	@ 0x26
 800dcca:	2200      	movs	r2, #0
 800dccc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	32b0      	adds	r2, #176	@ 0xb0
 800dcd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d01f      	beq.n	800dd20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	33b0      	adds	r3, #176	@ 0xb0
 800dcea:	009b      	lsls	r3, r3, #2
 800dcec:	4413      	add	r3, r2
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	32b0      	adds	r2, #176	@ 0xb0
 800dcfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd02:	4618      	mov	r0, r3
 800dd04:	f000 fe12 	bl	800e92c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	32b0      	adds	r2, #176	@ 0xb0
 800dd12:	2100      	movs	r1, #0
 800dd14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dd20:	2300      	movs	r3, #0
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3708      	adds	r7, #8
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	200000b3 	.word	0x200000b3
 800dd30:	200000b4 	.word	0x200000b4
 800dd34:	200000b5 	.word	0x200000b5

0800dd38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b086      	sub	sp, #24
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	32b0      	adds	r2, #176	@ 0xb0
 800dd4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800dd52:	2300      	movs	r3, #0
 800dd54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dd56:	2300      	movs	r3, #0
 800dd58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d101      	bne.n	800dd68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800dd64:	2303      	movs	r3, #3
 800dd66:	e0bf      	b.n	800dee8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d050      	beq.n	800de16 <USBD_CDC_Setup+0xde>
 800dd74:	2b20      	cmp	r3, #32
 800dd76:	f040 80af 	bne.w	800ded8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	88db      	ldrh	r3, [r3, #6]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d03a      	beq.n	800ddf8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	b25b      	sxtb	r3, r3
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	da1b      	bge.n	800ddc4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	33b0      	adds	r3, #176	@ 0xb0
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	4413      	add	r3, r2
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	683a      	ldr	r2, [r7, #0]
 800dda0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800dda2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dda4:	683a      	ldr	r2, [r7, #0]
 800dda6:	88d2      	ldrh	r2, [r2, #6]
 800dda8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	88db      	ldrh	r3, [r3, #6]
 800ddae:	2b07      	cmp	r3, #7
 800ddb0:	bf28      	it	cs
 800ddb2:	2307      	movcs	r3, #7
 800ddb4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	89fa      	ldrh	r2, [r7, #14]
 800ddba:	4619      	mov	r1, r3
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f002 f8a8 	bl	800ff12 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ddc2:	e090      	b.n	800dee6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	785a      	ldrb	r2, [r3, #1]
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	88db      	ldrh	r3, [r3, #6]
 800ddd2:	2b3f      	cmp	r3, #63	@ 0x3f
 800ddd4:	d803      	bhi.n	800ddde <USBD_CDC_Setup+0xa6>
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	88db      	ldrh	r3, [r3, #6]
 800ddda:	b2da      	uxtb	r2, r3
 800dddc:	e000      	b.n	800dde0 <USBD_CDC_Setup+0xa8>
 800ddde:	2240      	movs	r2, #64	@ 0x40
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800dde6:	6939      	ldr	r1, [r7, #16]
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ddee:	461a      	mov	r2, r3
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f002 f8ba 	bl	800ff6a <USBD_CtlPrepareRx>
      break;
 800ddf6:	e076      	b.n	800dee6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	33b0      	adds	r3, #176	@ 0xb0
 800de02:	009b      	lsls	r3, r3, #2
 800de04:	4413      	add	r3, r2
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	689b      	ldr	r3, [r3, #8]
 800de0a:	683a      	ldr	r2, [r7, #0]
 800de0c:	7850      	ldrb	r0, [r2, #1]
 800de0e:	2200      	movs	r2, #0
 800de10:	6839      	ldr	r1, [r7, #0]
 800de12:	4798      	blx	r3
      break;
 800de14:	e067      	b.n	800dee6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	785b      	ldrb	r3, [r3, #1]
 800de1a:	2b0b      	cmp	r3, #11
 800de1c:	d851      	bhi.n	800dec2 <USBD_CDC_Setup+0x18a>
 800de1e:	a201      	add	r2, pc, #4	@ (adr r2, 800de24 <USBD_CDC_Setup+0xec>)
 800de20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de24:	0800de55 	.word	0x0800de55
 800de28:	0800ded1 	.word	0x0800ded1
 800de2c:	0800dec3 	.word	0x0800dec3
 800de30:	0800dec3 	.word	0x0800dec3
 800de34:	0800dec3 	.word	0x0800dec3
 800de38:	0800dec3 	.word	0x0800dec3
 800de3c:	0800dec3 	.word	0x0800dec3
 800de40:	0800dec3 	.word	0x0800dec3
 800de44:	0800dec3 	.word	0x0800dec3
 800de48:	0800dec3 	.word	0x0800dec3
 800de4c:	0800de7f 	.word	0x0800de7f
 800de50:	0800dea9 	.word	0x0800dea9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	2b03      	cmp	r3, #3
 800de5e:	d107      	bne.n	800de70 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800de60:	f107 030a 	add.w	r3, r7, #10
 800de64:	2202      	movs	r2, #2
 800de66:	4619      	mov	r1, r3
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f002 f852 	bl	800ff12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800de6e:	e032      	b.n	800ded6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800de70:	6839      	ldr	r1, [r7, #0]
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f001 fecf 	bl	800fc16 <USBD_CtlError>
            ret = USBD_FAIL;
 800de78:	2303      	movs	r3, #3
 800de7a:	75fb      	strb	r3, [r7, #23]
          break;
 800de7c:	e02b      	b.n	800ded6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de84:	b2db      	uxtb	r3, r3
 800de86:	2b03      	cmp	r3, #3
 800de88:	d107      	bne.n	800de9a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800de8a:	f107 030d 	add.w	r3, r7, #13
 800de8e:	2201      	movs	r2, #1
 800de90:	4619      	mov	r1, r3
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f002 f83d 	bl	800ff12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800de98:	e01d      	b.n	800ded6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800de9a:	6839      	ldr	r1, [r7, #0]
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f001 feba 	bl	800fc16 <USBD_CtlError>
            ret = USBD_FAIL;
 800dea2:	2303      	movs	r3, #3
 800dea4:	75fb      	strb	r3, [r7, #23]
          break;
 800dea6:	e016      	b.n	800ded6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800deae:	b2db      	uxtb	r3, r3
 800deb0:	2b03      	cmp	r3, #3
 800deb2:	d00f      	beq.n	800ded4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800deb4:	6839      	ldr	r1, [r7, #0]
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f001 fead 	bl	800fc16 <USBD_CtlError>
            ret = USBD_FAIL;
 800debc:	2303      	movs	r3, #3
 800debe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dec0:	e008      	b.n	800ded4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dec2:	6839      	ldr	r1, [r7, #0]
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f001 fea6 	bl	800fc16 <USBD_CtlError>
          ret = USBD_FAIL;
 800deca:	2303      	movs	r3, #3
 800decc:	75fb      	strb	r3, [r7, #23]
          break;
 800dece:	e002      	b.n	800ded6 <USBD_CDC_Setup+0x19e>
          break;
 800ded0:	bf00      	nop
 800ded2:	e008      	b.n	800dee6 <USBD_CDC_Setup+0x1ae>
          break;
 800ded4:	bf00      	nop
      }
      break;
 800ded6:	e006      	b.n	800dee6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ded8:	6839      	ldr	r1, [r7, #0]
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f001 fe9b 	bl	800fc16 <USBD_CtlError>
      ret = USBD_FAIL;
 800dee0:	2303      	movs	r3, #3
 800dee2:	75fb      	strb	r3, [r7, #23]
      break;
 800dee4:	bf00      	nop
  }

  return (uint8_t)ret;
 800dee6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3718      	adds	r7, #24
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	460b      	mov	r3, r1
 800defa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	32b0      	adds	r2, #176	@ 0xb0
 800df0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d101      	bne.n	800df1a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800df16:	2303      	movs	r3, #3
 800df18:	e065      	b.n	800dfe6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	32b0      	adds	r2, #176	@ 0xb0
 800df24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800df2a:	78fb      	ldrb	r3, [r7, #3]
 800df2c:	f003 020f 	and.w	r2, r3, #15
 800df30:	6879      	ldr	r1, [r7, #4]
 800df32:	4613      	mov	r3, r2
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	4413      	add	r3, r2
 800df38:	009b      	lsls	r3, r3, #2
 800df3a:	440b      	add	r3, r1
 800df3c:	3318      	adds	r3, #24
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d02f      	beq.n	800dfa4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800df44:	78fb      	ldrb	r3, [r7, #3]
 800df46:	f003 020f 	and.w	r2, r3, #15
 800df4a:	6879      	ldr	r1, [r7, #4]
 800df4c:	4613      	mov	r3, r2
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	4413      	add	r3, r2
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	440b      	add	r3, r1
 800df56:	3318      	adds	r3, #24
 800df58:	681a      	ldr	r2, [r3, #0]
 800df5a:	78fb      	ldrb	r3, [r7, #3]
 800df5c:	f003 010f 	and.w	r1, r3, #15
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	460b      	mov	r3, r1
 800df64:	009b      	lsls	r3, r3, #2
 800df66:	440b      	add	r3, r1
 800df68:	00db      	lsls	r3, r3, #3
 800df6a:	4403      	add	r3, r0
 800df6c:	3324      	adds	r3, #36	@ 0x24
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	fbb2 f1f3 	udiv	r1, r2, r3
 800df74:	fb01 f303 	mul.w	r3, r1, r3
 800df78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d112      	bne.n	800dfa4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800df7e:	78fb      	ldrb	r3, [r7, #3]
 800df80:	f003 020f 	and.w	r2, r3, #15
 800df84:	6879      	ldr	r1, [r7, #4]
 800df86:	4613      	mov	r3, r2
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	4413      	add	r3, r2
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	440b      	add	r3, r1
 800df90:	3318      	adds	r3, #24
 800df92:	2200      	movs	r2, #0
 800df94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800df96:	78f9      	ldrb	r1, [r7, #3]
 800df98:	2300      	movs	r3, #0
 800df9a:	2200      	movs	r2, #0
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f000 fc6e 	bl	800e87e <USBD_LL_Transmit>
 800dfa2:	e01f      	b.n	800dfe4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	33b0      	adds	r3, #176	@ 0xb0
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	4413      	add	r3, r2
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	691b      	ldr	r3, [r3, #16]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d010      	beq.n	800dfe4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	33b0      	adds	r3, #176	@ 0xb0
 800dfcc:	009b      	lsls	r3, r3, #2
 800dfce:	4413      	add	r3, r2
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	691b      	ldr	r3, [r3, #16]
 800dfd4:	68ba      	ldr	r2, [r7, #8]
 800dfd6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800dfda:	68ba      	ldr	r2, [r7, #8]
 800dfdc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800dfe0:	78fa      	ldrb	r2, [r7, #3]
 800dfe2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800dfe4:	2300      	movs	r3, #0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3710      	adds	r7, #16
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}

0800dfee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b084      	sub	sp, #16
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
 800dff6:	460b      	mov	r3, r1
 800dff8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	32b0      	adds	r2, #176	@ 0xb0
 800e004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e008:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	32b0      	adds	r2, #176	@ 0xb0
 800e014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d101      	bne.n	800e020 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e01c:	2303      	movs	r3, #3
 800e01e:	e01a      	b.n	800e056 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e020:	78fb      	ldrb	r3, [r7, #3]
 800e022:	4619      	mov	r1, r3
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 fc60 	bl	800e8ea <USBD_LL_GetRxDataSize>
 800e02a:	4602      	mov	r2, r0
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	33b0      	adds	r3, #176	@ 0xb0
 800e03c:	009b      	lsls	r3, r3, #2
 800e03e:	4413      	add	r3, r2
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	68fa      	ldr	r2, [r7, #12]
 800e046:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e04a:	68fa      	ldr	r2, [r7, #12]
 800e04c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e050:	4611      	mov	r1, r2
 800e052:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e054:	2300      	movs	r3, #0
}
 800e056:	4618      	mov	r0, r3
 800e058:	3710      	adds	r7, #16
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}

0800e05e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e05e:	b580      	push	{r7, lr}
 800e060:	b084      	sub	sp, #16
 800e062:	af00      	add	r7, sp, #0
 800e064:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	32b0      	adds	r2, #176	@ 0xb0
 800e070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e074:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d101      	bne.n	800e080 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e07c:	2303      	movs	r3, #3
 800e07e:	e024      	b.n	800e0ca <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	33b0      	adds	r3, #176	@ 0xb0
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	4413      	add	r3, r2
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d019      	beq.n	800e0c8 <USBD_CDC_EP0_RxReady+0x6a>
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e09a:	2bff      	cmp	r3, #255	@ 0xff
 800e09c:	d014      	beq.n	800e0c8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	33b0      	adds	r3, #176	@ 0xb0
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	4413      	add	r3, r2
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	689b      	ldr	r3, [r3, #8]
 800e0b0:	68fa      	ldr	r2, [r7, #12]
 800e0b2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e0b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e0b8:	68fa      	ldr	r2, [r7, #12]
 800e0ba:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e0be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	22ff      	movs	r2, #255	@ 0xff
 800e0c4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e0c8:	2300      	movs	r3, #0
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3710      	adds	r7, #16
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
	...

0800e0d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b086      	sub	sp, #24
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e0dc:	2182      	movs	r1, #130	@ 0x82
 800e0de:	4818      	ldr	r0, [pc, #96]	@ (800e140 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e0e0:	f000 ff63 	bl	800efaa <USBD_GetEpDesc>
 800e0e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e0e6:	2101      	movs	r1, #1
 800e0e8:	4815      	ldr	r0, [pc, #84]	@ (800e140 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e0ea:	f000 ff5e 	bl	800efaa <USBD_GetEpDesc>
 800e0ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e0f0:	2181      	movs	r1, #129	@ 0x81
 800e0f2:	4813      	ldr	r0, [pc, #76]	@ (800e140 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e0f4:	f000 ff59 	bl	800efaa <USBD_GetEpDesc>
 800e0f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d002      	beq.n	800e106 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	2210      	movs	r2, #16
 800e104:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d006      	beq.n	800e11a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	2200      	movs	r2, #0
 800e110:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e114:	711a      	strb	r2, [r3, #4]
 800e116:	2200      	movs	r2, #0
 800e118:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d006      	beq.n	800e12e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2200      	movs	r2, #0
 800e124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e128:	711a      	strb	r2, [r3, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2243      	movs	r2, #67	@ 0x43
 800e132:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e134:	4b02      	ldr	r3, [pc, #8]	@ (800e140 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e136:	4618      	mov	r0, r3
 800e138:	3718      	adds	r7, #24
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	20000070 	.word	0x20000070

0800e144 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b086      	sub	sp, #24
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e14c:	2182      	movs	r1, #130	@ 0x82
 800e14e:	4818      	ldr	r0, [pc, #96]	@ (800e1b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e150:	f000 ff2b 	bl	800efaa <USBD_GetEpDesc>
 800e154:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e156:	2101      	movs	r1, #1
 800e158:	4815      	ldr	r0, [pc, #84]	@ (800e1b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e15a:	f000 ff26 	bl	800efaa <USBD_GetEpDesc>
 800e15e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e160:	2181      	movs	r1, #129	@ 0x81
 800e162:	4813      	ldr	r0, [pc, #76]	@ (800e1b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e164:	f000 ff21 	bl	800efaa <USBD_GetEpDesc>
 800e168:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d002      	beq.n	800e176 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	2210      	movs	r2, #16
 800e174:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d006      	beq.n	800e18a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	2200      	movs	r2, #0
 800e180:	711a      	strb	r2, [r3, #4]
 800e182:	2200      	movs	r2, #0
 800e184:	f042 0202 	orr.w	r2, r2, #2
 800e188:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d006      	beq.n	800e19e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2200      	movs	r2, #0
 800e194:	711a      	strb	r2, [r3, #4]
 800e196:	2200      	movs	r2, #0
 800e198:	f042 0202 	orr.w	r2, r2, #2
 800e19c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2243      	movs	r2, #67	@ 0x43
 800e1a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e1a4:	4b02      	ldr	r3, [pc, #8]	@ (800e1b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3718      	adds	r7, #24
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	20000070 	.word	0x20000070

0800e1b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b086      	sub	sp, #24
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e1bc:	2182      	movs	r1, #130	@ 0x82
 800e1be:	4818      	ldr	r0, [pc, #96]	@ (800e220 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e1c0:	f000 fef3 	bl	800efaa <USBD_GetEpDesc>
 800e1c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e1c6:	2101      	movs	r1, #1
 800e1c8:	4815      	ldr	r0, [pc, #84]	@ (800e220 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e1ca:	f000 feee 	bl	800efaa <USBD_GetEpDesc>
 800e1ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e1d0:	2181      	movs	r1, #129	@ 0x81
 800e1d2:	4813      	ldr	r0, [pc, #76]	@ (800e220 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e1d4:	f000 fee9 	bl	800efaa <USBD_GetEpDesc>
 800e1d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d002      	beq.n	800e1e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	2210      	movs	r2, #16
 800e1e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d006      	beq.n	800e1fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e1f4:	711a      	strb	r2, [r3, #4]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d006      	beq.n	800e20e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2200      	movs	r2, #0
 800e204:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e208:	711a      	strb	r2, [r3, #4]
 800e20a:	2200      	movs	r2, #0
 800e20c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2243      	movs	r2, #67	@ 0x43
 800e212:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e214:	4b02      	ldr	r3, [pc, #8]	@ (800e220 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e216:	4618      	mov	r0, r3
 800e218:	3718      	adds	r7, #24
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	20000070 	.word	0x20000070

0800e224 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	220a      	movs	r2, #10
 800e230:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e232:	4b03      	ldr	r3, [pc, #12]	@ (800e240 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e234:	4618      	mov	r0, r3
 800e236:	370c      	adds	r7, #12
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr
 800e240:	2000002c 	.word	0x2000002c

0800e244 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e244:	b480      	push	{r7}
 800e246:	b083      	sub	sp, #12
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d101      	bne.n	800e258 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e254:	2303      	movs	r3, #3
 800e256:	e009      	b.n	800e26c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	33b0      	adds	r3, #176	@ 0xb0
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	4413      	add	r3, r2
 800e266:	683a      	ldr	r2, [r7, #0]
 800e268:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e26a:	2300      	movs	r3, #0
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	370c      	adds	r7, #12
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e278:	b480      	push	{r7}
 800e27a:	b087      	sub	sp, #28
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	32b0      	adds	r2, #176	@ 0xb0
 800e28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e292:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d101      	bne.n	800e29e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e29a:	2303      	movs	r3, #3
 800e29c:	e008      	b.n	800e2b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e2ae:	2300      	movs	r3, #0
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	371c      	adds	r7, #28
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b085      	sub	sp, #20
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	32b0      	adds	r2, #176	@ 0xb0
 800e2d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d101      	bne.n	800e2e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e2dc:	2303      	movs	r3, #3
 800e2de:	e004      	b.n	800e2ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	683a      	ldr	r2, [r7, #0]
 800e2e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e2e8:	2300      	movs	r3, #0
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3714      	adds	r7, #20
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f4:	4770      	bx	lr
	...

0800e2f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	32b0      	adds	r2, #176	@ 0xb0
 800e30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e30e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	32b0      	adds	r2, #176	@ 0xb0
 800e31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d101      	bne.n	800e326 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e322:	2303      	movs	r3, #3
 800e324:	e018      	b.n	800e358 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	7c1b      	ldrb	r3, [r3, #16]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d10a      	bne.n	800e344 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e32e:	4b0c      	ldr	r3, [pc, #48]	@ (800e360 <USBD_CDC_ReceivePacket+0x68>)
 800e330:	7819      	ldrb	r1, [r3, #0]
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e338:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 fab9 	bl	800e8b4 <USBD_LL_PrepareReceive>
 800e342:	e008      	b.n	800e356 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e344:	4b06      	ldr	r3, [pc, #24]	@ (800e360 <USBD_CDC_ReceivePacket+0x68>)
 800e346:	7819      	ldrb	r1, [r3, #0]
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e34e:	2340      	movs	r3, #64	@ 0x40
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f000 faaf 	bl	800e8b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e356:	2300      	movs	r3, #0
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3710      	adds	r7, #16
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	200000b4 	.word	0x200000b4

0800e364 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e368:	2200      	movs	r2, #0
 800e36a:	4905      	ldr	r1, [pc, #20]	@ (800e380 <TEMPLATE_Init+0x1c>)
 800e36c:	4805      	ldr	r0, [pc, #20]	@ (800e384 <TEMPLATE_Init+0x20>)
 800e36e:	f7ff ff83 	bl	800e278 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e372:	4905      	ldr	r1, [pc, #20]	@ (800e388 <TEMPLATE_Init+0x24>)
 800e374:	4803      	ldr	r0, [pc, #12]	@ (800e384 <TEMPLATE_Init+0x20>)
 800e376:	f7ff ffa1 	bl	800e2bc <USBD_CDC_SetRxBuffer>
      return (0);
 800e37a:	2300      	movs	r3, #0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	20000d3c 	.word	0x20000d3c
 800e384:	200007b4 	.word	0x200007b4
 800e388:	20000b3c 	.word	0x20000b3c

0800e38c <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800e38c:	b480      	push	{r7}
 800e38e:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800e390:	2300      	movs	r3, #0
}
 800e392:	4618      	mov	r0, r3
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	6039      	str	r1, [r7, #0]
 800e3a6:	71fb      	strb	r3, [r7, #7]
 800e3a8:	4613      	mov	r3, r2
 800e3aa:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800e3ac:	79fb      	ldrb	r3, [r7, #7]
 800e3ae:	2b23      	cmp	r3, #35	@ 0x23
 800e3b0:	f200 8098 	bhi.w	800e4e4 <TEMPLATE_Control+0x148>
 800e3b4:	a201      	add	r2, pc, #4	@ (adr r2, 800e3bc <TEMPLATE_Control+0x20>)
 800e3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ba:	bf00      	nop
 800e3bc:	0800e4e5 	.word	0x0800e4e5
 800e3c0:	0800e4e5 	.word	0x0800e4e5
 800e3c4:	0800e4e5 	.word	0x0800e4e5
 800e3c8:	0800e4e5 	.word	0x0800e4e5
 800e3cc:	0800e4e5 	.word	0x0800e4e5
 800e3d0:	0800e4e5 	.word	0x0800e4e5
 800e3d4:	0800e4e5 	.word	0x0800e4e5
 800e3d8:	0800e4e5 	.word	0x0800e4e5
 800e3dc:	0800e4e5 	.word	0x0800e4e5
 800e3e0:	0800e4e5 	.word	0x0800e4e5
 800e3e4:	0800e4e5 	.word	0x0800e4e5
 800e3e8:	0800e4e5 	.word	0x0800e4e5
 800e3ec:	0800e4e5 	.word	0x0800e4e5
 800e3f0:	0800e4e5 	.word	0x0800e4e5
 800e3f4:	0800e4e5 	.word	0x0800e4e5
 800e3f8:	0800e4e5 	.word	0x0800e4e5
 800e3fc:	0800e4e5 	.word	0x0800e4e5
 800e400:	0800e4e5 	.word	0x0800e4e5
 800e404:	0800e4e5 	.word	0x0800e4e5
 800e408:	0800e4e5 	.word	0x0800e4e5
 800e40c:	0800e4e5 	.word	0x0800e4e5
 800e410:	0800e4e5 	.word	0x0800e4e5
 800e414:	0800e4e5 	.word	0x0800e4e5
 800e418:	0800e4e5 	.word	0x0800e4e5
 800e41c:	0800e4e5 	.word	0x0800e4e5
 800e420:	0800e4e5 	.word	0x0800e4e5
 800e424:	0800e4e5 	.word	0x0800e4e5
 800e428:	0800e4e5 	.word	0x0800e4e5
 800e42c:	0800e4e5 	.word	0x0800e4e5
 800e430:	0800e4e5 	.word	0x0800e4e5
 800e434:	0800e4e5 	.word	0x0800e4e5
 800e438:	0800e4e5 	.word	0x0800e4e5
 800e43c:	0800e44d 	.word	0x0800e44d
 800e440:	0800e491 	.word	0x0800e491
 800e444:	0800e4e5 	.word	0x0800e4e5
 800e448:	0800e4e5 	.word	0x0800e4e5
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	461a      	mov	r2, r3
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	3301      	adds	r3, #1
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	021b      	lsls	r3, r3, #8
 800e45a:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	3302      	adds	r3, #2
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e464:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	3303      	adds	r3, #3
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	061b      	lsls	r3, r3, #24
 800e46e:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e470:	461a      	mov	r2, r3
 800e472:	4b20      	ldr	r3, [pc, #128]	@ (800e4f4 <TEMPLATE_Control+0x158>)
 800e474:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	791a      	ldrb	r2, [r3, #4]
 800e47a:	4b1e      	ldr	r3, [pc, #120]	@ (800e4f4 <TEMPLATE_Control+0x158>)
 800e47c:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	795a      	ldrb	r2, [r3, #5]
 800e482:	4b1c      	ldr	r3, [pc, #112]	@ (800e4f4 <TEMPLATE_Control+0x158>)
 800e484:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	799a      	ldrb	r2, [r3, #6]
 800e48a:	4b1a      	ldr	r3, [pc, #104]	@ (800e4f4 <TEMPLATE_Control+0x158>)
 800e48c:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800e48e:	e02a      	b.n	800e4e6 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800e490:	4b18      	ldr	r3, [pc, #96]	@ (800e4f4 <TEMPLATE_Control+0x158>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	b2da      	uxtb	r2, r3
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800e49a:	4b16      	ldr	r3, [pc, #88]	@ (800e4f4 <TEMPLATE_Control+0x158>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	0a1a      	lsrs	r2, r3, #8
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	b2d2      	uxtb	r2, r2
 800e4a6:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800e4a8:	4b12      	ldr	r3, [pc, #72]	@ (800e4f4 <TEMPLATE_Control+0x158>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	0c1a      	lsrs	r2, r3, #16
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	3302      	adds	r3, #2
 800e4b2:	b2d2      	uxtb	r2, r2
 800e4b4:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800e4b6:	4b0f      	ldr	r3, [pc, #60]	@ (800e4f4 <TEMPLATE_Control+0x158>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	0e1a      	lsrs	r2, r3, #24
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	3303      	adds	r3, #3
 800e4c0:	b2d2      	uxtb	r2, r2
 800e4c2:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	3304      	adds	r3, #4
 800e4c8:	4a0a      	ldr	r2, [pc, #40]	@ (800e4f4 <TEMPLATE_Control+0x158>)
 800e4ca:	7912      	ldrb	r2, [r2, #4]
 800e4cc:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	3305      	adds	r3, #5
 800e4d2:	4a08      	ldr	r2, [pc, #32]	@ (800e4f4 <TEMPLATE_Control+0x158>)
 800e4d4:	7952      	ldrb	r2, [r2, #5]
 800e4d6:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	3306      	adds	r3, #6
 800e4dc:	4a05      	ldr	r2, [pc, #20]	@ (800e4f4 <TEMPLATE_Control+0x158>)
 800e4de:	7992      	ldrb	r2, [r2, #6]
 800e4e0:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800e4e2:	e000      	b.n	800e4e6 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800e4e4:	bf00      	nop
  }

  return (0);
 800e4e6:	2300      	movs	r3, #0
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	370c      	adds	r7, #12
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr
 800e4f4:	200000cc 	.word	0x200000cc

0800e4f8 <TEMPLATE_Receive>:
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
      return (USBD_OK);
}*/

static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800e504:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800e508:	6018      	str	r0, [r3, #0]
 800e50a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800e50e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800e512:	6019      	str	r1, [r3, #0]
    // Null-terminate if possible
    char temp[LOG_BUFFER_SIZE];
    uint32_t copy_len = (*Len < sizeof(temp) - 1) ? *Len : (sizeof(temp) - 1);
 800e514:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800e518:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e524:	4293      	cmp	r3, r2
 800e526:	bf28      	it	cs
 800e528:	4613      	movcs	r3, r2
 800e52a:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    memcpy(temp, Buf, copy_len);
 800e52e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800e532:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800e536:	f107 000c 	add.w	r0, r7, #12
 800e53a:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 800e53e:	6819      	ldr	r1, [r3, #0]
 800e540:	f001 ff33 	bl	80103aa <memcpy>
    temp[copy_len] = '\0';
 800e544:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800e548:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 800e54c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800e550:	4413      	add	r3, r2
 800e552:	2200      	movs	r2, #0
 800e554:	701a      	strb	r2, [r3, #0]

    log_info("Received USB data: \"%s\"", temp);
 800e556:	f107 030c 	add.w	r3, r7, #12
 800e55a:	4619      	mov	r1, r3
 800e55c:	4805      	ldr	r0, [pc, #20]	@ (800e574 <TEMPLATE_Receive+0x7c>)
 800e55e:	f7f2 f86d 	bl	800063c <log_info>

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e562:	4805      	ldr	r0, [pc, #20]	@ (800e578 <TEMPLATE_Receive+0x80>)
 800e564:	f7ff fec8 	bl	800e2f8 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800e568:	2300      	movs	r3, #0
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	08011338 	.word	0x08011338
 800e578:	200007b4 	.word	0x200007b4

0800e57c <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e57c:	b480      	push	{r7}
 800e57e:	b085      	sub	sp, #20
 800e580:	af00      	add	r7, sp, #0
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	4613      	mov	r3, r2
 800e588:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 800e58a:	2300      	movs	r3, #0

}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3714      	adds	r7, #20
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr

0800e598 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	f000 faa5 	bl	800eafe <USBD_LL_SetupStage>
}
 800e5b4:	bf00      	nop
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800e5ce:	78fa      	ldrb	r2, [r7, #3]
 800e5d0:	6879      	ldr	r1, [r7, #4]
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	009b      	lsls	r3, r3, #2
 800e5d6:	4413      	add	r3, r2
 800e5d8:	00db      	lsls	r3, r3, #3
 800e5da:	440b      	add	r3, r1
 800e5dc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	78fb      	ldrb	r3, [r7, #3]
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	f000 fadf 	bl	800eba8 <USBD_LL_DataOutStage>
}
 800e5ea:	bf00      	nop
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b082      	sub	sp, #8
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800e604:	78fa      	ldrb	r2, [r7, #3]
 800e606:	6879      	ldr	r1, [r7, #4]
 800e608:	4613      	mov	r3, r2
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	4413      	add	r3, r2
 800e60e:	00db      	lsls	r3, r3, #3
 800e610:	440b      	add	r3, r1
 800e612:	3328      	adds	r3, #40	@ 0x28
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	78fb      	ldrb	r3, [r7, #3]
 800e618:	4619      	mov	r1, r3
 800e61a:	f000 fb78 	bl	800ed0e <USBD_LL_DataInStage>
}
 800e61e:	bf00      	nop
 800e620:	3708      	adds	r7, #8
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}

0800e626 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800e626:	b580      	push	{r7, lr}
 800e628:	b082      	sub	sp, #8
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e634:	4618      	mov	r0, r3
 800e636:	f000 fc7e 	bl	800ef36 <USBD_LL_SOF>
}
 800e63a:	bf00      	nop
 800e63c:	3708      	adds	r7, #8
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}

0800e642 <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800e642:	b580      	push	{r7, lr}
 800e644:	b084      	sub	sp, #16
 800e646:	af00      	add	r7, sp, #0
 800e648:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e64a:	2301      	movs	r3, #1
 800e64c:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	79db      	ldrb	r3, [r3, #7]
 800e652:	2b02      	cmp	r3, #2
 800e654:	d001      	beq.n	800e65a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e656:	f7f2 fcb5 	bl	8000fc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e660:	7bfa      	ldrb	r2, [r7, #15]
 800e662:	4611      	mov	r1, r2
 800e664:	4618      	mov	r0, r3
 800e666:	f000 fc56 	bl	800ef16 <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e670:	4618      	mov	r0, r3
 800e672:	f000 fbfe 	bl	800ee72 <USBD_LL_Reset>
}
 800e676:	bf00      	nop
 800e678:	3710      	adds	r7, #16
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
	...

0800e680 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	4a19      	ldr	r2, [pc, #100]	@ (800e6f0 <USBD_LL_Init+0x70>)
 800e68c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e696:	2340      	movs	r3, #64	@ 0x40
 800e698:	2200      	movs	r2, #0
 800e69a:	2100      	movs	r1, #0
 800e69c:	f7f5 feec 	bl	8004478 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e6a6:	2380      	movs	r3, #128	@ 0x80
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	2180      	movs	r1, #128	@ 0x80
 800e6ac:	f7f5 fee4 	bl	8004478 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e6b6:	23c0      	movs	r3, #192	@ 0xc0
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	2181      	movs	r1, #129	@ 0x81
 800e6bc:	f7f5 fedc 	bl	8004478 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e6c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	2101      	movs	r1, #1
 800e6ce:	f7f5 fed3 	bl	8004478 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e6d8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800e6dc:	2200      	movs	r2, #0
 800e6de:	2182      	movs	r1, #130	@ 0x82
 800e6e0:	f7f5 feca 	bl	8004478 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3708      	adds	r7, #8
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	200004d0 	.word	0x200004d0

0800e6f4 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e702:	4618      	mov	r0, r3
 800e704:	f7f4 fb9c 	bl	8002e40 <HAL_PCD_Start>
 800e708:	4603      	mov	r3, r0
 800e70a:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800e70c:	7bfb      	ldrb	r3, [r7, #15]
 800e70e:	4618      	mov	r0, r3
 800e710:	f000 f916 	bl	800e940 <USBD_Get_USB_Status>
 800e714:	4603      	mov	r3, r0
}
 800e716:	4618      	mov	r0, r3
 800e718:	3710      	adds	r7, #16
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800e71e:	b580      	push	{r7, lr}
 800e720:	b084      	sub	sp, #16
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
 800e726:	4608      	mov	r0, r1
 800e728:	4611      	mov	r1, r2
 800e72a:	461a      	mov	r2, r3
 800e72c:	4603      	mov	r3, r0
 800e72e:	70fb      	strb	r3, [r7, #3]
 800e730:	460b      	mov	r3, r1
 800e732:	70bb      	strb	r3, [r7, #2]
 800e734:	4613      	mov	r3, r2
 800e736:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e73e:	78bb      	ldrb	r3, [r7, #2]
 800e740:	883a      	ldrh	r2, [r7, #0]
 800e742:	78f9      	ldrb	r1, [r7, #3]
 800e744:	f7f4 fccb 	bl	80030de <HAL_PCD_EP_Open>
 800e748:	4603      	mov	r3, r0
 800e74a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e74c:	7bfb      	ldrb	r3, [r7, #15]
 800e74e:	4618      	mov	r0, r3
 800e750:	f000 f8f6 	bl	800e940 <USBD_Get_USB_Status>
 800e754:	4603      	mov	r3, r0
}
 800e756:	4618      	mov	r0, r3
 800e758:	3710      	adds	r7, #16
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e75e:	b580      	push	{r7, lr}
 800e760:	b084      	sub	sp, #16
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
 800e766:	460b      	mov	r3, r1
 800e768:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e770:	78fa      	ldrb	r2, [r7, #3]
 800e772:	4611      	mov	r1, r2
 800e774:	4618      	mov	r0, r3
 800e776:	f7f4 fd13 	bl	80031a0 <HAL_PCD_EP_Close>
 800e77a:	4603      	mov	r3, r0
 800e77c:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e77e:	7bfb      	ldrb	r3, [r7, #15]
 800e780:	4618      	mov	r0, r3
 800e782:	f000 f8dd 	bl	800e940 <USBD_Get_USB_Status>
 800e786:	4603      	mov	r3, r0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	460b      	mov	r3, r1
 800e79a:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e7a2:	78fa      	ldrb	r2, [r7, #3]
 800e7a4:	4611      	mov	r1, r2
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7f4 fdc6 	bl	8003338 <HAL_PCD_EP_SetStall>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e7b0:	7bfb      	ldrb	r3, [r7, #15]
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f000 f8c4 	bl	800e940 <USBD_Get_USB_Status>
 800e7b8:	4603      	mov	r3, r0
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b084      	sub	sp, #16
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e7d4:	78fa      	ldrb	r2, [r7, #3]
 800e7d6:	4611      	mov	r1, r2
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7f4 fe01 	bl	80033e0 <HAL_PCD_EP_ClrStall>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e7e2:	7bfb      	ldrb	r3, [r7, #15]
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f000 f8ab 	bl	800e940 <USBD_Get_USB_Status>
 800e7ea:	4603      	mov	r3, r0
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3710      	adds	r7, #16
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e806:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800e808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	da0b      	bge.n	800e828 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e810:	78fb      	ldrb	r3, [r7, #3]
 800e812:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e816:	68f9      	ldr	r1, [r7, #12]
 800e818:	4613      	mov	r3, r2
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	4413      	add	r3, r2
 800e81e:	00db      	lsls	r3, r3, #3
 800e820:	440b      	add	r3, r1
 800e822:	3316      	adds	r3, #22
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	e00b      	b.n	800e840 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e828:	78fb      	ldrb	r3, [r7, #3]
 800e82a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e82e:	68f9      	ldr	r1, [r7, #12]
 800e830:	4613      	mov	r3, r2
 800e832:	009b      	lsls	r3, r3, #2
 800e834:	4413      	add	r3, r2
 800e836:	00db      	lsls	r3, r3, #3
 800e838:	440b      	add	r3, r1
 800e83a:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800e83e:	781b      	ldrb	r3, [r3, #0]
      }
}
 800e840:	4618      	mov	r0, r3
 800e842:	3714      	adds	r7, #20
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr

0800e84c <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	460b      	mov	r3, r1
 800e856:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e85e:	78fa      	ldrb	r2, [r7, #3]
 800e860:	4611      	mov	r1, r2
 800e862:	4618      	mov	r0, r3
 800e864:	f7f4 fc17 	bl	8003096 <HAL_PCD_SetAddress>
 800e868:	4603      	mov	r3, r0
 800e86a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e86c:	7bfb      	ldrb	r3, [r7, #15]
 800e86e:	4618      	mov	r0, r3
 800e870:	f000 f866 	bl	800e940 <USBD_Get_USB_Status>
 800e874:	4603      	mov	r3, r0
}
 800e876:	4618      	mov	r0, r3
 800e878:	3710      	adds	r7, #16
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}

0800e87e <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800e87e:	b580      	push	{r7, lr}
 800e880:	b086      	sub	sp, #24
 800e882:	af00      	add	r7, sp, #0
 800e884:	60f8      	str	r0, [r7, #12]
 800e886:	607a      	str	r2, [r7, #4]
 800e888:	603b      	str	r3, [r7, #0]
 800e88a:	460b      	mov	r3, r1
 800e88c:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e894:	7af9      	ldrb	r1, [r7, #11]
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	f7f4 fd15 	bl	80032c8 <HAL_PCD_EP_Transmit>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800e8a2:	7dfb      	ldrb	r3, [r7, #23]
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f000 f84b 	bl	800e940 <USBD_Get_USB_Status>
 800e8aa:	4603      	mov	r3, r0
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3718      	adds	r7, #24
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	607a      	str	r2, [r7, #4]
 800e8be:	603b      	str	r3, [r7, #0]
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e8ca:	7af9      	ldrb	r1, [r7, #11]
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	f7f4 fcb0 	bl	8003234 <HAL_PCD_EP_Receive>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800e8d8:	7dfb      	ldrb	r3, [r7, #23]
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f000 f830 	bl	800e940 <USBD_Get_USB_Status>
 800e8e0:	4603      	mov	r3, r0
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3718      	adds	r7, #24
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}

0800e8ea <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8ea:	b580      	push	{r7, lr}
 800e8ec:	b082      	sub	sp, #8
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
 800e8f2:	460b      	mov	r3, r1
 800e8f4:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e8fc:	78fa      	ldrb	r2, [r7, #3]
 800e8fe:	4611      	mov	r1, r2
 800e900:	4618      	mov	r0, r3
 800e902:	f7f4 fcc9 	bl	8003298 <HAL_PCD_EP_GetRxCount>
 800e906:	4603      	mov	r3, r0
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3708      	adds	r7, #8
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}

0800e910 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800e910:	b480      	push	{r7}
 800e912:	b083      	sub	sp, #12
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800e918:	4b03      	ldr	r3, [pc, #12]	@ (800e928 <USBD_static_malloc+0x18>)
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	370c      	adds	r7, #12
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	20000f3c 	.word	0x20000f3c

0800e92c <USBD_static_free>:

void USBD_static_free(void *p)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800e934:	bf00      	nop
 800e936:	370c      	adds	r7, #12
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr

0800e940 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e940:	b480      	push	{r7}
 800e942:	b085      	sub	sp, #20
 800e944:	af00      	add	r7, sp, #0
 800e946:	4603      	mov	r3, r0
 800e948:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800e94a:	2300      	movs	r3, #0
 800e94c:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800e94e:	79fb      	ldrb	r3, [r7, #7]
 800e950:	2b03      	cmp	r3, #3
 800e952:	d817      	bhi.n	800e984 <USBD_Get_USB_Status+0x44>
 800e954:	a201      	add	r2, pc, #4	@ (adr r2, 800e95c <USBD_Get_USB_Status+0x1c>)
 800e956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e95a:	bf00      	nop
 800e95c:	0800e96d 	.word	0x0800e96d
 800e960:	0800e973 	.word	0x0800e973
 800e964:	0800e979 	.word	0x0800e979
 800e968:	0800e97f 	.word	0x0800e97f
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800e96c:	2300      	movs	r3, #0
 800e96e:	73fb      	strb	r3, [r7, #15]
             break;
 800e970:	e00b      	b.n	800e98a <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800e972:	2303      	movs	r3, #3
 800e974:	73fb      	strb	r3, [r7, #15]
             break;
 800e976:	e008      	b.n	800e98a <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800e978:	2301      	movs	r3, #1
 800e97a:	73fb      	strb	r3, [r7, #15]
             break;
 800e97c:	e005      	b.n	800e98a <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800e97e:	2303      	movs	r3, #3
 800e980:	73fb      	strb	r3, [r7, #15]
             break;
 800e982:	e002      	b.n	800e98a <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800e984:	2303      	movs	r3, #3
 800e986:	73fb      	strb	r3, [r7, #15]
             break;
 800e988:	bf00      	nop
      }
      return usb_status;
 800e98a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3714      	adds	r7, #20
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b086      	sub	sp, #24
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d101      	bne.n	800e9b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e9ac:	2303      	movs	r3, #3
 800e9ae:	e01f      	b.n	800e9f0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d003      	beq.n	800e9d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	68ba      	ldr	r2, [r7, #8]
 800e9d2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2201      	movs	r2, #1
 800e9da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	79fa      	ldrb	r2, [r7, #7]
 800e9e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e9e4:	68f8      	ldr	r0, [r7, #12]
 800e9e6:	f7ff fe4b 	bl	800e680 <USBD_LL_Init>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3718      	adds	r7, #24
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ea02:	2300      	movs	r3, #0
 800ea04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d101      	bne.n	800ea10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ea0c:	2303      	movs	r3, #3
 800ea0e:	e025      	b.n	800ea5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	683a      	ldr	r2, [r7, #0]
 800ea14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	32ae      	adds	r2, #174	@ 0xae
 800ea22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d00f      	beq.n	800ea4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	32ae      	adds	r2, #174	@ 0xae
 800ea36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea3c:	f107 020e 	add.w	r2, r7, #14
 800ea40:	4610      	mov	r0, r2
 800ea42:	4798      	blx	r3
 800ea44:	4602      	mov	r2, r0
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ea52:	1c5a      	adds	r2, r3, #1
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ea5a:	2300      	movs	r3, #0
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3710      	adds	r7, #16
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}

0800ea64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7ff fe41 	bl	800e6f4 <USBD_LL_Start>
 800ea72:	4603      	mov	r3, r0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3708      	adds	r7, #8
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b083      	sub	sp, #12
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ea84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	370c      	adds	r7, #12
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr

0800ea92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea92:	b580      	push	{r7, lr}
 800ea94:	b084      	sub	sp, #16
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	6078      	str	r0, [r7, #4]
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d009      	beq.n	800eac0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	78fa      	ldrb	r2, [r7, #3]
 800eab6:	4611      	mov	r1, r2
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	4798      	blx	r3
 800eabc:	4603      	mov	r3, r0
 800eabe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b084      	sub	sp, #16
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
 800ead2:	460b      	mov	r3, r1
 800ead4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ead6:	2300      	movs	r3, #0
 800ead8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	78fa      	ldrb	r2, [r7, #3]
 800eae4:	4611      	mov	r1, r2
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	4798      	blx	r3
 800eaea:	4603      	mov	r3, r0
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d001      	beq.n	800eaf4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800eaf0:	2303      	movs	r3, #3
 800eaf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eaf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3710      	adds	r7, #16
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}

0800eafe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800eafe:	b580      	push	{r7, lr}
 800eb00:	b084      	sub	sp, #16
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6078      	str	r0, [r7, #4]
 800eb06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb0e:	6839      	ldr	r1, [r7, #0]
 800eb10:	4618      	mov	r0, r3
 800eb12:	f001 f846 	bl	800fba2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2201      	movs	r2, #1
 800eb1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800eb24:	461a      	mov	r2, r3
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800eb32:	f003 031f 	and.w	r3, r3, #31
 800eb36:	2b02      	cmp	r3, #2
 800eb38:	d01a      	beq.n	800eb70 <USBD_LL_SetupStage+0x72>
 800eb3a:	2b02      	cmp	r3, #2
 800eb3c:	d822      	bhi.n	800eb84 <USBD_LL_SetupStage+0x86>
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d002      	beq.n	800eb48 <USBD_LL_SetupStage+0x4a>
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d00a      	beq.n	800eb5c <USBD_LL_SetupStage+0x5e>
 800eb46:	e01d      	b.n	800eb84 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb4e:	4619      	mov	r1, r3
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f000 fa9d 	bl	800f090 <USBD_StdDevReq>
 800eb56:	4603      	mov	r3, r0
 800eb58:	73fb      	strb	r3, [r7, #15]
      break;
 800eb5a:	e020      	b.n	800eb9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb62:	4619      	mov	r1, r3
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f000 fb05 	bl	800f174 <USBD_StdItfReq>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	73fb      	strb	r3, [r7, #15]
      break;
 800eb6e:	e016      	b.n	800eb9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb76:	4619      	mov	r1, r3
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f000 fb67 	bl	800f24c <USBD_StdEPReq>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	73fb      	strb	r3, [r7, #15]
      break;
 800eb82:	e00c      	b.n	800eb9e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800eb8a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	4619      	mov	r1, r3
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f7ff fdfc 	bl	800e790 <USBD_LL_StallEP>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	73fb      	strb	r3, [r7, #15]
      break;
 800eb9c:	bf00      	nop
  }

  return ret;
 800eb9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3710      	adds	r7, #16
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b086      	sub	sp, #24
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	607a      	str	r2, [r7, #4]
 800ebb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ebba:	7afb      	ldrb	r3, [r7, #11]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d16e      	bne.n	800ec9e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ebc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ebce:	2b03      	cmp	r3, #3
 800ebd0:	f040 8098 	bne.w	800ed04 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	689a      	ldr	r2, [r3, #8]
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	68db      	ldr	r3, [r3, #12]
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d913      	bls.n	800ec08 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	689a      	ldr	r2, [r3, #8]
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	68db      	ldr	r3, [r3, #12]
 800ebe8:	1ad2      	subs	r2, r2, r3
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	68da      	ldr	r2, [r3, #12]
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	689b      	ldr	r3, [r3, #8]
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	bf28      	it	cs
 800ebfa:	4613      	movcs	r3, r2
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	6879      	ldr	r1, [r7, #4]
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f001 f9cf 	bl	800ffa4 <USBD_CtlContinueRx>
 800ec06:	e07d      	b.n	800ed04 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ec0e:	f003 031f 	and.w	r3, r3, #31
 800ec12:	2b02      	cmp	r3, #2
 800ec14:	d014      	beq.n	800ec40 <USBD_LL_DataOutStage+0x98>
 800ec16:	2b02      	cmp	r3, #2
 800ec18:	d81d      	bhi.n	800ec56 <USBD_LL_DataOutStage+0xae>
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d002      	beq.n	800ec24 <USBD_LL_DataOutStage+0x7c>
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	d003      	beq.n	800ec2a <USBD_LL_DataOutStage+0x82>
 800ec22:	e018      	b.n	800ec56 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ec24:	2300      	movs	r3, #0
 800ec26:	75bb      	strb	r3, [r7, #22]
            break;
 800ec28:	e018      	b.n	800ec5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	4619      	mov	r1, r3
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	f000 f99e 	bl	800ef76 <USBD_CoreFindIF>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	75bb      	strb	r3, [r7, #22]
            break;
 800ec3e:	e00d      	b.n	800ec5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ec46:	b2db      	uxtb	r3, r3
 800ec48:	4619      	mov	r1, r3
 800ec4a:	68f8      	ldr	r0, [r7, #12]
 800ec4c:	f000 f9a0 	bl	800ef90 <USBD_CoreFindEP>
 800ec50:	4603      	mov	r3, r0
 800ec52:	75bb      	strb	r3, [r7, #22]
            break;
 800ec54:	e002      	b.n	800ec5c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ec56:	2300      	movs	r3, #0
 800ec58:	75bb      	strb	r3, [r7, #22]
            break;
 800ec5a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ec5c:	7dbb      	ldrb	r3, [r7, #22]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d119      	bne.n	800ec96 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	2b03      	cmp	r3, #3
 800ec6c:	d113      	bne.n	800ec96 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ec6e:	7dba      	ldrb	r2, [r7, #22]
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	32ae      	adds	r2, #174	@ 0xae
 800ec74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec78:	691b      	ldr	r3, [r3, #16]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d00b      	beq.n	800ec96 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ec7e:	7dba      	ldrb	r2, [r7, #22]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ec86:	7dba      	ldrb	r2, [r7, #22]
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	32ae      	adds	r2, #174	@ 0xae
 800ec8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec90:	691b      	ldr	r3, [r3, #16]
 800ec92:	68f8      	ldr	r0, [r7, #12]
 800ec94:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ec96:	68f8      	ldr	r0, [r7, #12]
 800ec98:	f001 f995 	bl	800ffc6 <USBD_CtlSendStatus>
 800ec9c:	e032      	b.n	800ed04 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ec9e:	7afb      	ldrb	r3, [r7, #11]
 800eca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eca4:	b2db      	uxtb	r3, r3
 800eca6:	4619      	mov	r1, r3
 800eca8:	68f8      	ldr	r0, [r7, #12]
 800ecaa:	f000 f971 	bl	800ef90 <USBD_CoreFindEP>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ecb2:	7dbb      	ldrb	r3, [r7, #22]
 800ecb4:	2bff      	cmp	r3, #255	@ 0xff
 800ecb6:	d025      	beq.n	800ed04 <USBD_LL_DataOutStage+0x15c>
 800ecb8:	7dbb      	ldrb	r3, [r7, #22]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d122      	bne.n	800ed04 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	2b03      	cmp	r3, #3
 800ecc8:	d117      	bne.n	800ecfa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ecca:	7dba      	ldrb	r2, [r7, #22]
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	32ae      	adds	r2, #174	@ 0xae
 800ecd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecd4:	699b      	ldr	r3, [r3, #24]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d00f      	beq.n	800ecfa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ecda:	7dba      	ldrb	r2, [r7, #22]
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ece2:	7dba      	ldrb	r2, [r7, #22]
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	32ae      	adds	r2, #174	@ 0xae
 800ece8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecec:	699b      	ldr	r3, [r3, #24]
 800ecee:	7afa      	ldrb	r2, [r7, #11]
 800ecf0:	4611      	mov	r1, r2
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	4798      	blx	r3
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ecfa:	7dfb      	ldrb	r3, [r7, #23]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d001      	beq.n	800ed04 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ed00:	7dfb      	ldrb	r3, [r7, #23]
 800ed02:	e000      	b.n	800ed06 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ed04:	2300      	movs	r3, #0
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3718      	adds	r7, #24
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ed0e:	b580      	push	{r7, lr}
 800ed10:	b086      	sub	sp, #24
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	60f8      	str	r0, [r7, #12]
 800ed16:	460b      	mov	r3, r1
 800ed18:	607a      	str	r2, [r7, #4]
 800ed1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ed1c:	7afb      	ldrb	r3, [r7, #11]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d16f      	bne.n	800ee02 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	3314      	adds	r3, #20
 800ed26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ed2e:	2b02      	cmp	r3, #2
 800ed30:	d15a      	bne.n	800ede8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	689a      	ldr	r2, [r3, #8]
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d914      	bls.n	800ed68 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ed3e:	693b      	ldr	r3, [r7, #16]
 800ed40:	689a      	ldr	r2, [r3, #8]
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	68db      	ldr	r3, [r3, #12]
 800ed46:	1ad2      	subs	r2, r2, r3
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	689b      	ldr	r3, [r3, #8]
 800ed50:	461a      	mov	r2, r3
 800ed52:	6879      	ldr	r1, [r7, #4]
 800ed54:	68f8      	ldr	r0, [r7, #12]
 800ed56:	f001 f8f7 	bl	800ff48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	2100      	movs	r1, #0
 800ed60:	68f8      	ldr	r0, [r7, #12]
 800ed62:	f7ff fda7 	bl	800e8b4 <USBD_LL_PrepareReceive>
 800ed66:	e03f      	b.n	800ede8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	68da      	ldr	r2, [r3, #12]
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	689b      	ldr	r3, [r3, #8]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d11c      	bne.n	800edae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	685a      	ldr	r2, [r3, #4]
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d316      	bcc.n	800edae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	685a      	ldr	r2, [r3, #4]
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d20f      	bcs.n	800edae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ed8e:	2200      	movs	r2, #0
 800ed90:	2100      	movs	r1, #0
 800ed92:	68f8      	ldr	r0, [r7, #12]
 800ed94:	f001 f8d8 	bl	800ff48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eda0:	2300      	movs	r3, #0
 800eda2:	2200      	movs	r2, #0
 800eda4:	2100      	movs	r1, #0
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f7ff fd84 	bl	800e8b4 <USBD_LL_PrepareReceive>
 800edac:	e01c      	b.n	800ede8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edb4:	b2db      	uxtb	r3, r3
 800edb6:	2b03      	cmp	r3, #3
 800edb8:	d10f      	bne.n	800edda <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edc0:	68db      	ldr	r3, [r3, #12]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d009      	beq.n	800edda <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2200      	movs	r2, #0
 800edca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	68f8      	ldr	r0, [r7, #12]
 800edd8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800edda:	2180      	movs	r1, #128	@ 0x80
 800eddc:	68f8      	ldr	r0, [r7, #12]
 800edde:	f7ff fcd7 	bl	800e790 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ede2:	68f8      	ldr	r0, [r7, #12]
 800ede4:	f001 f902 	bl	800ffec <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d03a      	beq.n	800ee68 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800edf2:	68f8      	ldr	r0, [r7, #12]
 800edf4:	f7ff fe42 	bl	800ea7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2200      	movs	r2, #0
 800edfc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ee00:	e032      	b.n	800ee68 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ee02:	7afb      	ldrb	r3, [r7, #11]
 800ee04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ee08:	b2db      	uxtb	r3, r3
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	68f8      	ldr	r0, [r7, #12]
 800ee0e:	f000 f8bf 	bl	800ef90 <USBD_CoreFindEP>
 800ee12:	4603      	mov	r3, r0
 800ee14:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ee16:	7dfb      	ldrb	r3, [r7, #23]
 800ee18:	2bff      	cmp	r3, #255	@ 0xff
 800ee1a:	d025      	beq.n	800ee68 <USBD_LL_DataInStage+0x15a>
 800ee1c:	7dfb      	ldrb	r3, [r7, #23]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d122      	bne.n	800ee68 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	2b03      	cmp	r3, #3
 800ee2c:	d11c      	bne.n	800ee68 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ee2e:	7dfa      	ldrb	r2, [r7, #23]
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	32ae      	adds	r2, #174	@ 0xae
 800ee34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee38:	695b      	ldr	r3, [r3, #20]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d014      	beq.n	800ee68 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ee3e:	7dfa      	ldrb	r2, [r7, #23]
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ee46:	7dfa      	ldrb	r2, [r7, #23]
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	32ae      	adds	r2, #174	@ 0xae
 800ee4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee50:	695b      	ldr	r3, [r3, #20]
 800ee52:	7afa      	ldrb	r2, [r7, #11]
 800ee54:	4611      	mov	r1, r2
 800ee56:	68f8      	ldr	r0, [r7, #12]
 800ee58:	4798      	blx	r3
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ee5e:	7dbb      	ldrb	r3, [r7, #22]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d001      	beq.n	800ee68 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ee64:	7dbb      	ldrb	r3, [r7, #22]
 800ee66:	e000      	b.n	800ee6a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3718      	adds	r7, #24
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}

0800ee72 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ee72:	b580      	push	{r7, lr}
 800ee74:	b084      	sub	sp, #16
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2201      	movs	r2, #1
 800ee82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2200      	movs	r2, #0
 800ee92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2200      	movs	r2, #0
 800ee98:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d014      	beq.n	800eed8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d00e      	beq.n	800eed8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	6852      	ldr	r2, [r2, #4]
 800eec6:	b2d2      	uxtb	r2, r2
 800eec8:	4611      	mov	r1, r2
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	4798      	blx	r3
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d001      	beq.n	800eed8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800eed4:	2303      	movs	r3, #3
 800eed6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eed8:	2340      	movs	r3, #64	@ 0x40
 800eeda:	2200      	movs	r2, #0
 800eedc:	2100      	movs	r1, #0
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7ff fc1d 	bl	800e71e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2201      	movs	r2, #1
 800eee8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2240      	movs	r2, #64	@ 0x40
 800eef0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eef4:	2340      	movs	r3, #64	@ 0x40
 800eef6:	2200      	movs	r2, #0
 800eef8:	2180      	movs	r1, #128	@ 0x80
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f7ff fc0f 	bl	800e71e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2201      	movs	r2, #1
 800ef04:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2240      	movs	r2, #64	@ 0x40
 800ef0a:	621a      	str	r2, [r3, #32]

  return ret;
 800ef0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3710      	adds	r7, #16
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ef16:	b480      	push	{r7}
 800ef18:	b083      	sub	sp, #12
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
 800ef1e:	460b      	mov	r3, r1
 800ef20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	78fa      	ldrb	r2, [r7, #3]
 800ef26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ef28:	2300      	movs	r3, #0
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	370c      	adds	r7, #12
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr

0800ef36 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ef36:	b580      	push	{r7, lr}
 800ef38:	b082      	sub	sp, #8
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef44:	b2db      	uxtb	r3, r3
 800ef46:	2b03      	cmp	r3, #3
 800ef48:	d110      	bne.n	800ef6c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d00b      	beq.n	800ef6c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef5a:	69db      	ldr	r3, [r3, #28]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d005      	beq.n	800ef6c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef66:	69db      	ldr	r3, [r3, #28]
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ef6c:	2300      	movs	r3, #0
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3708      	adds	r7, #8
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}

0800ef76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ef76:	b480      	push	{r7}
 800ef78:	b083      	sub	sp, #12
 800ef7a:	af00      	add	r7, sp, #0
 800ef7c:	6078      	str	r0, [r7, #4]
 800ef7e:	460b      	mov	r3, r1
 800ef80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ef82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	370c      	adds	r7, #12
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr

0800ef90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	460b      	mov	r3, r1
 800ef9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ef9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	370c      	adds	r7, #12
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr

0800efaa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800efaa:	b580      	push	{r7, lr}
 800efac:	b086      	sub	sp, #24
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
 800efb2:	460b      	mov	r3, r1
 800efb4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800efbe:	2300      	movs	r3, #0
 800efc0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	885b      	ldrh	r3, [r3, #2]
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	68fa      	ldr	r2, [r7, #12]
 800efca:	7812      	ldrb	r2, [r2, #0]
 800efcc:	4293      	cmp	r3, r2
 800efce:	d91f      	bls.n	800f010 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800efd6:	e013      	b.n	800f000 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800efd8:	f107 030a 	add.w	r3, r7, #10
 800efdc:	4619      	mov	r1, r3
 800efde:	6978      	ldr	r0, [r7, #20]
 800efe0:	f000 f81b 	bl	800f01a <USBD_GetNextDesc>
 800efe4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	785b      	ldrb	r3, [r3, #1]
 800efea:	2b05      	cmp	r3, #5
 800efec:	d108      	bne.n	800f000 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	789b      	ldrb	r3, [r3, #2]
 800eff6:	78fa      	ldrb	r2, [r7, #3]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d008      	beq.n	800f00e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800effc:	2300      	movs	r3, #0
 800effe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	885b      	ldrh	r3, [r3, #2]
 800f004:	b29a      	uxth	r2, r3
 800f006:	897b      	ldrh	r3, [r7, #10]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d8e5      	bhi.n	800efd8 <USBD_GetEpDesc+0x2e>
 800f00c:	e000      	b.n	800f010 <USBD_GetEpDesc+0x66>
          break;
 800f00e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f010:	693b      	ldr	r3, [r7, #16]
}
 800f012:	4618      	mov	r0, r3
 800f014:	3718      	adds	r7, #24
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f01a:	b480      	push	{r7}
 800f01c:	b085      	sub	sp, #20
 800f01e:	af00      	add	r7, sp, #0
 800f020:	6078      	str	r0, [r7, #4]
 800f022:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	881b      	ldrh	r3, [r3, #0]
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	7812      	ldrb	r2, [r2, #0]
 800f030:	4413      	add	r3, r2
 800f032:	b29a      	uxth	r2, r3
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	781b      	ldrb	r3, [r3, #0]
 800f03c:	461a      	mov	r2, r3
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	4413      	add	r3, r2
 800f042:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f044:	68fb      	ldr	r3, [r7, #12]
}
 800f046:	4618      	mov	r0, r3
 800f048:	3714      	adds	r7, #20
 800f04a:	46bd      	mov	sp, r7
 800f04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f050:	4770      	bx	lr

0800f052 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f052:	b480      	push	{r7}
 800f054:	b087      	sub	sp, #28
 800f056:	af00      	add	r7, sp, #0
 800f058:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	3301      	adds	r3, #1
 800f068:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f070:	8a3b      	ldrh	r3, [r7, #16]
 800f072:	021b      	lsls	r3, r3, #8
 800f074:	b21a      	sxth	r2, r3
 800f076:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f07a:	4313      	orrs	r3, r2
 800f07c:	b21b      	sxth	r3, r3
 800f07e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f080:	89fb      	ldrh	r3, [r7, #14]
}
 800f082:	4618      	mov	r0, r3
 800f084:	371c      	adds	r7, #28
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr
	...

0800f090 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f09a:	2300      	movs	r3, #0
 800f09c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f0a6:	2b40      	cmp	r3, #64	@ 0x40
 800f0a8:	d005      	beq.n	800f0b6 <USBD_StdDevReq+0x26>
 800f0aa:	2b40      	cmp	r3, #64	@ 0x40
 800f0ac:	d857      	bhi.n	800f15e <USBD_StdDevReq+0xce>
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d00f      	beq.n	800f0d2 <USBD_StdDevReq+0x42>
 800f0b2:	2b20      	cmp	r3, #32
 800f0b4:	d153      	bne.n	800f15e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	32ae      	adds	r2, #174	@ 0xae
 800f0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0c4:	689b      	ldr	r3, [r3, #8]
 800f0c6:	6839      	ldr	r1, [r7, #0]
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	4798      	blx	r3
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	73fb      	strb	r3, [r7, #15]
      break;
 800f0d0:	e04a      	b.n	800f168 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	785b      	ldrb	r3, [r3, #1]
 800f0d6:	2b09      	cmp	r3, #9
 800f0d8:	d83b      	bhi.n	800f152 <USBD_StdDevReq+0xc2>
 800f0da:	a201      	add	r2, pc, #4	@ (adr r2, 800f0e0 <USBD_StdDevReq+0x50>)
 800f0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e0:	0800f135 	.word	0x0800f135
 800f0e4:	0800f149 	.word	0x0800f149
 800f0e8:	0800f153 	.word	0x0800f153
 800f0ec:	0800f13f 	.word	0x0800f13f
 800f0f0:	0800f153 	.word	0x0800f153
 800f0f4:	0800f113 	.word	0x0800f113
 800f0f8:	0800f109 	.word	0x0800f109
 800f0fc:	0800f153 	.word	0x0800f153
 800f100:	0800f12b 	.word	0x0800f12b
 800f104:	0800f11d 	.word	0x0800f11d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f108:	6839      	ldr	r1, [r7, #0]
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f000 fa3c 	bl	800f588 <USBD_GetDescriptor>
          break;
 800f110:	e024      	b.n	800f15c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f112:	6839      	ldr	r1, [r7, #0]
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f000 fba1 	bl	800f85c <USBD_SetAddress>
          break;
 800f11a:	e01f      	b.n	800f15c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f11c:	6839      	ldr	r1, [r7, #0]
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f000 fbe0 	bl	800f8e4 <USBD_SetConfig>
 800f124:	4603      	mov	r3, r0
 800f126:	73fb      	strb	r3, [r7, #15]
          break;
 800f128:	e018      	b.n	800f15c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f12a:	6839      	ldr	r1, [r7, #0]
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f000 fc83 	bl	800fa38 <USBD_GetConfig>
          break;
 800f132:	e013      	b.n	800f15c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f134:	6839      	ldr	r1, [r7, #0]
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 fcb4 	bl	800faa4 <USBD_GetStatus>
          break;
 800f13c:	e00e      	b.n	800f15c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f13e:	6839      	ldr	r1, [r7, #0]
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f000 fce3 	bl	800fb0c <USBD_SetFeature>
          break;
 800f146:	e009      	b.n	800f15c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f148:	6839      	ldr	r1, [r7, #0]
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f000 fd07 	bl	800fb5e <USBD_ClrFeature>
          break;
 800f150:	e004      	b.n	800f15c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f152:	6839      	ldr	r1, [r7, #0]
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 fd5e 	bl	800fc16 <USBD_CtlError>
          break;
 800f15a:	bf00      	nop
      }
      break;
 800f15c:	e004      	b.n	800f168 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f15e:	6839      	ldr	r1, [r7, #0]
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 fd58 	bl	800fc16 <USBD_CtlError>
      break;
 800f166:	bf00      	nop
  }

  return ret;
 800f168:	7bfb      	ldrb	r3, [r7, #15]
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3710      	adds	r7, #16
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
 800f172:	bf00      	nop

0800f174 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f17e:	2300      	movs	r3, #0
 800f180:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	781b      	ldrb	r3, [r3, #0]
 800f186:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f18a:	2b40      	cmp	r3, #64	@ 0x40
 800f18c:	d005      	beq.n	800f19a <USBD_StdItfReq+0x26>
 800f18e:	2b40      	cmp	r3, #64	@ 0x40
 800f190:	d852      	bhi.n	800f238 <USBD_StdItfReq+0xc4>
 800f192:	2b00      	cmp	r3, #0
 800f194:	d001      	beq.n	800f19a <USBD_StdItfReq+0x26>
 800f196:	2b20      	cmp	r3, #32
 800f198:	d14e      	bne.n	800f238 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1a0:	b2db      	uxtb	r3, r3
 800f1a2:	3b01      	subs	r3, #1
 800f1a4:	2b02      	cmp	r3, #2
 800f1a6:	d840      	bhi.n	800f22a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	889b      	ldrh	r3, [r3, #4]
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	d836      	bhi.n	800f220 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	889b      	ldrh	r3, [r3, #4]
 800f1b6:	b2db      	uxtb	r3, r3
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7ff fedb 	bl	800ef76 <USBD_CoreFindIF>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f1c4:	7bbb      	ldrb	r3, [r7, #14]
 800f1c6:	2bff      	cmp	r3, #255	@ 0xff
 800f1c8:	d01d      	beq.n	800f206 <USBD_StdItfReq+0x92>
 800f1ca:	7bbb      	ldrb	r3, [r7, #14]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d11a      	bne.n	800f206 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f1d0:	7bba      	ldrb	r2, [r7, #14]
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	32ae      	adds	r2, #174	@ 0xae
 800f1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1da:	689b      	ldr	r3, [r3, #8]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d00f      	beq.n	800f200 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f1e0:	7bba      	ldrb	r2, [r7, #14]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f1e8:	7bba      	ldrb	r2, [r7, #14]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	32ae      	adds	r2, #174	@ 0xae
 800f1ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1f2:	689b      	ldr	r3, [r3, #8]
 800f1f4:	6839      	ldr	r1, [r7, #0]
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	4798      	blx	r3
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f1fe:	e004      	b.n	800f20a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f200:	2303      	movs	r3, #3
 800f202:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f204:	e001      	b.n	800f20a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f206:	2303      	movs	r3, #3
 800f208:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	88db      	ldrh	r3, [r3, #6]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d110      	bne.n	800f234 <USBD_StdItfReq+0xc0>
 800f212:	7bfb      	ldrb	r3, [r7, #15]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d10d      	bne.n	800f234 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f000 fed4 	bl	800ffc6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f21e:	e009      	b.n	800f234 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f220:	6839      	ldr	r1, [r7, #0]
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f000 fcf7 	bl	800fc16 <USBD_CtlError>
          break;
 800f228:	e004      	b.n	800f234 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f22a:	6839      	ldr	r1, [r7, #0]
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f000 fcf2 	bl	800fc16 <USBD_CtlError>
          break;
 800f232:	e000      	b.n	800f236 <USBD_StdItfReq+0xc2>
          break;
 800f234:	bf00      	nop
      }
      break;
 800f236:	e004      	b.n	800f242 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f238:	6839      	ldr	r1, [r7, #0]
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 fceb 	bl	800fc16 <USBD_CtlError>
      break;
 800f240:	bf00      	nop
  }

  return ret;
 800f242:	7bfb      	ldrb	r3, [r7, #15]
}
 800f244:	4618      	mov	r0, r3
 800f246:	3710      	adds	r7, #16
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f256:	2300      	movs	r3, #0
 800f258:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	889b      	ldrh	r3, [r3, #4]
 800f25e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f268:	2b40      	cmp	r3, #64	@ 0x40
 800f26a:	d007      	beq.n	800f27c <USBD_StdEPReq+0x30>
 800f26c:	2b40      	cmp	r3, #64	@ 0x40
 800f26e:	f200 817f 	bhi.w	800f570 <USBD_StdEPReq+0x324>
 800f272:	2b00      	cmp	r3, #0
 800f274:	d02a      	beq.n	800f2cc <USBD_StdEPReq+0x80>
 800f276:	2b20      	cmp	r3, #32
 800f278:	f040 817a 	bne.w	800f570 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f27c:	7bbb      	ldrb	r3, [r7, #14]
 800f27e:	4619      	mov	r1, r3
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f7ff fe85 	bl	800ef90 <USBD_CoreFindEP>
 800f286:	4603      	mov	r3, r0
 800f288:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f28a:	7b7b      	ldrb	r3, [r7, #13]
 800f28c:	2bff      	cmp	r3, #255	@ 0xff
 800f28e:	f000 8174 	beq.w	800f57a <USBD_StdEPReq+0x32e>
 800f292:	7b7b      	ldrb	r3, [r7, #13]
 800f294:	2b00      	cmp	r3, #0
 800f296:	f040 8170 	bne.w	800f57a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f29a:	7b7a      	ldrb	r2, [r7, #13]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f2a2:	7b7a      	ldrb	r2, [r7, #13]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	32ae      	adds	r2, #174	@ 0xae
 800f2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	f000 8163 	beq.w	800f57a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f2b4:	7b7a      	ldrb	r2, [r7, #13]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	32ae      	adds	r2, #174	@ 0xae
 800f2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2be:	689b      	ldr	r3, [r3, #8]
 800f2c0:	6839      	ldr	r1, [r7, #0]
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	4798      	blx	r3
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f2ca:	e156      	b.n	800f57a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	785b      	ldrb	r3, [r3, #1]
 800f2d0:	2b03      	cmp	r3, #3
 800f2d2:	d008      	beq.n	800f2e6 <USBD_StdEPReq+0x9a>
 800f2d4:	2b03      	cmp	r3, #3
 800f2d6:	f300 8145 	bgt.w	800f564 <USBD_StdEPReq+0x318>
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	f000 809b 	beq.w	800f416 <USBD_StdEPReq+0x1ca>
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d03c      	beq.n	800f35e <USBD_StdEPReq+0x112>
 800f2e4:	e13e      	b.n	800f564 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	2b02      	cmp	r3, #2
 800f2f0:	d002      	beq.n	800f2f8 <USBD_StdEPReq+0xac>
 800f2f2:	2b03      	cmp	r3, #3
 800f2f4:	d016      	beq.n	800f324 <USBD_StdEPReq+0xd8>
 800f2f6:	e02c      	b.n	800f352 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f2f8:	7bbb      	ldrb	r3, [r7, #14]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d00d      	beq.n	800f31a <USBD_StdEPReq+0xce>
 800f2fe:	7bbb      	ldrb	r3, [r7, #14]
 800f300:	2b80      	cmp	r3, #128	@ 0x80
 800f302:	d00a      	beq.n	800f31a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f304:	7bbb      	ldrb	r3, [r7, #14]
 800f306:	4619      	mov	r1, r3
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f7ff fa41 	bl	800e790 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f30e:	2180      	movs	r1, #128	@ 0x80
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f7ff fa3d 	bl	800e790 <USBD_LL_StallEP>
 800f316:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f318:	e020      	b.n	800f35c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f31a:	6839      	ldr	r1, [r7, #0]
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 fc7a 	bl	800fc16 <USBD_CtlError>
              break;
 800f322:	e01b      	b.n	800f35c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	885b      	ldrh	r3, [r3, #2]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d10e      	bne.n	800f34a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f32c:	7bbb      	ldrb	r3, [r7, #14]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d00b      	beq.n	800f34a <USBD_StdEPReq+0xfe>
 800f332:	7bbb      	ldrb	r3, [r7, #14]
 800f334:	2b80      	cmp	r3, #128	@ 0x80
 800f336:	d008      	beq.n	800f34a <USBD_StdEPReq+0xfe>
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	88db      	ldrh	r3, [r3, #6]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d104      	bne.n	800f34a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f340:	7bbb      	ldrb	r3, [r7, #14]
 800f342:	4619      	mov	r1, r3
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f7ff fa23 	bl	800e790 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f000 fe3b 	bl	800ffc6 <USBD_CtlSendStatus>

              break;
 800f350:	e004      	b.n	800f35c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f352:	6839      	ldr	r1, [r7, #0]
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 fc5e 	bl	800fc16 <USBD_CtlError>
              break;
 800f35a:	bf00      	nop
          }
          break;
 800f35c:	e107      	b.n	800f56e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f364:	b2db      	uxtb	r3, r3
 800f366:	2b02      	cmp	r3, #2
 800f368:	d002      	beq.n	800f370 <USBD_StdEPReq+0x124>
 800f36a:	2b03      	cmp	r3, #3
 800f36c:	d016      	beq.n	800f39c <USBD_StdEPReq+0x150>
 800f36e:	e04b      	b.n	800f408 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f370:	7bbb      	ldrb	r3, [r7, #14]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00d      	beq.n	800f392 <USBD_StdEPReq+0x146>
 800f376:	7bbb      	ldrb	r3, [r7, #14]
 800f378:	2b80      	cmp	r3, #128	@ 0x80
 800f37a:	d00a      	beq.n	800f392 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f37c:	7bbb      	ldrb	r3, [r7, #14]
 800f37e:	4619      	mov	r1, r3
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f7ff fa05 	bl	800e790 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f386:	2180      	movs	r1, #128	@ 0x80
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f7ff fa01 	bl	800e790 <USBD_LL_StallEP>
 800f38e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f390:	e040      	b.n	800f414 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f392:	6839      	ldr	r1, [r7, #0]
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f000 fc3e 	bl	800fc16 <USBD_CtlError>
              break;
 800f39a:	e03b      	b.n	800f414 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	885b      	ldrh	r3, [r3, #2]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d136      	bne.n	800f412 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f3a4:	7bbb      	ldrb	r3, [r7, #14]
 800f3a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d004      	beq.n	800f3b8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f3ae:	7bbb      	ldrb	r3, [r7, #14]
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f7ff fa05 	bl	800e7c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f000 fe04 	bl	800ffc6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f3be:	7bbb      	ldrb	r3, [r7, #14]
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f7ff fde4 	bl	800ef90 <USBD_CoreFindEP>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f3cc:	7b7b      	ldrb	r3, [r7, #13]
 800f3ce:	2bff      	cmp	r3, #255	@ 0xff
 800f3d0:	d01f      	beq.n	800f412 <USBD_StdEPReq+0x1c6>
 800f3d2:	7b7b      	ldrb	r3, [r7, #13]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d11c      	bne.n	800f412 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f3d8:	7b7a      	ldrb	r2, [r7, #13]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f3e0:	7b7a      	ldrb	r2, [r7, #13]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	32ae      	adds	r2, #174	@ 0xae
 800f3e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d010      	beq.n	800f412 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f3f0:	7b7a      	ldrb	r2, [r7, #13]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	32ae      	adds	r2, #174	@ 0xae
 800f3f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3fa:	689b      	ldr	r3, [r3, #8]
 800f3fc:	6839      	ldr	r1, [r7, #0]
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	4798      	blx	r3
 800f402:	4603      	mov	r3, r0
 800f404:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f406:	e004      	b.n	800f412 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f408:	6839      	ldr	r1, [r7, #0]
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f000 fc03 	bl	800fc16 <USBD_CtlError>
              break;
 800f410:	e000      	b.n	800f414 <USBD_StdEPReq+0x1c8>
              break;
 800f412:	bf00      	nop
          }
          break;
 800f414:	e0ab      	b.n	800f56e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f41c:	b2db      	uxtb	r3, r3
 800f41e:	2b02      	cmp	r3, #2
 800f420:	d002      	beq.n	800f428 <USBD_StdEPReq+0x1dc>
 800f422:	2b03      	cmp	r3, #3
 800f424:	d032      	beq.n	800f48c <USBD_StdEPReq+0x240>
 800f426:	e097      	b.n	800f558 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f428:	7bbb      	ldrb	r3, [r7, #14]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d007      	beq.n	800f43e <USBD_StdEPReq+0x1f2>
 800f42e:	7bbb      	ldrb	r3, [r7, #14]
 800f430:	2b80      	cmp	r3, #128	@ 0x80
 800f432:	d004      	beq.n	800f43e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f434:	6839      	ldr	r1, [r7, #0]
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f000 fbed 	bl	800fc16 <USBD_CtlError>
                break;
 800f43c:	e091      	b.n	800f562 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f43e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f442:	2b00      	cmp	r3, #0
 800f444:	da0b      	bge.n	800f45e <USBD_StdEPReq+0x212>
 800f446:	7bbb      	ldrb	r3, [r7, #14]
 800f448:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f44c:	4613      	mov	r3, r2
 800f44e:	009b      	lsls	r3, r3, #2
 800f450:	4413      	add	r3, r2
 800f452:	009b      	lsls	r3, r3, #2
 800f454:	3310      	adds	r3, #16
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	4413      	add	r3, r2
 800f45a:	3304      	adds	r3, #4
 800f45c:	e00b      	b.n	800f476 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f45e:	7bbb      	ldrb	r3, [r7, #14]
 800f460:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f464:	4613      	mov	r3, r2
 800f466:	009b      	lsls	r3, r3, #2
 800f468:	4413      	add	r3, r2
 800f46a:	009b      	lsls	r3, r3, #2
 800f46c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	4413      	add	r3, r2
 800f474:	3304      	adds	r3, #4
 800f476:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	2200      	movs	r2, #0
 800f47c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	2202      	movs	r2, #2
 800f482:	4619      	mov	r1, r3
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f000 fd44 	bl	800ff12 <USBD_CtlSendData>
              break;
 800f48a:	e06a      	b.n	800f562 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f48c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f490:	2b00      	cmp	r3, #0
 800f492:	da11      	bge.n	800f4b8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f494:	7bbb      	ldrb	r3, [r7, #14]
 800f496:	f003 020f 	and.w	r2, r3, #15
 800f49a:	6879      	ldr	r1, [r7, #4]
 800f49c:	4613      	mov	r3, r2
 800f49e:	009b      	lsls	r3, r3, #2
 800f4a0:	4413      	add	r3, r2
 800f4a2:	009b      	lsls	r3, r3, #2
 800f4a4:	440b      	add	r3, r1
 800f4a6:	3324      	adds	r3, #36	@ 0x24
 800f4a8:	881b      	ldrh	r3, [r3, #0]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d117      	bne.n	800f4de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f4ae:	6839      	ldr	r1, [r7, #0]
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f000 fbb0 	bl	800fc16 <USBD_CtlError>
                  break;
 800f4b6:	e054      	b.n	800f562 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f4b8:	7bbb      	ldrb	r3, [r7, #14]
 800f4ba:	f003 020f 	and.w	r2, r3, #15
 800f4be:	6879      	ldr	r1, [r7, #4]
 800f4c0:	4613      	mov	r3, r2
 800f4c2:	009b      	lsls	r3, r3, #2
 800f4c4:	4413      	add	r3, r2
 800f4c6:	009b      	lsls	r3, r3, #2
 800f4c8:	440b      	add	r3, r1
 800f4ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f4ce:	881b      	ldrh	r3, [r3, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d104      	bne.n	800f4de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f4d4:	6839      	ldr	r1, [r7, #0]
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f000 fb9d 	bl	800fc16 <USBD_CtlError>
                  break;
 800f4dc:	e041      	b.n	800f562 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	da0b      	bge.n	800f4fe <USBD_StdEPReq+0x2b2>
 800f4e6:	7bbb      	ldrb	r3, [r7, #14]
 800f4e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f4ec:	4613      	mov	r3, r2
 800f4ee:	009b      	lsls	r3, r3, #2
 800f4f0:	4413      	add	r3, r2
 800f4f2:	009b      	lsls	r3, r3, #2
 800f4f4:	3310      	adds	r3, #16
 800f4f6:	687a      	ldr	r2, [r7, #4]
 800f4f8:	4413      	add	r3, r2
 800f4fa:	3304      	adds	r3, #4
 800f4fc:	e00b      	b.n	800f516 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f4fe:	7bbb      	ldrb	r3, [r7, #14]
 800f500:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f504:	4613      	mov	r3, r2
 800f506:	009b      	lsls	r3, r3, #2
 800f508:	4413      	add	r3, r2
 800f50a:	009b      	lsls	r3, r3, #2
 800f50c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f510:	687a      	ldr	r2, [r7, #4]
 800f512:	4413      	add	r3, r2
 800f514:	3304      	adds	r3, #4
 800f516:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f518:	7bbb      	ldrb	r3, [r7, #14]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d002      	beq.n	800f524 <USBD_StdEPReq+0x2d8>
 800f51e:	7bbb      	ldrb	r3, [r7, #14]
 800f520:	2b80      	cmp	r3, #128	@ 0x80
 800f522:	d103      	bne.n	800f52c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	2200      	movs	r2, #0
 800f528:	601a      	str	r2, [r3, #0]
 800f52a:	e00e      	b.n	800f54a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f52c:	7bbb      	ldrb	r3, [r7, #14]
 800f52e:	4619      	mov	r1, r3
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f7ff f95f 	bl	800e7f4 <USBD_LL_IsStallEP>
 800f536:	4603      	mov	r3, r0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d003      	beq.n	800f544 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	2201      	movs	r2, #1
 800f540:	601a      	str	r2, [r3, #0]
 800f542:	e002      	b.n	800f54a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	2200      	movs	r2, #0
 800f548:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	2202      	movs	r2, #2
 800f54e:	4619      	mov	r1, r3
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f000 fcde 	bl	800ff12 <USBD_CtlSendData>
              break;
 800f556:	e004      	b.n	800f562 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f558:	6839      	ldr	r1, [r7, #0]
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 fb5b 	bl	800fc16 <USBD_CtlError>
              break;
 800f560:	bf00      	nop
          }
          break;
 800f562:	e004      	b.n	800f56e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f564:	6839      	ldr	r1, [r7, #0]
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f000 fb55 	bl	800fc16 <USBD_CtlError>
          break;
 800f56c:	bf00      	nop
      }
      break;
 800f56e:	e005      	b.n	800f57c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f570:	6839      	ldr	r1, [r7, #0]
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f000 fb4f 	bl	800fc16 <USBD_CtlError>
      break;
 800f578:	e000      	b.n	800f57c <USBD_StdEPReq+0x330>
      break;
 800f57a:	bf00      	nop
  }

  return ret;
 800f57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3710      	adds	r7, #16
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
	...

0800f588 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f592:	2300      	movs	r3, #0
 800f594:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f596:	2300      	movs	r3, #0
 800f598:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f59a:	2300      	movs	r3, #0
 800f59c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	885b      	ldrh	r3, [r3, #2]
 800f5a2:	0a1b      	lsrs	r3, r3, #8
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	3b01      	subs	r3, #1
 800f5a8:	2b06      	cmp	r3, #6
 800f5aa:	f200 8128 	bhi.w	800f7fe <USBD_GetDescriptor+0x276>
 800f5ae:	a201      	add	r2, pc, #4	@ (adr r2, 800f5b4 <USBD_GetDescriptor+0x2c>)
 800f5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5b4:	0800f5d1 	.word	0x0800f5d1
 800f5b8:	0800f5e9 	.word	0x0800f5e9
 800f5bc:	0800f629 	.word	0x0800f629
 800f5c0:	0800f7ff 	.word	0x0800f7ff
 800f5c4:	0800f7ff 	.word	0x0800f7ff
 800f5c8:	0800f79f 	.word	0x0800f79f
 800f5cc:	0800f7cb 	.word	0x0800f7cb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	687a      	ldr	r2, [r7, #4]
 800f5da:	7c12      	ldrb	r2, [r2, #16]
 800f5dc:	f107 0108 	add.w	r1, r7, #8
 800f5e0:	4610      	mov	r0, r2
 800f5e2:	4798      	blx	r3
 800f5e4:	60f8      	str	r0, [r7, #12]
      break;
 800f5e6:	e112      	b.n	800f80e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	7c1b      	ldrb	r3, [r3, #16]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d10d      	bne.n	800f60c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5f8:	f107 0208 	add.w	r2, r7, #8
 800f5fc:	4610      	mov	r0, r2
 800f5fe:	4798      	blx	r3
 800f600:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	3301      	adds	r3, #1
 800f606:	2202      	movs	r2, #2
 800f608:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f60a:	e100      	b.n	800f80e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f614:	f107 0208 	add.w	r2, r7, #8
 800f618:	4610      	mov	r0, r2
 800f61a:	4798      	blx	r3
 800f61c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	3301      	adds	r3, #1
 800f622:	2202      	movs	r2, #2
 800f624:	701a      	strb	r2, [r3, #0]
      break;
 800f626:	e0f2      	b.n	800f80e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	885b      	ldrh	r3, [r3, #2]
 800f62c:	b2db      	uxtb	r3, r3
 800f62e:	2b05      	cmp	r3, #5
 800f630:	f200 80ac 	bhi.w	800f78c <USBD_GetDescriptor+0x204>
 800f634:	a201      	add	r2, pc, #4	@ (adr r2, 800f63c <USBD_GetDescriptor+0xb4>)
 800f636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f63a:	bf00      	nop
 800f63c:	0800f655 	.word	0x0800f655
 800f640:	0800f689 	.word	0x0800f689
 800f644:	0800f6bd 	.word	0x0800f6bd
 800f648:	0800f6f1 	.word	0x0800f6f1
 800f64c:	0800f725 	.word	0x0800f725
 800f650:	0800f759 	.word	0x0800f759
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d00b      	beq.n	800f678 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	687a      	ldr	r2, [r7, #4]
 800f66a:	7c12      	ldrb	r2, [r2, #16]
 800f66c:	f107 0108 	add.w	r1, r7, #8
 800f670:	4610      	mov	r0, r2
 800f672:	4798      	blx	r3
 800f674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f676:	e091      	b.n	800f79c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f678:	6839      	ldr	r1, [r7, #0]
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f000 facb 	bl	800fc16 <USBD_CtlError>
            err++;
 800f680:	7afb      	ldrb	r3, [r7, #11]
 800f682:	3301      	adds	r3, #1
 800f684:	72fb      	strb	r3, [r7, #11]
          break;
 800f686:	e089      	b.n	800f79c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f68e:	689b      	ldr	r3, [r3, #8]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d00b      	beq.n	800f6ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f69a:	689b      	ldr	r3, [r3, #8]
 800f69c:	687a      	ldr	r2, [r7, #4]
 800f69e:	7c12      	ldrb	r2, [r2, #16]
 800f6a0:	f107 0108 	add.w	r1, r7, #8
 800f6a4:	4610      	mov	r0, r2
 800f6a6:	4798      	blx	r3
 800f6a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6aa:	e077      	b.n	800f79c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6ac:	6839      	ldr	r1, [r7, #0]
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f000 fab1 	bl	800fc16 <USBD_CtlError>
            err++;
 800f6b4:	7afb      	ldrb	r3, [r7, #11]
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	72fb      	strb	r3, [r7, #11]
          break;
 800f6ba:	e06f      	b.n	800f79c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d00b      	beq.n	800f6e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	687a      	ldr	r2, [r7, #4]
 800f6d2:	7c12      	ldrb	r2, [r2, #16]
 800f6d4:	f107 0108 	add.w	r1, r7, #8
 800f6d8:	4610      	mov	r0, r2
 800f6da:	4798      	blx	r3
 800f6dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6de:	e05d      	b.n	800f79c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6e0:	6839      	ldr	r1, [r7, #0]
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f000 fa97 	bl	800fc16 <USBD_CtlError>
            err++;
 800f6e8:	7afb      	ldrb	r3, [r7, #11]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	72fb      	strb	r3, [r7, #11]
          break;
 800f6ee:	e055      	b.n	800f79c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6f6:	691b      	ldr	r3, [r3, #16]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d00b      	beq.n	800f714 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f702:	691b      	ldr	r3, [r3, #16]
 800f704:	687a      	ldr	r2, [r7, #4]
 800f706:	7c12      	ldrb	r2, [r2, #16]
 800f708:	f107 0108 	add.w	r1, r7, #8
 800f70c:	4610      	mov	r0, r2
 800f70e:	4798      	blx	r3
 800f710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f712:	e043      	b.n	800f79c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f714:	6839      	ldr	r1, [r7, #0]
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f000 fa7d 	bl	800fc16 <USBD_CtlError>
            err++;
 800f71c:	7afb      	ldrb	r3, [r7, #11]
 800f71e:	3301      	adds	r3, #1
 800f720:	72fb      	strb	r3, [r7, #11]
          break;
 800f722:	e03b      	b.n	800f79c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f72a:	695b      	ldr	r3, [r3, #20]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d00b      	beq.n	800f748 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f736:	695b      	ldr	r3, [r3, #20]
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	7c12      	ldrb	r2, [r2, #16]
 800f73c:	f107 0108 	add.w	r1, r7, #8
 800f740:	4610      	mov	r0, r2
 800f742:	4798      	blx	r3
 800f744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f746:	e029      	b.n	800f79c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f748:	6839      	ldr	r1, [r7, #0]
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 fa63 	bl	800fc16 <USBD_CtlError>
            err++;
 800f750:	7afb      	ldrb	r3, [r7, #11]
 800f752:	3301      	adds	r3, #1
 800f754:	72fb      	strb	r3, [r7, #11]
          break;
 800f756:	e021      	b.n	800f79c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f75e:	699b      	ldr	r3, [r3, #24]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d00b      	beq.n	800f77c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f76a:	699b      	ldr	r3, [r3, #24]
 800f76c:	687a      	ldr	r2, [r7, #4]
 800f76e:	7c12      	ldrb	r2, [r2, #16]
 800f770:	f107 0108 	add.w	r1, r7, #8
 800f774:	4610      	mov	r0, r2
 800f776:	4798      	blx	r3
 800f778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f77a:	e00f      	b.n	800f79c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f77c:	6839      	ldr	r1, [r7, #0]
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f000 fa49 	bl	800fc16 <USBD_CtlError>
            err++;
 800f784:	7afb      	ldrb	r3, [r7, #11]
 800f786:	3301      	adds	r3, #1
 800f788:	72fb      	strb	r3, [r7, #11]
          break;
 800f78a:	e007      	b.n	800f79c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f78c:	6839      	ldr	r1, [r7, #0]
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f000 fa41 	bl	800fc16 <USBD_CtlError>
          err++;
 800f794:	7afb      	ldrb	r3, [r7, #11]
 800f796:	3301      	adds	r3, #1
 800f798:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f79a:	bf00      	nop
      }
      break;
 800f79c:	e037      	b.n	800f80e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	7c1b      	ldrb	r3, [r3, #16]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d109      	bne.n	800f7ba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7ae:	f107 0208 	add.w	r2, r7, #8
 800f7b2:	4610      	mov	r0, r2
 800f7b4:	4798      	blx	r3
 800f7b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7b8:	e029      	b.n	800f80e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f7ba:	6839      	ldr	r1, [r7, #0]
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f000 fa2a 	bl	800fc16 <USBD_CtlError>
        err++;
 800f7c2:	7afb      	ldrb	r3, [r7, #11]
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	72fb      	strb	r3, [r7, #11]
      break;
 800f7c8:	e021      	b.n	800f80e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	7c1b      	ldrb	r3, [r3, #16]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d10d      	bne.n	800f7ee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7da:	f107 0208 	add.w	r2, r7, #8
 800f7de:	4610      	mov	r0, r2
 800f7e0:	4798      	blx	r3
 800f7e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	2207      	movs	r2, #7
 800f7ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7ec:	e00f      	b.n	800f80e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f7ee:	6839      	ldr	r1, [r7, #0]
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f000 fa10 	bl	800fc16 <USBD_CtlError>
        err++;
 800f7f6:	7afb      	ldrb	r3, [r7, #11]
 800f7f8:	3301      	adds	r3, #1
 800f7fa:	72fb      	strb	r3, [r7, #11]
      break;
 800f7fc:	e007      	b.n	800f80e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f7fe:	6839      	ldr	r1, [r7, #0]
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f000 fa08 	bl	800fc16 <USBD_CtlError>
      err++;
 800f806:	7afb      	ldrb	r3, [r7, #11]
 800f808:	3301      	adds	r3, #1
 800f80a:	72fb      	strb	r3, [r7, #11]
      break;
 800f80c:	bf00      	nop
  }

  if (err != 0U)
 800f80e:	7afb      	ldrb	r3, [r7, #11]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d11e      	bne.n	800f852 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	88db      	ldrh	r3, [r3, #6]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d016      	beq.n	800f84a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f81c:	893b      	ldrh	r3, [r7, #8]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d00e      	beq.n	800f840 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	88da      	ldrh	r2, [r3, #6]
 800f826:	893b      	ldrh	r3, [r7, #8]
 800f828:	4293      	cmp	r3, r2
 800f82a:	bf28      	it	cs
 800f82c:	4613      	movcs	r3, r2
 800f82e:	b29b      	uxth	r3, r3
 800f830:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f832:	893b      	ldrh	r3, [r7, #8]
 800f834:	461a      	mov	r2, r3
 800f836:	68f9      	ldr	r1, [r7, #12]
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f000 fb6a 	bl	800ff12 <USBD_CtlSendData>
 800f83e:	e009      	b.n	800f854 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f840:	6839      	ldr	r1, [r7, #0]
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f000 f9e7 	bl	800fc16 <USBD_CtlError>
 800f848:	e004      	b.n	800f854 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f000 fbbb 	bl	800ffc6 <USBD_CtlSendStatus>
 800f850:	e000      	b.n	800f854 <USBD_GetDescriptor+0x2cc>
    return;
 800f852:	bf00      	nop
  }
}
 800f854:	3710      	adds	r7, #16
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}
 800f85a:	bf00      	nop

0800f85c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b084      	sub	sp, #16
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	889b      	ldrh	r3, [r3, #4]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d131      	bne.n	800f8d2 <USBD_SetAddress+0x76>
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	88db      	ldrh	r3, [r3, #6]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d12d      	bne.n	800f8d2 <USBD_SetAddress+0x76>
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	885b      	ldrh	r3, [r3, #2]
 800f87a:	2b7f      	cmp	r3, #127	@ 0x7f
 800f87c:	d829      	bhi.n	800f8d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	885b      	ldrh	r3, [r3, #2]
 800f882:	b2db      	uxtb	r3, r3
 800f884:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f888:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f890:	b2db      	uxtb	r3, r3
 800f892:	2b03      	cmp	r3, #3
 800f894:	d104      	bne.n	800f8a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f896:	6839      	ldr	r1, [r7, #0]
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f000 f9bc 	bl	800fc16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f89e:	e01d      	b.n	800f8dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	7bfa      	ldrb	r2, [r7, #15]
 800f8a4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f8a8:	7bfb      	ldrb	r3, [r7, #15]
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f7fe ffcd 	bl	800e84c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f000 fb87 	bl	800ffc6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f8b8:	7bfb      	ldrb	r3, [r7, #15]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d004      	beq.n	800f8c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2202      	movs	r2, #2
 800f8c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8c6:	e009      	b.n	800f8dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8d0:	e004      	b.n	800f8dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f8d2:	6839      	ldr	r1, [r7, #0]
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f000 f99e 	bl	800fc16 <USBD_CtlError>
  }
}
 800f8da:	bf00      	nop
 800f8dc:	bf00      	nop
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b084      	sub	sp, #16
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	885b      	ldrh	r3, [r3, #2]
 800f8f6:	b2da      	uxtb	r2, r3
 800f8f8:	4b4e      	ldr	r3, [pc, #312]	@ (800fa34 <USBD_SetConfig+0x150>)
 800f8fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f8fc:	4b4d      	ldr	r3, [pc, #308]	@ (800fa34 <USBD_SetConfig+0x150>)
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	2b01      	cmp	r3, #1
 800f902:	d905      	bls.n	800f910 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f904:	6839      	ldr	r1, [r7, #0]
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f000 f985 	bl	800fc16 <USBD_CtlError>
    return USBD_FAIL;
 800f90c:	2303      	movs	r3, #3
 800f90e:	e08c      	b.n	800fa2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f916:	b2db      	uxtb	r3, r3
 800f918:	2b02      	cmp	r3, #2
 800f91a:	d002      	beq.n	800f922 <USBD_SetConfig+0x3e>
 800f91c:	2b03      	cmp	r3, #3
 800f91e:	d029      	beq.n	800f974 <USBD_SetConfig+0x90>
 800f920:	e075      	b.n	800fa0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f922:	4b44      	ldr	r3, [pc, #272]	@ (800fa34 <USBD_SetConfig+0x150>)
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d020      	beq.n	800f96c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f92a:	4b42      	ldr	r3, [pc, #264]	@ (800fa34 <USBD_SetConfig+0x150>)
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	461a      	mov	r2, r3
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f934:	4b3f      	ldr	r3, [pc, #252]	@ (800fa34 <USBD_SetConfig+0x150>)
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	4619      	mov	r1, r3
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f7ff f8a9 	bl	800ea92 <USBD_SetClassConfig>
 800f940:	4603      	mov	r3, r0
 800f942:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f944:	7bfb      	ldrb	r3, [r7, #15]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d008      	beq.n	800f95c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f94a:	6839      	ldr	r1, [r7, #0]
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f000 f962 	bl	800fc16 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2202      	movs	r2, #2
 800f956:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f95a:	e065      	b.n	800fa28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f000 fb32 	bl	800ffc6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2203      	movs	r2, #3
 800f966:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f96a:	e05d      	b.n	800fa28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f000 fb2a 	bl	800ffc6 <USBD_CtlSendStatus>
      break;
 800f972:	e059      	b.n	800fa28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f974:	4b2f      	ldr	r3, [pc, #188]	@ (800fa34 <USBD_SetConfig+0x150>)
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d112      	bne.n	800f9a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2202      	movs	r2, #2
 800f980:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f984:	4b2b      	ldr	r3, [pc, #172]	@ (800fa34 <USBD_SetConfig+0x150>)
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	461a      	mov	r2, r3
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f98e:	4b29      	ldr	r3, [pc, #164]	@ (800fa34 <USBD_SetConfig+0x150>)
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	4619      	mov	r1, r3
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f7ff f898 	bl	800eaca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 fb13 	bl	800ffc6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f9a0:	e042      	b.n	800fa28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f9a2:	4b24      	ldr	r3, [pc, #144]	@ (800fa34 <USBD_SetConfig+0x150>)
 800f9a4:	781b      	ldrb	r3, [r3, #0]
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d02a      	beq.n	800fa06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f7ff f886 	bl	800eaca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f9be:	4b1d      	ldr	r3, [pc, #116]	@ (800fa34 <USBD_SetConfig+0x150>)
 800f9c0:	781b      	ldrb	r3, [r3, #0]
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f9c8:	4b1a      	ldr	r3, [pc, #104]	@ (800fa34 <USBD_SetConfig+0x150>)
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f7ff f85f 	bl	800ea92 <USBD_SetClassConfig>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f9d8:	7bfb      	ldrb	r3, [r7, #15]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d00f      	beq.n	800f9fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f9de:	6839      	ldr	r1, [r7, #0]
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f000 f918 	bl	800fc16 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f7ff f86b 	bl	800eaca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2202      	movs	r2, #2
 800f9f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f9fc:	e014      	b.n	800fa28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f000 fae1 	bl	800ffc6 <USBD_CtlSendStatus>
      break;
 800fa04:	e010      	b.n	800fa28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f000 fadd 	bl	800ffc6 <USBD_CtlSendStatus>
      break;
 800fa0c:	e00c      	b.n	800fa28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fa0e:	6839      	ldr	r1, [r7, #0]
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f000 f900 	bl	800fc16 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa16:	4b07      	ldr	r3, [pc, #28]	@ (800fa34 <USBD_SetConfig+0x150>)
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	4619      	mov	r1, r3
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f7ff f854 	bl	800eaca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fa22:	2303      	movs	r3, #3
 800fa24:	73fb      	strb	r3, [r7, #15]
      break;
 800fa26:	bf00      	nop
  }

  return ret;
 800fa28:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3710      	adds	r7, #16
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}
 800fa32:	bf00      	nop
 800fa34:	2000115c 	.word	0x2000115c

0800fa38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b082      	sub	sp, #8
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	88db      	ldrh	r3, [r3, #6]
 800fa46:	2b01      	cmp	r3, #1
 800fa48:	d004      	beq.n	800fa54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fa4a:	6839      	ldr	r1, [r7, #0]
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f000 f8e2 	bl	800fc16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fa52:	e023      	b.n	800fa9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa5a:	b2db      	uxtb	r3, r3
 800fa5c:	2b02      	cmp	r3, #2
 800fa5e:	dc02      	bgt.n	800fa66 <USBD_GetConfig+0x2e>
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	dc03      	bgt.n	800fa6c <USBD_GetConfig+0x34>
 800fa64:	e015      	b.n	800fa92 <USBD_GetConfig+0x5a>
 800fa66:	2b03      	cmp	r3, #3
 800fa68:	d00b      	beq.n	800fa82 <USBD_GetConfig+0x4a>
 800fa6a:	e012      	b.n	800fa92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	3308      	adds	r3, #8
 800fa76:	2201      	movs	r2, #1
 800fa78:	4619      	mov	r1, r3
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f000 fa49 	bl	800ff12 <USBD_CtlSendData>
        break;
 800fa80:	e00c      	b.n	800fa9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	3304      	adds	r3, #4
 800fa86:	2201      	movs	r2, #1
 800fa88:	4619      	mov	r1, r3
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f000 fa41 	bl	800ff12 <USBD_CtlSendData>
        break;
 800fa90:	e004      	b.n	800fa9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fa92:	6839      	ldr	r1, [r7, #0]
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f000 f8be 	bl	800fc16 <USBD_CtlError>
        break;
 800fa9a:	bf00      	nop
}
 800fa9c:	bf00      	nop
 800fa9e:	3708      	adds	r7, #8
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}

0800faa4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	3b01      	subs	r3, #1
 800fab8:	2b02      	cmp	r3, #2
 800faba:	d81e      	bhi.n	800fafa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	88db      	ldrh	r3, [r3, #6]
 800fac0:	2b02      	cmp	r3, #2
 800fac2:	d004      	beq.n	800face <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fac4:	6839      	ldr	r1, [r7, #0]
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f000 f8a5 	bl	800fc16 <USBD_CtlError>
        break;
 800facc:	e01a      	b.n	800fb04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2201      	movs	r2, #1
 800fad2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d005      	beq.n	800faea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	f043 0202 	orr.w	r2, r3, #2
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	330c      	adds	r3, #12
 800faee:	2202      	movs	r2, #2
 800faf0:	4619      	mov	r1, r3
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f000 fa0d 	bl	800ff12 <USBD_CtlSendData>
      break;
 800faf8:	e004      	b.n	800fb04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fafa:	6839      	ldr	r1, [r7, #0]
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f000 f88a 	bl	800fc16 <USBD_CtlError>
      break;
 800fb02:	bf00      	nop
  }
}
 800fb04:	bf00      	nop
 800fb06:	3708      	adds	r7, #8
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	885b      	ldrh	r3, [r3, #2]
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d107      	bne.n	800fb2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2201      	movs	r2, #1
 800fb22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 fa4d 	bl	800ffc6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fb2c:	e013      	b.n	800fb56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	885b      	ldrh	r3, [r3, #2]
 800fb32:	2b02      	cmp	r3, #2
 800fb34:	d10b      	bne.n	800fb4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	889b      	ldrh	r3, [r3, #4]
 800fb3a:	0a1b      	lsrs	r3, r3, #8
 800fb3c:	b29b      	uxth	r3, r3
 800fb3e:	b2da      	uxtb	r2, r3
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 fa3d 	bl	800ffc6 <USBD_CtlSendStatus>
}
 800fb4c:	e003      	b.n	800fb56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fb4e:	6839      	ldr	r1, [r7, #0]
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 f860 	bl	800fc16 <USBD_CtlError>
}
 800fb56:	bf00      	nop
 800fb58:	3708      	adds	r7, #8
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}

0800fb5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb5e:	b580      	push	{r7, lr}
 800fb60:	b082      	sub	sp, #8
 800fb62:	af00      	add	r7, sp, #0
 800fb64:	6078      	str	r0, [r7, #4]
 800fb66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb6e:	b2db      	uxtb	r3, r3
 800fb70:	3b01      	subs	r3, #1
 800fb72:	2b02      	cmp	r3, #2
 800fb74:	d80b      	bhi.n	800fb8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	885b      	ldrh	r3, [r3, #2]
 800fb7a:	2b01      	cmp	r3, #1
 800fb7c:	d10c      	bne.n	800fb98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2200      	movs	r2, #0
 800fb82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f000 fa1d 	bl	800ffc6 <USBD_CtlSendStatus>
      }
      break;
 800fb8c:	e004      	b.n	800fb98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fb8e:	6839      	ldr	r1, [r7, #0]
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f000 f840 	bl	800fc16 <USBD_CtlError>
      break;
 800fb96:	e000      	b.n	800fb9a <USBD_ClrFeature+0x3c>
      break;
 800fb98:	bf00      	nop
  }
}
 800fb9a:	bf00      	nop
 800fb9c:	3708      	adds	r7, #8
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}

0800fba2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fba2:	b580      	push	{r7, lr}
 800fba4:	b084      	sub	sp, #16
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
 800fbaa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	781a      	ldrb	r2, [r3, #0]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	781a      	ldrb	r2, [r3, #0]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	3301      	adds	r3, #1
 800fbca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fbcc:	68f8      	ldr	r0, [r7, #12]
 800fbce:	f7ff fa40 	bl	800f052 <SWAPBYTE>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	3301      	adds	r3, #1
 800fbde:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fbe6:	68f8      	ldr	r0, [r7, #12]
 800fbe8:	f7ff fa33 	bl	800f052 <SWAPBYTE>
 800fbec:	4603      	mov	r3, r0
 800fbee:	461a      	mov	r2, r3
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fc00:	68f8      	ldr	r0, [r7, #12]
 800fc02:	f7ff fa26 	bl	800f052 <SWAPBYTE>
 800fc06:	4603      	mov	r3, r0
 800fc08:	461a      	mov	r2, r3
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	80da      	strh	r2, [r3, #6]
}
 800fc0e:	bf00      	nop
 800fc10:	3710      	adds	r7, #16
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}

0800fc16 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc16:	b580      	push	{r7, lr}
 800fc18:	b082      	sub	sp, #8
 800fc1a:	af00      	add	r7, sp, #0
 800fc1c:	6078      	str	r0, [r7, #4]
 800fc1e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc20:	2180      	movs	r1, #128	@ 0x80
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f7fe fdb4 	bl	800e790 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fc28:	2100      	movs	r1, #0
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f7fe fdb0 	bl	800e790 <USBD_LL_StallEP>
}
 800fc30:	bf00      	nop
 800fc32:	3708      	adds	r7, #8
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}

0800fc38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b086      	sub	sp, #24
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	60b9      	str	r1, [r7, #8]
 800fc42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fc44:	2300      	movs	r3, #0
 800fc46:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d036      	beq.n	800fcbc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fc52:	6938      	ldr	r0, [r7, #16]
 800fc54:	f000 f836 	bl	800fcc4 <USBD_GetLen>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	b29b      	uxth	r3, r3
 800fc5e:	005b      	lsls	r3, r3, #1
 800fc60:	b29a      	uxth	r2, r3
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fc66:	7dfb      	ldrb	r3, [r7, #23]
 800fc68:	68ba      	ldr	r2, [r7, #8]
 800fc6a:	4413      	add	r3, r2
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	7812      	ldrb	r2, [r2, #0]
 800fc70:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc72:	7dfb      	ldrb	r3, [r7, #23]
 800fc74:	3301      	adds	r3, #1
 800fc76:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fc78:	7dfb      	ldrb	r3, [r7, #23]
 800fc7a:	68ba      	ldr	r2, [r7, #8]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	2203      	movs	r2, #3
 800fc80:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc82:	7dfb      	ldrb	r3, [r7, #23]
 800fc84:	3301      	adds	r3, #1
 800fc86:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fc88:	e013      	b.n	800fcb2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fc8a:	7dfb      	ldrb	r3, [r7, #23]
 800fc8c:	68ba      	ldr	r2, [r7, #8]
 800fc8e:	4413      	add	r3, r2
 800fc90:	693a      	ldr	r2, [r7, #16]
 800fc92:	7812      	ldrb	r2, [r2, #0]
 800fc94:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	613b      	str	r3, [r7, #16]
    idx++;
 800fc9c:	7dfb      	ldrb	r3, [r7, #23]
 800fc9e:	3301      	adds	r3, #1
 800fca0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fca2:	7dfb      	ldrb	r3, [r7, #23]
 800fca4:	68ba      	ldr	r2, [r7, #8]
 800fca6:	4413      	add	r3, r2
 800fca8:	2200      	movs	r2, #0
 800fcaa:	701a      	strb	r2, [r3, #0]
    idx++;
 800fcac:	7dfb      	ldrb	r3, [r7, #23]
 800fcae:	3301      	adds	r3, #1
 800fcb0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	781b      	ldrb	r3, [r3, #0]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d1e7      	bne.n	800fc8a <USBD_GetString+0x52>
 800fcba:	e000      	b.n	800fcbe <USBD_GetString+0x86>
    return;
 800fcbc:	bf00      	nop
  }
}
 800fcbe:	3718      	adds	r7, #24
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b085      	sub	sp, #20
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fccc:	2300      	movs	r3, #0
 800fcce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fcd4:	e005      	b.n	800fce2 <USBD_GetLen+0x1e>
  {
    len++;
 800fcd6:	7bfb      	ldrb	r3, [r7, #15]
 800fcd8:	3301      	adds	r3, #1
 800fcda:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	3301      	adds	r3, #1
 800fce0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	781b      	ldrb	r3, [r3, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d1f5      	bne.n	800fcd6 <USBD_GetLen+0x12>
  }

  return len;
 800fcea:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3714      	adds	r7, #20
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr

0800fcf8 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b083      	sub	sp, #12
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	4603      	mov	r3, r0
 800fd00:	6039      	str	r1, [r7, #0]
 800fd02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	2212      	movs	r2, #18
 800fd08:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800fd0a:	4b03      	ldr	r3, [pc, #12]	@ (800fd18 <USBD_Class_DeviceDescriptor+0x20>)
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	370c      	adds	r7, #12
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr
 800fd18:	200000f0 	.word	0x200000f0

0800fd1c <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	4603      	mov	r3, r0
 800fd24:	6039      	str	r1, [r7, #0]
 800fd26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	2204      	movs	r2, #4
 800fd2c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 800fd2e:	4b03      	ldr	r3, [pc, #12]	@ (800fd3c <USBD_Class_LangIDStrDescriptor+0x20>)
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	370c      	adds	r7, #12
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr
 800fd3c:	20000104 	.word	0x20000104

0800fd40 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	4603      	mov	r3, r0
 800fd48:	6039      	str	r1, [r7, #0]
 800fd4a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800fd4c:	79fb      	ldrb	r3, [r7, #7]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d105      	bne.n	800fd5e <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800fd52:	683a      	ldr	r2, [r7, #0]
 800fd54:	4907      	ldr	r1, [pc, #28]	@ (800fd74 <USBD_Class_ProductStrDescriptor+0x34>)
 800fd56:	4808      	ldr	r0, [pc, #32]	@ (800fd78 <USBD_Class_ProductStrDescriptor+0x38>)
 800fd58:	f7ff ff6e 	bl	800fc38 <USBD_GetString>
 800fd5c:	e004      	b.n	800fd68 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800fd5e:	683a      	ldr	r2, [r7, #0]
 800fd60:	4904      	ldr	r1, [pc, #16]	@ (800fd74 <USBD_Class_ProductStrDescriptor+0x34>)
 800fd62:	4805      	ldr	r0, [pc, #20]	@ (800fd78 <USBD_Class_ProductStrDescriptor+0x38>)
 800fd64:	f7ff ff68 	bl	800fc38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fd68:	4b02      	ldr	r3, [pc, #8]	@ (800fd74 <USBD_Class_ProductStrDescriptor+0x34>)
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3708      	adds	r7, #8
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	20001160 	.word	0x20001160
 800fd78:	08011350 	.word	0x08011350

0800fd7c <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b082      	sub	sp, #8
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	4603      	mov	r3, r0
 800fd84:	6039      	str	r1, [r7, #0]
 800fd86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fd88:	683a      	ldr	r2, [r7, #0]
 800fd8a:	4904      	ldr	r1, [pc, #16]	@ (800fd9c <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800fd8c:	4804      	ldr	r0, [pc, #16]	@ (800fda0 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800fd8e:	f7ff ff53 	bl	800fc38 <USBD_GetString>
  return USBD_StrDesc;
 800fd92:	4b02      	ldr	r3, [pc, #8]	@ (800fd9c <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3708      	adds	r7, #8
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}
 800fd9c:	20001160 	.word	0x20001160
 800fda0:	08011368 	.word	0x08011368

0800fda4 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	4603      	mov	r3, r0
 800fdac:	6039      	str	r1, [r7, #0]
 800fdae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	221a      	movs	r2, #26
 800fdb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800fdb6:	f000 f843 	bl	800fe40 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800fdba:	4b02      	ldr	r3, [pc, #8]	@ (800fdc4 <USBD_Class_SerialStrDescriptor+0x20>)
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3708      	adds	r7, #8
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	20000108 	.word	0x20000108

0800fdc8 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	4603      	mov	r3, r0
 800fdd0:	6039      	str	r1, [r7, #0]
 800fdd2:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800fdd4:	79fb      	ldrb	r3, [r7, #7]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d105      	bne.n	800fde6 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800fdda:	683a      	ldr	r2, [r7, #0]
 800fddc:	4907      	ldr	r1, [pc, #28]	@ (800fdfc <USBD_Class_ConfigStrDescriptor+0x34>)
 800fdde:	4808      	ldr	r0, [pc, #32]	@ (800fe00 <USBD_Class_ConfigStrDescriptor+0x38>)
 800fde0:	f7ff ff2a 	bl	800fc38 <USBD_GetString>
 800fde4:	e004      	b.n	800fdf0 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800fde6:	683a      	ldr	r2, [r7, #0]
 800fde8:	4904      	ldr	r1, [pc, #16]	@ (800fdfc <USBD_Class_ConfigStrDescriptor+0x34>)
 800fdea:	4805      	ldr	r0, [pc, #20]	@ (800fe00 <USBD_Class_ConfigStrDescriptor+0x38>)
 800fdec:	f7ff ff24 	bl	800fc38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fdf0:	4b02      	ldr	r3, [pc, #8]	@ (800fdfc <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3708      	adds	r7, #8
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
 800fdfa:	bf00      	nop
 800fdfc:	20001160 	.word	0x20001160
 800fe00:	0801137c 	.word	0x0801137c

0800fe04 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b082      	sub	sp, #8
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	6039      	str	r1, [r7, #0]
 800fe0e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800fe10:	79fb      	ldrb	r3, [r7, #7]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d105      	bne.n	800fe22 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800fe16:	683a      	ldr	r2, [r7, #0]
 800fe18:	4907      	ldr	r1, [pc, #28]	@ (800fe38 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800fe1a:	4808      	ldr	r0, [pc, #32]	@ (800fe3c <USBD_Class_InterfaceStrDescriptor+0x38>)
 800fe1c:	f7ff ff0c 	bl	800fc38 <USBD_GetString>
 800fe20:	e004      	b.n	800fe2c <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800fe22:	683a      	ldr	r2, [r7, #0]
 800fe24:	4904      	ldr	r1, [pc, #16]	@ (800fe38 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800fe26:	4805      	ldr	r0, [pc, #20]	@ (800fe3c <USBD_Class_InterfaceStrDescriptor+0x38>)
 800fe28:	f7ff ff06 	bl	800fc38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe2c:	4b02      	ldr	r3, [pc, #8]	@ (800fe38 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3708      	adds	r7, #8
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
 800fe36:	bf00      	nop
 800fe38:	20001160 	.word	0x20001160
 800fe3c:	08011388 	.word	0x08011388

0800fe40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b084      	sub	sp, #16
 800fe44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800fe46:	4b0f      	ldr	r3, [pc, #60]	@ (800fe84 <Get_SerialNum+0x44>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800fe4c:	4b0e      	ldr	r3, [pc, #56]	@ (800fe88 <Get_SerialNum+0x48>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800fe52:	4b0e      	ldr	r3, [pc, #56]	@ (800fe8c <Get_SerialNum+0x4c>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fe58:	68fa      	ldr	r2, [r7, #12]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	4413      	add	r3, r2
 800fe5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d009      	beq.n	800fe7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 800fe66:	2208      	movs	r2, #8
 800fe68:	4909      	ldr	r1, [pc, #36]	@ (800fe90 <Get_SerialNum+0x50>)
 800fe6a:	68f8      	ldr	r0, [r7, #12]
 800fe6c:	f000 f814 	bl	800fe98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 800fe70:	2204      	movs	r2, #4
 800fe72:	4908      	ldr	r1, [pc, #32]	@ (800fe94 <Get_SerialNum+0x54>)
 800fe74:	68b8      	ldr	r0, [r7, #8]
 800fe76:	f000 f80f 	bl	800fe98 <IntToUnicode>
  }
}
 800fe7a:	bf00      	nop
 800fe7c:	3710      	adds	r7, #16
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}
 800fe82:	bf00      	nop
 800fe84:	08fff800 	.word	0x08fff800
 800fe88:	08fff804 	.word	0x08fff804
 800fe8c:	08fff808 	.word	0x08fff808
 800fe90:	2000010a 	.word	0x2000010a
 800fe94:	2000011a 	.word	0x2000011a

0800fe98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b087      	sub	sp, #28
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	60f8      	str	r0, [r7, #12]
 800fea0:	60b9      	str	r1, [r7, #8]
 800fea2:	4613      	mov	r3, r2
 800fea4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800fea6:	2300      	movs	r3, #0
 800fea8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800feaa:	2300      	movs	r3, #0
 800feac:	75fb      	strb	r3, [r7, #23]
 800feae:	e025      	b.n	800fefc <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	0f1b      	lsrs	r3, r3, #28
 800feb4:	2b09      	cmp	r3, #9
 800feb6:	d80a      	bhi.n	800fece <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	0f1b      	lsrs	r3, r3, #28
 800febc:	b2da      	uxtb	r2, r3
 800febe:	7dfb      	ldrb	r3, [r7, #23]
 800fec0:	005b      	lsls	r3, r3, #1
 800fec2:	68b9      	ldr	r1, [r7, #8]
 800fec4:	440b      	add	r3, r1
 800fec6:	3230      	adds	r2, #48	@ 0x30
 800fec8:	b2d2      	uxtb	r2, r2
 800feca:	701a      	strb	r2, [r3, #0]
 800fecc:	e009      	b.n	800fee2 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	0f1b      	lsrs	r3, r3, #28
 800fed2:	b2da      	uxtb	r2, r3
 800fed4:	7dfb      	ldrb	r3, [r7, #23]
 800fed6:	005b      	lsls	r3, r3, #1
 800fed8:	68b9      	ldr	r1, [r7, #8]
 800feda:	440b      	add	r3, r1
 800fedc:	3237      	adds	r2, #55	@ 0x37
 800fede:	b2d2      	uxtb	r2, r2
 800fee0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	011b      	lsls	r3, r3, #4
 800fee6:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 800fee8:	7dfb      	ldrb	r3, [r7, #23]
 800feea:	005b      	lsls	r3, r3, #1
 800feec:	3301      	adds	r3, #1
 800feee:	68ba      	ldr	r2, [r7, #8]
 800fef0:	4413      	add	r3, r2
 800fef2:	2200      	movs	r2, #0
 800fef4:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800fef6:	7dfb      	ldrb	r3, [r7, #23]
 800fef8:	3301      	adds	r3, #1
 800fefa:	75fb      	strb	r3, [r7, #23]
 800fefc:	7dfa      	ldrb	r2, [r7, #23]
 800fefe:	79fb      	ldrb	r3, [r7, #7]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d3d5      	bcc.n	800feb0 <IntToUnicode+0x18>
  }
}
 800ff04:	bf00      	nop
 800ff06:	bf00      	nop
 800ff08:	371c      	adds	r7, #28
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff10:	4770      	bx	lr

0800ff12 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ff12:	b580      	push	{r7, lr}
 800ff14:	b084      	sub	sp, #16
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	60f8      	str	r0, [r7, #12]
 800ff1a:	60b9      	str	r1, [r7, #8]
 800ff1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	2202      	movs	r2, #2
 800ff22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	687a      	ldr	r2, [r7, #4]
 800ff2a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	687a      	ldr	r2, [r7, #4]
 800ff30:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	68ba      	ldr	r2, [r7, #8]
 800ff36:	2100      	movs	r1, #0
 800ff38:	68f8      	ldr	r0, [r7, #12]
 800ff3a:	f7fe fca0 	bl	800e87e <USBD_LL_Transmit>

  return USBD_OK;
 800ff3e:	2300      	movs	r3, #0
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3710      	adds	r7, #16
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}

0800ff48 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b084      	sub	sp, #16
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	60f8      	str	r0, [r7, #12]
 800ff50:	60b9      	str	r1, [r7, #8]
 800ff52:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	68ba      	ldr	r2, [r7, #8]
 800ff58:	2100      	movs	r1, #0
 800ff5a:	68f8      	ldr	r0, [r7, #12]
 800ff5c:	f7fe fc8f 	bl	800e87e <USBD_LL_Transmit>

  return USBD_OK;
 800ff60:	2300      	movs	r3, #0
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3710      	adds	r7, #16
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}

0800ff6a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ff6a:	b580      	push	{r7, lr}
 800ff6c:	b084      	sub	sp, #16
 800ff6e:	af00      	add	r7, sp, #0
 800ff70:	60f8      	str	r0, [r7, #12]
 800ff72:	60b9      	str	r1, [r7, #8]
 800ff74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	2203      	movs	r2, #3
 800ff7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	68ba      	ldr	r2, [r7, #8]
 800ff92:	2100      	movs	r1, #0
 800ff94:	68f8      	ldr	r0, [r7, #12]
 800ff96:	f7fe fc8d 	bl	800e8b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ff9a:	2300      	movs	r3, #0
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3710      	adds	r7, #16
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b084      	sub	sp, #16
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	68ba      	ldr	r2, [r7, #8]
 800ffb4:	2100      	movs	r1, #0
 800ffb6:	68f8      	ldr	r0, [r7, #12]
 800ffb8:	f7fe fc7c 	bl	800e8b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ffbc:	2300      	movs	r3, #0
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3710      	adds	r7, #16
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}

0800ffc6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ffc6:	b580      	push	{r7, lr}
 800ffc8:	b082      	sub	sp, #8
 800ffca:	af00      	add	r7, sp, #0
 800ffcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2204      	movs	r2, #4
 800ffd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	2200      	movs	r2, #0
 800ffda:	2100      	movs	r1, #0
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f7fe fc4e 	bl	800e87e <USBD_LL_Transmit>

  return USBD_OK;
 800ffe2:	2300      	movs	r3, #0
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3708      	adds	r7, #8
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}

0800ffec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2205      	movs	r2, #5
 800fff8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fffc:	2300      	movs	r3, #0
 800fffe:	2200      	movs	r2, #0
 8010000:	2100      	movs	r1, #0
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f7fe fc56 	bl	800e8b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010008:	2300      	movs	r3, #0
}
 801000a:	4618      	mov	r0, r3
 801000c:	3708      	adds	r7, #8
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
	...

08010014 <std>:
 8010014:	2300      	movs	r3, #0
 8010016:	b510      	push	{r4, lr}
 8010018:	4604      	mov	r4, r0
 801001a:	6083      	str	r3, [r0, #8]
 801001c:	8181      	strh	r1, [r0, #12]
 801001e:	4619      	mov	r1, r3
 8010020:	6643      	str	r3, [r0, #100]	@ 0x64
 8010022:	81c2      	strh	r2, [r0, #14]
 8010024:	2208      	movs	r2, #8
 8010026:	6183      	str	r3, [r0, #24]
 8010028:	e9c0 3300 	strd	r3, r3, [r0]
 801002c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010030:	305c      	adds	r0, #92	@ 0x5c
 8010032:	f000 f93f 	bl	80102b4 <memset>
 8010036:	4b0d      	ldr	r3, [pc, #52]	@ (801006c <std+0x58>)
 8010038:	6224      	str	r4, [r4, #32]
 801003a:	6263      	str	r3, [r4, #36]	@ 0x24
 801003c:	4b0c      	ldr	r3, [pc, #48]	@ (8010070 <std+0x5c>)
 801003e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010040:	4b0c      	ldr	r3, [pc, #48]	@ (8010074 <std+0x60>)
 8010042:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010044:	4b0c      	ldr	r3, [pc, #48]	@ (8010078 <std+0x64>)
 8010046:	6323      	str	r3, [r4, #48]	@ 0x30
 8010048:	4b0c      	ldr	r3, [pc, #48]	@ (801007c <std+0x68>)
 801004a:	429c      	cmp	r4, r3
 801004c:	d006      	beq.n	801005c <std+0x48>
 801004e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010052:	4294      	cmp	r4, r2
 8010054:	d002      	beq.n	801005c <std+0x48>
 8010056:	33d0      	adds	r3, #208	@ 0xd0
 8010058:	429c      	cmp	r4, r3
 801005a:	d105      	bne.n	8010068 <std+0x54>
 801005c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010064:	f000 b99e 	b.w	80103a4 <__retarget_lock_init_recursive>
 8010068:	bd10      	pop	{r4, pc}
 801006a:	bf00      	nop
 801006c:	080101bd 	.word	0x080101bd
 8010070:	080101df 	.word	0x080101df
 8010074:	08010217 	.word	0x08010217
 8010078:	0801023b 	.word	0x0801023b
 801007c:	20001260 	.word	0x20001260

08010080 <stdio_exit_handler>:
 8010080:	4a02      	ldr	r2, [pc, #8]	@ (801008c <stdio_exit_handler+0xc>)
 8010082:	4903      	ldr	r1, [pc, #12]	@ (8010090 <stdio_exit_handler+0x10>)
 8010084:	4803      	ldr	r0, [pc, #12]	@ (8010094 <stdio_exit_handler+0x14>)
 8010086:	f000 b869 	b.w	801015c <_fwalk_sglue>
 801008a:	bf00      	nop
 801008c:	20000124 	.word	0x20000124
 8010090:	08010f15 	.word	0x08010f15
 8010094:	20000134 	.word	0x20000134

08010098 <cleanup_stdio>:
 8010098:	6841      	ldr	r1, [r0, #4]
 801009a:	4b0c      	ldr	r3, [pc, #48]	@ (80100cc <cleanup_stdio+0x34>)
 801009c:	4299      	cmp	r1, r3
 801009e:	b510      	push	{r4, lr}
 80100a0:	4604      	mov	r4, r0
 80100a2:	d001      	beq.n	80100a8 <cleanup_stdio+0x10>
 80100a4:	f000 ff36 	bl	8010f14 <_fflush_r>
 80100a8:	68a1      	ldr	r1, [r4, #8]
 80100aa:	4b09      	ldr	r3, [pc, #36]	@ (80100d0 <cleanup_stdio+0x38>)
 80100ac:	4299      	cmp	r1, r3
 80100ae:	d002      	beq.n	80100b6 <cleanup_stdio+0x1e>
 80100b0:	4620      	mov	r0, r4
 80100b2:	f000 ff2f 	bl	8010f14 <_fflush_r>
 80100b6:	68e1      	ldr	r1, [r4, #12]
 80100b8:	4b06      	ldr	r3, [pc, #24]	@ (80100d4 <cleanup_stdio+0x3c>)
 80100ba:	4299      	cmp	r1, r3
 80100bc:	d004      	beq.n	80100c8 <cleanup_stdio+0x30>
 80100be:	4620      	mov	r0, r4
 80100c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100c4:	f000 bf26 	b.w	8010f14 <_fflush_r>
 80100c8:	bd10      	pop	{r4, pc}
 80100ca:	bf00      	nop
 80100cc:	20001260 	.word	0x20001260
 80100d0:	200012c8 	.word	0x200012c8
 80100d4:	20001330 	.word	0x20001330

080100d8 <global_stdio_init.part.0>:
 80100d8:	b510      	push	{r4, lr}
 80100da:	4b0b      	ldr	r3, [pc, #44]	@ (8010108 <global_stdio_init.part.0+0x30>)
 80100dc:	2104      	movs	r1, #4
 80100de:	4c0b      	ldr	r4, [pc, #44]	@ (801010c <global_stdio_init.part.0+0x34>)
 80100e0:	4a0b      	ldr	r2, [pc, #44]	@ (8010110 <global_stdio_init.part.0+0x38>)
 80100e2:	4620      	mov	r0, r4
 80100e4:	601a      	str	r2, [r3, #0]
 80100e6:	2200      	movs	r2, #0
 80100e8:	f7ff ff94 	bl	8010014 <std>
 80100ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80100f0:	2201      	movs	r2, #1
 80100f2:	2109      	movs	r1, #9
 80100f4:	f7ff ff8e 	bl	8010014 <std>
 80100f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80100fc:	2202      	movs	r2, #2
 80100fe:	2112      	movs	r1, #18
 8010100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010104:	f7ff bf86 	b.w	8010014 <std>
 8010108:	20001398 	.word	0x20001398
 801010c:	20001260 	.word	0x20001260
 8010110:	08010081 	.word	0x08010081

08010114 <__sfp_lock_acquire>:
 8010114:	4801      	ldr	r0, [pc, #4]	@ (801011c <__sfp_lock_acquire+0x8>)
 8010116:	f000 b946 	b.w	80103a6 <__retarget_lock_acquire_recursive>
 801011a:	bf00      	nop
 801011c:	200013a1 	.word	0x200013a1

08010120 <__sfp_lock_release>:
 8010120:	4801      	ldr	r0, [pc, #4]	@ (8010128 <__sfp_lock_release+0x8>)
 8010122:	f000 b941 	b.w	80103a8 <__retarget_lock_release_recursive>
 8010126:	bf00      	nop
 8010128:	200013a1 	.word	0x200013a1

0801012c <__sinit>:
 801012c:	b510      	push	{r4, lr}
 801012e:	4604      	mov	r4, r0
 8010130:	f7ff fff0 	bl	8010114 <__sfp_lock_acquire>
 8010134:	6a23      	ldr	r3, [r4, #32]
 8010136:	b11b      	cbz	r3, 8010140 <__sinit+0x14>
 8010138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801013c:	f7ff bff0 	b.w	8010120 <__sfp_lock_release>
 8010140:	4b04      	ldr	r3, [pc, #16]	@ (8010154 <__sinit+0x28>)
 8010142:	6223      	str	r3, [r4, #32]
 8010144:	4b04      	ldr	r3, [pc, #16]	@ (8010158 <__sinit+0x2c>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d1f5      	bne.n	8010138 <__sinit+0xc>
 801014c:	f7ff ffc4 	bl	80100d8 <global_stdio_init.part.0>
 8010150:	e7f2      	b.n	8010138 <__sinit+0xc>
 8010152:	bf00      	nop
 8010154:	08010099 	.word	0x08010099
 8010158:	20001398 	.word	0x20001398

0801015c <_fwalk_sglue>:
 801015c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010160:	4607      	mov	r7, r0
 8010162:	4688      	mov	r8, r1
 8010164:	4614      	mov	r4, r2
 8010166:	2600      	movs	r6, #0
 8010168:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801016c:	f1b9 0901 	subs.w	r9, r9, #1
 8010170:	d505      	bpl.n	801017e <_fwalk_sglue+0x22>
 8010172:	6824      	ldr	r4, [r4, #0]
 8010174:	2c00      	cmp	r4, #0
 8010176:	d1f7      	bne.n	8010168 <_fwalk_sglue+0xc>
 8010178:	4630      	mov	r0, r6
 801017a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801017e:	89ab      	ldrh	r3, [r5, #12]
 8010180:	2b01      	cmp	r3, #1
 8010182:	d907      	bls.n	8010194 <_fwalk_sglue+0x38>
 8010184:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010188:	3301      	adds	r3, #1
 801018a:	d003      	beq.n	8010194 <_fwalk_sglue+0x38>
 801018c:	4629      	mov	r1, r5
 801018e:	4638      	mov	r0, r7
 8010190:	47c0      	blx	r8
 8010192:	4306      	orrs	r6, r0
 8010194:	3568      	adds	r5, #104	@ 0x68
 8010196:	e7e9      	b.n	801016c <_fwalk_sglue+0x10>

08010198 <iprintf>:
 8010198:	b40f      	push	{r0, r1, r2, r3}
 801019a:	b507      	push	{r0, r1, r2, lr}
 801019c:	4906      	ldr	r1, [pc, #24]	@ (80101b8 <iprintf+0x20>)
 801019e:	ab04      	add	r3, sp, #16
 80101a0:	6808      	ldr	r0, [r1, #0]
 80101a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80101a6:	6881      	ldr	r1, [r0, #8]
 80101a8:	9301      	str	r3, [sp, #4]
 80101aa:	f000 fb85 	bl	80108b8 <_vfiprintf_r>
 80101ae:	b003      	add	sp, #12
 80101b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80101b4:	b004      	add	sp, #16
 80101b6:	4770      	bx	lr
 80101b8:	20000130 	.word	0x20000130

080101bc <__sread>:
 80101bc:	b510      	push	{r4, lr}
 80101be:	460c      	mov	r4, r1
 80101c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101c4:	f000 f8a0 	bl	8010308 <_read_r>
 80101c8:	2800      	cmp	r0, #0
 80101ca:	bfab      	itete	ge
 80101cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80101ce:	89a3      	ldrhlt	r3, [r4, #12]
 80101d0:	181b      	addge	r3, r3, r0
 80101d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80101d6:	bfac      	ite	ge
 80101d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80101da:	81a3      	strhlt	r3, [r4, #12]
 80101dc:	bd10      	pop	{r4, pc}

080101de <__swrite>:
 80101de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e2:	461f      	mov	r7, r3
 80101e4:	898b      	ldrh	r3, [r1, #12]
 80101e6:	4605      	mov	r5, r0
 80101e8:	460c      	mov	r4, r1
 80101ea:	05db      	lsls	r3, r3, #23
 80101ec:	4616      	mov	r6, r2
 80101ee:	d505      	bpl.n	80101fc <__swrite+0x1e>
 80101f0:	2302      	movs	r3, #2
 80101f2:	2200      	movs	r2, #0
 80101f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101f8:	f000 f874 	bl	80102e4 <_lseek_r>
 80101fc:	89a3      	ldrh	r3, [r4, #12]
 80101fe:	4632      	mov	r2, r6
 8010200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010204:	4628      	mov	r0, r5
 8010206:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801020a:	81a3      	strh	r3, [r4, #12]
 801020c:	463b      	mov	r3, r7
 801020e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010212:	f000 b88b 	b.w	801032c <_write_r>

08010216 <__sseek>:
 8010216:	b510      	push	{r4, lr}
 8010218:	460c      	mov	r4, r1
 801021a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801021e:	f000 f861 	bl	80102e4 <_lseek_r>
 8010222:	1c43      	adds	r3, r0, #1
 8010224:	89a3      	ldrh	r3, [r4, #12]
 8010226:	bf15      	itete	ne
 8010228:	6560      	strne	r0, [r4, #84]	@ 0x54
 801022a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801022e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010232:	81a3      	strheq	r3, [r4, #12]
 8010234:	bf18      	it	ne
 8010236:	81a3      	strhne	r3, [r4, #12]
 8010238:	bd10      	pop	{r4, pc}

0801023a <__sclose>:
 801023a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801023e:	f000 b841 	b.w	80102c4 <_close_r>

08010242 <_vsniprintf_r>:
 8010242:	b530      	push	{r4, r5, lr}
 8010244:	4614      	mov	r4, r2
 8010246:	b09b      	sub	sp, #108	@ 0x6c
 8010248:	4605      	mov	r5, r0
 801024a:	461a      	mov	r2, r3
 801024c:	2c00      	cmp	r4, #0
 801024e:	da05      	bge.n	801025c <_vsniprintf_r+0x1a>
 8010250:	238b      	movs	r3, #139	@ 0x8b
 8010252:	6003      	str	r3, [r0, #0]
 8010254:	f04f 30ff 	mov.w	r0, #4294967295
 8010258:	b01b      	add	sp, #108	@ 0x6c
 801025a:	bd30      	pop	{r4, r5, pc}
 801025c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010260:	9100      	str	r1, [sp, #0]
 8010262:	9104      	str	r1, [sp, #16]
 8010264:	4669      	mov	r1, sp
 8010266:	f8ad 300c 	strh.w	r3, [sp, #12]
 801026a:	bf14      	ite	ne
 801026c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010270:	4623      	moveq	r3, r4
 8010272:	9302      	str	r3, [sp, #8]
 8010274:	9305      	str	r3, [sp, #20]
 8010276:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801027a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801027e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010280:	f000 f9f4 	bl	801066c <_svfiprintf_r>
 8010284:	1c43      	adds	r3, r0, #1
 8010286:	bfbc      	itt	lt
 8010288:	238b      	movlt	r3, #139	@ 0x8b
 801028a:	602b      	strlt	r3, [r5, #0]
 801028c:	2c00      	cmp	r4, #0
 801028e:	d0e3      	beq.n	8010258 <_vsniprintf_r+0x16>
 8010290:	9b00      	ldr	r3, [sp, #0]
 8010292:	2200      	movs	r2, #0
 8010294:	701a      	strb	r2, [r3, #0]
 8010296:	e7df      	b.n	8010258 <_vsniprintf_r+0x16>

08010298 <vsniprintf>:
 8010298:	b507      	push	{r0, r1, r2, lr}
 801029a:	9300      	str	r3, [sp, #0]
 801029c:	4613      	mov	r3, r2
 801029e:	460a      	mov	r2, r1
 80102a0:	4601      	mov	r1, r0
 80102a2:	4803      	ldr	r0, [pc, #12]	@ (80102b0 <vsniprintf+0x18>)
 80102a4:	6800      	ldr	r0, [r0, #0]
 80102a6:	f7ff ffcc 	bl	8010242 <_vsniprintf_r>
 80102aa:	b003      	add	sp, #12
 80102ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80102b0:	20000130 	.word	0x20000130

080102b4 <memset>:
 80102b4:	4402      	add	r2, r0
 80102b6:	4603      	mov	r3, r0
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d100      	bne.n	80102be <memset+0xa>
 80102bc:	4770      	bx	lr
 80102be:	f803 1b01 	strb.w	r1, [r3], #1
 80102c2:	e7f9      	b.n	80102b8 <memset+0x4>

080102c4 <_close_r>:
 80102c4:	b538      	push	{r3, r4, r5, lr}
 80102c6:	2300      	movs	r3, #0
 80102c8:	4d05      	ldr	r5, [pc, #20]	@ (80102e0 <_close_r+0x1c>)
 80102ca:	4604      	mov	r4, r0
 80102cc:	4608      	mov	r0, r1
 80102ce:	602b      	str	r3, [r5, #0]
 80102d0:	f7f1 fb3f 	bl	8001952 <_close>
 80102d4:	1c43      	adds	r3, r0, #1
 80102d6:	d102      	bne.n	80102de <_close_r+0x1a>
 80102d8:	682b      	ldr	r3, [r5, #0]
 80102da:	b103      	cbz	r3, 80102de <_close_r+0x1a>
 80102dc:	6023      	str	r3, [r4, #0]
 80102de:	bd38      	pop	{r3, r4, r5, pc}
 80102e0:	2000139c 	.word	0x2000139c

080102e4 <_lseek_r>:
 80102e4:	b538      	push	{r3, r4, r5, lr}
 80102e6:	4604      	mov	r4, r0
 80102e8:	4d06      	ldr	r5, [pc, #24]	@ (8010304 <_lseek_r+0x20>)
 80102ea:	4608      	mov	r0, r1
 80102ec:	4611      	mov	r1, r2
 80102ee:	2200      	movs	r2, #0
 80102f0:	602a      	str	r2, [r5, #0]
 80102f2:	461a      	mov	r2, r3
 80102f4:	f7f1 fb54 	bl	80019a0 <_lseek>
 80102f8:	1c43      	adds	r3, r0, #1
 80102fa:	d102      	bne.n	8010302 <_lseek_r+0x1e>
 80102fc:	682b      	ldr	r3, [r5, #0]
 80102fe:	b103      	cbz	r3, 8010302 <_lseek_r+0x1e>
 8010300:	6023      	str	r3, [r4, #0]
 8010302:	bd38      	pop	{r3, r4, r5, pc}
 8010304:	2000139c 	.word	0x2000139c

08010308 <_read_r>:
 8010308:	b538      	push	{r3, r4, r5, lr}
 801030a:	4604      	mov	r4, r0
 801030c:	4d06      	ldr	r5, [pc, #24]	@ (8010328 <_read_r+0x20>)
 801030e:	4608      	mov	r0, r1
 8010310:	4611      	mov	r1, r2
 8010312:	2200      	movs	r2, #0
 8010314:	602a      	str	r2, [r5, #0]
 8010316:	461a      	mov	r2, r3
 8010318:	f7f1 fae2 	bl	80018e0 <_read>
 801031c:	1c43      	adds	r3, r0, #1
 801031e:	d102      	bne.n	8010326 <_read_r+0x1e>
 8010320:	682b      	ldr	r3, [r5, #0]
 8010322:	b103      	cbz	r3, 8010326 <_read_r+0x1e>
 8010324:	6023      	str	r3, [r4, #0]
 8010326:	bd38      	pop	{r3, r4, r5, pc}
 8010328:	2000139c 	.word	0x2000139c

0801032c <_write_r>:
 801032c:	b538      	push	{r3, r4, r5, lr}
 801032e:	4604      	mov	r4, r0
 8010330:	4d06      	ldr	r5, [pc, #24]	@ (801034c <_write_r+0x20>)
 8010332:	4608      	mov	r0, r1
 8010334:	4611      	mov	r1, r2
 8010336:	2200      	movs	r2, #0
 8010338:	602a      	str	r2, [r5, #0]
 801033a:	461a      	mov	r2, r3
 801033c:	f7f1 faed 	bl	800191a <_write>
 8010340:	1c43      	adds	r3, r0, #1
 8010342:	d102      	bne.n	801034a <_write_r+0x1e>
 8010344:	682b      	ldr	r3, [r5, #0]
 8010346:	b103      	cbz	r3, 801034a <_write_r+0x1e>
 8010348:	6023      	str	r3, [r4, #0]
 801034a:	bd38      	pop	{r3, r4, r5, pc}
 801034c:	2000139c 	.word	0x2000139c

08010350 <__errno>:
 8010350:	4b01      	ldr	r3, [pc, #4]	@ (8010358 <__errno+0x8>)
 8010352:	6818      	ldr	r0, [r3, #0]
 8010354:	4770      	bx	lr
 8010356:	bf00      	nop
 8010358:	20000130 	.word	0x20000130

0801035c <__libc_init_array>:
 801035c:	b570      	push	{r4, r5, r6, lr}
 801035e:	4d0d      	ldr	r5, [pc, #52]	@ (8010394 <__libc_init_array+0x38>)
 8010360:	2600      	movs	r6, #0
 8010362:	4c0d      	ldr	r4, [pc, #52]	@ (8010398 <__libc_init_array+0x3c>)
 8010364:	1b64      	subs	r4, r4, r5
 8010366:	10a4      	asrs	r4, r4, #2
 8010368:	42a6      	cmp	r6, r4
 801036a:	d109      	bne.n	8010380 <__libc_init_array+0x24>
 801036c:	4d0b      	ldr	r5, [pc, #44]	@ (801039c <__libc_init_array+0x40>)
 801036e:	2600      	movs	r6, #0
 8010370:	4c0b      	ldr	r4, [pc, #44]	@ (80103a0 <__libc_init_array+0x44>)
 8010372:	f000 ff7d 	bl	8011270 <_init>
 8010376:	1b64      	subs	r4, r4, r5
 8010378:	10a4      	asrs	r4, r4, #2
 801037a:	42a6      	cmp	r6, r4
 801037c:	d105      	bne.n	801038a <__libc_init_array+0x2e>
 801037e:	bd70      	pop	{r4, r5, r6, pc}
 8010380:	f855 3b04 	ldr.w	r3, [r5], #4
 8010384:	3601      	adds	r6, #1
 8010386:	4798      	blx	r3
 8010388:	e7ee      	b.n	8010368 <__libc_init_array+0xc>
 801038a:	f855 3b04 	ldr.w	r3, [r5], #4
 801038e:	3601      	adds	r6, #1
 8010390:	4798      	blx	r3
 8010392:	e7f2      	b.n	801037a <__libc_init_array+0x1e>
 8010394:	08011420 	.word	0x08011420
 8010398:	08011420 	.word	0x08011420
 801039c:	08011420 	.word	0x08011420
 80103a0:	08011424 	.word	0x08011424

080103a4 <__retarget_lock_init_recursive>:
 80103a4:	4770      	bx	lr

080103a6 <__retarget_lock_acquire_recursive>:
 80103a6:	4770      	bx	lr

080103a8 <__retarget_lock_release_recursive>:
 80103a8:	4770      	bx	lr

080103aa <memcpy>:
 80103aa:	440a      	add	r2, r1
 80103ac:	1e43      	subs	r3, r0, #1
 80103ae:	4291      	cmp	r1, r2
 80103b0:	d100      	bne.n	80103b4 <memcpy+0xa>
 80103b2:	4770      	bx	lr
 80103b4:	b510      	push	{r4, lr}
 80103b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103ba:	4291      	cmp	r1, r2
 80103bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80103c0:	d1f9      	bne.n	80103b6 <memcpy+0xc>
 80103c2:	bd10      	pop	{r4, pc}

080103c4 <_free_r>:
 80103c4:	b538      	push	{r3, r4, r5, lr}
 80103c6:	4605      	mov	r5, r0
 80103c8:	2900      	cmp	r1, #0
 80103ca:	d041      	beq.n	8010450 <_free_r+0x8c>
 80103cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103d0:	1f0c      	subs	r4, r1, #4
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	bfb8      	it	lt
 80103d6:	18e4      	addlt	r4, r4, r3
 80103d8:	f000 f8e0 	bl	801059c <__malloc_lock>
 80103dc:	4a1d      	ldr	r2, [pc, #116]	@ (8010454 <_free_r+0x90>)
 80103de:	6813      	ldr	r3, [r2, #0]
 80103e0:	b933      	cbnz	r3, 80103f0 <_free_r+0x2c>
 80103e2:	6063      	str	r3, [r4, #4]
 80103e4:	6014      	str	r4, [r2, #0]
 80103e6:	4628      	mov	r0, r5
 80103e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103ec:	f000 b8dc 	b.w	80105a8 <__malloc_unlock>
 80103f0:	42a3      	cmp	r3, r4
 80103f2:	d908      	bls.n	8010406 <_free_r+0x42>
 80103f4:	6820      	ldr	r0, [r4, #0]
 80103f6:	1821      	adds	r1, r4, r0
 80103f8:	428b      	cmp	r3, r1
 80103fa:	bf01      	itttt	eq
 80103fc:	6819      	ldreq	r1, [r3, #0]
 80103fe:	685b      	ldreq	r3, [r3, #4]
 8010400:	1809      	addeq	r1, r1, r0
 8010402:	6021      	streq	r1, [r4, #0]
 8010404:	e7ed      	b.n	80103e2 <_free_r+0x1e>
 8010406:	461a      	mov	r2, r3
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	b10b      	cbz	r3, 8010410 <_free_r+0x4c>
 801040c:	42a3      	cmp	r3, r4
 801040e:	d9fa      	bls.n	8010406 <_free_r+0x42>
 8010410:	6811      	ldr	r1, [r2, #0]
 8010412:	1850      	adds	r0, r2, r1
 8010414:	42a0      	cmp	r0, r4
 8010416:	d10b      	bne.n	8010430 <_free_r+0x6c>
 8010418:	6820      	ldr	r0, [r4, #0]
 801041a:	4401      	add	r1, r0
 801041c:	1850      	adds	r0, r2, r1
 801041e:	6011      	str	r1, [r2, #0]
 8010420:	4283      	cmp	r3, r0
 8010422:	d1e0      	bne.n	80103e6 <_free_r+0x22>
 8010424:	6818      	ldr	r0, [r3, #0]
 8010426:	685b      	ldr	r3, [r3, #4]
 8010428:	4408      	add	r0, r1
 801042a:	6053      	str	r3, [r2, #4]
 801042c:	6010      	str	r0, [r2, #0]
 801042e:	e7da      	b.n	80103e6 <_free_r+0x22>
 8010430:	d902      	bls.n	8010438 <_free_r+0x74>
 8010432:	230c      	movs	r3, #12
 8010434:	602b      	str	r3, [r5, #0]
 8010436:	e7d6      	b.n	80103e6 <_free_r+0x22>
 8010438:	6820      	ldr	r0, [r4, #0]
 801043a:	1821      	adds	r1, r4, r0
 801043c:	428b      	cmp	r3, r1
 801043e:	bf02      	ittt	eq
 8010440:	6819      	ldreq	r1, [r3, #0]
 8010442:	685b      	ldreq	r3, [r3, #4]
 8010444:	1809      	addeq	r1, r1, r0
 8010446:	6063      	str	r3, [r4, #4]
 8010448:	bf08      	it	eq
 801044a:	6021      	streq	r1, [r4, #0]
 801044c:	6054      	str	r4, [r2, #4]
 801044e:	e7ca      	b.n	80103e6 <_free_r+0x22>
 8010450:	bd38      	pop	{r3, r4, r5, pc}
 8010452:	bf00      	nop
 8010454:	200013a8 	.word	0x200013a8

08010458 <sbrk_aligned>:
 8010458:	b570      	push	{r4, r5, r6, lr}
 801045a:	4e0f      	ldr	r6, [pc, #60]	@ (8010498 <sbrk_aligned+0x40>)
 801045c:	460c      	mov	r4, r1
 801045e:	4605      	mov	r5, r0
 8010460:	6831      	ldr	r1, [r6, #0]
 8010462:	b911      	cbnz	r1, 801046a <sbrk_aligned+0x12>
 8010464:	f000 fe2c 	bl	80110c0 <_sbrk_r>
 8010468:	6030      	str	r0, [r6, #0]
 801046a:	4621      	mov	r1, r4
 801046c:	4628      	mov	r0, r5
 801046e:	f000 fe27 	bl	80110c0 <_sbrk_r>
 8010472:	1c43      	adds	r3, r0, #1
 8010474:	d103      	bne.n	801047e <sbrk_aligned+0x26>
 8010476:	f04f 34ff 	mov.w	r4, #4294967295
 801047a:	4620      	mov	r0, r4
 801047c:	bd70      	pop	{r4, r5, r6, pc}
 801047e:	1cc4      	adds	r4, r0, #3
 8010480:	f024 0403 	bic.w	r4, r4, #3
 8010484:	42a0      	cmp	r0, r4
 8010486:	d0f8      	beq.n	801047a <sbrk_aligned+0x22>
 8010488:	1a21      	subs	r1, r4, r0
 801048a:	4628      	mov	r0, r5
 801048c:	f000 fe18 	bl	80110c0 <_sbrk_r>
 8010490:	3001      	adds	r0, #1
 8010492:	d1f2      	bne.n	801047a <sbrk_aligned+0x22>
 8010494:	e7ef      	b.n	8010476 <sbrk_aligned+0x1e>
 8010496:	bf00      	nop
 8010498:	200013a4 	.word	0x200013a4

0801049c <_malloc_r>:
 801049c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104a0:	1ccd      	adds	r5, r1, #3
 80104a2:	4606      	mov	r6, r0
 80104a4:	f025 0503 	bic.w	r5, r5, #3
 80104a8:	3508      	adds	r5, #8
 80104aa:	2d0c      	cmp	r5, #12
 80104ac:	bf38      	it	cc
 80104ae:	250c      	movcc	r5, #12
 80104b0:	2d00      	cmp	r5, #0
 80104b2:	db01      	blt.n	80104b8 <_malloc_r+0x1c>
 80104b4:	42a9      	cmp	r1, r5
 80104b6:	d904      	bls.n	80104c2 <_malloc_r+0x26>
 80104b8:	230c      	movs	r3, #12
 80104ba:	6033      	str	r3, [r6, #0]
 80104bc:	2000      	movs	r0, #0
 80104be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010598 <_malloc_r+0xfc>
 80104c6:	f000 f869 	bl	801059c <__malloc_lock>
 80104ca:	f8d8 3000 	ldr.w	r3, [r8]
 80104ce:	461c      	mov	r4, r3
 80104d0:	bb44      	cbnz	r4, 8010524 <_malloc_r+0x88>
 80104d2:	4629      	mov	r1, r5
 80104d4:	4630      	mov	r0, r6
 80104d6:	f7ff ffbf 	bl	8010458 <sbrk_aligned>
 80104da:	1c43      	adds	r3, r0, #1
 80104dc:	4604      	mov	r4, r0
 80104de:	d158      	bne.n	8010592 <_malloc_r+0xf6>
 80104e0:	f8d8 4000 	ldr.w	r4, [r8]
 80104e4:	4627      	mov	r7, r4
 80104e6:	2f00      	cmp	r7, #0
 80104e8:	d143      	bne.n	8010572 <_malloc_r+0xd6>
 80104ea:	2c00      	cmp	r4, #0
 80104ec:	d04b      	beq.n	8010586 <_malloc_r+0xea>
 80104ee:	6823      	ldr	r3, [r4, #0]
 80104f0:	4639      	mov	r1, r7
 80104f2:	4630      	mov	r0, r6
 80104f4:	eb04 0903 	add.w	r9, r4, r3
 80104f8:	f000 fde2 	bl	80110c0 <_sbrk_r>
 80104fc:	4581      	cmp	r9, r0
 80104fe:	d142      	bne.n	8010586 <_malloc_r+0xea>
 8010500:	6821      	ldr	r1, [r4, #0]
 8010502:	4630      	mov	r0, r6
 8010504:	1a6d      	subs	r5, r5, r1
 8010506:	4629      	mov	r1, r5
 8010508:	f7ff ffa6 	bl	8010458 <sbrk_aligned>
 801050c:	3001      	adds	r0, #1
 801050e:	d03a      	beq.n	8010586 <_malloc_r+0xea>
 8010510:	6823      	ldr	r3, [r4, #0]
 8010512:	442b      	add	r3, r5
 8010514:	6023      	str	r3, [r4, #0]
 8010516:	f8d8 3000 	ldr.w	r3, [r8]
 801051a:	685a      	ldr	r2, [r3, #4]
 801051c:	bb62      	cbnz	r2, 8010578 <_malloc_r+0xdc>
 801051e:	f8c8 7000 	str.w	r7, [r8]
 8010522:	e00f      	b.n	8010544 <_malloc_r+0xa8>
 8010524:	6822      	ldr	r2, [r4, #0]
 8010526:	1b52      	subs	r2, r2, r5
 8010528:	d420      	bmi.n	801056c <_malloc_r+0xd0>
 801052a:	2a0b      	cmp	r2, #11
 801052c:	d917      	bls.n	801055e <_malloc_r+0xc2>
 801052e:	1961      	adds	r1, r4, r5
 8010530:	42a3      	cmp	r3, r4
 8010532:	6025      	str	r5, [r4, #0]
 8010534:	bf18      	it	ne
 8010536:	6059      	strne	r1, [r3, #4]
 8010538:	6863      	ldr	r3, [r4, #4]
 801053a:	bf08      	it	eq
 801053c:	f8c8 1000 	streq.w	r1, [r8]
 8010540:	5162      	str	r2, [r4, r5]
 8010542:	604b      	str	r3, [r1, #4]
 8010544:	4630      	mov	r0, r6
 8010546:	f000 f82f 	bl	80105a8 <__malloc_unlock>
 801054a:	f104 000b 	add.w	r0, r4, #11
 801054e:	1d23      	adds	r3, r4, #4
 8010550:	f020 0007 	bic.w	r0, r0, #7
 8010554:	1ac2      	subs	r2, r0, r3
 8010556:	bf1c      	itt	ne
 8010558:	1a1b      	subne	r3, r3, r0
 801055a:	50a3      	strne	r3, [r4, r2]
 801055c:	e7af      	b.n	80104be <_malloc_r+0x22>
 801055e:	6862      	ldr	r2, [r4, #4]
 8010560:	42a3      	cmp	r3, r4
 8010562:	bf0c      	ite	eq
 8010564:	f8c8 2000 	streq.w	r2, [r8]
 8010568:	605a      	strne	r2, [r3, #4]
 801056a:	e7eb      	b.n	8010544 <_malloc_r+0xa8>
 801056c:	4623      	mov	r3, r4
 801056e:	6864      	ldr	r4, [r4, #4]
 8010570:	e7ae      	b.n	80104d0 <_malloc_r+0x34>
 8010572:	463c      	mov	r4, r7
 8010574:	687f      	ldr	r7, [r7, #4]
 8010576:	e7b6      	b.n	80104e6 <_malloc_r+0x4a>
 8010578:	461a      	mov	r2, r3
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	42a3      	cmp	r3, r4
 801057e:	d1fb      	bne.n	8010578 <_malloc_r+0xdc>
 8010580:	2300      	movs	r3, #0
 8010582:	6053      	str	r3, [r2, #4]
 8010584:	e7de      	b.n	8010544 <_malloc_r+0xa8>
 8010586:	230c      	movs	r3, #12
 8010588:	4630      	mov	r0, r6
 801058a:	6033      	str	r3, [r6, #0]
 801058c:	f000 f80c 	bl	80105a8 <__malloc_unlock>
 8010590:	e794      	b.n	80104bc <_malloc_r+0x20>
 8010592:	6005      	str	r5, [r0, #0]
 8010594:	e7d6      	b.n	8010544 <_malloc_r+0xa8>
 8010596:	bf00      	nop
 8010598:	200013a8 	.word	0x200013a8

0801059c <__malloc_lock>:
 801059c:	4801      	ldr	r0, [pc, #4]	@ (80105a4 <__malloc_lock+0x8>)
 801059e:	f7ff bf02 	b.w	80103a6 <__retarget_lock_acquire_recursive>
 80105a2:	bf00      	nop
 80105a4:	200013a0 	.word	0x200013a0

080105a8 <__malloc_unlock>:
 80105a8:	4801      	ldr	r0, [pc, #4]	@ (80105b0 <__malloc_unlock+0x8>)
 80105aa:	f7ff befd 	b.w	80103a8 <__retarget_lock_release_recursive>
 80105ae:	bf00      	nop
 80105b0:	200013a0 	.word	0x200013a0

080105b4 <__ssputs_r>:
 80105b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105b8:	461f      	mov	r7, r3
 80105ba:	688e      	ldr	r6, [r1, #8]
 80105bc:	4682      	mov	sl, r0
 80105be:	460c      	mov	r4, r1
 80105c0:	42be      	cmp	r6, r7
 80105c2:	4690      	mov	r8, r2
 80105c4:	680b      	ldr	r3, [r1, #0]
 80105c6:	d82d      	bhi.n	8010624 <__ssputs_r+0x70>
 80105c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80105d0:	d026      	beq.n	8010620 <__ssputs_r+0x6c>
 80105d2:	6965      	ldr	r5, [r4, #20]
 80105d4:	6909      	ldr	r1, [r1, #16]
 80105d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80105da:	eba3 0901 	sub.w	r9, r3, r1
 80105de:	1c7b      	adds	r3, r7, #1
 80105e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80105e4:	444b      	add	r3, r9
 80105e6:	106d      	asrs	r5, r5, #1
 80105e8:	429d      	cmp	r5, r3
 80105ea:	bf38      	it	cc
 80105ec:	461d      	movcc	r5, r3
 80105ee:	0553      	lsls	r3, r2, #21
 80105f0:	d527      	bpl.n	8010642 <__ssputs_r+0x8e>
 80105f2:	4629      	mov	r1, r5
 80105f4:	f7ff ff52 	bl	801049c <_malloc_r>
 80105f8:	4606      	mov	r6, r0
 80105fa:	b360      	cbz	r0, 8010656 <__ssputs_r+0xa2>
 80105fc:	464a      	mov	r2, r9
 80105fe:	6921      	ldr	r1, [r4, #16]
 8010600:	f7ff fed3 	bl	80103aa <memcpy>
 8010604:	89a3      	ldrh	r3, [r4, #12]
 8010606:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801060a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801060e:	81a3      	strh	r3, [r4, #12]
 8010610:	6126      	str	r6, [r4, #16]
 8010612:	444e      	add	r6, r9
 8010614:	6165      	str	r5, [r4, #20]
 8010616:	eba5 0509 	sub.w	r5, r5, r9
 801061a:	6026      	str	r6, [r4, #0]
 801061c:	463e      	mov	r6, r7
 801061e:	60a5      	str	r5, [r4, #8]
 8010620:	42be      	cmp	r6, r7
 8010622:	d900      	bls.n	8010626 <__ssputs_r+0x72>
 8010624:	463e      	mov	r6, r7
 8010626:	4632      	mov	r2, r6
 8010628:	4641      	mov	r1, r8
 801062a:	6820      	ldr	r0, [r4, #0]
 801062c:	f000 fd2e 	bl	801108c <memmove>
 8010630:	68a3      	ldr	r3, [r4, #8]
 8010632:	2000      	movs	r0, #0
 8010634:	1b9b      	subs	r3, r3, r6
 8010636:	60a3      	str	r3, [r4, #8]
 8010638:	6823      	ldr	r3, [r4, #0]
 801063a:	4433      	add	r3, r6
 801063c:	6023      	str	r3, [r4, #0]
 801063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010642:	462a      	mov	r2, r5
 8010644:	f000 fd5a 	bl	80110fc <_realloc_r>
 8010648:	4606      	mov	r6, r0
 801064a:	2800      	cmp	r0, #0
 801064c:	d1e0      	bne.n	8010610 <__ssputs_r+0x5c>
 801064e:	6921      	ldr	r1, [r4, #16]
 8010650:	4650      	mov	r0, sl
 8010652:	f7ff feb7 	bl	80103c4 <_free_r>
 8010656:	230c      	movs	r3, #12
 8010658:	f04f 30ff 	mov.w	r0, #4294967295
 801065c:	f8ca 3000 	str.w	r3, [sl]
 8010660:	89a3      	ldrh	r3, [r4, #12]
 8010662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010666:	81a3      	strh	r3, [r4, #12]
 8010668:	e7e9      	b.n	801063e <__ssputs_r+0x8a>
	...

0801066c <_svfiprintf_r>:
 801066c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010670:	4698      	mov	r8, r3
 8010672:	898b      	ldrh	r3, [r1, #12]
 8010674:	b09d      	sub	sp, #116	@ 0x74
 8010676:	4607      	mov	r7, r0
 8010678:	061b      	lsls	r3, r3, #24
 801067a:	460d      	mov	r5, r1
 801067c:	4614      	mov	r4, r2
 801067e:	d510      	bpl.n	80106a2 <_svfiprintf_r+0x36>
 8010680:	690b      	ldr	r3, [r1, #16]
 8010682:	b973      	cbnz	r3, 80106a2 <_svfiprintf_r+0x36>
 8010684:	2140      	movs	r1, #64	@ 0x40
 8010686:	f7ff ff09 	bl	801049c <_malloc_r>
 801068a:	6028      	str	r0, [r5, #0]
 801068c:	6128      	str	r0, [r5, #16]
 801068e:	b930      	cbnz	r0, 801069e <_svfiprintf_r+0x32>
 8010690:	230c      	movs	r3, #12
 8010692:	603b      	str	r3, [r7, #0]
 8010694:	f04f 30ff 	mov.w	r0, #4294967295
 8010698:	b01d      	add	sp, #116	@ 0x74
 801069a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801069e:	2340      	movs	r3, #64	@ 0x40
 80106a0:	616b      	str	r3, [r5, #20]
 80106a2:	2300      	movs	r3, #0
 80106a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80106a8:	f04f 0901 	mov.w	r9, #1
 80106ac:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8010850 <_svfiprintf_r+0x1e4>
 80106b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80106b2:	2320      	movs	r3, #32
 80106b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80106b8:	2330      	movs	r3, #48	@ 0x30
 80106ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80106be:	4623      	mov	r3, r4
 80106c0:	469a      	mov	sl, r3
 80106c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106c6:	b10a      	cbz	r2, 80106cc <_svfiprintf_r+0x60>
 80106c8:	2a25      	cmp	r2, #37	@ 0x25
 80106ca:	d1f9      	bne.n	80106c0 <_svfiprintf_r+0x54>
 80106cc:	ebba 0b04 	subs.w	fp, sl, r4
 80106d0:	d00b      	beq.n	80106ea <_svfiprintf_r+0x7e>
 80106d2:	465b      	mov	r3, fp
 80106d4:	4622      	mov	r2, r4
 80106d6:	4629      	mov	r1, r5
 80106d8:	4638      	mov	r0, r7
 80106da:	f7ff ff6b 	bl	80105b4 <__ssputs_r>
 80106de:	3001      	adds	r0, #1
 80106e0:	f000 80a7 	beq.w	8010832 <_svfiprintf_r+0x1c6>
 80106e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106e6:	445a      	add	r2, fp
 80106e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80106ea:	f89a 3000 	ldrb.w	r3, [sl]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	f000 809f 	beq.w	8010832 <_svfiprintf_r+0x1c6>
 80106f4:	2300      	movs	r3, #0
 80106f6:	f04f 32ff 	mov.w	r2, #4294967295
 80106fa:	f10a 0a01 	add.w	sl, sl, #1
 80106fe:	9304      	str	r3, [sp, #16]
 8010700:	9307      	str	r3, [sp, #28]
 8010702:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010706:	931a      	str	r3, [sp, #104]	@ 0x68
 8010708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801070c:	4654      	mov	r4, sl
 801070e:	2205      	movs	r2, #5
 8010710:	484f      	ldr	r0, [pc, #316]	@ (8010850 <_svfiprintf_r+0x1e4>)
 8010712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010716:	f000 fce3 	bl	80110e0 <memchr>
 801071a:	9a04      	ldr	r2, [sp, #16]
 801071c:	b9d8      	cbnz	r0, 8010756 <_svfiprintf_r+0xea>
 801071e:	06d0      	lsls	r0, r2, #27
 8010720:	bf44      	itt	mi
 8010722:	2320      	movmi	r3, #32
 8010724:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010728:	0711      	lsls	r1, r2, #28
 801072a:	bf44      	itt	mi
 801072c:	232b      	movmi	r3, #43	@ 0x2b
 801072e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010732:	f89a 3000 	ldrb.w	r3, [sl]
 8010736:	2b2a      	cmp	r3, #42	@ 0x2a
 8010738:	d015      	beq.n	8010766 <_svfiprintf_r+0xfa>
 801073a:	9a07      	ldr	r2, [sp, #28]
 801073c:	4654      	mov	r4, sl
 801073e:	2000      	movs	r0, #0
 8010740:	f04f 0c0a 	mov.w	ip, #10
 8010744:	4621      	mov	r1, r4
 8010746:	f811 3b01 	ldrb.w	r3, [r1], #1
 801074a:	3b30      	subs	r3, #48	@ 0x30
 801074c:	2b09      	cmp	r3, #9
 801074e:	d94b      	bls.n	80107e8 <_svfiprintf_r+0x17c>
 8010750:	b1b0      	cbz	r0, 8010780 <_svfiprintf_r+0x114>
 8010752:	9207      	str	r2, [sp, #28]
 8010754:	e014      	b.n	8010780 <_svfiprintf_r+0x114>
 8010756:	eba0 0308 	sub.w	r3, r0, r8
 801075a:	46a2      	mov	sl, r4
 801075c:	fa09 f303 	lsl.w	r3, r9, r3
 8010760:	4313      	orrs	r3, r2
 8010762:	9304      	str	r3, [sp, #16]
 8010764:	e7d2      	b.n	801070c <_svfiprintf_r+0xa0>
 8010766:	9b03      	ldr	r3, [sp, #12]
 8010768:	1d19      	adds	r1, r3, #4
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	2b00      	cmp	r3, #0
 801076e:	9103      	str	r1, [sp, #12]
 8010770:	bfbb      	ittet	lt
 8010772:	425b      	neglt	r3, r3
 8010774:	f042 0202 	orrlt.w	r2, r2, #2
 8010778:	9307      	strge	r3, [sp, #28]
 801077a:	9307      	strlt	r3, [sp, #28]
 801077c:	bfb8      	it	lt
 801077e:	9204      	strlt	r2, [sp, #16]
 8010780:	7823      	ldrb	r3, [r4, #0]
 8010782:	2b2e      	cmp	r3, #46	@ 0x2e
 8010784:	d10a      	bne.n	801079c <_svfiprintf_r+0x130>
 8010786:	7863      	ldrb	r3, [r4, #1]
 8010788:	2b2a      	cmp	r3, #42	@ 0x2a
 801078a:	d132      	bne.n	80107f2 <_svfiprintf_r+0x186>
 801078c:	9b03      	ldr	r3, [sp, #12]
 801078e:	3402      	adds	r4, #2
 8010790:	1d1a      	adds	r2, r3, #4
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010798:	9203      	str	r2, [sp, #12]
 801079a:	9305      	str	r3, [sp, #20]
 801079c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010860 <_svfiprintf_r+0x1f4>
 80107a0:	2203      	movs	r2, #3
 80107a2:	7821      	ldrb	r1, [r4, #0]
 80107a4:	4650      	mov	r0, sl
 80107a6:	f000 fc9b 	bl	80110e0 <memchr>
 80107aa:	b138      	cbz	r0, 80107bc <_svfiprintf_r+0x150>
 80107ac:	eba0 000a 	sub.w	r0, r0, sl
 80107b0:	2240      	movs	r2, #64	@ 0x40
 80107b2:	9b04      	ldr	r3, [sp, #16]
 80107b4:	3401      	adds	r4, #1
 80107b6:	4082      	lsls	r2, r0
 80107b8:	4313      	orrs	r3, r2
 80107ba:	9304      	str	r3, [sp, #16]
 80107bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107c0:	2206      	movs	r2, #6
 80107c2:	4824      	ldr	r0, [pc, #144]	@ (8010854 <_svfiprintf_r+0x1e8>)
 80107c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80107c8:	f000 fc8a 	bl	80110e0 <memchr>
 80107cc:	2800      	cmp	r0, #0
 80107ce:	d036      	beq.n	801083e <_svfiprintf_r+0x1d2>
 80107d0:	4b21      	ldr	r3, [pc, #132]	@ (8010858 <_svfiprintf_r+0x1ec>)
 80107d2:	bb1b      	cbnz	r3, 801081c <_svfiprintf_r+0x1b0>
 80107d4:	9b03      	ldr	r3, [sp, #12]
 80107d6:	3307      	adds	r3, #7
 80107d8:	f023 0307 	bic.w	r3, r3, #7
 80107dc:	3308      	adds	r3, #8
 80107de:	9303      	str	r3, [sp, #12]
 80107e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107e2:	4433      	add	r3, r6
 80107e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80107e6:	e76a      	b.n	80106be <_svfiprintf_r+0x52>
 80107e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80107ec:	460c      	mov	r4, r1
 80107ee:	2001      	movs	r0, #1
 80107f0:	e7a8      	b.n	8010744 <_svfiprintf_r+0xd8>
 80107f2:	2300      	movs	r3, #0
 80107f4:	3401      	adds	r4, #1
 80107f6:	f04f 0c0a 	mov.w	ip, #10
 80107fa:	4619      	mov	r1, r3
 80107fc:	9305      	str	r3, [sp, #20]
 80107fe:	4620      	mov	r0, r4
 8010800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010804:	3a30      	subs	r2, #48	@ 0x30
 8010806:	2a09      	cmp	r2, #9
 8010808:	d903      	bls.n	8010812 <_svfiprintf_r+0x1a6>
 801080a:	2b00      	cmp	r3, #0
 801080c:	d0c6      	beq.n	801079c <_svfiprintf_r+0x130>
 801080e:	9105      	str	r1, [sp, #20]
 8010810:	e7c4      	b.n	801079c <_svfiprintf_r+0x130>
 8010812:	fb0c 2101 	mla	r1, ip, r1, r2
 8010816:	4604      	mov	r4, r0
 8010818:	2301      	movs	r3, #1
 801081a:	e7f0      	b.n	80107fe <_svfiprintf_r+0x192>
 801081c:	ab03      	add	r3, sp, #12
 801081e:	462a      	mov	r2, r5
 8010820:	a904      	add	r1, sp, #16
 8010822:	4638      	mov	r0, r7
 8010824:	9300      	str	r3, [sp, #0]
 8010826:	4b0d      	ldr	r3, [pc, #52]	@ (801085c <_svfiprintf_r+0x1f0>)
 8010828:	f3af 8000 	nop.w
 801082c:	1c42      	adds	r2, r0, #1
 801082e:	4606      	mov	r6, r0
 8010830:	d1d6      	bne.n	80107e0 <_svfiprintf_r+0x174>
 8010832:	89ab      	ldrh	r3, [r5, #12]
 8010834:	065b      	lsls	r3, r3, #25
 8010836:	f53f af2d 	bmi.w	8010694 <_svfiprintf_r+0x28>
 801083a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801083c:	e72c      	b.n	8010698 <_svfiprintf_r+0x2c>
 801083e:	ab03      	add	r3, sp, #12
 8010840:	462a      	mov	r2, r5
 8010842:	a904      	add	r1, sp, #16
 8010844:	4638      	mov	r0, r7
 8010846:	9300      	str	r3, [sp, #0]
 8010848:	4b04      	ldr	r3, [pc, #16]	@ (801085c <_svfiprintf_r+0x1f0>)
 801084a:	f000 f9bf 	bl	8010bcc <_printf_i>
 801084e:	e7ed      	b.n	801082c <_svfiprintf_r+0x1c0>
 8010850:	080113e4 	.word	0x080113e4
 8010854:	080113ee 	.word	0x080113ee
 8010858:	00000000 	.word	0x00000000
 801085c:	080105b5 	.word	0x080105b5
 8010860:	080113ea 	.word	0x080113ea

08010864 <__sfputc_r>:
 8010864:	6893      	ldr	r3, [r2, #8]
 8010866:	3b01      	subs	r3, #1
 8010868:	2b00      	cmp	r3, #0
 801086a:	6093      	str	r3, [r2, #8]
 801086c:	b410      	push	{r4}
 801086e:	da08      	bge.n	8010882 <__sfputc_r+0x1e>
 8010870:	6994      	ldr	r4, [r2, #24]
 8010872:	42a3      	cmp	r3, r4
 8010874:	db01      	blt.n	801087a <__sfputc_r+0x16>
 8010876:	290a      	cmp	r1, #10
 8010878:	d103      	bne.n	8010882 <__sfputc_r+0x1e>
 801087a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801087e:	f000 bb71 	b.w	8010f64 <__swbuf_r>
 8010882:	6813      	ldr	r3, [r2, #0]
 8010884:	1c58      	adds	r0, r3, #1
 8010886:	6010      	str	r0, [r2, #0]
 8010888:	4608      	mov	r0, r1
 801088a:	7019      	strb	r1, [r3, #0]
 801088c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010890:	4770      	bx	lr

08010892 <__sfputs_r>:
 8010892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010894:	4606      	mov	r6, r0
 8010896:	460f      	mov	r7, r1
 8010898:	4614      	mov	r4, r2
 801089a:	18d5      	adds	r5, r2, r3
 801089c:	42ac      	cmp	r4, r5
 801089e:	d101      	bne.n	80108a4 <__sfputs_r+0x12>
 80108a0:	2000      	movs	r0, #0
 80108a2:	e007      	b.n	80108b4 <__sfputs_r+0x22>
 80108a4:	463a      	mov	r2, r7
 80108a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108aa:	4630      	mov	r0, r6
 80108ac:	f7ff ffda 	bl	8010864 <__sfputc_r>
 80108b0:	1c43      	adds	r3, r0, #1
 80108b2:	d1f3      	bne.n	801089c <__sfputs_r+0xa>
 80108b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080108b8 <_vfiprintf_r>:
 80108b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108bc:	460d      	mov	r5, r1
 80108be:	b09d      	sub	sp, #116	@ 0x74
 80108c0:	4614      	mov	r4, r2
 80108c2:	4698      	mov	r8, r3
 80108c4:	4606      	mov	r6, r0
 80108c6:	b118      	cbz	r0, 80108d0 <_vfiprintf_r+0x18>
 80108c8:	6a03      	ldr	r3, [r0, #32]
 80108ca:	b90b      	cbnz	r3, 80108d0 <_vfiprintf_r+0x18>
 80108cc:	f7ff fc2e 	bl	801012c <__sinit>
 80108d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80108d2:	07d9      	lsls	r1, r3, #31
 80108d4:	d405      	bmi.n	80108e2 <_vfiprintf_r+0x2a>
 80108d6:	89ab      	ldrh	r3, [r5, #12]
 80108d8:	059a      	lsls	r2, r3, #22
 80108da:	d402      	bmi.n	80108e2 <_vfiprintf_r+0x2a>
 80108dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108de:	f7ff fd62 	bl	80103a6 <__retarget_lock_acquire_recursive>
 80108e2:	89ab      	ldrh	r3, [r5, #12]
 80108e4:	071b      	lsls	r3, r3, #28
 80108e6:	d501      	bpl.n	80108ec <_vfiprintf_r+0x34>
 80108e8:	692b      	ldr	r3, [r5, #16]
 80108ea:	b99b      	cbnz	r3, 8010914 <_vfiprintf_r+0x5c>
 80108ec:	4629      	mov	r1, r5
 80108ee:	4630      	mov	r0, r6
 80108f0:	f000 fb76 	bl	8010fe0 <__swsetup_r>
 80108f4:	b170      	cbz	r0, 8010914 <_vfiprintf_r+0x5c>
 80108f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80108f8:	07dc      	lsls	r4, r3, #31
 80108fa:	d504      	bpl.n	8010906 <_vfiprintf_r+0x4e>
 80108fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010900:	b01d      	add	sp, #116	@ 0x74
 8010902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010906:	89ab      	ldrh	r3, [r5, #12]
 8010908:	0598      	lsls	r0, r3, #22
 801090a:	d4f7      	bmi.n	80108fc <_vfiprintf_r+0x44>
 801090c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801090e:	f7ff fd4b 	bl	80103a8 <__retarget_lock_release_recursive>
 8010912:	e7f3      	b.n	80108fc <_vfiprintf_r+0x44>
 8010914:	2300      	movs	r3, #0
 8010916:	f8cd 800c 	str.w	r8, [sp, #12]
 801091a:	f04f 0901 	mov.w	r9, #1
 801091e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8010ad4 <_vfiprintf_r+0x21c>
 8010922:	9309      	str	r3, [sp, #36]	@ 0x24
 8010924:	2320      	movs	r3, #32
 8010926:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801092a:	2330      	movs	r3, #48	@ 0x30
 801092c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010930:	4623      	mov	r3, r4
 8010932:	469a      	mov	sl, r3
 8010934:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010938:	b10a      	cbz	r2, 801093e <_vfiprintf_r+0x86>
 801093a:	2a25      	cmp	r2, #37	@ 0x25
 801093c:	d1f9      	bne.n	8010932 <_vfiprintf_r+0x7a>
 801093e:	ebba 0b04 	subs.w	fp, sl, r4
 8010942:	d00b      	beq.n	801095c <_vfiprintf_r+0xa4>
 8010944:	465b      	mov	r3, fp
 8010946:	4622      	mov	r2, r4
 8010948:	4629      	mov	r1, r5
 801094a:	4630      	mov	r0, r6
 801094c:	f7ff ffa1 	bl	8010892 <__sfputs_r>
 8010950:	3001      	adds	r0, #1
 8010952:	f000 80a7 	beq.w	8010aa4 <_vfiprintf_r+0x1ec>
 8010956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010958:	445a      	add	r2, fp
 801095a:	9209      	str	r2, [sp, #36]	@ 0x24
 801095c:	f89a 3000 	ldrb.w	r3, [sl]
 8010960:	2b00      	cmp	r3, #0
 8010962:	f000 809f 	beq.w	8010aa4 <_vfiprintf_r+0x1ec>
 8010966:	2300      	movs	r3, #0
 8010968:	f04f 32ff 	mov.w	r2, #4294967295
 801096c:	f10a 0a01 	add.w	sl, sl, #1
 8010970:	9304      	str	r3, [sp, #16]
 8010972:	9307      	str	r3, [sp, #28]
 8010974:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010978:	931a      	str	r3, [sp, #104]	@ 0x68
 801097a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801097e:	4654      	mov	r4, sl
 8010980:	2205      	movs	r2, #5
 8010982:	4854      	ldr	r0, [pc, #336]	@ (8010ad4 <_vfiprintf_r+0x21c>)
 8010984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010988:	f000 fbaa 	bl	80110e0 <memchr>
 801098c:	9a04      	ldr	r2, [sp, #16]
 801098e:	b9d8      	cbnz	r0, 80109c8 <_vfiprintf_r+0x110>
 8010990:	06d1      	lsls	r1, r2, #27
 8010992:	bf44      	itt	mi
 8010994:	2320      	movmi	r3, #32
 8010996:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801099a:	0713      	lsls	r3, r2, #28
 801099c:	bf44      	itt	mi
 801099e:	232b      	movmi	r3, #43	@ 0x2b
 80109a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109a4:	f89a 3000 	ldrb.w	r3, [sl]
 80109a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80109aa:	d015      	beq.n	80109d8 <_vfiprintf_r+0x120>
 80109ac:	9a07      	ldr	r2, [sp, #28]
 80109ae:	4654      	mov	r4, sl
 80109b0:	2000      	movs	r0, #0
 80109b2:	f04f 0c0a 	mov.w	ip, #10
 80109b6:	4621      	mov	r1, r4
 80109b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109bc:	3b30      	subs	r3, #48	@ 0x30
 80109be:	2b09      	cmp	r3, #9
 80109c0:	d94b      	bls.n	8010a5a <_vfiprintf_r+0x1a2>
 80109c2:	b1b0      	cbz	r0, 80109f2 <_vfiprintf_r+0x13a>
 80109c4:	9207      	str	r2, [sp, #28]
 80109c6:	e014      	b.n	80109f2 <_vfiprintf_r+0x13a>
 80109c8:	eba0 0308 	sub.w	r3, r0, r8
 80109cc:	46a2      	mov	sl, r4
 80109ce:	fa09 f303 	lsl.w	r3, r9, r3
 80109d2:	4313      	orrs	r3, r2
 80109d4:	9304      	str	r3, [sp, #16]
 80109d6:	e7d2      	b.n	801097e <_vfiprintf_r+0xc6>
 80109d8:	9b03      	ldr	r3, [sp, #12]
 80109da:	1d19      	adds	r1, r3, #4
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	9103      	str	r1, [sp, #12]
 80109e2:	bfbb      	ittet	lt
 80109e4:	425b      	neglt	r3, r3
 80109e6:	f042 0202 	orrlt.w	r2, r2, #2
 80109ea:	9307      	strge	r3, [sp, #28]
 80109ec:	9307      	strlt	r3, [sp, #28]
 80109ee:	bfb8      	it	lt
 80109f0:	9204      	strlt	r2, [sp, #16]
 80109f2:	7823      	ldrb	r3, [r4, #0]
 80109f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80109f6:	d10a      	bne.n	8010a0e <_vfiprintf_r+0x156>
 80109f8:	7863      	ldrb	r3, [r4, #1]
 80109fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80109fc:	d132      	bne.n	8010a64 <_vfiprintf_r+0x1ac>
 80109fe:	9b03      	ldr	r3, [sp, #12]
 8010a00:	3402      	adds	r4, #2
 8010a02:	1d1a      	adds	r2, r3, #4
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a0a:	9203      	str	r2, [sp, #12]
 8010a0c:	9305      	str	r3, [sp, #20]
 8010a0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010ae4 <_vfiprintf_r+0x22c>
 8010a12:	2203      	movs	r2, #3
 8010a14:	7821      	ldrb	r1, [r4, #0]
 8010a16:	4650      	mov	r0, sl
 8010a18:	f000 fb62 	bl	80110e0 <memchr>
 8010a1c:	b138      	cbz	r0, 8010a2e <_vfiprintf_r+0x176>
 8010a1e:	eba0 000a 	sub.w	r0, r0, sl
 8010a22:	2240      	movs	r2, #64	@ 0x40
 8010a24:	9b04      	ldr	r3, [sp, #16]
 8010a26:	3401      	adds	r4, #1
 8010a28:	4082      	lsls	r2, r0
 8010a2a:	4313      	orrs	r3, r2
 8010a2c:	9304      	str	r3, [sp, #16]
 8010a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a32:	2206      	movs	r2, #6
 8010a34:	4828      	ldr	r0, [pc, #160]	@ (8010ad8 <_vfiprintf_r+0x220>)
 8010a36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010a3a:	f000 fb51 	bl	80110e0 <memchr>
 8010a3e:	2800      	cmp	r0, #0
 8010a40:	d03f      	beq.n	8010ac2 <_vfiprintf_r+0x20a>
 8010a42:	4b26      	ldr	r3, [pc, #152]	@ (8010adc <_vfiprintf_r+0x224>)
 8010a44:	bb1b      	cbnz	r3, 8010a8e <_vfiprintf_r+0x1d6>
 8010a46:	9b03      	ldr	r3, [sp, #12]
 8010a48:	3307      	adds	r3, #7
 8010a4a:	f023 0307 	bic.w	r3, r3, #7
 8010a4e:	3308      	adds	r3, #8
 8010a50:	9303      	str	r3, [sp, #12]
 8010a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a54:	443b      	add	r3, r7
 8010a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a58:	e76a      	b.n	8010930 <_vfiprintf_r+0x78>
 8010a5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a5e:	460c      	mov	r4, r1
 8010a60:	2001      	movs	r0, #1
 8010a62:	e7a8      	b.n	80109b6 <_vfiprintf_r+0xfe>
 8010a64:	2300      	movs	r3, #0
 8010a66:	3401      	adds	r4, #1
 8010a68:	f04f 0c0a 	mov.w	ip, #10
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	9305      	str	r3, [sp, #20]
 8010a70:	4620      	mov	r0, r4
 8010a72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a76:	3a30      	subs	r2, #48	@ 0x30
 8010a78:	2a09      	cmp	r2, #9
 8010a7a:	d903      	bls.n	8010a84 <_vfiprintf_r+0x1cc>
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d0c6      	beq.n	8010a0e <_vfiprintf_r+0x156>
 8010a80:	9105      	str	r1, [sp, #20]
 8010a82:	e7c4      	b.n	8010a0e <_vfiprintf_r+0x156>
 8010a84:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a88:	4604      	mov	r4, r0
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	e7f0      	b.n	8010a70 <_vfiprintf_r+0x1b8>
 8010a8e:	ab03      	add	r3, sp, #12
 8010a90:	462a      	mov	r2, r5
 8010a92:	a904      	add	r1, sp, #16
 8010a94:	4630      	mov	r0, r6
 8010a96:	9300      	str	r3, [sp, #0]
 8010a98:	4b11      	ldr	r3, [pc, #68]	@ (8010ae0 <_vfiprintf_r+0x228>)
 8010a9a:	f3af 8000 	nop.w
 8010a9e:	4607      	mov	r7, r0
 8010aa0:	1c78      	adds	r0, r7, #1
 8010aa2:	d1d6      	bne.n	8010a52 <_vfiprintf_r+0x19a>
 8010aa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010aa6:	07d9      	lsls	r1, r3, #31
 8010aa8:	d405      	bmi.n	8010ab6 <_vfiprintf_r+0x1fe>
 8010aaa:	89ab      	ldrh	r3, [r5, #12]
 8010aac:	059a      	lsls	r2, r3, #22
 8010aae:	d402      	bmi.n	8010ab6 <_vfiprintf_r+0x1fe>
 8010ab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ab2:	f7ff fc79 	bl	80103a8 <__retarget_lock_release_recursive>
 8010ab6:	89ab      	ldrh	r3, [r5, #12]
 8010ab8:	065b      	lsls	r3, r3, #25
 8010aba:	f53f af1f 	bmi.w	80108fc <_vfiprintf_r+0x44>
 8010abe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ac0:	e71e      	b.n	8010900 <_vfiprintf_r+0x48>
 8010ac2:	ab03      	add	r3, sp, #12
 8010ac4:	462a      	mov	r2, r5
 8010ac6:	a904      	add	r1, sp, #16
 8010ac8:	4630      	mov	r0, r6
 8010aca:	9300      	str	r3, [sp, #0]
 8010acc:	4b04      	ldr	r3, [pc, #16]	@ (8010ae0 <_vfiprintf_r+0x228>)
 8010ace:	f000 f87d 	bl	8010bcc <_printf_i>
 8010ad2:	e7e4      	b.n	8010a9e <_vfiprintf_r+0x1e6>
 8010ad4:	080113e4 	.word	0x080113e4
 8010ad8:	080113ee 	.word	0x080113ee
 8010adc:	00000000 	.word	0x00000000
 8010ae0:	08010893 	.word	0x08010893
 8010ae4:	080113ea 	.word	0x080113ea

08010ae8 <_printf_common>:
 8010ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aec:	4616      	mov	r6, r2
 8010aee:	4698      	mov	r8, r3
 8010af0:	688a      	ldr	r2, [r1, #8]
 8010af2:	4607      	mov	r7, r0
 8010af4:	690b      	ldr	r3, [r1, #16]
 8010af6:	460c      	mov	r4, r1
 8010af8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010afc:	4293      	cmp	r3, r2
 8010afe:	bfb8      	it	lt
 8010b00:	4613      	movlt	r3, r2
 8010b02:	6033      	str	r3, [r6, #0]
 8010b04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010b08:	b10a      	cbz	r2, 8010b0e <_printf_common+0x26>
 8010b0a:	3301      	adds	r3, #1
 8010b0c:	6033      	str	r3, [r6, #0]
 8010b0e:	6823      	ldr	r3, [r4, #0]
 8010b10:	0699      	lsls	r1, r3, #26
 8010b12:	bf42      	ittt	mi
 8010b14:	6833      	ldrmi	r3, [r6, #0]
 8010b16:	3302      	addmi	r3, #2
 8010b18:	6033      	strmi	r3, [r6, #0]
 8010b1a:	6825      	ldr	r5, [r4, #0]
 8010b1c:	f015 0506 	ands.w	r5, r5, #6
 8010b20:	d106      	bne.n	8010b30 <_printf_common+0x48>
 8010b22:	f104 0a19 	add.w	sl, r4, #25
 8010b26:	68e3      	ldr	r3, [r4, #12]
 8010b28:	6832      	ldr	r2, [r6, #0]
 8010b2a:	1a9b      	subs	r3, r3, r2
 8010b2c:	42ab      	cmp	r3, r5
 8010b2e:	dc2b      	bgt.n	8010b88 <_printf_common+0xa0>
 8010b30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010b34:	6822      	ldr	r2, [r4, #0]
 8010b36:	3b00      	subs	r3, #0
 8010b38:	bf18      	it	ne
 8010b3a:	2301      	movne	r3, #1
 8010b3c:	0692      	lsls	r2, r2, #26
 8010b3e:	d430      	bmi.n	8010ba2 <_printf_common+0xba>
 8010b40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010b44:	4641      	mov	r1, r8
 8010b46:	4638      	mov	r0, r7
 8010b48:	47c8      	blx	r9
 8010b4a:	3001      	adds	r0, #1
 8010b4c:	d023      	beq.n	8010b96 <_printf_common+0xae>
 8010b4e:	6823      	ldr	r3, [r4, #0]
 8010b50:	341a      	adds	r4, #26
 8010b52:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8010b56:	f003 0306 	and.w	r3, r3, #6
 8010b5a:	2b04      	cmp	r3, #4
 8010b5c:	bf0a      	itet	eq
 8010b5e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8010b62:	2500      	movne	r5, #0
 8010b64:	6833      	ldreq	r3, [r6, #0]
 8010b66:	f04f 0600 	mov.w	r6, #0
 8010b6a:	bf08      	it	eq
 8010b6c:	1aed      	subeq	r5, r5, r3
 8010b6e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8010b72:	bf08      	it	eq
 8010b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	bfc4      	itt	gt
 8010b7c:	1a9b      	subgt	r3, r3, r2
 8010b7e:	18ed      	addgt	r5, r5, r3
 8010b80:	42b5      	cmp	r5, r6
 8010b82:	d11a      	bne.n	8010bba <_printf_common+0xd2>
 8010b84:	2000      	movs	r0, #0
 8010b86:	e008      	b.n	8010b9a <_printf_common+0xb2>
 8010b88:	2301      	movs	r3, #1
 8010b8a:	4652      	mov	r2, sl
 8010b8c:	4641      	mov	r1, r8
 8010b8e:	4638      	mov	r0, r7
 8010b90:	47c8      	blx	r9
 8010b92:	3001      	adds	r0, #1
 8010b94:	d103      	bne.n	8010b9e <_printf_common+0xb6>
 8010b96:	f04f 30ff 	mov.w	r0, #4294967295
 8010b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b9e:	3501      	adds	r5, #1
 8010ba0:	e7c1      	b.n	8010b26 <_printf_common+0x3e>
 8010ba2:	18e1      	adds	r1, r4, r3
 8010ba4:	1c5a      	adds	r2, r3, #1
 8010ba6:	2030      	movs	r0, #48	@ 0x30
 8010ba8:	3302      	adds	r3, #2
 8010baa:	4422      	add	r2, r4
 8010bac:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010bb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010bb8:	e7c2      	b.n	8010b40 <_printf_common+0x58>
 8010bba:	2301      	movs	r3, #1
 8010bbc:	4622      	mov	r2, r4
 8010bbe:	4641      	mov	r1, r8
 8010bc0:	4638      	mov	r0, r7
 8010bc2:	47c8      	blx	r9
 8010bc4:	3001      	adds	r0, #1
 8010bc6:	d0e6      	beq.n	8010b96 <_printf_common+0xae>
 8010bc8:	3601      	adds	r6, #1
 8010bca:	e7d9      	b.n	8010b80 <_printf_common+0x98>

08010bcc <_printf_i>:
 8010bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010bd0:	7e0f      	ldrb	r7, [r1, #24]
 8010bd2:	4691      	mov	r9, r2
 8010bd4:	4680      	mov	r8, r0
 8010bd6:	460c      	mov	r4, r1
 8010bd8:	2f78      	cmp	r7, #120	@ 0x78
 8010bda:	469a      	mov	sl, r3
 8010bdc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010bde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010be2:	d807      	bhi.n	8010bf4 <_printf_i+0x28>
 8010be4:	2f62      	cmp	r7, #98	@ 0x62
 8010be6:	d80a      	bhi.n	8010bfe <_printf_i+0x32>
 8010be8:	2f00      	cmp	r7, #0
 8010bea:	f000 80d2 	beq.w	8010d92 <_printf_i+0x1c6>
 8010bee:	2f58      	cmp	r7, #88	@ 0x58
 8010bf0:	f000 80b9 	beq.w	8010d66 <_printf_i+0x19a>
 8010bf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010bf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010bfc:	e03a      	b.n	8010c74 <_printf_i+0xa8>
 8010bfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010c02:	2b15      	cmp	r3, #21
 8010c04:	d8f6      	bhi.n	8010bf4 <_printf_i+0x28>
 8010c06:	a101      	add	r1, pc, #4	@ (adr r1, 8010c0c <_printf_i+0x40>)
 8010c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010c0c:	08010c65 	.word	0x08010c65
 8010c10:	08010c79 	.word	0x08010c79
 8010c14:	08010bf5 	.word	0x08010bf5
 8010c18:	08010bf5 	.word	0x08010bf5
 8010c1c:	08010bf5 	.word	0x08010bf5
 8010c20:	08010bf5 	.word	0x08010bf5
 8010c24:	08010c79 	.word	0x08010c79
 8010c28:	08010bf5 	.word	0x08010bf5
 8010c2c:	08010bf5 	.word	0x08010bf5
 8010c30:	08010bf5 	.word	0x08010bf5
 8010c34:	08010bf5 	.word	0x08010bf5
 8010c38:	08010d79 	.word	0x08010d79
 8010c3c:	08010ca3 	.word	0x08010ca3
 8010c40:	08010d33 	.word	0x08010d33
 8010c44:	08010bf5 	.word	0x08010bf5
 8010c48:	08010bf5 	.word	0x08010bf5
 8010c4c:	08010d9b 	.word	0x08010d9b
 8010c50:	08010bf5 	.word	0x08010bf5
 8010c54:	08010ca3 	.word	0x08010ca3
 8010c58:	08010bf5 	.word	0x08010bf5
 8010c5c:	08010bf5 	.word	0x08010bf5
 8010c60:	08010d3b 	.word	0x08010d3b
 8010c64:	6833      	ldr	r3, [r6, #0]
 8010c66:	1d1a      	adds	r2, r3, #4
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	6032      	str	r2, [r6, #0]
 8010c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010c70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010c74:	2301      	movs	r3, #1
 8010c76:	e09d      	b.n	8010db4 <_printf_i+0x1e8>
 8010c78:	6833      	ldr	r3, [r6, #0]
 8010c7a:	6820      	ldr	r0, [r4, #0]
 8010c7c:	1d19      	adds	r1, r3, #4
 8010c7e:	6031      	str	r1, [r6, #0]
 8010c80:	0606      	lsls	r6, r0, #24
 8010c82:	d501      	bpl.n	8010c88 <_printf_i+0xbc>
 8010c84:	681d      	ldr	r5, [r3, #0]
 8010c86:	e003      	b.n	8010c90 <_printf_i+0xc4>
 8010c88:	0645      	lsls	r5, r0, #25
 8010c8a:	d5fb      	bpl.n	8010c84 <_printf_i+0xb8>
 8010c8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010c90:	2d00      	cmp	r5, #0
 8010c92:	da03      	bge.n	8010c9c <_printf_i+0xd0>
 8010c94:	232d      	movs	r3, #45	@ 0x2d
 8010c96:	426d      	negs	r5, r5
 8010c98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010c9c:	4859      	ldr	r0, [pc, #356]	@ (8010e04 <_printf_i+0x238>)
 8010c9e:	230a      	movs	r3, #10
 8010ca0:	e011      	b.n	8010cc6 <_printf_i+0xfa>
 8010ca2:	6821      	ldr	r1, [r4, #0]
 8010ca4:	6833      	ldr	r3, [r6, #0]
 8010ca6:	0608      	lsls	r0, r1, #24
 8010ca8:	f853 5b04 	ldr.w	r5, [r3], #4
 8010cac:	d402      	bmi.n	8010cb4 <_printf_i+0xe8>
 8010cae:	0649      	lsls	r1, r1, #25
 8010cb0:	bf48      	it	mi
 8010cb2:	b2ad      	uxthmi	r5, r5
 8010cb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8010cb6:	6033      	str	r3, [r6, #0]
 8010cb8:	4852      	ldr	r0, [pc, #328]	@ (8010e04 <_printf_i+0x238>)
 8010cba:	bf14      	ite	ne
 8010cbc:	230a      	movne	r3, #10
 8010cbe:	2308      	moveq	r3, #8
 8010cc0:	2100      	movs	r1, #0
 8010cc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010cc6:	6866      	ldr	r6, [r4, #4]
 8010cc8:	2e00      	cmp	r6, #0
 8010cca:	60a6      	str	r6, [r4, #8]
 8010ccc:	bfa2      	ittt	ge
 8010cce:	6821      	ldrge	r1, [r4, #0]
 8010cd0:	f021 0104 	bicge.w	r1, r1, #4
 8010cd4:	6021      	strge	r1, [r4, #0]
 8010cd6:	b90d      	cbnz	r5, 8010cdc <_printf_i+0x110>
 8010cd8:	2e00      	cmp	r6, #0
 8010cda:	d04b      	beq.n	8010d74 <_printf_i+0x1a8>
 8010cdc:	4616      	mov	r6, r2
 8010cde:	fbb5 f1f3 	udiv	r1, r5, r3
 8010ce2:	fb03 5711 	mls	r7, r3, r1, r5
 8010ce6:	5dc7      	ldrb	r7, [r0, r7]
 8010ce8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010cec:	462f      	mov	r7, r5
 8010cee:	460d      	mov	r5, r1
 8010cf0:	42bb      	cmp	r3, r7
 8010cf2:	d9f4      	bls.n	8010cde <_printf_i+0x112>
 8010cf4:	2b08      	cmp	r3, #8
 8010cf6:	d10b      	bne.n	8010d10 <_printf_i+0x144>
 8010cf8:	6823      	ldr	r3, [r4, #0]
 8010cfa:	07df      	lsls	r7, r3, #31
 8010cfc:	d508      	bpl.n	8010d10 <_printf_i+0x144>
 8010cfe:	6923      	ldr	r3, [r4, #16]
 8010d00:	6861      	ldr	r1, [r4, #4]
 8010d02:	4299      	cmp	r1, r3
 8010d04:	bfde      	ittt	le
 8010d06:	2330      	movle	r3, #48	@ 0x30
 8010d08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010d0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010d10:	1b92      	subs	r2, r2, r6
 8010d12:	6122      	str	r2, [r4, #16]
 8010d14:	464b      	mov	r3, r9
 8010d16:	aa03      	add	r2, sp, #12
 8010d18:	4621      	mov	r1, r4
 8010d1a:	4640      	mov	r0, r8
 8010d1c:	f8cd a000 	str.w	sl, [sp]
 8010d20:	f7ff fee2 	bl	8010ae8 <_printf_common>
 8010d24:	3001      	adds	r0, #1
 8010d26:	d14a      	bne.n	8010dbe <_printf_i+0x1f2>
 8010d28:	f04f 30ff 	mov.w	r0, #4294967295
 8010d2c:	b004      	add	sp, #16
 8010d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d32:	6823      	ldr	r3, [r4, #0]
 8010d34:	f043 0320 	orr.w	r3, r3, #32
 8010d38:	6023      	str	r3, [r4, #0]
 8010d3a:	2778      	movs	r7, #120	@ 0x78
 8010d3c:	4832      	ldr	r0, [pc, #200]	@ (8010e08 <_printf_i+0x23c>)
 8010d3e:	6823      	ldr	r3, [r4, #0]
 8010d40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010d44:	061f      	lsls	r7, r3, #24
 8010d46:	6831      	ldr	r1, [r6, #0]
 8010d48:	f851 5b04 	ldr.w	r5, [r1], #4
 8010d4c:	d402      	bmi.n	8010d54 <_printf_i+0x188>
 8010d4e:	065f      	lsls	r7, r3, #25
 8010d50:	bf48      	it	mi
 8010d52:	b2ad      	uxthmi	r5, r5
 8010d54:	6031      	str	r1, [r6, #0]
 8010d56:	07d9      	lsls	r1, r3, #31
 8010d58:	bf44      	itt	mi
 8010d5a:	f043 0320 	orrmi.w	r3, r3, #32
 8010d5e:	6023      	strmi	r3, [r4, #0]
 8010d60:	b11d      	cbz	r5, 8010d6a <_printf_i+0x19e>
 8010d62:	2310      	movs	r3, #16
 8010d64:	e7ac      	b.n	8010cc0 <_printf_i+0xf4>
 8010d66:	4827      	ldr	r0, [pc, #156]	@ (8010e04 <_printf_i+0x238>)
 8010d68:	e7e9      	b.n	8010d3e <_printf_i+0x172>
 8010d6a:	6823      	ldr	r3, [r4, #0]
 8010d6c:	f023 0320 	bic.w	r3, r3, #32
 8010d70:	6023      	str	r3, [r4, #0]
 8010d72:	e7f6      	b.n	8010d62 <_printf_i+0x196>
 8010d74:	4616      	mov	r6, r2
 8010d76:	e7bd      	b.n	8010cf4 <_printf_i+0x128>
 8010d78:	6833      	ldr	r3, [r6, #0]
 8010d7a:	6825      	ldr	r5, [r4, #0]
 8010d7c:	1d18      	adds	r0, r3, #4
 8010d7e:	6961      	ldr	r1, [r4, #20]
 8010d80:	6030      	str	r0, [r6, #0]
 8010d82:	062e      	lsls	r6, r5, #24
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	d501      	bpl.n	8010d8c <_printf_i+0x1c0>
 8010d88:	6019      	str	r1, [r3, #0]
 8010d8a:	e002      	b.n	8010d92 <_printf_i+0x1c6>
 8010d8c:	0668      	lsls	r0, r5, #25
 8010d8e:	d5fb      	bpl.n	8010d88 <_printf_i+0x1bc>
 8010d90:	8019      	strh	r1, [r3, #0]
 8010d92:	2300      	movs	r3, #0
 8010d94:	4616      	mov	r6, r2
 8010d96:	6123      	str	r3, [r4, #16]
 8010d98:	e7bc      	b.n	8010d14 <_printf_i+0x148>
 8010d9a:	6833      	ldr	r3, [r6, #0]
 8010d9c:	2100      	movs	r1, #0
 8010d9e:	1d1a      	adds	r2, r3, #4
 8010da0:	6032      	str	r2, [r6, #0]
 8010da2:	681e      	ldr	r6, [r3, #0]
 8010da4:	6862      	ldr	r2, [r4, #4]
 8010da6:	4630      	mov	r0, r6
 8010da8:	f000 f99a 	bl	80110e0 <memchr>
 8010dac:	b108      	cbz	r0, 8010db2 <_printf_i+0x1e6>
 8010dae:	1b80      	subs	r0, r0, r6
 8010db0:	6060      	str	r0, [r4, #4]
 8010db2:	6863      	ldr	r3, [r4, #4]
 8010db4:	6123      	str	r3, [r4, #16]
 8010db6:	2300      	movs	r3, #0
 8010db8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010dbc:	e7aa      	b.n	8010d14 <_printf_i+0x148>
 8010dbe:	6923      	ldr	r3, [r4, #16]
 8010dc0:	4632      	mov	r2, r6
 8010dc2:	4649      	mov	r1, r9
 8010dc4:	4640      	mov	r0, r8
 8010dc6:	47d0      	blx	sl
 8010dc8:	3001      	adds	r0, #1
 8010dca:	d0ad      	beq.n	8010d28 <_printf_i+0x15c>
 8010dcc:	6823      	ldr	r3, [r4, #0]
 8010dce:	079b      	lsls	r3, r3, #30
 8010dd0:	d413      	bmi.n	8010dfa <_printf_i+0x22e>
 8010dd2:	68e0      	ldr	r0, [r4, #12]
 8010dd4:	9b03      	ldr	r3, [sp, #12]
 8010dd6:	4298      	cmp	r0, r3
 8010dd8:	bfb8      	it	lt
 8010dda:	4618      	movlt	r0, r3
 8010ddc:	e7a6      	b.n	8010d2c <_printf_i+0x160>
 8010dde:	2301      	movs	r3, #1
 8010de0:	4632      	mov	r2, r6
 8010de2:	4649      	mov	r1, r9
 8010de4:	4640      	mov	r0, r8
 8010de6:	47d0      	blx	sl
 8010de8:	3001      	adds	r0, #1
 8010dea:	d09d      	beq.n	8010d28 <_printf_i+0x15c>
 8010dec:	3501      	adds	r5, #1
 8010dee:	68e3      	ldr	r3, [r4, #12]
 8010df0:	9903      	ldr	r1, [sp, #12]
 8010df2:	1a5b      	subs	r3, r3, r1
 8010df4:	42ab      	cmp	r3, r5
 8010df6:	dcf2      	bgt.n	8010dde <_printf_i+0x212>
 8010df8:	e7eb      	b.n	8010dd2 <_printf_i+0x206>
 8010dfa:	2500      	movs	r5, #0
 8010dfc:	f104 0619 	add.w	r6, r4, #25
 8010e00:	e7f5      	b.n	8010dee <_printf_i+0x222>
 8010e02:	bf00      	nop
 8010e04:	080113f5 	.word	0x080113f5
 8010e08:	08011406 	.word	0x08011406

08010e0c <__sflush_r>:
 8010e0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e14:	0716      	lsls	r6, r2, #28
 8010e16:	4605      	mov	r5, r0
 8010e18:	460c      	mov	r4, r1
 8010e1a:	d454      	bmi.n	8010ec6 <__sflush_r+0xba>
 8010e1c:	684b      	ldr	r3, [r1, #4]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	dc02      	bgt.n	8010e28 <__sflush_r+0x1c>
 8010e22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	dd48      	ble.n	8010eba <__sflush_r+0xae>
 8010e28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010e2a:	2e00      	cmp	r6, #0
 8010e2c:	d045      	beq.n	8010eba <__sflush_r+0xae>
 8010e2e:	2300      	movs	r3, #0
 8010e30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010e34:	682f      	ldr	r7, [r5, #0]
 8010e36:	6a21      	ldr	r1, [r4, #32]
 8010e38:	602b      	str	r3, [r5, #0]
 8010e3a:	d030      	beq.n	8010e9e <__sflush_r+0x92>
 8010e3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010e3e:	89a3      	ldrh	r3, [r4, #12]
 8010e40:	0759      	lsls	r1, r3, #29
 8010e42:	d505      	bpl.n	8010e50 <__sflush_r+0x44>
 8010e44:	6863      	ldr	r3, [r4, #4]
 8010e46:	1ad2      	subs	r2, r2, r3
 8010e48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010e4a:	b10b      	cbz	r3, 8010e50 <__sflush_r+0x44>
 8010e4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010e4e:	1ad2      	subs	r2, r2, r3
 8010e50:	2300      	movs	r3, #0
 8010e52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010e54:	6a21      	ldr	r1, [r4, #32]
 8010e56:	4628      	mov	r0, r5
 8010e58:	47b0      	blx	r6
 8010e5a:	1c43      	adds	r3, r0, #1
 8010e5c:	89a3      	ldrh	r3, [r4, #12]
 8010e5e:	d106      	bne.n	8010e6e <__sflush_r+0x62>
 8010e60:	6829      	ldr	r1, [r5, #0]
 8010e62:	291d      	cmp	r1, #29
 8010e64:	d82b      	bhi.n	8010ebe <__sflush_r+0xb2>
 8010e66:	4a2a      	ldr	r2, [pc, #168]	@ (8010f10 <__sflush_r+0x104>)
 8010e68:	410a      	asrs	r2, r1
 8010e6a:	07d6      	lsls	r6, r2, #31
 8010e6c:	d427      	bmi.n	8010ebe <__sflush_r+0xb2>
 8010e6e:	2200      	movs	r2, #0
 8010e70:	04d9      	lsls	r1, r3, #19
 8010e72:	6062      	str	r2, [r4, #4]
 8010e74:	6922      	ldr	r2, [r4, #16]
 8010e76:	6022      	str	r2, [r4, #0]
 8010e78:	d504      	bpl.n	8010e84 <__sflush_r+0x78>
 8010e7a:	1c42      	adds	r2, r0, #1
 8010e7c:	d101      	bne.n	8010e82 <__sflush_r+0x76>
 8010e7e:	682b      	ldr	r3, [r5, #0]
 8010e80:	b903      	cbnz	r3, 8010e84 <__sflush_r+0x78>
 8010e82:	6560      	str	r0, [r4, #84]	@ 0x54
 8010e84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010e86:	602f      	str	r7, [r5, #0]
 8010e88:	b1b9      	cbz	r1, 8010eba <__sflush_r+0xae>
 8010e8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010e8e:	4299      	cmp	r1, r3
 8010e90:	d002      	beq.n	8010e98 <__sflush_r+0x8c>
 8010e92:	4628      	mov	r0, r5
 8010e94:	f7ff fa96 	bl	80103c4 <_free_r>
 8010e98:	2300      	movs	r3, #0
 8010e9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8010e9c:	e00d      	b.n	8010eba <__sflush_r+0xae>
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	47b0      	blx	r6
 8010ea4:	4602      	mov	r2, r0
 8010ea6:	1c50      	adds	r0, r2, #1
 8010ea8:	d1c9      	bne.n	8010e3e <__sflush_r+0x32>
 8010eaa:	682b      	ldr	r3, [r5, #0]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d0c6      	beq.n	8010e3e <__sflush_r+0x32>
 8010eb0:	2b1d      	cmp	r3, #29
 8010eb2:	d001      	beq.n	8010eb8 <__sflush_r+0xac>
 8010eb4:	2b16      	cmp	r3, #22
 8010eb6:	d11d      	bne.n	8010ef4 <__sflush_r+0xe8>
 8010eb8:	602f      	str	r7, [r5, #0]
 8010eba:	2000      	movs	r0, #0
 8010ebc:	e021      	b.n	8010f02 <__sflush_r+0xf6>
 8010ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ec2:	b21b      	sxth	r3, r3
 8010ec4:	e01a      	b.n	8010efc <__sflush_r+0xf0>
 8010ec6:	690f      	ldr	r7, [r1, #16]
 8010ec8:	2f00      	cmp	r7, #0
 8010eca:	d0f6      	beq.n	8010eba <__sflush_r+0xae>
 8010ecc:	0793      	lsls	r3, r2, #30
 8010ece:	680e      	ldr	r6, [r1, #0]
 8010ed0:	600f      	str	r7, [r1, #0]
 8010ed2:	bf0c      	ite	eq
 8010ed4:	694b      	ldreq	r3, [r1, #20]
 8010ed6:	2300      	movne	r3, #0
 8010ed8:	eba6 0807 	sub.w	r8, r6, r7
 8010edc:	608b      	str	r3, [r1, #8]
 8010ede:	f1b8 0f00 	cmp.w	r8, #0
 8010ee2:	ddea      	ble.n	8010eba <__sflush_r+0xae>
 8010ee4:	4643      	mov	r3, r8
 8010ee6:	463a      	mov	r2, r7
 8010ee8:	6a21      	ldr	r1, [r4, #32]
 8010eea:	4628      	mov	r0, r5
 8010eec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010eee:	47b0      	blx	r6
 8010ef0:	2800      	cmp	r0, #0
 8010ef2:	dc08      	bgt.n	8010f06 <__sflush_r+0xfa>
 8010ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010efc:	f04f 30ff 	mov.w	r0, #4294967295
 8010f00:	81a3      	strh	r3, [r4, #12]
 8010f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f06:	4407      	add	r7, r0
 8010f08:	eba8 0800 	sub.w	r8, r8, r0
 8010f0c:	e7e7      	b.n	8010ede <__sflush_r+0xd2>
 8010f0e:	bf00      	nop
 8010f10:	dfbffffe 	.word	0xdfbffffe

08010f14 <_fflush_r>:
 8010f14:	b538      	push	{r3, r4, r5, lr}
 8010f16:	690b      	ldr	r3, [r1, #16]
 8010f18:	4605      	mov	r5, r0
 8010f1a:	460c      	mov	r4, r1
 8010f1c:	b913      	cbnz	r3, 8010f24 <_fflush_r+0x10>
 8010f1e:	2500      	movs	r5, #0
 8010f20:	4628      	mov	r0, r5
 8010f22:	bd38      	pop	{r3, r4, r5, pc}
 8010f24:	b118      	cbz	r0, 8010f2e <_fflush_r+0x1a>
 8010f26:	6a03      	ldr	r3, [r0, #32]
 8010f28:	b90b      	cbnz	r3, 8010f2e <_fflush_r+0x1a>
 8010f2a:	f7ff f8ff 	bl	801012c <__sinit>
 8010f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d0f3      	beq.n	8010f1e <_fflush_r+0xa>
 8010f36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010f38:	07d0      	lsls	r0, r2, #31
 8010f3a:	d404      	bmi.n	8010f46 <_fflush_r+0x32>
 8010f3c:	0599      	lsls	r1, r3, #22
 8010f3e:	d402      	bmi.n	8010f46 <_fflush_r+0x32>
 8010f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f42:	f7ff fa30 	bl	80103a6 <__retarget_lock_acquire_recursive>
 8010f46:	4628      	mov	r0, r5
 8010f48:	4621      	mov	r1, r4
 8010f4a:	f7ff ff5f 	bl	8010e0c <__sflush_r>
 8010f4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010f50:	4605      	mov	r5, r0
 8010f52:	07da      	lsls	r2, r3, #31
 8010f54:	d4e4      	bmi.n	8010f20 <_fflush_r+0xc>
 8010f56:	89a3      	ldrh	r3, [r4, #12]
 8010f58:	059b      	lsls	r3, r3, #22
 8010f5a:	d4e1      	bmi.n	8010f20 <_fflush_r+0xc>
 8010f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f5e:	f7ff fa23 	bl	80103a8 <__retarget_lock_release_recursive>
 8010f62:	e7dd      	b.n	8010f20 <_fflush_r+0xc>

08010f64 <__swbuf_r>:
 8010f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f66:	460e      	mov	r6, r1
 8010f68:	4614      	mov	r4, r2
 8010f6a:	4605      	mov	r5, r0
 8010f6c:	b118      	cbz	r0, 8010f76 <__swbuf_r+0x12>
 8010f6e:	6a03      	ldr	r3, [r0, #32]
 8010f70:	b90b      	cbnz	r3, 8010f76 <__swbuf_r+0x12>
 8010f72:	f7ff f8db 	bl	801012c <__sinit>
 8010f76:	69a3      	ldr	r3, [r4, #24]
 8010f78:	60a3      	str	r3, [r4, #8]
 8010f7a:	89a3      	ldrh	r3, [r4, #12]
 8010f7c:	071a      	lsls	r2, r3, #28
 8010f7e:	d501      	bpl.n	8010f84 <__swbuf_r+0x20>
 8010f80:	6923      	ldr	r3, [r4, #16]
 8010f82:	b943      	cbnz	r3, 8010f96 <__swbuf_r+0x32>
 8010f84:	4621      	mov	r1, r4
 8010f86:	4628      	mov	r0, r5
 8010f88:	f000 f82a 	bl	8010fe0 <__swsetup_r>
 8010f8c:	b118      	cbz	r0, 8010f96 <__swbuf_r+0x32>
 8010f8e:	f04f 37ff 	mov.w	r7, #4294967295
 8010f92:	4638      	mov	r0, r7
 8010f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f96:	6823      	ldr	r3, [r4, #0]
 8010f98:	b2f6      	uxtb	r6, r6
 8010f9a:	6922      	ldr	r2, [r4, #16]
 8010f9c:	4637      	mov	r7, r6
 8010f9e:	1a98      	subs	r0, r3, r2
 8010fa0:	6963      	ldr	r3, [r4, #20]
 8010fa2:	4283      	cmp	r3, r0
 8010fa4:	dc05      	bgt.n	8010fb2 <__swbuf_r+0x4e>
 8010fa6:	4621      	mov	r1, r4
 8010fa8:	4628      	mov	r0, r5
 8010faa:	f7ff ffb3 	bl	8010f14 <_fflush_r>
 8010fae:	2800      	cmp	r0, #0
 8010fb0:	d1ed      	bne.n	8010f8e <__swbuf_r+0x2a>
 8010fb2:	68a3      	ldr	r3, [r4, #8]
 8010fb4:	3b01      	subs	r3, #1
 8010fb6:	60a3      	str	r3, [r4, #8]
 8010fb8:	6823      	ldr	r3, [r4, #0]
 8010fba:	1c5a      	adds	r2, r3, #1
 8010fbc:	6022      	str	r2, [r4, #0]
 8010fbe:	701e      	strb	r6, [r3, #0]
 8010fc0:	1c43      	adds	r3, r0, #1
 8010fc2:	6962      	ldr	r2, [r4, #20]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d004      	beq.n	8010fd2 <__swbuf_r+0x6e>
 8010fc8:	89a3      	ldrh	r3, [r4, #12]
 8010fca:	07db      	lsls	r3, r3, #31
 8010fcc:	d5e1      	bpl.n	8010f92 <__swbuf_r+0x2e>
 8010fce:	2e0a      	cmp	r6, #10
 8010fd0:	d1df      	bne.n	8010f92 <__swbuf_r+0x2e>
 8010fd2:	4621      	mov	r1, r4
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	f7ff ff9d 	bl	8010f14 <_fflush_r>
 8010fda:	2800      	cmp	r0, #0
 8010fdc:	d0d9      	beq.n	8010f92 <__swbuf_r+0x2e>
 8010fde:	e7d6      	b.n	8010f8e <__swbuf_r+0x2a>

08010fe0 <__swsetup_r>:
 8010fe0:	b538      	push	{r3, r4, r5, lr}
 8010fe2:	4b29      	ldr	r3, [pc, #164]	@ (8011088 <__swsetup_r+0xa8>)
 8010fe4:	4605      	mov	r5, r0
 8010fe6:	460c      	mov	r4, r1
 8010fe8:	6818      	ldr	r0, [r3, #0]
 8010fea:	b118      	cbz	r0, 8010ff4 <__swsetup_r+0x14>
 8010fec:	6a03      	ldr	r3, [r0, #32]
 8010fee:	b90b      	cbnz	r3, 8010ff4 <__swsetup_r+0x14>
 8010ff0:	f7ff f89c 	bl	801012c <__sinit>
 8010ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ff8:	0719      	lsls	r1, r3, #28
 8010ffa:	d422      	bmi.n	8011042 <__swsetup_r+0x62>
 8010ffc:	06da      	lsls	r2, r3, #27
 8010ffe:	d407      	bmi.n	8011010 <__swsetup_r+0x30>
 8011000:	2209      	movs	r2, #9
 8011002:	602a      	str	r2, [r5, #0]
 8011004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011008:	f04f 30ff 	mov.w	r0, #4294967295
 801100c:	81a3      	strh	r3, [r4, #12]
 801100e:	e033      	b.n	8011078 <__swsetup_r+0x98>
 8011010:	0758      	lsls	r0, r3, #29
 8011012:	d512      	bpl.n	801103a <__swsetup_r+0x5a>
 8011014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011016:	b141      	cbz	r1, 801102a <__swsetup_r+0x4a>
 8011018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801101c:	4299      	cmp	r1, r3
 801101e:	d002      	beq.n	8011026 <__swsetup_r+0x46>
 8011020:	4628      	mov	r0, r5
 8011022:	f7ff f9cf 	bl	80103c4 <_free_r>
 8011026:	2300      	movs	r3, #0
 8011028:	6363      	str	r3, [r4, #52]	@ 0x34
 801102a:	89a3      	ldrh	r3, [r4, #12]
 801102c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011030:	81a3      	strh	r3, [r4, #12]
 8011032:	2300      	movs	r3, #0
 8011034:	6063      	str	r3, [r4, #4]
 8011036:	6923      	ldr	r3, [r4, #16]
 8011038:	6023      	str	r3, [r4, #0]
 801103a:	89a3      	ldrh	r3, [r4, #12]
 801103c:	f043 0308 	orr.w	r3, r3, #8
 8011040:	81a3      	strh	r3, [r4, #12]
 8011042:	6923      	ldr	r3, [r4, #16]
 8011044:	b94b      	cbnz	r3, 801105a <__swsetup_r+0x7a>
 8011046:	89a3      	ldrh	r3, [r4, #12]
 8011048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801104c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011050:	d003      	beq.n	801105a <__swsetup_r+0x7a>
 8011052:	4621      	mov	r1, r4
 8011054:	4628      	mov	r0, r5
 8011056:	f000 f8a4 	bl	80111a2 <__smakebuf_r>
 801105a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801105e:	f013 0201 	ands.w	r2, r3, #1
 8011062:	d00a      	beq.n	801107a <__swsetup_r+0x9a>
 8011064:	2200      	movs	r2, #0
 8011066:	60a2      	str	r2, [r4, #8]
 8011068:	6962      	ldr	r2, [r4, #20]
 801106a:	4252      	negs	r2, r2
 801106c:	61a2      	str	r2, [r4, #24]
 801106e:	6922      	ldr	r2, [r4, #16]
 8011070:	b942      	cbnz	r2, 8011084 <__swsetup_r+0xa4>
 8011072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011076:	d1c5      	bne.n	8011004 <__swsetup_r+0x24>
 8011078:	bd38      	pop	{r3, r4, r5, pc}
 801107a:	0799      	lsls	r1, r3, #30
 801107c:	bf58      	it	pl
 801107e:	6962      	ldrpl	r2, [r4, #20]
 8011080:	60a2      	str	r2, [r4, #8]
 8011082:	e7f4      	b.n	801106e <__swsetup_r+0x8e>
 8011084:	2000      	movs	r0, #0
 8011086:	e7f7      	b.n	8011078 <__swsetup_r+0x98>
 8011088:	20000130 	.word	0x20000130

0801108c <memmove>:
 801108c:	4288      	cmp	r0, r1
 801108e:	b510      	push	{r4, lr}
 8011090:	eb01 0402 	add.w	r4, r1, r2
 8011094:	d902      	bls.n	801109c <memmove+0x10>
 8011096:	4284      	cmp	r4, r0
 8011098:	4623      	mov	r3, r4
 801109a:	d807      	bhi.n	80110ac <memmove+0x20>
 801109c:	1e43      	subs	r3, r0, #1
 801109e:	42a1      	cmp	r1, r4
 80110a0:	d008      	beq.n	80110b4 <memmove+0x28>
 80110a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80110aa:	e7f8      	b.n	801109e <memmove+0x12>
 80110ac:	4402      	add	r2, r0
 80110ae:	4601      	mov	r1, r0
 80110b0:	428a      	cmp	r2, r1
 80110b2:	d100      	bne.n	80110b6 <memmove+0x2a>
 80110b4:	bd10      	pop	{r4, pc}
 80110b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80110ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80110be:	e7f7      	b.n	80110b0 <memmove+0x24>

080110c0 <_sbrk_r>:
 80110c0:	b538      	push	{r3, r4, r5, lr}
 80110c2:	2300      	movs	r3, #0
 80110c4:	4d05      	ldr	r5, [pc, #20]	@ (80110dc <_sbrk_r+0x1c>)
 80110c6:	4604      	mov	r4, r0
 80110c8:	4608      	mov	r0, r1
 80110ca:	602b      	str	r3, [r5, #0]
 80110cc:	f7f0 fc76 	bl	80019bc <_sbrk>
 80110d0:	1c43      	adds	r3, r0, #1
 80110d2:	d102      	bne.n	80110da <_sbrk_r+0x1a>
 80110d4:	682b      	ldr	r3, [r5, #0]
 80110d6:	b103      	cbz	r3, 80110da <_sbrk_r+0x1a>
 80110d8:	6023      	str	r3, [r4, #0]
 80110da:	bd38      	pop	{r3, r4, r5, pc}
 80110dc:	2000139c 	.word	0x2000139c

080110e0 <memchr>:
 80110e0:	b2c9      	uxtb	r1, r1
 80110e2:	4603      	mov	r3, r0
 80110e4:	4402      	add	r2, r0
 80110e6:	b510      	push	{r4, lr}
 80110e8:	4293      	cmp	r3, r2
 80110ea:	4618      	mov	r0, r3
 80110ec:	d101      	bne.n	80110f2 <memchr+0x12>
 80110ee:	2000      	movs	r0, #0
 80110f0:	e003      	b.n	80110fa <memchr+0x1a>
 80110f2:	7804      	ldrb	r4, [r0, #0]
 80110f4:	3301      	adds	r3, #1
 80110f6:	428c      	cmp	r4, r1
 80110f8:	d1f6      	bne.n	80110e8 <memchr+0x8>
 80110fa:	bd10      	pop	{r4, pc}

080110fc <_realloc_r>:
 80110fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011100:	4680      	mov	r8, r0
 8011102:	4615      	mov	r5, r2
 8011104:	460c      	mov	r4, r1
 8011106:	b921      	cbnz	r1, 8011112 <_realloc_r+0x16>
 8011108:	4611      	mov	r1, r2
 801110a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801110e:	f7ff b9c5 	b.w	801049c <_malloc_r>
 8011112:	b92a      	cbnz	r2, 8011120 <_realloc_r+0x24>
 8011114:	f7ff f956 	bl	80103c4 <_free_r>
 8011118:	2400      	movs	r4, #0
 801111a:	4620      	mov	r0, r4
 801111c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011120:	f000 f89e 	bl	8011260 <_malloc_usable_size_r>
 8011124:	4285      	cmp	r5, r0
 8011126:	4606      	mov	r6, r0
 8011128:	d802      	bhi.n	8011130 <_realloc_r+0x34>
 801112a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801112e:	d8f4      	bhi.n	801111a <_realloc_r+0x1e>
 8011130:	4629      	mov	r1, r5
 8011132:	4640      	mov	r0, r8
 8011134:	f7ff f9b2 	bl	801049c <_malloc_r>
 8011138:	4607      	mov	r7, r0
 801113a:	2800      	cmp	r0, #0
 801113c:	d0ec      	beq.n	8011118 <_realloc_r+0x1c>
 801113e:	42b5      	cmp	r5, r6
 8011140:	462a      	mov	r2, r5
 8011142:	4621      	mov	r1, r4
 8011144:	bf28      	it	cs
 8011146:	4632      	movcs	r2, r6
 8011148:	f7ff f92f 	bl	80103aa <memcpy>
 801114c:	4621      	mov	r1, r4
 801114e:	4640      	mov	r0, r8
 8011150:	463c      	mov	r4, r7
 8011152:	f7ff f937 	bl	80103c4 <_free_r>
 8011156:	e7e0      	b.n	801111a <_realloc_r+0x1e>

08011158 <__swhatbuf_r>:
 8011158:	b570      	push	{r4, r5, r6, lr}
 801115a:	460c      	mov	r4, r1
 801115c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011160:	b096      	sub	sp, #88	@ 0x58
 8011162:	4615      	mov	r5, r2
 8011164:	2900      	cmp	r1, #0
 8011166:	461e      	mov	r6, r3
 8011168:	da0c      	bge.n	8011184 <__swhatbuf_r+0x2c>
 801116a:	89a3      	ldrh	r3, [r4, #12]
 801116c:	2100      	movs	r1, #0
 801116e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011172:	bf14      	ite	ne
 8011174:	2340      	movne	r3, #64	@ 0x40
 8011176:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801117a:	2000      	movs	r0, #0
 801117c:	6031      	str	r1, [r6, #0]
 801117e:	602b      	str	r3, [r5, #0]
 8011180:	b016      	add	sp, #88	@ 0x58
 8011182:	bd70      	pop	{r4, r5, r6, pc}
 8011184:	466a      	mov	r2, sp
 8011186:	f000 f849 	bl	801121c <_fstat_r>
 801118a:	2800      	cmp	r0, #0
 801118c:	dbed      	blt.n	801116a <__swhatbuf_r+0x12>
 801118e:	9901      	ldr	r1, [sp, #4]
 8011190:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011194:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011198:	4259      	negs	r1, r3
 801119a:	4159      	adcs	r1, r3
 801119c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80111a0:	e7eb      	b.n	801117a <__swhatbuf_r+0x22>

080111a2 <__smakebuf_r>:
 80111a2:	898b      	ldrh	r3, [r1, #12]
 80111a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80111a6:	079d      	lsls	r5, r3, #30
 80111a8:	4606      	mov	r6, r0
 80111aa:	460c      	mov	r4, r1
 80111ac:	d507      	bpl.n	80111be <__smakebuf_r+0x1c>
 80111ae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80111b2:	6023      	str	r3, [r4, #0]
 80111b4:	6123      	str	r3, [r4, #16]
 80111b6:	2301      	movs	r3, #1
 80111b8:	6163      	str	r3, [r4, #20]
 80111ba:	b003      	add	sp, #12
 80111bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111be:	ab01      	add	r3, sp, #4
 80111c0:	466a      	mov	r2, sp
 80111c2:	f7ff ffc9 	bl	8011158 <__swhatbuf_r>
 80111c6:	9f00      	ldr	r7, [sp, #0]
 80111c8:	4605      	mov	r5, r0
 80111ca:	4630      	mov	r0, r6
 80111cc:	4639      	mov	r1, r7
 80111ce:	f7ff f965 	bl	801049c <_malloc_r>
 80111d2:	b948      	cbnz	r0, 80111e8 <__smakebuf_r+0x46>
 80111d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111d8:	059a      	lsls	r2, r3, #22
 80111da:	d4ee      	bmi.n	80111ba <__smakebuf_r+0x18>
 80111dc:	f023 0303 	bic.w	r3, r3, #3
 80111e0:	f043 0302 	orr.w	r3, r3, #2
 80111e4:	81a3      	strh	r3, [r4, #12]
 80111e6:	e7e2      	b.n	80111ae <__smakebuf_r+0xc>
 80111e8:	89a3      	ldrh	r3, [r4, #12]
 80111ea:	6020      	str	r0, [r4, #0]
 80111ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80111f0:	81a3      	strh	r3, [r4, #12]
 80111f2:	9b01      	ldr	r3, [sp, #4]
 80111f4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80111f8:	b15b      	cbz	r3, 8011212 <__smakebuf_r+0x70>
 80111fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111fe:	4630      	mov	r0, r6
 8011200:	f000 f81e 	bl	8011240 <_isatty_r>
 8011204:	b128      	cbz	r0, 8011212 <__smakebuf_r+0x70>
 8011206:	89a3      	ldrh	r3, [r4, #12]
 8011208:	f023 0303 	bic.w	r3, r3, #3
 801120c:	f043 0301 	orr.w	r3, r3, #1
 8011210:	81a3      	strh	r3, [r4, #12]
 8011212:	89a3      	ldrh	r3, [r4, #12]
 8011214:	431d      	orrs	r5, r3
 8011216:	81a5      	strh	r5, [r4, #12]
 8011218:	e7cf      	b.n	80111ba <__smakebuf_r+0x18>
	...

0801121c <_fstat_r>:
 801121c:	b538      	push	{r3, r4, r5, lr}
 801121e:	2300      	movs	r3, #0
 8011220:	4d06      	ldr	r5, [pc, #24]	@ (801123c <_fstat_r+0x20>)
 8011222:	4604      	mov	r4, r0
 8011224:	4608      	mov	r0, r1
 8011226:	4611      	mov	r1, r2
 8011228:	602b      	str	r3, [r5, #0]
 801122a:	f7f0 fb9e 	bl	800196a <_fstat>
 801122e:	1c43      	adds	r3, r0, #1
 8011230:	d102      	bne.n	8011238 <_fstat_r+0x1c>
 8011232:	682b      	ldr	r3, [r5, #0]
 8011234:	b103      	cbz	r3, 8011238 <_fstat_r+0x1c>
 8011236:	6023      	str	r3, [r4, #0]
 8011238:	bd38      	pop	{r3, r4, r5, pc}
 801123a:	bf00      	nop
 801123c:	2000139c 	.word	0x2000139c

08011240 <_isatty_r>:
 8011240:	b538      	push	{r3, r4, r5, lr}
 8011242:	2300      	movs	r3, #0
 8011244:	4d05      	ldr	r5, [pc, #20]	@ (801125c <_isatty_r+0x1c>)
 8011246:	4604      	mov	r4, r0
 8011248:	4608      	mov	r0, r1
 801124a:	602b      	str	r3, [r5, #0]
 801124c:	f7f0 fb9d 	bl	800198a <_isatty>
 8011250:	1c43      	adds	r3, r0, #1
 8011252:	d102      	bne.n	801125a <_isatty_r+0x1a>
 8011254:	682b      	ldr	r3, [r5, #0]
 8011256:	b103      	cbz	r3, 801125a <_isatty_r+0x1a>
 8011258:	6023      	str	r3, [r4, #0]
 801125a:	bd38      	pop	{r3, r4, r5, pc}
 801125c:	2000139c 	.word	0x2000139c

08011260 <_malloc_usable_size_r>:
 8011260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011264:	1f18      	subs	r0, r3, #4
 8011266:	2b00      	cmp	r3, #0
 8011268:	bfbc      	itt	lt
 801126a:	580b      	ldrlt	r3, [r1, r0]
 801126c:	18c0      	addlt	r0, r0, r3
 801126e:	4770      	bx	lr

08011270 <_init>:
 8011270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011272:	bf00      	nop
 8011274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011276:	bc08      	pop	{r3}
 8011278:	469e      	mov	lr, r3
 801127a:	4770      	bx	lr

0801127c <_fini>:
 801127c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801127e:	bf00      	nop
 8011280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011282:	bc08      	pop	{r3}
 8011284:	469e      	mov	lr, r3
 8011286:	4770      	bx	lr
