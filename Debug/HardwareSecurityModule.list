
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000135c4  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fa8  08013810  08013810  00014810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080147b8  080147b8  00016180  2**0
                  CONTENTS
  4 .ARM          00000008  080147b8  080147b8  000157b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080147c0  080147c0  00016180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080147c0  080147c0  000157c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080147c4  080147c4  000157c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  080147c8  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000111e0  20000180  08014948  00016180  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20011360  08014948  00016360  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00016180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028feb  00000000  00000000  000161b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c12  00000000  00000000  0003f1a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  00044db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017cc  00000000  00000000  00046cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039fd8  00000000  00000000  000484bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030e15  00000000  00000000  00082494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014c35d  00000000  00000000  000b32a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ff606  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c64  00000000  00000000  001ff64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  002082b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	080137f8 	.word	0x080137f8

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	080137f8 	.word	0x080137f8

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <GetCommandName>:

#include <stdio.h>
#include <stdint.h>

static const char* GetCommandName(uint8_t cmd)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    switch (cmd)
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	2b0e      	cmp	r3, #14
 80005b4:	d832      	bhi.n	800061c <GetCommandName+0x78>
 80005b6:	a201      	add	r2, pc, #4	@ (adr r2, 80005bc <GetCommandName+0x18>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005f9 	.word	0x080005f9
 80005c0:	080005fd 	.word	0x080005fd
 80005c4:	08000601 	.word	0x08000601
 80005c8:	08000605 	.word	0x08000605
 80005cc:	08000609 	.word	0x08000609
 80005d0:	0800060d 	.word	0x0800060d
 80005d4:	08000611 	.word	0x08000611
 80005d8:	08000615 	.word	0x08000615
 80005dc:	0800061d 	.word	0x0800061d
 80005e0:	0800061d 	.word	0x0800061d
 80005e4:	0800061d 	.word	0x0800061d
 80005e8:	0800061d 	.word	0x0800061d
 80005ec:	0800061d 	.word	0x0800061d
 80005f0:	0800061d 	.word	0x0800061d
 80005f4:	08000619 	.word	0x08000619
    {
        case CMD_ENCRYPT:   	return "Encryption Operation";
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <GetCommandName+0x88>)
 80005fa:	e010      	b.n	800061e <GetCommandName+0x7a>
        case CMD_DECRYPT:   	return "Decryption Operation";
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <GetCommandName+0x8c>)
 80005fe:	e00e      	b.n	800061e <GetCommandName+0x7a>
        case CMD_HASH:      	return "Hashing Operation";
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <GetCommandName+0x90>)
 8000602:	e00c      	b.n	800061e <GetCommandName+0x7a>
        case CMD_RANDOM:   		return "RNG Operation";
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <GetCommandName+0x94>)
 8000606:	e00a      	b.n	800061e <GetCommandName+0x7a>
        case CMD_OTP:   		return "OTP Operation";
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <GetCommandName+0x98>)
 800060a:	e008      	b.n	800061e <GetCommandName+0x7a>
        case CMD_KEY_GEN:   	return "Key Generation Operation";
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <GetCommandName+0x9c>)
 800060e:	e006      	b.n	800061e <GetCommandName+0x7a>
        case CMD_KEY_RETRIEVE:  return "Key Retrieve Operation";
 8000610:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <GetCommandName+0xa0>)
 8000612:	e004      	b.n	800061e <GetCommandName+0x7a>
        case CMD_KEY_ERASE:   	return "Key Erase Operation";
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <GetCommandName+0xa4>)
 8000616:	e002      	b.n	800061e <GetCommandName+0x7a>
        case CMD_PING:   		return "Device Ping Operation";
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <GetCommandName+0xa8>)
 800061a:	e000      	b.n	800061e <GetCommandName+0x7a>
        default:            	return "Unknown Command";
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <GetCommandName+0xac>)
    }
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	08013810 	.word	0x08013810
 8000630:	08013828 	.word	0x08013828
 8000634:	08013840 	.word	0x08013840
 8000638:	08013854 	.word	0x08013854
 800063c:	08013864 	.word	0x08013864
 8000640:	08013874 	.word	0x08013874
 8000644:	08013890 	.word	0x08013890
 8000648:	080138a8 	.word	0x080138a8
 800064c:	080138bc 	.word	0x080138bc
 8000650:	080138d4 	.word	0x080138d4

08000654 <GetOptionName>:

static const char* GetOptionName(uint8_t option)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
    switch (option)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	3b01      	subs	r3, #1
 8000662:	2b3d      	cmp	r3, #61	@ 0x3d
 8000664:	f200 80b0 	bhi.w	80007c8 <GetOptionName+0x174>
 8000668:	a201      	add	r2, pc, #4	@ (adr r2, 8000670 <GetOptionName+0x1c>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	08000769 	.word	0x08000769
 8000674:	0800076d 	.word	0x0800076d
 8000678:	080007c9 	.word	0x080007c9
 800067c:	080007c9 	.word	0x080007c9
 8000680:	080007c9 	.word	0x080007c9
 8000684:	080007c9 	.word	0x080007c9
 8000688:	080007c9 	.word	0x080007c9
 800068c:	080007c9 	.word	0x080007c9
 8000690:	080007c9 	.word	0x080007c9
 8000694:	080007c9 	.word	0x080007c9
 8000698:	080007c9 	.word	0x080007c9
 800069c:	080007c9 	.word	0x080007c9
 80006a0:	080007c9 	.word	0x080007c9
 80006a4:	080007c9 	.word	0x080007c9
 80006a8:	080007c9 	.word	0x080007c9
 80006ac:	080007c9 	.word	0x080007c9
 80006b0:	08000771 	.word	0x08000771
 80006b4:	08000775 	.word	0x08000775
 80006b8:	080007c9 	.word	0x080007c9
 80006bc:	080007c9 	.word	0x080007c9
 80006c0:	080007c9 	.word	0x080007c9
 80006c4:	080007c9 	.word	0x080007c9
 80006c8:	080007c9 	.word	0x080007c9
 80006cc:	080007c9 	.word	0x080007c9
 80006d0:	080007c9 	.word	0x080007c9
 80006d4:	080007c9 	.word	0x080007c9
 80006d8:	080007c9 	.word	0x080007c9
 80006dc:	080007c9 	.word	0x080007c9
 80006e0:	080007c9 	.word	0x080007c9
 80006e4:	080007c9 	.word	0x080007c9
 80006e8:	080007c9 	.word	0x080007c9
 80006ec:	080007c9 	.word	0x080007c9
 80006f0:	08000779 	.word	0x08000779
 80006f4:	0800077d 	.word	0x0800077d
 80006f8:	08000781 	.word	0x08000781
 80006fc:	08000785 	.word	0x08000785
 8000700:	08000789 	.word	0x08000789
 8000704:	0800078d 	.word	0x0800078d
 8000708:	080007c9 	.word	0x080007c9
 800070c:	080007c9 	.word	0x080007c9
 8000710:	080007c9 	.word	0x080007c9
 8000714:	080007c9 	.word	0x080007c9
 8000718:	080007c9 	.word	0x080007c9
 800071c:	080007c9 	.word	0x080007c9
 8000720:	080007c9 	.word	0x080007c9
 8000724:	080007c9 	.word	0x080007c9
 8000728:	080007c9 	.word	0x080007c9
 800072c:	080007c9 	.word	0x080007c9
 8000730:	08000791 	.word	0x08000791
 8000734:	08000795 	.word	0x08000795
 8000738:	08000799 	.word	0x08000799
 800073c:	080007a1 	.word	0x080007a1
 8000740:	080007a9 	.word	0x080007a9
 8000744:	080007b1 	.word	0x080007b1
 8000748:	080007b5 	.word	0x080007b5
 800074c:	080007b9 	.word	0x080007b9
 8000750:	080007bd 	.word	0x080007bd
 8000754:	080007c1 	.word	0x080007c1
 8000758:	080007c5 	.word	0x080007c5
 800075c:	0800079d 	.word	0x0800079d
 8000760:	080007a5 	.word	0x080007a5
 8000764:	080007ad 	.word	0x080007ad
    {
    	case OPTION_ENCRYP_KEY128:	return "128-bit Encryption";
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <GetOptionName+0x184>)
 800076a:	e02e      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_ENCRYP_KEY256:	return "256-bit Encryption";
 800076c:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <GetOptionName+0x188>)
 800076e:	e02c      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_DECRYP_KEY128:	return "128-bit Decryption";
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <GetOptionName+0x18c>)
 8000772:	e02a      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_DECRYP_KEY256:	return "256-bit Decryption";
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <GetOptionName+0x190>)
 8000776:	e028      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_HASH_SHA224:	return "SHA224 Hashing Algorithm";
 8000778:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <GetOptionName+0x194>)
 800077a:	e026      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_HASH_SHA256:	return "SHA256 Hashing Algorithm";
 800077c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <GetOptionName+0x198>)
 800077e:	e024      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_HASH_SHA384:	return "SHA384 Hashing Algorithm";
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <GetOptionName+0x19c>)
 8000782:	e022      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_HASH_SHA512:	return "SHA512 Hashing Algorithm";
 8000784:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <GetOptionName+0x1a0>)
 8000786:	e020      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_HMAC_SHA224:	return "SHA224 HMAC Algorithm";
 8000788:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <GetOptionName+0x1a4>)
 800078a:	e01e      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_HMAC_SHA256:	return "SHA256 HMAC Algorithm";
 800078c:	4b1b      	ldr	r3, [pc, #108]	@ (80007fc <GetOptionName+0x1a8>)
 800078e:	e01c      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_RNG_0004:		return "4-byte Random Number Generation";
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <GetOptionName+0x1ac>)
 8000792:	e01a      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_RNG_0008:		return "8-byte Random Number Generation";
 8000794:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <GetOptionName+0x1b0>)
 8000796:	e018      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_RNG_0016:		return "16-byte Random Number Generation";
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <GetOptionName+0x1b4>)
 800079a:	e016      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_RNG_0024:		return "24-byte Random Number Generation";
 800079c:	4b1b      	ldr	r3, [pc, #108]	@ (800080c <GetOptionName+0x1b8>)
 800079e:	e014      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_RNG_0032:		return "32-byte Random Number Generation";
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <GetOptionName+0x1bc>)
 80007a2:	e012      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_RNG_0048:		return "48-byte Random Number Generation";
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <GetOptionName+0x1c0>)
 80007a6:	e010      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_RNG_0064:		return "64-byte Random Number Generation";
 80007a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000818 <GetOptionName+0x1c4>)
 80007aa:	e00e      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_RNG_0066:		return "66-byte Random Number Generation";
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <GetOptionName+0x1c8>)
 80007ae:	e00c      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_RNG_0128:		return "128-byte Random Number Generation";
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <GetOptionName+0x1cc>)
 80007b2:	e00a      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_RNG_0256:		return "256-byte Random Number Generation";
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <GetOptionName+0x1d0>)
 80007b6:	e008      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_RNG_0512:		return "512-byte Random Number Generation";
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <GetOptionName+0x1d4>)
 80007ba:	e006      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_RNG_1024:		return "1024-byte Random Number Generation";
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <GetOptionName+0x1d8>)
 80007be:	e004      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_RNG_2048:		return "2048-byte Random Number Generation";
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <GetOptionName+0x1dc>)
 80007c2:	e002      	b.n	80007ca <GetOptionName+0x176>
		case OPTION_RNG_4096:		return "4096-byte Random Number Generation";
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <GetOptionName+0x1e0>)
 80007c6:	e000      	b.n	80007ca <GetOptionName+0x176>
		default:					return "Unknown Command"; 	break;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <GetOptionName+0x1e4>)
    }
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	080138e4 	.word	0x080138e4
 80007dc:	080138f8 	.word	0x080138f8
 80007e0:	0801390c 	.word	0x0801390c
 80007e4:	08013920 	.word	0x08013920
 80007e8:	08013934 	.word	0x08013934
 80007ec:	08013950 	.word	0x08013950
 80007f0:	0801396c 	.word	0x0801396c
 80007f4:	08013988 	.word	0x08013988
 80007f8:	080139a4 	.word	0x080139a4
 80007fc:	080139bc 	.word	0x080139bc
 8000800:	080139d4 	.word	0x080139d4
 8000804:	080139f4 	.word	0x080139f4
 8000808:	08013a14 	.word	0x08013a14
 800080c:	08013a38 	.word	0x08013a38
 8000810:	08013a5c 	.word	0x08013a5c
 8000814:	08013a80 	.word	0x08013a80
 8000818:	08013aa4 	.word	0x08013aa4
 800081c:	08013ac8 	.word	0x08013ac8
 8000820:	08013aec 	.word	0x08013aec
 8000824:	08013b10 	.word	0x08013b10
 8000828:	08013b34 	.word	0x08013b34
 800082c:	08013b58 	.word	0x08013b58
 8000830:	08013b7c 	.word	0x08013b7c
 8000834:	08013ba0 	.word	0x08013ba0
 8000838:	080138d4 	.word	0x080138d4

0800083c <LogParsedPacket>:

static void LogParsedPacket(const ParsedPacket_t* packet)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	@ 0x50
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    if (!packet)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d103      	bne.n	8000852 <LogParsedPacket+0x16>
    {
        log_error("ParsedPacket is NULL");
 800084a:	4841      	ldr	r0, [pc, #260]	@ (8000950 <LogParsedPacket+0x114>)
 800084c:	f001 f83c 	bl	80018c8 <log_error>
        return;
 8000850:	e07b      	b.n	800094a <LogParsedPacket+0x10e>
    }

    log_debug("PARSED PACKET:");
 8000852:	4840      	ldr	r0, [pc, #256]	@ (8000954 <LogParsedPacket+0x118>)
 8000854:	f000 ffea 	bl	800182c <log_debug>
    log_debug("TXID       : %u", packet->transactionID);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	483e      	ldr	r0, [pc, #248]	@ (8000958 <LogParsedPacket+0x11c>)
 8000860:	f000 ffe4 	bl	800182c <log_debug>
    log_debug("CMD        : %s", GetCommandName(packet->cmd));
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	791b      	ldrb	r3, [r3, #4]
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fe9b 	bl	80005a4 <GetCommandName>
 800086e:	4603      	mov	r3, r0
 8000870:	4619      	mov	r1, r3
 8000872:	483a      	ldr	r0, [pc, #232]	@ (800095c <LogParsedPacket+0x120>)
 8000874:	f000 ffda 	bl	800182c <log_debug>
    log_debug("OPTION     : %s", GetOptionName(packet->option));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	795b      	ldrb	r3, [r3, #5]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fee9 	bl	8000654 <GetOptionName>
 8000882:	4603      	mov	r3, r0
 8000884:	4619      	mov	r1, r3
 8000886:	4836      	ldr	r0, [pc, #216]	@ (8000960 <LogParsedPacket+0x124>)
 8000888:	f000 ffd0 	bl	800182c <log_debug>
    log_debug("INPUT SIZE : %hu bytes", packet->inputSize);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	88db      	ldrh	r3, [r3, #6]
 8000890:	4619      	mov	r1, r3
 8000892:	4834      	ldr	r0, [pc, #208]	@ (8000964 <LogParsedPacket+0x128>)
 8000894:	f000 ffca 	bl	800182c <log_debug>

    const uint8_t* data = packet->inputData;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3308      	adds	r3, #8
 800089c:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->inputSize;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	88db      	ldrh	r3, [r3, #6]
 80008a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80008aa:	e049      	b.n	8000940 <LogParsedPacket+0x104>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	222d      	movs	r2, #45	@ 0x2d
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f011 ffbf 	bl	801283c <memset>
        char* ptr = line;
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80008ca:	e017      	b.n	80008fc <LogParsedPacket+0xc0>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 80008cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80008d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008d4:	4413      	add	r3, r2
 80008d6:	461a      	mov	r2, r3
 80008d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	4921      	ldr	r1, [pc, #132]	@ (8000968 <LogParsedPacket+0x12c>)
 80008e2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008e4:	f011 ff0e 	bl	8012704 <siprintf>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80008ee:	4413      	add	r3, r2
 80008f0:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80008f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008f6:	3301      	adds	r3, #1
 80008f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80008fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d807      	bhi.n	8000914 <LogParsedPacket+0xd8>
 8000904:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000908:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800090c:	441a      	add	r2, r3
 800090e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000910:	429a      	cmp	r2, r3
 8000912:	dbdb      	blt.n	80008cc <LogParsedPacket+0x90>
        }

        if (i == 0)
 8000914:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000918:	2b00      	cmp	r3, #0
 800091a:	d106      	bne.n	800092a <LogParsedPacket+0xee>
        {
        	log_debug("INPUT DATA : %s", line);
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	4619      	mov	r1, r3
 8000922:	4812      	ldr	r0, [pc, #72]	@ (800096c <LogParsedPacket+0x130>)
 8000924:	f000 ff82 	bl	800182c <log_debug>
 8000928:	e005      	b.n	8000936 <LogParsedPacket+0xfa>
        }
        else
        {
        	log_debug("             %s", line);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4619      	mov	r1, r3
 8000930:	480f      	ldr	r0, [pc, #60]	@ (8000970 <LogParsedPacket+0x134>)
 8000932:	f000 ff7b 	bl	800182c <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 8000936:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800093a:	3310      	adds	r3, #16
 800093c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000940:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000944:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000946:	429a      	cmp	r2, r3
 8000948:	d3b0      	bcc.n	80008ac <LogParsedPacket+0x70>
        }
    }
    // log_debug("EOD FLAG    : %04X", packet->out_eod_flag);
}
 800094a:	3750      	adds	r7, #80	@ 0x50
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	08013bc4 	.word	0x08013bc4
 8000954:	08013bdc 	.word	0x08013bdc
 8000958:	08013bec 	.word	0x08013bec
 800095c:	08013bfc 	.word	0x08013bfc
 8000960:	08013c0c 	.word	0x08013c0c
 8000964:	08013c1c 	.word	0x08013c1c
 8000968:	08013c34 	.word	0x08013c34
 800096c:	08013c3c 	.word	0x08013c3c
 8000970:	08013c4c 	.word	0x08013c4c

08000974 <LogResponsePacket>:

static void LogResponsePacket(const ResponsePacket_t* packet)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	@ 0x50
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
    if (!packet)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d103      	bne.n	800098a <LogResponsePacket+0x16>
    {
        log_error("ResponsePacket is NULL");
 8000982:	483b      	ldr	r0, [pc, #236]	@ (8000a70 <LogResponsePacket+0xfc>)
 8000984:	f000 ffa0 	bl	80018c8 <log_error>
        return;
 8000988:	e06f      	b.n	8000a6a <LogResponsePacket+0xf6>
    }

    log_debug("RESPONSE PACKET");
 800098a:	483a      	ldr	r0, [pc, #232]	@ (8000a74 <LogResponsePacket+0x100>)
 800098c:	f000 ff4e 	bl	800182c <log_debug>
    log_debug("TXID        : %u", packet->transactionID);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	4838      	ldr	r0, [pc, #224]	@ (8000a78 <LogResponsePacket+0x104>)
 8000998:	f000 ff48 	bl	800182c <log_debug>
    log_debug("OUTPUT SIZE : %u bytes", packet->outputSize);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	889b      	ldrh	r3, [r3, #4]
 80009a0:	4619      	mov	r1, r3
 80009a2:	4836      	ldr	r0, [pc, #216]	@ (8000a7c <LogResponsePacket+0x108>)
 80009a4:	f000 ff42 	bl	800182c <log_debug>

    const uint8_t* data = packet->outputData;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3306      	adds	r3, #6
 80009ac:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->outputSize;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	889b      	ldrh	r3, [r3, #4]
 80009b2:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 80009b4:	2300      	movs	r3, #0
 80009b6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80009ba:	e049      	b.n	8000a50 <LogResponsePacket+0xdc>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	222d      	movs	r2, #45	@ 0x2d
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f011 ff37 	bl	801283c <memset>
        char* ptr = line;
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80009da:	e017      	b.n	8000a0c <LogResponsePacket+0x98>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 80009dc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80009e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009e4:	4413      	add	r3, r2
 80009e6:	461a      	mov	r2, r3
 80009e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009ea:	4413      	add	r3, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	4923      	ldr	r1, [pc, #140]	@ (8000a80 <LogResponsePacket+0x10c>)
 80009f2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80009f4:	f011 fe86 	bl	8012704 <siprintf>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80009fe:	4413      	add	r3, r2
 8000a00:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 8000a02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a06:	3301      	adds	r3, #1
 8000a08:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000a0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a10:	2b0f      	cmp	r3, #15
 8000a12:	d807      	bhi.n	8000a24 <LogResponsePacket+0xb0>
 8000a14:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000a18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a1c:	441a      	add	r2, r3
 8000a1e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dbdb      	blt.n	80009dc <LogResponsePacket+0x68>
        }

        if (i == 0)
 8000a24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d106      	bne.n	8000a3a <LogResponsePacket+0xc6>
            log_debug("OUTPUT DATA : %s", line);
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	4619      	mov	r1, r3
 8000a32:	4814      	ldr	r0, [pc, #80]	@ (8000a84 <LogResponsePacket+0x110>)
 8000a34:	f000 fefa 	bl	800182c <log_debug>
 8000a38:	e005      	b.n	8000a46 <LogResponsePacket+0xd2>
        else
            log_debug("              %s", line);
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4811      	ldr	r0, [pc, #68]	@ (8000a88 <LogResponsePacket+0x114>)
 8000a42:	f000 fef3 	bl	800182c <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 8000a46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a4a:	3310      	adds	r3, #16
 8000a4c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000a50:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000a54:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d3b0      	bcc.n	80009bc <LogResponsePacket+0x48>
    }
    log_debug("EOD FLAG    : %04X", packet->out_eod_flag);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	4619      	mov	r1, r3
 8000a64:	4809      	ldr	r0, [pc, #36]	@ (8000a8c <LogResponsePacket+0x118>)
 8000a66:	f000 fee1 	bl	800182c <log_debug>
}
 8000a6a:	3750      	adds	r7, #80	@ 0x50
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	08013c5c 	.word	0x08013c5c
 8000a74:	08013c74 	.word	0x08013c74
 8000a78:	08013c84 	.word	0x08013c84
 8000a7c:	08013c98 	.word	0x08013c98
 8000a80:	08013c34 	.word	0x08013c34
 8000a84:	08013cb0 	.word	0x08013cb0
 8000a88:	08013cc4 	.word	0x08013cc4
 8000a8c:	08013cd8 	.word	0x08013cd8

08000a90 <LogTransmitBuffer>:

static void LogTransmitBuffer(const uint8_t* usb_tx_buffer, uint32_t usb_tx_index)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b092      	sub	sp, #72	@ 0x48
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
    if (!usb_tx_buffer || usb_tx_index == 0)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <LogTransmitBuffer+0x16>
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d103      	bne.n	8000aae <LogTransmitBuffer+0x1e>
    {
        log_debug("USB TX buffer is empty or NULL.");
 8000aa6:	4826      	ldr	r0, [pc, #152]	@ (8000b40 <LogTransmitBuffer+0xb0>)
 8000aa8:	f000 fec0 	bl	800182c <log_debug>
        return;
 8000aac:	e045      	b.n	8000b3a <LogTransmitBuffer+0xaa>
    }


    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ab2:	e03e      	b.n	8000b32 <LogTransmitBuffer+0xa2>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	222d      	movs	r2, #45	@ 0x2d
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f011 febb 	bl	801283c <memset>
        char* ptr = line;
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	643b      	str	r3, [r7, #64]	@ 0x40

        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000acc:	2300      	movs	r3, #0
 8000ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ad0:	e012      	b.n	8000af8 <LogTransmitBuffer+0x68>
        {
            ptr += sprintf(ptr, "%02X ", usb_tx_buffer[i + j]);
 8000ad2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ad6:	4413      	add	r3, r2
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	4413      	add	r3, r2
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4918      	ldr	r1, [pc, #96]	@ (8000b44 <LogTransmitBuffer+0xb4>)
 8000ae2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000ae4:	f011 fe0e 	bl	8012704 <siprintf>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	461a      	mov	r2, r3
 8000aec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000aee:	4413      	add	r3, r2
 8000af0:	643b      	str	r3, [r7, #64]	@ 0x40
        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000af4:	3301      	adds	r3, #1
 8000af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	d805      	bhi.n	8000b0a <LogTransmitBuffer+0x7a>
 8000afe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b02:	4413      	add	r3, r2
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d8e3      	bhi.n	8000ad2 <LogTransmitBuffer+0x42>
        }

        if (i == 0)
 8000b0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d107      	bne.n	8000b20 <LogTransmitBuffer+0x90>
            log_debug("USB Tx [%lu bytes]: %s", usb_tx_index, line);
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	461a      	mov	r2, r3
 8000b16:	6839      	ldr	r1, [r7, #0]
 8000b18:	480b      	ldr	r0, [pc, #44]	@ (8000b48 <LogTransmitBuffer+0xb8>)
 8000b1a:	f000 fe87 	bl	800182c <log_debug>
 8000b1e:	e005      	b.n	8000b2c <LogTransmitBuffer+0x9c>
        else
            log_debug("                   %s", line);  // 17-character indent to align with line 1
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	4619      	mov	r1, r3
 8000b26:	4809      	ldr	r0, [pc, #36]	@ (8000b4c <LogTransmitBuffer+0xbc>)
 8000b28:	f000 fe80 	bl	800182c <log_debug>
    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b2e:	3310      	adds	r3, #16
 8000b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d3bc      	bcc.n	8000ab4 <LogTransmitBuffer+0x24>
    }
}
 8000b3a:	3748      	adds	r7, #72	@ 0x48
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	08013cec 	.word	0x08013cec
 8000b44:	08013c34 	.word	0x08013c34
 8000b48:	08013d0c 	.word	0x08013d0c
 8000b4c:	08013d24 	.word	0x08013d24

08000b50 <HSMManager_Init>:

void HSMManager_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

  log_init(LOG_LEVEL_DEBUG);
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 fe0d 	bl	8001774 <log_init>
  log_info("HSM Initialized.");
 8000b5a:	4834      	ldr	r0, [pc, #208]	@ (8000c2c <HSMManager_Init+0xdc>)
 8000b5c:	f000 fe80 	bl	8001860 <log_info>
  HAL_Delay(1000);
 8000b60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b64:	f002 fb18 	bl	8003198 <HAL_Delay>
  log_info("Turning LED ON.");
 8000b68:	4831      	ldr	r0, [pc, #196]	@ (8000c30 <HSMManager_Init+0xe0>)
 8000b6a:	f000 fe79 	bl	8001860 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f002 f8b0 	bl	8002cd4 <BSP_LED_Toggle>
 8000b74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b78:	f002 fb0e 	bl	8003198 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f002 f8a9 	bl	8002cd4 <BSP_LED_Toggle>
 8000b82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b86:	f002 fb07 	bl	8003198 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f002 f8a2 	bl	8002cd4 <BSP_LED_Toggle>
 8000b90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b94:	f002 fb00 	bl	8003198 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000b98:	4826      	ldr	r0, [pc, #152]	@ (8000c34 <HSMManager_Init+0xe4>)
 8000b9a:	f000 fe61 	bl	8001860 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f002 f898 	bl	8002cd4 <BSP_LED_Toggle>
 8000ba4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ba8:	f002 faf6 	bl	8003198 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000bac:	2002      	movs	r0, #2
 8000bae:	f002 f891 	bl	8002cd4 <BSP_LED_Toggle>
 8000bb2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bb6:	f002 faef 	bl	8003198 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f002 f88a 	bl	8002cd4 <BSP_LED_Toggle>
 8000bc0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc4:	f002 fae8 	bl	8003198 <HAL_Delay>
  log_info("Turning LED ON.");
 8000bc8:	4819      	ldr	r0, [pc, #100]	@ (8000c30 <HSMManager_Init+0xe0>)
 8000bca:	f000 fe49 	bl	8001860 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f002 f880 	bl	8002cd4 <BSP_LED_Toggle>
 8000bd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bd8:	f002 fade 	bl	8003198 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000bdc:	2002      	movs	r0, #2
 8000bde:	f002 f879 	bl	8002cd4 <BSP_LED_Toggle>
 8000be2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000be6:	f002 fad7 	bl	8003198 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f002 f872 	bl	8002cd4 <BSP_LED_Toggle>
 8000bf0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bf4:	f002 fad0 	bl	8003198 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000bf8:	480e      	ldr	r0, [pc, #56]	@ (8000c34 <HSMManager_Init+0xe4>)
 8000bfa:	f000 fe31 	bl	8001860 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f002 f868 	bl	8002cd4 <BSP_LED_Toggle>
 8000c04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c08:	f002 fac6 	bl	8003198 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	f002 f861 	bl	8002cd4 <BSP_LED_Toggle>
 8000c12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c16:	f002 fabf 	bl	8003198 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f002 f85a 	bl	8002cd4 <BSP_LED_Toggle>
 8000c20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c24:	f002 fab8 	bl	8003198 <HAL_Delay>
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	08013d3c 	.word	0x08013d3c
 8000c30:	08013d50 	.word	0x08013d50
 8000c34:	08013d60 	.word	0x08013d60

08000c38 <HSMManager_ProcessCommand>:


OperationStatus_t HSMManager_ProcessCommand(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	f5ad 3d90 	sub.w	sp, sp, #73728	@ 0x12000
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
	 if (usb_rx_complete)
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <HSMManager_ProcessCommand+0x12c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 8084 	beq.w	8000d56 <HSMManager_ProcessCommand+0x11e>
	 {
		 ParsedPacket_t request;
		 ResponsePacket_t response;
		 uint8_t usb_tx_buffer[MAX_USB_DATA_SIZE];
		 uint16_t usb_tx_index;
		 ParseStatus_t status = PacketParser_Parse(usb_rx_buffer, usb_rx_index, &request);
 8000c4e:	4b46      	ldr	r3, [pc, #280]	@ (8000d68 <HSMManager_ProcessCommand+0x130>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	b299      	uxth	r1, r3
 8000c54:	f107 0318 	add.w	r3, r7, #24
 8000c58:	3b18      	subs	r3, #24
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4843      	ldr	r0, [pc, #268]	@ (8000d6c <HSMManager_ProcessCommand+0x134>)
 8000c5e:	f000 fca9 	bl	80015b4 <PacketParser_Parse>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000c68:	f102 0217 	add.w	r2, r2, #23
 8000c6c:	7013      	strb	r3, [r2, #0]

		 if (status == PARSE_SUCCESS)
 8000c6e:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000c72:	f103 0317 	add.w	r3, r3, #23
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d163      	bne.n	8000d44 <HSMManager_ProcessCommand+0x10c>
		 {
			 log_debug("Packet Parsed Successfully:");
 8000c7c:	483c      	ldr	r0, [pc, #240]	@ (8000d70 <HSMManager_ProcessCommand+0x138>)
 8000c7e:	f000 fdd5 	bl	800182c <log_debug>
			 LogParsedPacket(&request);
 8000c82:	f107 0318 	add.w	r3, r7, #24
 8000c86:	3b18      	subs	r3, #24
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fdd7 	bl	800083c <LogParsedPacket>
			 OperationDispatcher_Dispatch(&request, &response);
 8000c8e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000c92:	f102 0218 	add.w	r2, r2, #24
 8000c96:	3a10      	subs	r2, #16
 8000c98:	f107 0318 	add.w	r3, r7, #24
 8000c9c:	3b18      	subs	r3, #24
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f869 	bl	8000d78 <OperationDispatcher_Dispatch>
			 response.transactionID = request.transactionID;
 8000ca6:	f107 0318 	add.w	r3, r7, #24
 8000caa:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000cae:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000cb2:	f102 0218 	add.w	r2, r2, #24
 8000cb6:	f842 3c10 	str.w	r3, [r2, #-16]
			 LogResponsePacket(&response);
 8000cba:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cbe:	f103 0318 	add.w	r3, r3, #24
 8000cc2:	3b10      	subs	r3, #16
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fe55 	bl	8000974 <LogResponsePacket>
			 usb_tx_index = response.outputSize + 10;
 8000cca:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cce:	f103 0318 	add.w	r3, r3, #24
 8000cd2:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000cd6:	330a      	adds	r3, #10
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000cde:	f102 0214 	add.w	r2, r2, #20
 8000ce2:	8013      	strh	r3, [r2, #0]
			 PacketBuilder_Build(&response, usb_tx_buffer, &usb_tx_index);
 8000ce4:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000ce8:	f102 0214 	add.w	r2, r2, #20
 8000cec:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8000cf0:	f101 0118 	add.w	r1, r1, #24
 8000cf4:	3904      	subs	r1, #4
 8000cf6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cfa:	f103 0318 	add.w	r3, r3, #24
 8000cfe:	3b10      	subs	r3, #16
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 fba7 	bl	8001454 <PacketBuilder_Build>
			 LogTransmitBuffer(usb_tx_buffer, usb_tx_index);
 8000d06:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000d0a:	f103 0314 	add.w	r3, r3, #20
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000d16:	f103 0318 	add.w	r3, r3, #24
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff feb6 	bl	8000a90 <LogTransmitBuffer>
			 USB_Transmit(usb_tx_buffer, usb_tx_index);
 8000d24:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000d28:	f103 0314 	add.w	r3, r3, #20
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000d34:	f103 0318 	add.w	r3, r3, #24
 8000d38:	3b04      	subs	r3, #4
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f00f fc3f 	bl	80105c0 <USB_Transmit>
 8000d42:	e008      	b.n	8000d56 <HSMManager_ProcessCommand+0x11e>
		 }
		 else
		 {
			 log_error("Parsing failed with status code: %d", status);
 8000d44:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000d48:	f103 0317 	add.w	r3, r3, #23
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4808      	ldr	r0, [pc, #32]	@ (8000d74 <HSMManager_ProcessCommand+0x13c>)
 8000d52:	f000 fdb9 	bl	80018c8 <log_error>
		 }
	 }
	 return 0;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f507 3790 	add.w	r7, r7, #73728	@ 0x12000
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20010eec 	.word	0x20010eec
 8000d68:	20010ee8 	.word	0x20010ee8
 8000d6c:	20000ee8 	.word	0x20000ee8
 8000d70:	08013d74 	.word	0x08013d74
 8000d74:	08013d90 	.word	0x08013d90

08000d78 <OperationDispatcher_Dispatch>:
#include "constants.h"
#include "types.h"
#include "Logger.h"

OperationStatus_t OperationDispatcher_Dispatch(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
    log_info("Dispatching Command.");
 8000d82:	4838      	ldr	r0, [pc, #224]	@ (8000e64 <OperationDispatcher_Dispatch+0xec>)
 8000d84:	f000 fd6c 	bl	8001860 <log_info>

    switch (request->cmd)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	791b      	ldrb	r3, [r3, #4]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	2b0e      	cmp	r3, #14
 8000d90:	d85c      	bhi.n	8000e4c <OperationDispatcher_Dispatch+0xd4>
 8000d92:	a201      	add	r2, pc, #4	@ (adr r2, 8000d98 <OperationDispatcher_Dispatch+0x20>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000dd5 	.word	0x08000dd5
 8000d9c:	08000de5 	.word	0x08000de5
 8000da0:	08000df5 	.word	0x08000df5
 8000da4:	08000e07 	.word	0x08000e07
 8000da8:	08000e19 	.word	0x08000e19
 8000dac:	08000e2b 	.word	0x08000e2b
 8000db0:	08000e2b 	.word	0x08000e2b
 8000db4:	08000e2b 	.word	0x08000e2b
 8000db8:	08000e4d 	.word	0x08000e4d
 8000dbc:	08000e4d 	.word	0x08000e4d
 8000dc0:	08000e4d 	.word	0x08000e4d
 8000dc4:	08000e4d 	.word	0x08000e4d
 8000dc8:	08000e4d 	.word	0x08000e4d
 8000dcc:	08000e4d 	.word	0x08000e4d
 8000dd0:	08000e3d 	.word	0x08000e3d
    {
        case CMD_ENCRYPT:
        	log_info("Calling Encryption Operation.");
 8000dd4:	4824      	ldr	r0, [pc, #144]	@ (8000e68 <OperationDispatcher_Dispatch+0xf0>)
 8000dd6:	f000 fd43 	bl	8001860 <log_info>
        	log_warn("Encryption Operation not supported");
 8000dda:	4824      	ldr	r0, [pc, #144]	@ (8000e6c <OperationDispatcher_Dispatch+0xf4>)
 8000ddc:	f000 fd5a 	bl	8001894 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000de0:	230b      	movs	r3, #11
 8000de2:	e03a      	b.n	8000e5a <OperationDispatcher_Dispatch+0xe2>

        case CMD_DECRYPT:
        	log_info("Calling Decryption Operation.");
 8000de4:	4822      	ldr	r0, [pc, #136]	@ (8000e70 <OperationDispatcher_Dispatch+0xf8>)
 8000de6:	f000 fd3b 	bl	8001860 <log_info>
        	log_warn("Decryption Operation not supported");
 8000dea:	4822      	ldr	r0, [pc, #136]	@ (8000e74 <OperationDispatcher_Dispatch+0xfc>)
 8000dec:	f000 fd52 	bl	8001894 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000df0:	230b      	movs	r3, #11
 8000df2:	e032      	b.n	8000e5a <OperationDispatcher_Dispatch+0xe2>

        case CMD_HASH:
        	log_info("Calling Hashing Operation.");
 8000df4:	4820      	ldr	r0, [pc, #128]	@ (8000e78 <OperationDispatcher_Dispatch+0x100>)
 8000df6:	f000 fd33 	bl	8001860 <log_info>
            return HashingHandler_Handle(request, response);
 8000dfa:	6839      	ldr	r1, [r7, #0]
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f000 f84b 	bl	8000e98 <HashingHandler_Handle>
 8000e02:	4603      	mov	r3, r0
 8000e04:	e029      	b.n	8000e5a <OperationDispatcher_Dispatch+0xe2>

        case CMD_RANDOM:
        	log_info("Calling RNG Operation.");
 8000e06:	481d      	ldr	r0, [pc, #116]	@ (8000e7c <OperationDispatcher_Dispatch+0x104>)
 8000e08:	f000 fd2a 	bl	8001860 <log_info>
            return RandomHandler_Handle(request, response);
 8000e0c:	6839      	ldr	r1, [r7, #0]
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 fac2 	bl	8001398 <RandomHandler_Handle>
 8000e14:	4603      	mov	r3, r0
 8000e16:	e020      	b.n	8000e5a <OperationDispatcher_Dispatch+0xe2>

        case CMD_OTP:
            log_info("Calling OTP Operation.");
 8000e18:	4819      	ldr	r0, [pc, #100]	@ (8000e80 <OperationDispatcher_Dispatch+0x108>)
 8000e1a:	f000 fd21 	bl	8001860 <log_info>
            return OTPHandler_Handle(request, response);
 8000e1e:	6839      	ldr	r1, [r7, #0]
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f000 fa0b 	bl	800123c <OTPHandler_Handle>
 8000e26:	4603      	mov	r3, r0
 8000e28:	e017      	b.n	8000e5a <OperationDispatcher_Dispatch+0xe2>

        case CMD_KEY_GEN:
        case CMD_KEY_RETRIEVE:
        case CMD_KEY_ERASE:
        	log_info("Calling Key Management.");
 8000e2a:	4816      	ldr	r0, [pc, #88]	@ (8000e84 <OperationDispatcher_Dispatch+0x10c>)
 8000e2c:	f000 fd18 	bl	8001860 <log_info>
            return KeyHandler_Handle(request, response);
 8000e30:	6839      	ldr	r1, [r7, #0]
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f990 	bl	8001158 <KeyHandler_Handle>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	e00e      	b.n	8000e5a <OperationDispatcher_Dispatch+0xe2>

        case CMD_PING:
        	log_info("Calling Ping Operation.");
 8000e3c:	4812      	ldr	r0, [pc, #72]	@ (8000e88 <OperationDispatcher_Dispatch+0x110>)
 8000e3e:	f000 fd0f 	bl	8001860 <log_info>
        	log_warn("Ping Operation not supported");
 8000e42:	4812      	ldr	r0, [pc, #72]	@ (8000e8c <OperationDispatcher_Dispatch+0x114>)
 8000e44:	f000 fd26 	bl	8001894 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000e48:	230b      	movs	r3, #11
 8000e4a:	e006      	b.n	8000e5a <OperationDispatcher_Dispatch+0xe2>

        default:
            log_error("Invalid Command code received");
 8000e4c:	4810      	ldr	r0, [pc, #64]	@ (8000e90 <OperationDispatcher_Dispatch+0x118>)
 8000e4e:	f000 fd3b 	bl	80018c8 <log_error>
            log_error("Returning Failure Status code");
 8000e52:	4810      	ldr	r0, [pc, #64]	@ (8000e94 <OperationDispatcher_Dispatch+0x11c>)
 8000e54:	f000 fd38 	bl	80018c8 <log_error>
            return OPERATION_INVALID_CMD;
 8000e58:	2301      	movs	r3, #1
    }
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	08013db4 	.word	0x08013db4
 8000e68:	08013dcc 	.word	0x08013dcc
 8000e6c:	08013dec 	.word	0x08013dec
 8000e70:	08013e10 	.word	0x08013e10
 8000e74:	08013e30 	.word	0x08013e30
 8000e78:	08013e54 	.word	0x08013e54
 8000e7c:	08013e70 	.word	0x08013e70
 8000e80:	08013e88 	.word	0x08013e88
 8000e84:	08013ea0 	.word	0x08013ea0
 8000e88:	08013eb8 	.word	0x08013eb8
 8000e8c:	08013ed0 	.word	0x08013ed0
 8000e90:	08013ef0 	.word	0x08013ef0
 8000e94:	08013f10 	.word	0x08013f10

08000e98 <HashingHandler_Handle>:

extern HASH_HandleTypeDef hhash;
extern void Error_Handler(void);

OperationStatus_t HashingHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	log_info("Handling Hashing operation.");
 8000ea2:	4849      	ldr	r0, [pc, #292]	@ (8000fc8 <HashingHandler_Handle+0x130>)
 8000ea4:	f000 fcdc 	bl	8001860 <log_info>
	// Check if either Request or Response Packet is NULL
    if (!request )
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HashingHandler_Handle+0x1a>
    {
        return OPERATION_INVALID_DATA;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e085      	b.n	8000fbe <HashingHandler_Handle+0x126>
    }
    uint32_t AlgorithmSelected;
    // Declare status as Negative for Early Exit Pattern
    OperationStatus_t status = OPERATION_INVALID_OPTION;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	72fb      	strb	r3, [r7, #11]
    // Declare a static byte array of 64 elements
    static uint8_t digest[64] = {0};
    // Check the Request Packet's option member
    switch (request->option)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	795b      	ldrb	r3, [r3, #5]
 8000eba:	3b21      	subs	r3, #33	@ 0x21
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d833      	bhi.n	8000f28 <HashingHandler_Handle+0x90>
 8000ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec8 <HashingHandler_Handle+0x30>)
 8000ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec6:	bf00      	nop
 8000ec8:	08000ed9 	.word	0x08000ed9
 8000ecc:	08000eed 	.word	0x08000eed
 8000ed0:	08000f01 	.word	0x08000f01
 8000ed4:	08000f15 	.word	0x08000f15
    {
    	// SHA224 Hashing Algorithm Selected.
        case OPTION_HASH_SHA224:
        	log_info("SHA224 Hashing Algorithm Selected.");
 8000ed8:	483c      	ldr	r0, [pc, #240]	@ (8000fcc <HashingHandler_Handle+0x134>)
 8000eda:	f000 fcc1 	bl	8001860 <log_info>
        	response->outputSize = 28;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	221c      	movs	r2, #28
 8000ee2:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA224;
 8000ee4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000ee8:	60fb      	str	r3, [r7, #12]
            break;
 8000eea:	e01f      	b.n	8000f2c <HashingHandler_Handle+0x94>

        // SHA256 Hashing Algorithm Selected.
        case OPTION_HASH_SHA256:
        	log_info("SHA256 Hashing Algorithm Selected.");
 8000eec:	4838      	ldr	r0, [pc, #224]	@ (8000fd0 <HashingHandler_Handle+0x138>)
 8000eee:	f000 fcb7 	bl	8001860 <log_info>
        	response->outputSize = 32;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA256;
 8000ef8:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
 8000efc:	60fb      	str	r3, [r7, #12]
            break;
 8000efe:	e015      	b.n	8000f2c <HashingHandler_Handle+0x94>

        // SHA384 Hashing Algorithm Selected.
        case OPTION_HASH_SHA384:
        	log_info("SHA384 Hashing Algorithm Selected.");
 8000f00:	4834      	ldr	r0, [pc, #208]	@ (8000fd4 <HashingHandler_Handle+0x13c>)
 8000f02:	f000 fcad 	bl	8001860 <log_info>
        	response->outputSize = 48;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2230      	movs	r2, #48	@ 0x30
 8000f0a:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA384;
 8000f0c:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000f10:	60fb      	str	r3, [r7, #12]
            break;
 8000f12:	e00b      	b.n	8000f2c <HashingHandler_Handle+0x94>

        // SHA512 Hashing Algorithm Selected.
        case OPTION_HASH_SHA512:
        	log_info("SHA512 Hashing Algorithm Selected.");
 8000f14:	4830      	ldr	r0, [pc, #192]	@ (8000fd8 <HashingHandler_Handle+0x140>)
 8000f16:	f000 fca3 	bl	8001860 <log_info>
        	response->outputSize = 64;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2240      	movs	r2, #64	@ 0x40
 8000f1e:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA512;
 8000f20:	f44f 13f0 	mov.w	r3, #1966080	@ 0x1e0000
 8000f24:	60fb      	str	r3, [r7, #12]
            break;
 8000f26:	e001      	b.n	8000f2c <HashingHandler_Handle+0x94>

        // Default switch case
        default:
            return OPERATION_INVALID_OPTION;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e048      	b.n	8000fbe <HashingHandler_Handle+0x126>
    }

    status = OPERATION_SUCCESS;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	72fb      	strb	r3, [r7, #11]
    HAL_HASH_DeInit(&hhash);
 8000f30:	482a      	ldr	r0, [pc, #168]	@ (8000fdc <HashingHandler_Handle+0x144>)
 8000f32:	f002 fd5b 	bl	80039ec <HAL_HASH_DeInit>

    log_info("De-Initialized HASH Peripheral.");
 8000f36:	482a      	ldr	r0, [pc, #168]	@ (8000fe0 <HashingHandler_Handle+0x148>)
 8000f38:	f000 fc92 	bl	8001860 <log_info>

    hhash.Instance = HASH;
 8000f3c:	4b27      	ldr	r3, [pc, #156]	@ (8000fdc <HashingHandler_Handle+0x144>)
 8000f3e:	4a29      	ldr	r2, [pc, #164]	@ (8000fe4 <HashingHandler_Handle+0x14c>)
 8000f40:	601a      	str	r2, [r3, #0]
    hhash.Init.DataType = HASH_BYTE_SWAP;
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <HashingHandler_Handle+0x144>)
 8000f44:	2220      	movs	r2, #32
 8000f46:	605a      	str	r2, [r3, #4]
    hhash.Init.Algorithm = AlgorithmSelected;
 8000f48:	4a24      	ldr	r2, [pc, #144]	@ (8000fdc <HashingHandler_Handle+0x144>)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6113      	str	r3, [r2, #16]
    if (HAL_HASH_Init(&hhash) != HAL_OK)
 8000f4e:	4823      	ldr	r0, [pc, #140]	@ (8000fdc <HashingHandler_Handle+0x144>)
 8000f50:	f002 fd14 	bl	800397c <HAL_HASH_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HashingHandler_Handle+0xc6>
    {
    	status = OPERATION_FAILURE;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	72fb      	strb	r3, [r7, #11]
    }

    log_info("Re-initialized HASH Peripheral.");
 8000f5e:	4822      	ldr	r0, [pc, #136]	@ (8000fe8 <HashingHandler_Handle+0x150>)
 8000f60:	f000 fc7e 	bl	8001860 <log_info>

    if (HAL_HASH_Start_IT(&hhash, (uint8_t*)request->inputData, (uint32_t)request->inputSize, digest) != HAL_OK)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f103 0108 	add.w	r1, r3, #8
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	88db      	ldrh	r3, [r3, #6]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <HashingHandler_Handle+0x154>)
 8000f72:	481a      	ldr	r0, [pc, #104]	@ (8000fdc <HashingHandler_Handle+0x144>)
 8000f74:	f002 fd5d 	bl	8003a32 <HAL_HASH_Start_IT>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HashingHandler_Handle+0xea>
    {
      Error_Handler();
 8000f7e:	f001 f8cf 	bl	8002120 <Error_Handler>
    }
    while (HAL_HASH_GetState(&hhash) != HAL_HASH_STATE_READY);
 8000f82:	bf00      	nop
 8000f84:	4815      	ldr	r0, [pc, #84]	@ (8000fdc <HashingHandler_Handle+0x144>)
 8000f86:	f002 fe6c 	bl	8003c62 <HAL_HASH_GetState>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d1f9      	bne.n	8000f84 <HashingHandler_Handle+0xec>

    log_info("Generated Hash Digest successfully.");
 8000f90:	4817      	ldr	r0, [pc, #92]	@ (8000ff0 <HashingHandler_Handle+0x158>)
 8000f92:	f000 fc65 	bl	8001860 <log_info>
    // Check if operation status is Success
    if (status != OPERATION_SUCCESS)
 8000f96:	7afb      	ldrb	r3, [r7, #11]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HashingHandler_Handle+0x108>
    {
        return status;
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
 8000f9e:	e00e      	b.n	8000fbe <HashingHandler_Handle+0x126>
    }
    log_info("Copying Hash Digest into Response Packet.");
 8000fa0:	4814      	ldr	r0, [pc, #80]	@ (8000ff4 <HashingHandler_Handle+0x15c>)
 8000fa2:	f000 fc5d 	bl	8001860 <log_info>
    // Copy digest value to Response Packet structure
    memcpy(response->outputData, digest, response->outputSize);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	1d98      	adds	r0, r3, #6
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	889b      	ldrh	r3, [r3, #4]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	490e      	ldr	r1, [pc, #56]	@ (8000fec <HashingHandler_Handle+0x154>)
 8000fb2:	f011 fcbe 	bl	8012932 <memcpy>
    log_info("Hash operation complete.");
 8000fb6:	4810      	ldr	r0, [pc, #64]	@ (8000ff8 <HashingHandler_Handle+0x160>)
 8000fb8:	f000 fc52 	bl	8001860 <log_info>
    // Return Success
    return OPERATION_SUCCESS;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	08013f30 	.word	0x08013f30
 8000fcc:	08013f4c 	.word	0x08013f4c
 8000fd0:	08013f70 	.word	0x08013f70
 8000fd4:	08013f94 	.word	0x08013f94
 8000fd8:	08013fb8 	.word	0x08013fb8
 8000fdc:	200001ec 	.word	0x200001ec
 8000fe0:	08013fdc 	.word	0x08013fdc
 8000fe4:	420c0400 	.word	0x420c0400
 8000fe8:	08013ffc 	.word	0x08013ffc
 8000fec:	2000019c 	.word	0x2000019c
 8000ff0:	0801401c 	.word	0x0801401c
 8000ff4:	08014040 	.word	0x08014040
 8000ff8:	0801406c 	.word	0x0801406c

08000ffc <CalculateKeySize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

static uint16_t CalculateKeySize(uint8_t option_member)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	3b33      	subs	r3, #51	@ 0x33
 800100a:	2b0c      	cmp	r3, #12
 800100c:	d83d      	bhi.n	800108a <CalculateKeySize+0x8e>
 800100e:	a201      	add	r2, pc, #4	@ (adr r2, 8001014 <CalculateKeySize+0x18>)
 8001010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001014:	08001049 	.word	0x08001049
 8001018:	08001055 	.word	0x08001055
 800101c:	08001061 	.word	0x08001061
 8001020:	0800106d 	.word	0x0800106d
 8001024:	08001073 	.word	0x08001073
 8001028:	08001083 	.word	0x08001083
 800102c:	0800108b 	.word	0x0800108b
 8001030:	0800108b 	.word	0x0800108b
 8001034:	0800108b 	.word	0x0800108b
 8001038:	0800104f 	.word	0x0800104f
 800103c:	0800105b 	.word	0x0800105b
 8001040:	08001067 	.word	0x08001067
 8001044:	0800107b 	.word	0x0800107b
	{
		case OPTION_RNG_0016: byteSize = 16; 	break;
 8001048:	2310      	movs	r3, #16
 800104a:	81fb      	strh	r3, [r7, #14]
 800104c:	e01e      	b.n	800108c <CalculateKeySize+0x90>
		case OPTION_RNG_0024: byteSize = 24; 	break;
 800104e:	2318      	movs	r3, #24
 8001050:	81fb      	strh	r3, [r7, #14]
 8001052:	e01b      	b.n	800108c <CalculateKeySize+0x90>
		case OPTION_RNG_0032: byteSize = 32; 	break;
 8001054:	2320      	movs	r3, #32
 8001056:	81fb      	strh	r3, [r7, #14]
 8001058:	e018      	b.n	800108c <CalculateKeySize+0x90>
		case OPTION_RNG_0048: byteSize = 48; 	break;
 800105a:	2330      	movs	r3, #48	@ 0x30
 800105c:	81fb      	strh	r3, [r7, #14]
 800105e:	e015      	b.n	800108c <CalculateKeySize+0x90>
		case OPTION_RNG_0064: byteSize = 64; 	break;
 8001060:	2340      	movs	r3, #64	@ 0x40
 8001062:	81fb      	strh	r3, [r7, #14]
 8001064:	e012      	b.n	800108c <CalculateKeySize+0x90>
		case OPTION_RNG_0066: byteSize = 66; 	break;
 8001066:	2342      	movs	r3, #66	@ 0x42
 8001068:	81fb      	strh	r3, [r7, #14]
 800106a:	e00f      	b.n	800108c <CalculateKeySize+0x90>
		case OPTION_RNG_0128: byteSize = 128; 	break;
 800106c:	2380      	movs	r3, #128	@ 0x80
 800106e:	81fb      	strh	r3, [r7, #14]
 8001070:	e00c      	b.n	800108c <CalculateKeySize+0x90>
		case OPTION_RNG_0256: byteSize = 256; 	break;
 8001072:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001076:	81fb      	strh	r3, [r7, #14]
 8001078:	e008      	b.n	800108c <CalculateKeySize+0x90>
		case OPTION_RNG_0384: byteSize = 384; 	break;
 800107a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800107e:	81fb      	strh	r3, [r7, #14]
 8001080:	e004      	b.n	800108c <CalculateKeySize+0x90>
		case OPTION_RNG_0512: byteSize = 512; 	break;
 8001082:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001086:	81fb      	strh	r3, [r7, #14]
 8001088:	e000      	b.n	800108c <CalculateKeySize+0x90>
		default: break;
 800108a:	bf00      	nop
	}
	return byteSize;
 800108c:	89fb      	ldrh	r3, [r7, #14]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <KeyHandler_Generate>:

static OperationStatus_t KeyHandler_Generate(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
    log_info("Handling Key Generation operation.");
 80010a6:	4826      	ldr	r0, [pc, #152]	@ (8001140 <KeyHandler_Generate+0xa4>)
 80010a8:	f000 fbda 	bl	8001860 <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	795b      	ldrb	r3, [r3, #5]
 80010b0:	75bb      	strb	r3, [r7, #22]
    // Set the requested Pad size
    uint16_t numBytes = CalculateKeySize(option_val);
 80010b2:	7dbb      	ldrb	r3, [r7, #22]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ffa1 	bl	8000ffc <CalculateKeySize>
 80010ba:	4603      	mov	r3, r0
 80010bc:	82bb      	strh	r3, [r7, #20]
    log_info("Generating %d bytes of One-Time Pad", numBytes);
 80010be:	8abb      	ldrh	r3, [r7, #20]
 80010c0:	4619      	mov	r1, r3
 80010c2:	4820      	ldr	r0, [pc, #128]	@ (8001144 <KeyHandler_Generate+0xa8>)
 80010c4:	f000 fbcc 	bl	8001860 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 80010c8:	8abb      	ldrh	r3, [r7, #20]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <KeyHandler_Generate+0x3a>
 80010ce:	8abb      	ldrh	r3, [r7, #20]
 80010d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010d4:	d904      	bls.n	80010e0 <KeyHandler_Generate+0x44>
    {
        log_error("Requested Pad count is too big.");
 80010d6:	481c      	ldr	r0, [pc, #112]	@ (8001148 <KeyHandler_Generate+0xac>)
 80010d8:	f000 fbf6 	bl	80018c8 <log_error>
        return OPERATION_INVALID_OPTION;
 80010dc:	2302      	movs	r3, #2
 80010de:	e02a      	b.n	8001136 <KeyHandler_Generate+0x9a>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 80010e0:	2300      	movs	r3, #0
 80010e2:	75fb      	strb	r3, [r7, #23]
 80010e4:	e019      	b.n	800111a <KeyHandler_Generate+0x7e>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4619      	mov	r1, r3
 80010ec:	4817      	ldr	r0, [pc, #92]	@ (800114c <KeyHandler_Generate+0xb0>)
 80010ee:	f00b fa83 	bl	800c5f8 <HAL_RNG_GenerateRandomNumber>
 80010f2:	4603      	mov	r3, r0
 80010f4:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 80010f6:	7cfb      	ldrb	r3, [r7, #19]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <KeyHandler_Generate+0x6a>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 80010fc:	4814      	ldr	r0, [pc, #80]	@ (8001150 <KeyHandler_Generate+0xb4>)
 80010fe:	f000 fbe3 	bl	80018c8 <log_error>
		    return OPERATION_RANDOM_GEN_FAIL;
 8001102:	2306      	movs	r3, #6
 8001104:	e017      	b.n	8001136 <KeyHandler_Generate+0x9a>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	b2d1      	uxtb	r1, r2
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	4413      	add	r3, r2
 8001110:	460a      	mov	r2, r1
 8001112:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	3301      	adds	r3, #1
 8001118:	75fb      	strb	r3, [r7, #23]
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	b29a      	uxth	r2, r3
 800111e:	8abb      	ldrh	r3, [r7, #20]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	b29b      	uxth	r3, r3
 8001124:	429a      	cmp	r2, r3
 8001126:	d3de      	bcc.n	80010e6 <KeyHandler_Generate+0x4a>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	8aba      	ldrh	r2, [r7, #20]
 800112c:	809a      	strh	r2, [r3, #4]
    log_info("One-Time Pad Generation Operation complete.");
 800112e:	4809      	ldr	r0, [pc, #36]	@ (8001154 <KeyHandler_Generate+0xb8>)
 8001130:	f000 fb96 	bl	8001860 <log_info>
    return OPERATION_SUCCESS;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	08014088 	.word	0x08014088
 8001144:	080140ac 	.word	0x080140ac
 8001148:	080140d0 	.word	0x080140d0
 800114c:	20000280 	.word	0x20000280
 8001150:	080140f0 	.word	0x080140f0
 8001154:	08014128 	.word	0x08014128

08001158 <KeyHandler_Handle>:

OperationStatus_t KeyHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
	switch(request->cmd)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	791b      	ldrb	r3, [r3, #4]
 8001166:	2b08      	cmp	r3, #8
 8001168:	d017      	beq.n	800119a <KeyHandler_Handle+0x42>
 800116a:	2b08      	cmp	r3, #8
 800116c:	dc1d      	bgt.n	80011aa <KeyHandler_Handle+0x52>
 800116e:	2b06      	cmp	r3, #6
 8001170:	d002      	beq.n	8001178 <KeyHandler_Handle+0x20>
 8001172:	2b07      	cmp	r3, #7
 8001174:	d009      	beq.n	800118a <KeyHandler_Handle+0x32>
			log_info("Calling Key Store operation.");
			log_info("Key Store operation not supported now.");
			return OPERATION_UNKNOWN_ERROR;

		default:
			break;
 8001176:	e018      	b.n	80011aa <KeyHandler_Handle+0x52>
			log_info("Handling Key Generation operation.");
 8001178:	480e      	ldr	r0, [pc, #56]	@ (80011b4 <KeyHandler_Handle+0x5c>)
 800117a:	f000 fb71 	bl	8001860 <log_info>
			return KeyHandler_Generate(request, response);
 800117e:	6839      	ldr	r1, [r7, #0]
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff8b 	bl	800109c <KeyHandler_Generate>
 8001186:	4603      	mov	r3, r0
 8001188:	e010      	b.n	80011ac <KeyHandler_Handle+0x54>
			log_info("Calling Key Retrieve operation.");
 800118a:	480b      	ldr	r0, [pc, #44]	@ (80011b8 <KeyHandler_Handle+0x60>)
 800118c:	f000 fb68 	bl	8001860 <log_info>
			log_info("Key Retrieve operation not supported now.");
 8001190:	480a      	ldr	r0, [pc, #40]	@ (80011bc <KeyHandler_Handle+0x64>)
 8001192:	f000 fb65 	bl	8001860 <log_info>
			return OPERATION_UNKNOWN_ERROR;
 8001196:	230b      	movs	r3, #11
 8001198:	e008      	b.n	80011ac <KeyHandler_Handle+0x54>
			log_info("Calling Key Store operation.");
 800119a:	4809      	ldr	r0, [pc, #36]	@ (80011c0 <KeyHandler_Handle+0x68>)
 800119c:	f000 fb60 	bl	8001860 <log_info>
			log_info("Key Store operation not supported now.");
 80011a0:	4808      	ldr	r0, [pc, #32]	@ (80011c4 <KeyHandler_Handle+0x6c>)
 80011a2:	f000 fb5d 	bl	8001860 <log_info>
			return OPERATION_UNKNOWN_ERROR;
 80011a6:	230b      	movs	r3, #11
 80011a8:	e000      	b.n	80011ac <KeyHandler_Handle+0x54>
			break;
 80011aa:	bf00      	nop
	}

}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	08014088 	.word	0x08014088
 80011b8:	08014154 	.word	0x08014154
 80011bc:	08014174 	.word	0x08014174
 80011c0:	080141a0 	.word	0x080141a0
 80011c4:	080141c0 	.word	0x080141c0

080011c8 <CalculatePadSize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

uint16_t CalculatePadSize(uint8_t option_member)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	3b33      	subs	r3, #51	@ 0x33
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d828      	bhi.n	800122c <CalculatePadSize+0x64>
 80011da:	a201      	add	r2, pc, #4	@ (adr r2, 80011e0 <CalculatePadSize+0x18>)
 80011dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e0:	080011fd 	.word	0x080011fd
 80011e4:	08001203 	.word	0x08001203
 80011e8:	08001209 	.word	0x08001209
 80011ec:	0800120f 	.word	0x0800120f
 80011f0:	08001215 	.word	0x08001215
 80011f4:	0800121d 	.word	0x0800121d
 80011f8:	08001225 	.word	0x08001225
	{
		case OPTION_RNG_0016: byteSize = 16; 	break;
 80011fc:	2310      	movs	r3, #16
 80011fe:	81fb      	strh	r3, [r7, #14]
 8001200:	e015      	b.n	800122e <CalculatePadSize+0x66>
		case OPTION_RNG_0032: byteSize = 32; 	break;
 8001202:	2320      	movs	r3, #32
 8001204:	81fb      	strh	r3, [r7, #14]
 8001206:	e012      	b.n	800122e <CalculatePadSize+0x66>
		case OPTION_RNG_0064: byteSize = 64; 	break;
 8001208:	2340      	movs	r3, #64	@ 0x40
 800120a:	81fb      	strh	r3, [r7, #14]
 800120c:	e00f      	b.n	800122e <CalculatePadSize+0x66>
		case OPTION_RNG_0128: byteSize = 128; 	break;
 800120e:	2380      	movs	r3, #128	@ 0x80
 8001210:	81fb      	strh	r3, [r7, #14]
 8001212:	e00c      	b.n	800122e <CalculatePadSize+0x66>
		case OPTION_RNG_0256: byteSize = 256; 	break;
 8001214:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001218:	81fb      	strh	r3, [r7, #14]
 800121a:	e008      	b.n	800122e <CalculatePadSize+0x66>
		case OPTION_RNG_0512: byteSize = 512; 	break;
 800121c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001220:	81fb      	strh	r3, [r7, #14]
 8001222:	e004      	b.n	800122e <CalculatePadSize+0x66>
		case OPTION_RNG_1024: byteSize = 1024; 	break;
 8001224:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001228:	81fb      	strh	r3, [r7, #14]
 800122a:	e000      	b.n	800122e <CalculatePadSize+0x66>
		default: break;
 800122c:	bf00      	nop
	}
	return byteSize;
 800122e:	89fb      	ldrh	r3, [r7, #14]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <OTPHandler_Handle>:

OperationStatus_t OTPHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
    log_info("Handling One-Time Pad Generation operation.");
 8001246:	4826      	ldr	r0, [pc, #152]	@ (80012e0 <OTPHandler_Handle+0xa4>)
 8001248:	f000 fb0a 	bl	8001860 <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	795b      	ldrb	r3, [r3, #5]
 8001250:	75bb      	strb	r3, [r7, #22]
    // Set the requested Pad size
    uint16_t numBytes = CalculatePadSize(option_val);
 8001252:	7dbb      	ldrb	r3, [r7, #22]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ffb7 	bl	80011c8 <CalculatePadSize>
 800125a:	4603      	mov	r3, r0
 800125c:	82bb      	strh	r3, [r7, #20]
    log_info("Generating %d bytes of One-Time Pad", numBytes);
 800125e:	8abb      	ldrh	r3, [r7, #20]
 8001260:	4619      	mov	r1, r3
 8001262:	4820      	ldr	r0, [pc, #128]	@ (80012e4 <OTPHandler_Handle+0xa8>)
 8001264:	f000 fafc 	bl	8001860 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 8001268:	8abb      	ldrh	r3, [r7, #20]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <OTPHandler_Handle+0x3a>
 800126e:	8abb      	ldrh	r3, [r7, #20]
 8001270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001274:	d904      	bls.n	8001280 <OTPHandler_Handle+0x44>
    {
        log_error("Requested Pad count is too big.");
 8001276:	481c      	ldr	r0, [pc, #112]	@ (80012e8 <OTPHandler_Handle+0xac>)
 8001278:	f000 fb26 	bl	80018c8 <log_error>
        return OPERATION_INVALID_OPTION;
 800127c:	2302      	movs	r3, #2
 800127e:	e02a      	b.n	80012d6 <OTPHandler_Handle+0x9a>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001280:	2300      	movs	r3, #0
 8001282:	75fb      	strb	r3, [r7, #23]
 8001284:	e019      	b.n	80012ba <OTPHandler_Handle+0x7e>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4619      	mov	r1, r3
 800128c:	4817      	ldr	r0, [pc, #92]	@ (80012ec <OTPHandler_Handle+0xb0>)
 800128e:	f00b f9b3 	bl	800c5f8 <HAL_RNG_GenerateRandomNumber>
 8001292:	4603      	mov	r3, r0
 8001294:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 8001296:	7cfb      	ldrb	r3, [r7, #19]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d004      	beq.n	80012a6 <OTPHandler_Handle+0x6a>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 800129c:	4814      	ldr	r0, [pc, #80]	@ (80012f0 <OTPHandler_Handle+0xb4>)
 800129e:	f000 fb13 	bl	80018c8 <log_error>
		    return OPERATION_RANDOM_GEN_FAIL;
 80012a2:	2306      	movs	r3, #6
 80012a4:	e017      	b.n	80012d6 <OTPHandler_Handle+0x9a>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
 80012aa:	b2d1      	uxtb	r1, r2
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	460a      	mov	r2, r1
 80012b2:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	3301      	adds	r3, #1
 80012b8:	75fb      	strb	r3, [r7, #23]
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	b29a      	uxth	r2, r3
 80012be:	8abb      	ldrh	r3, [r7, #20]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d3de      	bcc.n	8001286 <OTPHandler_Handle+0x4a>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	8aba      	ldrh	r2, [r7, #20]
 80012cc:	809a      	strh	r2, [r3, #4]
    log_info("One-Time Pad Generation Operation complete.");
 80012ce:	4809      	ldr	r0, [pc, #36]	@ (80012f4 <OTPHandler_Handle+0xb8>)
 80012d0:	f000 fac6 	bl	8001860 <log_info>
    return OPERATION_SUCCESS;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	080141e8 	.word	0x080141e8
 80012e4:	08014214 	.word	0x08014214
 80012e8:	08014238 	.word	0x08014238
 80012ec:	20000280 	.word	0x20000280
 80012f0:	08014258 	.word	0x08014258
 80012f4:	08014290 	.word	0x08014290

080012f8 <CalculateByteSize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

uint16_t CalculateByteSize(uint8_t option_member)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	3b31      	subs	r3, #49	@ 0x31
 8001306:	2b0a      	cmp	r3, #10
 8001308:	d83e      	bhi.n	8001388 <CalculateByteSize+0x90>
 800130a:	a201      	add	r2, pc, #4	@ (adr r2, 8001310 <CalculateByteSize+0x18>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	0800133d 	.word	0x0800133d
 8001314:	08001343 	.word	0x08001343
 8001318:	08001349 	.word	0x08001349
 800131c:	0800134f 	.word	0x0800134f
 8001320:	08001355 	.word	0x08001355
 8001324:	0800135b 	.word	0x0800135b
 8001328:	08001361 	.word	0x08001361
 800132c:	08001369 	.word	0x08001369
 8001330:	08001371 	.word	0x08001371
 8001334:	08001379 	.word	0x08001379
 8001338:	08001381 	.word	0x08001381
	{
		case OPTION_RNG_0004: byteSize = 4; break;
 800133c:	2304      	movs	r3, #4
 800133e:	81fb      	strh	r3, [r7, #14]
 8001340:	e023      	b.n	800138a <CalculateByteSize+0x92>
		case OPTION_RNG_0008: byteSize = 8; break;
 8001342:	2308      	movs	r3, #8
 8001344:	81fb      	strh	r3, [r7, #14]
 8001346:	e020      	b.n	800138a <CalculateByteSize+0x92>
		case OPTION_RNG_0016: byteSize = 16; break;
 8001348:	2310      	movs	r3, #16
 800134a:	81fb      	strh	r3, [r7, #14]
 800134c:	e01d      	b.n	800138a <CalculateByteSize+0x92>
		case OPTION_RNG_0032: byteSize = 32; break;
 800134e:	2320      	movs	r3, #32
 8001350:	81fb      	strh	r3, [r7, #14]
 8001352:	e01a      	b.n	800138a <CalculateByteSize+0x92>
		case OPTION_RNG_0064: byteSize = 64; break;
 8001354:	2340      	movs	r3, #64	@ 0x40
 8001356:	81fb      	strh	r3, [r7, #14]
 8001358:	e017      	b.n	800138a <CalculateByteSize+0x92>
		case OPTION_RNG_0128: byteSize = 128; break;
 800135a:	2380      	movs	r3, #128	@ 0x80
 800135c:	81fb      	strh	r3, [r7, #14]
 800135e:	e014      	b.n	800138a <CalculateByteSize+0x92>
		case OPTION_RNG_0256: byteSize = 256; break;
 8001360:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001364:	81fb      	strh	r3, [r7, #14]
 8001366:	e010      	b.n	800138a <CalculateByteSize+0x92>
		case OPTION_RNG_0512: byteSize = 512; break;
 8001368:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800136c:	81fb      	strh	r3, [r7, #14]
 800136e:	e00c      	b.n	800138a <CalculateByteSize+0x92>
		case OPTION_RNG_1024: byteSize = 1024; break;
 8001370:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001374:	81fb      	strh	r3, [r7, #14]
 8001376:	e008      	b.n	800138a <CalculateByteSize+0x92>
		case OPTION_RNG_2048: byteSize = 2048; break;
 8001378:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800137c:	81fb      	strh	r3, [r7, #14]
 800137e:	e004      	b.n	800138a <CalculateByteSize+0x92>
		case OPTION_RNG_4096: byteSize = 4096; break;
 8001380:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001384:	81fb      	strh	r3, [r7, #14]
 8001386:	e000      	b.n	800138a <CalculateByteSize+0x92>
		default: break;
 8001388:	bf00      	nop
	}
	return byteSize;
 800138a:	89fb      	ldrh	r3, [r7, #14]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <RandomHandler_Handle>:

OperationStatus_t RandomHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
    log_info("Handling Random Number Generation operation.");
 80013a2:	4826      	ldr	r0, [pc, #152]	@ (800143c <RandomHandler_Handle+0xa4>)
 80013a4:	f000 fa5c 	bl	8001860 <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	795b      	ldrb	r3, [r3, #5]
 80013ac:	75bb      	strb	r3, [r7, #22]
    // Set the requested Random Number size
    uint16_t numBytes = CalculateByteSize(option_val);
 80013ae:	7dbb      	ldrb	r3, [r7, #22]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ffa1 	bl	80012f8 <CalculateByteSize>
 80013b6:	4603      	mov	r3, r0
 80013b8:	82bb      	strh	r3, [r7, #20]
    log_info("Generating %d bytes of Random Number", numBytes);
 80013ba:	8abb      	ldrh	r3, [r7, #20]
 80013bc:	4619      	mov	r1, r3
 80013be:	4820      	ldr	r0, [pc, #128]	@ (8001440 <RandomHandler_Handle+0xa8>)
 80013c0:	f000 fa4e 	bl	8001860 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 80013c4:	8abb      	ldrh	r3, [r7, #20]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <RandomHandler_Handle+0x3a>
 80013ca:	8abb      	ldrh	r3, [r7, #20]
 80013cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013d0:	d904      	bls.n	80013dc <RandomHandler_Handle+0x44>
    {
        log_error("Requested random byte count is invalid.");
 80013d2:	481c      	ldr	r0, [pc, #112]	@ (8001444 <RandomHandler_Handle+0xac>)
 80013d4:	f000 fa78 	bl	80018c8 <log_error>
        return OPERATION_INVALID_OPTION;
 80013d8:	2302      	movs	r3, #2
 80013da:	e02a      	b.n	8001432 <RandomHandler_Handle+0x9a>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 80013dc:	2300      	movs	r3, #0
 80013de:	75fb      	strb	r3, [r7, #23]
 80013e0:	e019      	b.n	8001416 <RandomHandler_Handle+0x7e>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4619      	mov	r1, r3
 80013e8:	4817      	ldr	r0, [pc, #92]	@ (8001448 <RandomHandler_Handle+0xb0>)
 80013ea:	f00b f905 	bl	800c5f8 <HAL_RNG_GenerateRandomNumber>
 80013ee:	4603      	mov	r3, r0
 80013f0:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 80013f2:	7cfb      	ldrb	r3, [r7, #19]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <RandomHandler_Handle+0x6a>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 80013f8:	4814      	ldr	r0, [pc, #80]	@ (800144c <RandomHandler_Handle+0xb4>)
 80013fa:	f000 fa65 	bl	80018c8 <log_error>
		    return OPERATION_RANDOM_GEN_FAIL;
 80013fe:	2306      	movs	r3, #6
 8001400:	e017      	b.n	8001432 <RandomHandler_Handle+0x9a>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 8001406:	b2d1      	uxtb	r1, r2
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	4413      	add	r3, r2
 800140c:	460a      	mov	r2, r1
 800140e:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001410:	7dfb      	ldrb	r3, [r7, #23]
 8001412:	3301      	adds	r3, #1
 8001414:	75fb      	strb	r3, [r7, #23]
 8001416:	7dfb      	ldrb	r3, [r7, #23]
 8001418:	b29a      	uxth	r2, r3
 800141a:	8abb      	ldrh	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	b29b      	uxth	r3, r3
 8001420:	429a      	cmp	r2, r3
 8001422:	d3de      	bcc.n	80013e2 <RandomHandler_Handle+0x4a>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	8aba      	ldrh	r2, [r7, #20]
 8001428:	809a      	strh	r2, [r3, #4]
    log_info("RNG Operation complete.");
 800142a:	4809      	ldr	r0, [pc, #36]	@ (8001450 <RandomHandler_Handle+0xb8>)
 800142c:	f000 fa18 	bl	8001860 <log_info>
    return OPERATION_SUCCESS;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	080142bc 	.word	0x080142bc
 8001440:	080142ec 	.word	0x080142ec
 8001444:	08014314 	.word	0x08014314
 8001448:	20000280 	.word	0x20000280
 800144c:	0801433c 	.word	0x0801433c
 8001450:	08014374 	.word	0x08014374

08001454 <PacketBuilder_Build>:
#include "Logger.h"
#include <string.h>


BuildStatus_t PacketBuilder_Build(const ResponsePacket_t* responsePacket, uint8_t* outBuffer, uint16_t* outLength)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
	log_debug("Checking if Response Packet is NULL");
 8001460:	484e      	ldr	r0, [pc, #312]	@ (800159c <PacketBuilder_Build+0x148>)
 8001462:	f000 f9e3 	bl	800182c <log_debug>
	// Check if Response, Output and Output Size are NULL
    if (!responsePacket || !outBuffer || !outLength)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <PacketBuilder_Build+0x24>
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d002      	beq.n	8001478 <PacketBuilder_Build+0x24>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <PacketBuilder_Build+0x28>
    {
    	return BUILD_NULL_POINTER;
 8001478:	2301      	movs	r3, #1
 800147a:	e08b      	b.n	8001594 <PacketBuilder_Build+0x140>
    }
    log_debug("Checking if Output Size is under limits");
 800147c:	4848      	ldr	r0, [pc, #288]	@ (80015a0 <PacketBuilder_Build+0x14c>)
 800147e:	f000 f9d5 	bl	800182c <log_debug>
    // Check if Output Size is under the specified limits
    if (responsePacket->outputSize > MAX_OUTPUT_DATA_SIZE)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	889b      	ldrh	r3, [r3, #4]
 8001486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800148a:	d901      	bls.n	8001490 <PacketBuilder_Build+0x3c>
    {
    	return BUILD_OUTPUT_TOO_LARGE;
 800148c:	2302      	movs	r3, #2
 800148e:	e081      	b.n	8001594 <PacketBuilder_Build+0x140>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Transaction ID to Out Buffer");
 8001494:	4843      	ldr	r0, [pc, #268]	@ (80015a4 <PacketBuilder_Build+0x150>)
 8001496:	f000 f9c9 	bl	800182c <log_debug>
    // Fill Data Stream with the corresponding Transaction ID
    outBuffer[index++] = (responsePacket->transactionID >> 24) & 0xFF;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	0e1a      	lsrs	r2, r3, #24
 80014a0:	8afb      	ldrh	r3, [r7, #22]
 80014a2:	1c59      	adds	r1, r3, #1
 80014a4:	82f9      	strh	r1, [r7, #22]
 80014a6:	4619      	mov	r1, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	440b      	add	r3, r1
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 16) & 0xFF;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0c1a      	lsrs	r2, r3, #16
 80014b6:	8afb      	ldrh	r3, [r7, #22]
 80014b8:	1c59      	adds	r1, r3, #1
 80014ba:	82f9      	strh	r1, [r7, #22]
 80014bc:	4619      	mov	r1, r3
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	440b      	add	r3, r1
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 8)  & 0xFF;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	0a1a      	lsrs	r2, r3, #8
 80014cc:	8afb      	ldrh	r3, [r7, #22]
 80014ce:	1c59      	adds	r1, r3, #1
 80014d0:	82f9      	strh	r1, [r7, #22]
 80014d2:	4619      	mov	r1, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	440b      	add	r3, r1
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID)       & 0xFF;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	8afb      	ldrh	r3, [r7, #22]
 80014e2:	1c59      	adds	r1, r3, #1
 80014e4:	82f9      	strh	r1, [r7, #22]
 80014e6:	4619      	mov	r1, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	440b      	add	r3, r1
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	701a      	strb	r2, [r3, #0]
    log_debug("Adding Output Data Size to Out Buffer");
 80014f0:	482d      	ldr	r0, [pc, #180]	@ (80015a8 <PacketBuilder_Build+0x154>)
 80014f2:	f000 f99b 	bl	800182c <log_debug>
    // Fill Data Stream with the Output Data Size
    outBuffer[index++] = (responsePacket->outputSize >> 8) & 0xFF;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	889b      	ldrh	r3, [r3, #4]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	8afb      	ldrh	r3, [r7, #22]
 8001500:	1c59      	adds	r1, r3, #1
 8001502:	82f9      	strh	r1, [r7, #22]
 8001504:	4619      	mov	r1, r3
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	440b      	add	r3, r1
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->outputSize)      & 0xFF;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	889a      	ldrh	r2, [r3, #4]
 8001512:	8afb      	ldrh	r3, [r7, #22]
 8001514:	1c59      	adds	r1, r3, #1
 8001516:	82f9      	strh	r1, [r7, #22]
 8001518:	4619      	mov	r1, r3
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	440b      	add	r3, r1
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]
    // Copy Output Data contents to Data Stream
    log_debug("Copying Output Data to Out Buffer");
 8001522:	4822      	ldr	r0, [pc, #136]	@ (80015ac <PacketBuilder_Build+0x158>)
 8001524:	f000 f982 	bl	800182c <log_debug>
    memcpy(&outBuffer[index], responsePacket->outputData, responsePacket->outputSize);
 8001528:	8afb      	ldrh	r3, [r7, #22]
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	18d0      	adds	r0, r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1d99      	adds	r1, r3, #6
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	889b      	ldrh	r3, [r3, #4]
 8001536:	461a      	mov	r2, r3
 8001538:	f011 f9fb 	bl	8012932 <memcpy>
    // Set Index to point to EOD Flag
    index += responsePacket->outputSize;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	889a      	ldrh	r2, [r3, #4]
 8001540:	8afb      	ldrh	r3, [r7, #22]
 8001542:	4413      	add	r3, r2
 8001544:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Outward EOD Flag to Out Buffer");
 8001546:	481a      	ldr	r0, [pc, #104]	@ (80015b0 <PacketBuilder_Build+0x15c>)
 8001548:	f000 f970 	bl	800182c <log_debug>
    // Add EOD Flag to Data Stream
    outBuffer[index++] = (OUT_EOD_FLAG >> 24) & 0xFF;
 800154c:	8afb      	ldrh	r3, [r7, #22]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	82fa      	strh	r2, [r7, #22]
 8001552:	461a      	mov	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4413      	add	r3, r2
 8001558:	22ca      	movs	r2, #202	@ 0xca
 800155a:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 16) & 0xFF;
 800155c:	8afb      	ldrh	r3, [r7, #22]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	82fa      	strh	r2, [r7, #22]
 8001562:	461a      	mov	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4413      	add	r3, r2
 8001568:	22fe      	movs	r2, #254	@ 0xfe
 800156a:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 8)  & 0xFF;
 800156c:	8afb      	ldrh	r3, [r7, #22]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	82fa      	strh	r2, [r7, #22]
 8001572:	461a      	mov	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	4413      	add	r3, r2
 8001578:	22ba      	movs	r2, #186	@ 0xba
 800157a:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG)       & 0xFF;
 800157c:	8afb      	ldrh	r3, [r7, #22]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	82fa      	strh	r2, [r7, #22]
 8001582:	461a      	mov	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4413      	add	r3, r2
 8001588:	22be      	movs	r2, #190	@ 0xbe
 800158a:	701a      	strb	r2, [r3, #0]
    // Set Index to point to End of Data Stream
    *outLength = index;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	8afa      	ldrh	r2, [r7, #22]
 8001590:	801a      	strh	r2, [r3, #0]
    // Return to indicate successful Packet Build
    return BUILD_SUCCESS;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	0801438c 	.word	0x0801438c
 80015a0:	080143b0 	.word	0x080143b0
 80015a4:	080143d8 	.word	0x080143d8
 80015a8:	080143fc 	.word	0x080143fc
 80015ac:	08014424 	.word	0x08014424
 80015b0:	08014448 	.word	0x08014448

080015b4 <PacketParser_Parse>:
#include "constants.h"
#include "Logger.h"
#include <string.h>

ParseStatus_t PacketParser_Parse(const uint8_t* rawData, uint16_t rawLength, ParsedPacket_t* parsedPacket)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	460b      	mov	r3, r1
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	817b      	strh	r3, [r7, #10]
	log_debug("Checking if Data Stream or Packet Structure is NULL.");
 80015c2:	4860      	ldr	r0, [pc, #384]	@ (8001744 <PacketParser_Parse+0x190>)
 80015c4:	f000 f932 	bl	800182c <log_debug>
	// Check if Data Stream or Packet structure is NULL
	if (!rawData || !parsedPacket)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <PacketParser_Parse+0x20>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d104      	bne.n	80015de <PacketParser_Parse+0x2a>
    {
		log_error("Data Stream or Packet Structure is NULL");
 80015d4:	485c      	ldr	r0, [pc, #368]	@ (8001748 <PacketParser_Parse+0x194>)
 80015d6:	f000 f977 	bl	80018c8 <log_error>
    	return PARSE_NULL_POINTER;
 80015da:	2303      	movs	r3, #3
 80015dc:	e0ae      	b.n	800173c <PacketParser_Parse+0x188>
    }
	log_debug("Checking if Data Stream contains less than 12 bytes.");
 80015de:	485b      	ldr	r0, [pc, #364]	@ (800174c <PacketParser_Parse+0x198>)
 80015e0:	f000 f924 	bl	800182c <log_debug>
    // Check if Data Stream contains Data of valid length
    if (rawLength < 12)
 80015e4:	897b      	ldrh	r3, [r7, #10]
 80015e6:	2b0b      	cmp	r3, #11
 80015e8:	d804      	bhi.n	80015f4 <PacketParser_Parse+0x40>
    {
    	log_error("Data stream contain less than 12 bytes");
 80015ea:	4859      	ldr	r0, [pc, #356]	@ (8001750 <PacketParser_Parse+0x19c>)
 80015ec:	f000 f96c 	bl	80018c8 <log_error>
    	return PARSE_INVALID_LENGTH;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0a3      	b.n	800173c <PacketParser_Parse+0x188>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up Transaction ID.");
 80015f8:	4856      	ldr	r0, [pc, #344]	@ (8001754 <PacketParser_Parse+0x1a0>)
 80015fa:	f000 f917 	bl	800182c <log_debug>
    // Retrieve Transaction ID from Data Stream
    parsedPacket->transactionID = (rawData[index]     << 24) |
 80015fe:	8afb      	ldrh	r3, [r7, #22]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	061a      	lsls	r2, r3, #24
                                  (rawData[index + 1] << 16) |
 8001608:	8afb      	ldrh	r3, [r7, #22]
 800160a:	3301      	adds	r3, #1
 800160c:	68f9      	ldr	r1, [r7, #12]
 800160e:	440b      	add	r3, r1
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	041b      	lsls	r3, r3, #16
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8001614:	431a      	orrs	r2, r3
                                  (rawData[index + 2] << 8)  |
 8001616:	8afb      	ldrh	r3, [r7, #22]
 8001618:	3302      	adds	r3, #2
 800161a:	68f9      	ldr	r1, [r7, #12]
 800161c:	440b      	add	r3, r1
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	021b      	lsls	r3, r3, #8
                                  (rawData[index + 1] << 16) |
 8001622:	4313      	orrs	r3, r2
                                  (rawData[index + 3]);
 8001624:	8afa      	ldrh	r2, [r7, #22]
 8001626:	3203      	adds	r2, #3
 8001628:	68f9      	ldr	r1, [r7, #12]
 800162a:	440a      	add	r2, r1
 800162c:	7812      	ldrb	r2, [r2, #0]
                                  (rawData[index + 2] << 8)  |
 800162e:	4313      	orrs	r3, r2
 8001630:	461a      	mov	r2, r3
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	601a      	str	r2, [r3, #0]
    // Set Index to point CMD byte
    index += 4;
 8001636:	8afb      	ldrh	r3, [r7, #22]
 8001638:	3304      	adds	r3, #4
 800163a:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up CMD, OPTION and INPUT_SIZE fields.");
 800163c:	4846      	ldr	r0, [pc, #280]	@ (8001758 <PacketParser_Parse+0x1a4>)
 800163e:	f000 f8f5 	bl	800182c <log_debug>
    // Retrieve CMD byte from Data Stream
    parsedPacket->cmd = rawData[index++];
 8001642:	8afb      	ldrh	r3, [r7, #22]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	82fa      	strh	r2, [r7, #22]
 8001648:	461a      	mov	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4413      	add	r3, r2
 800164e:	781a      	ldrb	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	711a      	strb	r2, [r3, #4]
    // Retrieve OPTION byte from Data Stream
    parsedPacket->option = rawData[index++];
 8001654:	8afb      	ldrh	r3, [r7, #22]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	82fa      	strh	r2, [r7, #22]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	781a      	ldrb	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	715a      	strb	r2, [r3, #5]
    // Retrieve INPUT_SIZE half-word from Data Stream
    parsedPacket->inputSize = (rawData[index] << 8) | rawData[index + 1];
 8001666:	8afb      	ldrh	r3, [r7, #22]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b21a      	sxth	r2, r3
 8001672:	8afb      	ldrh	r3, [r7, #22]
 8001674:	3301      	adds	r3, #1
 8001676:	68f9      	ldr	r1, [r7, #12]
 8001678:	440b      	add	r3, r1
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	b21b      	sxth	r3, r3
 800167e:	4313      	orrs	r3, r2
 8001680:	b21b      	sxth	r3, r3
 8001682:	b29a      	uxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	80da      	strh	r2, [r3, #6]
    // Set Index to point INPUT_DATA
    index += 2;
 8001688:	8afb      	ldrh	r3, [r7, #22]
 800168a:	3302      	adds	r3, #2
 800168c:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking if INPUT_SIZE is within the limits.");
 800168e:	4833      	ldr	r0, [pc, #204]	@ (800175c <PacketParser_Parse+0x1a8>)
 8001690:	f000 f8cc 	bl	800182c <log_debug>
    // Check if INPUT_SIZE is under the prescribed limit
    if (parsedPacket->inputSize > MAX_INPUT_DATA_SIZE || ((index - 1) + parsedPacket->inputSize + 4) > rawLength)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	88db      	ldrh	r3, [r3, #6]
 8001698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800169c:	d808      	bhi.n	80016b0 <PacketParser_Parse+0xfc>
 800169e:	8afb      	ldrh	r3, [r7, #22]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	88d2      	ldrh	r2, [r2, #6]
 80016a6:	4413      	add	r3, r2
 80016a8:	1cda      	adds	r2, r3, #3
 80016aa:	897b      	ldrh	r3, [r7, #10]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	db04      	blt.n	80016ba <PacketParser_Parse+0x106>
    {
    	log_error("Input Data Size is too big.");
 80016b0:	482b      	ldr	r0, [pc, #172]	@ (8001760 <PacketParser_Parse+0x1ac>)
 80016b2:	f000 f909 	bl	80018c8 <log_error>
        return PARSE_INPUT_TOO_LARGE;
 80016b6:	2304      	movs	r3, #4
 80016b8:	e040      	b.n	800173c <PacketParser_Parse+0x188>
    }
    log_debug("Copying INPUT DATA to Packet Structure.");
 80016ba:	482a      	ldr	r0, [pc, #168]	@ (8001764 <PacketParser_Parse+0x1b0>)
 80016bc:	f000 f8b6 	bl	800182c <log_debug>
    // Copy INPUT_DATA array from Data Stream to Packet structure
    memcpy(parsedPacket->inputData, &rawData[index], parsedPacket->inputSize);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f103 0008 	add.w	r0, r3, #8
 80016c6:	8afb      	ldrh	r3, [r7, #22]
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	18d1      	adds	r1, r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	88db      	ldrh	r3, [r3, #6]
 80016d0:	461a      	mov	r2, r3
 80016d2:	f011 f92e 	bl	8012932 <memcpy>
    // Set Index to point EOD Flag
    if(!(parsedPacket->inputSize))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	88db      	ldrh	r3, [r3, #6]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <PacketParser_Parse+0x130>
    {
    	index = 9;
 80016de:	2309      	movs	r3, #9
 80016e0:	82fb      	strh	r3, [r7, #22]
 80016e2:	e004      	b.n	80016ee <PacketParser_Parse+0x13a>
    }
    else
    {
    	index += parsedPacket->inputSize;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	88da      	ldrh	r2, [r3, #6]
 80016e8:	8afb      	ldrh	r3, [r7, #22]
 80016ea:	4413      	add	r3, r2
 80016ec:	82fb      	strh	r3, [r7, #22]
    }
    log_debug("Checking the Received EOD word.");
 80016ee:	481e      	ldr	r0, [pc, #120]	@ (8001768 <PacketParser_Parse+0x1b4>)
 80016f0:	f000 f89c 	bl	800182c <log_debug>
    // Retrieve EOD Flag from Data Stream
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 80016f4:	8afb      	ldrh	r3, [r7, #22]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	4413      	add	r3, r2
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	061a      	lsls	r2, r3, #24
                           	   (rawData[index + 1] << 16) |
 80016fe:	8afb      	ldrh	r3, [r7, #22]
 8001700:	3301      	adds	r3, #1
 8001702:	68f9      	ldr	r1, [r7, #12]
 8001704:	440b      	add	r3, r1
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	041b      	lsls	r3, r3, #16
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 800170a:	431a      	orrs	r2, r3
							   (rawData[index + 2] << 8)  |
 800170c:	8afb      	ldrh	r3, [r7, #22]
 800170e:	3302      	adds	r3, #2
 8001710:	68f9      	ldr	r1, [r7, #12]
 8001712:	440b      	add	r3, r1
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	021b      	lsls	r3, r3, #8
                           	   (rawData[index + 1] << 16) |
 8001718:	4313      	orrs	r3, r2
							   (rawData[index + 3]);
 800171a:	8afa      	ldrh	r2, [r7, #22]
 800171c:	3203      	adds	r2, #3
 800171e:	68f9      	ldr	r1, [r7, #12]
 8001720:	440a      	add	r2, r1
 8001722:	7812      	ldrb	r2, [r2, #0]
							   (rawData[index + 2] << 8)  |
 8001724:	4313      	orrs	r3, r2
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 8001726:	613b      	str	r3, [r7, #16]
    // Check if EOD Flag is valid
    if (received_IN_EOD != IN_EOD_FLAG)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4a10      	ldr	r2, [pc, #64]	@ (800176c <PacketParser_Parse+0x1b8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d004      	beq.n	800173a <PacketParser_Parse+0x186>
    {
    	log_error("Received EOD Flag is Invalid");
 8001730:	480f      	ldr	r0, [pc, #60]	@ (8001770 <PacketParser_Parse+0x1bc>)
 8001732:	f000 f8c9 	bl	80018c8 <log_error>
        return PARSE_EOD_MISMATCH;
 8001736:	2302      	movs	r3, #2
 8001738:	e000      	b.n	800173c <PacketParser_Parse+0x188>
    }
    // Return to Indicate successful parsing
    return PARSE_SUCCESS;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	08014470 	.word	0x08014470
 8001748:	080144a8 	.word	0x080144a8
 800174c:	080144d0 	.word	0x080144d0
 8001750:	08014508 	.word	0x08014508
 8001754:	08014530 	.word	0x08014530
 8001758:	0801454c 	.word	0x0801454c
 800175c:	0801457c 	.word	0x0801457c
 8001760:	080145ac 	.word	0x080145ac
 8001764:	080145c8 	.word	0x080145c8
 8001768:	080145f0 	.word	0x080145f0
 800176c:	deadbeef 	.word	0xdeadbeef
 8001770:	08014610 	.word	0x08014610

08001774 <log_init>:
#define LOG_BUFFER_SIZE 256

static LogLevel current_level = LOG_LEVEL_INFO;

void log_init(LogLevel level)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
    current_level = level;
 800177e:	4a04      	ldr	r2, [pc, #16]	@ (8001790 <log_init+0x1c>)
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	7013      	strb	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	20000000 	.word	0x20000000

08001794 <log_generic>:

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b0c7      	sub	sp, #284	@ 0x11c
 8001798:	af02      	add	r7, sp, #8
 800179a:	4604      	mov	r4, r0
 800179c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80017a0:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 80017a4:	6001      	str	r1, [r0, #0]
 80017a6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80017aa:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80017ae:	600a      	str	r2, [r1, #0]
 80017b0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017b4:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017be:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80017c2:	4622      	mov	r2, r4
 80017c4:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 80017c6:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <log_generic+0x8c>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017ce:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 80017d2:	7812      	ldrb	r2, [r2, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d31e      	bcc.n	8001816 <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80017d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017dc:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80017e0:	f107 0010 	add.w	r0, r7, #16
 80017e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017ee:	f011 f817 	bl	8012820 <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017fa:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80017fe:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001802:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8001806:	4807      	ldr	r0, [pc, #28]	@ (8001824 <log_generic+0x90>)
 8001808:	9000      	str	r0, [sp, #0]
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	6809      	ldr	r1, [r1, #0]
 800180e:	4806      	ldr	r0, [pc, #24]	@ (8001828 <log_generic+0x94>)
 8001810:	f010 ff32 	bl	8012678 <iprintf>
 8001814:	e000      	b.n	8001818 <log_generic+0x84>
        return;
 8001816:	bf00      	nop
}
 8001818:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800181c:	46bd      	mov	sp, r7
 800181e:	bd90      	pop	{r4, r7, pc}
 8001820:	20000000 	.word	0x20000000
 8001824:	08014640 	.word	0x08014640
 8001828:	08014630 	.word	0x08014630

0800182c <log_debug>:

void log_debug(const char *fmt, ...)
{
 800182c:	b40f      	push	{r0, r1, r2, r3}
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4a05      	ldr	r2, [pc, #20]	@ (8001858 <log_debug+0x2c>)
 8001842:	4906      	ldr	r1, [pc, #24]	@ (800185c <log_debug+0x30>)
 8001844:	2000      	movs	r0, #0
 8001846:	f7ff ffa5 	bl	8001794 <log_generic>
    va_end(args);
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001854:	b004      	add	sp, #16
 8001856:	4770      	bx	lr
 8001858:	08014648 	.word	0x08014648
 800185c:	08014650 	.word	0x08014650

08001860 <log_info>:

void log_info(const char *fmt, ...)
{
 8001860:	b40f      	push	{r0, r1, r2, r3}
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4a05      	ldr	r2, [pc, #20]	@ (800188c <log_info+0x2c>)
 8001876:	4906      	ldr	r1, [pc, #24]	@ (8001890 <log_info+0x30>)
 8001878:	2001      	movs	r0, #1
 800187a:	f7ff ff8b 	bl	8001794 <log_generic>
    va_end(args);
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001888:	b004      	add	sp, #16
 800188a:	4770      	bx	lr
 800188c:	08014658 	.word	0x08014658
 8001890:	08014660 	.word	0x08014660

08001894 <log_warn>:

void log_warn(const char *fmt, ...)
{
 8001894:	b40f      	push	{r0, r1, r2, r3}
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4a05      	ldr	r2, [pc, #20]	@ (80018c0 <log_warn+0x2c>)
 80018aa:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <log_warn+0x30>)
 80018ac:	2002      	movs	r0, #2
 80018ae:	f7ff ff71 	bl	8001794 <log_generic>
    va_end(args);
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018bc:	b004      	add	sp, #16
 80018be:	4770      	bx	lr
 80018c0:	08014668 	.word	0x08014668
 80018c4:	08014670 	.word	0x08014670

080018c8 <log_error>:

void log_error(const char *fmt, ...)
{
 80018c8:	b40f      	push	{r0, r1, r2, r3}
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4a05      	ldr	r2, [pc, #20]	@ (80018f4 <log_error+0x2c>)
 80018de:	4906      	ldr	r1, [pc, #24]	@ (80018f8 <log_error+0x30>)
 80018e0:	2003      	movs	r0, #3
 80018e2:	f7ff ff57 	bl	8001794 <log_generic>
    va_end(args);
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018f0:	b004      	add	sp, #16
 80018f2:	4770      	bx	lr
 80018f4:	08014678 	.word	0x08014678
 80018f8:	08014680 	.word	0x08014680

080018fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001900:	f001 fb8c 	bl	800301c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001904:	f000 f848 	bl	8001998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001908:	f000 fafe 	bl	8001f08 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 800190c:	f000 fa9a 	bl	8001e44 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8001910:	f000 fa00 	bl	8001d14 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001914:	f000 f8d0 	bl	8001ab8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001918:	f000 f9a6 	bl	8001c68 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 800191c:	f000 fa46 	bl	8001dac <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001920:	f000 f920 	bl	8001b64 <MX_RTC_Init>
  MX_RNG_Init();
 8001924:	f000 f908 	bl	8001b38 <MX_RNG_Init>
  MX_HASH_Init();
 8001928:	f000 f8ac 	bl	8001a84 <MX_HASH_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 800192c:	bf00      	nop
 800192e:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <main+0x94>)
 8001930:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0fa      	beq.n	800192e <main+0x32>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8001938:	2000      	movs	r0, #0
 800193a:	f001 f955 	bl	8002be8 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800193e:	2001      	movs	r0, #1
 8001940:	f001 f952 	bl	8002be8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001944:	2002      	movs	r0, #2
 8001946:	f001 f94f 	bl	8002be8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800194a:	2101      	movs	r1, #1
 800194c:	2000      	movs	r0, #0
 800194e:	f001 f9eb 	bl	8002d28 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <main+0x98>)
 8001954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001958:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <main+0x98>)
 800195c:	2200      	movs	r2, #0
 800195e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <main+0x98>)
 8001962:	2200      	movs	r2, #0
 8001964:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001966:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <main+0x98>)
 8001968:	2200      	movs	r2, #0
 800196a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <main+0x98>)
 800196e:	2200      	movs	r2, #0
 8001970:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001972:	4908      	ldr	r1, [pc, #32]	@ (8001994 <main+0x98>)
 8001974:	2000      	movs	r0, #0
 8001976:	f001 fa71 	bl	8002e5c <BSP_COM_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <main+0x88>
  {
    Error_Handler();
 8001980:	f000 fbce 	bl	8002120 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HSMManager_Init();
 8001984:	f7ff f8e4 	bl	8000b50 <HSMManager_Init>

  HSMManager_ProcessCommand();
 8001988:	f7ff f956 	bl	8000c38 <HSMManager_ProcessCommand>
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <main+0x90>
 8001990:	20000760 	.word	0x20000760
 8001994:	200001dc 	.word	0x200001dc

08001998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b09c      	sub	sp, #112	@ 0x70
 800199c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199e:	f107 0320 	add.w	r3, r7, #32
 80019a2:	2250      	movs	r2, #80	@ 0x50
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f010 ff48 	bl	801283c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
 80019bc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80019be:	4b2f      	ldr	r3, [pc, #188]	@ (8001a7c <SystemClock_Config+0xe4>)
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	4a2e      	ldr	r2, [pc, #184]	@ (8001a7c <SystemClock_Config+0xe4>)
 80019c4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80019c8:	6113      	str	r3, [r2, #16]
 80019ca:	4b2c      	ldr	r3, [pc, #176]	@ (8001a7c <SystemClock_Config+0xe4>)
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019d6:	bf00      	nop
 80019d8:	4b28      	ldr	r3, [pc, #160]	@ (8001a7c <SystemClock_Config+0xe4>)
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d1f9      	bne.n	80019d8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80019e4:	2329      	movs	r3, #41	@ 0x29
 80019e6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019e8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80019f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80019f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019fa:	2302      	movs	r3, #2
 80019fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80019fe:	2303      	movs	r3, #3
 8001a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a02:	2304      	movs	r3, #4
 8001a04:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8001a06:	23fa      	movs	r3, #250	@ 0xfa
 8001a08:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a12:	2302      	movs	r3, #2
 8001a14:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8001a16:	2304      	movs	r3, #4
 8001a18:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a22:	f107 0320 	add.w	r3, r7, #32
 8001a26:	4618      	mov	r0, r3
 8001a28:	f004 fd76 	bl	8006518 <HAL_RCC_OscConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a32:	f000 fb75 	bl	8002120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a36:	231f      	movs	r3, #31
 8001a38:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	2105      	movs	r1, #5
 8001a54:	4618      	mov	r0, r3
 8001a56:	f005 f997 	bl	8006d88 <HAL_RCC_ClockConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001a60:	f000 fb5e 	bl	8002120 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <SystemClock_Config+0xe8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a6c:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <SystemClock_Config+0xe8>)
 8001a6e:	f043 0320 	orr.w	r3, r3, #32
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	3770      	adds	r7, #112	@ 0x70
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	44020800 	.word	0x44020800
 8001a80:	40022000 	.word	0x40022000

08001a84 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 8001a88:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <MX_HASH_Init+0x2c>)
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <MX_HASH_Init+0x30>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_BYTE_SWAP;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <MX_HASH_Init+0x2c>)
 8001a90:	2220      	movs	r2, #32
 8001a92:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA256;
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <MX_HASH_Init+0x2c>)
 8001a96:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8001a9a:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8001a9c:	4804      	ldr	r0, [pc, #16]	@ (8001ab0 <MX_HASH_Init+0x2c>)
 8001a9e:	f001 ff6d 	bl	800397c <HAL_HASH_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_HASH_Init+0x28>
  {
    Error_Handler();
 8001aa8:	f000 fb3a 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200001ec 	.word	0x200001ec
 8001ab4:	420c0400 	.word	0x420c0400

08001ab8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001abe:	4a1c      	ldr	r2, [pc, #112]	@ (8001b30 <MX_I2C1_Init+0x78>)
 8001ac0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b34 <MX_I2C1_Init+0x7c>)
 8001ac6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ace:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad4:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ada:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001af2:	480e      	ldr	r0, [pc, #56]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001af4:	f002 feda 	bl	80048ac <HAL_I2C_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001afe:	f000 fb0f 	bl	8002120 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b02:	2100      	movs	r1, #0
 8001b04:	4809      	ldr	r0, [pc, #36]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001b06:	f002 ff6c 	bl	80049e2 <HAL_I2CEx_ConfigAnalogFilter>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b10:	f000 fb06 	bl	8002120 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b14:	2100      	movs	r1, #0
 8001b16:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <MX_I2C1_Init+0x74>)
 8001b18:	f002 ffae 	bl	8004a78 <HAL_I2CEx_ConfigDigitalFilter>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b22:	f000 fafd 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000022c 	.word	0x2000022c
 8001b30:	40005400 	.word	0x40005400
 8001b34:	10c043e5 	.word	0x10c043e5

08001b38 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <MX_RNG_Init+0x24>)
 8001b3e:	4a08      	ldr	r2, [pc, #32]	@ (8001b60 <MX_RNG_Init+0x28>)
 8001b40:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001b42:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <MX_RNG_Init+0x24>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001b48:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <MX_RNG_Init+0x24>)
 8001b4a:	f00a fcb7 	bl	800c4bc <HAL_RNG_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001b54:	f000 fae4 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000280 	.word	0x20000280
 8001b60:	420c0800 	.word	0x420c0800

08001b64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08e      	sub	sp, #56	@ 0x38
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	611a      	str	r2, [r3, #16]
 8001b7a:	615a      	str	r2, [r3, #20]
 8001b7c:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001b7e:	f107 0308 	add.w	r3, r7, #8
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b92:	4b33      	ldr	r3, [pc, #204]	@ (8001c60 <MX_RTC_Init+0xfc>)
 8001b94:	4a33      	ldr	r2, [pc, #204]	@ (8001c64 <MX_RTC_Init+0x100>)
 8001b96:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b98:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <MX_RTC_Init+0xfc>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b9e:	4b30      	ldr	r3, [pc, #192]	@ (8001c60 <MX_RTC_Init+0xfc>)
 8001ba0:	227f      	movs	r2, #127	@ 0x7f
 8001ba2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c60 <MX_RTC_Init+0xfc>)
 8001ba6:	22ff      	movs	r2, #255	@ 0xff
 8001ba8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001baa:	4b2d      	ldr	r3, [pc, #180]	@ (8001c60 <MX_RTC_Init+0xfc>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c60 <MX_RTC_Init+0xfc>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <MX_RTC_Init+0xfc>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bbc:	4b28      	ldr	r3, [pc, #160]	@ (8001c60 <MX_RTC_Init+0xfc>)
 8001bbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bc2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001bc4:	4b26      	ldr	r3, [pc, #152]	@ (8001c60 <MX_RTC_Init+0xfc>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001bca:	4b25      	ldr	r3, [pc, #148]	@ (8001c60 <MX_RTC_Init+0xfc>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bd0:	4823      	ldr	r0, [pc, #140]	@ (8001c60 <MX_RTC_Init+0xfc>)
 8001bd2:	f00a fe17 	bl	800c804 <HAL_RTC_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001bdc:	f000 faa0 	bl	8002120 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	481a      	ldr	r0, [pc, #104]	@ (8001c60 <MX_RTC_Init+0xfc>)
 8001bf8:	f00b f86a 	bl	800ccd0 <HAL_RTCEx_PrivilegeModeSet>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001c02:	f000 fa8d 	bl	8002120 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c1a:	f107 0308 	add.w	r3, r7, #8
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4619      	mov	r1, r3
 8001c22:	480f      	ldr	r0, [pc, #60]	@ (8001c60 <MX_RTC_Init+0xfc>)
 8001c24:	f00a fe70 	bl	800c908 <HAL_RTC_SetTime>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001c2e:	f000 fa77 	bl	8002120 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c32:	2301      	movs	r3, #1
 8001c34:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8001c36:	2301      	movs	r3, #1
 8001c38:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	2201      	movs	r2, #1
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <MX_RTC_Init+0xfc>)
 8001c4a:	f00a feef 	bl	800ca2c <HAL_RTC_SetDate>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8001c54:	f000 fa64 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	3738      	adds	r7, #56	@ 0x38
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000294 	.word	0x20000294
 8001c64:	44007800 	.word	0x44007800

08001c68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c6c:	4b27      	ldr	r3, [pc, #156]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001c6e:	4a28      	ldr	r2, [pc, #160]	@ (8001d10 <MX_SPI1_Init+0xa8>)
 8001c70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c72:	4b26      	ldr	r3, [pc, #152]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001c74:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c7a:	4b24      	ldr	r3, [pc, #144]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c80:	4b22      	ldr	r3, [pc, #136]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001c82:	2207      	movs	r2, #7
 8001c84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c86:	4b21      	ldr	r3, [pc, #132]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c92:	4b1e      	ldr	r3, [pc, #120]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001c94:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001c9c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001ca0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ca8:	4b18      	ldr	r3, [pc, #96]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cae:	4b17      	ldr	r3, [pc, #92]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001cb4:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001cb6:	2207      	movs	r2, #7
 8001cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cba:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001cbc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cc0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001cc2:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001cc8:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001cce:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001cda:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001cec:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001cf2:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cf8:	4804      	ldr	r0, [pc, #16]	@ (8001d0c <MX_SPI1_Init+0xa4>)
 8001cfa:	f00b f817 	bl	800cd2c <HAL_SPI_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001d04:	f000 fa0c 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200002c4 	.word	0x200002c4
 8001d10:	40013000 	.word	0x40013000

08001d14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d18:	4b22      	ldr	r3, [pc, #136]	@ (8001da4 <MX_USART2_UART_Init+0x90>)
 8001d1a:	4a23      	ldr	r2, [pc, #140]	@ (8001da8 <MX_USART2_UART_Init+0x94>)
 8001d1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d1e:	4b21      	ldr	r3, [pc, #132]	@ (8001da4 <MX_USART2_UART_Init+0x90>)
 8001d20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	4b1f      	ldr	r3, [pc, #124]	@ (8001da4 <MX_USART2_UART_Init+0x90>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001da4 <MX_USART2_UART_Init+0x90>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d32:	4b1c      	ldr	r3, [pc, #112]	@ (8001da4 <MX_USART2_UART_Init+0x90>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d38:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <MX_USART2_UART_Init+0x90>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3e:	4b19      	ldr	r3, [pc, #100]	@ (8001da4 <MX_USART2_UART_Init+0x90>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d44:	4b17      	ldr	r3, [pc, #92]	@ (8001da4 <MX_USART2_UART_Init+0x90>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d4a:	4b16      	ldr	r3, [pc, #88]	@ (8001da4 <MX_USART2_UART_Init+0x90>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d50:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <MX_USART2_UART_Init+0x90>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d56:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <MX_USART2_UART_Init+0x90>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d5c:	4811      	ldr	r0, [pc, #68]	@ (8001da4 <MX_USART2_UART_Init+0x90>)
 8001d5e:	f00b f970 	bl	800d042 <HAL_UART_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d68:	f000 f9da 	bl	8002120 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	480d      	ldr	r0, [pc, #52]	@ (8001da4 <MX_USART2_UART_Init+0x90>)
 8001d70:	f00b fe9c 	bl	800daac <HAL_UARTEx_SetTxFifoThreshold>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d7a:	f000 f9d1 	bl	8002120 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4808      	ldr	r0, [pc, #32]	@ (8001da4 <MX_USART2_UART_Init+0x90>)
 8001d82:	f00b fed1 	bl	800db28 <HAL_UARTEx_SetRxFifoThreshold>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d8c:	f000 f9c8 	bl	8002120 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d90:	4804      	ldr	r0, [pc, #16]	@ (8001da4 <MX_USART2_UART_Init+0x90>)
 8001d92:	f00b fe52 	bl	800da3a <HAL_UARTEx_DisableFifoMode>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001d9c:	f000 f9c0 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000354 	.word	0x20000354
 8001da8:	40004400 	.word	0x40004400

08001dac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001db0:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <MX_USART6_UART_Init+0x90>)
 8001db2:	4a23      	ldr	r2, [pc, #140]	@ (8001e40 <MX_USART6_UART_Init+0x94>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <MX_USART6_UART_Init+0x90>)
 8001db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dbc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <MX_USART6_UART_Init+0x90>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <MX_USART6_UART_Init+0x90>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <MX_USART6_UART_Init+0x90>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <MX_USART6_UART_Init+0x90>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <MX_USART6_UART_Init+0x90>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <MX_USART6_UART_Init+0x90>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de2:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <MX_USART6_UART_Init+0x90>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <MX_USART6_UART_Init+0x90>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <MX_USART6_UART_Init+0x90>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001df4:	4811      	ldr	r0, [pc, #68]	@ (8001e3c <MX_USART6_UART_Init+0x90>)
 8001df6:	f00b f924 	bl	800d042 <HAL_UART_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001e00:	f000 f98e 	bl	8002120 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e04:	2100      	movs	r1, #0
 8001e06:	480d      	ldr	r0, [pc, #52]	@ (8001e3c <MX_USART6_UART_Init+0x90>)
 8001e08:	f00b fe50 	bl	800daac <HAL_UARTEx_SetTxFifoThreshold>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001e12:	f000 f985 	bl	8002120 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e16:	2100      	movs	r1, #0
 8001e18:	4808      	ldr	r0, [pc, #32]	@ (8001e3c <MX_USART6_UART_Init+0x90>)
 8001e1a:	f00b fe85 	bl	800db28 <HAL_UARTEx_SetRxFifoThreshold>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001e24:	f000 f97c 	bl	8002120 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001e28:	4804      	ldr	r0, [pc, #16]	@ (8001e3c <MX_USART6_UART_Init+0x90>)
 8001e2a:	f00b fe06 	bl	800da3a <HAL_UARTEx_DisableFifoMode>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001e34:	f000 f974 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200003e8 	.word	0x200003e8
 8001e40:	40006400 	.word	0x40006400

08001e44 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8001e48:	4b29      	ldr	r3, [pc, #164]	@ (8001ef0 <MX_USB_PCD_Init+0xac>)
 8001e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ef4 <MX_USB_PCD_Init+0xb0>)
 8001e4c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001e50:	4b27      	ldr	r3, [pc, #156]	@ (8001ef0 <MX_USB_PCD_Init+0xac>)
 8001e52:	4a29      	ldr	r2, [pc, #164]	@ (8001ef8 <MX_USB_PCD_Init+0xb4>)
 8001e54:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8001e56:	4b26      	ldr	r3, [pc, #152]	@ (8001ef0 <MX_USB_PCD_Init+0xac>)
 8001e58:	2208      	movs	r2, #8
 8001e5a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8001e5c:	4b24      	ldr	r3, [pc, #144]	@ (8001ef0 <MX_USB_PCD_Init+0xac>)
 8001e5e:	2202      	movs	r2, #2
 8001e60:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e62:	4b23      	ldr	r3, [pc, #140]	@ (8001ef0 <MX_USB_PCD_Init+0xac>)
 8001e64:	2202      	movs	r2, #2
 8001e66:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8001e68:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <MX_USB_PCD_Init+0xac>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8001e6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ef0 <MX_USB_PCD_Init+0xac>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8001e74:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef0 <MX_USB_PCD_Init+0xac>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <MX_USB_PCD_Init+0xac>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <MX_USB_PCD_Init+0xac>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8001e86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <MX_USB_PCD_Init+0xac>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8001e8c:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <MX_USB_PCD_Init+0xac>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8001e92:	4817      	ldr	r0, [pc, #92]	@ (8001ef0 <MX_USB_PCD_Init+0xac>)
 8001e94:	f002 fe9f 	bl	8004bd6 <HAL_PCD_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8001e9e:	f000 f93f 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	4915      	ldr	r1, [pc, #84]	@ (8001efc <MX_USB_PCD_Init+0xb8>)
 8001ea6:	4813      	ldr	r0, [pc, #76]	@ (8001ef4 <MX_USB_PCD_Init+0xb0>)
 8001ea8:	f00e ffe6 	bl	8010e78 <USBD_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8001eb2:	f000 f935 	bl	8002120 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001eb6:	4912      	ldr	r1, [pc, #72]	@ (8001f00 <MX_USB_PCD_Init+0xbc>)
 8001eb8:	480e      	ldr	r0, [pc, #56]	@ (8001ef4 <MX_USB_PCD_Init+0xb0>)
 8001eba:	f00f f80d 	bl	8010ed8 <USBD_RegisterClass>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8001ec4:	f000 f92c 	bl	8002120 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8001ec8:	490e      	ldr	r1, [pc, #56]	@ (8001f04 <MX_USB_PCD_Init+0xc0>)
 8001eca:	480a      	ldr	r0, [pc, #40]	@ (8001ef4 <MX_USB_PCD_Init+0xb0>)
 8001ecc:	f00e fa8c 	bl	80103e8 <USBD_CDC_RegisterInterface>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8001ed6:	f000 f923 	bl	8002120 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8001eda:	4806      	ldr	r0, [pc, #24]	@ (8001ef4 <MX_USB_PCD_Init+0xb0>)
 8001edc:	f00f f832 	bl	8010f44 <USBD_Start>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8001ee6:	f000 f91b 	bl	8002120 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000047c 	.word	0x2000047c
 8001ef4:	20000760 	.word	0x20000760
 8001ef8:	40016000 	.word	0x40016000
 8001efc:	200000d4 	.word	0x200000d4
 8001f00:	20000038 	.word	0x20000038
 8001f04:	200000b8 	.word	0x200000b8

08001f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08c      	sub	sp, #48	@ 0x30
 8001f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0e:	f107 031c 	add.w	r3, r7, #28
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
 8001f1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f1e:	4b7a      	ldr	r3, [pc, #488]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f24:	4a78      	ldr	r2, [pc, #480]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001f26:	f043 0310 	orr.w	r3, r3, #16
 8001f2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f2e:	4b76      	ldr	r3, [pc, #472]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3c:	4b72      	ldr	r3, [pc, #456]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f42:	4a71      	ldr	r2, [pc, #452]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f4c:	4b6e      	ldr	r3, [pc, #440]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f5a:	4b6b      	ldr	r3, [pc, #428]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f60:	4a69      	ldr	r2, [pc, #420]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f6a:	4b67      	ldr	r3, [pc, #412]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f78:	4b63      	ldr	r3, [pc, #396]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f7e:	4a62      	ldr	r2, [pc, #392]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f88:	4b5f      	ldr	r3, [pc, #380]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f96:	4b5c      	ldr	r3, [pc, #368]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f9c:	4a5a      	ldr	r2, [pc, #360]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001f9e:	f043 0302 	orr.w	r3, r3, #2
 8001fa2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fa6:	4b58      	ldr	r3, [pc, #352]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fb4:	4b54      	ldr	r3, [pc, #336]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fba:	4a53      	ldr	r2, [pc, #332]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001fbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fc0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fc4:	4b50      	ldr	r3, [pc, #320]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd2:	4b4d      	ldr	r3, [pc, #308]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001fda:	f043 0308 	orr.w	r3, r3, #8
 8001fde:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fe2:	4b49      	ldr	r3, [pc, #292]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ff0:	2332      	movs	r3, #50	@ 0x32
 8001ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002000:	230b      	movs	r3, #11
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	4840      	ldr	r0, [pc, #256]	@ (800210c <MX_GPIO_Init+0x204>)
 800200c:	f001 fb32 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002010:	2384      	movs	r3, #132	@ 0x84
 8002012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201c:	2302      	movs	r3, #2
 800201e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002020:	230b      	movs	r3, #11
 8002022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	f107 031c 	add.w	r3, r7, #28
 8002028:	4619      	mov	r1, r3
 800202a:	4839      	ldr	r0, [pc, #228]	@ (8002110 <MX_GPIO_Init+0x208>)
 800202c:	f001 fb22 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8002030:	2310      	movs	r3, #16
 8002032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002034:	2303      	movs	r3, #3
 8002036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	4619      	mov	r1, r3
 8002042:	4833      	ldr	r0, [pc, #204]	@ (8002110 <MX_GPIO_Init+0x208>)
 8002044:	f001 fb16 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002048:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800204c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800205a:	2307      	movs	r3, #7
 800205c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205e:	f107 031c 	add.w	r3, r7, #28
 8002062:	4619      	mov	r1, r3
 8002064:	482b      	ldr	r0, [pc, #172]	@ (8002114 <MX_GPIO_Init+0x20c>)
 8002066:	f001 fb05 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 800206a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800206e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002070:	2303      	movs	r3, #3
 8002072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	4825      	ldr	r0, [pc, #148]	@ (8002114 <MX_GPIO_Init+0x20c>)
 8002080:	f001 faf8 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002084:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002092:	2302      	movs	r3, #2
 8002094:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002096:	230b      	movs	r3, #11
 8002098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	4619      	mov	r1, r3
 80020a0:	481c      	ldr	r0, [pc, #112]	@ (8002114 <MX_GPIO_Init+0x20c>)
 80020a2:	f001 fae7 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80020a6:	2380      	movs	r3, #128	@ 0x80
 80020a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002118 <MX_GPIO_Init+0x210>)
 80020ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80020b2:	f107 031c 	add.w	r3, r7, #28
 80020b6:	4619      	mov	r1, r3
 80020b8:	4818      	ldr	r0, [pc, #96]	@ (800211c <MX_GPIO_Init+0x214>)
 80020ba:	f001 fadb 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 80020be:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80020c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020cc:	2302      	movs	r3, #2
 80020ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020d0:	230b      	movs	r3, #11
 80020d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020d4:	f107 031c 	add.w	r3, r7, #28
 80020d8:	4619      	mov	r1, r3
 80020da:	4810      	ldr	r0, [pc, #64]	@ (800211c <MX_GPIO_Init+0x214>)
 80020dc:	f001 faca 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 80020e0:	23c0      	movs	r3, #192	@ 0xc0
 80020e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80020f0:	2308      	movs	r3, #8
 80020f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f4:	f107 031c 	add.w	r3, r7, #28
 80020f8:	4619      	mov	r1, r3
 80020fa:	4806      	ldr	r0, [pc, #24]	@ (8002114 <MX_GPIO_Init+0x20c>)
 80020fc:	f001 faba 	bl	8003674 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002100:	bf00      	nop
 8002102:	3730      	adds	r7, #48	@ 0x30
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	44020c00 	.word	0x44020c00
 800210c:	42020800 	.word	0x42020800
 8002110:	42020000 	.word	0x42020000
 8002114:	42020400 	.word	0x42020400
 8002118:	10110000 	.word	0x10110000
 800211c:	42021800 	.word	0x42021800

08002120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002124:	b672      	cpsid	i
}
 8002126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <Error_Handler+0x8>

0800212c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8002144:	4b0d      	ldr	r3, [pc, #52]	@ (800217c <HAL_HASH_MspInit+0x40>)
 8002146:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800214a:	4a0c      	ldr	r2, [pc, #48]	@ (800217c <HAL_HASH_MspInit+0x40>)
 800214c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002150:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002154:	4b09      	ldr	r3, [pc, #36]	@ (800217c <HAL_HASH_MspInit+0x40>)
 8002156:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800215a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    /* HASH interrupt Init */
    HAL_NVIC_SetPriority(HASH_IRQn, 0, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	2075      	movs	r0, #117	@ 0x75
 8002168:	f001 f916 	bl	8003398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_IRQn);
 800216c:	2075      	movs	r0, #117	@ 0x75
 800216e:	f001 f92d 	bl	80033cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	44020c00 	.word	0x44020c00

08002180 <HAL_HASH_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspDeInit(HASH_HandleTypeDef* hhash)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspDeInit 0 */

  /* USER CODE END HASH_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_HASH_CLK_DISABLE();
 8002188:	4b07      	ldr	r3, [pc, #28]	@ (80021a8 <HAL_HASH_MspDeInit+0x28>)
 800218a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800218e:	4a06      	ldr	r2, [pc, #24]	@ (80021a8 <HAL_HASH_MspDeInit+0x28>)
 8002190:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002194:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

    /* HASH interrupt DeInit */
    HAL_NVIC_DisableIRQ(HASH_IRQn);
 8002198:	2075      	movs	r0, #117	@ 0x75
 800219a:	f001 f925 	bl	80033e8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN HASH_MspDeInit 1 */

  /* USER CODE END HASH_MspDeInit 1 */

}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	44020c00 	.word	0x44020c00

080021ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b0cc      	sub	sp, #304	@ 0x130
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80021b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80021ba:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80021d0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021d4:	4618      	mov	r0, r3
 80021d6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80021da:	461a      	mov	r2, r3
 80021dc:	2100      	movs	r1, #0
 80021de:	f010 fb2d 	bl	801283c <memset>
  if(hi2c->Instance==I2C1)
 80021e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80021e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a33      	ldr	r2, [pc, #204]	@ (80022bc <HAL_I2C_MspInit+0x110>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d15e      	bne.n	80022b2 <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80021f8:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80021fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002208:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800220c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002210:	2200      	movs	r2, #0
 8002212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002216:	f107 0310 	add.w	r3, r7, #16
 800221a:	4618      	mov	r0, r3
 800221c:	f005 f8f6 	bl	800740c <HAL_RCCEx_PeriphCLKConfig>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8002226:	f7ff ff7b 	bl	8002120 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222a:	4b25      	ldr	r3, [pc, #148]	@ (80022c0 <HAL_I2C_MspInit+0x114>)
 800222c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002230:	4a23      	ldr	r2, [pc, #140]	@ (80022c0 <HAL_I2C_MspInit+0x114>)
 8002232:	f043 0302 	orr.w	r3, r3, #2
 8002236:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800223a:	4b21      	ldr	r3, [pc, #132]	@ (80022c0 <HAL_I2C_MspInit+0x114>)
 800223c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002240:	f003 0202 	and.w	r2, r3, #2
 8002244:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002248:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002252:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002256:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002258:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800225c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002260:	2312      	movs	r3, #18
 8002262:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002272:	2304      	movs	r3, #4
 8002274:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002278:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800227c:	4619      	mov	r1, r3
 800227e:	4811      	ldr	r0, [pc, #68]	@ (80022c4 <HAL_I2C_MspInit+0x118>)
 8002280:	f001 f9f8 	bl	8003674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002284:	4b0e      	ldr	r3, [pc, #56]	@ (80022c0 <HAL_I2C_MspInit+0x114>)
 8002286:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800228a:	4a0d      	ldr	r2, [pc, #52]	@ (80022c0 <HAL_I2C_MspInit+0x114>)
 800228c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002290:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002294:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <HAL_I2C_MspInit+0x114>)
 8002296:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800229a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800229e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80022a2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80022ac:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022b0:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80022b2:	bf00      	nop
 80022b4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40005400 	.word	0x40005400
 80022c0:	44020c00 	.word	0x44020c00
 80022c4:	42020400 	.word	0x42020400

080022c8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b0c6      	sub	sp, #280	@ 0x118
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022d6:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80022e0:	4618      	mov	r0, r3
 80022e2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80022e6:	461a      	mov	r2, r3
 80022e8:	2100      	movs	r1, #0
 80022ea:	f010 faa7 	bl	801283c <memset>
  if(hrng->Instance==RNG)
 80022ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002370 <HAL_RNG_MspInit+0xa8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d131      	bne.n	8002364 <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002300:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002304:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8002308:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002314:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800231c:	2200      	movs	r2, #0
 800231e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002322:	f107 0310 	add.w	r3, r7, #16
 8002326:	4618      	mov	r0, r3
 8002328:	f005 f870 	bl	800740c <HAL_RCCEx_PeriphCLKConfig>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 8002332:	f7ff fef5 	bl	8002120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002336:	4b0f      	ldr	r3, [pc, #60]	@ (8002374 <HAL_RNG_MspInit+0xac>)
 8002338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800233c:	4a0d      	ldr	r2, [pc, #52]	@ (8002374 <HAL_RNG_MspInit+0xac>)
 800233e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002342:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002346:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <HAL_RNG_MspInit+0xac>)
 8002348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800234c:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002350:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002354:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800235e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002362:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002364:	bf00      	nop
 8002366:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	420c0800 	.word	0x420c0800
 8002374:	44020c00 	.word	0x44020c00

08002378 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b0c6      	sub	sp, #280	@ 0x118
 800237c:	af00      	add	r7, sp, #0
 800237e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002382:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002386:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002388:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800238c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002390:	4618      	mov	r0, r3
 8002392:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8002396:	461a      	mov	r2, r3
 8002398:	2100      	movs	r1, #0
 800239a:	f010 fa4f 	bl	801283c <memset>
  if(hrtc->Instance==RTC)
 800239e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a21      	ldr	r2, [pc, #132]	@ (8002430 <HAL_RTC_MspInit+0xb8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d13a      	bne.n	8002426 <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023b0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023b4:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80023b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80023c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023d0:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d4:	f107 0310 	add.w	r3, r7, #16
 80023d8:	4618      	mov	r0, r3
 80023da:	f005 f817 	bl	800740c <HAL_RCCEx_PeriphCLKConfig>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 80023e4:	f7ff fe9c 	bl	8002120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023e8:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <HAL_RTC_MspInit+0xbc>)
 80023ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023ee:	4a11      	ldr	r2, [pc, #68]	@ (8002434 <HAL_RTC_MspInit+0xbc>)
 80023f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80023f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <HAL_RTC_MspInit+0xbc>)
 80023fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80023fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002434 <HAL_RTC_MspInit+0xbc>)
 8002400:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002404:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002408:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <HAL_RTC_MspInit+0xbc>)
 800240a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800240e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002412:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002416:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002420:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002424:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002426:	bf00      	nop
 8002428:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	44007800 	.word	0x44007800
 8002434:	44020c00 	.word	0x44020c00

08002438 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b0ce      	sub	sp, #312	@ 0x138
 800243c:	af00      	add	r7, sp, #0
 800243e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002442:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002446:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002458:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800245c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002460:	4618      	mov	r0, r3
 8002462:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8002466:	461a      	mov	r2, r3
 8002468:	2100      	movs	r1, #0
 800246a:	f010 f9e7 	bl	801283c <memset>
  if(hspi->Instance==SPI1)
 800246e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002472:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a49      	ldr	r2, [pc, #292]	@ (80025a0 <HAL_SPI_MspInit+0x168>)
 800247c:	4293      	cmp	r3, r2
 800247e:	f040 808a 	bne.w	8002596 <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002482:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002486:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800248a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8002496:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800249a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800249e:	2200      	movs	r2, #0
 80024a0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024a4:	f107 0318 	add.w	r3, r7, #24
 80024a8:	4618      	mov	r0, r3
 80024aa:	f004 ffaf 	bl	800740c <HAL_RCCEx_PeriphCLKConfig>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 80024b4:	f7ff fe34 	bl	8002120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024b8:	4b3a      	ldr	r3, [pc, #232]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 80024ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024be:	4a39      	ldr	r2, [pc, #228]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 80024c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024c4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80024c8:	4b36      	ldr	r3, [pc, #216]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 80024ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80024d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80024d6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80024e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80024e4:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e6:	4b2f      	ldr	r3, [pc, #188]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 80024e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024ec:	4a2d      	ldr	r2, [pc, #180]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024f6:	4b2b      	ldr	r3, [pc, #172]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 80024f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024fc:	f003 0201 	and.w	r2, r3, #1
 8002500:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002504:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800250e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002512:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002514:	4b23      	ldr	r3, [pc, #140]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 8002516:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800251a:	4a22      	ldr	r2, [pc, #136]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002524:	4b1f      	ldr	r3, [pc, #124]	@ (80025a4 <HAL_SPI_MspInit+0x16c>)
 8002526:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800252a:	f003 0208 	and.w	r2, r3, #8
 800252e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002532:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800253c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002540:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002542:	2360      	movs	r3, #96	@ 0x60
 8002544:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800255a:	2305      	movs	r3, #5
 800255c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002560:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8002564:	4619      	mov	r1, r3
 8002566:	4810      	ldr	r0, [pc, #64]	@ (80025a8 <HAL_SPI_MspInit+0x170>)
 8002568:	f001 f884 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800256c:	2380      	movs	r3, #128	@ 0x80
 800256e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002584:	2305      	movs	r3, #5
 8002586:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800258a:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800258e:	4619      	mov	r1, r3
 8002590:	4806      	ldr	r0, [pc, #24]	@ (80025ac <HAL_SPI_MspInit+0x174>)
 8002592:	f001 f86f 	bl	8003674 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002596:	bf00      	nop
 8002598:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40013000 	.word	0x40013000
 80025a4:	44020c00 	.word	0x44020c00
 80025a8:	42020000 	.word	0x42020000
 80025ac:	42020c00 	.word	0x42020c00

080025b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b0d0      	sub	sp, #320	@ 0x140
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025ba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025be:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025d4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025d8:	4618      	mov	r0, r3
 80025da:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80025de:	461a      	mov	r2, r3
 80025e0:	2100      	movs	r1, #0
 80025e2:	f010 f92b 	bl	801283c <memset>
  if(huart->Instance==USART2)
 80025e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025ea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a7c      	ldr	r2, [pc, #496]	@ (80027e4 <HAL_UART_MspInit+0x234>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	f040 808a 	bne.w	800270e <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025fe:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8002602:	f04f 0202 	mov.w	r2, #2
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800260e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002612:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002616:	2200      	movs	r2, #0
 8002618:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800261a:	f107 0320 	add.w	r3, r7, #32
 800261e:	4618      	mov	r0, r3
 8002620:	f004 fef4 	bl	800740c <HAL_RCCEx_PeriphCLKConfig>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 800262a:	f7ff fd79 	bl	8002120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800262e:	4b6e      	ldr	r3, [pc, #440]	@ (80027e8 <HAL_UART_MspInit+0x238>)
 8002630:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002634:	4a6c      	ldr	r2, [pc, #432]	@ (80027e8 <HAL_UART_MspInit+0x238>)
 8002636:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800263a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800263e:	4b6a      	ldr	r3, [pc, #424]	@ (80027e8 <HAL_UART_MspInit+0x238>)
 8002640:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002644:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8002648:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800264c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002656:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800265a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265c:	4b62      	ldr	r3, [pc, #392]	@ (80027e8 <HAL_UART_MspInit+0x238>)
 800265e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002662:	4a61      	ldr	r2, [pc, #388]	@ (80027e8 <HAL_UART_MspInit+0x238>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800266c:	4b5e      	ldr	r3, [pc, #376]	@ (80027e8 <HAL_UART_MspInit+0x238>)
 800266e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002672:	f003 0201 	and.w	r2, r3, #1
 8002676:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800267a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002684:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002688:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800268a:	4b57      	ldr	r3, [pc, #348]	@ (80027e8 <HAL_UART_MspInit+0x238>)
 800268c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002690:	4a55      	ldr	r2, [pc, #340]	@ (80027e8 <HAL_UART_MspInit+0x238>)
 8002692:	f043 0308 	orr.w	r3, r3, #8
 8002696:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800269a:	4b53      	ldr	r3, [pc, #332]	@ (80027e8 <HAL_UART_MspInit+0x238>)
 800269c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026a0:	f003 0208 	and.w	r2, r3, #8
 80026a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80026b6:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026b8:	2308      	movs	r3, #8
 80026ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026d0:	2307      	movs	r3, #7
 80026d2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80026da:	4619      	mov	r1, r3
 80026dc:	4843      	ldr	r0, [pc, #268]	@ (80027ec <HAL_UART_MspInit+0x23c>)
 80026de:	f000 ffc9 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026e2:	2320      	movs	r3, #32
 80026e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e8:	2302      	movs	r3, #2
 80026ea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026fa:	2307      	movs	r3, #7
 80026fc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002700:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002704:	4619      	mov	r1, r3
 8002706:	483a      	ldr	r0, [pc, #232]	@ (80027f0 <HAL_UART_MspInit+0x240>)
 8002708:	f000 ffb4 	bl	8003674 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800270c:	e065      	b.n	80027da <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART6)
 800270e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002712:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a36      	ldr	r2, [pc, #216]	@ (80027f4 <HAL_UART_MspInit+0x244>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d15c      	bne.n	80027da <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002720:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002724:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8002728:	f04f 0220 	mov.w	r2, #32
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002734:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002738:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800273c:	2200      	movs	r2, #0
 800273e:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002740:	f107 0320 	add.w	r3, r7, #32
 8002744:	4618      	mov	r0, r3
 8002746:	f004 fe61 	bl	800740c <HAL_RCCEx_PeriphCLKConfig>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8002750:	f7ff fce6 	bl	8002120 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002754:	4b24      	ldr	r3, [pc, #144]	@ (80027e8 <HAL_UART_MspInit+0x238>)
 8002756:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800275a:	4a23      	ldr	r2, [pc, #140]	@ (80027e8 <HAL_UART_MspInit+0x238>)
 800275c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002760:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002764:	4b20      	ldr	r3, [pc, #128]	@ (80027e8 <HAL_UART_MspInit+0x238>)
 8002766:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800276a:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 800276e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002772:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800277c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002780:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002782:	4b19      	ldr	r3, [pc, #100]	@ (80027e8 <HAL_UART_MspInit+0x238>)
 8002784:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002788:	4a17      	ldr	r2, [pc, #92]	@ (80027e8 <HAL_UART_MspInit+0x238>)
 800278a:	f043 0304 	orr.w	r3, r3, #4
 800278e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002792:	4b15      	ldr	r3, [pc, #84]	@ (80027e8 <HAL_UART_MspInit+0x238>)
 8002794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002798:	f003 0204 	and.w	r2, r3, #4
 800279c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027a0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027aa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027ae:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027b0:	23c0      	movs	r3, #192	@ 0xc0
 80027b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80027c8:	2307      	movs	r3, #7
 80027ca:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ce:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80027d2:	4619      	mov	r1, r3
 80027d4:	4808      	ldr	r0, [pc, #32]	@ (80027f8 <HAL_UART_MspInit+0x248>)
 80027d6:	f000 ff4d 	bl	8003674 <HAL_GPIO_Init>
}
 80027da:	bf00      	nop
 80027dc:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40004400 	.word	0x40004400
 80027e8:	44020c00 	.word	0x44020c00
 80027ec:	42020000 	.word	0x42020000
 80027f0:	42020c00 	.word	0x42020c00
 80027f4:	40006400 	.word	0x40006400
 80027f8:	42020800 	.word	0x42020800

080027fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0c6      	sub	sp, #280	@ 0x118
 8002800:	af00      	add	r7, sp, #0
 8002802:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002806:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800280a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800280c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002814:	4618      	mov	r0, r3
 8002816:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800281a:	461a      	mov	r2, r3
 800281c:	2100      	movs	r1, #0
 800281e:	f010 f80d 	bl	801283c <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8002822:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002826:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a22      	ldr	r2, [pc, #136]	@ (80028b8 <HAL_PCD_MspInit+0xbc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d13b      	bne.n	80028ac <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002834:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002838:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0310 	mov.w	r3, #16
 8002844:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002848:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800284c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002850:	2230      	movs	r2, #48	@ 0x30
 8002852:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002856:	f107 0310 	add.w	r3, r7, #16
 800285a:	4618      	mov	r0, r3
 800285c:	f004 fdd6 	bl	800740c <HAL_RCCEx_PeriphCLKConfig>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 8002866:	f7ff fc5b 	bl	8002120 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 800286a:	f003 fe45 	bl	80064f8 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800286e:	4b13      	ldr	r3, [pc, #76]	@ (80028bc <HAL_PCD_MspInit+0xc0>)
 8002870:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002874:	4a11      	ldr	r2, [pc, #68]	@ (80028bc <HAL_PCD_MspInit+0xc0>)
 8002876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800287a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800287e:	4b0f      	ldr	r3, [pc, #60]	@ (80028bc <HAL_PCD_MspInit+0xc0>)
 8002880:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002884:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8002888:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800288c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002896:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800289a:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2100      	movs	r1, #0
 80028a0:	204a      	movs	r0, #74	@ 0x4a
 80028a2:	f000 fd79 	bl	8003398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80028a6:	204a      	movs	r0, #74	@ 0x4a
 80028a8:	f000 fd90 	bl	80033cc <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 80028ac:	bf00      	nop
 80028ae:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40016000 	.word	0x40016000
 80028bc:	44020c00 	.word	0x44020c00

080028c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028c4:	bf00      	nop
 80028c6:	e7fd      	b.n	80028c4 <NMI_Handler+0x4>

080028c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028cc:	bf00      	nop
 80028ce:	e7fd      	b.n	80028cc <HardFault_Handler+0x4>

080028d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <MemManage_Handler+0x4>

080028d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <BusFault_Handler+0x4>

080028e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <UsageFault_Handler+0x4>

080028e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002916:	f000 fc1f 	bl	8003158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}

0800291e <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002922:	2000      	movs	r0, #0
 8002924:	f000 fa78 	bl	8002e18 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}

0800292c <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8002930:	4802      	ldr	r0, [pc, #8]	@ (800293c <USB_DRD_FS_IRQHandler+0x10>)
 8002932:	f002 fa73 	bl	8004e1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	2000047c 	.word	0x2000047c

08002940 <HASH_IRQHandler>:

/**
  * @brief This function handles HASH global interrupt.
  */
void HASH_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_IRQn 0 */

  /* USER CODE END HASH_IRQn 0 */
  HAL_HASH_IRQHandler(&hhash);
 8002944:	4802      	ldr	r0, [pc, #8]	@ (8002950 <HASH_IRQHandler+0x10>)
 8002946:	f001 f8e1 	bl	8003b0c <HAL_HASH_IRQHandler>
  /* USER CODE BEGIN HASH_IRQn 1 */

  /* USER CODE END HASH_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200001ec 	.word	0x200001ec

08002954 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	e00a      	b.n	800297c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002966:	f3af 8000 	nop.w
 800296a:	4601      	mov	r1, r0
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	60ba      	str	r2, [r7, #8]
 8002972:	b2ca      	uxtb	r2, r1
 8002974:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	3301      	adds	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	429a      	cmp	r2, r3
 8002982:	dbf0      	blt.n	8002966 <_read+0x12>
  }

  return len;
 8002984:	687b      	ldr	r3, [r7, #4]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	e009      	b.n	80029b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	60ba      	str	r2, [r7, #8]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fabb 	bl	8002f24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3301      	adds	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	dbf1      	blt.n	80029a0 <_write+0x12>
  }
  return len;
 80029bc:	687b      	ldr	r3, [r7, #4]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <_close>:

int _close(int file)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029ee:	605a      	str	r2, [r3, #4]
  return 0;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <_isatty>:

int _isatty(int file)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a06:	2301      	movs	r3, #1
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a38:	4a14      	ldr	r2, [pc, #80]	@ (8002a8c <_sbrk+0x5c>)
 8002a3a:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <_sbrk+0x60>)
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a44:	4b13      	ldr	r3, [pc, #76]	@ (8002a94 <_sbrk+0x64>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d102      	bne.n	8002a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a4c:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <_sbrk+0x64>)
 8002a4e:	4a12      	ldr	r2, [pc, #72]	@ (8002a98 <_sbrk+0x68>)
 8002a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a52:	4b10      	ldr	r3, [pc, #64]	@ (8002a94 <_sbrk+0x64>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d207      	bcs.n	8002a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a60:	f00f ff3a 	bl	80128d8 <__errno>
 8002a64:	4603      	mov	r3, r0
 8002a66:	220c      	movs	r2, #12
 8002a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6e:	e009      	b.n	8002a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a70:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <_sbrk+0x64>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a76:	4b07      	ldr	r3, [pc, #28]	@ (8002a94 <_sbrk+0x64>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	4a05      	ldr	r2, [pc, #20]	@ (8002a94 <_sbrk+0x64>)
 8002a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a82:	68fb      	ldr	r3, [r7, #12]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	200a0000 	.word	0x200a0000
 8002a90:	00000500 	.word	0x00000500
 8002a94:	20000a3c 	.word	0x20000a3c
 8002a98:	20011360 	.word	0x20011360

08002a9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002aa2:	4b35      	ldr	r3, [pc, #212]	@ (8002b78 <SystemInit+0xdc>)
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa8:	4a33      	ldr	r2, [pc, #204]	@ (8002b78 <SystemInit+0xdc>)
 8002aaa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002aae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8002ab2:	4b32      	ldr	r3, [pc, #200]	@ (8002b7c <SystemInit+0xe0>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002ab8:	4b30      	ldr	r3, [pc, #192]	@ (8002b7c <SystemInit+0xe0>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002abe:	4b2f      	ldr	r3, [pc, #188]	@ (8002b7c <SystemInit+0xe0>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8002ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8002b7c <SystemInit+0xe0>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	492c      	ldr	r1, [pc, #176]	@ (8002b7c <SystemInit+0xe0>)
 8002aca:	4b2d      	ldr	r3, [pc, #180]	@ (8002b80 <SystemInit+0xe4>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8002ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b7c <SystemInit+0xe0>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8002ad6:	4b29      	ldr	r3, [pc, #164]	@ (8002b7c <SystemInit+0xe0>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8002adc:	4b27      	ldr	r3, [pc, #156]	@ (8002b7c <SystemInit+0xe0>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8002ae2:	4b26      	ldr	r3, [pc, #152]	@ (8002b7c <SystemInit+0xe0>)
 8002ae4:	4a27      	ldr	r2, [pc, #156]	@ (8002b84 <SystemInit+0xe8>)
 8002ae6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002ae8:	4b24      	ldr	r3, [pc, #144]	@ (8002b7c <SystemInit+0xe0>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8002aee:	4b23      	ldr	r3, [pc, #140]	@ (8002b7c <SystemInit+0xe0>)
 8002af0:	4a24      	ldr	r2, [pc, #144]	@ (8002b84 <SystemInit+0xe8>)
 8002af2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8002af4:	4b21      	ldr	r3, [pc, #132]	@ (8002b7c <SystemInit+0xe0>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8002afa:	4b20      	ldr	r3, [pc, #128]	@ (8002b7c <SystemInit+0xe0>)
 8002afc:	4a21      	ldr	r2, [pc, #132]	@ (8002b84 <SystemInit+0xe8>)
 8002afe:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8002b00:	4b1e      	ldr	r3, [pc, #120]	@ (8002b7c <SystemInit+0xe0>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002b06:	4b1d      	ldr	r3, [pc, #116]	@ (8002b7c <SystemInit+0xe0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002b7c <SystemInit+0xe0>)
 8002b0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002b12:	4b1a      	ldr	r3, [pc, #104]	@ (8002b7c <SystemInit+0xe0>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b18:	4b17      	ldr	r3, [pc, #92]	@ (8002b78 <SystemInit+0xdc>)
 8002b1a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b1e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002b20:	4b19      	ldr	r3, [pc, #100]	@ (8002b88 <SystemInit+0xec>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002b28:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8002b30:	d003      	beq.n	8002b3a <SystemInit+0x9e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002b38:	d117      	bne.n	8002b6a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8002b3a:	4b13      	ldr	r3, [pc, #76]	@ (8002b88 <SystemInit+0xec>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002b46:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <SystemInit+0xec>)
 8002b48:	4a10      	ldr	r2, [pc, #64]	@ (8002b8c <SystemInit+0xf0>)
 8002b4a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b88 <SystemInit+0xec>)
 8002b4e:	4a10      	ldr	r2, [pc, #64]	@ (8002b90 <SystemInit+0xf4>)
 8002b50:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002b52:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <SystemInit+0xec>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4a0c      	ldr	r2, [pc, #48]	@ (8002b88 <SystemInit+0xec>)
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <SystemInit+0xec>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	4a09      	ldr	r2, [pc, #36]	@ (8002b88 <SystemInit+0xec>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	61d3      	str	r3, [r2, #28]
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000ed00 	.word	0xe000ed00
 8002b7c:	44020c00 	.word	0x44020c00
 8002b80:	eae2eae3 	.word	0xeae2eae3
 8002b84:	01010280 	.word	0x01010280
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	08192a3b 	.word	0x08192a3b
 8002b90:	4c5d6e7f 	.word	0x4c5d6e7f

08002b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b94:	480d      	ldr	r0, [pc, #52]	@ (8002bcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b96:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b98:	f7ff ff80 	bl	8002a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b9c:	480c      	ldr	r0, [pc, #48]	@ (8002bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b9e:	490d      	ldr	r1, [pc, #52]	@ (8002bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd8 <LoopForever+0xe>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba4:	e002      	b.n	8002bac <LoopCopyDataInit>

08002ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002baa:	3304      	adds	r3, #4

08002bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb0:	d3f9      	bcc.n	8002ba6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8002be0 <LoopForever+0x16>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb8:	e001      	b.n	8002bbe <LoopFillZerobss>

08002bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bbc:	3204      	adds	r2, #4

08002bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc0:	d3fb      	bcc.n	8002bba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002bc2:	f00f fe8f 	bl	80128e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bc6:	f7fe fe99 	bl	80018fc <main>

08002bca <LoopForever>:

LoopForever:
    b LoopForever
 8002bca:	e7fe      	b.n	8002bca <LoopForever>
  ldr   r0, =_estack
 8002bcc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8002bd8:	080147c8 	.word	0x080147c8
  ldr r2, =_sbss
 8002bdc:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8002be0:	20011360 	.word	0x20011360

08002be4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002be4:	e7fe      	b.n	8002be4 <ADC1_IRQHandler>
	...

08002be8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08c      	sub	sp, #48	@ 0x30
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d009      	beq.n	8002c10 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d006      	beq.n	8002c10 <BSP_LED_Init+0x28>
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d003      	beq.n	8002c10 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002c08:	f06f 0301 	mvn.w	r3, #1
 8002c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c0e:	e055      	b.n	8002cbc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d10f      	bne.n	8002c36 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8002c16:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc8 <BSP_LED_Init+0xe0>)
 8002c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc8 <BSP_LED_Init+0xe0>)
 8002c1e:	f043 0320 	orr.w	r3, r3, #32
 8002c22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c26:	4b28      	ldr	r3, [pc, #160]	@ (8002cc8 <BSP_LED_Init+0xe0>)
 8002c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	e021      	b.n	8002c7a <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10f      	bne.n	8002c5c <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8002c3c:	4b22      	ldr	r3, [pc, #136]	@ (8002cc8 <BSP_LED_Init+0xe0>)
 8002c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c42:	4a21      	ldr	r2, [pc, #132]	@ (8002cc8 <BSP_LED_Init+0xe0>)
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc8 <BSP_LED_Init+0xe0>)
 8002c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	e00e      	b.n	8002c7a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc8 <BSP_LED_Init+0xe0>)
 8002c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c62:	4a19      	ldr	r2, [pc, #100]	@ (8002cc8 <BSP_LED_Init+0xe0>)
 8002c64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c68:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c6c:	4b16      	ldr	r3, [pc, #88]	@ (8002cc8 <BSP_LED_Init+0xe0>)
 8002c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	4a13      	ldr	r2, [pc, #76]	@ (8002ccc <BSP_LED_Init+0xe4>)
 8002c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c82:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002c84:	2301      	movs	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	4a0f      	ldr	r2, [pc, #60]	@ (8002cd0 <BSP_LED_Init+0xe8>)
 8002c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c98:	f107 0218 	add.w	r2, r7, #24
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fce8 	bl	8003674 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <BSP_LED_Init+0xe8>)
 8002ca8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	4a07      	ldr	r2, [pc, #28]	@ (8002ccc <BSP_LED_Init+0xe4>)
 8002cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f000 fe2e 	bl	8003918 <HAL_GPIO_WritePin>
  }

  return ret;
 8002cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3730      	adds	r7, #48	@ 0x30
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	44020c00 	.word	0x44020c00
 8002ccc:	08014750 	.word	0x08014750
 8002cd0:	2000000c 	.word	0x2000000c

08002cd4 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d009      	beq.n	8002cfc <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <BSP_LED_Toggle+0x28>
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d003      	beq.n	8002cfc <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002cf4:	f06f 0301 	mvn.w	r3, #1
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	e00b      	b.n	8002d14 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	4a08      	ldr	r2, [pc, #32]	@ (8002d20 <BSP_LED_Toggle+0x4c>)
 8002d00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	4907      	ldr	r1, [pc, #28]	@ (8002d24 <BSP_LED_Toggle+0x50>)
 8002d08:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	f000 fe1a 	bl	8003948 <HAL_GPIO_TogglePin>
  }

  return ret;
 8002d14:	68fb      	ldr	r3, [r7, #12]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	2000000c 	.word	0x2000000c
 8002d24:	08014750 	.word	0x08014750

08002d28 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	460a      	mov	r2, r1
 8002d32:	71fb      	strb	r3, [r7, #7]
 8002d34:	4613      	mov	r3, r2
 8002d36:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002d38:	4b30      	ldr	r3, [pc, #192]	@ (8002dfc <BSP_PB_Init+0xd4>)
 8002d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d3e:	4a2f      	ldr	r2, [pc, #188]	@ (8002dfc <BSP_PB_Init+0xd4>)
 8002d40:	f043 0304 	orr.w	r3, r3, #4
 8002d44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d48:	4b2c      	ldr	r3, [pc, #176]	@ (8002dfc <BSP_PB_Init+0xd4>)
 8002d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002d56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d5a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d60:	2302      	movs	r3, #2
 8002d62:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002d64:	79bb      	ldrb	r3, [r7, #6]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10c      	bne.n	8002d84 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	4a23      	ldr	r2, [pc, #140]	@ (8002e00 <BSP_PB_Init+0xd8>)
 8002d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d76:	f107 020c 	add.w	r2, r7, #12
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fc79 	bl	8003674 <HAL_GPIO_Init>
 8002d82:	e036      	b.n	8002df2 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002d84:	4b1f      	ldr	r3, [pc, #124]	@ (8002e04 <BSP_PB_Init+0xdc>)
 8002d86:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e00 <BSP_PB_Init+0xd8>)
 8002d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d90:	f107 020c 	add.w	r2, r7, #12
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fc6c 	bl	8003674 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002d9c:	79fa      	ldrb	r2, [r7, #7]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4a18      	ldr	r2, [pc, #96]	@ (8002e08 <BSP_PB_Init+0xe0>)
 8002da8:	441a      	add	r2, r3
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	4917      	ldr	r1, [pc, #92]	@ (8002e0c <BSP_PB_Init+0xe4>)
 8002dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002db2:	4619      	mov	r1, r3
 8002db4:	4610      	mov	r0, r2
 8002db6:	f000 fc01 	bl	80035bc <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002dba:	79fa      	ldrb	r2, [r7, #7]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4a10      	ldr	r2, [pc, #64]	@ (8002e08 <BSP_PB_Init+0xe0>)
 8002dc6:	1898      	adds	r0, r3, r2
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	4a11      	ldr	r2, [pc, #68]	@ (8002e10 <BSP_PB_Init+0xe8>)
 8002dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	f000 fbc6 	bl	8003564 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002dd8:	2018      	movs	r0, #24
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e14 <BSP_PB_Init+0xec>)
 8002dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de2:	2200      	movs	r2, #0
 8002de4:	4619      	mov	r1, r3
 8002de6:	f000 fad7 	bl	8003398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002dea:	2318      	movs	r3, #24
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 faed 	bl	80033cc <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3720      	adds	r7, #32
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	44020c00 	.word	0x44020c00
 8002e00:	20000018 	.word	0x20000018
 8002e04:	10110000 	.word	0x10110000
 8002e08:	20000a40 	.word	0x20000a40
 8002e0c:	08014758 	.word	0x08014758
 8002e10:	2000001c 	.word	0x2000001c
 8002e14:	20000020 	.word	0x20000020

08002e18 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002e22:	79fa      	ldrb	r2, [r7, #7]
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4a04      	ldr	r2, [pc, #16]	@ (8002e40 <BSP_PB_IRQHandler+0x28>)
 8002e2e:	4413      	add	r3, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fbd7 	bl	80035e4 <HAL_EXTI_IRQHandler>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000a40 	.word	0x20000a40

08002e44 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002e72:	f06f 0301 	mvn.w	r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	e018      	b.n	8002eac <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	2294      	movs	r2, #148	@ 0x94
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb8 <BSP_COM_Init+0x5c>)
 8002e84:	4413      	add	r3, r2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f870 	bl	8002f6c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	2294      	movs	r2, #148	@ 0x94
 8002e90:	fb02 f303 	mul.w	r3, r2, r3
 8002e94:	4a08      	ldr	r2, [pc, #32]	@ (8002eb8 <BSP_COM_Init+0x5c>)
 8002e96:	4413      	add	r3, r2
 8002e98:	6839      	ldr	r1, [r7, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f80e 	bl	8002ebc <MX_USART_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002ea6:	f06f 0303 	mvn.w	r3, #3
 8002eaa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002eac:	68fb      	ldr	r3, [r7, #12]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000a4c 	.word	0x20000a4c

08002ebc <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8002ec6:	4b16      	ldr	r3, [pc, #88]	@ (8002f20 <MX_USART_Init+0x64>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	220c      	movs	r2, #12
 8002eda:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	895b      	ldrh	r3, [r3, #10]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	891b      	ldrh	r3, [r3, #8]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	899b      	ldrh	r3, [r3, #12]
 8002efc:	461a      	mov	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002f08:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f00a f896 	bl	800d042 <HAL_UART_Init>
 8002f16:	4603      	mov	r3, r0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000008 	.word	0x20000008

08002f24 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002f2c:	4b09      	ldr	r3, [pc, #36]	@ (8002f54 <__io_putchar+0x30>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	2394      	movs	r3, #148	@ 0x94
 8002f34:	fb02 f303 	mul.w	r3, r2, r3
 8002f38:	4a07      	ldr	r2, [pc, #28]	@ (8002f58 <__io_putchar+0x34>)
 8002f3a:	1898      	adds	r0, r3, r2
 8002f3c:	1d39      	adds	r1, r7, #4
 8002f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f42:	2201      	movs	r2, #1
 8002f44:	f00a f8cd 	bl	800d0e2 <HAL_UART_Transmit>
  return ch;
 8002f48:	687b      	ldr	r3, [r7, #4]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000ae0 	.word	0x20000ae0
 8002f58:	20000a4c 	.word	0x20000a4c

08002f5c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002f60:	2000      	movs	r0, #0
 8002f62:	f7ff ff6f 	bl	8002e44 <BSP_PB_Callback>
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	@ 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002f74:	4b27      	ldr	r3, [pc, #156]	@ (8003014 <COM1_MspInit+0xa8>)
 8002f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f7a:	4a26      	ldr	r2, [pc, #152]	@ (8003014 <COM1_MspInit+0xa8>)
 8002f7c:	f043 0308 	orr.w	r3, r3, #8
 8002f80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f84:	4b23      	ldr	r3, [pc, #140]	@ (8003014 <COM1_MspInit+0xa8>)
 8002f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002f92:	4b20      	ldr	r3, [pc, #128]	@ (8003014 <COM1_MspInit+0xa8>)
 8002f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f98:	4a1e      	ldr	r2, [pc, #120]	@ (8003014 <COM1_MspInit+0xa8>)
 8002f9a:	f043 0308 	orr.w	r3, r3, #8
 8002f9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8003014 <COM1_MspInit+0xa8>)
 8002fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002fb0:	4b18      	ldr	r3, [pc, #96]	@ (8003014 <COM1_MspInit+0xa8>)
 8002fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fb6:	4a17      	ldr	r2, [pc, #92]	@ (8003014 <COM1_MspInit+0xa8>)
 8002fb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fbc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002fc0:	4b14      	ldr	r3, [pc, #80]	@ (8003014 <COM1_MspInit+0xa8>)
 8002fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8002fce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fd2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002fe0:	2307      	movs	r3, #7
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4619      	mov	r1, r3
 8002fea:	480b      	ldr	r0, [pc, #44]	@ (8003018 <COM1_MspInit+0xac>)
 8002fec:	f000 fb42 	bl	8003674 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8002ff0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ff4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002ffa:	2307      	movs	r3, #7
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002ffe:	f107 0314 	add.w	r3, r7, #20
 8003002:	4619      	mov	r1, r3
 8003004:	4804      	ldr	r0, [pc, #16]	@ (8003018 <COM1_MspInit+0xac>)
 8003006:	f000 fb35 	bl	8003674 <HAL_GPIO_Init>
}
 800300a:	bf00      	nop
 800300c:	3728      	adds	r7, #40	@ 0x28
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	44020c00 	.word	0x44020c00
 8003018:	42020c00 	.word	0x42020c00

0800301c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003020:	2003      	movs	r0, #3
 8003022:	f000 f9ae 	bl	8003382 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003026:	f004 f867 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 800302a:	4602      	mov	r2, r0
 800302c:	4b0c      	ldr	r3, [pc, #48]	@ (8003060 <HAL_Init+0x44>)
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	490b      	ldr	r1, [pc, #44]	@ (8003064 <HAL_Init+0x48>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
 800303c:	4a0a      	ldr	r2, [pc, #40]	@ (8003068 <HAL_Init+0x4c>)
 800303e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003040:	2004      	movs	r0, #4
 8003042:	f000 fa01 	bl	8003448 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003046:	200f      	movs	r0, #15
 8003048:	f000 f810 	bl	800306c <HAL_InitTick>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e002      	b.n	800305c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003056:	f7ff f869 	bl	800212c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	44020c00 	.word	0x44020c00
 8003064:	08014738 	.word	0x08014738
 8003068:	20000004 	.word	0x20000004

0800306c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003078:	4b33      	ldr	r3, [pc, #204]	@ (8003148 <HAL_InitTick+0xdc>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e05c      	b.n	800313e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003084:	4b31      	ldr	r3, [pc, #196]	@ (800314c <HAL_InitTick+0xe0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b04      	cmp	r3, #4
 800308e:	d10c      	bne.n	80030aa <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8003090:	4b2f      	ldr	r3, [pc, #188]	@ (8003150 <HAL_InitTick+0xe4>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b2c      	ldr	r3, [pc, #176]	@ (8003148 <HAL_InitTick+0xdc>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	4619      	mov	r1, r3
 800309a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800309e:	fbb3 f3f1 	udiv	r3, r3, r1
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e037      	b.n	800311a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80030aa:	f000 fa25 	bl	80034f8 <HAL_SYSTICK_GetCLKSourceConfig>
 80030ae:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d023      	beq.n	80030fe <HAL_InitTick+0x92>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d82d      	bhi.n	8003118 <HAL_InitTick+0xac>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_InitTick+0x5e>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d00d      	beq.n	80030e4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80030c8:	e026      	b.n	8003118 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80030ca:	4b21      	ldr	r3, [pc, #132]	@ (8003150 <HAL_InitTick+0xe4>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003148 <HAL_InitTick+0xdc>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	4619      	mov	r1, r3
 80030d4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80030d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	60fb      	str	r3, [r7, #12]
        break;
 80030e2:	e01a      	b.n	800311a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80030e4:	4b18      	ldr	r3, [pc, #96]	@ (8003148 <HAL_InitTick+0xdc>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80030f2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80030f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fa:	60fb      	str	r3, [r7, #12]
        break;
 80030fc:	e00d      	b.n	800311a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80030fe:	4b12      	ldr	r3, [pc, #72]	@ (8003148 <HAL_InitTick+0xdc>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003108:	fbb3 f3f2 	udiv	r3, r3, r2
 800310c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003110:	fbb2 f3f3 	udiv	r3, r2, r3
 8003114:	60fb      	str	r3, [r7, #12]
        break;
 8003116:	e000      	b.n	800311a <HAL_InitTick+0xae>
        break;
 8003118:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f972 	bl	8003404 <HAL_SYSTICK_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e009      	b.n	800313e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800312a:	2200      	movs	r2, #0
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	f04f 30ff 	mov.w	r0, #4294967295
 8003132:	f000 f931 	bl	8003398 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8003136:	4a07      	ldr	r2, [pc, #28]	@ (8003154 <HAL_InitTick+0xe8>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000028 	.word	0x20000028
 800314c:	e000e010 	.word	0xe000e010
 8003150:	20000004 	.word	0x20000004
 8003154:	20000024 	.word	0x20000024

08003158 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800315c:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <HAL_IncTick+0x20>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	4b06      	ldr	r3, [pc, #24]	@ (800317c <HAL_IncTick+0x24>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4413      	add	r3, r2
 8003168:	4a04      	ldr	r2, [pc, #16]	@ (800317c <HAL_IncTick+0x24>)
 800316a:	6013      	str	r3, [r2, #0]
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000028 	.word	0x20000028
 800317c:	20000ae4 	.word	0x20000ae4

08003180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return uwTick;
 8003184:	4b03      	ldr	r3, [pc, #12]	@ (8003194 <HAL_GetTick+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000ae4 	.word	0x20000ae4

08003198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7ff ffee 	bl	8003180 <HAL_GetTick>
 80031a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d005      	beq.n	80031be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031b2:	4b0a      	ldr	r3, [pc, #40]	@ (80031dc <HAL_Delay+0x44>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4413      	add	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031be:	bf00      	nop
 80031c0:	f7ff ffde 	bl	8003180 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d8f7      	bhi.n	80031c0 <HAL_Delay+0x28>
  {
  }
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000028 	.word	0x20000028

080031e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <__NVIC_SetPriorityGrouping+0x44>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031fc:	4013      	ands	r3, r2
 80031fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800320c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003212:	4a04      	ldr	r2, [pc, #16]	@ (8003224 <__NVIC_SetPriorityGrouping+0x44>)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	60d3      	str	r3, [r2, #12]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800322c:	4b04      	ldr	r3, [pc, #16]	@ (8003240 <__NVIC_GetPriorityGrouping+0x18>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	f003 0307 	and.w	r3, r3, #7
}
 8003236:	4618      	mov	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800324e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003252:	2b00      	cmp	r3, #0
 8003254:	db0b      	blt.n	800326e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	4907      	ldr	r1, [pc, #28]	@ (800327c <__NVIC_EnableIRQ+0x38>)
 800325e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2001      	movs	r0, #1
 8003266:	fa00 f202 	lsl.w	r2, r0, r2
 800326a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000e100 	.word	0xe000e100

08003280 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800328a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800328e:	2b00      	cmp	r3, #0
 8003290:	db12      	blt.n	80032b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	f003 021f 	and.w	r2, r3, #31
 8003298:	490a      	ldr	r1, [pc, #40]	@ (80032c4 <__NVIC_DisableIRQ+0x44>)
 800329a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2001      	movs	r0, #1
 80032a2:	fa00 f202 	lsl.w	r2, r0, r2
 80032a6:	3320      	adds	r3, #32
 80032a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80032ac:	f3bf 8f4f 	dsb	sy
}
 80032b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032b2:	f3bf 8f6f 	isb	sy
}
 80032b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	e000e100 	.word	0xe000e100

080032c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	6039      	str	r1, [r7, #0]
 80032d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	db0a      	blt.n	80032f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	490c      	ldr	r1, [pc, #48]	@ (8003314 <__NVIC_SetPriority+0x4c>)
 80032e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032e6:	0112      	lsls	r2, r2, #4
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	440b      	add	r3, r1
 80032ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f0:	e00a      	b.n	8003308 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4908      	ldr	r1, [pc, #32]	@ (8003318 <__NVIC_SetPriority+0x50>)
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	3b04      	subs	r3, #4
 8003300:	0112      	lsls	r2, r2, #4
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	440b      	add	r3, r1
 8003306:	761a      	strb	r2, [r3, #24]
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000e100 	.word	0xe000e100
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	@ 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f1c3 0307 	rsb	r3, r3, #7
 8003336:	2b04      	cmp	r3, #4
 8003338:	bf28      	it	cs
 800333a:	2304      	movcs	r3, #4
 800333c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3304      	adds	r3, #4
 8003342:	2b06      	cmp	r3, #6
 8003344:	d902      	bls.n	800334c <NVIC_EncodePriority+0x30>
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3b03      	subs	r3, #3
 800334a:	e000      	b.n	800334e <NVIC_EncodePriority+0x32>
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	f04f 32ff 	mov.w	r2, #4294967295
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	401a      	ands	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003364:	f04f 31ff 	mov.w	r1, #4294967295
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	43d9      	mvns	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	4313      	orrs	r3, r2
         );
}
 8003376:	4618      	mov	r0, r3
 8003378:	3724      	adds	r7, #36	@ 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ff28 	bl	80031e0 <__NVIC_SetPriorityGrouping>
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033a6:	f7ff ff3f 	bl	8003228 <__NVIC_GetPriorityGrouping>
 80033aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	6978      	ldr	r0, [r7, #20]
 80033b2:	f7ff ffb3 	bl	800331c <NVIC_EncodePriority>
 80033b6:	4602      	mov	r2, r0
 80033b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ff82 	bl	80032c8 <__NVIC_SetPriority>
}
 80033c4:	bf00      	nop
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff ff32 	bl	8003244 <__NVIC_EnableIRQ>
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff ff42 	bl	8003280 <__NVIC_DisableIRQ>
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003414:	d301      	bcc.n	800341a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003416:	2301      	movs	r3, #1
 8003418:	e00d      	b.n	8003436 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800341a:	4a0a      	ldr	r2, [pc, #40]	@ (8003444 <HAL_SYSTICK_Config+0x40>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003422:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <HAL_SYSTICK_Config+0x40>)
 8003424:	2200      	movs	r2, #0
 8003426:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003428:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <HAL_SYSTICK_Config+0x40>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a05      	ldr	r2, [pc, #20]	@ (8003444 <HAL_SYSTICK_Config+0x40>)
 800342e:	f043 0303 	orr.w	r3, r3, #3
 8003432:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	e000e010 	.word	0xe000e010

08003448 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b04      	cmp	r3, #4
 8003454:	d844      	bhi.n	80034e0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003456:	a201      	add	r2, pc, #4	@ (adr r2, 800345c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345c:	0800347f 	.word	0x0800347f
 8003460:	0800349d 	.word	0x0800349d
 8003464:	080034bf 	.word	0x080034bf
 8003468:	080034e1 	.word	0x080034e1
 800346c:	08003471 	.word	0x08003471
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003470:	4b1f      	ldr	r3, [pc, #124]	@ (80034f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1e      	ldr	r2, [pc, #120]	@ (80034f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	6013      	str	r3, [r2, #0]
      break;
 800347c:	e031      	b.n	80034e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800347e:	4b1c      	ldr	r3, [pc, #112]	@ (80034f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1b      	ldr	r2, [pc, #108]	@ (80034f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003484:	f023 0304 	bic.w	r3, r3, #4
 8003488:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800348a:	4b1a      	ldr	r3, [pc, #104]	@ (80034f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800348c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003490:	4a18      	ldr	r2, [pc, #96]	@ (80034f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003492:	f023 030c 	bic.w	r3, r3, #12
 8003496:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800349a:	e022      	b.n	80034e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800349c:	4b14      	ldr	r3, [pc, #80]	@ (80034f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a13      	ldr	r2, [pc, #76]	@ (80034f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034a2:	f023 0304 	bic.w	r3, r3, #4
 80034a6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80034a8:	4b12      	ldr	r3, [pc, #72]	@ (80034f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034ae:	f023 030c 	bic.w	r3, r3, #12
 80034b2:	4a10      	ldr	r2, [pc, #64]	@ (80034f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80034bc:	e011      	b.n	80034e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80034be:	4b0c      	ldr	r3, [pc, #48]	@ (80034f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a0b      	ldr	r2, [pc, #44]	@ (80034f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034c4:	f023 0304 	bic.w	r3, r3, #4
 80034c8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80034ca:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034d0:	f023 030c 	bic.w	r3, r3, #12
 80034d4:	4a07      	ldr	r2, [pc, #28]	@ (80034f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034d6:	f043 0308 	orr.w	r3, r3, #8
 80034da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80034de:	e000      	b.n	80034e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80034e0:	bf00      	nop
  }
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	e000e010 	.word	0xe000e010
 80034f4:	44020c00 	.word	0x44020c00

080034f8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80034fe:	4b17      	ldr	r3, [pc, #92]	@ (800355c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800350a:	2304      	movs	r3, #4
 800350c:	607b      	str	r3, [r7, #4]
 800350e:	e01e      	b.n	800354e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8003510:	4b13      	ldr	r3, [pc, #76]	@ (8003560 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8003512:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b08      	cmp	r3, #8
 8003520:	d00f      	beq.n	8003542 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b08      	cmp	r3, #8
 8003526:	d80f      	bhi.n	8003548 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b04      	cmp	r3, #4
 8003532:	d003      	beq.n	800353c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003534:	e008      	b.n	8003548 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003536:	2300      	movs	r3, #0
 8003538:	607b      	str	r3, [r7, #4]
        break;
 800353a:	e008      	b.n	800354e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800353c:	2301      	movs	r3, #1
 800353e:	607b      	str	r3, [r7, #4]
        break;
 8003540:	e005      	b.n	800354e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003542:	2302      	movs	r3, #2
 8003544:	607b      	str	r3, [r7, #4]
        break;
 8003546:	e002      	b.n	800354e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003548:	2300      	movs	r3, #0
 800354a:	607b      	str	r3, [r7, #4]
        break;
 800354c:	bf00      	nop
    }
  }
  return systick_source;
 800354e:	687b      	ldr	r3, [r7, #4]
}
 8003550:	4618      	mov	r0, r3
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e000e010 	.word	0xe000e010
 8003560:	44020c00 	.word	0x44020c00

08003564 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	460b      	mov	r3, r1
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003576:	7afb      	ldrb	r3, [r7, #11]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d011      	beq.n	80035a0 <HAL_EXTI_RegisterCallback+0x3c>
 800357c:	2b02      	cmp	r3, #2
 800357e:	dc13      	bgt.n	80035a8 <HAL_EXTI_RegisterCallback+0x44>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_EXTI_RegisterCallback+0x26>
 8003584:	2b01      	cmp	r3, #1
 8003586:	d007      	beq.n	8003598 <HAL_EXTI_RegisterCallback+0x34>
 8003588:	e00e      	b.n	80035a8 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	609a      	str	r2, [r3, #8]
      break;
 8003596:	e00a      	b.n	80035ae <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	605a      	str	r2, [r3, #4]
      break;
 800359e:	e006      	b.n	80035ae <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	609a      	str	r2, [r3, #8]
      break;
 80035a6:	e002      	b.n	80035ae <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	75fb      	strb	r3, [r7, #23]
      break;
 80035ac:	bf00      	nop
  }

  return status;
 80035ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e003      	b.n	80035d8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80035d6:	2300      	movs	r3, #0
  }
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	2201      	movs	r2, #1
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	4b17      	ldr	r3, [pc, #92]	@ (800366c <HAL_EXTI_IRQHandler+0x88>)
 800360e:	4413      	add	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	4b0d      	ldr	r3, [pc, #52]	@ (8003670 <HAL_EXTI_IRQHandler+0x8c>)
 800363c:	4413      	add	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4013      	ands	r3, r2
 8003648:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d009      	beq.n	8003664 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	4798      	blx	r3
    }
  }
}
 8003664:	bf00      	nop
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	4402200c 	.word	0x4402200c
 8003670:	44022010 	.word	0x44022010

08003674 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003682:	e136      	b.n	80038f2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	2101      	movs	r1, #1
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	fa01 f303 	lsl.w	r3, r1, r3
 8003690:	4013      	ands	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 8128 	beq.w	80038ec <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0x38>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b12      	cmp	r3, #18
 80036aa:	d125      	bne.n	80036f8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	08da      	lsrs	r2, r3, #3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3208      	adds	r2, #8
 80036b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	220f      	movs	r2, #15
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4013      	ands	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f003 020f 	and.w	r2, r3, #15
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	08da      	lsrs	r2, r3, #3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3208      	adds	r2, #8
 80036f2:	6979      	ldr	r1, [r7, #20]
 80036f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	2203      	movs	r2, #3
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4013      	ands	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 0203 	and.w	r2, r3, #3
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d00b      	beq.n	800374c <HAL_GPIO_Init+0xd8>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d007      	beq.n	800374c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003740:	2b11      	cmp	r3, #17
 8003742:	d003      	beq.n	800374c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b12      	cmp	r3, #18
 800374a:	d130      	bne.n	80037ae <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	2203      	movs	r2, #3
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4013      	ands	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003782:	2201      	movs	r2, #1
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4013      	ands	r3, r2
 8003790:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	f003 0201 	and.w	r2, r3, #1
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d017      	beq.n	80037e6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	2203      	movs	r2, #3
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4013      	ands	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d07c      	beq.n	80038ec <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80037f2:	4a47      	ldr	r2, [pc, #284]	@ (8003910 <HAL_GPIO_Init+0x29c>)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	089b      	lsrs	r3, r3, #2
 80037f8:	3318      	adds	r3, #24
 80037fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fe:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	220f      	movs	r2, #15
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4013      	ands	r3, r2
 8003814:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	0a9a      	lsrs	r2, r3, #10
 800381a:	4b3e      	ldr	r3, [pc, #248]	@ (8003914 <HAL_GPIO_Init+0x2a0>)
 800381c:	4013      	ands	r3, r2
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	f002 0203 	and.w	r2, r2, #3
 8003824:	00d2      	lsls	r2, r2, #3
 8003826:	4093      	lsls	r3, r2
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800382e:	4938      	ldr	r1, [pc, #224]	@ (8003910 <HAL_GPIO_Init+0x29c>)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	089b      	lsrs	r3, r3, #2
 8003834:	3318      	adds	r3, #24
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800383c:	4b34      	ldr	r3, [pc, #208]	@ (8003910 <HAL_GPIO_Init+0x29c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	43db      	mvns	r3, r3
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4013      	ands	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003860:	4a2b      	ldr	r2, [pc, #172]	@ (8003910 <HAL_GPIO_Init+0x29c>)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003866:	4b2a      	ldr	r3, [pc, #168]	@ (8003910 <HAL_GPIO_Init+0x29c>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	43db      	mvns	r3, r3
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	4013      	ands	r3, r2
 8003874:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800388a:	4a21      	ldr	r2, [pc, #132]	@ (8003910 <HAL_GPIO_Init+0x29c>)
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003890:	4b1f      	ldr	r3, [pc, #124]	@ (8003910 <HAL_GPIO_Init+0x29c>)
 8003892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003896:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	43db      	mvns	r3, r3
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4013      	ands	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80038b6:	4a16      	ldr	r2, [pc, #88]	@ (8003910 <HAL_GPIO_Init+0x29c>)
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80038be:	4b14      	ldr	r3, [pc, #80]	@ (8003910 <HAL_GPIO_Init+0x29c>)
 80038c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038c4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4013      	ands	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80038e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003910 <HAL_GPIO_Init+0x29c>)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	3301      	adds	r3, #1
 80038f0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f47f aec1 	bne.w	8003684 <HAL_GPIO_Init+0x10>
  }
}
 8003902:	bf00      	nop
 8003904:	bf00      	nop
 8003906:	371c      	adds	r7, #28
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	44022000 	.word	0x44022000
 8003914:	002f7f7f 	.word	0x002f7f7f

08003918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
 8003924:	4613      	mov	r3, r2
 8003926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003928:	787b      	ldrb	r3, [r7, #1]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003934:	e002      	b.n	800393c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003936:	887a      	ldrh	r2, [r7, #2]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800395a:	887a      	ldrh	r2, [r7, #2]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4013      	ands	r3, r2
 8003960:	041a      	lsls	r2, r3, #16
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	43d9      	mvns	r1, r3
 8003966:	887b      	ldrh	r3, [r7, #2]
 8003968:	400b      	ands	r3, r1
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	619a      	str	r2, [r3, #24]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e02a      	b.n	80039e4 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fe fbca 	bl	800213c <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 80039be:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6812      	ldr	r2, [r2, #0]
 80039c6:	68f9      	ldr	r1, [r7, #12]
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_HASH_DeInit>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_DeInit(HASH_HandleTypeDef *hhash)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the HASH handle allocation */
  if (hhash == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_HASH_DeInit+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e015      	b.n	8003a2a <HAL_HASH_DeInit+0x3e>
  }

  /* Change the default HASH phase */
  hhash->Phase = HAL_HASH_PHASE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Reset HashInCount */
  hhash->HashInCount = 0U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	61da      	str	r2, [r3, #28]

  /* Reset multi buffers accumulation flag */
  hhash->Accumulation = 0U;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DeInit the low level hardware */
  hhash->MspDeInitCallback(hhash);
#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_HASH_MspDeInit(hhash);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fe fbb4 	bl	8002180 <HAL_HASH_MspDeInit>
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_RESET;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  __HAL_UNLOCK(hhash);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_HASH_Start_IT>:
  * @param  pOutBuffer pointer to the computed digest.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Start_IT(HASH_HandleTypeDef *hhash, const uint8_t *const pInBuffer, uint32_t Size,
                                    uint8_t *const pOutBuffer)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b086      	sub	sp, #24
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_HASH_StateTypeDef temp_state;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_HASH_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e05c      	b.n	8003b04 <HAL_HASH_Start_IT+0xd2>
  }

  /* Check if peripheral is ready to start process or suspended */
  temp_state = hhash->State;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a50:	75bb      	strb	r3, [r7, #22]
  if ((temp_state == HAL_HASH_STATE_READY) || (temp_state == HAL_HASH_STATE_SUSPENDED))
 8003a52:	7dbb      	ldrb	r3, [r7, #22]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d002      	beq.n	8003a5e <HAL_HASH_Start_IT+0x2c>
 8003a58:	7dbb      	ldrb	r3, [r7, #22]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d14f      	bne.n	8003afe <HAL_HASH_Start_IT+0xcc>
  {
    /* Process Locked */
    __HAL_LOCK(hhash);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_HASH_Start_IT+0x3a>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e04b      	b.n	8003b04 <HAL_HASH_Start_IT+0xd2>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    if (hhash->State == HAL_HASH_STATE_READY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d128      	bne.n	8003ad2 <HAL_HASH_Start_IT+0xa0>
    {
      /* Reset HashInCount and Initialize Size, pHashInBuffPtr and pHashOutBuffPtr parameters */
      hhash->HashInCount =  0U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	61da      	str	r2, [r3, #28]
      hhash->pHashInBuffPtr = pInBuffer;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	615a      	str	r2, [r3, #20]
      hhash->pHashOutBuffPtr = pOutBuffer;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	619a      	str	r2, [r3, #24]
      hhash->Size = Size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	621a      	str	r2, [r3, #32]

      /* Set HASH mode */
      CLEAR_BIT(hhash->Instance->CR, HASH_CR_MODE);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aa6:	601a      	str	r2, [r3, #0]
      /* Reset the HASH processor core */
      MODIFY_REG(hhash->Instance->CR, HASH_CR_INIT, HASH_CR_INIT);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0204 	orr.w	r2, r2, #4
 8003ab6:	601a      	str	r2, [r3, #0]

      /* Configure the number of valid bits in last word of the message */
      MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (Size % 4U));
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f023 011f 	bic.w	r1, r3, #31
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	00da      	lsls	r2, r3, #3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	609a      	str	r2, [r3, #8]
    }
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_BUSY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Set the phase */
    hhash->Phase = HAL_HASH_PHASE_PROCESS;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    /* Enable the specified HASH interrupt*/
    __HAL_HASH_ENABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6a1a      	ldr	r2, [r3, #32]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0203 	orr.w	r2, r2, #3
 8003af0:	621a      	str	r2, [r3, #32]

    status = HASH_WriteData_IT(hhash);
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f8c3 	bl	8003c7e <HASH_WriteData_IT>
 8003af8:	4603      	mov	r3, r0
 8003afa:	75fb      	strb	r3, [r7, #23]
 8003afc:	e001      	b.n	8003b02 <HAL_HASH_Start_IT+0xd0>
  }
  else
  {
    status =  HAL_BUSY;
 8003afe:	2302      	movs	r3, #2
 8003b00:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_HASH_IRQHandler>:
  * @param hhash HASH handle.
  * @note  HAL_HASH_IRQHandler() handles interrupts in HMAC processing as well.
  * @retval None
  */
void HAL_HASH_IRQHandler(HASH_HandleTypeDef *hhash)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t itsource = hhash->Instance->IMR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	617b      	str	r3, [r7, #20]
  uint32_t itflag   = hhash->Instance->SR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	613b      	str	r3, [r7, #16]

  /* If digest is ready */
  if ((itflag & HASH_FLAG_DCIS) == HASH_FLAG_DCIS)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d062      	beq.n	8003bf4 <HAL_HASH_IRQHandler+0xe8>
  {
    /* Read the digest */
    HASH_GetDigest(hhash, hhash->pHashOutBuffPtr, HASH_DIGEST_LENGTH(hhash));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6999      	ldr	r1, [r3, #24]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d03d      	beq.n	8003bbc <HAL_HASH_IRQHandler+0xb0>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b4e:	d033      	beq.n	8003bb8 <HAL_HASH_IRQHandler+0xac>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b5a:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8003b5e:	d029      	beq.n	8003bb4 <HAL_HASH_IRQHandler+0xa8>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b6a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b6e:	d01f      	beq.n	8003bb0 <HAL_HASH_IRQHandler+0xa4>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b7a:	f5b3 1fd0 	cmp.w	r3, #1703936	@ 0x1a0000
 8003b7e:	d015      	beq.n	8003bac <HAL_HASH_IRQHandler+0xa0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b8a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003b8e:	d00b      	beq.n	8003ba8 <HAL_HASH_IRQHandler+0x9c>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b9a:	f5b3 1ff0 	cmp.w	r3, #1966080	@ 0x1e0000
 8003b9e:	d101      	bne.n	8003ba4 <HAL_HASH_IRQHandler+0x98>
 8003ba0:	2340      	movs	r3, #64	@ 0x40
 8003ba2:	e00c      	b.n	8003bbe <HAL_HASH_IRQHandler+0xb2>
 8003ba4:	2314      	movs	r3, #20
 8003ba6:	e00a      	b.n	8003bbe <HAL_HASH_IRQHandler+0xb2>
 8003ba8:	2320      	movs	r3, #32
 8003baa:	e008      	b.n	8003bbe <HAL_HASH_IRQHandler+0xb2>
 8003bac:	231c      	movs	r3, #28
 8003bae:	e006      	b.n	8003bbe <HAL_HASH_IRQHandler+0xb2>
 8003bb0:	2330      	movs	r3, #48	@ 0x30
 8003bb2:	e004      	b.n	8003bbe <HAL_HASH_IRQHandler+0xb2>
 8003bb4:	2320      	movs	r3, #32
 8003bb6:	e002      	b.n	8003bbe <HAL_HASH_IRQHandler+0xb2>
 8003bb8:	231c      	movs	r3, #28
 8003bba:	e000      	b.n	8003bbe <HAL_HASH_IRQHandler+0xb2>
 8003bbc:	2314      	movs	r3, #20
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fb73 	bl	80042ac <HASH_GetDigest>

    /* Disable Interrupts */
    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6a1a      	ldr	r2, [r3, #32]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0203 	bic.w	r2, r2, #3
 8003bd4:	621a      	str	r2, [r3, #32]
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Reset HASH state machine */
    hhash->Phase = HAL_HASH_PHASE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    /* Process Unlocked */
    __HAL_UNLOCK(hhash);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    /* Call digest computation complete call back */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
    hhash->DgstCpltCallback(hhash);
#else
    HAL_HASH_DgstCpltCallback(hhash);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f823 	bl	8003c3a <HAL_HASH_DgstCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

  }
  /* If Peripheral ready to accept new data */
  if ((itflag & HASH_FLAG_DINIS) == HASH_FLAG_DINIS)
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00f      	beq.n	8003c1e <HAL_HASH_IRQHandler+0x112>
  {
    if ((itsource & HASH_IT_DINI) == HASH_IT_DINI)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <HAL_HASH_IRQHandler+0x112>
    {
      status = HASH_WriteData_IT(hhash);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f838 	bl	8003c7e <HASH_WriteData_IT>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <HAL_HASH_IRQHandler+0x112>
      {
        /* Call error callback */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
        hhash->ErrorCallback(hhash);
#else
        HAL_HASH_ErrorCallback(hhash);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f818 	bl	8003c4e <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003c1e:	bf00      	nop
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_HASH_InCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_InCpltCallback(HASH_HandleTypeDef *hhash)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_InCpltCallback() can be implemented in the user file.
   */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_HASH_DgstCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_DgstCpltCallback(HASH_HandleTypeDef *hhash)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_DgstCpltCallback() can be implemented in the user file.
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <HAL_HASH_ErrorCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_ErrorCallback(HASH_HandleTypeDef *hhash)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_ErrorCallback() can be implemented in the user file.
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_HASH_GetState>:
  * @note   The API yields the current state of the handle (BUSY, READY,...).
  * @param  hhash HASH handle.
  * @retval HAL HASH state
  */
HAL_HASH_StateTypeDef HAL_HASH_GetState(const HASH_HandleTypeDef *hhash)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  return hhash->State;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c70:	b2db      	uxtb	r3, r3
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <HASH_WriteData_IT>:
  * @brief  Feed the input buffer to the HASH peripheral in interruption mode.
  * @param  hhash HASH handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WriteData_IT(HASH_HandleTypeDef *hhash)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b088      	sub	sp, #32
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  uint32_t buffercounter;
  uint32_t count;
  __IO uint32_t keyaddr = (uint32_t)(hhash->pHashKeyBuffPtr);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8a:	613b      	str	r3, [r7, #16]
  __IO uint32_t inputaddr = (uint32_t)(hhash->pHashInBuffPtr);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	60fb      	str	r3, [r7, #12]
  uint32_t nbbytePartialHash  = (((hhash->Instance->SR) >> 16U) * 4U); /* Nb byte  to enter in HASH fifo to trig
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	0c1b      	lsrs	r3, r3, #16
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	617b      	str	r3, [r7, #20]
                                                                      a partial HASH computation*/

  if (hhash->State == HAL_HASH_STATE_BUSY)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	f040 82ea 	bne.w	8004280 <HASH_WriteData_IT+0x602>
  {
    if ((hhash->Instance->CR & HASH_CR_MODE) == 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f040 80b3 	bne.w	8003e22 <HASH_WriteData_IT+0x1a4>
      }
      else
      {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	441a      	add	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d258      	bcs.n	8003d7e <HASH_WriteData_IT+0x100>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
 8003cd0:	e015      	b.n	8003cfe <HASH_WriteData_IT+0x80>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	1d1a      	adds	r2, r3, #4
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	1d1a      	adds	r2, r3, #4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	615a      	str	r2, [r3, #20]
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d3e5      	bcc.n	8003cd2 <HASH_WriteData_IT+0x54>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 8003d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d0a:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d117      	bne.n	8003d48 <HASH_WriteData_IT+0xca>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6a1a      	ldr	r2, [r3, #32]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0203 	bic.w	r2, r2, #3
 8003d26:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2c:	f043 0204 	orr.w	r2, r3, #4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e2ad      	b.n	80042a4 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0da      	beq.n	8003d0c <HASH_WriteData_IT+0x8e>
 8003d56:	e2a4      	b.n	80042a2 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < hhash->Size)
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3304      	adds	r3, #4
 8003d68:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	1d1a      	adds	r2, r3, #4
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	1d1a      	adds	r2, r3, #4
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	615a      	str	r2, [r3, #20]
          while ((hhash->HashInCount) < hhash->Size)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d3e6      	bcc.n	8003d58 <HASH_WriteData_IT+0xda>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
          /*Call registered Input complete callback*/
          hhash->InCpltCallback(hhash);
#else
          /*Call legacy weak Input complete callback*/
          HAL_HASH_InCpltCallback(hhash);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff ff4b 	bl	8003c26 <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
          if (hhash->Accumulation == 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d138      	bne.n	8003e0a <HASH_WriteData_IT+0x18c>
          {
            if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	f040 827d 	bne.w	80042a2 <HASH_WriteData_IT+0x624>
            {
              /* Start the message padding then the Digest calculation */
              SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003db6:	609a      	str	r2, [r3, #8]

              /* Wait for HASH_FLAG_DCIS flag to be set */
              count = HASH_TIMEOUTVALUE;
 8003db8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dbc:	61bb      	str	r3, [r7, #24]
              do
              {
                count--;
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	61bb      	str	r3, [r7, #24]
                if (count == 0U)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d117      	bne.n	8003dfa <HASH_WriteData_IT+0x17c>
                {
                  /* Disable Interrupts */
                  __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6a1a      	ldr	r2, [r3, #32]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0203 	bic.w	r2, r2, #3
 8003dd8:	621a      	str	r2, [r3, #32]

                  /* Change state */
                  hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dde:	f043 0204 	orr.w	r2, r3, #4
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	635a      	str	r2, [r3, #52]	@ 0x34
                  hhash->State = HAL_HASH_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                  __HAL_UNLOCK(hhash);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                  return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e254      	b.n	80042a4 <HASH_WriteData_IT+0x626>
                }
              } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0da      	beq.n	8003dbe <HASH_WriteData_IT+0x140>
 8003e08:	e24b      	b.n	80042a2 <HASH_WriteData_IT+0x624>
            }
          }
          else
          {
            /* Reset multi buffers accumulation flag */
            hhash->Accumulation = 0U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	63da      	str	r2, [r3, #60]	@ 0x3c
            /* Disable Interrupts */
            __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6a1a      	ldr	r2, [r3, #32]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	621a      	str	r2, [r3, #32]
 8003e20:	e23f      	b.n	80042a2 <HASH_WriteData_IT+0x624>
      }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
    }
    else /*HMAC */
    {
      if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2) /* loading input*/
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	f040 80df 	bne.w	8003fec <HASH_WriteData_IT+0x36e>
          __HAL_UNLOCK(hhash);
        }
        else
        {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
          if (hhash->Accumulation == 1U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d108      	bne.n	8003e48 <HASH_WriteData_IT+0x1ca>
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 0U);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 021f 	bic.w	r2, r2, #31
 8003e44:	609a      	str	r2, [r3, #8]
 8003e46:	e00d      	b.n	8003e64 <HASH_WriteData_IT+0x1e6>
          }
          else
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (hhash->Size % 4U));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f023 011f 	bic.w	r1, r3, #31
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	00da      	lsls	r2, r3, #3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	609a      	str	r2, [r3, #8]
          }
          if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	441a      	add	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d258      	bcs.n	8003f26 <HASH_WriteData_IT+0x2a8>
          {
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]
 8003e78:	e015      	b.n	8003ea6 <HASH_WriteData_IT+0x228>
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	1d1a      	adds	r2, r3, #4
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	1d1a      	adds	r2, r3, #4
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	615a      	str	r2, [r3, #20]
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d3e5      	bcc.n	8003e7a <HASH_WriteData_IT+0x1fc>
            }
            /* Wait for HASH_IT_DINI flag to be set */
            count = HASH_TIMEOUTVALUE;
 8003eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eb2:	61bb      	str	r3, [r7, #24]
            do
            {
              count--;
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	61bb      	str	r3, [r7, #24]
              if (count == 0U)
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d117      	bne.n	8003ef0 <HASH_WriteData_IT+0x272>
              {
                /* Disable Interrupts */
                __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6a1a      	ldr	r2, [r3, #32]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0203 	bic.w	r2, r2, #3
 8003ece:	621a      	str	r2, [r3, #32]

                /* Change state */
                hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed4:	f043 0204 	orr.w	r2, r3, #4
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	635a      	str	r2, [r3, #52]	@ 0x34
                hhash->State = HAL_HASH_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                __HAL_UNLOCK(hhash);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e1d9      	b.n	80042a4 <HASH_WriteData_IT+0x626>
              }
            } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0da      	beq.n	8003eb4 <HASH_WriteData_IT+0x236>
 8003efe:	e1d0      	b.n	80042a2 <HASH_WriteData_IT+0x624>
          else
          {
            while ((hhash->HashInCount) < hhash->Size)
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	461a      	mov	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	1d1a      	adds	r2, r3, #4
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	1d1a      	adds	r2, r3, #4
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	615a      	str	r2, [r3, #20]
            while ((hhash->HashInCount) < hhash->Size)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d3e6      	bcc.n	8003f00 <HASH_WriteData_IT+0x282>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
            /*Call registered Input complete callback*/
            hhash->InCpltCallback(hhash);
#else
            /*Call legacy weak Input complete callback*/
            HAL_HASH_InCpltCallback(hhash);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fe77 	bl	8003c26 <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

            if (hhash->Accumulation == 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d143      	bne.n	8003fc8 <HASH_WriteData_IT+0x34a>
            {
              if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	f040 81a9 	bne.w	80042a2 <HASH_WriteData_IT+0x624>
              {
                /* Start the message padding then the Digest calculation */
                SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f5e:	609a      	str	r2, [r3, #8]

                /* Wait for HASH_FLAG_BUSY flag to be set */
                count = HASH_TIMEOUTVALUE;
 8003f60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f64:	61bb      	str	r3, [r7, #24]
                do
                {
                  count--;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	61bb      	str	r3, [r7, #24]
                  if (count == 0U)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d117      	bne.n	8003fa2 <HASH_WriteData_IT+0x324>
                  {
                    /* Disable Interrupts */
                    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6a1a      	ldr	r2, [r3, #32]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0203 	bic.w	r2, r2, #3
 8003f80:	621a      	str	r2, [r3, #32]

                    /* Change state */
                    hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	635a      	str	r2, [r3, #52]	@ 0x34
                    hhash->State = HAL_HASH_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    __HAL_UNLOCK(hhash);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e180      	b.n	80042a4 <HASH_WriteData_IT+0x626>
                  }
                } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d0da      	beq.n	8003f66 <HASH_WriteData_IT+0x2e8>

                hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_3;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2205      	movs	r2, #5
 8003fb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                hhash->HashInCount = 0U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	61da      	str	r2, [r3, #28]
                hhash->pHashKeyBuffPtr = hhash->Init.pKey;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8003fc6:	e16c      	b.n	80042a2 <HASH_WriteData_IT+0x624>
            }

            else
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6a1a      	ldr	r2, [r3, #32]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0203 	bic.w	r2, r2, #3
 8003fd6:	621a      	str	r2, [r3, #32]
              hhash->State = HAL_HASH_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e15b      	b.n	80042a4 <HASH_WriteData_IT+0x626>
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
        }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
      }

      else if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3)/* loading Key*/
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	f040 80a1 	bne.w	800413a <HASH_WriteData_IT+0x4bc>
      {

        /* Configure the number of valid bits in last word of the Key */
        MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * ((hhash->Init.KeySize) % 4U));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f023 011f 	bic.w	r1, r3, #31
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	00da      	lsls	r2, r3, #3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	609a      	str	r2, [r3, #8]

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	441a      	add	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	429a      	cmp	r2, r3
 8004022:	d253      	bcs.n	80040cc <HASH_WriteData_IT+0x44e>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8004024:	2300      	movs	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]
 8004028:	e015      	b.n	8004056 <HASH_WriteData_IT+0x3d8>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	461a      	mov	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	3304      	adds	r3, #4
 800403a:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	1d1a      	adds	r2, r3, #4
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	1d1a      	adds	r2, r3, #4
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	3304      	adds	r3, #4
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	429a      	cmp	r2, r3
 800405c:	d3e5      	bcc.n	800402a <HASH_WriteData_IT+0x3ac>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 800405e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004062:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	3b01      	subs	r3, #1
 8004068:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d117      	bne.n	80040a0 <HASH_WriteData_IT+0x422>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6a1a      	ldr	r2, [r3, #32]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0203 	bic.w	r2, r2, #3
 800407e:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004084:	f043 0204 	orr.w	r2, r3, #4
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e101      	b.n	80042a4 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0da      	beq.n	8004064 <HASH_WriteData_IT+0x3e6>
 80040ae:	e0f8      	b.n	80042a2 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	461a      	mov	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	3304      	adds	r3, #4
 80040c0:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	1d1a      	adds	r2, r3, #4
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	61da      	str	r2, [r3, #28]
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69da      	ldr	r2, [r3, #28]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d3eb      	bcc.n	80040b0 <HASH_WriteData_IT+0x432>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040e6:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_DCIS flag to be set */
          count = HASH_TIMEOUTVALUE;
 80040e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040ec:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d117      	bne.n	800412a <HASH_WriteData_IT+0x4ac>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6a1a      	ldr	r2, [r3, #32]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0203 	bic.w	r2, r2, #3
 8004108:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800410e:	f043 0204 	orr.w	r2, r3, #4
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e0bc      	b.n	80042a4 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0da      	beq.n	80040ee <HASH_WriteData_IT+0x470>
 8004138:	e0b3      	b.n	80042a2 <HASH_WriteData_IT+0x624>
        }
      }
      else  /*first step , loading key*/
      {

        hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2203      	movs	r2, #3
 800413e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69da      	ldr	r2, [r3, #28]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	441a      	add	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	429a      	cmp	r2, r3
 8004150:	d258      	bcs.n	8004204 <HASH_WriteData_IT+0x586>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
 8004156:	e015      	b.n	8004184 <HASH_WriteData_IT+0x506>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	461a      	mov	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6812      	ldr	r2, [r2, #0]
 8004162:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	3304      	adds	r3, #4
 8004168:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	1d1a      	adds	r2, r3, #4
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	1d1a      	adds	r2, r3, #4
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	3304      	adds	r3, #4
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	429a      	cmp	r2, r3
 800418a:	d3e5      	bcc.n	8004158 <HASH_WriteData_IT+0x4da>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 800418c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004190:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	3b01      	subs	r3, #1
 8004196:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d117      	bne.n	80041ce <HASH_WriteData_IT+0x550>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6a1a      	ldr	r2, [r3, #32]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0203 	bic.w	r2, r2, #3
 80041ac:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b2:	f043 0204 	orr.w	r2, r3, #4
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e06a      	b.n	80042a4 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0da      	beq.n	8004192 <HASH_WriteData_IT+0x514>
 80041dc:	e061      	b.n	80042a2 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	461a      	mov	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	3304      	adds	r3, #4
 80041ee:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	1d1a      	adds	r2, r3, #4
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	1d1a      	adds	r2, r3, #4
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	625a      	str	r2, [r3, #36]	@ 0x24
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	429a      	cmp	r2, r3
 800420e:	d3e6      	bcc.n	80041de <HASH_WriteData_IT+0x560>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800421e:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_BUSY flag to be set */
          count = HASH_TIMEOUTVALUE;
 8004220:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004224:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	3b01      	subs	r3, #1
 800422a:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d117      	bne.n	8004262 <HASH_WriteData_IT+0x5e4>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6a1a      	ldr	r2, [r3, #32]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0203 	bic.w	r2, r2, #3
 8004240:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004246:	f043 0204 	orr.w	r2, r3, #4
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e020      	b.n	80042a4 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b08      	cmp	r3, #8
 800426e:	d0da      	beq.n	8004226 <HASH_WriteData_IT+0x5a8>
          /*change Phase to step 2*/
          hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2204      	movs	r2, #4
 8004274:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
          hhash->HashInCount = 0U;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	61da      	str	r2, [r3, #28]
 800427e:	e010      	b.n	80042a2 <HASH_WriteData_IT+0x624>
        }
      }
    }
  }
  else if ((hhash->State == HAL_HASH_STATE_SUSPENDED))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b03      	cmp	r3, #3
 800428a:	d101      	bne.n	8004290 <HASH_WriteData_IT+0x612>
  {
    return HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	e009      	b.n	80042a4 <HASH_WriteData_IT+0x626>
  }
  else
  {
    /* Busy error code field */
    hhash->ErrorCode |= HAL_HASH_ERROR_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004294:	f043 0201 	orr.w	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
    /*Call registered error callback*/
    hhash->ErrorCallback(hhash);
#else
    /*Call legacy weak error callback*/
    HAL_HASH_ErrorCallback(hhash);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff fcd6 	bl	8003c4e <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3720      	adds	r7, #32
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HASH_GetDigest>:
  * @param  pMsgDigest pointer to the computed digest.
  * @param  Size message digest size in bytes.
  * @retval None
  */
static void HASH_GetDigest(const HASH_HandleTypeDef *hhash, const uint8_t *pMsgDigest, uint8_t Size)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b0b7      	sub	sp, #220	@ 0xdc
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	4613      	mov	r3, r2
 80042b8:	71fb      	strb	r3, [r7, #7]
  uint32_t msgdigest = (uint32_t)pMsgDigest;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  switch (Size)
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	2b30      	cmp	r3, #48	@ 0x30
 80042c4:	dc44      	bgt.n	8004350 <HASH_GetDigest+0xa4>
 80042c6:	2b14      	cmp	r3, #20
 80042c8:	f2c0 82e7 	blt.w	800489a <HASH_GetDigest+0x5ee>
 80042cc:	3b14      	subs	r3, #20
 80042ce:	2b1c      	cmp	r3, #28
 80042d0:	f200 82e3 	bhi.w	800489a <HASH_GetDigest+0x5ee>
 80042d4:	a201      	add	r2, pc, #4	@ (adr r2, 80042dc <HASH_GetDigest+0x30>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	08004359 	.word	0x08004359
 80042e0:	0800489b 	.word	0x0800489b
 80042e4:	0800489b 	.word	0x0800489b
 80042e8:	0800489b 	.word	0x0800489b
 80042ec:	0800489b 	.word	0x0800489b
 80042f0:	0800489b 	.word	0x0800489b
 80042f4:	0800489b 	.word	0x0800489b
 80042f8:	0800489b 	.word	0x0800489b
 80042fc:	080043f1 	.word	0x080043f1
 8004300:	0800489b 	.word	0x0800489b
 8004304:	0800489b 	.word	0x0800489b
 8004308:	0800489b 	.word	0x0800489b
 800430c:	080044c5 	.word	0x080044c5
 8004310:	0800489b 	.word	0x0800489b
 8004314:	0800489b 	.word	0x0800489b
 8004318:	0800489b 	.word	0x0800489b
 800431c:	0800489b 	.word	0x0800489b
 8004320:	0800489b 	.word	0x0800489b
 8004324:	0800489b 	.word	0x0800489b
 8004328:	0800489b 	.word	0x0800489b
 800432c:	0800489b 	.word	0x0800489b
 8004330:	0800489b 	.word	0x0800489b
 8004334:	0800489b 	.word	0x0800489b
 8004338:	0800489b 	.word	0x0800489b
 800433c:	0800489b 	.word	0x0800489b
 8004340:	0800489b 	.word	0x0800489b
 8004344:	0800489b 	.word	0x0800489b
 8004348:	0800489b 	.word	0x0800489b
 800434c:	080045b7 	.word	0x080045b7
 8004350:	2b40      	cmp	r3, #64	@ 0x40
 8004352:	f000 81d1 	beq.w	80046f8 <HASH_GetDigest+0x44c>
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);

      break;
#endif /* defined(HASH_ALGOSELECTION_SHA512)*/
    default:
      break;
 8004356:	e2a0      	b.n	800489a <HASH_GetDigest+0x5ee>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004362:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
  return __builtin_bswap32(value);
 8004366:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800436a:	ba12      	rev	r2, r2
 800436c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800436e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004372:	3304      	adds	r3, #4
 8004374:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004382:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004386:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800438a:	ba12      	rev	r2, r2
 800438c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800438e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004392:	3304      	adds	r3, #4
 8004394:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695a      	ldr	r2, [r3, #20]
 800439e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043a2:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80043a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043aa:	ba12      	rev	r2, r2
 80043ac:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80043ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043b2:	3304      	adds	r3, #4
 80043b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043c2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80043c6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80043ca:	ba12      	rev	r2, r2
 80043cc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80043ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043d2:	3304      	adds	r3, #4
 80043d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043e2:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80043e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043ea:	ba12      	rev	r2, r2
 80043ec:	601a      	str	r2, [r3, #0]
      break;
 80043ee:	e255      	b.n	800489c <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80043fe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8004402:	ba12      	rev	r2, r2
 8004404:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800440a:	3304      	adds	r3, #4
 800440c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800441a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800441e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004422:	ba12      	rev	r2, r2
 8004424:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800442a:	3304      	adds	r3, #4
 800442c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800443a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800443e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004442:	ba12      	rev	r2, r2
 8004444:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800444a:	3304      	adds	r3, #4
 800444c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800445a:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 800445e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004462:	ba12      	rev	r2, r2
 8004464:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800446a:	3304      	adds	r3, #4
 800446c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69da      	ldr	r2, [r3, #28]
 8004476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800447a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800447e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004482:	ba12      	rev	r2, r2
 8004484:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800448a:	3304      	adds	r3, #4
 800448c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8004490:	4b98      	ldr	r3, [pc, #608]	@ (80046f4 <HASH_GetDigest+0x448>)
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004498:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800449c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80044a0:	ba12      	rev	r2, r2
 80044a2:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80044a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044a8:	3304      	adds	r3, #4
 80044aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 80044ae:	4b91      	ldr	r3, [pc, #580]	@ (80046f4 <HASH_GetDigest+0x448>)
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044b6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80044be:	ba12      	rev	r2, r2
 80044c0:	601a      	str	r2, [r3, #0]
      break;
 80044c2:	e1eb      	b.n	800489c <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044ce:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80044d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80044d6:	ba12      	rev	r2, r2
 80044d8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80044da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044de:	3304      	adds	r3, #4
 80044e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044ee:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80044f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80044f6:	ba12      	rev	r2, r2
 80044f8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80044fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044fe:	3304      	adds	r3, #4
 8004500:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800450e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004512:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004516:	ba12      	rev	r2, r2
 8004518:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800451a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800451e:	3304      	adds	r3, #4
 8004520:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800452e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8004532:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004536:	ba12      	rev	r2, r2
 8004538:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800453a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800453e:	3304      	adds	r3, #4
 8004540:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800454e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004552:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004556:	ba12      	rev	r2, r2
 8004558:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800455a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800455e:	3304      	adds	r3, #4
 8004560:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8004564:	4b63      	ldr	r3, [pc, #396]	@ (80046f4 <HASH_GetDigest+0x448>)
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800456c:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8004570:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004574:	ba12      	rev	r2, r2
 8004576:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004578:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800457c:	3304      	adds	r3, #4
 800457e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8004582:	4b5c      	ldr	r3, [pc, #368]	@ (80046f4 <HASH_GetDigest+0x448>)
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800458a:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800458e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8004592:	ba12      	rev	r2, r2
 8004594:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800459a:	3304      	adds	r3, #4
 800459c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 80045a0:	4b54      	ldr	r3, [pc, #336]	@ (80046f4 <HASH_GetDigest+0x448>)
 80045a2:	69da      	ldr	r2, [r3, #28]
 80045a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045a8:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80045ac:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80045b0:	ba12      	rev	r2, r2
 80045b2:	601a      	str	r2, [r3, #0]
      break;
 80045b4:	e172      	b.n	800489c <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045c0:	657a      	str	r2, [r7, #84]	@ 0x54
 80045c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80045c4:	ba12      	rev	r2, r2
 80045c6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80045c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045cc:	3304      	adds	r3, #4
 80045ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045e0:	ba12      	rev	r2, r2
 80045e2:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80045e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045e8:	3304      	adds	r3, #4
 80045ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695a      	ldr	r2, [r3, #20]
 80045f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045f8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80045fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80045fc:	ba12      	rev	r2, r2
 80045fe:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004600:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004604:	3304      	adds	r3, #4
 8004606:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699a      	ldr	r2, [r3, #24]
 8004610:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004614:	663a      	str	r2, [r7, #96]	@ 0x60
 8004616:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004618:	ba12      	rev	r2, r2
 800461a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800461c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004620:	3304      	adds	r3, #4
 8004622:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004630:	667a      	str	r2, [r7, #100]	@ 0x64
 8004632:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004634:	ba12      	rev	r2, r2
 8004636:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004638:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800463c:	3304      	adds	r3, #4
 800463e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8004642:	4b2c      	ldr	r3, [pc, #176]	@ (80046f4 <HASH_GetDigest+0x448>)
 8004644:	695a      	ldr	r2, [r3, #20]
 8004646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800464a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800464c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800464e:	ba12      	rev	r2, r2
 8004650:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004656:	3304      	adds	r3, #4
 8004658:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 800465c:	4b25      	ldr	r3, [pc, #148]	@ (80046f4 <HASH_GetDigest+0x448>)
 800465e:	699a      	ldr	r2, [r3, #24]
 8004660:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004664:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004666:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004668:	ba12      	rev	r2, r2
 800466a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800466c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004670:	3304      	adds	r3, #4
 8004672:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8004676:	4b1f      	ldr	r3, [pc, #124]	@ (80046f4 <HASH_GetDigest+0x448>)
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800467e:	673a      	str	r2, [r7, #112]	@ 0x70
 8004680:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004682:	ba12      	rev	r2, r2
 8004684:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800468a:	3304      	adds	r3, #4
 800468c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 8004690:	4b18      	ldr	r3, [pc, #96]	@ (80046f4 <HASH_GetDigest+0x448>)
 8004692:	6a1a      	ldr	r2, [r3, #32]
 8004694:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004698:	677a      	str	r2, [r7, #116]	@ 0x74
 800469a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800469c:	ba12      	rev	r2, r2
 800469e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80046a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046a4:	3304      	adds	r3, #4
 80046a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 80046aa:	4b12      	ldr	r3, [pc, #72]	@ (80046f4 <HASH_GetDigest+0x448>)
 80046ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046b2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80046b4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80046b6:	ba12      	rev	r2, r2
 80046b8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80046ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046be:	3304      	adds	r3, #4
 80046c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 80046c4:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <HASH_GetDigest+0x448>)
 80046c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046cc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80046d0:	ba12      	rev	r2, r2
 80046d2:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80046d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046d8:	3304      	adds	r3, #4
 80046da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 80046de:	4b05      	ldr	r3, [pc, #20]	@ (80046f4 <HASH_GetDigest+0x448>)
 80046e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80046ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80046ee:	ba12      	rev	r2, r2
 80046f0:	601a      	str	r2, [r3, #0]
      break;
 80046f2:	e0d3      	b.n	800489c <HASH_GetDigest+0x5f0>
 80046f4:	420c0710 	.word	0x420c0710
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004702:	617a      	str	r2, [r7, #20]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	ba12      	rev	r2, r2
 8004708:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800470a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800470e:	3304      	adds	r3, #4
 8004710:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691a      	ldr	r2, [r3, #16]
 800471a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800471e:	61ba      	str	r2, [r7, #24]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	ba12      	rev	r2, r2
 8004724:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800472a:	3304      	adds	r3, #4
 800472c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800473a:	61fa      	str	r2, [r7, #28]
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	ba12      	rev	r2, r2
 8004740:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004746:	3304      	adds	r3, #4
 8004748:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004756:	623a      	str	r2, [r7, #32]
 8004758:	6a3a      	ldr	r2, [r7, #32]
 800475a:	ba12      	rev	r2, r2
 800475c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800475e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004762:	3304      	adds	r3, #4
 8004764:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	69da      	ldr	r2, [r3, #28]
 800476e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004772:	627a      	str	r2, [r7, #36]	@ 0x24
 8004774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004776:	ba12      	rev	r2, r2
 8004778:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800477a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800477e:	3304      	adds	r3, #4
 8004780:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8004784:	4b48      	ldr	r3, [pc, #288]	@ (80048a8 <HASH_GetDigest+0x5fc>)
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800478c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800478e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004790:	ba12      	rev	r2, r2
 8004792:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004794:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004798:	3304      	adds	r3, #4
 800479a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 800479e:	4b42      	ldr	r3, [pc, #264]	@ (80048a8 <HASH_GetDigest+0x5fc>)
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047aa:	ba12      	rev	r2, r2
 80047ac:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80047ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047b2:	3304      	adds	r3, #4
 80047b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 80047b8:	4b3b      	ldr	r3, [pc, #236]	@ (80048a8 <HASH_GetDigest+0x5fc>)
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80047c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047c4:	ba12      	rev	r2, r2
 80047c6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80047c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047cc:	3304      	adds	r3, #4
 80047ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 80047d2:	4b35      	ldr	r3, [pc, #212]	@ (80048a8 <HASH_GetDigest+0x5fc>)
 80047d4:	6a1a      	ldr	r2, [r3, #32]
 80047d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047da:	637a      	str	r2, [r7, #52]	@ 0x34
 80047dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047de:	ba12      	rev	r2, r2
 80047e0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80047e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047e6:	3304      	adds	r3, #4
 80047e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 80047ec:	4b2e      	ldr	r3, [pc, #184]	@ (80048a8 <HASH_GetDigest+0x5fc>)
 80047ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047f4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80047f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80047f8:	ba12      	rev	r2, r2
 80047fa:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80047fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004800:	3304      	adds	r3, #4
 8004802:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 8004806:	4b28      	ldr	r3, [pc, #160]	@ (80048a8 <HASH_GetDigest+0x5fc>)
 8004808:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800480a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800480e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004810:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004812:	ba12      	rev	r2, r2
 8004814:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800481a:	3304      	adds	r3, #4
 800481c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 8004820:	4b21      	ldr	r3, [pc, #132]	@ (80048a8 <HASH_GetDigest+0x5fc>)
 8004822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004824:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004828:	643a      	str	r2, [r7, #64]	@ 0x40
 800482a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800482c:	ba12      	rev	r2, r2
 800482e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004834:	3304      	adds	r3, #4
 8004836:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[12]);
 800483a:	4b1b      	ldr	r3, [pc, #108]	@ (80048a8 <HASH_GetDigest+0x5fc>)
 800483c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800483e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004842:	647a      	str	r2, [r7, #68]	@ 0x44
 8004844:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004846:	ba12      	rev	r2, r2
 8004848:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800484a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800484e:	3304      	adds	r3, #4
 8004850:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[13]);
 8004854:	4b14      	ldr	r3, [pc, #80]	@ (80048a8 <HASH_GetDigest+0x5fc>)
 8004856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004858:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800485c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800485e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004860:	ba12      	rev	r2, r2
 8004862:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004864:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004868:	3304      	adds	r3, #4
 800486a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[14]);
 800486e:	4b0e      	ldr	r3, [pc, #56]	@ (80048a8 <HASH_GetDigest+0x5fc>)
 8004870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004876:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004878:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800487a:	ba12      	rev	r2, r2
 800487c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800487e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004882:	3304      	adds	r3, #4
 8004884:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);
 8004888:	4b07      	ldr	r3, [pc, #28]	@ (80048a8 <HASH_GetDigest+0x5fc>)
 800488a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800488c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004890:	653a      	str	r2, [r7, #80]	@ 0x50
 8004892:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004894:	ba12      	rev	r2, r2
 8004896:	601a      	str	r2, [r3, #0]
      break;
 8004898:	e000      	b.n	800489c <HASH_GetDigest+0x5f0>
      break;
 800489a:	bf00      	nop
  }
}
 800489c:	bf00      	nop
 800489e:	37dc      	adds	r7, #220	@ 0xdc
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	420c0710 	.word	0x420c0710

080048ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e08d      	b.n	80049da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fd fc6a 	bl	80021ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2224      	movs	r2, #36	@ 0x24
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0201 	bic.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80048fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800490c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d107      	bne.n	8004926 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	e006      	b.n	8004934 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004932:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	2b02      	cmp	r3, #2
 800493a:	d108      	bne.n	800494e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800494a:	605a      	str	r2, [r3, #4]
 800494c:	e007      	b.n	800495e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800495c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800496c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004970:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004980:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69d9      	ldr	r1, [r3, #28]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a1a      	ldr	r2, [r3, #32]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d138      	bne.n	8004a6a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e032      	b.n	8004a6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2224      	movs	r2, #36	@ 0x24
 8004a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a34:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6819      	ldr	r1, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0201 	orr.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	e000      	b.n	8004a6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a6a:	2302      	movs	r3, #2
  }
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d139      	bne.n	8004b02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e033      	b.n	8004b04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2224      	movs	r2, #36	@ 0x24
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004aca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0201 	orr.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	e000      	b.n	8004b04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b02:	2302      	movs	r3, #2
  }
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004b1c:	230a      	movs	r3, #10
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004b20:	e002      	b.n	8004b28 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f9      	bne.n	8004b22 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8004b2e:	887b      	ldrh	r3, [r7, #2]
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	0c1b      	lsrs	r3, r3, #16
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b44:	b29b      	uxth	r3, r3
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b085      	sub	sp, #20
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004b5e:	230a      	movs	r3, #10
 8004b60:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004b62:	e002      	b.n	8004b6a <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f9      	bne.n	8004b64 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8004b70:	887b      	ldrh	r3, [r7, #2]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	0c1b      	lsrs	r3, r3, #16
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b86:	b29b      	uxth	r3, r3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004ba0:	230a      	movs	r3, #10
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004ba4:	e002      	b.n	8004bac <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f9      	bne.n	8004ba6 <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8004bb2:	887b      	ldrh	r3, [r7, #2]
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	0c1b      	lsrs	r3, r3, #16
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc8:	b29b      	uxth	r3, r3
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b086      	sub	sp, #24
 8004bda:	af02      	add	r7, sp, #8
 8004bdc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0f3      	b.n	8004dd0 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d106      	bne.n	8004c02 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7fd fdfd 	bl	80027fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2203      	movs	r2, #3
 8004c06:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f009 f85f 	bl	800dcd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	7c1a      	ldrb	r2, [r3, #16]
 8004c1c:	f88d 2000 	strb.w	r2, [sp]
 8004c20:	3304      	adds	r3, #4
 8004c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c24:	f009 f823 	bl	800dc6e <USB_CoreInit>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d005      	beq.n	8004c3a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e0ca      	b.n	8004dd0 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2100      	movs	r1, #0
 8004c40:	4618      	mov	r0, r3
 8004c42:	f009 f85b 	bl	800dcfc <USB_SetCurrentMode>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0bb      	b.n	8004dd0 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	73fb      	strb	r3, [r7, #15]
 8004c5c:	e03f      	b.n	8004cde <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c5e:	7bfa      	ldrb	r2, [r7, #15]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	440b      	add	r3, r1
 8004c6c:	3315      	adds	r3, #21
 8004c6e:	2201      	movs	r2, #1
 8004c70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c72:	7bfa      	ldrb	r2, [r7, #15]
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	440b      	add	r3, r1
 8004c80:	3314      	adds	r3, #20
 8004c82:	7bfa      	ldrb	r2, [r7, #15]
 8004c84:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c86:	7bfa      	ldrb	r2, [r7, #15]
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	440b      	add	r3, r1
 8004c94:	3317      	adds	r3, #23
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c9a:	7bfa      	ldrb	r2, [r7, #15]
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3324      	adds	r3, #36	@ 0x24
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cae:	7bfa      	ldrb	r2, [r7, #15]
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	440b      	add	r3, r1
 8004cbc:	3328      	adds	r3, #40	@ 0x28
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	440b      	add	r3, r1
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	73fb      	strb	r3, [r7, #15]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	791b      	ldrb	r3, [r3, #4]
 8004ce2:	7bfa      	ldrb	r2, [r7, #15]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d3ba      	bcc.n	8004c5e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	73fb      	strb	r3, [r7, #15]
 8004cec:	e044      	b.n	8004d78 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004cee:	7bfa      	ldrb	r2, [r7, #15]
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	440b      	add	r3, r1
 8004cfc:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8004d00:	2200      	movs	r2, #0
 8004d02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d04:	7bfa      	ldrb	r2, [r7, #15]
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	440b      	add	r3, r1
 8004d12:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004d16:	7bfa      	ldrb	r2, [r7, #15]
 8004d18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d1a:	7bfa      	ldrb	r2, [r7, #15]
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	440b      	add	r3, r1
 8004d28:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d30:	7bfa      	ldrb	r2, [r7, #15]
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	440b      	add	r3, r1
 8004d3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d46:	7bfa      	ldrb	r2, [r7, #15]
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	440b      	add	r3, r1
 8004d54:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d5c:	7bfa      	ldrb	r2, [r7, #15]
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	440b      	add	r3, r1
 8004d6a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	3301      	adds	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	791b      	ldrb	r3, [r3, #4]
 8004d7c:	7bfa      	ldrb	r2, [r7, #15]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d3b5      	bcc.n	8004cee <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	7c1a      	ldrb	r2, [r3, #16]
 8004d8a:	f88d 2000 	strb.w	r2, [sp]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d92:	f008 ffd6 	bl	800dd42 <USB_DevInit>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e013      	b.n	8004dd0 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	7b1b      	ldrb	r3, [r3, #12]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d102      	bne.n	8004dc4 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f001 fb6b 	bl	800649a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f00a fe2f 	bl	800fa2c <USB_DevDisconnect>

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_PCD_Start+0x16>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e012      	b.n	8004e14 <HAL_PCD_Start+0x3c>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f008 ff55 	bl	800dcaa <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f00a fe00 	bl	800fa0a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f00a fe10 	bl	800fa4e <USB_ReadInterrupts>
 8004e2e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 faf2 	bl	8005424 <PCD_EP_ISR_Handler>

    return;
 8004e40:	e0de      	b.n	8005000 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d010      	beq.n	8004e6e <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8004e5a:	400b      	ands	r3, r1
 8004e5c:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f00b fe5f 	bl	8010b22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004e64:	2100      	movs	r1, #0
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f8e1 	bl	800502e <HAL_PCD_SetAddress>

    return;
 8004e6c:	e0c8      	b.n	8005000 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d009      	beq.n	8004e8c <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8004e86:	400b      	ands	r3, r1
 8004e88:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004e8a:	e0b9      	b.n	8005000 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d009      	beq.n	8004eaa <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8004ea4:	400b      	ands	r3, r1
 8004ea6:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004ea8:	e0aa      	b.n	8005000 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d029      	beq.n	8004f08 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0204 	bic.w	r2, r2, #4
 8004ec2:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0208 	bic.w	r2, r2, #8
 8004ed2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d107      	bne.n	8004eee <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f001 faf8 	bl	80064de <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f893 	bl	800501a <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004f02:	400b      	ands	r3, r1
 8004f04:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004f06:	e07b      	b.n	8005000 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d01c      	beq.n	8004f4c <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0208 	orr.w	r2, r2, #8
 8004f20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8004f30:	400b      	ands	r3, r1
 8004f32:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0204 	orr.w	r2, r2, #4
 8004f42:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f85e 	bl	8005006 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004f4a:	e059      	b.n	8005000 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d033      	beq.n	8004fbe <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8004f64:	400b      	ands	r3, r1
 8004f66:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d121      	bne.n	8004fb6 <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0204 	orr.w	r2, r2, #4
 8004f80:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0208 	orr.w	r2, r2, #8
 8004f90:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa0:	089b      	lsrs	r3, r3, #2
 8004fa2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004fac:	2101      	movs	r1, #1
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f001 fa95 	bl	80064de <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004fb4:	e024      	b.n	8005000 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f825 	bl	8005006 <HAL_PCD_SuspendCallback>
    return;
 8004fbc:	e020      	b.n	8005000 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00c      	beq.n	8004fe2 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8004fd6:	400b      	ands	r3, r1
 8004fd8:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f00b fd93 	bl	8010b06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004fe0:	e00e      	b.n	8005000 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d009      	beq.n	8005000 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8004ffa:	400b      	ands	r3, r1
 8004ffc:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004ffe:	bf00      	nop
  }
}
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	460b      	mov	r3, r1
 8005038:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_PCD_SetAddress+0x1a>
 8005044:	2302      	movs	r3, #2
 8005046:	e012      	b.n	800506e <HAL_PCD_SetAddress+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	78fa      	ldrb	r2, [r7, #3]
 8005054:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	4611      	mov	r1, r2
 800505e:	4618      	mov	r0, r3
 8005060:	f00a fcc0 	bl	800f9e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	4608      	mov	r0, r1
 8005080:	4611      	mov	r1, r2
 8005082:	461a      	mov	r2, r3
 8005084:	4603      	mov	r3, r0
 8005086:	70fb      	strb	r3, [r7, #3]
 8005088:	460b      	mov	r3, r1
 800508a:	803b      	strh	r3, [r7, #0]
 800508c:	4613      	mov	r3, r2
 800508e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005098:	2b00      	cmp	r3, #0
 800509a:	da0f      	bge.n	80050bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	f003 0207 	and.w	r2, r3, #7
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	3310      	adds	r3, #16
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	4413      	add	r3, r2
 80050b0:	3304      	adds	r3, #4
 80050b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	705a      	strb	r2, [r3, #1]
 80050ba:	e00f      	b.n	80050dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	f003 0207 	and.w	r2, r3, #7
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	4413      	add	r3, r2
 80050d2:	3304      	adds	r3, #4
 80050d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80050e8:	883b      	ldrh	r3, [r7, #0]
 80050ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	78ba      	ldrb	r2, [r7, #2]
 80050f6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80050f8:	78bb      	ldrb	r3, [r7, #2]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d102      	bne.n	8005104 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_PCD_EP_Open+0x9c>
 800510e:	2302      	movs	r3, #2
 8005110:	e00e      	b.n	8005130 <HAL_PCD_EP_Open+0xba>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68f9      	ldr	r1, [r7, #12]
 8005120:	4618      	mov	r0, r3
 8005122:	f008 fe31 	bl	800dd88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 800512e:	7afb      	ldrb	r3, [r7, #11]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	460b      	mov	r3, r1
 8005142:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005148:	2b00      	cmp	r3, #0
 800514a:	da0f      	bge.n	800516c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	f003 0207 	and.w	r2, r3, #7
 8005152:	4613      	mov	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	3310      	adds	r3, #16
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4413      	add	r3, r2
 8005160:	3304      	adds	r3, #4
 8005162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	705a      	strb	r2, [r3, #1]
 800516a:	e00f      	b.n	800518c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	f003 0207 	and.w	r2, r3, #7
 8005172:	4613      	mov	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	4413      	add	r3, r2
 8005182:	3304      	adds	r3, #4
 8005184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	b2da      	uxtb	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_PCD_EP_Close+0x6e>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e00e      	b.n	80051c4 <HAL_PCD_EP_Close+0x8c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68f9      	ldr	r1, [r7, #12]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f009 f947 	bl	800e448 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	607a      	str	r2, [r7, #4]
 80051d6:	603b      	str	r3, [r7, #0]
 80051d8:	460b      	mov	r3, r1
 80051da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051dc:	7afb      	ldrb	r3, [r7, #11]
 80051de:	f003 0207 	and.w	r2, r3, #7
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	3304      	adds	r3, #4
 80051f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2200      	movs	r2, #0
 8005206:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2200      	movs	r2, #0
 800520c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800520e:	7afb      	ldrb	r3, [r7, #11]
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	b2da      	uxtb	r2, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6979      	ldr	r1, [r7, #20]
 8005220:	4618      	mov	r0, r3
 8005222:	f009 fa9b 	bl	800e75c <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	f003 0207 	and.w	r2, r3, #7
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	440b      	add	r3, r1
 800524e:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8005252:	681b      	ldr	r3, [r3, #0]
}
 8005254:	4618      	mov	r0, r3
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	460b      	mov	r3, r1
 800526e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005270:	7afb      	ldrb	r3, [r7, #11]
 8005272:	f003 0207 	and.w	r2, r3, #7
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	3310      	adds	r3, #16
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	3304      	adds	r3, #4
 8005286:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2200      	movs	r2, #0
 80052a6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2201      	movs	r2, #1
 80052ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052ae:	7afb      	ldrb	r3, [r7, #11]
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6979      	ldr	r1, [r7, #20]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f009 fa4b 	bl	800e75c <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052dc:	78fb      	ldrb	r3, [r7, #3]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	7912      	ldrb	r2, [r2, #4]
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d901      	bls.n	80052ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e040      	b.n	8005370 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	da0f      	bge.n	8005316 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	f003 0207 	and.w	r2, r3, #7
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	3310      	adds	r3, #16
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	4413      	add	r3, r2
 800530a:	3304      	adds	r3, #4
 800530c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	705a      	strb	r2, [r3, #1]
 8005314:	e00d      	b.n	8005332 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005316:	78fa      	ldrb	r2, [r7, #3]
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	4413      	add	r3, r2
 8005328:	3304      	adds	r3, #4
 800532a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	b2da      	uxtb	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_PCD_EP_SetStall+0x82>
 800534e:	2302      	movs	r3, #2
 8005350:	e00e      	b.n	8005370 <HAL_PCD_EP_SetStall+0xa0>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68f9      	ldr	r1, [r7, #12]
 8005360:	4618      	mov	r0, r3
 8005362:	f00a fa65 	bl	800f830 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	7912      	ldrb	r2, [r2, #4]
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e042      	b.n	800541c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800539a:	2b00      	cmp	r3, #0
 800539c:	da0f      	bge.n	80053be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800539e:	78fb      	ldrb	r3, [r7, #3]
 80053a0:	f003 0207 	and.w	r2, r3, #7
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	3310      	adds	r3, #16
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	4413      	add	r3, r2
 80053b2:	3304      	adds	r3, #4
 80053b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	705a      	strb	r2, [r3, #1]
 80053bc:	e00f      	b.n	80053de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053be:	78fb      	ldrb	r3, [r7, #3]
 80053c0:	f003 0207 	and.w	r2, r3, #7
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	4413      	add	r3, r2
 80053d4:	3304      	adds	r3, #4
 80053d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_PCD_EP_ClrStall+0x86>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e00e      	b.n	800541c <HAL_PCD_EP_ClrStall+0xa4>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68f9      	ldr	r1, [r7, #12]
 800540c:	4618      	mov	r0, r3
 800540e:	f00a fa55 	bl	800f8bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08e      	sub	sp, #56	@ 0x38
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800542c:	e326      	b.n	8005a7c <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005434:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8005436:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005438:	b2db      	uxtb	r3, r3
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8005442:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005446:	2b00      	cmp	r3, #0
 8005448:	f040 8124 	bne.w	8005694 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800544c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	2b00      	cmp	r3, #0
 8005454:	d13e      	bne.n	80054d4 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4b89      	ldr	r3, [pc, #548]	@ (8005684 <PCD_EP_ISR_Handler+0x260>)
 800545e:	4013      	ands	r3, r2
 8005460:	60bb      	str	r3, [r7, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800546c:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3314      	adds	r3, #20
 8005472:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800547e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	0c1b      	lsrs	r3, r3, #16
 8005486:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800548a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800548c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800548e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	441a      	add	r2, r3
 8005498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800549c:	2100      	movs	r1, #0
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f00b fb17 	bl	8010ad2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	7c5b      	ldrb	r3, [r3, #17]
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 82e6 	beq.w	8005a7c <PCD_EP_ISR_Handler+0x658>
 80054b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f040 82e1 	bne.w	8005a7c <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	7c5b      	ldrb	r3, [r3, #17]
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	745a      	strb	r2, [r3, #17]
 80054d2:	e2d3      	b.n	8005a7c <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80054da:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80054e4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80054e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d027      	beq.n	800553e <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f7ff fb09 	bl	8004b10 <PCD_GET_EP_RX_CNT>
 80054fe:	4603      	mov	r3, r0
 8005500:	461a      	mov	r2, r3
 8005502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005504:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6818      	ldr	r0, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8005510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005512:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005516:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005518:	b29b      	uxth	r3, r3
 800551a:	f00a fb07 	bl	800fb2c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	4b58      	ldr	r3, [pc, #352]	@ (8005688 <PCD_EP_ISR_Handler+0x264>)
 8005526:	4013      	ands	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005534:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f00b fa9e 	bl	8010a78 <HAL_PCD_SetupStageCallback>
 800553c:	e29e      	b.n	8005a7c <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800553e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8005542:	2b00      	cmp	r3, #0
 8005544:	f280 829a 	bge.w	8005a7c <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4b4e      	ldr	r3, [pc, #312]	@ (8005688 <PCD_EP_ISR_Handler+0x264>)
 8005550:	4013      	ands	r3, r2
 8005552:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800555a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800555e:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	4619      	mov	r1, r3
 800556a:	4610      	mov	r0, r2
 800556c:	f7ff fad0 	bl	8004b10 <PCD_GET_EP_RX_CNT>
 8005570:	4603      	mov	r3, r0
 8005572:	461a      	mov	r2, r3
 8005574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005576:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d019      	beq.n	80055b4 <PCD_EP_ISR_Handler+0x190>
 8005580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d015      	beq.n	80055b4 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800558e:	6959      	ldr	r1, [r3, #20]
 8005590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005592:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005596:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005598:	b29b      	uxth	r3, r3
 800559a:	f00a fac7 	bl	800fb2c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800559e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a0:	695a      	ldr	r2, [r3, #20]
 80055a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	441a      	add	r2, r3
 80055a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055aa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80055ac:	2100      	movs	r1, #0
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f00b fa74 	bl	8010a9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80055bc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80055be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f040 825a 	bne.w	8005a7c <PCD_EP_ISR_Handler+0x658>
 80055c8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80055ca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80055ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055d2:	f000 8253 	beq.w	8005a7c <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80055d6:	4b2d      	ldr	r3, [pc, #180]	@ (800568c <PCD_EP_ISR_Handler+0x268>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4a2c      	ldr	r2, [pc, #176]	@ (800568c <PCD_EP_ISR_Handler+0x268>)
 80055dc:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80055e0:	6053      	str	r3, [r2, #4]
 80055e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <PCD_EP_ISR_Handler+0x1d4>
 80055ea:	4b28      	ldr	r3, [pc, #160]	@ (800568c <PCD_EP_ISR_Handler+0x268>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	4a27      	ldr	r2, [pc, #156]	@ (800568c <PCD_EP_ISR_Handler+0x268>)
 80055f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055f4:	6053      	str	r3, [r2, #4]
 80055f6:	e02e      	b.n	8005656 <PCD_EP_ISR_Handler+0x232>
 80055f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80055fe:	d814      	bhi.n	800562a <PCD_EP_ISR_Handler+0x206>
 8005600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	085b      	lsrs	r3, r3, #1
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <PCD_EP_ISR_Handler+0x1f6>
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	3301      	adds	r3, #1
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	4b1c      	ldr	r3, [pc, #112]	@ (800568c <PCD_EP_ISR_Handler+0x268>)
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	069b      	lsls	r3, r3, #26
 8005622:	491a      	ldr	r1, [pc, #104]	@ (800568c <PCD_EP_ISR_Handler+0x268>)
 8005624:	4313      	orrs	r3, r2
 8005626:	604b      	str	r3, [r1, #4]
 8005628:	e015      	b.n	8005656 <PCD_EP_ISR_Handler+0x232>
 800562a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	2b00      	cmp	r3, #0
 800563c:	d102      	bne.n	8005644 <PCD_EP_ISR_Handler+0x220>
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	3b01      	subs	r3, #1
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	4b11      	ldr	r3, [pc, #68]	@ (800568c <PCD_EP_ISR_Handler+0x268>)
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	069b      	lsls	r3, r3, #26
 800564c:	4313      	orrs	r3, r2
 800564e:	4a0f      	ldr	r2, [pc, #60]	@ (800568c <PCD_EP_ISR_Handler+0x268>)
 8005650:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005654:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	4b0c      	ldr	r3, [pc, #48]	@ (8005690 <PCD_EP_ISR_Handler+0x26c>)
 800565e:	4013      	ands	r3, r2
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800567c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	e1fb      	b.n	8005a7c <PCD_EP_ISR_Handler+0x658>
 8005684:	07ff8f0f 	.word	0x07ff8f0f
 8005688:	07ff0f8f 	.word	0x07ff0f8f
 800568c:	40016400 	.word	0x40016400
 8005690:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	461a      	mov	r2, r3
 800569a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 80056a6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f280 80bd 	bge.w	800582a <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	4b9e      	ldr	r3, [pc, #632]	@ (800593c <PCD_EP_ISR_Handler+0x518>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80056da:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80056dc:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	4413      	add	r3, r2
 80056f0:	3304      	adds	r3, #4
 80056f2:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80056f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f6:	7b1b      	ldrb	r3, [r3, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d116      	bne.n	800572a <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	4619      	mov	r1, r3
 8005706:	4610      	mov	r0, r2
 8005708:	f7ff fa02 	bl	8004b10 <PCD_GET_EP_RX_CNT>
 800570c:	4603      	mov	r3, r0
 800570e:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8005710:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005712:	2b00      	cmp	r3, #0
 8005714:	d067      	beq.n	80057e6 <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800571c:	6959      	ldr	r1, [r3, #20]
 800571e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005720:	88da      	ldrh	r2, [r3, #6]
 8005722:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005724:	f00a fa02 	bl	800fb2c <USB_ReadPMA>
 8005728:	e05d      	b.n	80057e6 <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800572a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572c:	78db      	ldrb	r3, [r3, #3]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d108      	bne.n	8005744 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005732:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005734:	461a      	mov	r2, r3
 8005736:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f9ad 	bl	8005a98 <HAL_PCD_EP_DB_Receive>
 800573e:	4603      	mov	r3, r0
 8005740:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005742:	e050      	b.n	80057e6 <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	4b7a      	ldr	r3, [pc, #488]	@ (8005940 <PCD_EP_ISR_Handler+0x51c>)
 8005756:	4013      	ands	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	441a      	add	r2, r3
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800576e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005772:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d016      	beq.n	80057ba <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	4619      	mov	r1, r3
 8005796:	4610      	mov	r0, r2
 8005798:	f7ff f9db 	bl	8004b52 <PCD_GET_EP_DBUF0_CNT>
 800579c:	4603      	mov	r3, r0
 800579e:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80057a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01f      	beq.n	80057e6 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ac:	6959      	ldr	r1, [r3, #20]
 80057ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b0:	891a      	ldrh	r2, [r3, #8]
 80057b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057b4:	f00a f9ba 	bl	800fb2c <USB_ReadPMA>
 80057b8:	e015      	b.n	80057e6 <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	4619      	mov	r1, r3
 80057c4:	4610      	mov	r0, r2
 80057c6:	f7ff f9e5 	bl	8004b94 <PCD_GET_EP_DBUF1_CNT>
 80057ca:	4603      	mov	r3, r0
 80057cc:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80057ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d008      	beq.n	80057e6 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6818      	ldr	r0, [r3, #0]
 80057d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057da:	6959      	ldr	r1, [r3, #20]
 80057dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057de:	895a      	ldrh	r2, [r3, #10]
 80057e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057e2:	f00a f9a3 	bl	800fb2c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80057e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e8:	69da      	ldr	r2, [r3, #28]
 80057ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057ec:	441a      	add	r2, r3
 80057ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80057f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f4:	695a      	ldr	r2, [r3, #20]
 80057f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057f8:	441a      	add	r2, r3
 80057fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80057fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d004      	beq.n	8005810 <PCD_EP_ISR_Handler+0x3ec>
 8005806:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	429a      	cmp	r2, r3
 800580e:	d206      	bcs.n	800581e <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	4619      	mov	r1, r3
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f00b f940 	bl	8010a9c <HAL_PCD_DataOutStageCallback>
 800581c:	e005      	b.n	800582a <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005824:	4618      	mov	r0, r3
 8005826:	f008 ff99 	bl	800e75c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800582a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800582c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 8123 	beq.w	8005a7c <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8005836:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	3310      	adds	r3, #16
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	4413      	add	r3, r2
 8005848:	3304      	adds	r3, #4
 800584a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	4b39      	ldr	r3, [pc, #228]	@ (8005944 <PCD_EP_ISR_Handler+0x520>)
 800585e:	4013      	ands	r3, r2
 8005860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005872:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005876:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800587a:	78db      	ldrb	r3, [r3, #3]
 800587c:	2b01      	cmp	r3, #1
 800587e:	f040 80b8 	bne.w	80059f2 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8005882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005884:	2200      	movs	r2, #0
 8005886:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588a:	7b1b      	ldrb	r3, [r3, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 80a9 	beq.w	80059e4 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005892:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005898:	2b00      	cmp	r3, #0
 800589a:	d055      	beq.n	8005948 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800589c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800589e:	785b      	ldrb	r3, [r3, #1]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d124      	bne.n	80058ee <PCD_EP_ISR_Handler+0x4ca>
 80058a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058c2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	e07a      	b.n	80059e4 <PCD_EP_ISR_Handler+0x5c0>
 80058ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d176      	bne.n	80059e4 <PCD_EP_ISR_Handler+0x5c0>
 80058f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005900:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005910:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005914:	b292      	uxth	r2, r2
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005922:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005930:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005934:	6812      	ldr	r2, [r2, #0]
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e054      	b.n	80059e4 <PCD_EP_ISR_Handler+0x5c0>
 800593a:	bf00      	nop
 800593c:	07ff0f8f 	.word	0x07ff0f8f
 8005940:	07ff8f8f 	.word	0x07ff8f8f
 8005944:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d124      	bne.n	800599a <PCD_EP_ISR_Handler+0x576>
 8005950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800595a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800596a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800596e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005972:	605a      	str	r2, [r3, #4]
 8005974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800597e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800598e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005992:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005996:	605a      	str	r2, [r3, #4]
 8005998:	e024      	b.n	80059e4 <PCD_EP_ISR_Handler+0x5c0>
 800599a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599c:	785b      	ldrb	r3, [r3, #1]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d120      	bne.n	80059e4 <PCD_EP_ISR_Handler+0x5c0>
 80059a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059c0:	b292      	uxth	r2, r2
 80059c2:	605a      	str	r2, [r3, #4]
 80059c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80059ce:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80059d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059e0:	6852      	ldr	r2, [r2, #4]
 80059e2:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f00b f871 	bl	8010ad2 <HAL_PCD_DataInStageCallback>
 80059f0:	e044      	b.n	8005a7c <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80059f2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80059f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d139      	bne.n	8005a70 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80059fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	0c1b      	lsrs	r3, r3, #16
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a14:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8005a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d906      	bls.n	8005a2e <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8005a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a26:	1ad2      	subs	r2, r2, r3
 8005a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2a:	619a      	str	r2, [r3, #24]
 8005a2c:	e002      	b.n	8005a34 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8005a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a30:	2200      	movs	r2, #0
 8005a32:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	4619      	mov	r1, r3
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f00b f845 	bl	8010ad2 <HAL_PCD_DataInStageCallback>
 8005a48:	e018      	b.n	8005a7c <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a50:	441a      	add	r2, r3
 8005a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a54:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a58:	69da      	ldr	r2, [r3, #28]
 8005a5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a5c:	441a      	add	r2, r3
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a60:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f008 fe77 	bl	800e75c <USB_EPStartXfer>
 8005a6e:	e005      	b.n	8005a7c <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005a70:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005a72:	461a      	mov	r2, r3
 8005a74:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f8e8 	bl	8005c4c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f47f acd1 	bne.w	800542e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3738      	adds	r7, #56	@ 0x38
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop

08005a98 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08a      	sub	sp, #40	@ 0x28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d062      	beq.n	8005b76 <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4610      	mov	r0, r2
 8005abc:	f7ff f849 	bl	8004b52 <PCD_GET_EP_DBUF0_CNT>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	699a      	ldr	r2, [r3, #24]
 8005ac8:	8bfb      	ldrh	r3, [r7, #30]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d306      	bcc.n	8005adc <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	8bfb      	ldrh	r3, [r7, #30]
 8005ad4:	1ad2      	subs	r2, r2, r3
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	619a      	str	r2, [r3, #24]
 8005ada:	e002      	b.n	8005ae2 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d11b      	bne.n	8005b22 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	4b52      	ldr	r3, [pc, #328]	@ (8005c44 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	441a      	add	r2, r3
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b20:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d017      	beq.n	8005b5c <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	4b42      	ldr	r3, [pc, #264]	@ (8005c48 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	441a      	add	r2, r3
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b5a:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8005b5c:	8bfb      	ldrh	r3, [r7, #30]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d06b      	beq.n	8005c3a <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	6959      	ldr	r1, [r3, #20]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	891a      	ldrh	r2, [r3, #8]
 8005b6e:	8bfb      	ldrh	r3, [r7, #30]
 8005b70:	f009 ffdc 	bl	800fb2c <USB_ReadPMA>
 8005b74:	e061      	b.n	8005c3a <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4610      	mov	r0, r2
 8005b82:	f7ff f807 	bl	8004b94 <PCD_GET_EP_DBUF1_CNT>
 8005b86:	4603      	mov	r3, r0
 8005b88:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	8bfb      	ldrh	r3, [r7, #30]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d306      	bcc.n	8005ba2 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	699a      	ldr	r2, [r3, #24]
 8005b98:	8bfb      	ldrh	r3, [r7, #30]
 8005b9a:	1ad2      	subs	r2, r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	619a      	str	r2, [r3, #24]
 8005ba0:	e002      	b.n	8005ba8 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d11b      	bne.n	8005be8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	4b20      	ldr	r3, [pc, #128]	@ (8005c44 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	441a      	add	r2, r3
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005be6:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005be8:	88fb      	ldrh	r3, [r7, #6]
 8005bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d117      	bne.n	8005c22 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4b11      	ldr	r3, [pc, #68]	@ (8005c48 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	623b      	str	r3, [r7, #32]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	441a      	add	r2, r3
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c20:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8005c22:	8bfb      	ldrh	r3, [r7, #30]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d008      	beq.n	8005c3a <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	6959      	ldr	r1, [r3, #20]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	895a      	ldrh	r2, [r3, #10]
 8005c34:	8bfb      	ldrh	r3, [r7, #30]
 8005c36:	f009 ff79 	bl	800fb2c <USB_ReadPMA>
    }
  }

  return count;
 8005c3a:	8bfb      	ldrh	r3, [r7, #30]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3728      	adds	r7, #40	@ 0x28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	07ffbf8f 	.word	0x07ffbf8f
 8005c48:	07ff8f8f 	.word	0x07ff8f8f

08005c4c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08e      	sub	sp, #56	@ 0x38
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 81d5 	beq.w	8006010 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4610      	mov	r0, r2
 8005c72:	f7fe ff6e 	bl	8004b52 <PCD_GET_EP_DBUF0_CNT>
 8005c76:	4603      	mov	r3, r0
 8005c78:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	8bfb      	ldrh	r3, [r7, #30]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d906      	bls.n	8005c92 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	699a      	ldr	r2, [r3, #24]
 8005c88:	8bfb      	ldrh	r3, [r7, #30]
 8005c8a:	1ad2      	subs	r2, r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	619a      	str	r2, [r3, #24]
 8005c90:	e002      	b.n	8005c98 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2200      	movs	r2, #0
 8005c96:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f040 80c1 	bne.w	8005e24 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	785b      	ldrb	r3, [r3, #1]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d124      	bne.n	8005cf4 <HAL_PCD_EP_DB_Transmit+0xa8>
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005cb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005cc4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005cc8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005cd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ce8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005cec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	e024      	b.n	8005d3e <HAL_PCD_EP_DB_Transmit+0xf2>
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d120      	bne.n	8005d3e <HAL_PCD_EP_DB_Transmit+0xf2>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d1a:	b292      	uxth	r2, r2
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005d28:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	785b      	ldrb	r3, [r3, #1]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d124      	bne.n	8005d90 <HAL_PCD_EP_DB_Transmit+0x144>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d64:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005d68:	605a      	str	r2, [r3, #4]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d88:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005d8c:	605a      	str	r2, [r3, #4]
 8005d8e:	e024      	b.n	8005dda <HAL_PCD_EP_DB_Transmit+0x18e>
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d120      	bne.n	8005dda <HAL_PCD_EP_DB_Transmit+0x18e>
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	00db      	lsls	r3, r3, #3
 8005d9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005da2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005db2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005db6:	b292      	uxth	r2, r2
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005dc4:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005dd2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005dd6:	6852      	ldr	r2, [r2, #4]
 8005dd8:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	4619      	mov	r1, r3
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f00a fe76 	bl	8010ad2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 82e5 	beq.w	80063bc <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4b8e      	ldr	r3, [pc, #568]	@ (800603c <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	441a      	add	r2, r3
 8005e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	e2cb      	b.n	80063bc <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e24:	88fb      	ldrh	r3, [r7, #6]
 8005e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d017      	beq.n	8005e5e <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4b7f      	ldr	r3, [pc, #508]	@ (800603c <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	441a      	add	r2, r3
 8005e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e5c:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	f040 82a9 	bne.w	80063bc <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	695a      	ldr	r2, [r3, #20]
 8005e6e:	8bfb      	ldrh	r3, [r7, #30]
 8005e70:	441a      	add	r2, r3
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	69da      	ldr	r2, [r3, #28]
 8005e7a:	8bfb      	ldrh	r3, [r7, #30]
 8005e7c:	441a      	add	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	6a1a      	ldr	r2, [r3, #32]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d309      	bcc.n	8005ea2 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	6a1a      	ldr	r2, [r3, #32]
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	1ad2      	subs	r2, r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	621a      	str	r2, [r3, #32]
 8005ea0:	e014      	b.n	8005ecc <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d106      	bne.n	8005eb8 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8005eaa:	8bfb      	ldrh	r3, [r7, #30]
 8005eac:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005eb6:	e009      	b.n	8005ecc <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d16a      	bne.n	8005faa <HAL_PCD_EP_DB_Transmit+0x35e>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ede:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005eee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ef2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d112      	bne.n	8005f24 <HAL_PCD_EP_DB_Transmit+0x2d8>
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f1c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	e06a      	b.n	8005ffa <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f26:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f28:	d81e      	bhi.n	8005f68 <HAL_PCD_EP_DB_Transmit+0x31c>
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2c:	085b      	lsrs	r3, r3, #1
 8005f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8005f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f4e:	6819      	ldr	r1, [r3, #0]
 8005f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f52:	069a      	lsls	r2, r3, #26
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f62:	430a      	orrs	r2, r1
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e048      	b.n	8005ffa <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d102      	bne.n	8005f7e <HAL_PCD_EP_DB_Transmit+0x332>
 8005f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f90:	069b      	lsls	r3, r3, #26
 8005f92:	431a      	orrs	r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fa2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	e027      	b.n	8005ffa <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	785b      	ldrb	r3, [r3, #1]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d123      	bne.n	8005ffa <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fcc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fd0:	b292      	uxth	r2, r2
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fde:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fe2:	6819      	ldr	r1, [r3, #0]
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	041a      	lsls	r2, r3, #16
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ff2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	6959      	ldr	r1, [r3, #20]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	891a      	ldrh	r2, [r3, #8]
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	b29b      	uxth	r3, r3
 800600a:	f009 fd2e 	bl	800fa6a <USB_WritePMA>
 800600e:	e1d5      	b.n	80063bc <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	4619      	mov	r1, r3
 800601a:	4610      	mov	r0, r2
 800601c:	f7fe fdba 	bl	8004b94 <PCD_GET_EP_DBUF1_CNT>
 8006020:	4603      	mov	r3, r0
 8006022:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	699a      	ldr	r2, [r3, #24]
 8006028:	8bfb      	ldrh	r3, [r7, #30]
 800602a:	429a      	cmp	r2, r3
 800602c:	d308      	bcc.n	8006040 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	699a      	ldr	r2, [r3, #24]
 8006032:	8bfb      	ldrh	r3, [r7, #30]
 8006034:	1ad2      	subs	r2, r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	619a      	str	r2, [r3, #24]
 800603a:	e004      	b.n	8006046 <HAL_PCD_EP_DB_Transmit+0x3fa>
 800603c:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2200      	movs	r2, #0
 8006044:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f040 80c1 	bne.w	80061d2 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	785b      	ldrb	r3, [r3, #1]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d124      	bne.n	80060a2 <HAL_PCD_EP_DB_Transmit+0x456>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006062:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006072:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006076:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006086:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006096:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800609a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	e024      	b.n	80060ec <HAL_PCD_EP_DB_Transmit+0x4a0>
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	785b      	ldrb	r3, [r3, #1]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d120      	bne.n	80060ec <HAL_PCD_EP_DB_Transmit+0x4a0>
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060c8:	b292      	uxth	r2, r2
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80060d6:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	785b      	ldrb	r3, [r3, #1]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d124      	bne.n	800613e <HAL_PCD_EP_DB_Transmit+0x4f2>
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800610e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006112:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006116:	605a      	str	r2, [r3, #4]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006122:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006132:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006136:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800613a:	605a      	str	r2, [r3, #4]
 800613c:	e024      	b.n	8006188 <HAL_PCD_EP_DB_Transmit+0x53c>
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	785b      	ldrb	r3, [r3, #1]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d120      	bne.n	8006188 <HAL_PCD_EP_DB_Transmit+0x53c>
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006150:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006160:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006164:	b292      	uxth	r2, r2
 8006166:	605a      	str	r2, [r3, #4]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8006172:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006180:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006184:	6852      	ldr	r2, [r2, #4]
 8006186:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	4619      	mov	r1, r3
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f00a fc9f 	bl	8010ad2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006194:	88fb      	ldrh	r3, [r7, #6]
 8006196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800619a:	2b00      	cmp	r3, #0
 800619c:	f040 810e 	bne.w	80063bc <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4b95      	ldr	r3, [pc, #596]	@ (8006408 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	623b      	str	r3, [r7, #32]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	441a      	add	r2, r3
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	e0f4      	b.n	80063bc <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80061d2:	88fb      	ldrh	r3, [r7, #6]
 80061d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d117      	bne.n	800620c <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	4b86      	ldr	r3, [pc, #536]	@ (8006408 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80061ee:	4013      	ands	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	441a      	add	r2, r3
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800620a:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006212:	2b01      	cmp	r3, #1
 8006214:	f040 80d2 	bne.w	80063bc <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	695a      	ldr	r2, [r3, #20]
 800621c:	8bfb      	ldrh	r3, [r7, #30]
 800621e:	441a      	add	r2, r3
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	8bfb      	ldrh	r3, [r7, #30]
 800622a:	441a      	add	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	6a1a      	ldr	r2, [r3, #32]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	429a      	cmp	r2, r3
 800623a:	d309      	bcc.n	8006250 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	6a1a      	ldr	r2, [r3, #32]
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	1ad2      	subs	r2, r2, r3
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	621a      	str	r2, [r3, #32]
 800624e:	e014      	b.n	800627a <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d106      	bne.n	8006266 <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8006258:	8bfb      	ldrh	r3, [r7, #30]
 800625a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006264:	e009      	b.n	800627a <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2200      	movs	r2, #0
 8006270:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	785b      	ldrb	r3, [r3, #1]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d16a      	bne.n	8006358 <HAL_PCD_EP_DB_Transmit+0x70c>
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800628c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800629c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062a0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80062a4:	605a      	str	r2, [r3, #4]
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d112      	bne.n	80062d2 <HAL_PCD_EP_DB_Transmit+0x686>
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062ca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80062ce:	605a      	str	r2, [r3, #4]
 80062d0:	e06a      	b.n	80063a8 <HAL_PCD_EP_DB_Transmit+0x75c>
 80062d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80062d6:	d81e      	bhi.n	8006316 <HAL_PCD_EP_DB_Transmit+0x6ca>
 80062d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062da:	085b      	lsrs	r3, r3, #1
 80062dc:	61bb      	str	r3, [r7, #24]
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <HAL_PCD_EP_DB_Transmit+0x6a2>
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	3301      	adds	r3, #1
 80062ec:	61bb      	str	r3, [r7, #24]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062fc:	6859      	ldr	r1, [r3, #4]
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	069a      	lsls	r2, r3, #26
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800630c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006310:	430a      	orrs	r2, r1
 8006312:	605a      	str	r2, [r3, #4]
 8006314:	e048      	b.n	80063a8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	61bb      	str	r3, [r7, #24]
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	2b00      	cmp	r3, #0
 8006324:	d102      	bne.n	800632c <HAL_PCD_EP_DB_Transmit+0x6e0>
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	3b01      	subs	r3, #1
 800632a:	61bb      	str	r3, [r7, #24]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006336:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	069b      	lsls	r3, r3, #26
 8006340:	431a      	orrs	r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800634c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006350:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006354:	605a      	str	r2, [r3, #4]
 8006356:	e027      	b.n	80063a8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	785b      	ldrb	r3, [r3, #1]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d123      	bne.n	80063a8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800636a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800637a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800637e:	b292      	uxth	r2, r2
 8006380:	605a      	str	r2, [r3, #4]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800638c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006390:	6859      	ldr	r1, [r3, #4]
 8006392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006394:	041a      	lsls	r2, r3, #16
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063a4:	430a      	orrs	r2, r1
 80063a6:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	6959      	ldr	r1, [r3, #20]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	895a      	ldrh	r2, [r3, #10]
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f009 fb57 	bl	800fa6a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4b0f      	ldr	r3, [pc, #60]	@ (800640c <HAL_PCD_EP_DB_Transmit+0x7c0>)
 80063ce:	4013      	ands	r3, r2
 80063d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80063d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d4:	f083 0310 	eor.w	r3, r3, #16
 80063d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80063da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063dc:	f083 0320 	eor.w	r3, r3, #32
 80063e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	441a      	add	r2, r3
 80063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063fa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3738      	adds	r7, #56	@ 0x38
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	07ff8f8f 	.word	0x07ff8f8f
 800640c:	07ff8fbf 	.word	0x07ff8fbf

08006410 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	607b      	str	r3, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	817b      	strh	r3, [r7, #10]
 800641e:	4613      	mov	r3, r2
 8006420:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006422:	897b      	ldrh	r3, [r7, #10]
 8006424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00c      	beq.n	8006448 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800642e:	897b      	ldrh	r3, [r7, #10]
 8006430:	f003 0207 	and.w	r2, r3, #7
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	3310      	adds	r3, #16
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4413      	add	r3, r2
 8006442:	3304      	adds	r3, #4
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	e00a      	b.n	800645e <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006448:	897a      	ldrh	r2, [r7, #10]
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4413      	add	r3, r2
 800645a:	3304      	adds	r3, #4
 800645c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800645e:	893b      	ldrh	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d107      	bne.n	8006474 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	2200      	movs	r2, #0
 8006468:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	b29a      	uxth	r2, r3
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	80da      	strh	r2, [r3, #6]
 8006472:	e00b      	b.n	800648c <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2201      	movs	r2, #1
 8006478:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	b29a      	uxth	r2, r3
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	0c1b      	lsrs	r3, r3, #16
 8006486:	b29a      	uxth	r2, r3
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800649a:	b480      	push	{r7}
 800649c:	b085      	sub	sp, #20
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064bc:	f043 0201 	orr.w	r2, r3, #1
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c8:	f043 0202 	orr.w	r2, r3, #2
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
	...

080064f8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 80064fc:	4b05      	ldr	r3, [pc, #20]	@ (8006514 <HAL_PWREx_EnableVddUSB+0x1c>)
 80064fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006500:	4a04      	ldr	r2, [pc, #16]	@ (8006514 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006502:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006506:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8006508:	bf00      	nop
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	44020800 	.word	0x44020800

08006518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d102      	bne.n	800652c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	f000 bc28 	b.w	8006d7c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800652c:	4b94      	ldr	r3, [pc, #592]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	f003 0318 	and.w	r3, r3, #24
 8006534:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8006536:	4b92      	ldr	r3, [pc, #584]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 8006538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b00      	cmp	r3, #0
 800654a:	d05b      	beq.n	8006604 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	2b08      	cmp	r3, #8
 8006550:	d005      	beq.n	800655e <HAL_RCC_OscConfig+0x46>
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	2b18      	cmp	r3, #24
 8006556:	d114      	bne.n	8006582 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d111      	bne.n	8006582 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d102      	bne.n	800656c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	f000 bc08 	b.w	8006d7c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800656c:	4b84      	ldr	r3, [pc, #528]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	041b      	lsls	r3, r3, #16
 800657a:	4981      	ldr	r1, [pc, #516]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 800657c:	4313      	orrs	r3, r2
 800657e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8006580:	e040      	b.n	8006604 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d023      	beq.n	80065d2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800658a:	4b7d      	ldr	r3, [pc, #500]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a7c      	ldr	r2, [pc, #496]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 8006590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006596:	f7fc fdf3 	bl	8003180 <HAL_GetTick>
 800659a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800659c:	e008      	b.n	80065b0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800659e:	f7fc fdef 	bl	8003180 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e3e5      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80065b0:	4b73      	ldr	r3, [pc, #460]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0f0      	beq.n	800659e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80065bc:	4b70      	ldr	r3, [pc, #448]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	041b      	lsls	r3, r3, #16
 80065ca:	496d      	ldr	r1, [pc, #436]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	618b      	str	r3, [r1, #24]
 80065d0:	e018      	b.n	8006604 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80065d2:	4b6b      	ldr	r3, [pc, #428]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a6a      	ldr	r2, [pc, #424]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80065d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065de:	f7fc fdcf 	bl	8003180 <HAL_GetTick>
 80065e2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80065e4:	e008      	b.n	80065f8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80065e6:	f7fc fdcb 	bl	8003180 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e3c1      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80065f8:	4b61      	ldr	r3, [pc, #388]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1f0      	bne.n	80065e6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 80a0 	beq.w	8006752 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	2b10      	cmp	r3, #16
 8006616:	d005      	beq.n	8006624 <HAL_RCC_OscConfig+0x10c>
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	2b18      	cmp	r3, #24
 800661c:	d109      	bne.n	8006632 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	2b03      	cmp	r3, #3
 8006622:	d106      	bne.n	8006632 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	f040 8092 	bne.w	8006752 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e3a4      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800663a:	d106      	bne.n	800664a <HAL_RCC_OscConfig+0x132>
 800663c:	4b50      	ldr	r3, [pc, #320]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a4f      	ldr	r2, [pc, #316]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 8006642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	e058      	b.n	80066fc <HAL_RCC_OscConfig+0x1e4>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d112      	bne.n	8006678 <HAL_RCC_OscConfig+0x160>
 8006652:	4b4b      	ldr	r3, [pc, #300]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a4a      	ldr	r2, [pc, #296]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 8006658:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	4b48      	ldr	r3, [pc, #288]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a47      	ldr	r2, [pc, #284]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 8006664:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	4b45      	ldr	r3, [pc, #276]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a44      	ldr	r2, [pc, #272]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 8006670:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	e041      	b.n	80066fc <HAL_RCC_OscConfig+0x1e4>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006680:	d112      	bne.n	80066a8 <HAL_RCC_OscConfig+0x190>
 8006682:	4b3f      	ldr	r3, [pc, #252]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a3e      	ldr	r2, [pc, #248]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 8006688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	4b3c      	ldr	r3, [pc, #240]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a3b      	ldr	r2, [pc, #236]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 8006694:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	4b39      	ldr	r3, [pc, #228]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a38      	ldr	r2, [pc, #224]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80066a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	e029      	b.n	80066fc <HAL_RCC_OscConfig+0x1e4>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80066b0:	d112      	bne.n	80066d8 <HAL_RCC_OscConfig+0x1c0>
 80066b2:	4b33      	ldr	r3, [pc, #204]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a32      	ldr	r2, [pc, #200]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80066b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	4b30      	ldr	r3, [pc, #192]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a2f      	ldr	r2, [pc, #188]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80066c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	4b2d      	ldr	r3, [pc, #180]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80066d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	e011      	b.n	80066fc <HAL_RCC_OscConfig+0x1e4>
 80066d8:	4b29      	ldr	r3, [pc, #164]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a28      	ldr	r2, [pc, #160]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80066de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	4b26      	ldr	r3, [pc, #152]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a25      	ldr	r2, [pc, #148]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80066ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066ee:	6013      	str	r3, [r2, #0]
 80066f0:	4b23      	ldr	r3, [pc, #140]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a22      	ldr	r2, [pc, #136]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 80066f6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80066fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d013      	beq.n	800672c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006704:	f7fc fd3c 	bl	8003180 <HAL_GetTick>
 8006708:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800670c:	f7fc fd38 	bl	8003180 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b64      	cmp	r3, #100	@ 0x64
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e32e      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800671e:	4b18      	ldr	r3, [pc, #96]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0f0      	beq.n	800670c <HAL_RCC_OscConfig+0x1f4>
 800672a:	e012      	b.n	8006752 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672c:	f7fc fd28 	bl	8003180 <HAL_GetTick>
 8006730:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006734:	f7fc fd24 	bl	8003180 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b64      	cmp	r3, #100	@ 0x64
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e31a      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006746:	4b0e      	ldr	r3, [pc, #56]	@ (8006780 <HAL_RCC_OscConfig+0x268>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1f0      	bne.n	8006734 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 809a 	beq.w	8006894 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d005      	beq.n	8006772 <HAL_RCC_OscConfig+0x25a>
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	2b18      	cmp	r3, #24
 800676a:	d149      	bne.n	8006800 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d146      	bne.n	8006800 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d104      	bne.n	8006784 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e2fe      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
 800677e:	bf00      	nop
 8006780:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d11c      	bne.n	80067c4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800678a:	4b9a      	ldr	r3, [pc, #616]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0218 	and.w	r2, r3, #24
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	429a      	cmp	r2, r3
 8006798:	d014      	beq.n	80067c4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800679a:	4b96      	ldr	r3, [pc, #600]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f023 0218 	bic.w	r2, r3, #24
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	4993      	ldr	r1, [pc, #588]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80067ac:	f000 fdd0 	bl	8007350 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80067b0:	4b91      	ldr	r3, [pc, #580]	@ (80069f8 <HAL_RCC_OscConfig+0x4e0>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fc fc59 	bl	800306c <HAL_InitTick>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e2db      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c4:	f7fc fcdc 	bl	8003180 <HAL_GetTick>
 80067c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067ca:	e008      	b.n	80067de <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80067cc:	f7fc fcd8 	bl	8003180 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e2ce      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067de:	4b85      	ldr	r3, [pc, #532]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0f0      	beq.n	80067cc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80067ea:	4b82      	ldr	r3, [pc, #520]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	041b      	lsls	r3, r3, #16
 80067f8:	497e      	ldr	r1, [pc, #504]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80067fe:	e049      	b.n	8006894 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d02c      	beq.n	8006862 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8006808:	4b7a      	ldr	r3, [pc, #488]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f023 0218 	bic.w	r2, r3, #24
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	4977      	ldr	r1, [pc, #476]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 8006816:	4313      	orrs	r3, r2
 8006818:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800681a:	4b76      	ldr	r3, [pc, #472]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a75      	ldr	r2, [pc, #468]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 8006820:	f043 0301 	orr.w	r3, r3, #1
 8006824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006826:	f7fc fcab 	bl	8003180 <HAL_GetTick>
 800682a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800682c:	e008      	b.n	8006840 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800682e:	f7fc fca7 	bl	8003180 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d901      	bls.n	8006840 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e29d      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006840:	4b6c      	ldr	r3, [pc, #432]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d0f0      	beq.n	800682e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800684c:	4b69      	ldr	r3, [pc, #420]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	041b      	lsls	r3, r3, #16
 800685a:	4966      	ldr	r1, [pc, #408]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 800685c:	4313      	orrs	r3, r2
 800685e:	610b      	str	r3, [r1, #16]
 8006860:	e018      	b.n	8006894 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006862:	4b64      	ldr	r3, [pc, #400]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a63      	ldr	r2, [pc, #396]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 8006868:	f023 0301 	bic.w	r3, r3, #1
 800686c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800686e:	f7fc fc87 	bl	8003180 <HAL_GetTick>
 8006872:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006874:	e008      	b.n	8006888 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006876:	f7fc fc83 	bl	8003180 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d901      	bls.n	8006888 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e279      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006888:	4b5a      	ldr	r3, [pc, #360]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1f0      	bne.n	8006876 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0308 	and.w	r3, r3, #8
 800689c:	2b00      	cmp	r3, #0
 800689e:	d03c      	beq.n	800691a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01c      	beq.n	80068e2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068a8:	4b52      	ldr	r3, [pc, #328]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80068aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068ae:	4a51      	ldr	r2, [pc, #324]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80068b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b8:	f7fc fc62 	bl	8003180 <HAL_GetTick>
 80068bc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80068c0:	f7fc fc5e 	bl	8003180 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e254      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80068d2:	4b48      	ldr	r3, [pc, #288]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80068d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0ef      	beq.n	80068c0 <HAL_RCC_OscConfig+0x3a8>
 80068e0:	e01b      	b.n	800691a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068e2:	4b44      	ldr	r3, [pc, #272]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80068e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068e8:	4a42      	ldr	r2, [pc, #264]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80068ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f2:	f7fc fc45 	bl	8003180 <HAL_GetTick>
 80068f6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80068f8:	e008      	b.n	800690c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80068fa:	f7fc fc41 	bl	8003180 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e237      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800690c:	4b39      	ldr	r3, [pc, #228]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 800690e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006912:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1ef      	bne.n	80068fa <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0304 	and.w	r3, r3, #4
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80d2 	beq.w	8006acc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006928:	4b34      	ldr	r3, [pc, #208]	@ (80069fc <HAL_RCC_OscConfig+0x4e4>)
 800692a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d118      	bne.n	8006966 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006934:	4b31      	ldr	r3, [pc, #196]	@ (80069fc <HAL_RCC_OscConfig+0x4e4>)
 8006936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006938:	4a30      	ldr	r2, [pc, #192]	@ (80069fc <HAL_RCC_OscConfig+0x4e4>)
 800693a:	f043 0301 	orr.w	r3, r3, #1
 800693e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006940:	f7fc fc1e 	bl	8003180 <HAL_GetTick>
 8006944:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006946:	e008      	b.n	800695a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006948:	f7fc fc1a 	bl	8003180 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e210      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800695a:	4b28      	ldr	r3, [pc, #160]	@ (80069fc <HAL_RCC_OscConfig+0x4e4>)
 800695c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0f0      	beq.n	8006948 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d108      	bne.n	8006980 <HAL_RCC_OscConfig+0x468>
 800696e:	4b21      	ldr	r3, [pc, #132]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 8006970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006974:	4a1f      	ldr	r2, [pc, #124]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 8006976:	f043 0301 	orr.w	r3, r3, #1
 800697a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800697e:	e074      	b.n	8006a6a <HAL_RCC_OscConfig+0x552>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d118      	bne.n	80069ba <HAL_RCC_OscConfig+0x4a2>
 8006988:	4b1a      	ldr	r3, [pc, #104]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 800698a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800698e:	4a19      	ldr	r2, [pc, #100]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 8006990:	f023 0301 	bic.w	r3, r3, #1
 8006994:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006998:	4b16      	ldr	r3, [pc, #88]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 800699a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800699e:	4a15      	ldr	r2, [pc, #84]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80069a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80069a8:	4b12      	ldr	r3, [pc, #72]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80069aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069ae:	4a11      	ldr	r2, [pc, #68]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80069b0:	f023 0304 	bic.w	r3, r3, #4
 80069b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80069b8:	e057      	b.n	8006a6a <HAL_RCC_OscConfig+0x552>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	2b05      	cmp	r3, #5
 80069c0:	d11e      	bne.n	8006a00 <HAL_RCC_OscConfig+0x4e8>
 80069c2:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80069c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069c8:	4a0a      	ldr	r2, [pc, #40]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80069ca:	f043 0304 	orr.w	r3, r3, #4
 80069ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80069d2:	4b08      	ldr	r3, [pc, #32]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80069d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069d8:	4a06      	ldr	r2, [pc, #24]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80069da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80069e2:	4b04      	ldr	r3, [pc, #16]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80069e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069e8:	4a02      	ldr	r2, [pc, #8]	@ (80069f4 <HAL_RCC_OscConfig+0x4dc>)
 80069ea:	f043 0301 	orr.w	r3, r3, #1
 80069ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80069f2:	e03a      	b.n	8006a6a <HAL_RCC_OscConfig+0x552>
 80069f4:	44020c00 	.word	0x44020c00
 80069f8:	20000024 	.word	0x20000024
 80069fc:	44020800 	.word	0x44020800
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2b85      	cmp	r3, #133	@ 0x85
 8006a06:	d118      	bne.n	8006a3a <HAL_RCC_OscConfig+0x522>
 8006a08:	4ba2      	ldr	r3, [pc, #648]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a0e:	4aa1      	ldr	r2, [pc, #644]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006a10:	f043 0304 	orr.w	r3, r3, #4
 8006a14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a18:	4b9e      	ldr	r3, [pc, #632]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a1e:	4a9d      	ldr	r2, [pc, #628]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a28:	4b9a      	ldr	r3, [pc, #616]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a2e:	4a99      	ldr	r2, [pc, #612]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006a30:	f043 0301 	orr.w	r3, r3, #1
 8006a34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a38:	e017      	b.n	8006a6a <HAL_RCC_OscConfig+0x552>
 8006a3a:	4b96      	ldr	r3, [pc, #600]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a40:	4a94      	ldr	r2, [pc, #592]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006a42:	f023 0301 	bic.w	r3, r3, #1
 8006a46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a4a:	4b92      	ldr	r3, [pc, #584]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a50:	4a90      	ldr	r2, [pc, #576]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006a52:	f023 0304 	bic.w	r3, r3, #4
 8006a56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a5a:	4b8e      	ldr	r3, [pc, #568]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a60:	4a8c      	ldr	r2, [pc, #560]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006a62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d016      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a72:	f7fc fb85 	bl	8003180 <HAL_GetTick>
 8006a76:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a78:	e00a      	b.n	8006a90 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a7a:	f7fc fb81 	bl	8003180 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e175      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a90:	4b80      	ldr	r3, [pc, #512]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0ed      	beq.n	8006a7a <HAL_RCC_OscConfig+0x562>
 8006a9e:	e015      	b.n	8006acc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa0:	f7fc fb6e 	bl	8003180 <HAL_GetTick>
 8006aa4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006aa6:	e00a      	b.n	8006abe <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa8:	f7fc fb6a 	bl	8003180 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e15e      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006abe:	4b75      	ldr	r3, [pc, #468]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1ed      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d036      	beq.n	8006b46 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d019      	beq.n	8006b14 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ae0:	4b6c      	ldr	r3, [pc, #432]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a6b      	ldr	r2, [pc, #428]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006ae6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006aea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aec:	f7fc fb48 	bl	8003180 <HAL_GetTick>
 8006af0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006af2:	e008      	b.n	8006b06 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006af4:	f7fc fb44 	bl	8003180 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e13a      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006b06:	4b63      	ldr	r3, [pc, #396]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0f0      	beq.n	8006af4 <HAL_RCC_OscConfig+0x5dc>
 8006b12:	e018      	b.n	8006b46 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b14:	4b5f      	ldr	r3, [pc, #380]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a5e      	ldr	r2, [pc, #376]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006b1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b20:	f7fc fb2e 	bl	8003180 <HAL_GetTick>
 8006b24:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006b26:	e008      	b.n	8006b3a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006b28:	f7fc fb2a 	bl	8003180 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e120      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006b3a:	4b56      	ldr	r3, [pc, #344]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1f0      	bne.n	8006b28 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 8115 	beq.w	8006d7a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	2b18      	cmp	r3, #24
 8006b54:	f000 80af 	beq.w	8006cb6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	f040 8086 	bne.w	8006c6e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006b62:	4b4c      	ldr	r3, [pc, #304]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a4b      	ldr	r2, [pc, #300]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006b68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b6e:	f7fc fb07 	bl	8003180 <HAL_GetTick>
 8006b72:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006b74:	e008      	b.n	8006b88 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006b76:	f7fc fb03 	bl	8003180 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d901      	bls.n	8006b88 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e0f9      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006b88:	4b42      	ldr	r3, [pc, #264]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1f0      	bne.n	8006b76 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8006b94:	4b3f      	ldr	r3, [pc, #252]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b98:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006b9c:	f023 0303 	bic.w	r3, r3, #3
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006ba8:	0212      	lsls	r2, r2, #8
 8006baa:	430a      	orrs	r2, r1
 8006bac:	4939      	ldr	r1, [pc, #228]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	628b      	str	r3, [r1, #40]	@ 0x28
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	025b      	lsls	r3, r3, #9
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	041b      	lsls	r3, r3, #16
 8006bd0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	061b      	lsls	r3, r3, #24
 8006bde:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006be2:	492c      	ldr	r1, [pc, #176]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006be8:	4b2a      	ldr	r3, [pc, #168]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bec:	4a29      	ldr	r2, [pc, #164]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006bee:	f023 0310 	bic.w	r3, r3, #16
 8006bf2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf8:	4a26      	ldr	r2, [pc, #152]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006bfe:	4b25      	ldr	r3, [pc, #148]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c02:	4a24      	ldr	r2, [pc, #144]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006c04:	f043 0310 	orr.w	r3, r3, #16
 8006c08:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8006c0a:	4b22      	ldr	r3, [pc, #136]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0e:	f023 020c 	bic.w	r2, r3, #12
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c16:	491f      	ldr	r1, [pc, #124]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8006c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c20:	f023 0220 	bic.w	r2, r3, #32
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c28:	491a      	ldr	r1, [pc, #104]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c2e:	4b19      	ldr	r3, [pc, #100]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c32:	4a18      	ldr	r2, [pc, #96]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c38:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8006c3a:	4b16      	ldr	r3, [pc, #88]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a15      	ldr	r2, [pc, #84]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006c40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c46:	f7fc fa9b 	bl	8003180 <HAL_GetTick>
 8006c4a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006c4e:	f7fc fa97 	bl	8003180 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e08d      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006c60:	4b0c      	ldr	r3, [pc, #48]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0f0      	beq.n	8006c4e <HAL_RCC_OscConfig+0x736>
 8006c6c:	e085      	b.n	8006d7a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006c6e:	4b09      	ldr	r3, [pc, #36]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a08      	ldr	r2, [pc, #32]	@ (8006c94 <HAL_RCC_OscConfig+0x77c>)
 8006c74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c7a:	f7fc fa81 	bl	8003180 <HAL_GetTick>
 8006c7e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006c80:	e00a      	b.n	8006c98 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006c82:	f7fc fa7d 	bl	8003180 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d903      	bls.n	8006c98 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e073      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
 8006c94:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006c98:	4b3a      	ldr	r3, [pc, #232]	@ (8006d84 <HAL_RCC_OscConfig+0x86c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1ee      	bne.n	8006c82 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006ca4:	4b37      	ldr	r3, [pc, #220]	@ (8006d84 <HAL_RCC_OscConfig+0x86c>)
 8006ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca8:	4a36      	ldr	r2, [pc, #216]	@ (8006d84 <HAL_RCC_OscConfig+0x86c>)
 8006caa:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006cae:	f023 0303 	bic.w	r3, r3, #3
 8006cb2:	6293      	str	r3, [r2, #40]	@ 0x28
 8006cb4:	e061      	b.n	8006d7a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006cb6:	4b33      	ldr	r3, [pc, #204]	@ (8006d84 <HAL_RCC_OscConfig+0x86c>)
 8006cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cba:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006cbc:	4b31      	ldr	r3, [pc, #196]	@ (8006d84 <HAL_RCC_OscConfig+0x86c>)
 8006cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cc0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d031      	beq.n	8006d2e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f003 0203 	and.w	r2, r3, #3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d12a      	bne.n	8006d2e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	0a1b      	lsrs	r3, r3, #8
 8006cdc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d122      	bne.n	8006d2e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cf2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d11a      	bne.n	8006d2e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	0a5b      	lsrs	r3, r3, #9
 8006cfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d04:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d111      	bne.n	8006d2e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	0c1b      	lsrs	r3, r3, #16
 8006d0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d16:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d108      	bne.n	8006d2e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	0e1b      	lsrs	r3, r3, #24
 8006d20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d28:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d001      	beq.n	8006d32 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e024      	b.n	8006d7c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006d32:	4b14      	ldr	r3, [pc, #80]	@ (8006d84 <HAL_RCC_OscConfig+0x86c>)
 8006d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d36:	08db      	lsrs	r3, r3, #3
 8006d38:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d01a      	beq.n	8006d7a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006d44:	4b0f      	ldr	r3, [pc, #60]	@ (8006d84 <HAL_RCC_OscConfig+0x86c>)
 8006d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d48:	4a0e      	ldr	r2, [pc, #56]	@ (8006d84 <HAL_RCC_OscConfig+0x86c>)
 8006d4a:	f023 0310 	bic.w	r3, r3, #16
 8006d4e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d50:	f7fc fa16 	bl	8003180 <HAL_GetTick>
 8006d54:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8006d56:	bf00      	nop
 8006d58:	f7fc fa12 	bl	8003180 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d0f9      	beq.n	8006d58 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d68:	4a06      	ldr	r2, [pc, #24]	@ (8006d84 <HAL_RCC_OscConfig+0x86c>)
 8006d6a:	00db      	lsls	r3, r3, #3
 8006d6c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006d6e:	4b05      	ldr	r3, [pc, #20]	@ (8006d84 <HAL_RCC_OscConfig+0x86c>)
 8006d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d72:	4a04      	ldr	r2, [pc, #16]	@ (8006d84 <HAL_RCC_OscConfig+0x86c>)
 8006d74:	f043 0310 	orr.w	r3, r3, #16
 8006d78:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3720      	adds	r7, #32
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	44020c00 	.word	0x44020c00

08006d88 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e19e      	b.n	80070da <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d9c:	4b83      	ldr	r3, [pc, #524]	@ (8006fac <HAL_RCC_ClockConfig+0x224>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 030f 	and.w	r3, r3, #15
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d910      	bls.n	8006dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006daa:	4b80      	ldr	r3, [pc, #512]	@ (8006fac <HAL_RCC_ClockConfig+0x224>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f023 020f 	bic.w	r2, r3, #15
 8006db2:	497e      	ldr	r1, [pc, #504]	@ (8006fac <HAL_RCC_ClockConfig+0x224>)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dba:	4b7c      	ldr	r3, [pc, #496]	@ (8006fac <HAL_RCC_ClockConfig+0x224>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 030f 	and.w	r3, r3, #15
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d001      	beq.n	8006dcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e186      	b.n	80070da <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0310 	and.w	r3, r3, #16
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d012      	beq.n	8006dfe <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	695a      	ldr	r2, [r3, #20]
 8006ddc:	4b74      	ldr	r3, [pc, #464]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	0a1b      	lsrs	r3, r3, #8
 8006de2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d909      	bls.n	8006dfe <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006dea:	4b71      	ldr	r3, [pc, #452]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	021b      	lsls	r3, r3, #8
 8006df8:	496d      	ldr	r1, [pc, #436]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0308 	and.w	r3, r3, #8
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d012      	beq.n	8006e30 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691a      	ldr	r2, [r3, #16]
 8006e0e:	4b68      	ldr	r3, [pc, #416]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	091b      	lsrs	r3, r3, #4
 8006e14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d909      	bls.n	8006e30 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006e1c:	4b64      	ldr	r3, [pc, #400]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	011b      	lsls	r3, r3, #4
 8006e2a:	4961      	ldr	r1, [pc, #388]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d010      	beq.n	8006e5e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	4b5b      	ldr	r3, [pc, #364]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d908      	bls.n	8006e5e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006e4c:	4b58      	ldr	r3, [pc, #352]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	4955      	ldr	r1, [pc, #340]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d010      	beq.n	8006e8c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	4b50      	ldr	r3, [pc, #320]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	f003 030f 	and.w	r3, r3, #15
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d908      	bls.n	8006e8c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006e7a:	4b4d      	ldr	r3, [pc, #308]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	f023 020f 	bic.w	r2, r3, #15
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	494a      	ldr	r1, [pc, #296]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8093 	beq.w	8006fc0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d107      	bne.n	8006eb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006ea2:	4b43      	ldr	r3, [pc, #268]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d121      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e113      	b.n	80070da <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d107      	bne.n	8006eca <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006eba:	4b3d      	ldr	r3, [pc, #244]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d115      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e107      	b.n	80070da <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d107      	bne.n	8006ee2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006ed2:	4b37      	ldr	r3, [pc, #220]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d109      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e0fb      	b.n	80070da <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ee2:	4b33      	ldr	r3, [pc, #204]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e0f3      	b.n	80070da <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8006ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	f023 0203 	bic.w	r2, r3, #3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	492c      	ldr	r1, [pc, #176]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f04:	f7fc f93c 	bl	8003180 <HAL_GetTick>
 8006f08:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d112      	bne.n	8006f38 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f12:	e00a      	b.n	8006f2a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006f14:	f7fc f934 	bl	8003180 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e0d7      	b.n	80070da <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f2a:	4b21      	ldr	r3, [pc, #132]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	f003 0318 	and.w	r3, r3, #24
 8006f32:	2b18      	cmp	r3, #24
 8006f34:	d1ee      	bne.n	8006f14 <HAL_RCC_ClockConfig+0x18c>
 8006f36:	e043      	b.n	8006fc0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d112      	bne.n	8006f66 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f40:	e00a      	b.n	8006f58 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006f42:	f7fc f91d 	bl	8003180 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d901      	bls.n	8006f58 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e0c0      	b.n	80070da <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f58:	4b15      	ldr	r3, [pc, #84]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	f003 0318 	and.w	r3, r3, #24
 8006f60:	2b10      	cmp	r3, #16
 8006f62:	d1ee      	bne.n	8006f42 <HAL_RCC_ClockConfig+0x1ba>
 8006f64:	e02c      	b.n	8006fc0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d122      	bne.n	8006fb4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006f6e:	e00a      	b.n	8006f86 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006f70:	f7fc f906 	bl	8003180 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e0a9      	b.n	80070da <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006f86:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb0 <HAL_RCC_ClockConfig+0x228>)
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	f003 0318 	and.w	r3, r3, #24
 8006f8e:	2b08      	cmp	r3, #8
 8006f90:	d1ee      	bne.n	8006f70 <HAL_RCC_ClockConfig+0x1e8>
 8006f92:	e015      	b.n	8006fc0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006f94:	f7fc f8f4 	bl	8003180 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d906      	bls.n	8006fb4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e097      	b.n	80070da <HAL_RCC_ClockConfig+0x352>
 8006faa:	bf00      	nop
 8006fac:	40022000 	.word	0x40022000
 8006fb0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006fb4:	4b4b      	ldr	r3, [pc, #300]	@ (80070e4 <HAL_RCC_ClockConfig+0x35c>)
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	f003 0318 	and.w	r3, r3, #24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e9      	bne.n	8006f94 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d010      	beq.n	8006fee <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	4b44      	ldr	r3, [pc, #272]	@ (80070e4 <HAL_RCC_ClockConfig+0x35c>)
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d208      	bcs.n	8006fee <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006fdc:	4b41      	ldr	r3, [pc, #260]	@ (80070e4 <HAL_RCC_ClockConfig+0x35c>)
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	f023 020f 	bic.w	r2, r3, #15
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	493e      	ldr	r1, [pc, #248]	@ (80070e4 <HAL_RCC_ClockConfig+0x35c>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fee:	4b3e      	ldr	r3, [pc, #248]	@ (80070e8 <HAL_RCC_ClockConfig+0x360>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d210      	bcs.n	800701e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80070e8 <HAL_RCC_ClockConfig+0x360>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f023 020f 	bic.w	r2, r3, #15
 8007004:	4938      	ldr	r1, [pc, #224]	@ (80070e8 <HAL_RCC_ClockConfig+0x360>)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	4313      	orrs	r3, r2
 800700a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800700c:	4b36      	ldr	r3, [pc, #216]	@ (80070e8 <HAL_RCC_ClockConfig+0x360>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 030f 	and.w	r3, r3, #15
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	d001      	beq.n	800701e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e05d      	b.n	80070da <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0304 	and.w	r3, r3, #4
 8007026:	2b00      	cmp	r3, #0
 8007028:	d010      	beq.n	800704c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	4b2d      	ldr	r3, [pc, #180]	@ (80070e4 <HAL_RCC_ClockConfig+0x35c>)
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007036:	429a      	cmp	r2, r3
 8007038:	d208      	bcs.n	800704c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800703a:	4b2a      	ldr	r3, [pc, #168]	@ (80070e4 <HAL_RCC_ClockConfig+0x35c>)
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	4927      	ldr	r1, [pc, #156]	@ (80070e4 <HAL_RCC_ClockConfig+0x35c>)
 8007048:	4313      	orrs	r3, r2
 800704a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0308 	and.w	r3, r3, #8
 8007054:	2b00      	cmp	r3, #0
 8007056:	d012      	beq.n	800707e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	4b21      	ldr	r3, [pc, #132]	@ (80070e4 <HAL_RCC_ClockConfig+0x35c>)
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	091b      	lsrs	r3, r3, #4
 8007062:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007066:	429a      	cmp	r2, r3
 8007068:	d209      	bcs.n	800707e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800706a:	4b1e      	ldr	r3, [pc, #120]	@ (80070e4 <HAL_RCC_ClockConfig+0x35c>)
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	491a      	ldr	r1, [pc, #104]	@ (80070e4 <HAL_RCC_ClockConfig+0x35c>)
 800707a:	4313      	orrs	r3, r2
 800707c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0310 	and.w	r3, r3, #16
 8007086:	2b00      	cmp	r3, #0
 8007088:	d012      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	695a      	ldr	r2, [r3, #20]
 800708e:	4b15      	ldr	r3, [pc, #84]	@ (80070e4 <HAL_RCC_ClockConfig+0x35c>)
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	0a1b      	lsrs	r3, r3, #8
 8007094:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007098:	429a      	cmp	r2, r3
 800709a:	d209      	bcs.n	80070b0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800709c:	4b11      	ldr	r3, [pc, #68]	@ (80070e4 <HAL_RCC_ClockConfig+0x35c>)
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	021b      	lsls	r3, r3, #8
 80070aa:	490e      	ldr	r1, [pc, #56]	@ (80070e4 <HAL_RCC_ClockConfig+0x35c>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80070b0:	f000 f822 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 80070b4:	4602      	mov	r2, r0
 80070b6:	4b0b      	ldr	r3, [pc, #44]	@ (80070e4 <HAL_RCC_ClockConfig+0x35c>)
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	f003 030f 	and.w	r3, r3, #15
 80070be:	490b      	ldr	r1, [pc, #44]	@ (80070ec <HAL_RCC_ClockConfig+0x364>)
 80070c0:	5ccb      	ldrb	r3, [r1, r3]
 80070c2:	fa22 f303 	lsr.w	r3, r2, r3
 80070c6:	4a0a      	ldr	r2, [pc, #40]	@ (80070f0 <HAL_RCC_ClockConfig+0x368>)
 80070c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80070ca:	4b0a      	ldr	r3, [pc, #40]	@ (80070f4 <HAL_RCC_ClockConfig+0x36c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fb ffcc 	bl	800306c <HAL_InitTick>
 80070d4:	4603      	mov	r3, r0
 80070d6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80070d8:	7afb      	ldrb	r3, [r7, #11]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	44020c00 	.word	0x44020c00
 80070e8:	40022000 	.word	0x40022000
 80070ec:	08014738 	.word	0x08014738
 80070f0:	20000004 	.word	0x20000004
 80070f4:	20000024 	.word	0x20000024

080070f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b089      	sub	sp, #36	@ 0x24
 80070fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80070fe:	4b8c      	ldr	r3, [pc, #560]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	f003 0318 	and.w	r3, r3, #24
 8007106:	2b08      	cmp	r3, #8
 8007108:	d102      	bne.n	8007110 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800710a:	4b8a      	ldr	r3, [pc, #552]	@ (8007334 <HAL_RCC_GetSysClockFreq+0x23c>)
 800710c:	61fb      	str	r3, [r7, #28]
 800710e:	e107      	b.n	8007320 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007110:	4b87      	ldr	r3, [pc, #540]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	f003 0318 	and.w	r3, r3, #24
 8007118:	2b00      	cmp	r3, #0
 800711a:	d112      	bne.n	8007142 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800711c:	4b84      	ldr	r3, [pc, #528]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0320 	and.w	r3, r3, #32
 8007124:	2b00      	cmp	r3, #0
 8007126:	d009      	beq.n	800713c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007128:	4b81      	ldr	r3, [pc, #516]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	08db      	lsrs	r3, r3, #3
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	4a81      	ldr	r2, [pc, #516]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x240>)
 8007134:	fa22 f303 	lsr.w	r3, r2, r3
 8007138:	61fb      	str	r3, [r7, #28]
 800713a:	e0f1      	b.n	8007320 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800713c:	4b7e      	ldr	r3, [pc, #504]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x240>)
 800713e:	61fb      	str	r3, [r7, #28]
 8007140:	e0ee      	b.n	8007320 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007142:	4b7b      	ldr	r3, [pc, #492]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f003 0318 	and.w	r3, r3, #24
 800714a:	2b10      	cmp	r3, #16
 800714c:	d102      	bne.n	8007154 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800714e:	4b7b      	ldr	r3, [pc, #492]	@ (800733c <HAL_RCC_GetSysClockFreq+0x244>)
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	e0e5      	b.n	8007320 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007154:	4b76      	ldr	r3, [pc, #472]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	f003 0318 	and.w	r3, r3, #24
 800715c:	2b18      	cmp	r3, #24
 800715e:	f040 80dd 	bne.w	800731c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007162:	4b73      	ldr	r3, [pc, #460]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 8007164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007166:	f003 0303 	and.w	r3, r3, #3
 800716a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800716c:	4b70      	ldr	r3, [pc, #448]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 800716e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007170:	0a1b      	lsrs	r3, r3, #8
 8007172:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007176:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007178:	4b6d      	ldr	r3, [pc, #436]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 800717a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800717c:	091b      	lsrs	r3, r3, #4
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8007184:	4b6a      	ldr	r3, [pc, #424]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 8007186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8007188:	08db      	lsrs	r3, r3, #3
 800718a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	fb02 f303 	mul.w	r3, r2, r3
 8007194:	ee07 3a90 	vmov	s15, r3
 8007198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 80b7 	beq.w	8007316 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d003      	beq.n	80071b6 <HAL_RCC_GetSysClockFreq+0xbe>
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d056      	beq.n	8007262 <HAL_RCC_GetSysClockFreq+0x16a>
 80071b4:	e077      	b.n	80072a6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80071b6:	4b5e      	ldr	r3, [pc, #376]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d02d      	beq.n	800721e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071c2:	4b5b      	ldr	r3, [pc, #364]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	08db      	lsrs	r3, r3, #3
 80071c8:	f003 0303 	and.w	r3, r3, #3
 80071cc:	4a5a      	ldr	r2, [pc, #360]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x240>)
 80071ce:	fa22 f303 	lsr.w	r3, r2, r3
 80071d2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	ee07 3a90 	vmov	s15, r3
 80071e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ec:	4b50      	ldr	r3, [pc, #320]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 80071ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f4:	ee07 3a90 	vmov	s15, r3
 80071f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80071fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8007200:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8007340 <HAL_RCC_GetSysClockFreq+0x248>
 8007204:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007208:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800720c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007210:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007218:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800721c:	e065      	b.n	80072ea <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	ee07 3a90 	vmov	s15, r3
 8007224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007228:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8007344 <HAL_RCC_GetSysClockFreq+0x24c>
 800722c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007230:	4b3f      	ldr	r3, [pc, #252]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 8007232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007238:	ee07 3a90 	vmov	s15, r3
 800723c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007240:	ed97 6a02 	vldr	s12, [r7, #8]
 8007244:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007340 <HAL_RCC_GetSysClockFreq+0x248>
 8007248:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800724c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007250:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007254:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007260:	e043      	b.n	80072ea <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	ee07 3a90 	vmov	s15, r3
 8007268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8007348 <HAL_RCC_GetSysClockFreq+0x250>
 8007270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007274:	4b2e      	ldr	r3, [pc, #184]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 8007276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727c:	ee07 3a90 	vmov	s15, r3
 8007280:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007284:	ed97 6a02 	vldr	s12, [r7, #8]
 8007288:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8007340 <HAL_RCC_GetSysClockFreq+0x248>
 800728c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007290:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007294:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007298:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800729c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80072a4:	e021      	b.n	80072ea <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	ee07 3a90 	vmov	s15, r3
 80072ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800734c <HAL_RCC_GetSysClockFreq+0x254>
 80072b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 80072ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c0:	ee07 3a90 	vmov	s15, r3
 80072c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80072c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80072cc:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8007340 <HAL_RCC_GetSysClockFreq+0x248>
 80072d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80072d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80072e8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80072ea:	4b11      	ldr	r3, [pc, #68]	@ (8007330 <HAL_RCC_GetSysClockFreq+0x238>)
 80072ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ee:	0a5b      	lsrs	r3, r3, #9
 80072f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072f4:	3301      	adds	r3, #1
 80072f6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007302:	edd7 6a06 	vldr	s13, [r7, #24]
 8007306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800730a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800730e:	ee17 3a90 	vmov	r3, s15
 8007312:	61fb      	str	r3, [r7, #28]
 8007314:	e004      	b.n	8007320 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	61fb      	str	r3, [r7, #28]
 800731a:	e001      	b.n	8007320 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800731c:	4b06      	ldr	r3, [pc, #24]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x240>)
 800731e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8007320:	69fb      	ldr	r3, [r7, #28]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3724      	adds	r7, #36	@ 0x24
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	44020c00 	.word	0x44020c00
 8007334:	003d0900 	.word	0x003d0900
 8007338:	03d09000 	.word	0x03d09000
 800733c:	007a1200 	.word	0x007a1200
 8007340:	46000000 	.word	0x46000000
 8007344:	4c742400 	.word	0x4c742400
 8007348:	4af42400 	.word	0x4af42400
 800734c:	4a742400 	.word	0x4a742400

08007350 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007354:	f7ff fed0 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 8007358:	4602      	mov	r2, r0
 800735a:	4b08      	ldr	r3, [pc, #32]	@ (800737c <HAL_RCC_GetHCLKFreq+0x2c>)
 800735c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800735e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007362:	4907      	ldr	r1, [pc, #28]	@ (8007380 <HAL_RCC_GetHCLKFreq+0x30>)
 8007364:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8007366:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800736a:	fa22 f303 	lsr.w	r3, r2, r3
 800736e:	4a05      	ldr	r2, [pc, #20]	@ (8007384 <HAL_RCC_GetHCLKFreq+0x34>)
 8007370:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8007372:	4b04      	ldr	r3, [pc, #16]	@ (8007384 <HAL_RCC_GetHCLKFreq+0x34>)
 8007374:	681b      	ldr	r3, [r3, #0]
}
 8007376:	4618      	mov	r0, r3
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	44020c00 	.word	0x44020c00
 8007380:	08014738 	.word	0x08014738
 8007384:	20000004 	.word	0x20000004

08007388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800738c:	f7ff ffe0 	bl	8007350 <HAL_RCC_GetHCLKFreq>
 8007390:	4602      	mov	r2, r0
 8007392:	4b06      	ldr	r3, [pc, #24]	@ (80073ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	091b      	lsrs	r3, r3, #4
 8007398:	f003 0307 	and.w	r3, r3, #7
 800739c:	4904      	ldr	r1, [pc, #16]	@ (80073b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800739e:	5ccb      	ldrb	r3, [r1, r3]
 80073a0:	f003 031f 	and.w	r3, r3, #31
 80073a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	44020c00 	.word	0x44020c00
 80073b0:	08014748 	.word	0x08014748

080073b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80073b8:	f7ff ffca 	bl	8007350 <HAL_RCC_GetHCLKFreq>
 80073bc:	4602      	mov	r2, r0
 80073be:	4b06      	ldr	r3, [pc, #24]	@ (80073d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	0a1b      	lsrs	r3, r3, #8
 80073c4:	f003 0307 	and.w	r3, r3, #7
 80073c8:	4904      	ldr	r1, [pc, #16]	@ (80073dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80073ca:	5ccb      	ldrb	r3, [r1, r3]
 80073cc:	f003 031f 	and.w	r3, r3, #31
 80073d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	44020c00 	.word	0x44020c00
 80073dc:	08014748 	.word	0x08014748

080073e0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80073e4:	f7ff ffb4 	bl	8007350 <HAL_RCC_GetHCLKFreq>
 80073e8:	4602      	mov	r2, r0
 80073ea:	4b06      	ldr	r3, [pc, #24]	@ (8007404 <HAL_RCC_GetPCLK3Freq+0x24>)
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	0b1b      	lsrs	r3, r3, #12
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	4904      	ldr	r1, [pc, #16]	@ (8007408 <HAL_RCC_GetPCLK3Freq+0x28>)
 80073f6:	5ccb      	ldrb	r3, [r1, r3]
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007400:	4618      	mov	r0, r3
 8007402:	bd80      	pop	{r7, pc}
 8007404:	44020c00 	.word	0x44020c00
 8007408:	08014748 	.word	0x08014748

0800740c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800740c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007410:	b0d8      	sub	sp, #352	@ 0x160
 8007412:	af00      	add	r7, sp, #0
 8007414:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007418:	2300      	movs	r3, #0
 800741a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800741e:	2300      	movs	r3, #0
 8007420:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007424:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8007430:	2500      	movs	r5, #0
 8007432:	ea54 0305 	orrs.w	r3, r4, r5
 8007436:	d00b      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8007438:	4bcd      	ldr	r3, [pc, #820]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800743a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800743e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8007442:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007448:	4ac9      	ldr	r2, [pc, #804]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800744a:	430b      	orrs	r3, r1
 800744c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007450:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007458:	f002 0801 	and.w	r8, r2, #1
 800745c:	f04f 0900 	mov.w	r9, #0
 8007460:	ea58 0309 	orrs.w	r3, r8, r9
 8007464:	d042      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8007466:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800746a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800746c:	2b05      	cmp	r3, #5
 800746e:	d823      	bhi.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8007470:	a201      	add	r2, pc, #4	@ (adr r2, 8007478 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8007472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007476:	bf00      	nop
 8007478:	080074c1 	.word	0x080074c1
 800747c:	08007491 	.word	0x08007491
 8007480:	080074a5 	.word	0x080074a5
 8007484:	080074c1 	.word	0x080074c1
 8007488:	080074c1 	.word	0x080074c1
 800748c:	080074c1 	.word	0x080074c1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007490:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007494:	3308      	adds	r3, #8
 8007496:	4618      	mov	r0, r3
 8007498:	f004 fee0 	bl	800c25c <RCCEx_PLL2_Config>
 800749c:	4603      	mov	r3, r0
 800749e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80074a2:	e00e      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074a8:	3330      	adds	r3, #48	@ 0x30
 80074aa:	4618      	mov	r0, r3
 80074ac:	f004 ff6e 	bl	800c38c <RCCEx_PLL3_Config>
 80074b0:	4603      	mov	r3, r0
 80074b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80074b6:	e004      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80074be:	e000      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80074c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10c      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80074ca:	4ba9      	ldr	r3, [pc, #676]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80074cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80074d0:	f023 0107 	bic.w	r1, r3, #7
 80074d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074da:	4aa5      	ldr	r2, [pc, #660]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80074dc:	430b      	orrs	r3, r1
 80074de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80074e2:	e003      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074e8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f4:	f002 0a02 	and.w	sl, r2, #2
 80074f8:	f04f 0b00 	mov.w	fp, #0
 80074fc:	ea5a 030b 	orrs.w	r3, sl, fp
 8007500:	f000 8088 	beq.w	8007614 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8007504:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800750a:	2b28      	cmp	r3, #40	@ 0x28
 800750c:	d868      	bhi.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800750e:	a201      	add	r2, pc, #4	@ (adr r2, 8007514 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8007510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007514:	080075e9 	.word	0x080075e9
 8007518:	080075e1 	.word	0x080075e1
 800751c:	080075e1 	.word	0x080075e1
 8007520:	080075e1 	.word	0x080075e1
 8007524:	080075e1 	.word	0x080075e1
 8007528:	080075e1 	.word	0x080075e1
 800752c:	080075e1 	.word	0x080075e1
 8007530:	080075e1 	.word	0x080075e1
 8007534:	080075b9 	.word	0x080075b9
 8007538:	080075e1 	.word	0x080075e1
 800753c:	080075e1 	.word	0x080075e1
 8007540:	080075e1 	.word	0x080075e1
 8007544:	080075e1 	.word	0x080075e1
 8007548:	080075e1 	.word	0x080075e1
 800754c:	080075e1 	.word	0x080075e1
 8007550:	080075e1 	.word	0x080075e1
 8007554:	080075cd 	.word	0x080075cd
 8007558:	080075e1 	.word	0x080075e1
 800755c:	080075e1 	.word	0x080075e1
 8007560:	080075e1 	.word	0x080075e1
 8007564:	080075e1 	.word	0x080075e1
 8007568:	080075e1 	.word	0x080075e1
 800756c:	080075e1 	.word	0x080075e1
 8007570:	080075e1 	.word	0x080075e1
 8007574:	080075e9 	.word	0x080075e9
 8007578:	080075e1 	.word	0x080075e1
 800757c:	080075e1 	.word	0x080075e1
 8007580:	080075e1 	.word	0x080075e1
 8007584:	080075e1 	.word	0x080075e1
 8007588:	080075e1 	.word	0x080075e1
 800758c:	080075e1 	.word	0x080075e1
 8007590:	080075e1 	.word	0x080075e1
 8007594:	080075e9 	.word	0x080075e9
 8007598:	080075e1 	.word	0x080075e1
 800759c:	080075e1 	.word	0x080075e1
 80075a0:	080075e1 	.word	0x080075e1
 80075a4:	080075e1 	.word	0x080075e1
 80075a8:	080075e1 	.word	0x080075e1
 80075ac:	080075e1 	.word	0x080075e1
 80075b0:	080075e1 	.word	0x080075e1
 80075b4:	080075e9 	.word	0x080075e9
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80075b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075bc:	3308      	adds	r3, #8
 80075be:	4618      	mov	r0, r3
 80075c0:	f004 fe4c 	bl	800c25c <RCCEx_PLL2_Config>
 80075c4:	4603      	mov	r3, r0
 80075c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80075ca:	e00e      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80075cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075d0:	3330      	adds	r3, #48	@ 0x30
 80075d2:	4618      	mov	r0, r3
 80075d4:	f004 feda 	bl	800c38c <RCCEx_PLL3_Config>
 80075d8:	4603      	mov	r3, r0
 80075da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80075de:	e004      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80075e6:	e000      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80075e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10c      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80075f2:	4b5f      	ldr	r3, [pc, #380]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80075f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80075f8:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80075fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007602:	4a5b      	ldr	r2, [pc, #364]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007604:	430b      	orrs	r3, r1
 8007606:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800760a:	e003      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007610:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007614:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761c:	f002 0304 	and.w	r3, r2, #4
 8007620:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8007624:	2300      	movs	r3, #0
 8007626:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800762a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800762e:	460b      	mov	r3, r1
 8007630:	4313      	orrs	r3, r2
 8007632:	d04e      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8007634:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007638:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800763a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800763e:	d02c      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8007640:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007644:	d825      	bhi.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800764a:	d028      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800764c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007650:	d81f      	bhi.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007652:	2bc0      	cmp	r3, #192	@ 0xc0
 8007654:	d025      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8007656:	2bc0      	cmp	r3, #192	@ 0xc0
 8007658:	d81b      	bhi.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800765a:	2b80      	cmp	r3, #128	@ 0x80
 800765c:	d00f      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x272>
 800765e:	2b80      	cmp	r3, #128	@ 0x80
 8007660:	d817      	bhi.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d01f      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8007666:	2b40      	cmp	r3, #64	@ 0x40
 8007668:	d113      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800766a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800766e:	3308      	adds	r3, #8
 8007670:	4618      	mov	r0, r3
 8007672:	f004 fdf3 	bl	800c25c <RCCEx_PLL2_Config>
 8007676:	4603      	mov	r3, r0
 8007678:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800767c:	e014      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800767e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007682:	3330      	adds	r3, #48	@ 0x30
 8007684:	4618      	mov	r0, r3
 8007686:	f004 fe81 	bl	800c38c <RCCEx_PLL3_Config>
 800768a:	4603      	mov	r3, r0
 800768c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8007690:	e00a      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007698:	e006      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800769a:	bf00      	nop
 800769c:	e004      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800769e:	bf00      	nop
 80076a0:	e002      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80076a2:	bf00      	nop
 80076a4:	e000      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80076a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10c      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80076b0:	4b2f      	ldr	r3, [pc, #188]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80076b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80076b6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80076ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076c0:	4a2b      	ldr	r2, [pc, #172]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80076c2:	430b      	orrs	r3, r1
 80076c4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80076c8:	e003      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	f002 0308 	and.w	r3, r2, #8
 80076de:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80076e2:	2300      	movs	r3, #0
 80076e4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80076e8:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 80076ec:	460b      	mov	r3, r1
 80076ee:	4313      	orrs	r3, r2
 80076f0:	d056      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80076f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076f8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80076fc:	d031      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80076fe:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007702:	d82a      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007708:	d02d      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800770a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800770e:	d824      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007710:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007714:	d029      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8007716:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800771a:	d81e      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800771c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007720:	d011      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8007722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007726:	d818      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007728:	2b00      	cmp	r3, #0
 800772a:	d023      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800772c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007730:	d113      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007732:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007736:	3308      	adds	r3, #8
 8007738:	4618      	mov	r0, r3
 800773a:	f004 fd8f 	bl	800c25c <RCCEx_PLL2_Config>
 800773e:	4603      	mov	r3, r0
 8007740:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8007744:	e017      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007746:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800774a:	3330      	adds	r3, #48	@ 0x30
 800774c:	4618      	mov	r0, r3
 800774e:	f004 fe1d 	bl	800c38c <RCCEx_PLL3_Config>
 8007752:	4603      	mov	r3, r0
 8007754:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8007758:	e00d      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007760:	e009      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8007762:	bf00      	nop
 8007764:	e007      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8007766:	bf00      	nop
 8007768:	e005      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800776a:	bf00      	nop
 800776c:	e003      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800776e:	bf00      	nop
 8007770:	44020c00 	.word	0x44020c00
        break;
 8007774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007776:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10c      	bne.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800777e:	4bbb      	ldr	r3, [pc, #748]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007780:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007784:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007788:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800778c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800778e:	4ab7      	ldr	r2, [pc, #732]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007790:	430b      	orrs	r3, r1
 8007792:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007796:	e003      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007798:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800779c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80077a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	f002 0310 	and.w	r3, r2, #16
 80077ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80077b0:	2300      	movs	r3, #0
 80077b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80077b6:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80077ba:	460b      	mov	r3, r1
 80077bc:	4313      	orrs	r3, r2
 80077be:	d053      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80077c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077c6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80077ca:	d031      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80077cc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80077d0:	d82a      	bhi.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80077d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077d6:	d02d      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80077d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077dc:	d824      	bhi.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80077de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077e2:	d029      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80077e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077e8:	d81e      	bhi.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80077ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077ee:	d011      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80077f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077f4:	d818      	bhi.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d020      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x430>
 80077fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077fe:	d113      	bne.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007800:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007804:	3308      	adds	r3, #8
 8007806:	4618      	mov	r0, r3
 8007808:	f004 fd28 	bl	800c25c <RCCEx_PLL2_Config>
 800780c:	4603      	mov	r3, r0
 800780e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8007812:	e014      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007814:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007818:	3330      	adds	r3, #48	@ 0x30
 800781a:	4618      	mov	r0, r3
 800781c:	f004 fdb6 	bl	800c38c <RCCEx_PLL3_Config>
 8007820:	4603      	mov	r3, r0
 8007822:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8007826:	e00a      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800782e:	e006      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007830:	bf00      	nop
 8007832:	e004      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007834:	bf00      	nop
 8007836:	e002      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007838:	bf00      	nop
 800783a:	e000      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800783c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800783e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10c      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007846:	4b89      	ldr	r3, [pc, #548]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007848:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800784c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007850:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007856:	4a85      	ldr	r2, [pc, #532]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007858:	430b      	orrs	r3, r1
 800785a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800785e:	e003      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007860:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007864:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	f002 0320 	and.w	r3, r2, #32
 8007874:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8007878:	2300      	movs	r3, #0
 800787a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800787e:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8007882:	460b      	mov	r3, r1
 8007884:	4313      	orrs	r3, r2
 8007886:	d053      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8007888:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800788c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800788e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007892:	d031      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8007894:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007898:	d82a      	bhi.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800789a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800789e:	d02d      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80078a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078a4:	d824      	bhi.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80078a6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80078aa:	d029      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80078ac:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80078b0:	d81e      	bhi.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80078b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078b6:	d011      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80078b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078bc:	d818      	bhi.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d020      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80078c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078c6:	d113      	bne.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80078c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078cc:	3308      	adds	r3, #8
 80078ce:	4618      	mov	r0, r3
 80078d0:	f004 fcc4 	bl	800c25c <RCCEx_PLL2_Config>
 80078d4:	4603      	mov	r3, r0
 80078d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80078da:	e014      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078e0:	3330      	adds	r3, #48	@ 0x30
 80078e2:	4618      	mov	r0, r3
 80078e4:	f004 fd52 	bl	800c38c <RCCEx_PLL3_Config>
 80078e8:	4603      	mov	r3, r0
 80078ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80078ee:	e00a      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80078f6:	e006      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80078f8:	bf00      	nop
 80078fa:	e004      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80078fc:	bf00      	nop
 80078fe:	e002      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007900:	bf00      	nop
 8007902:	e000      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007906:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10c      	bne.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800790e:	4b57      	ldr	r3, [pc, #348]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007910:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007914:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8007918:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800791c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800791e:	4a53      	ldr	r2, [pc, #332]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007920:	430b      	orrs	r3, r1
 8007922:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007926:	e003      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007928:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800792c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007930:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007938:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800793c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8007940:	2300      	movs	r3, #0
 8007942:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8007946:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800794a:	460b      	mov	r3, r1
 800794c:	4313      	orrs	r3, r2
 800794e:	d053      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8007950:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007956:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800795a:	d031      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800795c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007960:	d82a      	bhi.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007962:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007966:	d02d      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8007968:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800796c:	d824      	bhi.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800796e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007972:	d029      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007974:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007978:	d81e      	bhi.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800797a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800797e:	d011      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8007980:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007984:	d818      	bhi.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007986:	2b00      	cmp	r3, #0
 8007988:	d020      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800798a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800798e:	d113      	bne.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007990:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007994:	3308      	adds	r3, #8
 8007996:	4618      	mov	r0, r3
 8007998:	f004 fc60 	bl	800c25c <RCCEx_PLL2_Config>
 800799c:	4603      	mov	r3, r0
 800799e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80079a2:	e014      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079a8:	3330      	adds	r3, #48	@ 0x30
 80079aa:	4618      	mov	r0, r3
 80079ac:	f004 fcee 	bl	800c38c <RCCEx_PLL3_Config>
 80079b0:	4603      	mov	r3, r0
 80079b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80079b6:	e00a      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80079be:	e006      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80079c0:	bf00      	nop
 80079c2:	e004      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80079c4:	bf00      	nop
 80079c6:	e002      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80079c8:	bf00      	nop
 80079ca:	e000      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80079cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10c      	bne.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80079d6:	4b25      	ldr	r3, [pc, #148]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80079d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079dc:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 80079e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079e6:	4a21      	ldr	r2, [pc, #132]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80079e8:	430b      	orrs	r3, r1
 80079ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80079ee:	e003      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80079f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007a04:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8007a0e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8007a12:	460b      	mov	r3, r1
 8007a14:	4313      	orrs	r3, r2
 8007a16:	d055      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8007a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a1e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007a22:	d033      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x680>
 8007a24:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007a28:	d82c      	bhi.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007a2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a2e:	d02f      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8007a30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a34:	d826      	bhi.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007a36:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a3a:	d02b      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8007a3c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a40:	d820      	bhi.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007a42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a46:	d013      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007a48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a4c:	d81a      	bhi.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d022      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8007a52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a56:	d115      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f004 fbfc 	bl	800c25c <RCCEx_PLL2_Config>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8007a6a:	e016      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8007a6c:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a74:	3330      	adds	r3, #48	@ 0x30
 8007a76:	4618      	mov	r0, r3
 8007a78:	f004 fc88 	bl	800c38c <RCCEx_PLL3_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8007a82:	e00a      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007a8a:	e006      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007a8c:	bf00      	nop
 8007a8e:	e004      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007a90:	bf00      	nop
 8007a92:	e002      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007a94:	bf00      	nop
 8007a96:	e000      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10c      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8007aa2:	4bbb      	ldr	r3, [pc, #748]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007aa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007aa8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007aac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ab0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ab2:	4ab7      	ldr	r2, [pc, #732]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007aba:	e003      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ac0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8007ac4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007ad0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8007ada:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	d053      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8007ae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ae8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007aea:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007aee:	d031      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8007af0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007af4:	d82a      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007af6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007afa:	d02d      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8007afc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b00:	d824      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007b02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b06:	d029      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x750>
 8007b08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b0c:	d81e      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007b0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b12:	d011      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007b14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b18:	d818      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d020      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8007b1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b22:	d113      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b28:	3308      	adds	r3, #8
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f004 fb96 	bl	800c25c <RCCEx_PLL2_Config>
 8007b30:	4603      	mov	r3, r0
 8007b32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8007b36:	e014      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b3c:	3330      	adds	r3, #48	@ 0x30
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f004 fc24 	bl	800c38c <RCCEx_PLL3_Config>
 8007b44:	4603      	mov	r3, r0
 8007b46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8007b4a:	e00a      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007b52:	e006      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007b54:	bf00      	nop
 8007b56:	e004      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007b58:	bf00      	nop
 8007b5a:	e002      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007b5c:	bf00      	nop
 8007b5e:	e000      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10c      	bne.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8007b6a:	4b89      	ldr	r3, [pc, #548]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007b6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007b70:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007b74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b7a:	4a85      	ldr	r2, [pc, #532]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007b7c:	430b      	orrs	r3, r1
 8007b7e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007b82:	e003      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b84:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b88:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8007b8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b94:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007b98:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007ba2:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	d055      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8007bac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bb4:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007bb8:	d031      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x812>
 8007bba:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007bbe:	d82a      	bhi.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bc4:	d02d      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8007bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bca:	d824      	bhi.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007bcc:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007bd0:	d029      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8007bd2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007bd6:	d81e      	bhi.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007bd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bdc:	d011      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8007bde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007be2:	d818      	bhi.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d020      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8007be8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bec:	d113      	bne.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007bee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f004 fb31 	bl	800c25c <RCCEx_PLL2_Config>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007c00:	e014      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c06:	3330      	adds	r3, #48	@ 0x30
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f004 fbbf 	bl	800c38c <RCCEx_PLL3_Config>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007c14:	e00a      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007c1c:	e006      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007c1e:	bf00      	nop
 8007c20:	e004      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007c22:	bf00      	nop
 8007c24:	e002      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007c26:	bf00      	nop
 8007c28:	e000      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10d      	bne.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8007c34:	4b56      	ldr	r3, [pc, #344]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007c36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007c3a:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8007c3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c46:	4a52      	ldr	r2, [pc, #328]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007c4e:	e003      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c50:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c54:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8007c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007c64:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007c6e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007c72:	460b      	mov	r3, r1
 8007c74:	4313      	orrs	r3, r2
 8007c76:	d044      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8007c78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c80:	2b05      	cmp	r3, #5
 8007c82:	d823      	bhi.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007c84:	a201      	add	r2, pc, #4	@ (adr r2, 8007c8c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8007c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8a:	bf00      	nop
 8007c8c:	08007cd5 	.word	0x08007cd5
 8007c90:	08007ca5 	.word	0x08007ca5
 8007c94:	08007cb9 	.word	0x08007cb9
 8007c98:	08007cd5 	.word	0x08007cd5
 8007c9c:	08007cd5 	.word	0x08007cd5
 8007ca0:	08007cd5 	.word	0x08007cd5
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ca8:	3308      	adds	r3, #8
 8007caa:	4618      	mov	r0, r3
 8007cac:	f004 fad6 	bl	800c25c <RCCEx_PLL2_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8007cb6:	e00e      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007cb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cbc:	3330      	adds	r3, #48	@ 0x30
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f004 fb64 	bl	800c38c <RCCEx_PLL3_Config>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8007cca:	e004      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007cd2:	e000      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8007cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cd6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10d      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8007cde:	4b2c      	ldr	r3, [pc, #176]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007ce0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007ce4:	f023 0107 	bic.w	r1, r3, #7
 8007ce8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cf0:	4a27      	ldr	r2, [pc, #156]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007cf2:	430b      	orrs	r3, r1
 8007cf4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007cf8:	e003      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007cfe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8007d02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007d0e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007d12:	2300      	movs	r3, #0
 8007d14:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007d18:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	d04f      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8007d22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d2a:	2b50      	cmp	r3, #80	@ 0x50
 8007d2c:	d029      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007d2e:	2b50      	cmp	r3, #80	@ 0x50
 8007d30:	d823      	bhi.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007d32:	2b40      	cmp	r3, #64	@ 0x40
 8007d34:	d027      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8007d36:	2b40      	cmp	r3, #64	@ 0x40
 8007d38:	d81f      	bhi.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007d3a:	2b30      	cmp	r3, #48	@ 0x30
 8007d3c:	d025      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8007d3e:	2b30      	cmp	r3, #48	@ 0x30
 8007d40:	d81b      	bhi.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007d42:	2b20      	cmp	r3, #32
 8007d44:	d00f      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	d817      	bhi.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d022      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007d4e:	2b10      	cmp	r3, #16
 8007d50:	d113      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d56:	3308      	adds	r3, #8
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f004 fa7f 	bl	800c25c <RCCEx_PLL2_Config>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8007d64:	e017      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d6a:	3330      	adds	r3, #48	@ 0x30
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f004 fb0d 	bl	800c38c <RCCEx_PLL3_Config>
 8007d72:	4603      	mov	r3, r0
 8007d74:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8007d78:	e00d      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d80:	e009      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007d82:	bf00      	nop
 8007d84:	e007      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007d86:	bf00      	nop
 8007d88:	e005      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007d8a:	bf00      	nop
 8007d8c:	e003      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8007d8e:	bf00      	nop
 8007d90:	44020c00 	.word	0x44020c00
        break;
 8007d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d96:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10d      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8007d9e:	4baf      	ldr	r3, [pc, #700]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007da0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007da4:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007da8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007db0:	4aaa      	ldr	r2, [pc, #680]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007db2:	430b      	orrs	r3, r1
 8007db4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007db8:	e003      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007dbe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007dce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007dd8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4313      	orrs	r3, r2
 8007de0:	d055      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8007de2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dea:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007dee:	d031      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8007df0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007df4:	d82a      	bhi.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007df6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007dfa:	d02d      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8007dfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e00:	d824      	bhi.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007e02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e06:	d029      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8007e08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e0c:	d81e      	bhi.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007e0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e12:	d011      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8007e14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e18:	d818      	bhi.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d020      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8007e1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e22:	d113      	bne.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e28:	3308      	adds	r3, #8
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f004 fa16 	bl	800c25c <RCCEx_PLL2_Config>
 8007e30:	4603      	mov	r3, r0
 8007e32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007e36:	e014      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e3c:	3330      	adds	r3, #48	@ 0x30
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f004 faa4 	bl	800c38c <RCCEx_PLL3_Config>
 8007e44:	4603      	mov	r3, r0
 8007e46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007e4a:	e00a      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007e52:	e006      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007e54:	bf00      	nop
 8007e56:	e004      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007e58:	bf00      	nop
 8007e5a:	e002      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007e5c:	bf00      	nop
 8007e5e:	e000      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10d      	bne.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007e6a:	4b7c      	ldr	r3, [pc, #496]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e70:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007e74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e7c:	4a77      	ldr	r2, [pc, #476]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007e7e:	430b      	orrs	r3, r1
 8007e80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007e84:	e003      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e8a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e96:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ea4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	d03d      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8007eae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007eba:	d01b      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8007ebc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ec0:	d814      	bhi.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007ec2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ec6:	d017      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8007ec8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ecc:	d80e      	bhi.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d014      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8007ed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ed6:	d109      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007edc:	3330      	adds	r3, #48	@ 0x30
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f004 fa54 	bl	800c38c <RCCEx_PLL3_Config>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8007eea:	e008      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007ef2:	e004      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007ef4:	bf00      	nop
 8007ef6:	e002      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007ef8:	bf00      	nop
 8007efa:	e000      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007efe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10d      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007f06:	4b55      	ldr	r3, [pc, #340]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007f08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f0c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f18:	4a50      	ldr	r2, [pc, #320]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007f1a:	430b      	orrs	r3, r1
 8007f1c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007f20:	e003      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f26:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007f36:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f40:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4313      	orrs	r3, r2
 8007f48:	d03d      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8007f4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f52:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007f56:	d01b      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8007f58:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007f5c:	d814      	bhi.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007f5e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007f62:	d017      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8007f64:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007f68:	d80e      	bhi.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d014      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8007f6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f72:	d109      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007f74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f78:	3330      	adds	r3, #48	@ 0x30
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f004 fa06 	bl	800c38c <RCCEx_PLL3_Config>
 8007f80:	4603      	mov	r3, r0
 8007f82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8007f86:	e008      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007f8e:	e004      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007f90:	bf00      	nop
 8007f92:	e002      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007f94:	bf00      	nop
 8007f96:	e000      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10d      	bne.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007fa2:	4b2e      	ldr	r3, [pc, #184]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007fa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007fa8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007fac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fb4:	4a29      	ldr	r2, [pc, #164]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007fb6:	430b      	orrs	r3, r1
 8007fb8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007fbc:	e003      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fbe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007fc2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007fc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007fdc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	d040      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8007fe6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ff2:	d01b      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8007ff4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ff8:	d814      	bhi.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8007ffa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ffe:	d017      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008000:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008004:	d80e      	bhi.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d014      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800800a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800800e:	d109      	bne.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008010:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008014:	3330      	adds	r3, #48	@ 0x30
 8008016:	4618      	mov	r0, r3
 8008018:	f004 f9b8 	bl	800c38c <RCCEx_PLL3_Config>
 800801c:	4603      	mov	r3, r0
 800801e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8008022:	e008      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800802a:	e004      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800802c:	bf00      	nop
 800802e:	e002      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008030:	bf00      	nop
 8008032:	e000      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008036:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800803a:	2b00      	cmp	r3, #0
 800803c:	d110      	bne.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800803e:	4b07      	ldr	r3, [pc, #28]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008040:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008044:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008048:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800804c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008050:	4a02      	ldr	r2, [pc, #8]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008052:	430b      	orrs	r3, r1
 8008054:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008058:	e006      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800805a:	bf00      	nop
 800805c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008060:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008064:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008068:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	2100      	movs	r1, #0
 8008072:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8008076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800807a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800807e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008082:	460b      	mov	r3, r1
 8008084:	4313      	orrs	r3, r2
 8008086:	d03d      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8008088:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800808c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008090:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008094:	d01b      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8008096:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800809a:	d814      	bhi.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800809c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080a0:	d017      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80080a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080a6:	d80e      	bhi.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d014      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80080ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080b0:	d109      	bne.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80080b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080b6:	3330      	adds	r3, #48	@ 0x30
 80080b8:	4618      	mov	r0, r3
 80080ba:	f004 f967 	bl	800c38c <RCCEx_PLL3_Config>
 80080be:	4603      	mov	r3, r0
 80080c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80080c4:	e008      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80080cc:	e004      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80080ce:	bf00      	nop
 80080d0:	e002      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80080d2:	bf00      	nop
 80080d4:	e000      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80080d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10d      	bne.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80080e0:	4bbe      	ldr	r3, [pc, #760]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80080e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080e6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80080ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080f2:	4aba      	ldr	r2, [pc, #744]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80080f4:	430b      	orrs	r3, r1
 80080f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80080fa:	e003      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008100:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8008104:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008110:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008114:	2300      	movs	r3, #0
 8008116:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800811a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800811e:	460b      	mov	r3, r1
 8008120:	4313      	orrs	r3, r2
 8008122:	d035      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8008124:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008128:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800812c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008130:	d015      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8008132:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008136:	d80e      	bhi.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008138:	2b00      	cmp	r3, #0
 800813a:	d012      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800813c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008140:	d109      	bne.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008142:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008146:	3330      	adds	r3, #48	@ 0x30
 8008148:	4618      	mov	r0, r3
 800814a:	f004 f91f 	bl	800c38c <RCCEx_PLL3_Config>
 800814e:	4603      	mov	r3, r0
 8008150:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8008154:	e006      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800815c:	e002      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800815e:	bf00      	nop
 8008160:	e000      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8008162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008164:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10d      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800816c:	4b9b      	ldr	r3, [pc, #620]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800816e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008172:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8008176:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800817a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800817e:	4a97      	ldr	r2, [pc, #604]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008180:	430b      	orrs	r3, r1
 8008182:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008186:	e003      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008188:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800818c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008190:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	2100      	movs	r1, #0
 800819a:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800819e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80081a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80081aa:	460b      	mov	r3, r1
 80081ac:	4313      	orrs	r3, r2
 80081ae:	d00e      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80081b0:	4b8a      	ldr	r3, [pc, #552]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	4a89      	ldr	r2, [pc, #548]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80081b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081ba:	61d3      	str	r3, [r2, #28]
 80081bc:	4b87      	ldr	r3, [pc, #540]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80081be:	69d9      	ldr	r1, [r3, #28]
 80081c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081c4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80081c8:	4a84      	ldr	r2, [pc, #528]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80081ca:	430b      	orrs	r3, r1
 80081cc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80081ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80081da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081de:	2300      	movs	r3, #0
 80081e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80081e4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80081e8:	460b      	mov	r3, r1
 80081ea:	4313      	orrs	r3, r2
 80081ec:	d055      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80081ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80081f6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80081fa:	d031      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80081fc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008200:	d82a      	bhi.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008206:	d02d      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8008208:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800820c:	d824      	bhi.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800820e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008212:	d029      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8008214:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008218:	d81e      	bhi.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800821a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800821e:	d011      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8008220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008224:	d818      	bhi.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008226:	2b00      	cmp	r3, #0
 8008228:	d020      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800822a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800822e:	d113      	bne.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008230:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008234:	3308      	adds	r3, #8
 8008236:	4618      	mov	r0, r3
 8008238:	f004 f810 	bl	800c25c <RCCEx_PLL2_Config>
 800823c:	4603      	mov	r3, r0
 800823e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8008242:	e014      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008244:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008248:	3330      	adds	r3, #48	@ 0x30
 800824a:	4618      	mov	r0, r3
 800824c:	f004 f89e 	bl	800c38c <RCCEx_PLL3_Config>
 8008250:	4603      	mov	r3, r0
 8008252:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8008256:	e00a      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800825e:	e006      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008260:	bf00      	nop
 8008262:	e004      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008264:	bf00      	nop
 8008266:	e002      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008268:	bf00      	nop
 800826a:	e000      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800826c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800826e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10d      	bne.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8008276:	4b59      	ldr	r3, [pc, #356]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008278:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800827c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008280:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008284:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008288:	4a54      	ldr	r2, [pc, #336]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800828a:	430b      	orrs	r3, r1
 800828c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008290:	e003      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008292:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008296:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800829a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80082a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082aa:	2300      	movs	r3, #0
 80082ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082b0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80082b4:	460b      	mov	r3, r1
 80082b6:	4313      	orrs	r3, r2
 80082b8:	d055      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80082ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80082c2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80082c6:	d031      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80082c8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80082cc:	d82a      	bhi.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80082ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082d2:	d02d      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80082d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082d8:	d824      	bhi.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80082da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082de:	d029      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80082e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082e4:	d81e      	bhi.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80082e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082ea:	d011      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80082ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082f0:	d818      	bhi.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d020      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80082f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082fa:	d113      	bne.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80082fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008300:	3308      	adds	r3, #8
 8008302:	4618      	mov	r0, r3
 8008304:	f003 ffaa 	bl	800c25c <RCCEx_PLL2_Config>
 8008308:	4603      	mov	r3, r0
 800830a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800830e:	e014      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008310:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008314:	3330      	adds	r3, #48	@ 0x30
 8008316:	4618      	mov	r0, r3
 8008318:	f004 f838 	bl	800c38c <RCCEx_PLL3_Config>
 800831c:	4603      	mov	r3, r0
 800831e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8008322:	e00a      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800832a:	e006      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800832c:	bf00      	nop
 800832e:	e004      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008330:	bf00      	nop
 8008332:	e002      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008334:	bf00      	nop
 8008336:	e000      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800833a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10d      	bne.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008342:	4b26      	ldr	r3, [pc, #152]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008344:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008348:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800834c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008350:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008354:	4a21      	ldr	r2, [pc, #132]	@ (80083dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008356:	430b      	orrs	r3, r1
 8008358:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800835c:	e003      	b.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800835e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008362:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8008366:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836e:	2100      	movs	r1, #0
 8008370:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8008374:	f003 0320 	and.w	r3, r3, #32
 8008378:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800837c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008380:	460b      	mov	r3, r1
 8008382:	4313      	orrs	r3, r2
 8008384:	d057      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8008386:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800838a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800838e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008392:	d033      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8008394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008398:	d82c      	bhi.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800839a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800839e:	d02f      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80083a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083a4:	d826      	bhi.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80083a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083aa:	d02b      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80083ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083b0:	d820      	bhi.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80083b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083b6:	d013      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80083b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083bc:	d81a      	bhi.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d022      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80083c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083c6:	d115      	bne.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80083c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083cc:	3308      	adds	r3, #8
 80083ce:	4618      	mov	r0, r3
 80083d0:	f003 ff44 	bl	800c25c <RCCEx_PLL2_Config>
 80083d4:	4603      	mov	r3, r0
 80083d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80083da:	e016      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80083dc:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80083e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083e4:	3330      	adds	r3, #48	@ 0x30
 80083e6:	4618      	mov	r0, r3
 80083e8:	f003 ffd0 	bl	800c38c <RCCEx_PLL3_Config>
 80083ec:	4603      	mov	r3, r0
 80083ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80083f2:	e00a      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80083fa:	e006      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80083fc:	bf00      	nop
 80083fe:	e004      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008400:	bf00      	nop
 8008402:	e002      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008404:	bf00      	nop
 8008406:	e000      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800840a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10d      	bne.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8008412:	4bbb      	ldr	r3, [pc, #748]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008414:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008418:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800841c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008420:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008424:	4ab6      	ldr	r2, [pc, #728]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008426:	430b      	orrs	r3, r1
 8008428:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800842c:	e003      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800842e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008432:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8008436:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	2100      	movs	r1, #0
 8008440:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8008444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008448:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800844c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008450:	460b      	mov	r3, r1
 8008452:	4313      	orrs	r3, r2
 8008454:	d055      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8008456:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800845a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800845e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008462:	d031      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8008464:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008468:	d82a      	bhi.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800846a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800846e:	d02d      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8008470:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008474:	d824      	bhi.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8008476:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800847a:	d029      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800847c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008480:	d81e      	bhi.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8008482:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008486:	d011      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8008488:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800848c:	d818      	bhi.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d020      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8008492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008496:	d113      	bne.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008498:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800849c:	3308      	adds	r3, #8
 800849e:	4618      	mov	r0, r3
 80084a0:	f003 fedc 	bl	800c25c <RCCEx_PLL2_Config>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80084aa:	e014      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80084ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084b0:	3330      	adds	r3, #48	@ 0x30
 80084b2:	4618      	mov	r0, r3
 80084b4:	f003 ff6a 	bl	800c38c <RCCEx_PLL3_Config>
 80084b8:	4603      	mov	r3, r0
 80084ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80084be:	e00a      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80084c6:	e006      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80084c8:	bf00      	nop
 80084ca:	e004      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80084cc:	bf00      	nop
 80084ce:	e002      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80084d0:	bf00      	nop
 80084d2:	e000      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80084d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10d      	bne.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80084de:	4b88      	ldr	r3, [pc, #544]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80084e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80084e4:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80084e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80084f0:	4a83      	ldr	r2, [pc, #524]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80084f2:	430b      	orrs	r3, r1
 80084f4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80084f8:	e003      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8008502:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850a:	2100      	movs	r1, #0
 800850c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8008510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008514:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008518:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800851c:	460b      	mov	r3, r1
 800851e:	4313      	orrs	r3, r2
 8008520:	d055      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8008522:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008526:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800852a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800852e:	d031      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8008530:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008534:	d82a      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8008536:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800853a:	d02d      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800853c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008540:	d824      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8008542:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008546:	d029      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8008548:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800854c:	d81e      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800854e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008552:	d011      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8008554:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008558:	d818      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d020      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800855e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008562:	d113      	bne.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008564:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008568:	3308      	adds	r3, #8
 800856a:	4618      	mov	r0, r3
 800856c:	f003 fe76 	bl	800c25c <RCCEx_PLL2_Config>
 8008570:	4603      	mov	r3, r0
 8008572:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8008576:	e014      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008578:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800857c:	3330      	adds	r3, #48	@ 0x30
 800857e:	4618      	mov	r0, r3
 8008580:	f003 ff04 	bl	800c38c <RCCEx_PLL3_Config>
 8008584:	4603      	mov	r3, r0
 8008586:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800858a:	e00a      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008592:	e006      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008594:	bf00      	nop
 8008596:	e004      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008598:	bf00      	nop
 800859a:	e002      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800859c:	bf00      	nop
 800859e:	e000      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80085a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10d      	bne.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80085aa:	4b55      	ldr	r3, [pc, #340]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80085ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80085b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80085b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085bc:	4a50      	ldr	r2, [pc, #320]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80085be:	430b      	orrs	r3, r1
 80085c0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80085c4:	e003      	b.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80085ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d6:	2100      	movs	r1, #0
 80085d8:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80085dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80085e4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80085e8:	460b      	mov	r3, r1
 80085ea:	4313      	orrs	r3, r2
 80085ec:	d055      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80085ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80085f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085fa:	d031      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80085fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008600:	d82a      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008606:	d02d      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8008608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800860c:	d824      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800860e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008612:	d029      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8008614:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008618:	d81e      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800861a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800861e:	d011      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8008620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008624:	d818      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008626:	2b00      	cmp	r3, #0
 8008628:	d020      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800862a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800862e:	d113      	bne.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008630:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008634:	3308      	adds	r3, #8
 8008636:	4618      	mov	r0, r3
 8008638:	f003 fe10 	bl	800c25c <RCCEx_PLL2_Config>
 800863c:	4603      	mov	r3, r0
 800863e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8008642:	e014      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008644:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008648:	3330      	adds	r3, #48	@ 0x30
 800864a:	4618      	mov	r0, r3
 800864c:	f003 fe9e 	bl	800c38c <RCCEx_PLL3_Config>
 8008650:	4603      	mov	r3, r0
 8008652:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8008656:	e00a      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800865e:	e006      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008660:	bf00      	nop
 8008662:	e004      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008664:	bf00      	nop
 8008666:	e002      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008668:	bf00      	nop
 800866a:	e000      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800866c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800866e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10d      	bne.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8008676:	4b22      	ldr	r3, [pc, #136]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008678:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800867c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008680:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008684:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008688:	4a1d      	ldr	r2, [pc, #116]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800868a:	430b      	orrs	r3, r1
 800868c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008690:	e003      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008692:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008696:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800869a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800869e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80086a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086aa:	2300      	movs	r3, #0
 80086ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80086b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80086b4:	460b      	mov	r3, r1
 80086b6:	4313      	orrs	r3, r2
 80086b8:	d055      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80086ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80086c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086c6:	d035      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80086c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086cc:	d82e      	bhi.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80086ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80086d2:	d031      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80086d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80086d8:	d828      	bhi.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80086da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086de:	d01b      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80086e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086e4:	d822      	bhi.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80086ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086ee:	d009      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80086f0:	e01c      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086f2:	4b03      	ldr	r3, [pc, #12]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80086f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f6:	4a02      	ldr	r2, [pc, #8]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80086f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086fc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80086fe:	e01c      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8008700:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008704:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008708:	3308      	adds	r3, #8
 800870a:	4618      	mov	r0, r3
 800870c:	f003 fda6 	bl	800c25c <RCCEx_PLL2_Config>
 8008710:	4603      	mov	r3, r0
 8008712:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008716:	e010      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008718:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800871c:	3330      	adds	r3, #48	@ 0x30
 800871e:	4618      	mov	r0, r3
 8008720:	f003 fe34 	bl	800c38c <RCCEx_PLL3_Config>
 8008724:	4603      	mov	r3, r0
 8008726:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800872a:	e006      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008732:	e002      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8008734:	bf00      	nop
 8008736:	e000      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8008738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800873a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10d      	bne.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8008742:	4bc3      	ldr	r3, [pc, #780]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008748:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800874c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008750:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008754:	4abe      	ldr	r2, [pc, #760]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008756:	430b      	orrs	r3, r1
 8008758:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800875c:	e003      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800875e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008762:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8008766:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008772:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008776:	2300      	movs	r3, #0
 8008778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800877c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008780:	460b      	mov	r3, r1
 8008782:	4313      	orrs	r3, r2
 8008784:	d051      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8008786:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800878a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800878e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008792:	d033      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8008794:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008798:	d82c      	bhi.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800879a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800879e:	d02d      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80087a0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80087a4:	d826      	bhi.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80087a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087aa:	d019      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80087ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087b0:	d820      	bhi.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80087b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80087ba:	d007      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80087bc:	e01a      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087be:	4ba4      	ldr	r3, [pc, #656]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80087c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c2:	4aa3      	ldr	r2, [pc, #652]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80087c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087c8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80087ca:	e018      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80087cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087d0:	3308      	adds	r3, #8
 80087d2:	4618      	mov	r0, r3
 80087d4:	f003 fd42 	bl	800c25c <RCCEx_PLL2_Config>
 80087d8:	4603      	mov	r3, r0
 80087da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80087de:	e00e      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80087e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087e4:	3330      	adds	r3, #48	@ 0x30
 80087e6:	4618      	mov	r0, r3
 80087e8:	f003 fdd0 	bl	800c38c <RCCEx_PLL3_Config>
 80087ec:	4603      	mov	r3, r0
 80087ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80087f2:	e004      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80087fa:	e000      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80087fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10d      	bne.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8008806:	4b92      	ldr	r3, [pc, #584]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008808:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800880c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8008810:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008814:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008818:	4a8d      	ldr	r2, [pc, #564]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800881a:	430b      	orrs	r3, r1
 800881c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008820:	e003      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008822:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008826:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800882a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800882e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008832:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008836:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008838:	2300      	movs	r3, #0
 800883a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800883c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008840:	460b      	mov	r3, r1
 8008842:	4313      	orrs	r3, r2
 8008844:	d032      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8008846:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800884a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800884e:	2b05      	cmp	r3, #5
 8008850:	d80f      	bhi.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8008852:	2b03      	cmp	r3, #3
 8008854:	d211      	bcs.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8008856:	2b01      	cmp	r3, #1
 8008858:	d911      	bls.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800885a:	2b02      	cmp	r3, #2
 800885c:	d109      	bne.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800885e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008862:	3308      	adds	r3, #8
 8008864:	4618      	mov	r0, r3
 8008866:	f003 fcf9 	bl	800c25c <RCCEx_PLL2_Config>
 800886a:	4603      	mov	r3, r0
 800886c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008870:	e006      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008878:	e002      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800887a:	bf00      	nop
 800887c:	e000      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800887e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008880:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10d      	bne.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008888:	4b71      	ldr	r3, [pc, #452]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800888a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800888e:	f023 0107 	bic.w	r1, r3, #7
 8008892:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008896:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800889a:	4a6d      	ldr	r2, [pc, #436]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800889c:	430b      	orrs	r3, r1
 800889e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80088a2:	e003      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088a8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80088ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b4:	2100      	movs	r1, #0
 80088b6:	6739      	str	r1, [r7, #112]	@ 0x70
 80088b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80088be:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80088c2:	460b      	mov	r3, r1
 80088c4:	4313      	orrs	r3, r2
 80088c6:	d024      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80088c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d005      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80088d4:	2b08      	cmp	r3, #8
 80088d6:	d005      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80088de:	e002      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80088e0:	bf00      	nop
 80088e2:	e000      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80088e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10d      	bne.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80088ee:	4b58      	ldr	r3, [pc, #352]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80088f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088f4:	f023 0108 	bic.w	r1, r3, #8
 80088f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008900:	4a53      	ldr	r2, [pc, #332]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008902:	430b      	orrs	r3, r1
 8008904:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008908:	e003      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800890a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800890e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008912:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800891e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008920:	2300      	movs	r3, #0
 8008922:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008924:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008928:	460b      	mov	r3, r1
 800892a:	4313      	orrs	r3, r2
 800892c:	f000 80b9 	beq.w	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8008930:	4b48      	ldr	r3, [pc, #288]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8008932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008934:	4a47      	ldr	r2, [pc, #284]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8008936:	f043 0301 	orr.w	r3, r3, #1
 800893a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800893c:	f7fa fc20 	bl	8003180 <HAL_GetTick>
 8008940:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8008944:	e00b      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008946:	f7fa fc1b 	bl	8003180 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	2b02      	cmp	r3, #2
 8008954:	d903      	bls.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800895c:	e005      	b.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800895e:	4b3d      	ldr	r3, [pc, #244]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8008960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0ed      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800896a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800896e:	2b00      	cmp	r3, #0
 8008970:	f040 8093 	bne.w	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008974:	4b36      	ldr	r3, [pc, #216]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800897a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800897e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008982:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008986:	2b00      	cmp	r3, #0
 8008988:	d023      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800898a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800898e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8008992:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008996:	4293      	cmp	r3, r2
 8008998:	d01b      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800899a:	4b2d      	ldr	r3, [pc, #180]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800899c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089a4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089a8:	4b29      	ldr	r3, [pc, #164]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80089aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089ae:	4a28      	ldr	r2, [pc, #160]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80089b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089b8:	4b25      	ldr	r3, [pc, #148]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80089ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089be:	4a24      	ldr	r2, [pc, #144]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80089c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80089c8:	4a21      	ldr	r2, [pc, #132]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80089ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80089ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80089d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d019      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089de:	f7fa fbcf 	bl	8003180 <HAL_GetTick>
 80089e2:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089e6:	e00d      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089e8:	f7fa fbca 	bl	8003180 <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80089f2:	1ad2      	subs	r2, r2, r3
 80089f4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d903      	bls.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8008a02:	e006      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a04:	4b12      	ldr	r3, [pc, #72]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a0a:	f003 0302 	and.w	r3, r3, #2
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d0ea      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8008a12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d13a      	bne.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8008a1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a1e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a2a:	d115      	bne.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8008a2c:	4b08      	ldr	r3, [pc, #32]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008a34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a38:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008a3c:	091b      	lsrs	r3, r3, #4
 8008a3e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008a42:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8008a46:	4a02      	ldr	r2, [pc, #8]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008a48:	430b      	orrs	r3, r1
 8008a4a:	61d3      	str	r3, [r2, #28]
 8008a4c:	e00a      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8008a4e:	bf00      	nop
 8008a50:	44020c00 	.word	0x44020c00
 8008a54:	44020800 	.word	0x44020800
 8008a58:	4b9f      	ldr	r3, [pc, #636]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008a5a:	69db      	ldr	r3, [r3, #28]
 8008a5c:	4a9e      	ldr	r2, [pc, #632]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008a5e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a62:	61d3      	str	r3, [r2, #28]
 8008a64:	4b9c      	ldr	r3, [pc, #624]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a6a:	4a9b      	ldr	r2, [pc, #620]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008a6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008a74:	4b98      	ldr	r3, [pc, #608]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008a76:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8008a7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a7e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a86:	4a94      	ldr	r2, [pc, #592]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008a8e:	e008      	b.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a90:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a94:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8008a98:	e003      	b.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a9e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008aa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aaa:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8008aae:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ab4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008ab8:	460b      	mov	r3, r1
 8008aba:	4313      	orrs	r3, r2
 8008abc:	d035      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008abe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ac2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008ac6:	2b30      	cmp	r3, #48	@ 0x30
 8008ac8:	d014      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8008aca:	2b30      	cmp	r3, #48	@ 0x30
 8008acc:	d80e      	bhi.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8008ace:	2b20      	cmp	r3, #32
 8008ad0:	d012      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8008ad2:	2b20      	cmp	r3, #32
 8008ad4:	d80a      	bhi.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d010      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8008ada:	2b10      	cmp	r3, #16
 8008adc:	d106      	bne.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ade:	4b7e      	ldr	r3, [pc, #504]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae2:	4a7d      	ldr	r2, [pc, #500]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ae8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8008aea:	e008      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008af2:	e004      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008af4:	bf00      	nop
 8008af6:	e002      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008af8:	bf00      	nop
 8008afa:	e000      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008afe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10d      	bne.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008b06:	4b74      	ldr	r3, [pc, #464]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b0c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008b10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b14:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008b18:	4a6f      	ldr	r2, [pc, #444]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008b1a:	430b      	orrs	r3, r1
 8008b1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008b20:	e003      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b26:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008b2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008b36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b38:	2300      	movs	r3, #0
 8008b3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b3c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008b40:	460b      	mov	r3, r1
 8008b42:	4313      	orrs	r3, r2
 8008b44:	d033      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8008b46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b4a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8008b52:	2b40      	cmp	r3, #64	@ 0x40
 8008b54:	d007      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8008b56:	e010      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b58:	4b5f      	ldr	r3, [pc, #380]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b5c:	4a5e      	ldr	r2, [pc, #376]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b62:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8008b64:	e00d      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b6a:	3308      	adds	r3, #8
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f003 fb75 	bl	800c25c <RCCEx_PLL2_Config>
 8008b72:	4603      	mov	r3, r0
 8008b74:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8008b78:	e003      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10d      	bne.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8008b8a:	4b53      	ldr	r3, [pc, #332]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008b8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b90:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8008b94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b98:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8008b9c:	4a4e      	ldr	r2, [pc, #312]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008b9e:	430b      	orrs	r3, r1
 8008ba0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008ba4:	e003      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008baa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bc0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	d033      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8008bca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d002      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8008bd6:	2b80      	cmp	r3, #128	@ 0x80
 8008bd8:	d007      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8008bda:	e010      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bdc:	4b3e      	ldr	r3, [pc, #248]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be0:	4a3d      	ldr	r2, [pc, #244]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008be2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008be6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8008be8:	e00d      	b.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008bea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bee:	3308      	adds	r3, #8
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f003 fb33 	bl	800c25c <RCCEx_PLL2_Config>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8008bfc:	e003      	b.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10d      	bne.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8008c0e:	4b32      	ldr	r3, [pc, #200]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008c10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c14:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8008c18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c1c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008c20:	4a2d      	ldr	r2, [pc, #180]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008c22:	430b      	orrs	r3, r1
 8008c24:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008c28:	e003      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008c2e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008c32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8008c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c40:	2300      	movs	r3, #0
 8008c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c44:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	d04a      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8008c4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	d827      	bhi.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8008c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8008c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c60:	08008c75 	.word	0x08008c75
 8008c64:	08008c83 	.word	0x08008c83
 8008c68:	08008c97 	.word	0x08008c97
 8008c6c:	08008cb3 	.word	0x08008cb3
 8008c70:	08008cb3 	.word	0x08008cb3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c74:	4b18      	ldr	r3, [pc, #96]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c78:	4a17      	ldr	r2, [pc, #92]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c7e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008c80:	e018      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c86:	3308      	adds	r3, #8
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f003 fae7 	bl	800c25c <RCCEx_PLL2_Config>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008c94:	e00e      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008c96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c9a:	3330      	adds	r3, #48	@ 0x30
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f003 fb75 	bl	800c38c <RCCEx_PLL3_Config>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008ca8:	e004      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008cb0:	e000      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8008cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10f      	bne.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008cbc:	4b06      	ldr	r3, [pc, #24]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008cc2:	f023 0107 	bic.w	r1, r3, #7
 8008cc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008cce:	4a02      	ldr	r2, [pc, #8]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008cd0:	430b      	orrs	r3, r1
 8008cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008cd6:	e005      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8008cd8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cdc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008ce0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008ce4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008cf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cf6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	f000 8081 	beq.w	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8008d02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d0a:	2b20      	cmp	r3, #32
 8008d0c:	d85f      	bhi.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8008d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d14 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8008d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d14:	08008d99 	.word	0x08008d99
 8008d18:	08008dcf 	.word	0x08008dcf
 8008d1c:	08008dcf 	.word	0x08008dcf
 8008d20:	08008dcf 	.word	0x08008dcf
 8008d24:	08008dcf 	.word	0x08008dcf
 8008d28:	08008dcf 	.word	0x08008dcf
 8008d2c:	08008dcf 	.word	0x08008dcf
 8008d30:	08008dcf 	.word	0x08008dcf
 8008d34:	08008da7 	.word	0x08008da7
 8008d38:	08008dcf 	.word	0x08008dcf
 8008d3c:	08008dcf 	.word	0x08008dcf
 8008d40:	08008dcf 	.word	0x08008dcf
 8008d44:	08008dcf 	.word	0x08008dcf
 8008d48:	08008dcf 	.word	0x08008dcf
 8008d4c:	08008dcf 	.word	0x08008dcf
 8008d50:	08008dcf 	.word	0x08008dcf
 8008d54:	08008dbb 	.word	0x08008dbb
 8008d58:	08008dcf 	.word	0x08008dcf
 8008d5c:	08008dcf 	.word	0x08008dcf
 8008d60:	08008dcf 	.word	0x08008dcf
 8008d64:	08008dcf 	.word	0x08008dcf
 8008d68:	08008dcf 	.word	0x08008dcf
 8008d6c:	08008dcf 	.word	0x08008dcf
 8008d70:	08008dcf 	.word	0x08008dcf
 8008d74:	08008dd7 	.word	0x08008dd7
 8008d78:	08008dcf 	.word	0x08008dcf
 8008d7c:	08008dcf 	.word	0x08008dcf
 8008d80:	08008dcf 	.word	0x08008dcf
 8008d84:	08008dcf 	.word	0x08008dcf
 8008d88:	08008dcf 	.word	0x08008dcf
 8008d8c:	08008dcf 	.word	0x08008dcf
 8008d90:	08008dcf 	.word	0x08008dcf
 8008d94:	08008dd7 	.word	0x08008dd7
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d98:	4bab      	ldr	r3, [pc, #684]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9c:	4aaa      	ldr	r2, [pc, #680]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008da2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008da4:	e018      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008da6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008daa:	3308      	adds	r3, #8
 8008dac:	4618      	mov	r0, r3
 8008dae:	f003 fa55 	bl	800c25c <RCCEx_PLL2_Config>
 8008db2:	4603      	mov	r3, r0
 8008db4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008db8:	e00e      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008dba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008dbe:	3330      	adds	r3, #48	@ 0x30
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f003 fae3 	bl	800c38c <RCCEx_PLL3_Config>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008dcc:	e004      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008dd4:	e000      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8008dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dd8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10d      	bne.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008de0:	4b99      	ldr	r3, [pc, #612]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008de6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008dea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008dee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008df2:	4a95      	ldr	r2, [pc, #596]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008df4:	430b      	orrs	r3, r1
 8008df6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008dfa:	e003      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dfc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008e00:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008e04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008e10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e12:	2300      	movs	r3, #0
 8008e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	d04e      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8008e20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e2c:	d02e      	beq.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8008e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e32:	d827      	bhi.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008e34:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e36:	d02b      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8008e38:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e3a:	d823      	bhi.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008e3c:	2b80      	cmp	r3, #128	@ 0x80
 8008e3e:	d017      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8008e40:	2b80      	cmp	r3, #128	@ 0x80
 8008e42:	d81f      	bhi.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8008e48:	2b40      	cmp	r3, #64	@ 0x40
 8008e4a:	d007      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8008e4c:	e01a      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e4e:	4b7e      	ldr	r3, [pc, #504]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e52:	4a7d      	ldr	r2, [pc, #500]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e58:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008e5a:	e01a      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e60:	3308      	adds	r3, #8
 8008e62:	4618      	mov	r0, r3
 8008e64:	f003 f9fa 	bl	800c25c <RCCEx_PLL2_Config>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008e6e:	e010      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008e70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e74:	3330      	adds	r3, #48	@ 0x30
 8008e76:	4618      	mov	r0, r3
 8008e78:	f003 fa88 	bl	800c38c <RCCEx_PLL3_Config>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008e82:	e006      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008e8a:	e002      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008e8c:	bf00      	nop
 8008e8e:	e000      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10d      	bne.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008e9a:	4b6b      	ldr	r3, [pc, #428]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ea0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008eac:	4a66      	ldr	r2, [pc, #408]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008eae:	430b      	orrs	r3, r1
 8008eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008eb4:	e003      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008eba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8008ebe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008eca:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ecc:	2300      	movs	r3, #0
 8008ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ed0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	d055      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8008eda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ede:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008ee2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008ee6:	d031      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8008ee8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008eec:	d82a      	bhi.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008eee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ef2:	d02d      	beq.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8008ef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ef8:	d824      	bhi.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008efa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008efe:	d029      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8008f00:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008f04:	d81e      	bhi.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f0a:	d011      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8008f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f10:	d818      	bhi.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d020      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8008f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f1a:	d113      	bne.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f20:	3308      	adds	r3, #8
 8008f22:	4618      	mov	r0, r3
 8008f24:	f003 f99a 	bl	800c25c <RCCEx_PLL2_Config>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008f2e:	e014      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008f30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f34:	3330      	adds	r3, #48	@ 0x30
 8008f36:	4618      	mov	r0, r3
 8008f38:	f003 fa28 	bl	800c38c <RCCEx_PLL3_Config>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008f42:	e00a      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008f4a:	e006      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008f4c:	bf00      	nop
 8008f4e:	e004      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008f50:	bf00      	nop
 8008f52:	e002      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008f54:	bf00      	nop
 8008f56:	e000      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10d      	bne.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8008f62:	4b39      	ldr	r3, [pc, #228]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f68:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008f6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f70:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008f74:	4a34      	ldr	r2, [pc, #208]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008f76:	430b      	orrs	r3, r1
 8008f78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008f7c:	e003      	b.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008f82:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8008f86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008f92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f94:	2300      	movs	r3, #0
 8008f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f98:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	d058      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8008fa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008fa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008faa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008fae:	d031      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8008fb0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008fb4:	d82a      	bhi.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008fb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008fba:	d02d      	beq.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8008fbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008fc0:	d824      	bhi.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008fc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fc6:	d029      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8008fc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fcc:	d81e      	bhi.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fd2:	d011      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8008fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fd8:	d818      	bhi.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d020      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8008fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fe2:	d113      	bne.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008fe4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008fe8:	3308      	adds	r3, #8
 8008fea:	4618      	mov	r0, r3
 8008fec:	f003 f936 	bl	800c25c <RCCEx_PLL2_Config>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8008ff6:	e014      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ffc:	3330      	adds	r3, #48	@ 0x30
 8008ffe:	4618      	mov	r0, r3
 8009000:	f003 f9c4 	bl	800c38c <RCCEx_PLL3_Config>
 8009004:	4603      	mov	r3, r0
 8009006:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800900a:	e00a      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009012:	e006      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009014:	bf00      	nop
 8009016:	e004      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009018:	bf00      	nop
 800901a:	e002      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800901c:	bf00      	nop
 800901e:	e000      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009022:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009026:	2b00      	cmp	r3, #0
 8009028:	d110      	bne.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800902a:	4b07      	ldr	r3, [pc, #28]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800902c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009030:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8009034:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800903c:	4902      	ldr	r1, [pc, #8]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800903e:	4313      	orrs	r3, r2
 8009040:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8009044:	e006      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8009046:	bf00      	nop
 8009048:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800904c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009050:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009054:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	2100      	movs	r1, #0
 800905e:	6239      	str	r1, [r7, #32]
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	627b      	str	r3, [r7, #36]	@ 0x24
 8009066:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800906a:	460b      	mov	r3, r1
 800906c:	4313      	orrs	r3, r2
 800906e:	d055      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8009070:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009078:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800907c:	d031      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800907e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009082:	d82a      	bhi.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8009084:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009088:	d02d      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800908a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800908e:	d824      	bhi.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8009090:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009094:	d029      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8009096:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800909a:	d81e      	bhi.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800909c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090a0:	d011      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80090a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090a6:	d818      	bhi.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d020      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80090ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090b0:	d113      	bne.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80090b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80090b6:	3308      	adds	r3, #8
 80090b8:	4618      	mov	r0, r3
 80090ba:	f003 f8cf 	bl	800c25c <RCCEx_PLL2_Config>
 80090be:	4603      	mov	r3, r0
 80090c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80090c4:	e014      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80090c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80090ca:	3330      	adds	r3, #48	@ 0x30
 80090cc:	4618      	mov	r0, r3
 80090ce:	f003 f95d 	bl	800c38c <RCCEx_PLL3_Config>
 80090d2:	4603      	mov	r3, r0
 80090d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80090d8:	e00a      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80090e0:	e006      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80090e2:	bf00      	nop
 80090e4:	e004      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80090e6:	bf00      	nop
 80090e8:	e002      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80090ea:	bf00      	nop
 80090ec:	e000      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80090ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10d      	bne.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80090f8:	4b88      	ldr	r3, [pc, #544]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80090fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80090fe:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8009102:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800910a:	4984      	ldr	r1, [pc, #528]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800910c:	4313      	orrs	r3, r2
 800910e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8009112:	e003      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009114:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009118:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800911c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	2100      	movs	r1, #0
 8009126:	61b9      	str	r1, [r7, #24]
 8009128:	f003 0302 	and.w	r3, r3, #2
 800912c:	61fb      	str	r3, [r7, #28]
 800912e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009132:	460b      	mov	r3, r1
 8009134:	4313      	orrs	r3, r2
 8009136:	d03d      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8009138:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800913c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009140:	2b03      	cmp	r3, #3
 8009142:	d81c      	bhi.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8009144:	a201      	add	r2, pc, #4	@ (adr r2, 800914c <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8009146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914a:	bf00      	nop
 800914c:	08009187 	.word	0x08009187
 8009150:	0800915d 	.word	0x0800915d
 8009154:	0800916b 	.word	0x0800916b
 8009158:	08009187 	.word	0x08009187
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800915c:	4b6f      	ldr	r3, [pc, #444]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800915e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009160:	4a6e      	ldr	r2, [pc, #440]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009166:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009168:	e00e      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800916a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800916e:	3308      	adds	r3, #8
 8009170:	4618      	mov	r0, r3
 8009172:	f003 f873 	bl	800c25c <RCCEx_PLL2_Config>
 8009176:	4603      	mov	r3, r0
 8009178:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800917c:	e004      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009184:	e000      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8009186:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009188:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10d      	bne.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8009190:	4b62      	ldr	r3, [pc, #392]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009192:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009196:	f023 0203 	bic.w	r2, r3, #3
 800919a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800919e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80091a2:	495e      	ldr	r1, [pc, #376]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80091a4:	4313      	orrs	r3, r2
 80091a6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80091aa:	e003      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80091b0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80091b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80091b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091bc:	2100      	movs	r1, #0
 80091be:	6139      	str	r1, [r7, #16]
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	617b      	str	r3, [r7, #20]
 80091c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80091ca:	460b      	mov	r3, r1
 80091cc:	4313      	orrs	r3, r2
 80091ce:	d03a      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80091d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80091d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80091d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091dc:	d00e      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80091de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091e2:	d815      	bhi.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d017      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80091e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091ec:	d110      	bne.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091ee:	4b4b      	ldr	r3, [pc, #300]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80091f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f2:	4a4a      	ldr	r2, [pc, #296]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80091f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091f8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80091fa:	e00e      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80091fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009200:	3308      	adds	r3, #8
 8009202:	4618      	mov	r0, r3
 8009204:	f003 f82a 	bl	800c25c <RCCEx_PLL2_Config>
 8009208:	4603      	mov	r3, r0
 800920a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800920e:	e004      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009216:	e000      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8009218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800921a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10d      	bne.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8009222:	4b3e      	ldr	r3, [pc, #248]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009228:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800922c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009230:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009234:	4939      	ldr	r1, [pc, #228]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009236:	4313      	orrs	r3, r2
 8009238:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800923c:	e003      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800923e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009242:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009246:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	2100      	movs	r1, #0
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	f003 0310 	and.w	r3, r3, #16
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800925c:	460b      	mov	r3, r1
 800925e:	4313      	orrs	r3, r2
 8009260:	d038      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8009262:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009266:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800926a:	2b30      	cmp	r3, #48	@ 0x30
 800926c:	d01b      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800926e:	2b30      	cmp	r3, #48	@ 0x30
 8009270:	d815      	bhi.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8009272:	2b10      	cmp	r3, #16
 8009274:	d002      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8009276:	2b20      	cmp	r3, #32
 8009278:	d007      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800927a:	e010      	b.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800927c:	4b27      	ldr	r3, [pc, #156]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800927e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009280:	4a26      	ldr	r2, [pc, #152]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009286:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8009288:	e00e      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800928a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800928e:	3330      	adds	r3, #48	@ 0x30
 8009290:	4618      	mov	r0, r3
 8009292:	f003 f87b 	bl	800c38c <RCCEx_PLL3_Config>
 8009296:	4603      	mov	r3, r0
 8009298:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800929c:	e004      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80092a4:	e000      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80092a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10d      	bne.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80092b0:	4b1a      	ldr	r3, [pc, #104]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80092b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092b6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80092ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80092be:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80092c2:	4916      	ldr	r1, [pc, #88]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80092c4:	4313      	orrs	r3, r2
 80092c6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80092ca:	e003      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80092d0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80092d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	2100      	movs	r1, #0
 80092de:	6039      	str	r1, [r7, #0]
 80092e0:	f003 0308 	and.w	r3, r3, #8
 80092e4:	607b      	str	r3, [r7, #4]
 80092e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80092ea:	460b      	mov	r3, r1
 80092ec:	4313      	orrs	r3, r2
 80092ee:	d00c      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80092f0:	4b0a      	ldr	r3, [pc, #40]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80092f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80092fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80092fe:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8009302:	4906      	ldr	r1, [pc, #24]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009304:	4313      	orrs	r3, r2
 8009306:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800930a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800930e:	4618      	mov	r0, r3
 8009310:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8009314:	46bd      	mov	sp, r7
 8009316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800931a:	bf00      	nop
 800931c:	44020c00 	.word	0x44020c00

08009320 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8009320:	b480      	push	{r7}
 8009322:	b08b      	sub	sp, #44	@ 0x2c
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009328:	4bae      	ldr	r3, [pc, #696]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800932a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800932c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009330:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009332:	4bac      	ldr	r3, [pc, #688]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009336:	f003 0303 	and.w	r3, r3, #3
 800933a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800933c:	4ba9      	ldr	r3, [pc, #676]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800933e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009340:	0a1b      	lsrs	r3, r3, #8
 8009342:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009346:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009348:	4ba6      	ldr	r3, [pc, #664]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800934a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800934c:	091b      	lsrs	r3, r3, #4
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009354:	4ba3      	ldr	r3, [pc, #652]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009358:	08db      	lsrs	r3, r3, #3
 800935a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	fb02 f303 	mul.w	r3, r2, r3
 8009364:	ee07 3a90 	vmov	s15, r3
 8009368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	2b00      	cmp	r3, #0
 8009374:	f000 8126 	beq.w	80095c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	2b03      	cmp	r3, #3
 800937c:	d053      	beq.n	8009426 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	2b03      	cmp	r3, #3
 8009382:	d86f      	bhi.n	8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d003      	beq.n	8009392 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	2b02      	cmp	r3, #2
 800938e:	d02b      	beq.n	80093e8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8009390:	e068      	b.n	8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009392:	4b94      	ldr	r3, [pc, #592]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	08db      	lsrs	r3, r3, #3
 8009398:	f003 0303 	and.w	r3, r3, #3
 800939c:	4a92      	ldr	r2, [pc, #584]	@ (80095e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800939e:	fa22 f303 	lsr.w	r3, r2, r3
 80093a2:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	ee07 3a90 	vmov	s15, r3
 80093aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	ee07 3a90 	vmov	s15, r3
 80093b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	ee07 3a90 	vmov	s15, r3
 80093c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c6:	ed97 6a04 	vldr	s12, [r7, #16]
 80093ca:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80095ec <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80093ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80093e6:	e068      	b.n	80094ba <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80095f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80093f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093fa:	6a3b      	ldr	r3, [r7, #32]
 80093fc:	ee07 3a90 	vmov	s15, r3
 8009400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009404:	ed97 6a04 	vldr	s12, [r7, #16]
 8009408:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80095ec <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800940c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009414:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009418:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800941c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009420:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009424:	e049      	b.n	80094ba <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	ee07 3a90 	vmov	s15, r3
 800942c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009430:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80095f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8009434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009438:	6a3b      	ldr	r3, [r7, #32]
 800943a:	ee07 3a90 	vmov	s15, r3
 800943e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009442:	ed97 6a04 	vldr	s12, [r7, #16]
 8009446:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80095ec <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800944a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800944e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800945e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009462:	e02a      	b.n	80094ba <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009464:	4b5f      	ldr	r3, [pc, #380]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	08db      	lsrs	r3, r3, #3
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	4a5e      	ldr	r2, [pc, #376]	@ (80095e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8009470:	fa22 f303 	lsr.w	r3, r2, r3
 8009474:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	ee07 3a90 	vmov	s15, r3
 800947c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800948e:	6a3b      	ldr	r3, [r7, #32]
 8009490:	ee07 3a90 	vmov	s15, r3
 8009494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009498:	ed97 6a04 	vldr	s12, [r7, #16]
 800949c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80095ec <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80094a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094b4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80094b8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094ba:	4b4a      	ldr	r3, [pc, #296]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094c6:	d121      	bne.n	800950c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80094c8:	4b46      	ldr	r3, [pc, #280]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80094ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d017      	beq.n	8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80094d4:	4b43      	ldr	r3, [pc, #268]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80094d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094d8:	0a5b      	lsrs	r3, r3, #9
 80094da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094de:	ee07 3a90 	vmov	s15, r3
 80094e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80094e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094ea:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80094ee:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80094f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094fa:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	601a      	str	r2, [r3, #0]
 8009502:	e006      	b.n	8009512 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	e002      	b.n	8009512 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009512:	4b34      	ldr	r3, [pc, #208]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800951a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800951e:	d121      	bne.n	8009564 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009520:	4b30      	ldr	r3, [pc, #192]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009528:	2b00      	cmp	r3, #0
 800952a:	d017      	beq.n	800955c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800952c:	4b2d      	ldr	r3, [pc, #180]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800952e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009530:	0c1b      	lsrs	r3, r3, #16
 8009532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009536:	ee07 3a90 	vmov	s15, r3
 800953a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800953e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009542:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8009546:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800954a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800954e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009552:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	605a      	str	r2, [r3, #4]
 800955a:	e006      	b.n	800956a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	605a      	str	r2, [r3, #4]
 8009562:	e002      	b.n	800956a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800956a:	4b1e      	ldr	r3, [pc, #120]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009572:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009576:	d121      	bne.n	80095bc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8009578:	4b1a      	ldr	r3, [pc, #104]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800957a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800957c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d017      	beq.n	80095b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009584:	4b17      	ldr	r3, [pc, #92]	@ (80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009588:	0e1b      	lsrs	r3, r3, #24
 800958a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8009596:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800959a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800959e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80095a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095aa:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80095b2:	e010      	b.n	80095d6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	609a      	str	r2, [r3, #8]
}
 80095ba:	e00c      	b.n	80095d6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	609a      	str	r2, [r3, #8]
}
 80095c2:	e008      	b.n	80095d6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	609a      	str	r2, [r3, #8]
}
 80095d6:	bf00      	nop
 80095d8:	372c      	adds	r7, #44	@ 0x2c
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	44020c00 	.word	0x44020c00
 80095e8:	03d09000 	.word	0x03d09000
 80095ec:	46000000 	.word	0x46000000
 80095f0:	4a742400 	.word	0x4a742400
 80095f4:	4af42400 	.word	0x4af42400

080095f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b08b      	sub	sp, #44	@ 0x2c
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009600:	4bae      	ldr	r3, [pc, #696]	@ (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009608:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800960a:	4bac      	ldr	r3, [pc, #688]	@ (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800960c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960e:	f003 0303 	and.w	r3, r3, #3
 8009612:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8009614:	4ba9      	ldr	r3, [pc, #676]	@ (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009618:	0a1b      	lsrs	r3, r3, #8
 800961a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800961e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8009620:	4ba6      	ldr	r3, [pc, #664]	@ (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009624:	091b      	lsrs	r3, r3, #4
 8009626:	f003 0301 	and.w	r3, r3, #1
 800962a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800962c:	4ba3      	ldr	r3, [pc, #652]	@ (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800962e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009630:	08db      	lsrs	r3, r3, #3
 8009632:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009636:	697a      	ldr	r2, [r7, #20]
 8009638:	fb02 f303 	mul.w	r3, r2, r3
 800963c:	ee07 3a90 	vmov	s15, r3
 8009640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009644:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	2b00      	cmp	r3, #0
 800964c:	f000 8126 	beq.w	800989c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	2b03      	cmp	r3, #3
 8009654:	d053      	beq.n	80096fe <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	2b03      	cmp	r3, #3
 800965a:	d86f      	bhi.n	800973c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d003      	beq.n	800966a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	2b02      	cmp	r3, #2
 8009666:	d02b      	beq.n	80096c0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8009668:	e068      	b.n	800973c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800966a:	4b94      	ldr	r3, [pc, #592]	@ (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	08db      	lsrs	r3, r3, #3
 8009670:	f003 0303 	and.w	r3, r3, #3
 8009674:	4a92      	ldr	r2, [pc, #584]	@ (80098c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8009676:	fa22 f303 	lsr.w	r3, r2, r3
 800967a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	ee07 3a90 	vmov	s15, r3
 8009682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	ee07 3a90 	vmov	s15, r3
 800968c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009690:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	ee07 3a90 	vmov	s15, r3
 800969a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800969e:	ed97 6a04 	vldr	s12, [r7, #16]
 80096a2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80096a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ba:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80096be:	e068      	b.n	8009792 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	ee07 3a90 	vmov	s15, r3
 80096c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ca:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80098c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80096ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096d2:	6a3b      	ldr	r3, [r7, #32]
 80096d4:	ee07 3a90 	vmov	s15, r3
 80096d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096dc:	ed97 6a04 	vldr	s12, [r7, #16]
 80096e0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80096e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096f8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80096fc:	e049      	b.n	8009792 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	ee07 3a90 	vmov	s15, r3
 8009704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009708:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80098cc <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 800970c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009710:	6a3b      	ldr	r3, [r7, #32]
 8009712:	ee07 3a90 	vmov	s15, r3
 8009716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800971a:	ed97 6a04 	vldr	s12, [r7, #16]
 800971e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8009722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800972a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800972e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009736:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800973a:	e02a      	b.n	8009792 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800973c:	4b5f      	ldr	r3, [pc, #380]	@ (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	08db      	lsrs	r3, r3, #3
 8009742:	f003 0303 	and.w	r3, r3, #3
 8009746:	4a5e      	ldr	r2, [pc, #376]	@ (80098c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8009748:	fa22 f303 	lsr.w	r3, r2, r3
 800974c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	ee07 3a90 	vmov	s15, r3
 8009754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	ee07 3a90 	vmov	s15, r3
 800975e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	ee07 3a90 	vmov	s15, r3
 800976c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009770:	ed97 6a04 	vldr	s12, [r7, #16]
 8009774:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8009778:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800977c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009780:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009784:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800978c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009790:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009792:	4b4a      	ldr	r3, [pc, #296]	@ (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800979a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800979e:	d121      	bne.n	80097e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80097a0:	4b46      	ldr	r3, [pc, #280]	@ (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80097a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d017      	beq.n	80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80097ac:	4b43      	ldr	r3, [pc, #268]	@ (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80097ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097b0:	0a5b      	lsrs	r3, r3, #9
 80097b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097b6:	ee07 3a90 	vmov	s15, r3
 80097ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80097be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097c2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80097c6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80097ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097d2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	601a      	str	r2, [r3, #0]
 80097da:	e006      	b.n	80097ea <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	601a      	str	r2, [r3, #0]
 80097e2:	e002      	b.n	80097ea <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097ea:	4b34      	ldr	r3, [pc, #208]	@ (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097f6:	d121      	bne.n	800983c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80097f8:	4b30      	ldr	r3, [pc, #192]	@ (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80097fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d017      	beq.n	8009834 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009804:	4b2d      	ldr	r3, [pc, #180]	@ (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009808:	0c1b      	lsrs	r3, r3, #16
 800980a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800980e:	ee07 3a90 	vmov	s15, r3
 8009812:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009816:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800981a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800981e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800982a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	605a      	str	r2, [r3, #4]
 8009832:	e006      	b.n	8009842 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	605a      	str	r2, [r3, #4]
 800983a:	e002      	b.n	8009842 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009842:	4b1e      	ldr	r3, [pc, #120]	@ (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800984a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800984e:	d121      	bne.n	8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009850:	4b1a      	ldr	r3, [pc, #104]	@ (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009854:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d017      	beq.n	800988c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800985c:	4b17      	ldr	r3, [pc, #92]	@ (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800985e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009860:	0e1b      	lsrs	r3, r3, #24
 8009862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009866:	ee07 3a90 	vmov	s15, r3
 800986a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800986e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009872:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009876:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800987a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800987e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009882:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800988a:	e010      	b.n	80098ae <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	609a      	str	r2, [r3, #8]
}
 8009892:	e00c      	b.n	80098ae <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	609a      	str	r2, [r3, #8]
}
 800989a:	e008      	b.n	80098ae <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	609a      	str	r2, [r3, #8]
}
 80098ae:	bf00      	nop
 80098b0:	372c      	adds	r7, #44	@ 0x2c
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	44020c00 	.word	0x44020c00
 80098c0:	03d09000 	.word	0x03d09000
 80098c4:	46000000 	.word	0x46000000
 80098c8:	4a742400 	.word	0x4a742400
 80098cc:	4af42400 	.word	0x4af42400

080098d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b08b      	sub	sp, #44	@ 0x2c
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80098d8:	4bae      	ldr	r3, [pc, #696]	@ (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80098da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80098e2:	4bac      	ldr	r3, [pc, #688]	@ (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80098e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098e6:	f003 0303 	and.w	r3, r3, #3
 80098ea:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80098ec:	4ba9      	ldr	r3, [pc, #676]	@ (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80098ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098f0:	0a1b      	lsrs	r3, r3, #8
 80098f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80098f6:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80098f8:	4ba6      	ldr	r3, [pc, #664]	@ (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80098fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098fc:	091b      	lsrs	r3, r3, #4
 80098fe:	f003 0301 	and.w	r3, r3, #1
 8009902:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009904:	4ba3      	ldr	r3, [pc, #652]	@ (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009908:	08db      	lsrs	r3, r3, #3
 800990a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	fb02 f303 	mul.w	r3, r2, r3
 8009914:	ee07 3a90 	vmov	s15, r3
 8009918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 8126 	beq.w	8009b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	2b03      	cmp	r3, #3
 800992c:	d053      	beq.n	80099d6 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	2b03      	cmp	r3, #3
 8009932:	d86f      	bhi.n	8009a14 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d003      	beq.n	8009942 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	2b02      	cmp	r3, #2
 800993e:	d02b      	beq.n	8009998 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8009940:	e068      	b.n	8009a14 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009942:	4b94      	ldr	r3, [pc, #592]	@ (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	08db      	lsrs	r3, r3, #3
 8009948:	f003 0303 	and.w	r3, r3, #3
 800994c:	4a92      	ldr	r2, [pc, #584]	@ (8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800994e:	fa22 f303 	lsr.w	r3, r2, r3
 8009952:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	ee07 3a90 	vmov	s15, r3
 800995a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	ee07 3a90 	vmov	s15, r3
 8009964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009968:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	ee07 3a90 	vmov	s15, r3
 8009972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009976:	ed97 6a04 	vldr	s12, [r7, #16]
 800997a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8009b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800997e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800998a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009992:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009996:	e068      	b.n	8009a6a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	ee07 3a90 	vmov	s15, r3
 800999e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8009ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80099a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	ee07 3a90 	vmov	s15, r3
 80099b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b4:	ed97 6a04 	vldr	s12, [r7, #16]
 80099b8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80099bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80099d4:	e049      	b.n	8009a6a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	ee07 3a90 	vmov	s15, r3
 80099dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80099e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	ee07 3a90 	vmov	s15, r3
 80099ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099f2:	ed97 6a04 	vldr	s12, [r7, #16]
 80099f6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8009b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80099fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a0e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009a12:	e02a      	b.n	8009a6a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a14:	4b5f      	ldr	r3, [pc, #380]	@ (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	08db      	lsrs	r3, r3, #3
 8009a1a:	f003 0303 	and.w	r3, r3, #3
 8009a1e:	4a5e      	ldr	r2, [pc, #376]	@ (8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8009a20:	fa22 f303 	lsr.w	r3, r2, r3
 8009a24:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	ee07 3a90 	vmov	s15, r3
 8009a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	ee07 3a90 	vmov	s15, r3
 8009a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a3e:	6a3b      	ldr	r3, [r7, #32]
 8009a40:	ee07 3a90 	vmov	s15, r3
 8009a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a48:	ed97 6a04 	vldr	s12, [r7, #16]
 8009a4c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8009a50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a64:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009a68:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a76:	d121      	bne.n	8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8009a78:	4b46      	ldr	r3, [pc, #280]	@ (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d017      	beq.n	8009ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009a84:	4b43      	ldr	r3, [pc, #268]	@ (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a88:	0a5b      	lsrs	r3, r3, #9
 8009a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a8e:	ee07 3a90 	vmov	s15, r3
 8009a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8009a96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009a9e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aaa:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	e006      	b.n	8009ac2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	601a      	str	r2, [r3, #0]
 8009aba:	e002      	b.n	8009ac2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ac2:	4b34      	ldr	r3, [pc, #208]	@ (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009aca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ace:	d121      	bne.n	8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009ad0:	4b30      	ldr	r3, [pc, #192]	@ (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d017      	beq.n	8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009adc:	4b2d      	ldr	r3, [pc, #180]	@ (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ae0:	0c1b      	lsrs	r3, r3, #16
 8009ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ae6:	ee07 3a90 	vmov	s15, r3
 8009aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8009aee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009af2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009af6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b02:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	605a      	str	r2, [r3, #4]
 8009b0a:	e006      	b.n	8009b1a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	605a      	str	r2, [r3, #4]
 8009b12:	e002      	b.n	8009b1a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b26:	d121      	bne.n	8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8009b28:	4b1a      	ldr	r3, [pc, #104]	@ (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d017      	beq.n	8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009b34:	4b17      	ldr	r3, [pc, #92]	@ (8009b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b38:	0e1b      	lsrs	r3, r3, #24
 8009b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b3e:	ee07 3a90 	vmov	s15, r3
 8009b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8009b46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009b4e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b5a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8009b62:	e010      	b.n	8009b86 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	609a      	str	r2, [r3, #8]
}
 8009b6a:	e00c      	b.n	8009b86 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	609a      	str	r2, [r3, #8]
}
 8009b72:	e008      	b.n	8009b86 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	609a      	str	r2, [r3, #8]
}
 8009b86:	bf00      	nop
 8009b88:	372c      	adds	r7, #44	@ 0x2c
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	44020c00 	.word	0x44020c00
 8009b98:	03d09000 	.word	0x03d09000
 8009b9c:	46000000 	.word	0x46000000
 8009ba0:	4a742400 	.word	0x4a742400
 8009ba4:	4af42400 	.word	0x4af42400

08009ba8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009ba8:	b590      	push	{r4, r7, lr}
 8009baa:	b08f      	sub	sp, #60	@ 0x3c
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8009bb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bb6:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8009bba:	4321      	orrs	r1, r4
 8009bbc:	d150      	bne.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009bbe:	4b26      	ldr	r3, [pc, #152]	@ (8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bc8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8009bca:	4b23      	ldr	r3, [pc, #140]	@ (8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bd0:	f003 0302 	and.w	r3, r3, #2
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d108      	bne.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bde:	d104      	bne.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009be0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009be6:	f002 bb2a 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8009bea:	4b1b      	ldr	r3, [pc, #108]	@ (8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009bf8:	d108      	bne.n	8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c00:	d104      	bne.n	8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8009c02:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c08:	f002 bb19 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8009c0c:	4b12      	ldr	r3, [pc, #72]	@ (8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c18:	d119      	bne.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c20:	d115      	bne.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009c22:	4b0d      	ldr	r3, [pc, #52]	@ (8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c24:	69db      	ldr	r3, [r3, #28]
 8009c26:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8009c2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c2e:	d30a      	bcc.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8009c30:	4b09      	ldr	r3, [pc, #36]	@ (8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c32:	69db      	ldr	r3, [r3, #28]
 8009c34:	0a1b      	lsrs	r3, r3, #8
 8009c36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c3a:	4a08      	ldr	r2, [pc, #32]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8009c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009c42:	f002 bafc 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8009c46:	2300      	movs	r3, #0
 8009c48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009c4a:	f002 baf8 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c52:	f002 baf4 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c56:	bf00      	nop
 8009c58:	44020c00 	.word	0x44020c00
 8009c5c:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8009c60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c64:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8009c68:	ea50 0104 	orrs.w	r1, r0, r4
 8009c6c:	f001 8275 	beq.w	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8009c70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c74:	2801      	cmp	r0, #1
 8009c76:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8009c7a:	f082 82dd 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009c7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c82:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8009c86:	ea50 0104 	orrs.w	r1, r0, r4
 8009c8a:	f001 816c 	beq.w	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8009c8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c92:	2801      	cmp	r0, #1
 8009c94:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8009c98:	f082 82ce 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009c9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ca0:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8009ca4:	ea50 0104 	orrs.w	r1, r0, r4
 8009ca8:	f001 8602 	beq.w	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8009cac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cb0:	2801      	cmp	r0, #1
 8009cb2:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8009cb6:	f082 82bf 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009cba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cbe:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8009cc2:	ea50 0104 	orrs.w	r1, r0, r4
 8009cc6:	f001 854c 	beq.w	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8009cca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cce:	2801      	cmp	r0, #1
 8009cd0:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8009cd4:	f082 82b0 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cdc:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8009ce0:	ea50 0104 	orrs.w	r1, r0, r4
 8009ce4:	f001 849e 	beq.w	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8009ce8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cec:	2801      	cmp	r0, #1
 8009cee:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8009cf2:	f082 82a1 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009cf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cfa:	f1a1 0420 	sub.w	r4, r1, #32
 8009cfe:	ea50 0104 	orrs.w	r1, r0, r4
 8009d02:	f001 83e8 	beq.w	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8009d06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d0a:	2801      	cmp	r0, #1
 8009d0c:	f171 0120 	sbcs.w	r1, r1, #32
 8009d10:	f082 8292 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d18:	f1a1 0410 	sub.w	r4, r1, #16
 8009d1c:	ea50 0104 	orrs.w	r1, r0, r4
 8009d20:	f002 8256 	beq.w	800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8009d24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d28:	2801      	cmp	r0, #1
 8009d2a:	f171 0110 	sbcs.w	r1, r1, #16
 8009d2e:	f082 8283 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d36:	f1a1 0408 	sub.w	r4, r1, #8
 8009d3a:	ea50 0104 	orrs.w	r1, r0, r4
 8009d3e:	f002 81cc 	beq.w	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8009d42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d46:	2801      	cmp	r0, #1
 8009d48:	f171 0108 	sbcs.w	r1, r1, #8
 8009d4c:	f082 8274 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d54:	1f0c      	subs	r4, r1, #4
 8009d56:	ea50 0104 	orrs.w	r1, r0, r4
 8009d5a:	f001 8648 	beq.w	800b9ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8009d5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d62:	2801      	cmp	r0, #1
 8009d64:	f171 0104 	sbcs.w	r1, r1, #4
 8009d68:	f082 8266 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d70:	1e8c      	subs	r4, r1, #2
 8009d72:	ea50 0104 	orrs.w	r1, r0, r4
 8009d76:	f002 8143 	beq.w	800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8009d7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d7e:	2801      	cmp	r0, #1
 8009d80:	f171 0102 	sbcs.w	r1, r1, #2
 8009d84:	f082 8258 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d8c:	1e4c      	subs	r4, r1, #1
 8009d8e:	ea50 0104 	orrs.w	r1, r0, r4
 8009d92:	f002 80ce 	beq.w	800bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8009d96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d9a:	2801      	cmp	r0, #1
 8009d9c:	f171 0101 	sbcs.w	r1, r1, #1
 8009da0:	f082 824a 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009da4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009da8:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8009dac:	4321      	orrs	r1, r4
 8009dae:	f002 8059 	beq.w	800be64 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8009db2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009db6:	4cd9      	ldr	r4, [pc, #868]	@ (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8009db8:	42a0      	cmp	r0, r4
 8009dba:	f171 0100 	sbcs.w	r1, r1, #0
 8009dbe:	f082 823b 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009dc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dc6:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8009dca:	4321      	orrs	r1, r4
 8009dcc:	f001 87d9 	beq.w	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8009dd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dd4:	4cd2      	ldr	r4, [pc, #840]	@ (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8009dd6:	42a0      	cmp	r0, r4
 8009dd8:	f171 0100 	sbcs.w	r1, r1, #0
 8009ddc:	f082 822c 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009de0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009de4:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8009de8:	4321      	orrs	r1, r4
 8009dea:	f001 8751 	beq.w	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8009dee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009df2:	4ccc      	ldr	r4, [pc, #816]	@ (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009df4:	42a0      	cmp	r0, r4
 8009df6:	f171 0100 	sbcs.w	r1, r1, #0
 8009dfa:	f082 821d 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009dfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e02:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8009e06:	4321      	orrs	r1, r4
 8009e08:	f001 869a 	beq.w	800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8009e0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e10:	4cc5      	ldr	r4, [pc, #788]	@ (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8009e12:	42a0      	cmp	r0, r4
 8009e14:	f171 0100 	sbcs.w	r1, r1, #0
 8009e18:	f082 820e 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e20:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8009e24:	4321      	orrs	r1, r4
 8009e26:	f001 8612 	beq.w	800ba4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8009e2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e2e:	4cbf      	ldr	r4, [pc, #764]	@ (800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009e30:	42a0      	cmp	r0, r4
 8009e32:	f171 0100 	sbcs.w	r1, r1, #0
 8009e36:	f082 81ff 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e3e:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8009e42:	4321      	orrs	r1, r4
 8009e44:	f002 817e 	beq.w	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8009e48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e4c:	4cb8      	ldr	r4, [pc, #736]	@ (800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e4e:	42a0      	cmp	r0, r4
 8009e50:	f171 0100 	sbcs.w	r1, r1, #0
 8009e54:	f082 81f0 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e5c:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8009e60:	4321      	orrs	r1, r4
 8009e62:	f000 829e 	beq.w	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8009e66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e6a:	4cb2      	ldr	r4, [pc, #712]	@ (800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009e6c:	42a0      	cmp	r0, r4
 8009e6e:	f171 0100 	sbcs.w	r1, r1, #0
 8009e72:	f082 81e1 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e7a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8009e7e:	4321      	orrs	r1, r4
 8009e80:	f000 826d 	beq.w	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8009e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e88:	4cab      	ldr	r4, [pc, #684]	@ (800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009e8a:	42a0      	cmp	r0, r4
 8009e8c:	f171 0100 	sbcs.w	r1, r1, #0
 8009e90:	f082 81d2 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e98:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8009e9c:	4321      	orrs	r1, r4
 8009e9e:	f001 800d 	beq.w	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8009ea2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ea6:	4ca5      	ldr	r4, [pc, #660]	@ (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009ea8:	42a0      	cmp	r0, r4
 8009eaa:	f171 0100 	sbcs.w	r1, r1, #0
 8009eae:	f082 81c3 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009eb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009eb6:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8009eba:	4321      	orrs	r1, r4
 8009ebc:	f000 81d0 	beq.w	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8009ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ec4:	4c9e      	ldr	r4, [pc, #632]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009ec6:	42a0      	cmp	r0, r4
 8009ec8:	f171 0100 	sbcs.w	r1, r1, #0
 8009ecc:	f082 81b4 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009ed0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ed4:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8009ed8:	4321      	orrs	r1, r4
 8009eda:	f000 8142 	beq.w	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8009ede:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ee2:	4c98      	ldr	r4, [pc, #608]	@ (800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009ee4:	42a0      	cmp	r0, r4
 8009ee6:	f171 0100 	sbcs.w	r1, r1, #0
 8009eea:	f082 81a5 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009eee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ef2:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8009ef6:	4321      	orrs	r1, r4
 8009ef8:	f001 824e 	beq.w	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8009efc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f00:	4c91      	ldr	r4, [pc, #580]	@ (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8009f02:	42a0      	cmp	r0, r4
 8009f04:	f171 0100 	sbcs.w	r1, r1, #0
 8009f08:	f082 8196 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f10:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8009f14:	4321      	orrs	r1, r4
 8009f16:	f001 8197 	beq.w	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8009f1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f1e:	4c8b      	ldr	r4, [pc, #556]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009f20:	42a0      	cmp	r0, r4
 8009f22:	f171 0100 	sbcs.w	r1, r1, #0
 8009f26:	f082 8187 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f2e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8009f32:	4321      	orrs	r1, r4
 8009f34:	f001 8154 	beq.w	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8009f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f3c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8009f40:	f171 0100 	sbcs.w	r1, r1, #0
 8009f44:	f082 8178 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f4c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8009f50:	4321      	orrs	r1, r4
 8009f52:	f001 80b7 	beq.w	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009f56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f5a:	f248 0401 	movw	r4, #32769	@ 0x8001
 8009f5e:	42a0      	cmp	r0, r4
 8009f60:	f171 0100 	sbcs.w	r1, r1, #0
 8009f64:	f082 8168 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f6c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8009f70:	4321      	orrs	r1, r4
 8009f72:	f001 8064 	beq.w	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8009f76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f7a:	f244 0401 	movw	r4, #16385	@ 0x4001
 8009f7e:	42a0      	cmp	r0, r4
 8009f80:	f171 0100 	sbcs.w	r1, r1, #0
 8009f84:	f082 8158 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f8c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8009f90:	4321      	orrs	r1, r4
 8009f92:	f001 8011 	beq.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8009f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f9a:	f242 0401 	movw	r4, #8193	@ 0x2001
 8009f9e:	42a0      	cmp	r0, r4
 8009fa0:	f171 0100 	sbcs.w	r1, r1, #0
 8009fa4:	f082 8148 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009fa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fac:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8009fb0:	4321      	orrs	r1, r4
 8009fb2:	f000 871e 	beq.w	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8009fb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fba:	f241 0401 	movw	r4, #4097	@ 0x1001
 8009fbe:	42a0      	cmp	r0, r4
 8009fc0:	f171 0100 	sbcs.w	r1, r1, #0
 8009fc4:	f082 8138 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fcc:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8009fd0:	4321      	orrs	r1, r4
 8009fd2:	f000 86a8 	beq.w	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8009fd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fda:	f640 0401 	movw	r4, #2049	@ 0x801
 8009fde:	42a0      	cmp	r0, r4
 8009fe0:	f171 0100 	sbcs.w	r1, r1, #0
 8009fe4:	f082 8128 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009fe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fec:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8009ff0:	4321      	orrs	r1, r4
 8009ff2:	f000 8632 	beq.w	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8009ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ffa:	f240 4401 	movw	r4, #1025	@ 0x401
 8009ffe:	42a0      	cmp	r0, r4
 800a000:	f171 0100 	sbcs.w	r1, r1, #0
 800a004:	f082 8118 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a00c:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 800a010:	4321      	orrs	r1, r4
 800a012:	f000 85b0 	beq.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800a016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a01a:	f240 2401 	movw	r4, #513	@ 0x201
 800a01e:	42a0      	cmp	r0, r4
 800a020:	f171 0100 	sbcs.w	r1, r1, #0
 800a024:	f082 8108 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a02c:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 800a030:	4321      	orrs	r1, r4
 800a032:	f000 8535 	beq.w	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800a036:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a03a:	f240 1401 	movw	r4, #257	@ 0x101
 800a03e:	42a0      	cmp	r0, r4
 800a040:	f171 0100 	sbcs.w	r1, r1, #0
 800a044:	f082 80f8 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a048:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a04c:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800a050:	4321      	orrs	r1, r4
 800a052:	f000 84ba 	beq.w	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800a056:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a05a:	2881      	cmp	r0, #129	@ 0x81
 800a05c:	f171 0100 	sbcs.w	r1, r1, #0
 800a060:	f082 80ea 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a064:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a068:	2821      	cmp	r0, #33	@ 0x21
 800a06a:	f171 0100 	sbcs.w	r1, r1, #0
 800a06e:	d26f      	bcs.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a070:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a074:	4301      	orrs	r1, r0
 800a076:	f002 80df 	beq.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a07a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a07e:	1e42      	subs	r2, r0, #1
 800a080:	f141 33ff 	adc.w	r3, r1, #4294967295
 800a084:	2a20      	cmp	r2, #32
 800a086:	f173 0100 	sbcs.w	r1, r3, #0
 800a08a:	f082 80d5 	bcs.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a08e:	2a1f      	cmp	r2, #31
 800a090:	f202 80d2 	bhi.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a094:	a101      	add	r1, pc, #4	@ (adr r1, 800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800a096:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a09a:	bf00      	nop
 800a09c:	0800a3fd 	.word	0x0800a3fd
 800a0a0:	0800a4c9 	.word	0x0800a4c9
 800a0a4:	0800c239 	.word	0x0800c239
 800a0a8:	0800a589 	.word	0x0800a589
 800a0ac:	0800c239 	.word	0x0800c239
 800a0b0:	0800c239 	.word	0x0800c239
 800a0b4:	0800c239 	.word	0x0800c239
 800a0b8:	0800a659 	.word	0x0800a659
 800a0bc:	0800c239 	.word	0x0800c239
 800a0c0:	0800c239 	.word	0x0800c239
 800a0c4:	0800c239 	.word	0x0800c239
 800a0c8:	0800c239 	.word	0x0800c239
 800a0cc:	0800c239 	.word	0x0800c239
 800a0d0:	0800c239 	.word	0x0800c239
 800a0d4:	0800c239 	.word	0x0800c239
 800a0d8:	0800a73b 	.word	0x0800a73b
 800a0dc:	0800c239 	.word	0x0800c239
 800a0e0:	0800c239 	.word	0x0800c239
 800a0e4:	0800c239 	.word	0x0800c239
 800a0e8:	0800c239 	.word	0x0800c239
 800a0ec:	0800c239 	.word	0x0800c239
 800a0f0:	0800c239 	.word	0x0800c239
 800a0f4:	0800c239 	.word	0x0800c239
 800a0f8:	0800c239 	.word	0x0800c239
 800a0fc:	0800c239 	.word	0x0800c239
 800a100:	0800c239 	.word	0x0800c239
 800a104:	0800c239 	.word	0x0800c239
 800a108:	0800c239 	.word	0x0800c239
 800a10c:	0800c239 	.word	0x0800c239
 800a110:	0800c239 	.word	0x0800c239
 800a114:	0800c239 	.word	0x0800c239
 800a118:	0800a811 	.word	0x0800a811
 800a11c:	80000001 	.word	0x80000001
 800a120:	40000001 	.word	0x40000001
 800a124:	20000001 	.word	0x20000001
 800a128:	10000001 	.word	0x10000001
 800a12c:	08000001 	.word	0x08000001
 800a130:	04000001 	.word	0x04000001
 800a134:	00800001 	.word	0x00800001
 800a138:	00400001 	.word	0x00400001
 800a13c:	00200001 	.word	0x00200001
 800a140:	00100001 	.word	0x00100001
 800a144:	00080001 	.word	0x00080001
 800a148:	00040001 	.word	0x00040001
 800a14c:	00020001 	.word	0x00020001
 800a150:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a154:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800a158:	430b      	orrs	r3, r1
 800a15a:	f000 83c4 	beq.w	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800a15e:	f002 b86b 	b.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a162:	4ba1      	ldr	r3, [pc, #644]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a168:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a16c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a170:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a174:	d036      	beq.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800a176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a178:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a17c:	d86b      	bhi.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800a17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a180:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a184:	d02b      	beq.n	800a1de <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a188:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a18c:	d863      	bhi.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800a18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a190:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a194:	d01b      	beq.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800a196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a198:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a19c:	d85b      	bhi.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800a19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d004      	beq.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1aa:	d008      	beq.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800a1ac:	e053      	b.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1ae:	f107 0320 	add.w	r3, r7, #32
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7ff f8b4 	bl	8009320 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1bc:	e04e      	b.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1be:	f107 0314 	add.w	r3, r7, #20
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7ff fa18 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1cc:	e046      	b.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1ce:	f107 0308 	add.w	r3, r7, #8
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7ff fb7c 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1dc:	e03e      	b.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a1de:	4b83      	ldr	r3, [pc, #524]	@ (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a1e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1e2:	e03b      	b.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1e4:	4b80      	ldr	r3, [pc, #512]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a1e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a1ea:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a1ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1f0:	4b7d      	ldr	r3, [pc, #500]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0302 	and.w	r3, r3, #2
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d10c      	bne.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800a1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d109      	bne.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a202:	4b79      	ldr	r3, [pc, #484]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	08db      	lsrs	r3, r3, #3
 800a208:	f003 0303 	and.w	r3, r3, #3
 800a20c:	4a78      	ldr	r2, [pc, #480]	@ (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800a20e:	fa22 f303 	lsr.w	r3, r2, r3
 800a212:	637b      	str	r3, [r7, #52]	@ 0x34
 800a214:	e01e      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a216:	4b74      	ldr	r3, [pc, #464]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a21e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a222:	d106      	bne.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a22a:	d102      	bne.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a22c:	4b71      	ldr	r3, [pc, #452]	@ (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800a22e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a230:	e010      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a232:	4b6d      	ldr	r3, [pc, #436]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a23a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a23e:	d106      	bne.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800a240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a242:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a246:	d102      	bne.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a248:	4b6b      	ldr	r3, [pc, #428]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800a24a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a24c:	e002      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a24e:	2300      	movs	r3, #0
 800a250:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a252:	e003      	b.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800a254:	e002      	b.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800a256:	2300      	movs	r3, #0
 800a258:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a25a:	bf00      	nop
          }
        }
        break;
 800a25c:	f001 bfef 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a260:	4b61      	ldr	r3, [pc, #388]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a262:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a266:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800a26a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a272:	d036      	beq.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800a274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a276:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a27a:	d86b      	bhi.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a282:	d02b      	beq.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800a284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a286:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a28a:	d863      	bhi.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a292:	d01b      	beq.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a29a:	d85b      	bhi.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d004      	beq.n	800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a2a8:	d008      	beq.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800a2aa:	e053      	b.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2ac:	f107 0320 	add.w	r3, r7, #32
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7ff f835 	bl	8009320 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a2ba:	e04e      	b.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2bc:	f107 0314 	add.w	r3, r7, #20
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff f999 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a2ca:	e046      	b.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2cc:	f107 0308 	add.w	r3, r7, #8
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7ff fafd 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a2da:	e03e      	b.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a2dc:	4b43      	ldr	r3, [pc, #268]	@ (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a2de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a2e0:	e03b      	b.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2e2:	4b41      	ldr	r3, [pc, #260]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a2e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a2e8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a2ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2ee:	4b3e      	ldr	r3, [pc, #248]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 0302 	and.w	r3, r3, #2
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d10c      	bne.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800a2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d109      	bne.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a300:	4b39      	ldr	r3, [pc, #228]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	08db      	lsrs	r3, r3, #3
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	4a39      	ldr	r2, [pc, #228]	@ (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800a30c:	fa22 f303 	lsr.w	r3, r2, r3
 800a310:	637b      	str	r3, [r7, #52]	@ 0x34
 800a312:	e01e      	b.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a314:	4b34      	ldr	r3, [pc, #208]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a31c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a320:	d106      	bne.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a328:	d102      	bne.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a32a:	4b32      	ldr	r3, [pc, #200]	@ (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800a32c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a32e:	e010      	b.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a330:	4b2d      	ldr	r3, [pc, #180]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a338:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a33c:	d106      	bne.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800a33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a340:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a344:	d102      	bne.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a346:	4b2c      	ldr	r3, [pc, #176]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800a348:	637b      	str	r3, [r7, #52]	@ 0x34
 800a34a:	e002      	b.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a34c:	2300      	movs	r3, #0
 800a34e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a350:	e003      	b.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800a352:	e002      	b.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800a354:	2300      	movs	r3, #0
 800a356:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a358:	bf00      	nop
          }
        }
        break;
 800a35a:	f001 bf70 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800a35e:	4b22      	ldr	r3, [pc, #136]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a360:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a368:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800a36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d108      	bne.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a370:	f107 0320 	add.w	r3, r7, #32
 800a374:	4618      	mov	r0, r3
 800a376:	f7fe ffd3 	bl	8009320 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a37e:	f001 bf5e 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800a382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a384:	2b40      	cmp	r3, #64	@ 0x40
 800a386:	d108      	bne.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a388:	f107 0314 	add.w	r3, r7, #20
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7ff f933 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a396:	f001 bf52 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a39a:	2300      	movs	r3, #0
 800a39c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a39e:	f001 bf4e 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800a3a2:	4b11      	ldr	r3, [pc, #68]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a3a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a3a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3ac:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d108      	bne.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3b4:	f107 0320 	add.w	r3, r7, #32
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7fe ffb1 	bl	8009320 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a3c2:	f001 bf3c 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c8:	2b80      	cmp	r3, #128	@ 0x80
 800a3ca:	d108      	bne.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3cc:	f107 0314 	add.w	r3, r7, #20
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7ff f911 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3da:	f001 bf30 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3e2:	f001 bf2c 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a3e6:	bf00      	nop
 800a3e8:	44020c00 	.word	0x44020c00
 800a3ec:	00bb8000 	.word	0x00bb8000
 800a3f0:	03d09000 	.word	0x03d09000
 800a3f4:	003d0900 	.word	0x003d0900
 800a3f8:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a3fc:	4b9d      	ldr	r3, [pc, #628]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a3fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a402:	f003 0307 	and.w	r3, r3, #7
 800a406:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d104      	bne.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a40e:	f7fc ffd1 	bl	80073b4 <HAL_RCC_GetPCLK2Freq>
 800a412:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a414:	f001 bf13 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800a418:	4b96      	ldr	r3, [pc, #600]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a420:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a424:	d10a      	bne.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800a426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d107      	bne.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a42c:	f107 0314 	add.w	r3, r7, #20
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff f8e1 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	637b      	str	r3, [r7, #52]	@ 0x34
 800a43a:	e043      	b.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800a43c:	4b8d      	ldr	r3, [pc, #564]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a444:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a448:	d10a      	bne.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800a44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d107      	bne.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a450:	f107 0308 	add.w	r3, r7, #8
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff fa3b 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a45e:	e031      	b.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800a460:	4b84      	ldr	r3, [pc, #528]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 0302 	and.w	r3, r3, #2
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d10c      	bne.n	800a486 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800a46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46e:	2b03      	cmp	r3, #3
 800a470:	d109      	bne.n	800a486 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a472:	4b80      	ldr	r3, [pc, #512]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	08db      	lsrs	r3, r3, #3
 800a478:	f003 0303 	and.w	r3, r3, #3
 800a47c:	4a7e      	ldr	r2, [pc, #504]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a47e:	fa22 f303 	lsr.w	r3, r2, r3
 800a482:	637b      	str	r3, [r7, #52]	@ 0x34
 800a484:	e01e      	b.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800a486:	4b7b      	ldr	r3, [pc, #492]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a48e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a492:	d105      	bne.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800a494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a496:	2b04      	cmp	r3, #4
 800a498:	d102      	bne.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800a49a:	4b78      	ldr	r3, [pc, #480]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a49c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a49e:	e011      	b.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a4a0:	4b74      	ldr	r3, [pc, #464]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a4a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a4a6:	f003 0302 	and.w	r3, r3, #2
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d106      	bne.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b0:	2b05      	cmp	r3, #5
 800a4b2:	d103      	bne.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800a4b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ba:	e003      	b.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a4c0:	f001 bebd 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a4c4:	f001 bebb 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a4c8:	4b6a      	ldr	r3, [pc, #424]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a4ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a4ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a4d2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d104      	bne.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a4da:	f7fc ff55 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 800a4de:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800a4e0:	f001 bead 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800a4e4:	4b63      	ldr	r3, [pc, #396]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4f0:	d10a      	bne.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f4:	2b08      	cmp	r3, #8
 800a4f6:	d107      	bne.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4f8:	f107 0314 	add.w	r3, r7, #20
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7ff f87b 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	637b      	str	r3, [r7, #52]	@ 0x34
 800a506:	e03d      	b.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800a508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50a:	2b10      	cmp	r3, #16
 800a50c:	d108      	bne.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a50e:	f107 0308 	add.w	r3, r7, #8
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff f9dc 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a51c:	f001 be8f 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a520:	4b54      	ldr	r3, [pc, #336]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 0302 	and.w	r3, r3, #2
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d10c      	bne.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800a52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52e:	2b18      	cmp	r3, #24
 800a530:	d109      	bne.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a532:	4b50      	ldr	r3, [pc, #320]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	08db      	lsrs	r3, r3, #3
 800a538:	f003 0303 	and.w	r3, r3, #3
 800a53c:	4a4e      	ldr	r2, [pc, #312]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a53e:	fa22 f303 	lsr.w	r3, r2, r3
 800a542:	637b      	str	r3, [r7, #52]	@ 0x34
 800a544:	e01e      	b.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800a546:	4b4b      	ldr	r3, [pc, #300]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a54e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a552:	d105      	bne.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a556:	2b20      	cmp	r3, #32
 800a558:	d102      	bne.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800a55a:	4b48      	ldr	r3, [pc, #288]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a55c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a55e:	e011      	b.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a560:	4b44      	ldr	r3, [pc, #272]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a566:	f003 0302 	and.w	r3, r3, #2
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d106      	bne.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800a56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a570:	2b28      	cmp	r3, #40	@ 0x28
 800a572:	d103      	bne.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800a574:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a578:	637b      	str	r3, [r7, #52]	@ 0x34
 800a57a:	e003      	b.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800a57c:	2300      	movs	r3, #0
 800a57e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a580:	f001 be5d 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a584:	f001 be5b 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a588:	4b3a      	ldr	r3, [pc, #232]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a58a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a58e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a592:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a596:	2b00      	cmp	r3, #0
 800a598:	d104      	bne.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a59a:	f7fc fef5 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 800a59e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800a5a0:	f001 be4d 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800a5a4:	4b33      	ldr	r3, [pc, #204]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5b0:	d10a      	bne.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b4:	2b40      	cmp	r3, #64	@ 0x40
 800a5b6:	d107      	bne.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5b8:	f107 0314 	add.w	r3, r7, #20
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7ff f81b 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5c6:	e045      	b.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800a5c8:	4b2a      	ldr	r3, [pc, #168]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5d4:	d10a      	bne.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d8:	2b80      	cmp	r3, #128	@ 0x80
 800a5da:	d107      	bne.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5dc:	f107 0308 	add.w	r3, r7, #8
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7ff f975 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5ea:	e033      	b.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a5ec:	4b21      	ldr	r3, [pc, #132]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 0302 	and.w	r3, r3, #2
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	d10c      	bne.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fa:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5fc:	d109      	bne.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a5fe:	4b1d      	ldr	r3, [pc, #116]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	08db      	lsrs	r3, r3, #3
 800a604:	f003 0303 	and.w	r3, r3, #3
 800a608:	4a1b      	ldr	r2, [pc, #108]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a60a:	fa22 f303 	lsr.w	r3, r2, r3
 800a60e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a610:	e020      	b.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800a612:	4b18      	ldr	r3, [pc, #96]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a61a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a61e:	d106      	bne.n	800a62e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800a620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a626:	d102      	bne.n	800a62e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800a628:	4b14      	ldr	r3, [pc, #80]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a62a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a62c:	e012      	b.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800a62e:	4b11      	ldr	r3, [pc, #68]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a634:	f003 0302 	and.w	r3, r3, #2
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d107      	bne.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800a63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a642:	d103      	bne.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800a644:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a648:	637b      	str	r3, [r7, #52]	@ 0x34
 800a64a:	e003      	b.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800a64c:	2300      	movs	r3, #0
 800a64e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a650:	f001 bdf5 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a654:	f001 bdf3 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a658:	4b06      	ldr	r3, [pc, #24]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a65a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a65e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a662:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800a664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10a      	bne.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a66a:	f7fc fe8d 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 800a66e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800a670:	f001 bde5 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a674:	44020c00 	.word	0x44020c00
 800a678:	03d09000 	.word	0x03d09000
 800a67c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800a680:	4ba0      	ldr	r3, [pc, #640]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a688:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a68c:	d10b      	bne.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800a68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a694:	d107      	bne.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a696:	f107 0314 	add.w	r3, r7, #20
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fe ffac 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6a4:	e047      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800a6a6:	4b97      	ldr	r3, [pc, #604]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6b2:	d10b      	bne.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6ba:	d107      	bne.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6bc:	f107 0308 	add.w	r3, r7, #8
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7ff f905 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ca:	e034      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a6cc:	4b8d      	ldr	r3, [pc, #564]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 0302 	and.w	r3, r3, #2
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d10d      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6da:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a6de:	d109      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a6e0:	4b88      	ldr	r3, [pc, #544]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	08db      	lsrs	r3, r3, #3
 800a6e6:	f003 0303 	and.w	r3, r3, #3
 800a6ea:	4a87      	ldr	r2, [pc, #540]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a6ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6f2:	e020      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800a6f4:	4b83      	ldr	r3, [pc, #524]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a700:	d106      	bne.n	800a710 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800a702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a708:	d102      	bne.n	800a710 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800a70a:	4b80      	ldr	r3, [pc, #512]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a70c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a70e:	e012      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a710:	4b7c      	ldr	r3, [pc, #496]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a716:	f003 0302 	and.w	r3, r3, #2
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d107      	bne.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800a71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a720:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a724:	d103      	bne.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800a726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a72a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a72c:	e003      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800a72e:	2300      	movs	r3, #0
 800a730:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a732:	f001 bd84 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a736:	f001 bd82 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a73a:	4b72      	ldr	r3, [pc, #456]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a73c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a740:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a744:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d104      	bne.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a74c:	f7fc fe1c 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 800a750:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800a752:	f001 bd74 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800a756:	4b6b      	ldr	r3, [pc, #428]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a75e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a762:	d10b      	bne.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800a764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a76a:	d107      	bne.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a76c:	f107 0314 	add.w	r3, r7, #20
 800a770:	4618      	mov	r0, r3
 800a772:	f7fe ff41 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	637b      	str	r3, [r7, #52]	@ 0x34
 800a77a:	e047      	b.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800a77c:	4b61      	ldr	r3, [pc, #388]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a788:	d10b      	bne.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800a78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a790:	d107      	bne.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a792:	f107 0308 	add.w	r3, r7, #8
 800a796:	4618      	mov	r0, r3
 800a798:	f7ff f89a 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7a0:	e034      	b.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a7a2:	4b58      	ldr	r3, [pc, #352]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 0302 	and.w	r3, r3, #2
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	d10d      	bne.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a7b4:	d109      	bne.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a7b6:	4b53      	ldr	r3, [pc, #332]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	08db      	lsrs	r3, r3, #3
 800a7bc:	f003 0303 	and.w	r3, r3, #3
 800a7c0:	4a51      	ldr	r2, [pc, #324]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a7c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7c8:	e020      	b.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800a7ca:	4b4e      	ldr	r3, [pc, #312]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7d6:	d106      	bne.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7de:	d102      	bne.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800a7e0:	4b4a      	ldr	r3, [pc, #296]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a7e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7e4:	e012      	b.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a7e6:	4b47      	ldr	r3, [pc, #284]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a7e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a7ec:	f003 0302 	and.w	r3, r3, #2
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d107      	bne.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a7fa:	d103      	bne.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800a7fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a800:	637b      	str	r3, [r7, #52]	@ 0x34
 800a802:	e003      	b.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800a804:	2300      	movs	r3, #0
 800a806:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a808:	f001 bd19 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a80c:	f001 bd17 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a810:	4b3c      	ldr	r3, [pc, #240]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a812:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a816:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800a81a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d104      	bne.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a822:	f7fc fdb1 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 800a826:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800a828:	f001 bd09 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800a82c:	4b35      	ldr	r3, [pc, #212]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a834:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a838:	d10b      	bne.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800a83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a840:	d107      	bne.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a842:	f107 0314 	add.w	r3, r7, #20
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe fed6 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a850:	e047      	b.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800a852:	4b2c      	ldr	r3, [pc, #176]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a85a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a85e:	d10b      	bne.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800a860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a862:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a866:	d107      	bne.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a868:	f107 0308 	add.w	r3, r7, #8
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7ff f82f 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	637b      	str	r3, [r7, #52]	@ 0x34
 800a876:	e034      	b.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a878:	4b22      	ldr	r3, [pc, #136]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 0302 	and.w	r3, r3, #2
 800a880:	2b02      	cmp	r3, #2
 800a882:	d10d      	bne.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800a884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a886:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a88a:	d109      	bne.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a88c:	4b1d      	ldr	r3, [pc, #116]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	08db      	lsrs	r3, r3, #3
 800a892:	f003 0303 	and.w	r3, r3, #3
 800a896:	4a1c      	ldr	r2, [pc, #112]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a898:	fa22 f303 	lsr.w	r3, r2, r3
 800a89c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a89e:	e020      	b.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800a8a0:	4b18      	ldr	r3, [pc, #96]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8ac:	d106      	bne.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800a8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8b4:	d102      	bne.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800a8b6:	4b15      	ldr	r3, [pc, #84]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a8b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8ba:	e012      	b.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a8bc:	4b11      	ldr	r3, [pc, #68]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a8be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a8c2:	f003 0302 	and.w	r3, r3, #2
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	d107      	bne.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800a8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8cc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a8d0:	d103      	bne.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800a8d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8d8:	e003      	b.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a8de:	f001 bcae 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a8e2:	f001 bcac 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800a8e6:	4b07      	ldr	r3, [pc, #28]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a8e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a8ec:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800a8f0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10b      	bne.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a8f8:	f7fc fd46 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 800a8fc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800a8fe:	f001 bc9e 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a902:	bf00      	nop
 800a904:	44020c00 	.word	0x44020c00
 800a908:	03d09000 	.word	0x03d09000
 800a90c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800a910:	4ba0      	ldr	r3, [pc, #640]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a918:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a91c:	d10b      	bne.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800a91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a920:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a924:	d107      	bne.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a926:	f107 0314 	add.w	r3, r7, #20
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fe fe64 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	637b      	str	r3, [r7, #52]	@ 0x34
 800a934:	e047      	b.n	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800a936:	4b97      	ldr	r3, [pc, #604]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a93e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a942:	d10b      	bne.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800a944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a946:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a94a:	d107      	bne.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a94c:	f107 0308 	add.w	r3, r7, #8
 800a950:	4618      	mov	r0, r3
 800a952:	f7fe ffbd 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	637b      	str	r3, [r7, #52]	@ 0x34
 800a95a:	e034      	b.n	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800a95c:	4b8d      	ldr	r3, [pc, #564]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 0302 	and.w	r3, r3, #2
 800a964:	2b02      	cmp	r3, #2
 800a966:	d10d      	bne.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800a968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a96a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a96e:	d109      	bne.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a970:	4b88      	ldr	r3, [pc, #544]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	08db      	lsrs	r3, r3, #3
 800a976:	f003 0303 	and.w	r3, r3, #3
 800a97a:	4a87      	ldr	r2, [pc, #540]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a97c:	fa22 f303 	lsr.w	r3, r2, r3
 800a980:	637b      	str	r3, [r7, #52]	@ 0x34
 800a982:	e020      	b.n	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800a984:	4b83      	ldr	r3, [pc, #524]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a98c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a990:	d106      	bne.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800a992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a994:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a998:	d102      	bne.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800a99a:	4b80      	ldr	r3, [pc, #512]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a99c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a99e:	e012      	b.n	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800a9a0:	4b7c      	ldr	r3, [pc, #496]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a9a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9a6:	f003 0302 	and.w	r3, r3, #2
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	d107      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a9b4:	d103      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800a9b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9bc:	e003      	b.n	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9c2:	f001 bc3c 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a9c6:	f001 bc3a 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800a9ca:	4b72      	ldr	r3, [pc, #456]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a9cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a9d0:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a9d4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800a9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d104      	bne.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a9dc:	f7fc fcd4 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 800a9e0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800a9e2:	f001 bc2c 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800a9e6:	4b6b      	ldr	r3, [pc, #428]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9f2:	d10b      	bne.n	800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800a9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9fa:	d107      	bne.n	800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9fc:	f107 0314 	add.w	r3, r7, #20
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7fe fdf9 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa0a:	e047      	b.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800aa0c:	4b61      	ldr	r3, [pc, #388]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa18:	d10b      	bne.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa20:	d107      	bne.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa22:	f107 0308 	add.w	r3, r7, #8
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7fe ff52 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa30:	e034      	b.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800aa32:	4b58      	ldr	r3, [pc, #352]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 0302 	and.w	r3, r3, #2
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d10d      	bne.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa40:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aa44:	d109      	bne.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa46:	4b53      	ldr	r3, [pc, #332]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	08db      	lsrs	r3, r3, #3
 800aa4c:	f003 0303 	and.w	r3, r3, #3
 800aa50:	4a51      	ldr	r2, [pc, #324]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800aa52:	fa22 f303 	lsr.w	r3, r2, r3
 800aa56:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa58:	e020      	b.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800aa5a:	4b4e      	ldr	r3, [pc, #312]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa66:	d106      	bne.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800aa68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aa6e:	d102      	bne.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800aa70:	4b4a      	ldr	r3, [pc, #296]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800aa72:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa74:	e012      	b.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800aa76:	4b47      	ldr	r3, [pc, #284]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aa78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa7c:	f003 0302 	and.w	r3, r3, #2
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d107      	bne.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800aa84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa86:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800aa8a:	d103      	bne.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800aa8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa90:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa92:	e003      	b.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800aa94:	2300      	movs	r3, #0
 800aa96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa98:	f001 bbd1 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aa9c:	f001 bbcf 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800aaa0:	4b3c      	ldr	r3, [pc, #240]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aaa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800aaa6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800aaaa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800aaac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d104      	bne.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800aab2:	f7fc fc69 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 800aab6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800aab8:	f001 bbc1 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800aabc:	4b35      	ldr	r3, [pc, #212]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aac4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aac8:	d10b      	bne.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800aaca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aacc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aad0:	d107      	bne.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aad2:	f107 0314 	add.w	r3, r7, #20
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fe fd8e 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	637b      	str	r3, [r7, #52]	@ 0x34
 800aae0:	e047      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800aae2:	4b2c      	ldr	r3, [pc, #176]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aaea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaee:	d10b      	bne.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aaf6:	d107      	bne.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaf8:	f107 0308 	add.w	r3, r7, #8
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fe fee7 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab06:	e034      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800ab08:	4b22      	ldr	r3, [pc, #136]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0302 	and.w	r3, r3, #2
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	d10d      	bne.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800ab14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ab1a:	d109      	bne.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab1c:	4b1d      	ldr	r3, [pc, #116]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	08db      	lsrs	r3, r3, #3
 800ab22:	f003 0303 	and.w	r3, r3, #3
 800ab26:	4a1c      	ldr	r2, [pc, #112]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800ab28:	fa22 f303 	lsr.w	r3, r2, r3
 800ab2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab2e:	e020      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800ab30:	4b18      	ldr	r3, [pc, #96]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab3c:	d106      	bne.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ab44:	d102      	bne.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800ab46:	4b15      	ldr	r3, [pc, #84]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800ab48:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab4a:	e012      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800ab4c:	4b11      	ldr	r3, [pc, #68]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ab4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab52:	f003 0302 	and.w	r3, r3, #2
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d107      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ab60:	d103      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800ab62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab68:	e003      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab6e:	f001 bb66 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ab72:	f001 bb64 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800ab76:	4b07      	ldr	r3, [pc, #28]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ab78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ab7c:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800ab80:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800ab82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10b      	bne.n	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ab88:	f7fc fbfe 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 800ab8c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800ab8e:	f001 bb56 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ab92:	bf00      	nop
 800ab94:	44020c00 	.word	0x44020c00
 800ab98:	03d09000 	.word	0x03d09000
 800ab9c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800aba0:	4ba1      	ldr	r3, [pc, #644]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aba8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abac:	d10b      	bne.n	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800abae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abb4:	d107      	bne.n	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abb6:	f107 0314 	add.w	r3, r7, #20
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fe fd1c 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800abc4:	e047      	b.n	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800abc6:	4b98      	ldr	r3, [pc, #608]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abd2:	d10b      	bne.n	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800abd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abda:	d107      	bne.n	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abdc:	f107 0308 	add.w	r3, r7, #8
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7fe fe75 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	637b      	str	r3, [r7, #52]	@ 0x34
 800abea:	e034      	b.n	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800abec:	4b8e      	ldr	r3, [pc, #568]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 0302 	and.w	r3, r3, #2
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	d10d      	bne.n	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800abf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfa:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800abfe:	d109      	bne.n	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac00:	4b89      	ldr	r3, [pc, #548]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	08db      	lsrs	r3, r3, #3
 800ac06:	f003 0303 	and.w	r3, r3, #3
 800ac0a:	4a88      	ldr	r2, [pc, #544]	@ (800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800ac0c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac10:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac12:	e020      	b.n	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800ac14:	4b84      	ldr	r3, [pc, #528]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac20:	d106      	bne.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800ac22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac28:	d102      	bne.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800ac2a:	4b81      	ldr	r3, [pc, #516]	@ (800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800ac2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac2e:	e012      	b.n	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800ac30:	4b7d      	ldr	r3, [pc, #500]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac36:	f003 0302 	and.w	r3, r3, #2
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d107      	bne.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac40:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800ac44:	d103      	bne.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800ac46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac4c:	e003      	b.n	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac52:	f001 baf4 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ac56:	f001 baf2 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800ac5a:	4b73      	ldr	r3, [pc, #460]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ac60:	f003 0307 	and.w	r3, r3, #7
 800ac64:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800ac66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d104      	bne.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ac6c:	f7fc fb8c 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 800ac70:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800ac72:	f001 bae4 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800ac76:	4b6c      	ldr	r3, [pc, #432]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac82:	d10a      	bne.n	800ac9a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800ac84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d107      	bne.n	800ac9a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac8a:	f107 0314 	add.w	r3, r7, #20
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fe fcb2 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac98:	e043      	b.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800ac9a:	4b63      	ldr	r3, [pc, #396]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aca2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aca6:	d10a      	bne.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800aca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acaa:	2b02      	cmp	r3, #2
 800acac:	d107      	bne.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acae:	f107 0308 	add.w	r3, r7, #8
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fe fe0c 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	637b      	str	r3, [r7, #52]	@ 0x34
 800acbc:	e031      	b.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800acbe:	4b5a      	ldr	r3, [pc, #360]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f003 0302 	and.w	r3, r3, #2
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d10c      	bne.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800acca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800accc:	2b03      	cmp	r3, #3
 800acce:	d109      	bne.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800acd0:	4b55      	ldr	r3, [pc, #340]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	08db      	lsrs	r3, r3, #3
 800acd6:	f003 0303 	and.w	r3, r3, #3
 800acda:	4a54      	ldr	r2, [pc, #336]	@ (800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800acdc:	fa22 f303 	lsr.w	r3, r2, r3
 800ace0:	637b      	str	r3, [r7, #52]	@ 0x34
 800ace2:	e01e      	b.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800ace4:	4b50      	ldr	r3, [pc, #320]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800acec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acf0:	d105      	bne.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800acf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf4:	2b04      	cmp	r3, #4
 800acf6:	d102      	bne.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800acf8:	4b4d      	ldr	r3, [pc, #308]	@ (800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800acfa:	637b      	str	r3, [r7, #52]	@ 0x34
 800acfc:	e011      	b.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800acfe:	4b4a      	ldr	r3, [pc, #296]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ad00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad04:	f003 0302 	and.w	r3, r3, #2
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d106      	bne.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0e:	2b05      	cmp	r3, #5
 800ad10:	d103      	bne.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800ad12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad16:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad18:	e003      	b.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad1e:	f001 ba8e 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ad22:	f001 ba8c 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800ad26:	4b40      	ldr	r3, [pc, #256]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ad28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ad2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ad30:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800ad32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d104      	bne.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad38:	f7fc fb26 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 800ad3c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800ad3e:	f001 ba7e 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800ad42:	4b39      	ldr	r3, [pc, #228]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad4e:	d10a      	bne.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800ad50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad52:	2b10      	cmp	r3, #16
 800ad54:	d107      	bne.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad56:	f107 0314 	add.w	r3, r7, #20
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fe fc4c 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad64:	e043      	b.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800ad66:	4b30      	ldr	r3, [pc, #192]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad72:	d10a      	bne.n	800ad8a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800ad74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad76:	2b20      	cmp	r3, #32
 800ad78:	d107      	bne.n	800ad8a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad7a:	f107 0308 	add.w	r3, r7, #8
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7fe fda6 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad88:	e031      	b.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800ad8a:	4b27      	ldr	r3, [pc, #156]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 0302 	and.w	r3, r3, #2
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d10c      	bne.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800ad96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad98:	2b30      	cmp	r3, #48	@ 0x30
 800ad9a:	d109      	bne.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ad9c:	4b22      	ldr	r3, [pc, #136]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	08db      	lsrs	r3, r3, #3
 800ada2:	f003 0303 	and.w	r3, r3, #3
 800ada6:	4a21      	ldr	r2, [pc, #132]	@ (800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800ada8:	fa22 f303 	lsr.w	r3, r2, r3
 800adac:	637b      	str	r3, [r7, #52]	@ 0x34
 800adae:	e01e      	b.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800adb0:	4b1d      	ldr	r3, [pc, #116]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800adb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adbc:	d105      	bne.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800adbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc0:	2b40      	cmp	r3, #64	@ 0x40
 800adc2:	d102      	bne.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800adc4:	4b1a      	ldr	r3, [pc, #104]	@ (800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800adc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800adc8:	e011      	b.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800adca:	4b17      	ldr	r3, [pc, #92]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800adcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800add0:	f003 0302 	and.w	r3, r3, #2
 800add4:	2b02      	cmp	r3, #2
 800add6:	d106      	bne.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800add8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adda:	2b50      	cmp	r3, #80	@ 0x50
 800addc:	d103      	bne.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800adde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ade2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ade4:	e003      	b.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800ade6:	2300      	movs	r3, #0
 800ade8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adea:	f001 ba28 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800adee:	f001 ba26 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800adf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800adf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800adf8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800adfc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800adfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d104      	bne.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800ae04:	f7fc faec 	bl	80073e0 <HAL_RCC_GetPCLK3Freq>
 800ae08:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800ae0a:	f001 ba18 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae14:	d10e      	bne.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae16:	f107 0314 	add.w	r3, r7, #20
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fe fbec 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae24:	f001 ba0b 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ae28:	44020c00 	.word	0x44020c00
 800ae2c:	03d09000 	.word	0x03d09000
 800ae30:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800ae34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae3a:	d108      	bne.n	800ae4e <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae3c:	f107 0308 	add.w	r3, r7, #8
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fe fd45 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae4a:	f001 b9f8 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800ae4e:	4ba4      	ldr	r3, [pc, #656]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f003 0302 	and.w	r3, r3, #2
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d10d      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ae60:	d109      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ae62:	4b9f      	ldr	r3, [pc, #636]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	08db      	lsrs	r3, r3, #3
 800ae68:	f003 0303 	and.w	r3, r3, #3
 800ae6c:	4a9d      	ldr	r2, [pc, #628]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800ae6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae72:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae74:	e020      	b.n	800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800ae76:	4b9a      	ldr	r3, [pc, #616]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae82:	d106      	bne.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800ae84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ae8a:	d102      	bne.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800ae8c:	4b96      	ldr	r3, [pc, #600]	@ (800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800ae8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae90:	e012      	b.n	800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800ae92:	4b93      	ldr	r3, [pc, #588]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ae94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae98:	f003 0302 	and.w	r3, r3, #2
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d107      	bne.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800aea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800aea6:	d103      	bne.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800aea8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aeac:	637b      	str	r3, [r7, #52]	@ 0x34
 800aeae:	e003      	b.n	800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aeb4:	f001 b9c3 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aeb8:	f001 b9c1 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800aebc:	4b88      	ldr	r3, [pc, #544]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aebe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aec2:	f003 0307 	and.w	r3, r3, #7
 800aec6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800aec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d104      	bne.n	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800aece:	f7fc fa3f 	bl	8007350 <HAL_RCC_GetHCLKFreq>
 800aed2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800aed4:	f001 b9b3 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800aed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d104      	bne.n	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800aede:	f7fc f90b 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 800aee2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800aee4:	f001 b9ab 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800aee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d108      	bne.n	800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeee:	f107 0314 	add.w	r3, r7, #20
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fe fb80 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aefc:	f001 b99f 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800af00:	4b77      	ldr	r3, [pc, #476]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af0c:	d105      	bne.n	800af1a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800af0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af10:	2b03      	cmp	r3, #3
 800af12:	d102      	bne.n	800af1a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800af14:	4b75      	ldr	r3, [pc, #468]	@ (800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800af16:	637b      	str	r3, [r7, #52]	@ 0x34
 800af18:	e023      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800af1a:	4b71      	ldr	r3, [pc, #452]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f003 0302 	and.w	r3, r3, #2
 800af22:	2b02      	cmp	r3, #2
 800af24:	d10c      	bne.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800af26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af28:	2b04      	cmp	r3, #4
 800af2a:	d109      	bne.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800af2c:	4b6c      	ldr	r3, [pc, #432]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	08db      	lsrs	r3, r3, #3
 800af32:	f003 0303 	and.w	r3, r3, #3
 800af36:	4a6b      	ldr	r2, [pc, #428]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800af38:	fa22 f303 	lsr.w	r3, r2, r3
 800af3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af3e:	e010      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800af40:	4b67      	ldr	r3, [pc, #412]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af4c:	d105      	bne.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800af4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af50:	2b05      	cmp	r3, #5
 800af52:	d102      	bne.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800af54:	4b64      	ldr	r3, [pc, #400]	@ (800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800af56:	637b      	str	r3, [r7, #52]	@ 0x34
 800af58:	e003      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800af5a:	2300      	movs	r3, #0
 800af5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af5e:	f001 b96e 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800af62:	f001 b96c 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800af66:	4b5e      	ldr	r3, [pc, #376]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800af6c:	f003 0308 	and.w	r3, r3, #8
 800af70:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800af72:	4b5b      	ldr	r3, [pc, #364]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af78:	f003 0302 	and.w	r3, r3, #2
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d106      	bne.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800af80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af82:	2b00      	cmp	r3, #0
 800af84:	d103      	bne.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800af86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800af8c:	e012      	b.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800af8e:	4b54      	ldr	r3, [pc, #336]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af9c:	d106      	bne.n	800afac <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800af9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa0:	2b08      	cmp	r3, #8
 800afa2:	d103      	bne.n	800afac <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800afa4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800afa8:	637b      	str	r3, [r7, #52]	@ 0x34
 800afaa:	e003      	b.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800afac:	2300      	movs	r3, #0
 800afae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800afb0:	f001 b945 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800afb4:	f001 b943 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800afb8:	4b49      	ldr	r3, [pc, #292]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800afba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800afbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800afc2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800afc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d104      	bne.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800afca:	f7fc f9dd 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 800afce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800afd0:	f001 b935 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800afd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afda:	d108      	bne.n	800afee <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afdc:	f107 0308 	add.w	r3, r7, #8
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fe fc75 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afea:	f001 b928 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800afee:	4b3c      	ldr	r3, [pc, #240]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 0302 	and.w	r3, r3, #2
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d10d      	bne.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800affa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b000:	d109      	bne.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b002:	4b37      	ldr	r3, [pc, #220]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	08db      	lsrs	r3, r3, #3
 800b008:	f003 0303 	and.w	r3, r3, #3
 800b00c:	4a35      	ldr	r2, [pc, #212]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800b00e:	fa22 f303 	lsr.w	r3, r2, r3
 800b012:	637b      	str	r3, [r7, #52]	@ 0x34
 800b014:	e011      	b.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800b016:	4b32      	ldr	r3, [pc, #200]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b01e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b022:	d106      	bne.n	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800b024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b026:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b02a:	d102      	bne.n	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800b02c:	4b2e      	ldr	r3, [pc, #184]	@ (800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800b02e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b030:	e003      	b.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800b032:	2300      	movs	r3, #0
 800b034:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b036:	f001 b902 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b03a:	f001 b900 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800b03e:	4b28      	ldr	r3, [pc, #160]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b040:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b044:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800b048:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800b04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d104      	bne.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b050:	f7fc f99a 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 800b054:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800b056:	f001 b8f2 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800b05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b060:	d108      	bne.n	800b074 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b062:	f107 0308 	add.w	r3, r7, #8
 800b066:	4618      	mov	r0, r3
 800b068:	f7fe fc32 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b070:	f001 b8e5 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800b074:	4b1a      	ldr	r3, [pc, #104]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0302 	and.w	r3, r3, #2
 800b07c:	2b02      	cmp	r3, #2
 800b07e:	d10d      	bne.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800b080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b082:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b086:	d109      	bne.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b088:	4b15      	ldr	r3, [pc, #84]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	08db      	lsrs	r3, r3, #3
 800b08e:	f003 0303 	and.w	r3, r3, #3
 800b092:	4a14      	ldr	r2, [pc, #80]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800b094:	fa22 f303 	lsr.w	r3, r2, r3
 800b098:	637b      	str	r3, [r7, #52]	@ 0x34
 800b09a:	e011      	b.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800b09c:	4b10      	ldr	r3, [pc, #64]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b0a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0a8:	d106      	bne.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b0b0:	d102      	bne.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800b0b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800b0b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0b6:	e003      	b.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0bc:	f001 b8bf 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b0c0:	f001 b8bd 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b0c4:	4b06      	ldr	r3, [pc, #24]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b0c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b0ca:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b0ce:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d10c      	bne.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b0d6:	f7fc f983 	bl	80073e0 <HAL_RCC_GetPCLK3Freq>
 800b0da:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800b0dc:	f001 b8af 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b0e0:	44020c00 	.word	0x44020c00
 800b0e4:	03d09000 	.word	0x03d09000
 800b0e8:	003d0900 	.word	0x003d0900
 800b0ec:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0f6:	d108      	bne.n	800b10a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0f8:	f107 0308 	add.w	r3, r7, #8
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7fe fbe7 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b106:	f001 b89a 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800b10a:	4b9f      	ldr	r3, [pc, #636]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f003 0302 	and.w	r3, r3, #2
 800b112:	2b02      	cmp	r3, #2
 800b114:	d10d      	bne.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800b116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b118:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b11c:	d109      	bne.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b11e:	4b9a      	ldr	r3, [pc, #616]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	08db      	lsrs	r3, r3, #3
 800b124:	f003 0303 	and.w	r3, r3, #3
 800b128:	4a98      	ldr	r2, [pc, #608]	@ (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b12a:	fa22 f303 	lsr.w	r3, r2, r3
 800b12e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b130:	e011      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800b132:	4b95      	ldr	r3, [pc, #596]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b13a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b13e:	d106      	bne.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800b140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b142:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b146:	d102      	bne.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800b148:	4b91      	ldr	r3, [pc, #580]	@ (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800b14a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b14c:	e003      	b.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800b14e:	2300      	movs	r3, #0
 800b150:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b152:	f001 b874 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b156:	f001 b872 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b15a:	4b8b      	ldr	r3, [pc, #556]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b15c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b160:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b164:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800b166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d104      	bne.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b16c:	f7fc f938 	bl	80073e0 <HAL_RCC_GetPCLK3Freq>
 800b170:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800b172:	f001 b864 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800b176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b178:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b17c:	d108      	bne.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b17e:	f107 0308 	add.w	r3, r7, #8
 800b182:	4618      	mov	r0, r3
 800b184:	f7fe fba4 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b18c:	f001 b857 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800b190:	4b7d      	ldr	r3, [pc, #500]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 0302 	and.w	r3, r3, #2
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d10d      	bne.n	800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800b19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b19e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b1a2:	d109      	bne.n	800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b1a4:	4b78      	ldr	r3, [pc, #480]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	08db      	lsrs	r3, r3, #3
 800b1aa:	f003 0303 	and.w	r3, r3, #3
 800b1ae:	4a77      	ldr	r2, [pc, #476]	@ (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b1b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1b6:	e011      	b.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800b1b8:	4b73      	ldr	r3, [pc, #460]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b1c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1c4:	d106      	bne.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800b1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b1cc:	d102      	bne.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800b1ce:	4b70      	ldr	r3, [pc, #448]	@ (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800b1d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1d2:	e003      	b.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1d8:	f001 b831 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b1dc:	f001 b82f 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800b1e0:	4b69      	ldr	r3, [pc, #420]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b1e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b1e6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800b1ea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d104      	bne.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b1f2:	f7fc f8c9 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 800b1f6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b1f8:	f001 b821 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b202:	d108      	bne.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b204:	f107 0308 	add.w	r3, r7, #8
 800b208:	4618      	mov	r0, r3
 800b20a:	f7fe fb61 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b212:	f001 b814 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800b216:	4b5c      	ldr	r3, [pc, #368]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 0302 	and.w	r3, r3, #2
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d10e      	bne.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800b222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b224:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b228:	d10a      	bne.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b22a:	4b57      	ldr	r3, [pc, #348]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	08db      	lsrs	r3, r3, #3
 800b230:	f003 0303 	and.w	r3, r3, #3
 800b234:	4a55      	ldr	r2, [pc, #340]	@ (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b236:	fa22 f303 	lsr.w	r3, r2, r3
 800b23a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b23c:	f000 bfff 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b240:	2300      	movs	r3, #0
 800b242:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b244:	f000 bffb 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b248:	4b4f      	ldr	r3, [pc, #316]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b24a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b24e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b252:	633b      	str	r3, [r7, #48]	@ 0x30
 800b254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b256:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800b25a:	d056      	beq.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800b25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800b262:	f200 808b 	bhi.w	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b26c:	d03e      	beq.n	800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800b26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b274:	f200 8082 	bhi.w	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b27e:	d027      	beq.n	800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800b280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b282:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b286:	d879      	bhi.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b28e:	d017      	beq.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800b290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b292:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b296:	d871      	bhi.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d004      	beq.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800b29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2a4:	d004      	beq.n	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800b2a6:	e069      	b.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b2a8:	f7fc f89a 	bl	80073e0 <HAL_RCC_GetPCLK3Freq>
 800b2ac:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b2ae:	e068      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2b0:	f107 0314 	add.w	r3, r7, #20
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7fe f99f 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2be:	e060      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2c0:	f107 0308 	add.w	r3, r7, #8
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fe fb03 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2ce:	e058      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b2d0:	4b2d      	ldr	r3, [pc, #180]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b2d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b2d6:	f003 0302 	and.w	r3, r3, #2
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d103      	bne.n	800b2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800b2de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2e2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b2e4:	e04d      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2ea:	e04a      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b2ec:	4b26      	ldr	r3, [pc, #152]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b2ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b2f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2fa:	d103      	bne.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800b2fc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b300:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b302:	e03e      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800b304:	2300      	movs	r3, #0
 800b306:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b308:	e03b      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b30a:	4b1f      	ldr	r3, [pc, #124]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b30c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b310:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b314:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b316:	4b1c      	ldr	r3, [pc, #112]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f003 0302 	and.w	r3, r3, #2
 800b31e:	2b02      	cmp	r3, #2
 800b320:	d10c      	bne.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800b322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b324:	2b00      	cmp	r3, #0
 800b326:	d109      	bne.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b328:	4b17      	ldr	r3, [pc, #92]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	08db      	lsrs	r3, r3, #3
 800b32e:	f003 0303 	and.w	r3, r3, #3
 800b332:	4a16      	ldr	r2, [pc, #88]	@ (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b334:	fa22 f303 	lsr.w	r3, r2, r3
 800b338:	637b      	str	r3, [r7, #52]	@ 0x34
 800b33a:	e01e      	b.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b33c:	4b12      	ldr	r3, [pc, #72]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b348:	d106      	bne.n	800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800b34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b34c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b350:	d102      	bne.n	800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b352:	4b0f      	ldr	r3, [pc, #60]	@ (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800b354:	637b      	str	r3, [r7, #52]	@ 0x34
 800b356:	e010      	b.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b358:	4b0b      	ldr	r3, [pc, #44]	@ (800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b360:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b364:	d106      	bne.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800b366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b368:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b36c:	d102      	bne.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b36e:	4b09      	ldr	r3, [pc, #36]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800b370:	637b      	str	r3, [r7, #52]	@ 0x34
 800b372:	e002      	b.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b378:	e003      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800b37a:	e002      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800b37c:	2300      	movs	r3, #0
 800b37e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b380:	bf00      	nop
          }
        }
        break;
 800b382:	f000 bf5c 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b386:	bf00      	nop
 800b388:	44020c00 	.word	0x44020c00
 800b38c:	03d09000 	.word	0x03d09000
 800b390:	003d0900 	.word	0x003d0900
 800b394:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b398:	4b9e      	ldr	r3, [pc, #632]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b39a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b39e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b3a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b3aa:	d056      	beq.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b3b2:	f200 808b 	bhi.w	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3bc:	d03e      	beq.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800b3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3c4:	f200 8082 	bhi.w	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3ce:	d027      	beq.n	800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3d6:	d879      	bhi.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3de:	d017      	beq.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3e6:	d871      	bhi.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d004      	beq.n	800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3f4:	d004      	beq.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800b3f6:	e069      	b.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800b3f8:	f7fb ffc6 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 800b3fc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b3fe:	e068      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b400:	f107 0314 	add.w	r3, r7, #20
 800b404:	4618      	mov	r0, r3
 800b406:	f7fe f8f7 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b40e:	e060      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b410:	f107 0308 	add.w	r3, r7, #8
 800b414:	4618      	mov	r0, r3
 800b416:	f7fe fa5b 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b41e:	e058      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b420:	4b7c      	ldr	r3, [pc, #496]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b426:	f003 0302 	and.w	r3, r3, #2
 800b42a:	2b02      	cmp	r3, #2
 800b42c:	d103      	bne.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800b42e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b432:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b434:	e04d      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800b436:	2300      	movs	r3, #0
 800b438:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b43a:	e04a      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b43c:	4b75      	ldr	r3, [pc, #468]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b43e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b442:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b446:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b44a:	d103      	bne.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800b44c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b450:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b452:	e03e      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800b454:	2300      	movs	r3, #0
 800b456:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b458:	e03b      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b45a:	4b6e      	ldr	r3, [pc, #440]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b45c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b460:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b464:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b466:	4b6b      	ldr	r3, [pc, #428]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f003 0302 	and.w	r3, r3, #2
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d10c      	bne.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800b472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b474:	2b00      	cmp	r3, #0
 800b476:	d109      	bne.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b478:	4b66      	ldr	r3, [pc, #408]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	08db      	lsrs	r3, r3, #3
 800b47e:	f003 0303 	and.w	r3, r3, #3
 800b482:	4a65      	ldr	r2, [pc, #404]	@ (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800b484:	fa22 f303 	lsr.w	r3, r2, r3
 800b488:	637b      	str	r3, [r7, #52]	@ 0x34
 800b48a:	e01e      	b.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b48c:	4b61      	ldr	r3, [pc, #388]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b498:	d106      	bne.n	800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800b49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4a0:	d102      	bne.n	800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b4a2:	4b5e      	ldr	r3, [pc, #376]	@ (800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800b4a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4a6:	e010      	b.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4a8:	4b5a      	ldr	r3, [pc, #360]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4b4:	d106      	bne.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800b4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4bc:	d102      	bne.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b4be:	4b58      	ldr	r3, [pc, #352]	@ (800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800b4c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4c2:	e002      	b.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b4c8:	e003      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800b4ca:	e002      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b4d0:	bf00      	nop
          }
        }
        break;
 800b4d2:	f000 beb4 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800b4d6:	4b4f      	ldr	r3, [pc, #316]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b4d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b4dc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b4e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b4e8:	d056      	beq.n	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b4f0:	f200 808b 	bhi.w	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b4fa:	d03e      	beq.n	800b57a <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b502:	f200 8082 	bhi.w	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b508:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b50c:	d027      	beq.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800b50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b510:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b514:	d879      	bhi.n	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b51c:	d017      	beq.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800b51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b520:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b524:	d871      	bhi.n	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d004      	beq.n	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800b52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b532:	d004      	beq.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800b534:	e069      	b.n	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b536:	f7fb ff53 	bl	80073e0 <HAL_RCC_GetPCLK3Freq>
 800b53a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b53c:	e068      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b53e:	f107 0314 	add.w	r3, r7, #20
 800b542:	4618      	mov	r0, r3
 800b544:	f7fe f858 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b54c:	e060      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b54e:	f107 0308 	add.w	r3, r7, #8
 800b552:	4618      	mov	r0, r3
 800b554:	f7fe f9bc 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b55c:	e058      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b55e:	4b2d      	ldr	r3, [pc, #180]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b564:	f003 0302 	and.w	r3, r3, #2
 800b568:	2b02      	cmp	r3, #2
 800b56a:	d103      	bne.n	800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800b56c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b570:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b572:	e04d      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800b574:	2300      	movs	r3, #0
 800b576:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b578:	e04a      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b57a:	4b26      	ldr	r3, [pc, #152]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b57c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b584:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b588:	d103      	bne.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800b58a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b58e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b590:	e03e      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800b592:	2300      	movs	r3, #0
 800b594:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b596:	e03b      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b598:	4b1e      	ldr	r3, [pc, #120]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b59a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b59e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b5a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5a4:	4b1b      	ldr	r3, [pc, #108]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f003 0302 	and.w	r3, r3, #2
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d10c      	bne.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800b5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d109      	bne.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b5b6:	4b17      	ldr	r3, [pc, #92]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	08db      	lsrs	r3, r3, #3
 800b5bc:	f003 0303 	and.w	r3, r3, #3
 800b5c0:	4a15      	ldr	r2, [pc, #84]	@ (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800b5c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b5c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5c8:	e01e      	b.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b5ca:	4b12      	ldr	r3, [pc, #72]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b5d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5d6:	d106      	bne.n	800b5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800b5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5de:	d102      	bne.n	800b5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b5e0:	4b0e      	ldr	r3, [pc, #56]	@ (800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800b5e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5e4:	e010      	b.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5f2:	d106      	bne.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800b5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5fa:	d102      	bne.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b5fc:	4b08      	ldr	r3, [pc, #32]	@ (800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800b5fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b600:	e002      	b.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b602:	2300      	movs	r3, #0
 800b604:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b606:	e003      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800b608:	e002      	b.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800b60a:	2300      	movs	r3, #0
 800b60c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b60e:	bf00      	nop
          }
        }
        break;
 800b610:	f000 be15 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b614:	44020c00 	.word	0x44020c00
 800b618:	03d09000 	.word	0x03d09000
 800b61c:	003d0900 	.word	0x003d0900
 800b620:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800b624:	4b9e      	ldr	r3, [pc, #632]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b626:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b62a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800b62e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b632:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b636:	d056      	beq.n	800b6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800b638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b63a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b63e:	f200 808b 	bhi.w	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b644:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b648:	d03e      	beq.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800b64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b64c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b650:	f200 8082 	bhi.w	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b656:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b65a:	d027      	beq.n	800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800b65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b65e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b662:	d879      	bhi.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b666:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b66a:	d017      	beq.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800b66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b672:	d871      	bhi.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b676:	2b00      	cmp	r3, #0
 800b678:	d004      	beq.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800b67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b67c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b680:	d004      	beq.n	800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800b682:	e069      	b.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b684:	f7fb feac 	bl	80073e0 <HAL_RCC_GetPCLK3Freq>
 800b688:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b68a:	e068      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b68c:	f107 0314 	add.w	r3, r7, #20
 800b690:	4618      	mov	r0, r3
 800b692:	f7fd ffb1 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b69a:	e060      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b69c:	f107 0308 	add.w	r3, r7, #8
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fe f915 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b6aa:	e058      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b6ac:	4b7c      	ldr	r3, [pc, #496]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b6ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6b2:	f003 0302 	and.w	r3, r3, #2
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d103      	bne.n	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800b6ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6be:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b6c0:	e04d      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b6c6:	e04a      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b6c8:	4b75      	ldr	r3, [pc, #468]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b6ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b6d6:	d103      	bne.n	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800b6d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b6dc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b6de:	e03e      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b6e4:	e03b      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b6e6:	4b6e      	ldr	r3, [pc, #440]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b6e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b6ec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b6f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b6f2:	4b6b      	ldr	r3, [pc, #428]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 0302 	and.w	r3, r3, #2
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d10c      	bne.n	800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800b6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b700:	2b00      	cmp	r3, #0
 800b702:	d109      	bne.n	800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b704:	4b66      	ldr	r3, [pc, #408]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	08db      	lsrs	r3, r3, #3
 800b70a:	f003 0303 	and.w	r3, r3, #3
 800b70e:	4a65      	ldr	r2, [pc, #404]	@ (800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800b710:	fa22 f303 	lsr.w	r3, r2, r3
 800b714:	637b      	str	r3, [r7, #52]	@ 0x34
 800b716:	e01e      	b.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b718:	4b61      	ldr	r3, [pc, #388]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b724:	d106      	bne.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800b726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b72c:	d102      	bne.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b72e:	4b5e      	ldr	r3, [pc, #376]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800b730:	637b      	str	r3, [r7, #52]	@ 0x34
 800b732:	e010      	b.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b734:	4b5a      	ldr	r3, [pc, #360]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b73c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b740:	d106      	bne.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800b742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b748:	d102      	bne.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b74a:	4b58      	ldr	r3, [pc, #352]	@ (800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800b74c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b74e:	e002      	b.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b750:	2300      	movs	r3, #0
 800b752:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b754:	e003      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800b756:	e002      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800b758:	2300      	movs	r3, #0
 800b75a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b75c:	bf00      	nop
          }
        }
        break;
 800b75e:	f000 bd6e 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800b762:	4b4f      	ldr	r3, [pc, #316]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b764:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b768:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b76c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b770:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b774:	d056      	beq.n	800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800b776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b778:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b77c:	f200 808b 	bhi.w	800b896 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b782:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b786:	d03e      	beq.n	800b806 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800b788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b78a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b78e:	f200 8082 	bhi.w	800b896 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b794:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b798:	d027      	beq.n	800b7ea <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800b79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b79c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b7a0:	d879      	bhi.n	800b896 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7a8:	d017      	beq.n	800b7da <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7b0:	d871      	bhi.n	800b896 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d004      	beq.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800b7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b7be:	d004      	beq.n	800b7ca <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800b7c0:	e069      	b.n	800b896 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b7c2:	f7fb fe0d 	bl	80073e0 <HAL_RCC_GetPCLK3Freq>
 800b7c6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b7c8:	e068      	b.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7ca:	f107 0314 	add.w	r3, r7, #20
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7fd ff12 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b7d8:	e060      	b.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7da:	f107 0308 	add.w	r3, r7, #8
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fe f876 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b7e8:	e058      	b.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b7ea:	4b2d      	ldr	r3, [pc, #180]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b7ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b7f0:	f003 0302 	and.w	r3, r3, #2
 800b7f4:	2b02      	cmp	r3, #2
 800b7f6:	d103      	bne.n	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800b7f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7fc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b7fe:	e04d      	b.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800b800:	2300      	movs	r3, #0
 800b802:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b804:	e04a      	b.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b806:	4b26      	ldr	r3, [pc, #152]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b80c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b810:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b814:	d103      	bne.n	800b81e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800b816:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b81a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b81c:	e03e      	b.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800b81e:	2300      	movs	r3, #0
 800b820:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b822:	e03b      	b.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b824:	4b1e      	ldr	r3, [pc, #120]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b82a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b82e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b830:	4b1b      	ldr	r3, [pc, #108]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f003 0302 	and.w	r3, r3, #2
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d10c      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800b83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d109      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b842:	4b17      	ldr	r3, [pc, #92]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	08db      	lsrs	r3, r3, #3
 800b848:	f003 0303 	and.w	r3, r3, #3
 800b84c:	4a15      	ldr	r2, [pc, #84]	@ (800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800b84e:	fa22 f303 	lsr.w	r3, r2, r3
 800b852:	637b      	str	r3, [r7, #52]	@ 0x34
 800b854:	e01e      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b856:	4b12      	ldr	r3, [pc, #72]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b85e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b862:	d106      	bne.n	800b872 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800b864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b86a:	d102      	bne.n	800b872 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b86c:	4b0e      	ldr	r3, [pc, #56]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800b86e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b870:	e010      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b872:	4b0b      	ldr	r3, [pc, #44]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b87a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b87e:	d106      	bne.n	800b88e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800b880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b882:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b886:	d102      	bne.n	800b88e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b888:	4b08      	ldr	r3, [pc, #32]	@ (800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800b88a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b88c:	e002      	b.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b88e:	2300      	movs	r3, #0
 800b890:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b892:	e003      	b.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800b894:	e002      	b.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800b896:	2300      	movs	r3, #0
 800b898:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b89a:	bf00      	nop
          }
        }
        break;
 800b89c:	f000 bccf 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b8a0:	44020c00 	.word	0x44020c00
 800b8a4:	03d09000 	.word	0x03d09000
 800b8a8:	003d0900 	.word	0x003d0900
 800b8ac:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800b8b0:	4b9e      	ldr	r3, [pc, #632]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b8b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b8b6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b8ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8c2:	d056      	beq.n	800b972 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800b8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8ca:	f200 808b 	bhi.w	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8d4:	d03e      	beq.n	800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8dc:	f200 8082 	bhi.w	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b8e6:	d027      	beq.n	800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b8ee:	d879      	bhi.n	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8f6:	d017      	beq.n	800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800b8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8fe:	d871      	bhi.n	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b902:	2b00      	cmp	r3, #0
 800b904:	d004      	beq.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800b906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b908:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b90c:	d004      	beq.n	800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800b90e:	e069      	b.n	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b910:	f7fb fd66 	bl	80073e0 <HAL_RCC_GetPCLK3Freq>
 800b914:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b916:	e068      	b.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b918:	f107 0314 	add.w	r3, r7, #20
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fd fe6b 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b926:	e060      	b.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b928:	f107 0308 	add.w	r3, r7, #8
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7fd ffcf 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b936:	e058      	b.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b938:	4b7c      	ldr	r3, [pc, #496]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b93a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b93e:	f003 0302 	and.w	r3, r3, #2
 800b942:	2b02      	cmp	r3, #2
 800b944:	d103      	bne.n	800b94e <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800b946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b94a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b94c:	e04d      	b.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b94e:	2300      	movs	r3, #0
 800b950:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b952:	e04a      	b.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b954:	4b75      	ldr	r3, [pc, #468]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b95a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b95e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b962:	d103      	bne.n	800b96c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800b964:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b968:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b96a:	e03e      	b.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b96c:	2300      	movs	r3, #0
 800b96e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b970:	e03b      	b.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b972:	4b6e      	ldr	r3, [pc, #440]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b978:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b97c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b97e:	4b6b      	ldr	r3, [pc, #428]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f003 0302 	and.w	r3, r3, #2
 800b986:	2b02      	cmp	r3, #2
 800b988:	d10c      	bne.n	800b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800b98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d109      	bne.n	800b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b990:	4b66      	ldr	r3, [pc, #408]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	08db      	lsrs	r3, r3, #3
 800b996:	f003 0303 	and.w	r3, r3, #3
 800b99a:	4a65      	ldr	r2, [pc, #404]	@ (800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b99c:	fa22 f303 	lsr.w	r3, r2, r3
 800b9a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9a2:	e01e      	b.n	800b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9a4:	4b61      	ldr	r3, [pc, #388]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b9ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9b0:	d106      	bne.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800b9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9b8:	d102      	bne.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b9ba:	4b5e      	ldr	r3, [pc, #376]	@ (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800b9bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9be:	e010      	b.n	800b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b9c0:	4b5a      	ldr	r3, [pc, #360]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9cc:	d106      	bne.n	800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800b9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9d4:	d102      	bne.n	800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b9d6:	4b58      	ldr	r3, [pc, #352]	@ (800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b9d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9da:	e002      	b.n	800b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b9e0:	e003      	b.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800b9e2:	e002      	b.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b9e8:	bf00      	nop
          }
        }
        break;
 800b9ea:	f000 bc28 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b9ee:	4b4f      	ldr	r3, [pc, #316]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b9f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b9f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9f8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800b9fa:	4b4c      	ldr	r3, [pc, #304]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba06:	d106      	bne.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800ba08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d103      	bne.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800ba0e:	4b4a      	ldr	r3, [pc, #296]	@ (800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800ba10:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800ba12:	f000 bc14 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800ba16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba1c:	d108      	bne.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba1e:	f107 0320 	add.w	r3, r7, #32
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7fd fc7c 	bl	8009320 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba2c:	f000 bc07 	b.w	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800ba30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba36:	d107      	bne.n	800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba38:	f107 0314 	add.w	r3, r7, #20
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fd fddb 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba46:	e3fa      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba4c:	e3f7      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800ba4e:	4b37      	ldr	r3, [pc, #220]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ba50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba54:	f003 0307 	and.w	r3, r3, #7
 800ba58:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba5c:	2b04      	cmp	r3, #4
 800ba5e:	d861      	bhi.n	800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800ba60:	a201      	add	r2, pc, #4	@ (adr r2, 800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800ba62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba66:	bf00      	nop
 800ba68:	0800ba7d 	.word	0x0800ba7d
 800ba6c:	0800ba8d 	.word	0x0800ba8d
 800ba70:	0800ba9d 	.word	0x0800ba9d
 800ba74:	0800baad 	.word	0x0800baad
 800ba78:	0800bab3 	.word	0x0800bab3
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba7c:	f107 0320 	add.w	r3, r7, #32
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fd fc4d 	bl	8009320 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba88:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba8a:	e04e      	b.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba8c:	f107 0314 	add.w	r3, r7, #20
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7fd fdb1 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba9a:	e046      	b.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba9c:	f107 0308 	add.w	r3, r7, #8
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7fd ff15 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800baaa:	e03e      	b.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800baac:	4b23      	ldr	r3, [pc, #140]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800baae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bab0:	e03b      	b.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bab2:	4b1e      	ldr	r3, [pc, #120]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bab4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bab8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800babc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800babe:	4b1b      	ldr	r3, [pc, #108]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f003 0302 	and.w	r3, r3, #2
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	d10c      	bne.n	800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800baca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d109      	bne.n	800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bad0:	4b16      	ldr	r3, [pc, #88]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	08db      	lsrs	r3, r3, #3
 800bad6:	f003 0303 	and.w	r3, r3, #3
 800bada:	4a15      	ldr	r2, [pc, #84]	@ (800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800badc:	fa22 f303 	lsr.w	r3, r2, r3
 800bae0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bae2:	e01e      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bae4:	4b11      	ldr	r3, [pc, #68]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800baec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800baf0:	d106      	bne.n	800bb00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800baf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baf8:	d102      	bne.n	800bb00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bafa:	4b0e      	ldr	r3, [pc, #56]	@ (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800bafc:	637b      	str	r3, [r7, #52]	@ 0x34
 800bafe:	e010      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb00:	4b0a      	ldr	r3, [pc, #40]	@ (800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb0c:	d106      	bne.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800bb0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb14:	d102      	bne.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bb16:	4b08      	ldr	r3, [pc, #32]	@ (800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800bb18:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb1a:	e002      	b.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bb20:	e003      	b.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800bb22:	e002      	b.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800bb24:	2300      	movs	r3, #0
 800bb26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bb28:	bf00      	nop
          }
        }
        break;
 800bb2a:	e388      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bb2c:	44020c00 	.word	0x44020c00
 800bb30:	03d09000 	.word	0x03d09000
 800bb34:	003d0900 	.word	0x003d0900
 800bb38:	007a1200 	.word	0x007a1200
 800bb3c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800bb40:	4ba9      	ldr	r3, [pc, #676]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bb42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb4a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4e:	2b20      	cmp	r3, #32
 800bb50:	f200 809a 	bhi.w	800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800bb54:	a201      	add	r2, pc, #4	@ (adr r2, 800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800bb56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5a:	bf00      	nop
 800bb5c:	0800bbe1 	.word	0x0800bbe1
 800bb60:	0800bc89 	.word	0x0800bc89
 800bb64:	0800bc89 	.word	0x0800bc89
 800bb68:	0800bc89 	.word	0x0800bc89
 800bb6c:	0800bc89 	.word	0x0800bc89
 800bb70:	0800bc89 	.word	0x0800bc89
 800bb74:	0800bc89 	.word	0x0800bc89
 800bb78:	0800bc89 	.word	0x0800bc89
 800bb7c:	0800bbf1 	.word	0x0800bbf1
 800bb80:	0800bc89 	.word	0x0800bc89
 800bb84:	0800bc89 	.word	0x0800bc89
 800bb88:	0800bc89 	.word	0x0800bc89
 800bb8c:	0800bc89 	.word	0x0800bc89
 800bb90:	0800bc89 	.word	0x0800bc89
 800bb94:	0800bc89 	.word	0x0800bc89
 800bb98:	0800bc89 	.word	0x0800bc89
 800bb9c:	0800bc01 	.word	0x0800bc01
 800bba0:	0800bc89 	.word	0x0800bc89
 800bba4:	0800bc89 	.word	0x0800bc89
 800bba8:	0800bc89 	.word	0x0800bc89
 800bbac:	0800bc89 	.word	0x0800bc89
 800bbb0:	0800bc89 	.word	0x0800bc89
 800bbb4:	0800bc89 	.word	0x0800bc89
 800bbb8:	0800bc89 	.word	0x0800bc89
 800bbbc:	0800bc11 	.word	0x0800bc11
 800bbc0:	0800bc89 	.word	0x0800bc89
 800bbc4:	0800bc89 	.word	0x0800bc89
 800bbc8:	0800bc89 	.word	0x0800bc89
 800bbcc:	0800bc89 	.word	0x0800bc89
 800bbd0:	0800bc89 	.word	0x0800bc89
 800bbd4:	0800bc89 	.word	0x0800bc89
 800bbd8:	0800bc89 	.word	0x0800bc89
 800bbdc:	0800bc17 	.word	0x0800bc17
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbe0:	f107 0320 	add.w	r3, r7, #32
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fd fb9b 	bl	8009320 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bbee:	e04e      	b.n	800bc8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbf0:	f107 0314 	add.w	r3, r7, #20
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7fd fcff 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bbfe:	e046      	b.n	800bc8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc00:	f107 0308 	add.w	r3, r7, #8
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7fd fe63 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bc0e:	e03e      	b.n	800bc8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800bc10:	4b76      	ldr	r3, [pc, #472]	@ (800bdec <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800bc12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bc14:	e03b      	b.n	800bc8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc16:	4b74      	ldr	r3, [pc, #464]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bc18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bc1c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bc20:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc22:	4b71      	ldr	r3, [pc, #452]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f003 0302 	and.w	r3, r3, #2
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d10c      	bne.n	800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800bc2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d109      	bne.n	800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bc34:	4b6c      	ldr	r3, [pc, #432]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	08db      	lsrs	r3, r3, #3
 800bc3a:	f003 0303 	and.w	r3, r3, #3
 800bc3e:	4a6c      	ldr	r2, [pc, #432]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800bc40:	fa22 f303 	lsr.w	r3, r2, r3
 800bc44:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc46:	e01e      	b.n	800bc86 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc48:	4b67      	ldr	r3, [pc, #412]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc54:	d106      	bne.n	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800bc56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc5c:	d102      	bne.n	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bc5e:	4b65      	ldr	r3, [pc, #404]	@ (800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800bc60:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc62:	e010      	b.n	800bc86 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc64:	4b60      	ldr	r3, [pc, #384]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc70:	d106      	bne.n	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800bc72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc78:	d102      	bne.n	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bc7a:	4b5f      	ldr	r3, [pc, #380]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800bc7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc7e:	e002      	b.n	800bc86 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bc80:	2300      	movs	r3, #0
 800bc82:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bc84:	e003      	b.n	800bc8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800bc86:	e002      	b.n	800bc8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bc8c:	bf00      	nop
          }
        }
        break;
 800bc8e:	e2d6      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800bc90:	4b55      	ldr	r3, [pc, #340]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bc92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc96:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800bc9a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bca2:	d031      	beq.n	800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800bca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcaa:	d866      	bhi.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800bcac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcae:	2bc0      	cmp	r3, #192	@ 0xc0
 800bcb0:	d027      	beq.n	800bd02 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800bcb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb4:	2bc0      	cmp	r3, #192	@ 0xc0
 800bcb6:	d860      	bhi.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcba:	2b80      	cmp	r3, #128	@ 0x80
 800bcbc:	d019      	beq.n	800bcf2 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800bcbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc0:	2b80      	cmp	r3, #128	@ 0x80
 800bcc2:	d85a      	bhi.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d003      	beq.n	800bcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800bcca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bccc:	2b40      	cmp	r3, #64	@ 0x40
 800bcce:	d008      	beq.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800bcd0:	e053      	b.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bcd2:	f107 0320 	add.w	r3, r7, #32
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7fd fb22 	bl	8009320 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcde:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bce0:	e04e      	b.n	800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bce2:	f107 0314 	add.w	r3, r7, #20
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fd fc86 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bcf0:	e046      	b.n	800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcf2:	f107 0308 	add.w	r3, r7, #8
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fd fdea 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bd00:	e03e      	b.n	800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800bd02:	4b3a      	ldr	r3, [pc, #232]	@ (800bdec <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800bd04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bd06:	e03b      	b.n	800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd08:	4b37      	ldr	r3, [pc, #220]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bd0e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bd12:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd14:	4b34      	ldr	r3, [pc, #208]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f003 0302 	and.w	r3, r3, #2
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d10c      	bne.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800bd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d109      	bne.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bd26:	4b30      	ldr	r3, [pc, #192]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	08db      	lsrs	r3, r3, #3
 800bd2c:	f003 0303 	and.w	r3, r3, #3
 800bd30:	4a2f      	ldr	r2, [pc, #188]	@ (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800bd32:	fa22 f303 	lsr.w	r3, r2, r3
 800bd36:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd38:	e01e      	b.n	800bd78 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd3a:	4b2b      	ldr	r3, [pc, #172]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bd42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd46:	d106      	bne.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800bd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd4e:	d102      	bne.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bd50:	4b28      	ldr	r3, [pc, #160]	@ (800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800bd52:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd54:	e010      	b.n	800bd78 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd56:	4b24      	ldr	r3, [pc, #144]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd62:	d106      	bne.n	800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800bd64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd6a:	d102      	bne.n	800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bd6c:	4b22      	ldr	r3, [pc, #136]	@ (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800bd6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd70:	e002      	b.n	800bd78 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bd72:	2300      	movs	r3, #0
 800bd74:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bd76:	e003      	b.n	800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800bd78:	e002      	b.n	800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bd7e:	bf00      	nop
          }
        }
        break;
 800bd80:	e25d      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800bd82:	4b19      	ldr	r3, [pc, #100]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bd88:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800bd8c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d103      	bne.n	800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800bd94:	f7fb fb0e 	bl	80073b4 <HAL_RCC_GetPCLK2Freq>
 800bd98:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800bd9a:	e250      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800bd9c:	4b12      	ldr	r3, [pc, #72]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bda4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bda8:	d10b      	bne.n	800bdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800bdaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdb0:	d107      	bne.n	800bdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdb2:	f107 0314 	add.w	r3, r7, #20
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fd fc1e 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdc0:	e04f      	b.n	800be62 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800bdc2:	4b09      	ldr	r3, [pc, #36]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bdca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdce:	d115      	bne.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800bdd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bdd6:	d111      	bne.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdd8:	f107 0308 	add.w	r3, r7, #8
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fd fd77 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bde6:	e03c      	b.n	800be62 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800bde8:	44020c00 	.word	0x44020c00
 800bdec:	00bb8000 	.word	0x00bb8000
 800bdf0:	03d09000 	.word	0x03d09000
 800bdf4:	003d0900 	.word	0x003d0900
 800bdf8:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800bdfc:	4b94      	ldr	r3, [pc, #592]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f003 0302 	and.w	r3, r3, #2
 800be04:	2b02      	cmp	r3, #2
 800be06:	d10d      	bne.n	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800be08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be0a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800be0e:	d109      	bne.n	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800be10:	4b8f      	ldr	r3, [pc, #572]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	08db      	lsrs	r3, r3, #3
 800be16:	f003 0303 	and.w	r3, r3, #3
 800be1a:	4a8e      	ldr	r2, [pc, #568]	@ (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800be1c:	fa22 f303 	lsr.w	r3, r2, r3
 800be20:	637b      	str	r3, [r7, #52]	@ 0x34
 800be22:	e01e      	b.n	800be62 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800be24:	4b8a      	ldr	r3, [pc, #552]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be30:	d106      	bne.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800be32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800be38:	d102      	bne.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800be3a:	4b87      	ldr	r3, [pc, #540]	@ (800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800be3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800be3e:	e010      	b.n	800be62 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800be40:	4b83      	ldr	r3, [pc, #524]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be4c:	d106      	bne.n	800be5c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800be4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be50:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800be54:	d102      	bne.n	800be5c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800be56:	4b81      	ldr	r3, [pc, #516]	@ (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800be58:	637b      	str	r3, [r7, #52]	@ 0x34
 800be5a:	e002      	b.n	800be62 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800be5c:	2300      	movs	r3, #0
 800be5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800be60:	e1ed      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800be62:	e1ec      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800be64:	4b7a      	ldr	r3, [pc, #488]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800be66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800be6a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800be6e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800be70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be72:	2b00      	cmp	r3, #0
 800be74:	d103      	bne.n	800be7e <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800be76:	f7fb fab3 	bl	80073e0 <HAL_RCC_GetPCLK3Freq>
 800be7a:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800be7c:	e1df      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800be7e:	4b74      	ldr	r3, [pc, #464]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be8a:	d10b      	bne.n	800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800be8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be92:	d107      	bne.n	800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be94:	f107 0314 	add.w	r3, r7, #20
 800be98:	4618      	mov	r0, r3
 800be9a:	f7fd fbad 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bea2:	e045      	b.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800bea4:	4b6a      	ldr	r3, [pc, #424]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800beac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800beb0:	d10b      	bne.n	800beca <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800beb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800beb8:	d107      	bne.n	800beca <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beba:	f107 0308 	add.w	r3, r7, #8
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fd fd06 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bec8:	e032      	b.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800beca:	4b61      	ldr	r3, [pc, #388]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f003 0302 	and.w	r3, r3, #2
 800bed2:	2b02      	cmp	r3, #2
 800bed4:	d10d      	bne.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800bed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bedc:	d109      	bne.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bede:	4b5c      	ldr	r3, [pc, #368]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	08db      	lsrs	r3, r3, #3
 800bee4:	f003 0303 	and.w	r3, r3, #3
 800bee8:	4a5a      	ldr	r2, [pc, #360]	@ (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800beea:	fa22 f303 	lsr.w	r3, r2, r3
 800beee:	637b      	str	r3, [r7, #52]	@ 0x34
 800bef0:	e01e      	b.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800bef2:	4b57      	ldr	r3, [pc, #348]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800befa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800befe:	d106      	bne.n	800bf0e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800bf00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf06:	d102      	bne.n	800bf0e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800bf08:	4b53      	ldr	r3, [pc, #332]	@ (800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800bf0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf0c:	e010      	b.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800bf0e:	4b50      	ldr	r3, [pc, #320]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf1a:	d106      	bne.n	800bf2a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800bf1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf1e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800bf22:	d102      	bne.n	800bf2a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800bf24:	4b4d      	ldr	r3, [pc, #308]	@ (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800bf26:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf28:	e002      	b.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf2e:	e186      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bf30:	e185      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bf32:	4b47      	ldr	r3, [pc, #284]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bf34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf38:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800bf3c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800bf3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d103      	bne.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800bf44:	f7fb fa36 	bl	80073b4 <HAL_RCC_GetPCLK2Freq>
 800bf48:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800bf4a:	e178      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800bf4c:	4b40      	ldr	r3, [pc, #256]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf58:	d10b      	bne.n	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800bf5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf60:	d107      	bne.n	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf62:	f107 0314 	add.w	r3, r7, #20
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fd fb46 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf70:	e045      	b.n	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800bf72:	4b37      	ldr	r3, [pc, #220]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf7e:	d10b      	bne.n	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800bf80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf86:	d107      	bne.n	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf88:	f107 0308 	add.w	r3, r7, #8
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7fd fc9f 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf96:	e032      	b.n	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800bf98:	4b2d      	ldr	r3, [pc, #180]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f003 0302 	and.w	r3, r3, #2
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	d10d      	bne.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800bfa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800bfaa:	d109      	bne.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bfac:	4b28      	ldr	r3, [pc, #160]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	08db      	lsrs	r3, r3, #3
 800bfb2:	f003 0303 	and.w	r3, r3, #3
 800bfb6:	4a27      	ldr	r2, [pc, #156]	@ (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800bfb8:	fa22 f303 	lsr.w	r3, r2, r3
 800bfbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfbe:	e01e      	b.n	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800bfc0:	4b23      	ldr	r3, [pc, #140]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bfc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfcc:	d106      	bne.n	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800bfce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bfd4:	d102      	bne.n	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800bfd6:	4b20      	ldr	r3, [pc, #128]	@ (800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800bfd8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfda:	e010      	b.n	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800bfdc:	4b1c      	ldr	r3, [pc, #112]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfe4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bfe8:	d106      	bne.n	800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800bfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfec:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800bff0:	d102      	bne.n	800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800bff2:	4b1a      	ldr	r3, [pc, #104]	@ (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800bff4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bff6:	e002      	b.n	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800bff8:	2300      	movs	r3, #0
 800bffa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bffc:	e11f      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bffe:	e11e      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c000:	4b13      	ldr	r3, [pc, #76]	@ (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c002:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c006:	f003 0303 	and.w	r3, r3, #3
 800c00a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c00e:	2b03      	cmp	r3, #3
 800c010:	d85f      	bhi.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800c012:	a201      	add	r2, pc, #4	@ (adr r2, 800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800c014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c018:	0800c029 	.word	0x0800c029
 800c01c:	0800c031 	.word	0x0800c031
 800c020:	0800c041 	.word	0x0800c041
 800c024:	0800c061 	.word	0x0800c061

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800c028:	f7fb f992 	bl	8007350 <HAL_RCC_GetHCLKFreq>
 800c02c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800c02e:	e053      	b.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c030:	f107 0320 	add.w	r3, r7, #32
 800c034:	4618      	mov	r0, r3
 800c036:	f7fd f973 	bl	8009320 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c03e:	e04b      	b.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c040:	f107 0314 	add.w	r3, r7, #20
 800c044:	4618      	mov	r0, r3
 800c046:	f7fd fad7 	bl	80095f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c04e:	e043      	b.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800c050:	44020c00 	.word	0x44020c00
 800c054:	03d09000 	.word	0x03d09000
 800c058:	003d0900 	.word	0x003d0900
 800c05c:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c060:	4b79      	ldr	r3, [pc, #484]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c062:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c066:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c06a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c06c:	4b76      	ldr	r3, [pc, #472]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f003 0302 	and.w	r3, r3, #2
 800c074:	2b02      	cmp	r3, #2
 800c076:	d10c      	bne.n	800c092 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800c078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d109      	bne.n	800c092 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c07e:	4b72      	ldr	r3, [pc, #456]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	08db      	lsrs	r3, r3, #3
 800c084:	f003 0303 	and.w	r3, r3, #3
 800c088:	4a70      	ldr	r2, [pc, #448]	@ (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800c08a:	fa22 f303 	lsr.w	r3, r2, r3
 800c08e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c090:	e01e      	b.n	800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c092:	4b6d      	ldr	r3, [pc, #436]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c09a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c09e:	d106      	bne.n	800c0ae <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800c0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0a6:	d102      	bne.n	800c0ae <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c0a8:	4b69      	ldr	r3, [pc, #420]	@ (800c250 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800c0aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0ac:	e010      	b.n	800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0ae:	4b66      	ldr	r3, [pc, #408]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c0b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0ba:	d106      	bne.n	800c0ca <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800c0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c0c2:	d102      	bne.n	800c0ca <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c0c4:	4b63      	ldr	r3, [pc, #396]	@ (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800c0c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0c8:	e002      	b.n	800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800c0ce:	e003      	b.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800c0d0:	e002      	b.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c0d6:	bf00      	nop
          }
        }
        break;
 800c0d8:	e0b1      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800c0da:	4b5b      	ldr	r3, [pc, #364]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c0dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c0e0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c0e4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800c0e6:	4b58      	ldr	r3, [pc, #352]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c0e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c0ec:	f003 0302 	and.w	r3, r3, #2
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	d106      	bne.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800c0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d103      	bne.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800c0fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c0fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800c100:	e01f      	b.n	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800c102:	4b51      	ldr	r3, [pc, #324]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c108:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c10c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c110:	d106      	bne.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800c112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c114:	2b40      	cmp	r3, #64	@ 0x40
 800c116:	d103      	bne.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800c118:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c11c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c11e:	e010      	b.n	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800c120:	4b49      	ldr	r3, [pc, #292]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c12c:	d106      	bne.n	800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800c12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c130:	2b80      	cmp	r3, #128	@ 0x80
 800c132:	d103      	bne.n	800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800c134:	f248 0312 	movw	r3, #32786	@ 0x8012
 800c138:	637b      	str	r3, [r7, #52]	@ 0x34
 800c13a:	e002      	b.n	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800c13c:	2300      	movs	r3, #0
 800c13e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800c140:	e07d      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c142:	e07c      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c144:	4b40      	ldr	r3, [pc, #256]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c14a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c14e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c150:	4b3d      	ldr	r3, [pc, #244]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c15c:	d105      	bne.n	800c16a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800c15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c160:	2b00      	cmp	r3, #0
 800c162:	d102      	bne.n	800c16a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800c164:	4b3c      	ldr	r3, [pc, #240]	@ (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800c166:	637b      	str	r3, [r7, #52]	@ 0x34
 800c168:	e031      	b.n	800c1ce <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800c16a:	4b37      	ldr	r3, [pc, #220]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c172:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c176:	d10a      	bne.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800c178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c17a:	2b10      	cmp	r3, #16
 800c17c:	d107      	bne.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c17e:	f107 0320 	add.w	r3, r7, #32
 800c182:	4618      	mov	r0, r3
 800c184:	f7fd f8cc 	bl	8009320 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c18c:	e01f      	b.n	800c1ce <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800c18e:	4b2e      	ldr	r3, [pc, #184]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c194:	f003 0302 	and.w	r3, r3, #2
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d106      	bne.n	800c1aa <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800c19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c19e:	2b20      	cmp	r3, #32
 800c1a0:	d103      	bne.n	800c1aa <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800c1a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c1a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1a8:	e011      	b.n	800c1ce <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800c1aa:	4b27      	ldr	r3, [pc, #156]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c1ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c1b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c1b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1b8:	d106      	bne.n	800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1bc:	2b30      	cmp	r3, #48	@ 0x30
 800c1be:	d103      	bne.n	800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800c1c0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c1c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1c6:	e002      	b.n	800c1ce <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800c1cc:	e037      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c1ce:	e036      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800c1d0:	4b1d      	ldr	r3, [pc, #116]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c1d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c1d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c1da:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1de:	2b10      	cmp	r3, #16
 800c1e0:	d107      	bne.n	800c1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1e2:	f107 0320 	add.w	r3, r7, #32
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fd f89a 	bl	8009320 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ee:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c1f0:	e025      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800c1f2:	4b15      	ldr	r3, [pc, #84]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c1fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1fe:	d10a      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800c200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c202:	2b20      	cmp	r3, #32
 800c204:	d107      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c206:	f107 0308 	add.w	r3, r7, #8
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fd fb60 	bl	80098d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	637b      	str	r3, [r7, #52]	@ 0x34
 800c214:	e00f      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800c216:	4b0c      	ldr	r3, [pc, #48]	@ (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c21e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c222:	d105      	bne.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800c224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c226:	2b30      	cmp	r3, #48	@ 0x30
 800c228:	d102      	bne.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800c22a:	4b0b      	ldr	r3, [pc, #44]	@ (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800c22c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c22e:	e002      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800c230:	2300      	movs	r3, #0
 800c232:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800c234:	e003      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c236:	e002      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800c238:	2300      	movs	r3, #0
 800c23a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c23c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800c23e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c240:	4618      	mov	r0, r3
 800c242:	373c      	adds	r7, #60	@ 0x3c
 800c244:	46bd      	mov	sp, r7
 800c246:	bd90      	pop	{r4, r7, pc}
 800c248:	44020c00 	.word	0x44020c00
 800c24c:	03d09000 	.word	0x03d09000
 800c250:	003d0900 	.word	0x003d0900
 800c254:	007a1200 	.word	0x007a1200
 800c258:	02dc6c00 	.word	0x02dc6c00

0800c25c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800c264:	4b48      	ldr	r3, [pc, #288]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a47      	ldr	r2, [pc, #284]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c26a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c26e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c270:	f7f6 ff86 	bl	8003180 <HAL_GetTick>
 800c274:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c276:	e008      	b.n	800c28a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c278:	f7f6 ff82 	bl	8003180 <HAL_GetTick>
 800c27c:	4602      	mov	r2, r0
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	1ad3      	subs	r3, r2, r3
 800c282:	2b02      	cmp	r3, #2
 800c284:	d901      	bls.n	800c28a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c286:	2303      	movs	r3, #3
 800c288:	e07a      	b.n	800c380 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c28a:	4b3f      	ldr	r3, [pc, #252]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1f0      	bne.n	800c278 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c296:	4b3c      	ldr	r3, [pc, #240]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c29a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c29e:	f023 0303 	bic.w	r3, r3, #3
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	6811      	ldr	r1, [r2, #0]
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	6852      	ldr	r2, [r2, #4]
 800c2aa:	0212      	lsls	r2, r2, #8
 800c2ac:	430a      	orrs	r2, r1
 800c2ae:	4936      	ldr	r1, [pc, #216]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	3b01      	subs	r3, #1
 800c2c4:	025b      	lsls	r3, r3, #9
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	431a      	orrs	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	691b      	ldr	r3, [r3, #16]
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	041b      	lsls	r3, r3, #16
 800c2d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c2d6:	431a      	orrs	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	695b      	ldr	r3, [r3, #20]
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	061b      	lsls	r3, r3, #24
 800c2e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c2e4:	4928      	ldr	r1, [pc, #160]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c2ea:	4b27      	ldr	r3, [pc, #156]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c2ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ee:	f023 020c 	bic.w	r2, r3, #12
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	699b      	ldr	r3, [r3, #24]
 800c2f6:	4924      	ldr	r1, [pc, #144]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800c2fc:	4b22      	ldr	r3, [pc, #136]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c2fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c300:	f023 0220 	bic.w	r2, r3, #32
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	69db      	ldr	r3, [r3, #28]
 800c308:	491f      	ldr	r1, [pc, #124]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c30a:	4313      	orrs	r3, r2
 800c30c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c30e:	4b1e      	ldr	r3, [pc, #120]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c316:	491c      	ldr	r1, [pc, #112]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c318:	4313      	orrs	r3, r2
 800c31a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800c31c:	4b1a      	ldr	r3, [pc, #104]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c320:	4a19      	ldr	r2, [pc, #100]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c322:	f023 0310 	bic.w	r3, r3, #16
 800c326:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800c328:	4b17      	ldr	r3, [pc, #92]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c32a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c32c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c330:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	6a12      	ldr	r2, [r2, #32]
 800c338:	00d2      	lsls	r2, r2, #3
 800c33a:	4913      	ldr	r1, [pc, #76]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c33c:	4313      	orrs	r3, r2
 800c33e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800c340:	4b11      	ldr	r3, [pc, #68]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c344:	4a10      	ldr	r2, [pc, #64]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c346:	f043 0310 	orr.w	r3, r3, #16
 800c34a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800c34c:	4b0e      	ldr	r3, [pc, #56]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a0d      	ldr	r2, [pc, #52]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c352:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c356:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c358:	f7f6 ff12 	bl	8003180 <HAL_GetTick>
 800c35c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c35e:	e008      	b.n	800c372 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c360:	f7f6 ff0e 	bl	8003180 <HAL_GetTick>
 800c364:	4602      	mov	r2, r0
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	1ad3      	subs	r3, r2, r3
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d901      	bls.n	800c372 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800c36e:	2303      	movs	r3, #3
 800c370:	e006      	b.n	800c380 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c372:	4b05      	ldr	r3, [pc, #20]	@ (800c388 <RCCEx_PLL2_Config+0x12c>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d0f0      	beq.n	800c360 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800c37e:	2300      	movs	r3, #0

}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	44020c00 	.word	0x44020c00

0800c38c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800c394:	4b48      	ldr	r3, [pc, #288]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a47      	ldr	r2, [pc, #284]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c39a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c39e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c3a0:	f7f6 feee 	bl	8003180 <HAL_GetTick>
 800c3a4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c3a6:	e008      	b.n	800c3ba <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c3a8:	f7f6 feea 	bl	8003180 <HAL_GetTick>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	2b02      	cmp	r3, #2
 800c3b4:	d901      	bls.n	800c3ba <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c3b6:	2303      	movs	r3, #3
 800c3b8:	e07a      	b.n	800c4b0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c3ba:	4b3f      	ldr	r3, [pc, #252]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1f0      	bne.n	800c3a8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c3c6:	4b3c      	ldr	r3, [pc, #240]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c3c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3ca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c3ce:	f023 0303 	bic.w	r3, r3, #3
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	6811      	ldr	r1, [r2, #0]
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	6852      	ldr	r2, [r2, #4]
 800c3da:	0212      	lsls	r2, r2, #8
 800c3dc:	430a      	orrs	r2, r1
 800c3de:	4936      	ldr	r1, [pc, #216]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	630b      	str	r3, [r1, #48]	@ 0x30
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	025b      	lsls	r3, r3, #9
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	431a      	orrs	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	691b      	ldr	r3, [r3, #16]
 800c3fe:	3b01      	subs	r3, #1
 800c400:	041b      	lsls	r3, r3, #16
 800c402:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c406:	431a      	orrs	r2, r3
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	695b      	ldr	r3, [r3, #20]
 800c40c:	3b01      	subs	r3, #1
 800c40e:	061b      	lsls	r3, r3, #24
 800c410:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c414:	4928      	ldr	r1, [pc, #160]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c416:	4313      	orrs	r3, r2
 800c418:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c41a:	4b27      	ldr	r3, [pc, #156]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c41c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c41e:	f023 020c 	bic.w	r2, r3, #12
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	4924      	ldr	r1, [pc, #144]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c428:	4313      	orrs	r3, r2
 800c42a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800c42c:	4b22      	ldr	r3, [pc, #136]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c42e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c430:	f023 0220 	bic.w	r2, r3, #32
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	69db      	ldr	r3, [r3, #28]
 800c438:	491f      	ldr	r1, [pc, #124]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c43a:	4313      	orrs	r3, r2
 800c43c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c43e:	4b1e      	ldr	r3, [pc, #120]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c446:	491c      	ldr	r1, [pc, #112]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c448:	4313      	orrs	r3, r2
 800c44a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800c44c:	4b1a      	ldr	r3, [pc, #104]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c44e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c450:	4a19      	ldr	r2, [pc, #100]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c452:	f023 0310 	bic.w	r3, r3, #16
 800c456:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800c458:	4b17      	ldr	r3, [pc, #92]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c45a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c45c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c460:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	6a12      	ldr	r2, [r2, #32]
 800c468:	00d2      	lsls	r2, r2, #3
 800c46a:	4913      	ldr	r1, [pc, #76]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c46c:	4313      	orrs	r3, r2
 800c46e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800c470:	4b11      	ldr	r3, [pc, #68]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c474:	4a10      	ldr	r2, [pc, #64]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c476:	f043 0310 	orr.w	r3, r3, #16
 800c47a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800c47c:	4b0e      	ldr	r3, [pc, #56]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a0d      	ldr	r2, [pc, #52]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c486:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c488:	f7f6 fe7a 	bl	8003180 <HAL_GetTick>
 800c48c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c48e:	e008      	b.n	800c4a2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c490:	f7f6 fe76 	bl	8003180 <HAL_GetTick>
 800c494:	4602      	mov	r2, r0
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	d901      	bls.n	800c4a2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800c49e:	2303      	movs	r3, #3
 800c4a0:	e006      	b.n	800c4b0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c4a2:	4b05      	ldr	r3, [pc, #20]	@ (800c4b8 <RCCEx_PLL3_Config+0x12c>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d0f0      	beq.n	800c490 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3710      	adds	r7, #16
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	44020c00 	.word	0x44020c00

0800c4bc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d101      	bne.n	800c4ce <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e08c      	b.n	800c5e8 <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	7a5b      	ldrb	r3, [r3, #9]
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d105      	bne.n	800c4e4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f7f5 fef2 	bl	80022c8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2202      	movs	r2, #2
 800c4e8:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f022 0204 	bic.w	r2, r2, #4
 800c4f8:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6859      	ldr	r1, [r3, #4]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	4b3b      	ldr	r3, [pc, #236]	@ (800c5f0 <HAL_RNG_Init+0x134>)
 800c504:	430b      	orrs	r3, r1
 800c506:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800c510:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4a37      	ldr	r2, [pc, #220]	@ (800c5f4 <HAL_RNG_Init+0x138>)
 800c518:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800c528:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c52a:	f7f6 fe29 	bl	8003180 <HAL_GetTick>
 800c52e:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800c530:	e016      	b.n	800c560 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c532:	f7f6 fe25 	bl	8003180 <HAL_GetTick>
 800c536:	4602      	mov	r2, r0
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	1ad3      	subs	r3, r2, r3
 800c53c:	2b04      	cmp	r3, #4
 800c53e:	d90f      	bls.n	800c560 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c54a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c54e:	d107      	bne.n	800c560 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2201      	movs	r2, #1
 800c554:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2202      	movs	r2, #2
 800c55a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800c55c:	2301      	movs	r3, #1
 800c55e:	e043      	b.n	800c5e8 <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c56a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c56e:	d0e0      	beq.n	800c532 <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f042 0204 	orr.w	r2, r2, #4
 800c57e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c58a:	2b40      	cmp	r3, #64	@ 0x40
 800c58c:	d104      	bne.n	800c598 <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2204      	movs	r2, #4
 800c592:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800c594:	2301      	movs	r3, #1
 800c596:	e027      	b.n	800c5e8 <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800c598:	f7f6 fdf2 	bl	8003180 <HAL_GetTick>
 800c59c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800c59e:	e015      	b.n	800c5cc <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c5a0:	f7f6 fdee 	bl	8003180 <HAL_GetTick>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	1ad3      	subs	r3, r2, r3
 800c5aa:	2b04      	cmp	r3, #4
 800c5ac:	d90e      	bls.n	800c5cc <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	f003 0301 	and.w	r3, r3, #1
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d007      	beq.n	800c5cc <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2204      	movs	r2, #4
 800c5c0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2202      	movs	r2, #2
 800c5c6:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e00d      	b.n	800c5e8 <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	f003 0301 	and.w	r3, r3, #1
 800c5d6:	2b01      	cmp	r3, #1
 800c5d8:	d1e2      	bne.n	800c5a0 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3710      	adds	r7, #16
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	40f00e00 	.word	0x40f00e00
 800c5f4:	0003af66 	.word	0x0003af66

0800c5f8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c602:	2300      	movs	r3, #0
 800c604:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	7a1b      	ldrb	r3, [r3, #8]
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d101      	bne.n	800c612 <HAL_RNG_GenerateRandomNumber+0x1a>
 800c60e:	2302      	movs	r3, #2
 800c610:	e068      	b.n	800c6e4 <HAL_RNG_GenerateRandomNumber+0xec>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2201      	movs	r2, #1
 800c616:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	7a5b      	ldrb	r3, [r3, #9]
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d157      	bne.n	800c6d2 <HAL_RNG_GenerateRandomNumber+0xda>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2202      	movs	r2, #2
 800c626:	725a      	strb	r2, [r3, #9]
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c632:	2b40      	cmp	r3, #64	@ 0x40
 800c634:	d10f      	bne.n	800c656 <HAL_RNG_GenerateRandomNumber+0x5e>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2208      	movs	r2, #8
 800c63a:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 f85f 	bl	800c700 <RNG_RecoverSeedError>
 800c642:	4603      	mov	r3, r0
 800c644:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800c646:	7bfb      	ldrb	r3, [r7, #15]
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d104      	bne.n	800c656 <HAL_RNG_GenerateRandomNumber+0x5e>
      {
        /* Update the error code */
        hrng->ErrorCode = HAL_RNG_ERROR_RECOVERSEED;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2220      	movs	r2, #32
 800c650:	60da      	str	r2, [r3, #12]
        return status;
 800c652:	7bfb      	ldrb	r3, [r7, #15]
 800c654:	e046      	b.n	800c6e4 <HAL_RNG_GenerateRandomNumber+0xec>
      }
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800c656:	f7f6 fd93 	bl	8003180 <HAL_GetTick>
 800c65a:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c65c:	e018      	b.n	800c690 <HAL_RNG_GenerateRandomNumber+0x98>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c65e:	f7f6 fd8f 	bl	8003180 <HAL_GetTick>
 800c662:	4602      	mov	r2, r0
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	1ad3      	subs	r3, r2, r3
 800c668:	2b04      	cmp	r3, #4
 800c66a:	d911      	bls.n	800c690 <HAL_RNG_GenerateRandomNumber+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	f003 0301 	and.w	r3, r3, #1
 800c676:	2b01      	cmp	r3, #1
 800c678:	d00a      	beq.n	800c690 <HAL_RNG_GenerateRandomNumber+0x98>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2201      	movs	r2, #1
 800c67e:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2202      	movs	r2, #2
 800c684:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2200      	movs	r2, #0
 800c68a:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800c68c:	2301      	movs	r3, #1
 800c68e:	e029      	b.n	800c6e4 <HAL_RNG_GenerateRandomNumber+0xec>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	f003 0301 	and.w	r3, r3, #1
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d1df      	bne.n	800c65e <HAL_RNG_GenerateRandomNumber+0x66>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	689a      	ldr	r2, [r3, #8]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	611a      	str	r2, [r3, #16]
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6b2:	2b40      	cmp	r3, #64	@ 0x40
 800c6b4:	d105      	bne.n	800c6c2 <HAL_RNG_GenerateRandomNumber+0xca>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2208      	movs	r2, #8
 800c6ba:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	73fb      	strb	r3, [r7, #15]
 800c6c0:	e003      	b.n	800c6ca <HAL_RNG_GenerateRandomNumber+0xd2>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	691a      	ldr	r2, [r3, #16]
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	601a      	str	r2, [r3, #0]
    }
    hrng->State = HAL_RNG_STATE_READY;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	725a      	strb	r2, [r3, #9]
 800c6d0:	e004      	b.n	800c6dc <HAL_RNG_GenerateRandomNumber+0xe4>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2204      	movs	r2, #4
 800c6d6:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	721a      	strb	r2, [r3, #8]

  return status;
 800c6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800c6f4:	bf00      	nop
 800c6f6:	370c      	adds	r7, #12
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c708:	2300      	movs	r3, #0
 800c70a:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	f003 0304 	and.w	r3, r3, #4
 800c716:	2b04      	cmp	r3, #4
 800c718:	d008      	beq.n	800c72c <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	685a      	ldr	r2, [r3, #4]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c728:	605a      	str	r2, [r3, #4]
 800c72a:	e05f      	b.n	800c7ec <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800c73a:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800c74a:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800c74c:	2304      	movs	r3, #4
 800c74e:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	3b01      	subs	r3, #1
 800c754:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d110      	bne.n	800c77e <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	f043 0202 	orr.w	r2, r3, #2
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f7ff ffb9 	bl	800c6ec <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800c77a:	2301      	movs	r3, #1
 800c77c:	e03d      	b.n	800c7fa <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c78c:	d0e0      	beq.n	800c750 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c798:	2b40      	cmp	r3, #64	@ 0x40
 800c79a:	d107      	bne.n	800c7ac <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	685a      	ldr	r2, [r3, #4]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c7aa:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800c7ac:	2304      	movs	r3, #4
 800c7ae:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d110      	bne.n	800c7de <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	f043 0202 	orr.w	r2, r3, #2
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f7ff ff89 	bl	800c6ec <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e00d      	b.n	800c7fa <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	f003 0304 	and.w	r3, r3, #4
 800c7e8:	2b04      	cmp	r3, #4
 800c7ea:	d0e1      	beq.n	800c7b0 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	f023 0208 	bic.w	r2, r3, #8
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800c7f8:	2300      	movs	r3, #0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
	...

0800c804 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c80c:	2301      	movs	r3, #1
 800c80e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d071      	beq.n	800c8fa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d106      	bne.n	800c830 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f7f5 fda4 	bl	8002378 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2202      	movs	r2, #2
 800c834:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c838:	4b32      	ldr	r3, [pc, #200]	@ (800c904 <HAL_RTC_Init+0x100>)
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	f003 0310 	and.w	r3, r3, #16
 800c840:	2b10      	cmp	r3, #16
 800c842:	d051      	beq.n	800c8e8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c844:	4b2f      	ldr	r3, [pc, #188]	@ (800c904 <HAL_RTC_Init+0x100>)
 800c846:	22ca      	movs	r2, #202	@ 0xca
 800c848:	625a      	str	r2, [r3, #36]	@ 0x24
 800c84a:	4b2e      	ldr	r3, [pc, #184]	@ (800c904 <HAL_RTC_Init+0x100>)
 800c84c:	2253      	movs	r2, #83	@ 0x53
 800c84e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 f9a3 	bl	800cb9c <RTC_EnterInitMode>
 800c856:	4603      	mov	r3, r0
 800c858:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c85a:	7bfb      	ldrb	r3, [r7, #15]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d13f      	bne.n	800c8e0 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c860:	4b28      	ldr	r3, [pc, #160]	@ (800c904 <HAL_RTC_Init+0x100>)
 800c862:	699b      	ldr	r3, [r3, #24]
 800c864:	4a27      	ldr	r2, [pc, #156]	@ (800c904 <HAL_RTC_Init+0x100>)
 800c866:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800c86a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c86e:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c870:	4b24      	ldr	r3, [pc, #144]	@ (800c904 <HAL_RTC_Init+0x100>)
 800c872:	699a      	ldr	r2, [r3, #24]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6859      	ldr	r1, [r3, #4]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	4319      	orrs	r1, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	699b      	ldr	r3, [r3, #24]
 800c882:	430b      	orrs	r3, r1
 800c884:	491f      	ldr	r1, [pc, #124]	@ (800c904 <HAL_RTC_Init+0x100>)
 800c886:	4313      	orrs	r3, r2
 800c888:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	68da      	ldr	r2, [r3, #12]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	041b      	lsls	r3, r3, #16
 800c894:	491b      	ldr	r1, [pc, #108]	@ (800c904 <HAL_RTC_Init+0x100>)
 800c896:	4313      	orrs	r3, r2
 800c898:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c89a:	4b1a      	ldr	r3, [pc, #104]	@ (800c904 <HAL_RTC_Init+0x100>)
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8aa:	430b      	orrs	r3, r1
 800c8ac:	4915      	ldr	r1, [pc, #84]	@ (800c904 <HAL_RTC_Init+0x100>)
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f9ae 	bl	800cc14 <RTC_ExitInitMode>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800c8bc:	7bfb      	ldrb	r3, [r7, #15]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d10e      	bne.n	800c8e0 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800c8c2:	4b10      	ldr	r3, [pc, #64]	@ (800c904 <HAL_RTC_Init+0x100>)
 800c8c4:	699b      	ldr	r3, [r3, #24]
 800c8c6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a19      	ldr	r1, [r3, #32]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	69db      	ldr	r3, [r3, #28]
 800c8d2:	4319      	orrs	r1, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	695b      	ldr	r3, [r3, #20]
 800c8d8:	430b      	orrs	r3, r1
 800c8da:	490a      	ldr	r1, [pc, #40]	@ (800c904 <HAL_RTC_Init+0x100>)
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8e0:	4b08      	ldr	r3, [pc, #32]	@ (800c904 <HAL_RTC_Init+0x100>)
 800c8e2:	22ff      	movs	r2, #255	@ 0xff
 800c8e4:	625a      	str	r2, [r3, #36]	@ 0x24
 800c8e6:	e001      	b.n	800c8ec <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d103      	bne.n	800c8fa <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800c8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3710      	adds	r7, #16
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	44007800 	.word	0x44007800

0800c908 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c908:	b590      	push	{r4, r7, lr}
 800c90a:	b087      	sub	sp, #28
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d101      	bne.n	800c922 <HAL_RTC_SetTime+0x1a>
 800c91e:	2302      	movs	r3, #2
 800c920:	e07e      	b.n	800ca20 <HAL_RTC_SetTime+0x118>
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2201      	movs	r2, #1
 800c926:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2202      	movs	r2, #2
 800c92e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c932:	4b3d      	ldr	r3, [pc, #244]	@ (800ca28 <HAL_RTC_SetTime+0x120>)
 800c934:	22ca      	movs	r2, #202	@ 0xca
 800c936:	625a      	str	r2, [r3, #36]	@ 0x24
 800c938:	4b3b      	ldr	r3, [pc, #236]	@ (800ca28 <HAL_RTC_SetTime+0x120>)
 800c93a:	2253      	movs	r2, #83	@ 0x53
 800c93c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	f000 f92c 	bl	800cb9c <RTC_EnterInitMode>
 800c944:	4603      	mov	r3, r0
 800c946:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c948:	7cfb      	ldrb	r3, [r7, #19]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d159      	bne.n	800ca02 <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800c94e:	4b36      	ldr	r3, [pc, #216]	@ (800ca28 <HAL_RTC_SetTime+0x120>)
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c95a:	d04d      	beq.n	800c9f8 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d125      	bne.n	800c9ae <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c962:	4b31      	ldr	r3, [pc, #196]	@ (800ca28 <HAL_RTC_SetTime+0x120>)
 800c964:	699b      	ldr	r3, [r3, #24]
 800c966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d102      	bne.n	800c974 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	2200      	movs	r2, #0
 800c972:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	4618      	mov	r0, r3
 800c97a:	f000 f989 	bl	800cc90 <RTC_ByteToBcd2>
 800c97e:	4603      	mov	r3, r0
 800c980:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	785b      	ldrb	r3, [r3, #1]
 800c986:	4618      	mov	r0, r3
 800c988:	f000 f982 	bl	800cc90 <RTC_ByteToBcd2>
 800c98c:	4603      	mov	r3, r0
 800c98e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c990:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	789b      	ldrb	r3, [r3, #2]
 800c996:	4618      	mov	r0, r3
 800c998:	f000 f97a 	bl	800cc90 <RTC_ByteToBcd2>
 800c99c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c99e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	78db      	ldrb	r3, [r3, #3]
 800c9a6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	617b      	str	r3, [r7, #20]
 800c9ac:	e017      	b.n	800c9de <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c9ae:	4b1e      	ldr	r3, [pc, #120]	@ (800ca28 <HAL_RTC_SetTime+0x120>)
 800c9b0:	699b      	ldr	r3, [r3, #24]
 800c9b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d102      	bne.n	800c9c0 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	785b      	ldrb	r3, [r3, #1]
 800c9ca:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9cc:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9d2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	78db      	ldrb	r3, [r3, #3]
 800c9d8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800c9de:	4a12      	ldr	r2, [pc, #72]	@ (800ca28 <HAL_RTC_SetTime+0x120>)
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800c9e6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800c9ea:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800c9ec:	4b0e      	ldr	r3, [pc, #56]	@ (800ca28 <HAL_RTC_SetTime+0x120>)
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	4a0d      	ldr	r2, [pc, #52]	@ (800ca28 <HAL_RTC_SetTime+0x120>)
 800c9f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c9f6:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f000 f90b 	bl	800cc14 <RTC_ExitInitMode>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca02:	4b09      	ldr	r3, [pc, #36]	@ (800ca28 <HAL_RTC_SetTime+0x120>)
 800ca04:	22ff      	movs	r2, #255	@ 0xff
 800ca06:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800ca08:	7cfb      	ldrb	r3, [r7, #19]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d103      	bne.n	800ca16 <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2201      	movs	r2, #1
 800ca12:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800ca1e:	7cfb      	ldrb	r3, [r7, #19]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	371c      	adds	r7, #28
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd90      	pop	{r4, r7, pc}
 800ca28:	44007800 	.word	0x44007800

0800ca2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ca2c:	b590      	push	{r4, r7, lr}
 800ca2e:	b087      	sub	sp, #28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d101      	bne.n	800ca46 <HAL_RTC_SetDate+0x1a>
 800ca42:	2302      	movs	r3, #2
 800ca44:	e071      	b.n	800cb2a <HAL_RTC_SetDate+0xfe>
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2202      	movs	r2, #2
 800ca52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d10e      	bne.n	800ca7a <HAL_RTC_SetDate+0x4e>
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	785b      	ldrb	r3, [r3, #1]
 800ca60:	f003 0310 	and.w	r3, r3, #16
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d008      	beq.n	800ca7a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	785b      	ldrb	r3, [r3, #1]
 800ca6c:	f023 0310 	bic.w	r3, r3, #16
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	330a      	adds	r3, #10
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d11c      	bne.n	800caba <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	78db      	ldrb	r3, [r3, #3]
 800ca84:	4618      	mov	r0, r3
 800ca86:	f000 f903 	bl	800cc90 <RTC_ByteToBcd2>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	785b      	ldrb	r3, [r3, #1]
 800ca92:	4618      	mov	r0, r3
 800ca94:	f000 f8fc 	bl	800cc90 <RTC_ByteToBcd2>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ca9c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	789b      	ldrb	r3, [r3, #2]
 800caa2:	4618      	mov	r0, r3
 800caa4:	f000 f8f4 	bl	800cc90 <RTC_ByteToBcd2>
 800caa8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800caaa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cab4:	4313      	orrs	r3, r2
 800cab6:	617b      	str	r3, [r7, #20]
 800cab8:	e00e      	b.n	800cad8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	78db      	ldrb	r3, [r3, #3]
 800cabe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	785b      	ldrb	r3, [r3, #1]
 800cac4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cac6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800cac8:	68ba      	ldr	r2, [r7, #8]
 800caca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cacc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cad4:	4313      	orrs	r3, r2
 800cad6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cad8:	4b16      	ldr	r3, [pc, #88]	@ (800cb34 <HAL_RTC_SetDate+0x108>)
 800cada:	22ca      	movs	r2, #202	@ 0xca
 800cadc:	625a      	str	r2, [r3, #36]	@ 0x24
 800cade:	4b15      	ldr	r3, [pc, #84]	@ (800cb34 <HAL_RTC_SetDate+0x108>)
 800cae0:	2253      	movs	r2, #83	@ 0x53
 800cae2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f000 f859 	bl	800cb9c <RTC_EnterInitMode>
 800caea:	4603      	mov	r3, r0
 800caec:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800caee:	7cfb      	ldrb	r3, [r7, #19]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d10b      	bne.n	800cb0c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800caf4:	4a0f      	ldr	r2, [pc, #60]	@ (800cb34 <HAL_RTC_SetDate+0x108>)
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cafc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cb00:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cb02:	68f8      	ldr	r0, [r7, #12]
 800cb04:	f000 f886 	bl	800cc14 <RTC_ExitInitMode>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb0c:	4b09      	ldr	r3, [pc, #36]	@ (800cb34 <HAL_RTC_SetDate+0x108>)
 800cb0e:	22ff      	movs	r2, #255	@ 0xff
 800cb10:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800cb12:	7cfb      	ldrb	r3, [r7, #19]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d103      	bne.n	800cb20 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2200      	movs	r2, #0
 800cb24:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800cb28:	7cfb      	ldrb	r3, [r7, #19]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	371c      	adds	r7, #28
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd90      	pop	{r4, r7, pc}
 800cb32:	bf00      	nop
 800cb34:	44007800 	.word	0x44007800

0800cb38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800cb40:	4b15      	ldr	r3, [pc, #84]	@ (800cb98 <HAL_RTC_WaitForSynchro+0x60>)
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	4a14      	ldr	r2, [pc, #80]	@ (800cb98 <HAL_RTC_WaitForSynchro+0x60>)
 800cb46:	f023 0320 	bic.w	r3, r3, #32
 800cb4a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800cb4c:	f7f6 fb18 	bl	8003180 <HAL_GetTick>
 800cb50:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cb52:	e013      	b.n	800cb7c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cb54:	f7f6 fb14 	bl	8003180 <HAL_GetTick>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cb62:	d90b      	bls.n	800cb7c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cb64:	4b0c      	ldr	r3, [pc, #48]	@ (800cb98 <HAL_RTC_WaitForSynchro+0x60>)
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	f003 0320 	and.w	r3, r3, #32
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d10c      	bne.n	800cb8a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2203      	movs	r2, #3
 800cb74:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800cb78:	2303      	movs	r3, #3
 800cb7a:	e008      	b.n	800cb8e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cb7c:	4b06      	ldr	r3, [pc, #24]	@ (800cb98 <HAL_RTC_WaitForSynchro+0x60>)
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	f003 0320 	and.w	r3, r3, #32
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d0e5      	beq.n	800cb54 <HAL_RTC_WaitForSynchro+0x1c>
 800cb88:	e000      	b.n	800cb8c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800cb8a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3710      	adds	r7, #16
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	44007800 	.word	0x44007800

0800cb9c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cba4:	2300      	movs	r3, #0
 800cba6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cba8:	4b19      	ldr	r3, [pc, #100]	@ (800cc10 <RTC_EnterInitMode+0x74>)
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d128      	bne.n	800cc06 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cbb4:	4b16      	ldr	r3, [pc, #88]	@ (800cc10 <RTC_EnterInitMode+0x74>)
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	4a15      	ldr	r2, [pc, #84]	@ (800cc10 <RTC_EnterInitMode+0x74>)
 800cbba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbbe:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800cbc0:	f7f6 fade 	bl	8003180 <HAL_GetTick>
 800cbc4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cbc6:	e013      	b.n	800cbf0 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cbc8:	f7f6 fada 	bl	8003180 <HAL_GetTick>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	1ad3      	subs	r3, r2, r3
 800cbd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cbd6:	d90b      	bls.n	800cbf0 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cbd8:	4b0d      	ldr	r3, [pc, #52]	@ (800cc10 <RTC_EnterInitMode+0x74>)
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d10f      	bne.n	800cc04 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2203      	movs	r2, #3
 800cbec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cbf0:	4b07      	ldr	r3, [pc, #28]	@ (800cc10 <RTC_EnterInitMode+0x74>)
 800cbf2:	68db      	ldr	r3, [r3, #12]
 800cbf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d104      	bne.n	800cc06 <RTC_EnterInitMode+0x6a>
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
 800cbfe:	2b03      	cmp	r3, #3
 800cc00:	d1e2      	bne.n	800cbc8 <RTC_EnterInitMode+0x2c>
 800cc02:	e000      	b.n	800cc06 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800cc04:	bf00      	nop
        }
      }
    }
  }

  return status;
 800cc06:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3710      	adds	r7, #16
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}
 800cc10:	44007800 	.word	0x44007800

0800cc14 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cc20:	4b1a      	ldr	r3, [pc, #104]	@ (800cc8c <RTC_ExitInitMode+0x78>)
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	4a19      	ldr	r2, [pc, #100]	@ (800cc8c <RTC_ExitInitMode+0x78>)
 800cc26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc2a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cc2c:	4b17      	ldr	r3, [pc, #92]	@ (800cc8c <RTC_ExitInitMode+0x78>)
 800cc2e:	699b      	ldr	r3, [r3, #24]
 800cc30:	f003 0320 	and.w	r3, r3, #32
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d10c      	bne.n	800cc52 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f7ff ff7d 	bl	800cb38 <HAL_RTC_WaitForSynchro>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d01e      	beq.n	800cc82 <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2203      	movs	r2, #3
 800cc48:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	73fb      	strb	r3, [r7, #15]
 800cc50:	e017      	b.n	800cc82 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cc52:	4b0e      	ldr	r3, [pc, #56]	@ (800cc8c <RTC_ExitInitMode+0x78>)
 800cc54:	699b      	ldr	r3, [r3, #24]
 800cc56:	4a0d      	ldr	r2, [pc, #52]	@ (800cc8c <RTC_ExitInitMode+0x78>)
 800cc58:	f023 0320 	bic.w	r3, r3, #32
 800cc5c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f7ff ff6a 	bl	800cb38 <HAL_RTC_WaitForSynchro>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d005      	beq.n	800cc76 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2203      	movs	r2, #3
 800cc6e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800cc72:	2303      	movs	r3, #3
 800cc74:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cc76:	4b05      	ldr	r3, [pc, #20]	@ (800cc8c <RTC_ExitInitMode+0x78>)
 800cc78:	699b      	ldr	r3, [r3, #24]
 800cc7a:	4a04      	ldr	r2, [pc, #16]	@ (800cc8c <RTC_ExitInitMode+0x78>)
 800cc7c:	f043 0320 	orr.w	r3, r3, #32
 800cc80:	6193      	str	r3, [r2, #24]
  }
  return status;
 800cc82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	44007800 	.word	0x44007800

0800cc90 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	4603      	mov	r3, r0
 800cc98:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800cc9e:	79fb      	ldrb	r3, [r7, #7]
 800cca0:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800cca2:	e005      	b.n	800ccb0 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	3301      	adds	r3, #1
 800cca8:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800ccaa:	7afb      	ldrb	r3, [r7, #11]
 800ccac:	3b0a      	subs	r3, #10
 800ccae:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800ccb0:	7afb      	ldrb	r3, [r7, #11]
 800ccb2:	2b09      	cmp	r3, #9
 800ccb4:	d8f6      	bhi.n	800cca4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	011b      	lsls	r3, r3, #4
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	7afb      	ldrb	r3, [r7, #11]
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	b2db      	uxtb	r3, r3
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3714      	adds	r7, #20
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	4910      	ldr	r1, [pc, #64]	@ (800cd24 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800cce4:	4313      	orrs	r3, r2
 800cce6:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	689a      	ldr	r2, [r3, #8]
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	431a      	orrs	r2, r3
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	699b      	ldr	r3, [r3, #24]
 800ccf6:	490c      	ldr	r1, [pc, #48]	@ (800cd28 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800ccfc:	4b0a      	ldr	r3, [pc, #40]	@ (800cd28 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ccfe:	6a1b      	ldr	r3, [r3, #32]
 800cd00:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	6919      	ldr	r1, [r3, #16]
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	695b      	ldr	r3, [r3, #20]
 800cd0c:	041b      	lsls	r3, r3, #16
 800cd0e:	430b      	orrs	r3, r1
 800cd10:	4905      	ldr	r1, [pc, #20]	@ (800cd28 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd12:	4313      	orrs	r3, r2
 800cd14:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800cd16:	2300      	movs	r3, #0
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	44007800 	.word	0x44007800
 800cd28:	44007c00 	.word	0x44007c00

0800cd2c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d101      	bne.n	800cd3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e162      	b.n	800d004 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4a70      	ldr	r2, [pc, #448]	@ (800cf04 <HAL_SPI_Init+0x1d8>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d018      	beq.n	800cd7a <HAL_SPI_Init+0x4e>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a6e      	ldr	r2, [pc, #440]	@ (800cf08 <HAL_SPI_Init+0x1dc>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d013      	beq.n	800cd7a <HAL_SPI_Init+0x4e>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a6d      	ldr	r2, [pc, #436]	@ (800cf0c <HAL_SPI_Init+0x1e0>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d00e      	beq.n	800cd7a <HAL_SPI_Init+0x4e>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a6b      	ldr	r2, [pc, #428]	@ (800cf10 <HAL_SPI_Init+0x1e4>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d009      	beq.n	800cd7a <HAL_SPI_Init+0x4e>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a6a      	ldr	r2, [pc, #424]	@ (800cf14 <HAL_SPI_Init+0x1e8>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d004      	beq.n	800cd7a <HAL_SPI_Init+0x4e>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a68      	ldr	r2, [pc, #416]	@ (800cf18 <HAL_SPI_Init+0x1ec>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	e000      	b.n	800cd7c <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800cd7a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4a5f      	ldr	r2, [pc, #380]	@ (800cf04 <HAL_SPI_Init+0x1d8>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d018      	beq.n	800cdbe <HAL_SPI_Init+0x92>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a5d      	ldr	r2, [pc, #372]	@ (800cf08 <HAL_SPI_Init+0x1dc>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d013      	beq.n	800cdbe <HAL_SPI_Init+0x92>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a5c      	ldr	r2, [pc, #368]	@ (800cf0c <HAL_SPI_Init+0x1e0>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d00e      	beq.n	800cdbe <HAL_SPI_Init+0x92>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4a5a      	ldr	r2, [pc, #360]	@ (800cf10 <HAL_SPI_Init+0x1e4>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d009      	beq.n	800cdbe <HAL_SPI_Init+0x92>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	4a59      	ldr	r2, [pc, #356]	@ (800cf14 <HAL_SPI_Init+0x1e8>)
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	d004      	beq.n	800cdbe <HAL_SPI_Init+0x92>
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a57      	ldr	r2, [pc, #348]	@ (800cf18 <HAL_SPI_Init+0x1ec>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d105      	bne.n	800cdca <HAL_SPI_Init+0x9e>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	2b0f      	cmp	r3, #15
 800cdc4:	d901      	bls.n	800cdca <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e11c      	b.n	800d004 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 f91e 	bl	800d00c <SPI_GetPacketSize>
 800cdd0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4a4b      	ldr	r2, [pc, #300]	@ (800cf04 <HAL_SPI_Init+0x1d8>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d018      	beq.n	800ce0e <HAL_SPI_Init+0xe2>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a49      	ldr	r2, [pc, #292]	@ (800cf08 <HAL_SPI_Init+0x1dc>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d013      	beq.n	800ce0e <HAL_SPI_Init+0xe2>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a48      	ldr	r2, [pc, #288]	@ (800cf0c <HAL_SPI_Init+0x1e0>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d00e      	beq.n	800ce0e <HAL_SPI_Init+0xe2>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a46      	ldr	r2, [pc, #280]	@ (800cf10 <HAL_SPI_Init+0x1e4>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d009      	beq.n	800ce0e <HAL_SPI_Init+0xe2>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a45      	ldr	r2, [pc, #276]	@ (800cf14 <HAL_SPI_Init+0x1e8>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d004      	beq.n	800ce0e <HAL_SPI_Init+0xe2>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a43      	ldr	r2, [pc, #268]	@ (800cf18 <HAL_SPI_Init+0x1ec>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d102      	bne.n	800ce14 <HAL_SPI_Init+0xe8>
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2b08      	cmp	r3, #8
 800ce12:	d820      	bhi.n	800ce56 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce18:	4a40      	ldr	r2, [pc, #256]	@ (800cf1c <HAL_SPI_Init+0x1f0>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d018      	beq.n	800ce50 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4a3f      	ldr	r2, [pc, #252]	@ (800cf20 <HAL_SPI_Init+0x1f4>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d013      	beq.n	800ce50 <HAL_SPI_Init+0x124>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a3d      	ldr	r2, [pc, #244]	@ (800cf24 <HAL_SPI_Init+0x1f8>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d00e      	beq.n	800ce50 <HAL_SPI_Init+0x124>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a3c      	ldr	r2, [pc, #240]	@ (800cf28 <HAL_SPI_Init+0x1fc>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d009      	beq.n	800ce50 <HAL_SPI_Init+0x124>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a3a      	ldr	r2, [pc, #232]	@ (800cf2c <HAL_SPI_Init+0x200>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d004      	beq.n	800ce50 <HAL_SPI_Init+0x124>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a39      	ldr	r2, [pc, #228]	@ (800cf30 <HAL_SPI_Init+0x204>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d104      	bne.n	800ce5a <HAL_SPI_Init+0x12e>
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2b10      	cmp	r3, #16
 800ce54:	d901      	bls.n	800ce5a <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800ce56:	2301      	movs	r3, #1
 800ce58:	e0d4      	b.n	800d004 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d106      	bne.n	800ce74 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f7f5 fae2 	bl	8002438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2202      	movs	r2, #2
 800ce78:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f022 0201 	bic.w	r2, r2, #1
 800ce8a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ce96:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	699b      	ldr	r3, [r3, #24]
 800ce9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cea0:	d119      	bne.n	800ced6 <HAL_SPI_Init+0x1aa>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ceaa:	d103      	bne.n	800ceb4 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d008      	beq.n	800cec6 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10c      	bne.n	800ced6 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cec0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cec4:	d107      	bne.n	800ced6 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ced4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d028      	beq.n	800cf34 <HAL_SPI_Init+0x208>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	2b06      	cmp	r3, #6
 800cee8:	d924      	bls.n	800cf34 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	430a      	orrs	r2, r1
 800cefe:	601a      	str	r2, [r3, #0]
 800cf00:	e020      	b.n	800cf44 <HAL_SPI_Init+0x218>
 800cf02:	bf00      	nop
 800cf04:	40014c00 	.word	0x40014c00
 800cf08:	50014c00 	.word	0x50014c00
 800cf0c:	44002000 	.word	0x44002000
 800cf10:	54002000 	.word	0x54002000
 800cf14:	40015000 	.word	0x40015000
 800cf18:	50015000 	.word	0x50015000
 800cf1c:	40013000 	.word	0x40013000
 800cf20:	50013000 	.word	0x50013000
 800cf24:	40003800 	.word	0x40003800
 800cf28:	50003800 	.word	0x50003800
 800cf2c:	40003c00 	.word	0x40003c00
 800cf30:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cf42:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	69da      	ldr	r2, [r3, #28]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf4c:	431a      	orrs	r2, r3
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	431a      	orrs	r2, r3
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf56:	ea42 0103 	orr.w	r1, r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	68da      	ldr	r2, [r3, #12]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	430a      	orrs	r2, r1
 800cf64:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf6e:	431a      	orrs	r2, r3
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf74:	431a      	orrs	r2, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	699b      	ldr	r3, [r3, #24]
 800cf7a:	431a      	orrs	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	691b      	ldr	r3, [r3, #16]
 800cf80:	431a      	orrs	r2, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	695b      	ldr	r3, [r3, #20]
 800cf86:	431a      	orrs	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6a1b      	ldr	r3, [r3, #32]
 800cf8c:	431a      	orrs	r2, r3
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	431a      	orrs	r2, r3
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf98:	431a      	orrs	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	431a      	orrs	r2, r3
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cfa4:	431a      	orrs	r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfaa:	431a      	orrs	r2, r3
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfb0:	ea42 0103 	orr.w	r1, r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	430a      	orrs	r2, r1
 800cfbe:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f022 0201 	bic.w	r2, r2, #1
 800cfce:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d00a      	beq.n	800cff2 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	430a      	orrs	r2, r1
 800cff0:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2201      	movs	r2, #1
 800cffe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800d002:	2300      	movs	r3, #0
}
 800d004:	4618      	mov	r0, r3
 800d006:	3710      	adds	r7, #16
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b085      	sub	sp, #20
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d018:	095b      	lsrs	r3, r3, #5
 800d01a:	3301      	adds	r3, #1
 800d01c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	68db      	ldr	r3, [r3, #12]
 800d022:	3301      	adds	r3, #1
 800d024:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	3307      	adds	r3, #7
 800d02a:	08db      	lsrs	r3, r3, #3
 800d02c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	68fa      	ldr	r2, [r7, #12]
 800d032:	fb02 f303 	mul.w	r3, r2, r3
}
 800d036:	4618      	mov	r0, r3
 800d038:	3714      	adds	r7, #20
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr

0800d042 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b082      	sub	sp, #8
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d101      	bne.n	800d054 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d050:	2301      	movs	r3, #1
 800d052:	e042      	b.n	800d0da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d106      	bne.n	800d06c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2200      	movs	r2, #0
 800d062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f7f5 faa2 	bl	80025b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2224      	movs	r2, #36	@ 0x24
 800d070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f022 0201 	bic.w	r2, r2, #1
 800d082:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d002      	beq.n	800d092 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 fab5 	bl	800d5fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f8c4 	bl	800d220 <UART_SetConfig>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d101      	bne.n	800d0a2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e01b      	b.n	800d0da <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	685a      	ldr	r2, [r3, #4]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d0b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	689a      	ldr	r2, [r3, #8]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d0c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f042 0201 	orr.w	r2, r2, #1
 800d0d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 fb34 	bl	800d740 <UART_CheckIdleState>
 800d0d8:	4603      	mov	r3, r0
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3708      	adds	r7, #8
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b08a      	sub	sp, #40	@ 0x28
 800d0e6:	af02      	add	r7, sp, #8
 800d0e8:	60f8      	str	r0, [r7, #12]
 800d0ea:	60b9      	str	r1, [r7, #8]
 800d0ec:	603b      	str	r3, [r7, #0]
 800d0ee:	4613      	mov	r3, r2
 800d0f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0f8:	2b20      	cmp	r3, #32
 800d0fa:	f040 808b 	bne.w	800d214 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <HAL_UART_Transmit+0x28>
 800d104:	88fb      	ldrh	r3, [r7, #6]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d101      	bne.n	800d10e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d10a:	2301      	movs	r3, #1
 800d10c:	e083      	b.n	800d216 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d118:	2b80      	cmp	r3, #128	@ 0x80
 800d11a:	d107      	bne.n	800d12c <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	689a      	ldr	r2, [r3, #8]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d12a:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2221      	movs	r2, #33	@ 0x21
 800d138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d13c:	f7f6 f820 	bl	8003180 <HAL_GetTick>
 800d140:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	88fa      	ldrh	r2, [r7, #6]
 800d146:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	88fa      	ldrh	r2, [r7, #6]
 800d14e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d15a:	d108      	bne.n	800d16e <HAL_UART_Transmit+0x8c>
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	691b      	ldr	r3, [r3, #16]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d104      	bne.n	800d16e <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800d164:	2300      	movs	r3, #0
 800d166:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	61bb      	str	r3, [r7, #24]
 800d16c:	e003      	b.n	800d176 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d172:	2300      	movs	r3, #0
 800d174:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d176:	e030      	b.n	800d1da <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	2200      	movs	r2, #0
 800d180:	2180      	movs	r1, #128	@ 0x80
 800d182:	68f8      	ldr	r0, [r7, #12]
 800d184:	f000 fb86 	bl	800d894 <UART_WaitOnFlagUntilTimeout>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d005      	beq.n	800d19a <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2220      	movs	r2, #32
 800d192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d196:	2303      	movs	r3, #3
 800d198:	e03d      	b.n	800d216 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800d19a:	69fb      	ldr	r3, [r7, #28]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d10b      	bne.n	800d1b8 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	881b      	ldrh	r3, [r3, #0]
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	3302      	adds	r3, #2
 800d1b4:	61bb      	str	r3, [r7, #24]
 800d1b6:	e007      	b.n	800d1c8 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	781a      	ldrb	r2, [r3, #0]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1c8      	bne.n	800d178 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	9300      	str	r3, [sp, #0]
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	2140      	movs	r1, #64	@ 0x40
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	f000 fb4f 	bl	800d894 <UART_WaitOnFlagUntilTimeout>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d005      	beq.n	800d208 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2220      	movs	r2, #32
 800d200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d204:	2303      	movs	r3, #3
 800d206:	e006      	b.n	800d216 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2220      	movs	r2, #32
 800d20c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d210:	2300      	movs	r3, #0
 800d212:	e000      	b.n	800d216 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800d214:	2302      	movs	r3, #2
  }
}
 800d216:	4618      	mov	r0, r3
 800d218:	3720      	adds	r7, #32
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
	...

0800d220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d224:	b094      	sub	sp, #80	@ 0x50
 800d226:	af00      	add	r7, sp, #0
 800d228:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d22a:	2300      	movs	r3, #0
 800d22c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	4b78      	ldr	r3, [pc, #480]	@ (800d418 <UART_SetConfig+0x1f8>)
 800d236:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23a:	689a      	ldr	r2, [r3, #8]
 800d23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23e:	691b      	ldr	r3, [r3, #16]
 800d240:	431a      	orrs	r2, r3
 800d242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d244:	695b      	ldr	r3, [r3, #20]
 800d246:	431a      	orrs	r2, r3
 800d248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24a:	69db      	ldr	r3, [r3, #28]
 800d24c:	4313      	orrs	r3, r2
 800d24e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4971      	ldr	r1, [pc, #452]	@ (800d41c <UART_SetConfig+0x1fc>)
 800d258:	4019      	ands	r1, r3
 800d25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d260:	430b      	orrs	r3, r1
 800d262:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d270:	68d9      	ldr	r1, [r3, #12]
 800d272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	ea40 0301 	orr.w	r3, r0, r1
 800d27a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d27e:	699b      	ldr	r3, [r3, #24]
 800d280:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	4b64      	ldr	r3, [pc, #400]	@ (800d418 <UART_SetConfig+0x1f8>)
 800d288:	429a      	cmp	r2, r3
 800d28a:	d009      	beq.n	800d2a0 <UART_SetConfig+0x80>
 800d28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	4b63      	ldr	r3, [pc, #396]	@ (800d420 <UART_SetConfig+0x200>)
 800d292:	429a      	cmp	r2, r3
 800d294:	d004      	beq.n	800d2a0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d298:	6a1a      	ldr	r2, [r3, #32]
 800d29a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d29c:	4313      	orrs	r3, r2
 800d29e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	689b      	ldr	r3, [r3, #8]
 800d2a6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d2aa:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2b4:	430b      	orrs	r3, r1
 800d2b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2be:	f023 000f 	bic.w	r0, r3, #15
 800d2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	ea40 0301 	orr.w	r3, r0, r1
 800d2ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	4b53      	ldr	r3, [pc, #332]	@ (800d424 <UART_SetConfig+0x204>)
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d102      	bne.n	800d2e0 <UART_SetConfig+0xc0>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2de:	e066      	b.n	800d3ae <UART_SetConfig+0x18e>
 800d2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	4b50      	ldr	r3, [pc, #320]	@ (800d428 <UART_SetConfig+0x208>)
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d102      	bne.n	800d2f0 <UART_SetConfig+0xd0>
 800d2ea:	2302      	movs	r3, #2
 800d2ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2ee:	e05e      	b.n	800d3ae <UART_SetConfig+0x18e>
 800d2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	4b4d      	ldr	r3, [pc, #308]	@ (800d42c <UART_SetConfig+0x20c>)
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d102      	bne.n	800d300 <UART_SetConfig+0xe0>
 800d2fa:	2304      	movs	r3, #4
 800d2fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2fe:	e056      	b.n	800d3ae <UART_SetConfig+0x18e>
 800d300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	4b4a      	ldr	r3, [pc, #296]	@ (800d430 <UART_SetConfig+0x210>)
 800d306:	429a      	cmp	r2, r3
 800d308:	d102      	bne.n	800d310 <UART_SetConfig+0xf0>
 800d30a:	2308      	movs	r3, #8
 800d30c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d30e:	e04e      	b.n	800d3ae <UART_SetConfig+0x18e>
 800d310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	4b47      	ldr	r3, [pc, #284]	@ (800d434 <UART_SetConfig+0x214>)
 800d316:	429a      	cmp	r2, r3
 800d318:	d102      	bne.n	800d320 <UART_SetConfig+0x100>
 800d31a:	2310      	movs	r3, #16
 800d31c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d31e:	e046      	b.n	800d3ae <UART_SetConfig+0x18e>
 800d320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	4b44      	ldr	r3, [pc, #272]	@ (800d438 <UART_SetConfig+0x218>)
 800d326:	429a      	cmp	r2, r3
 800d328:	d102      	bne.n	800d330 <UART_SetConfig+0x110>
 800d32a:	2320      	movs	r3, #32
 800d32c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d32e:	e03e      	b.n	800d3ae <UART_SetConfig+0x18e>
 800d330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	4b41      	ldr	r3, [pc, #260]	@ (800d43c <UART_SetConfig+0x21c>)
 800d336:	429a      	cmp	r2, r3
 800d338:	d102      	bne.n	800d340 <UART_SetConfig+0x120>
 800d33a:	2340      	movs	r3, #64	@ 0x40
 800d33c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d33e:	e036      	b.n	800d3ae <UART_SetConfig+0x18e>
 800d340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	4b3e      	ldr	r3, [pc, #248]	@ (800d440 <UART_SetConfig+0x220>)
 800d346:	429a      	cmp	r2, r3
 800d348:	d102      	bne.n	800d350 <UART_SetConfig+0x130>
 800d34a:	2380      	movs	r3, #128	@ 0x80
 800d34c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d34e:	e02e      	b.n	800d3ae <UART_SetConfig+0x18e>
 800d350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	4b3b      	ldr	r3, [pc, #236]	@ (800d444 <UART_SetConfig+0x224>)
 800d356:	429a      	cmp	r2, r3
 800d358:	d103      	bne.n	800d362 <UART_SetConfig+0x142>
 800d35a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d35e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d360:	e025      	b.n	800d3ae <UART_SetConfig+0x18e>
 800d362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	4b38      	ldr	r3, [pc, #224]	@ (800d448 <UART_SetConfig+0x228>)
 800d368:	429a      	cmp	r2, r3
 800d36a:	d103      	bne.n	800d374 <UART_SetConfig+0x154>
 800d36c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d370:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d372:	e01c      	b.n	800d3ae <UART_SetConfig+0x18e>
 800d374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	4b34      	ldr	r3, [pc, #208]	@ (800d44c <UART_SetConfig+0x22c>)
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d103      	bne.n	800d386 <UART_SetConfig+0x166>
 800d37e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d382:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d384:	e013      	b.n	800d3ae <UART_SetConfig+0x18e>
 800d386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	4b31      	ldr	r3, [pc, #196]	@ (800d450 <UART_SetConfig+0x230>)
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d103      	bne.n	800d398 <UART_SetConfig+0x178>
 800d390:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d394:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d396:	e00a      	b.n	800d3ae <UART_SetConfig+0x18e>
 800d398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d39a:	681a      	ldr	r2, [r3, #0]
 800d39c:	4b1e      	ldr	r3, [pc, #120]	@ (800d418 <UART_SetConfig+0x1f8>)
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d103      	bne.n	800d3aa <UART_SetConfig+0x18a>
 800d3a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d3a8:	e001      	b.n	800d3ae <UART_SetConfig+0x18e>
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	4b19      	ldr	r3, [pc, #100]	@ (800d418 <UART_SetConfig+0x1f8>)
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d005      	beq.n	800d3c4 <UART_SetConfig+0x1a4>
 800d3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	4b18      	ldr	r3, [pc, #96]	@ (800d420 <UART_SetConfig+0x200>)
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	f040 8094 	bne.w	800d4ec <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d3c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	623b      	str	r3, [r7, #32]
 800d3ca:	627a      	str	r2, [r7, #36]	@ 0x24
 800d3cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d3d0:	f7fc fbea 	bl	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d3d4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d3d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	f000 80f7 	beq.w	800d5cc <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3e2:	4a1c      	ldr	r2, [pc, #112]	@ (800d454 <UART_SetConfig+0x234>)
 800d3e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3f0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3f4:	685a      	ldr	r2, [r3, #4]
 800d3f6:	4613      	mov	r3, r2
 800d3f8:	005b      	lsls	r3, r3, #1
 800d3fa:	4413      	add	r3, r2
 800d3fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d305      	bcc.n	800d40e <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d408:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d924      	bls.n	800d458 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d414:	e069      	b.n	800d4ea <UART_SetConfig+0x2ca>
 800d416:	bf00      	nop
 800d418:	44002400 	.word	0x44002400
 800d41c:	cfff69f3 	.word	0xcfff69f3
 800d420:	54002400 	.word	0x54002400
 800d424:	40013800 	.word	0x40013800
 800d428:	40004400 	.word	0x40004400
 800d42c:	40004800 	.word	0x40004800
 800d430:	40004c00 	.word	0x40004c00
 800d434:	40005000 	.word	0x40005000
 800d438:	40006400 	.word	0x40006400
 800d43c:	40007800 	.word	0x40007800
 800d440:	40007c00 	.word	0x40007c00
 800d444:	40008000 	.word	0x40008000
 800d448:	40006800 	.word	0x40006800
 800d44c:	40006c00 	.word	0x40006c00
 800d450:	40008400 	.word	0x40008400
 800d454:	0801475c 	.word	0x0801475c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d45a:	2200      	movs	r2, #0
 800d45c:	61bb      	str	r3, [r7, #24]
 800d45e:	61fa      	str	r2, [r7, #28]
 800d460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d464:	4a64      	ldr	r2, [pc, #400]	@ (800d5f8 <UART_SetConfig+0x3d8>)
 800d466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	2200      	movs	r2, #0
 800d46e:	613b      	str	r3, [r7, #16]
 800d470:	617a      	str	r2, [r7, #20]
 800d472:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d476:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d47a:	f7f2 ff07 	bl	800028c <__aeabi_uldivmod>
 800d47e:	4602      	mov	r2, r0
 800d480:	460b      	mov	r3, r1
 800d482:	4610      	mov	r0, r2
 800d484:	4619      	mov	r1, r3
 800d486:	f04f 0200 	mov.w	r2, #0
 800d48a:	f04f 0300 	mov.w	r3, #0
 800d48e:	020b      	lsls	r3, r1, #8
 800d490:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d494:	0202      	lsls	r2, r0, #8
 800d496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d498:	6849      	ldr	r1, [r1, #4]
 800d49a:	0849      	lsrs	r1, r1, #1
 800d49c:	2000      	movs	r0, #0
 800d49e:	460c      	mov	r4, r1
 800d4a0:	4605      	mov	r5, r0
 800d4a2:	eb12 0804 	adds.w	r8, r2, r4
 800d4a6:	eb43 0905 	adc.w	r9, r3, r5
 800d4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	60bb      	str	r3, [r7, #8]
 800d4b2:	60fa      	str	r2, [r7, #12]
 800d4b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d4b8:	4640      	mov	r0, r8
 800d4ba:	4649      	mov	r1, r9
 800d4bc:	f7f2 fee6 	bl	800028c <__aeabi_uldivmod>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d4ce:	d308      	bcc.n	800d4e2 <UART_SetConfig+0x2c2>
 800d4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4d6:	d204      	bcs.n	800d4e2 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800d4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d4de:	60da      	str	r2, [r3, #12]
 800d4e0:	e003      	b.n	800d4ea <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d4e8:	e070      	b.n	800d5cc <UART_SetConfig+0x3ac>
 800d4ea:	e06f      	b.n	800d5cc <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ee:	69db      	ldr	r3, [r3, #28]
 800d4f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d4f4:	d13c      	bne.n	800d570 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d4f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	603b      	str	r3, [r7, #0]
 800d4fc:	607a      	str	r2, [r7, #4]
 800d4fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d502:	f7fc fb51 	bl	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d506:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d05e      	beq.n	800d5cc <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d512:	4a39      	ldr	r2, [pc, #228]	@ (800d5f8 <UART_SetConfig+0x3d8>)
 800d514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d518:	461a      	mov	r2, r3
 800d51a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d51c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d520:	005a      	lsls	r2, r3, #1
 800d522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	085b      	lsrs	r3, r3, #1
 800d528:	441a      	add	r2, r3
 800d52a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d532:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d536:	2b0f      	cmp	r3, #15
 800d538:	d916      	bls.n	800d568 <UART_SetConfig+0x348>
 800d53a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d53c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d540:	d212      	bcs.n	800d568 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d544:	b29b      	uxth	r3, r3
 800d546:	f023 030f 	bic.w	r3, r3, #15
 800d54a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d54c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d54e:	085b      	lsrs	r3, r3, #1
 800d550:	b29b      	uxth	r3, r3
 800d552:	f003 0307 	and.w	r3, r3, #7
 800d556:	b29a      	uxth	r2, r3
 800d558:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d55a:	4313      	orrs	r3, r2
 800d55c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800d55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d564:	60da      	str	r2, [r3, #12]
 800d566:	e031      	b.n	800d5cc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800d568:	2301      	movs	r3, #1
 800d56a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d56e:	e02d      	b.n	800d5cc <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d572:	2200      	movs	r2, #0
 800d574:	469a      	mov	sl, r3
 800d576:	4693      	mov	fp, r2
 800d578:	4650      	mov	r0, sl
 800d57a:	4659      	mov	r1, fp
 800d57c:	f7fc fb14 	bl	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d580:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d584:	2b00      	cmp	r3, #0
 800d586:	d021      	beq.n	800d5cc <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d58a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d58c:	4a1a      	ldr	r2, [pc, #104]	@ (800d5f8 <UART_SetConfig+0x3d8>)
 800d58e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d592:	461a      	mov	r2, r3
 800d594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d596:	fbb3 f2f2 	udiv	r2, r3, r2
 800d59a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	085b      	lsrs	r3, r3, #1
 800d5a0:	441a      	add	r2, r3
 800d5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ae:	2b0f      	cmp	r3, #15
 800d5b0:	d909      	bls.n	800d5c6 <UART_SetConfig+0x3a6>
 800d5b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5b8:	d205      	bcs.n	800d5c6 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d5ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5bc:	b29a      	uxth	r2, r3
 800d5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	60da      	str	r2, [r3, #12]
 800d5c4:	e002      	b.n	800d5cc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5de:	2200      	movs	r2, #0
 800d5e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d5e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3750      	adds	r7, #80	@ 0x50
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d5f6:	bf00      	nop
 800d5f8:	0801475c 	.word	0x0801475c

0800d5fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d608:	f003 0308 	and.w	r3, r3, #8
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d00a      	beq.n	800d626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	430a      	orrs	r2, r1
 800d624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d62a:	f003 0301 	and.w	r3, r3, #1
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00a      	beq.n	800d648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	430a      	orrs	r2, r1
 800d646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d64c:	f003 0302 	and.w	r3, r3, #2
 800d650:	2b00      	cmp	r3, #0
 800d652:	d00a      	beq.n	800d66a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	430a      	orrs	r2, r1
 800d668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d66e:	f003 0304 	and.w	r3, r3, #4
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00a      	beq.n	800d68c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	430a      	orrs	r2, r1
 800d68a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d690:	f003 0310 	and.w	r3, r3, #16
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00a      	beq.n	800d6ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	430a      	orrs	r2, r1
 800d6ac:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6b2:	f003 0320 	and.w	r3, r3, #32
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d00a      	beq.n	800d6d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	430a      	orrs	r2, r1
 800d6ce:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d01a      	beq.n	800d712 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	430a      	orrs	r2, r1
 800d6f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d6fa:	d10a      	bne.n	800d712 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	430a      	orrs	r2, r1
 800d710:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00a      	beq.n	800d734 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	430a      	orrs	r2, r1
 800d732:	605a      	str	r2, [r3, #4]
  }
}
 800d734:	bf00      	nop
 800d736:	370c      	adds	r7, #12
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b098      	sub	sp, #96	@ 0x60
 800d744:	af02      	add	r7, sp, #8
 800d746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2200      	movs	r2, #0
 800d74c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d750:	f7f5 fd16 	bl	8003180 <HAL_GetTick>
 800d754:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f003 0308 	and.w	r3, r3, #8
 800d760:	2b08      	cmp	r3, #8
 800d762:	d12f      	bne.n	800d7c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d764:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d768:	9300      	str	r3, [sp, #0]
 800d76a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d76c:	2200      	movs	r2, #0
 800d76e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f000 f88e 	bl	800d894 <UART_WaitOnFlagUntilTimeout>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d022      	beq.n	800d7c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d786:	e853 3f00 	ldrex	r3, [r3]
 800d78a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d78c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d78e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d792:	653b      	str	r3, [r7, #80]	@ 0x50
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	461a      	mov	r2, r3
 800d79a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d79c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d79e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d7a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7a4:	e841 2300 	strex	r3, r2, [r1]
 800d7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d7aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1e6      	bne.n	800d77e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2220      	movs	r2, #32
 800d7b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7c0:	2303      	movs	r3, #3
 800d7c2:	e063      	b.n	800d88c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f003 0304 	and.w	r3, r3, #4
 800d7ce:	2b04      	cmp	r3, #4
 800d7d0:	d149      	bne.n	800d866 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d7d6:	9300      	str	r3, [sp, #0]
 800d7d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 f857 	bl	800d894 <UART_WaitOnFlagUntilTimeout>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d03c      	beq.n	800d866 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f4:	e853 3f00 	ldrex	r3, [r3]
 800d7f8:	623b      	str	r3, [r7, #32]
   return(result);
 800d7fa:	6a3b      	ldr	r3, [r7, #32]
 800d7fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d800:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	461a      	mov	r2, r3
 800d808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d80a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d80c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d80e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d812:	e841 2300 	strex	r3, r2, [r1]
 800d816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1e6      	bne.n	800d7ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	3308      	adds	r3, #8
 800d824:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	e853 3f00 	ldrex	r3, [r3]
 800d82c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f023 0301 	bic.w	r3, r3, #1
 800d834:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	3308      	adds	r3, #8
 800d83c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d83e:	61fa      	str	r2, [r7, #28]
 800d840:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d842:	69b9      	ldr	r1, [r7, #24]
 800d844:	69fa      	ldr	r2, [r7, #28]
 800d846:	e841 2300 	strex	r3, r2, [r1]
 800d84a:	617b      	str	r3, [r7, #20]
   return(result);
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d1e5      	bne.n	800d81e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2220      	movs	r2, #32
 800d856:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2200      	movs	r2, #0
 800d85e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d862:	2303      	movs	r3, #3
 800d864:	e012      	b.n	800d88c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2220      	movs	r2, #32
 800d86a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2220      	movs	r2, #32
 800d872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d88a:	2300      	movs	r3, #0
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3758      	adds	r7, #88	@ 0x58
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	60b9      	str	r1, [r7, #8]
 800d89e:	603b      	str	r3, [r7, #0]
 800d8a0:	4613      	mov	r3, r2
 800d8a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8a4:	e04f      	b.n	800d946 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8a6:	69bb      	ldr	r3, [r7, #24]
 800d8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ac:	d04b      	beq.n	800d946 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8ae:	f7f5 fc67 	bl	8003180 <HAL_GetTick>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	1ad3      	subs	r3, r2, r3
 800d8b8:	69ba      	ldr	r2, [r7, #24]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d302      	bcc.n	800d8c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d101      	bne.n	800d8c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d8c4:	2303      	movs	r3, #3
 800d8c6:	e04e      	b.n	800d966 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f003 0304 	and.w	r3, r3, #4
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d037      	beq.n	800d946 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	2b80      	cmp	r3, #128	@ 0x80
 800d8da:	d034      	beq.n	800d946 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	2b40      	cmp	r3, #64	@ 0x40
 800d8e0:	d031      	beq.n	800d946 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	69db      	ldr	r3, [r3, #28]
 800d8e8:	f003 0308 	and.w	r3, r3, #8
 800d8ec:	2b08      	cmp	r3, #8
 800d8ee:	d110      	bne.n	800d912 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2208      	movs	r2, #8
 800d8f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d8f8:	68f8      	ldr	r0, [r7, #12]
 800d8fa:	f000 f838 	bl	800d96e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2208      	movs	r2, #8
 800d902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2200      	movs	r2, #0
 800d90a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d90e:	2301      	movs	r3, #1
 800d910:	e029      	b.n	800d966 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	69db      	ldr	r3, [r3, #28]
 800d918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d91c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d920:	d111      	bne.n	800d946 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d92a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d92c:	68f8      	ldr	r0, [r7, #12]
 800d92e:	f000 f81e 	bl	800d96e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2220      	movs	r2, #32
 800d936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2200      	movs	r2, #0
 800d93e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d942:	2303      	movs	r3, #3
 800d944:	e00f      	b.n	800d966 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	69da      	ldr	r2, [r3, #28]
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	4013      	ands	r3, r2
 800d950:	68ba      	ldr	r2, [r7, #8]
 800d952:	429a      	cmp	r2, r3
 800d954:	bf0c      	ite	eq
 800d956:	2301      	moveq	r3, #1
 800d958:	2300      	movne	r3, #0
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	461a      	mov	r2, r3
 800d95e:	79fb      	ldrb	r3, [r7, #7]
 800d960:	429a      	cmp	r2, r3
 800d962:	d0a0      	beq.n	800d8a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d964:	2300      	movs	r3, #0
}
 800d966:	4618      	mov	r0, r3
 800d968:	3710      	adds	r7, #16
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}

0800d96e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d96e:	b480      	push	{r7}
 800d970:	b095      	sub	sp, #84	@ 0x54
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d97c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d97e:	e853 3f00 	ldrex	r3, [r3]
 800d982:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d986:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d98a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	461a      	mov	r2, r3
 800d992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d994:	643b      	str	r3, [r7, #64]	@ 0x40
 800d996:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d998:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d99a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d99c:	e841 2300 	strex	r3, r2, [r1]
 800d9a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d1e6      	bne.n	800d976 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	3308      	adds	r3, #8
 800d9ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b0:	6a3b      	ldr	r3, [r7, #32]
 800d9b2:	e853 3f00 	ldrex	r3, [r3]
 800d9b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d9b8:	69fb      	ldr	r3, [r7, #28]
 800d9ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d9be:	f023 0301 	bic.w	r3, r3, #1
 800d9c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	3308      	adds	r3, #8
 800d9ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d9cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d9ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d9d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9d4:	e841 2300 	strex	r3, r2, [r1]
 800d9d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d1e3      	bne.n	800d9a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d118      	bne.n	800da1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	e853 3f00 	ldrex	r3, [r3]
 800d9f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	f023 0310 	bic.w	r3, r3, #16
 800d9fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	461a      	mov	r2, r3
 800da04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da06:	61bb      	str	r3, [r7, #24]
 800da08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da0a:	6979      	ldr	r1, [r7, #20]
 800da0c:	69ba      	ldr	r2, [r7, #24]
 800da0e:	e841 2300 	strex	r3, r2, [r1]
 800da12:	613b      	str	r3, [r7, #16]
   return(result);
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1e6      	bne.n	800d9e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2220      	movs	r2, #32
 800da1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2200      	movs	r2, #0
 800da26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800da2e:	bf00      	nop
 800da30:	3754      	adds	r7, #84	@ 0x54
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr

0800da3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800da3a:	b480      	push	{r7}
 800da3c:	b085      	sub	sp, #20
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d101      	bne.n	800da50 <HAL_UARTEx_DisableFifoMode+0x16>
 800da4c:	2302      	movs	r3, #2
 800da4e:	e027      	b.n	800daa0 <HAL_UARTEx_DisableFifoMode+0x66>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2201      	movs	r2, #1
 800da54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2224      	movs	r2, #36	@ 0x24
 800da5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f022 0201 	bic.w	r2, r2, #1
 800da76:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800da7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	68fa      	ldr	r2, [r7, #12]
 800da8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2220      	movs	r2, #32
 800da92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3714      	adds	r7, #20
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d101      	bne.n	800dac4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dac0:	2302      	movs	r3, #2
 800dac2:	e02d      	b.n	800db20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2224      	movs	r2, #36	@ 0x24
 800dad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f022 0201 	bic.w	r2, r2, #1
 800daea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	689b      	ldr	r3, [r3, #8]
 800daf2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	683a      	ldr	r2, [r7, #0]
 800dafc:	430a      	orrs	r2, r1
 800dafe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 f84f 	bl	800dba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2220      	movs	r2, #32
 800db12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2200      	movs	r2, #0
 800db1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	3710      	adds	r7, #16
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d101      	bne.n	800db40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800db3c:	2302      	movs	r3, #2
 800db3e:	e02d      	b.n	800db9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2201      	movs	r2, #1
 800db44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2224      	movs	r2, #36	@ 0x24
 800db4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f022 0201 	bic.w	r2, r2, #1
 800db66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	683a      	ldr	r2, [r7, #0]
 800db78:	430a      	orrs	r2, r1
 800db7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 f811 	bl	800dba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	68fa      	ldr	r2, [r7, #12]
 800db88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2220      	movs	r2, #32
 800db8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2200      	movs	r2, #0
 800db96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3710      	adds	r7, #16
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d108      	bne.n	800dbc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dbc4:	e031      	b.n	800dc2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dbc6:	2308      	movs	r3, #8
 800dbc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dbca:	2308      	movs	r3, #8
 800dbcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	0e5b      	lsrs	r3, r3, #25
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	f003 0307 	and.w	r3, r3, #7
 800dbdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	0f5b      	lsrs	r3, r3, #29
 800dbe6:	b2db      	uxtb	r3, r3
 800dbe8:	f003 0307 	and.w	r3, r3, #7
 800dbec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dbee:	7bbb      	ldrb	r3, [r7, #14]
 800dbf0:	7b3a      	ldrb	r2, [r7, #12]
 800dbf2:	4911      	ldr	r1, [pc, #68]	@ (800dc38 <UARTEx_SetNbDataToProcess+0x94>)
 800dbf4:	5c8a      	ldrb	r2, [r1, r2]
 800dbf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dbfa:	7b3a      	ldrb	r2, [r7, #12]
 800dbfc:	490f      	ldr	r1, [pc, #60]	@ (800dc3c <UARTEx_SetNbDataToProcess+0x98>)
 800dbfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dc00:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc04:	b29a      	uxth	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
 800dc0e:	7b7a      	ldrb	r2, [r7, #13]
 800dc10:	4909      	ldr	r1, [pc, #36]	@ (800dc38 <UARTEx_SetNbDataToProcess+0x94>)
 800dc12:	5c8a      	ldrb	r2, [r1, r2]
 800dc14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dc18:	7b7a      	ldrb	r2, [r7, #13]
 800dc1a:	4908      	ldr	r1, [pc, #32]	@ (800dc3c <UARTEx_SetNbDataToProcess+0x98>)
 800dc1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dc1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc22:	b29a      	uxth	r2, r3
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dc2a:	bf00      	nop
 800dc2c:	3714      	adds	r7, #20
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	08014774 	.word	0x08014774
 800dc3c:	0801477c 	.word	0x0801477c

0800dc40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc58:	f043 0201 	orr.w	r2, r3, #1
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800dc60:	2300      	movs	r3, #0
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	370c      	adds	r7, #12
 800dc66:	46bd      	mov	sp, r7
 800dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6c:	4770      	bx	lr

0800dc6e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800dc6e:	b084      	sub	sp, #16
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	f107 001c 	add.w	r0, r7, #28
 800dc7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d101      	bne.n	800dc8a <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800dc86:	2301      	movs	r3, #1
 800dc88:	e008      	b.n	800dc9c <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f7ff ffd8 	bl	800dc40 <USB_CoreReset>
 800dc90:	4603      	mov	r3, r0
 800dc92:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800dc9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3710      	adds	r7, #16
 800dca0:	46bd      	mov	sp, r7
 800dca2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dca6:	b004      	add	sp, #16
 800dca8:	4770      	bx	lr

0800dcaa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800dcaa:	b480      	push	{r7}
 800dcac:	b085      	sub	sp, #20
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800dcb8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800dcbc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	68fa      	ldr	r2, [r7, #12]
 800dcc2:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800dcc4:	2300      	movs	r3, #0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3714      	adds	r7, #20
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr

0800dcd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800dcd2:	b480      	push	{r7}
 800dcd4:	b085      	sub	sp, #20
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800dcda:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800dcde:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	43db      	mvns	r3, r3
 800dce8:	401a      	ands	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800dcee:	2300      	movs	r3, #0
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3714      	adds	r7, #20
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	460b      	mov	r3, r1
 800dd06:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800dd08:	78fb      	ldrb	r3, [r7, #3]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d106      	bne.n	800dd1c <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	641a      	str	r2, [r3, #64]	@ 0x40
 800dd1a:	e00b      	b.n	800dd34 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800dd1c:	78fb      	ldrb	r3, [r7, #3]
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d106      	bne.n	800dd30 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd26:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	641a      	str	r2, [r3, #64]	@ 0x40
 800dd2e:	e001      	b.n	800dd34 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800dd30:	2301      	movs	r3, #1
 800dd32:	e000      	b.n	800dd36 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800dd34:	2300      	movs	r3, #0
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	370c      	adds	r7, #12
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr

0800dd42 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800dd42:	b084      	sub	sp, #16
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	f107 001c 	add.w	r0, r7, #28
 800dd50:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2201      	movs	r2, #1
 800dd58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd5e:	f023 0201 	bic.w	r2, r3, #1
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800dd66:	2100      	movs	r1, #0
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f7ff ffc7 	bl	800dcfc <USB_SetCurrentMode>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2200      	movs	r2, #0
 800dd76:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800dd78:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd84:	b004      	add	sp, #16
 800dd86:	4770      	bx	lr

0800dd88 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b09f      	sub	sp, #124	@ 0x7c
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800dd92:	2300      	movs	r3, #0
 800dd94:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	009b      	lsls	r3, r3, #2
 800dda0:	4413      	add	r3, r2
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	4ba0      	ldr	r3, [pc, #640]	@ (800e028 <USB_ActivateEndpoint+0x2a0>)
 800dda6:	4013      	ands	r3, r2
 800dda8:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	78db      	ldrb	r3, [r3, #3]
 800ddae:	2b03      	cmp	r3, #3
 800ddb0:	d819      	bhi.n	800dde6 <USB_ActivateEndpoint+0x5e>
 800ddb2:	a201      	add	r2, pc, #4	@ (adr r2, 800ddb8 <USB_ActivateEndpoint+0x30>)
 800ddb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb8:	0800ddc9 	.word	0x0800ddc9
 800ddbc:	0800dddd 	.word	0x0800dddd
 800ddc0:	0800ddef 	.word	0x0800ddef
 800ddc4:	0800ddd3 	.word	0x0800ddd3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ddc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ddca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ddce:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800ddd0:	e00e      	b.n	800ddf0 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ddd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ddd4:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800ddd8:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800ddda:	e009      	b.n	800ddf0 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800dddc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ddde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800dde2:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800dde4:	e004      	b.n	800ddf0 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800dde6:	2301      	movs	r3, #1
 800dde8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800ddec:	e000      	b.n	800ddf0 <USB_ActivateEndpoint+0x68>
      break;
 800ddee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	441a      	add	r2, r3
 800ddfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ddfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de04:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	4413      	add	r3, r2
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	4b86      	ldr	r3, [pc, #536]	@ (800e02c <USB_ActivateEndpoint+0x2a4>)
 800de14:	4013      	ands	r3, r2
 800de16:	683a      	ldr	r2, [r7, #0]
 800de18:	7812      	ldrb	r2, [r2, #0]
 800de1a:	4313      	orrs	r3, r2
 800de1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800de1e:	687a      	ldr	r2, [r7, #4]
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	441a      	add	r2, r3
 800de28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de32:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	7b1b      	ldrb	r3, [r3, #12]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	f040 8177 	bne.w	800e12c <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	785b      	ldrb	r3, [r3, #1]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d079      	beq.n	800df3a <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	00db      	lsls	r3, r3, #3
 800de4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de54:	681a      	ldr	r2, [r3, #0]
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	00db      	lsls	r3, r3, #3
 800de5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de64:	0c12      	lsrs	r2, r2, #16
 800de66:	0412      	lsls	r2, r2, #16
 800de68:	601a      	str	r2, [r3, #0]
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	00db      	lsls	r3, r3, #3
 800de70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de78:	6819      	ldr	r1, [r3, #0]
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	88db      	ldrh	r3, [r3, #6]
 800de7e:	089b      	lsrs	r3, r3, #2
 800de80:	b29b      	uxth	r3, r3
 800de82:	009a      	lsls	r2, r3, #2
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	00db      	lsls	r3, r3, #3
 800de8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de92:	430a      	orrs	r2, r1
 800de94:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800de96:	687a      	ldr	r2, [r7, #4]
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	009b      	lsls	r3, r3, #2
 800de9e:	4413      	add	r3, r2
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	61bb      	str	r3, [r7, #24]
 800dea4:	69bb      	ldr	r3, [r7, #24]
 800dea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d013      	beq.n	800ded6 <USB_ActivateEndpoint+0x14e>
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	4413      	add	r3, r2
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	4b5c      	ldr	r3, [pc, #368]	@ (800e02c <USB_ActivateEndpoint+0x2a4>)
 800debc:	4013      	ands	r3, r2
 800debe:	617b      	str	r3, [r7, #20]
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	009b      	lsls	r3, r3, #2
 800dec8:	441a      	add	r2, r3
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ded0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ded4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	78db      	ldrb	r3, [r3, #3]
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d018      	beq.n	800df10 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	009b      	lsls	r3, r3, #2
 800dee6:	4413      	add	r3, r2
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	4b51      	ldr	r3, [pc, #324]	@ (800e030 <USB_ActivateEndpoint+0x2a8>)
 800deec:	4013      	ands	r3, r2
 800deee:	60fb      	str	r3, [r7, #12]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f083 0320 	eor.w	r3, r3, #32
 800def6:	60fb      	str	r3, [r7, #12]
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	009b      	lsls	r3, r3, #2
 800df00:	441a      	add	r2, r3
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df0c:	6013      	str	r3, [r2, #0]
 800df0e:	e28c      	b.n	800e42a <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800df10:	687a      	ldr	r2, [r7, #4]
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	009b      	lsls	r3, r3, #2
 800df18:	4413      	add	r3, r2
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	4b44      	ldr	r3, [pc, #272]	@ (800e030 <USB_ActivateEndpoint+0x2a8>)
 800df1e:	4013      	ands	r3, r2
 800df20:	613b      	str	r3, [r7, #16]
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	441a      	add	r2, r3
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df36:	6013      	str	r3, [r2, #0]
 800df38:	e277      	b.n	800e42a <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	00db      	lsls	r3, r3, #3
 800df40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df48:	685a      	ldr	r2, [r3, #4]
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	00db      	lsls	r3, r3, #3
 800df50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df58:	0c12      	lsrs	r2, r2, #16
 800df5a:	0412      	lsls	r2, r2, #16
 800df5c:	605a      	str	r2, [r3, #4]
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	00db      	lsls	r3, r3, #3
 800df64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df6c:	6859      	ldr	r1, [r3, #4]
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	88db      	ldrh	r3, [r3, #6]
 800df72:	089b      	lsrs	r3, r3, #2
 800df74:	b29b      	uxth	r3, r3
 800df76:	009a      	lsls	r2, r3, #2
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	00db      	lsls	r3, r3, #3
 800df7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df86:	430a      	orrs	r2, r1
 800df88:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	00db      	lsls	r3, r3, #3
 800df90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df98:	685a      	ldr	r2, [r3, #4]
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	00db      	lsls	r3, r3, #3
 800dfa0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfa4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfa8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800dfac:	605a      	str	r2, [r3, #4]
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	691b      	ldr	r3, [r3, #16]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d112      	bne.n	800dfdc <USB_ActivateEndpoint+0x254>
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	00db      	lsls	r3, r3, #3
 800dfbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfc4:	685a      	ldr	r2, [r3, #4]
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	00db      	lsls	r3, r3, #3
 800dfcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfd0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfd4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dfd8:	605a      	str	r2, [r3, #4]
 800dfda:	e04d      	b.n	800e078 <USB_ActivateEndpoint+0x2f0>
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	691b      	ldr	r3, [r3, #16]
 800dfe0:	2b3e      	cmp	r3, #62	@ 0x3e
 800dfe2:	d827      	bhi.n	800e034 <USB_ActivateEndpoint+0x2ac>
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	691b      	ldr	r3, [r3, #16]
 800dfe8:	085b      	lsrs	r3, r3, #1
 800dfea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	691b      	ldr	r3, [r3, #16]
 800dff0:	f003 0301 	and.w	r3, r3, #1
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d002      	beq.n	800dffe <USB_ActivateEndpoint+0x276>
 800dff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dffa:	3301      	adds	r3, #1
 800dffc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	00db      	lsls	r3, r3, #3
 800e004:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e008:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e00c:	6859      	ldr	r1, [r3, #4]
 800e00e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e010:	069a      	lsls	r2, r3, #26
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	00db      	lsls	r3, r3, #3
 800e018:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e01c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e020:	430a      	orrs	r2, r1
 800e022:	605a      	str	r2, [r3, #4]
 800e024:	e028      	b.n	800e078 <USB_ActivateEndpoint+0x2f0>
 800e026:	bf00      	nop
 800e028:	07ff898f 	.word	0x07ff898f
 800e02c:	07ff8f8f 	.word	0x07ff8f8f
 800e030:	07ff8fbf 	.word	0x07ff8fbf
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	691b      	ldr	r3, [r3, #16]
 800e038:	095b      	lsrs	r3, r3, #5
 800e03a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	691b      	ldr	r3, [r3, #16]
 800e040:	f003 031f 	and.w	r3, r3, #31
 800e044:	2b00      	cmp	r3, #0
 800e046:	d102      	bne.n	800e04e <USB_ActivateEndpoint+0x2c6>
 800e048:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e04a:	3b01      	subs	r3, #1
 800e04c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	00db      	lsls	r3, r3, #3
 800e054:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e058:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e05c:	685a      	ldr	r2, [r3, #4]
 800e05e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e060:	069b      	lsls	r3, r3, #26
 800e062:	431a      	orrs	r2, r3
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	00db      	lsls	r3, r3, #3
 800e06a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e06e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e072:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e076:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	009b      	lsls	r3, r3, #2
 800e080:	4413      	add	r3, r2
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e088:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d013      	beq.n	800e0b8 <USB_ActivateEndpoint+0x330>
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	009b      	lsls	r3, r3, #2
 800e098:	4413      	add	r3, r2
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	4b9c      	ldr	r3, [pc, #624]	@ (800e310 <USB_ActivateEndpoint+0x588>)
 800e09e:	4013      	ands	r3, r2
 800e0a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0a2:	687a      	ldr	r2, [r7, #4]
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	441a      	add	r2, r3
 800e0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e0b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0b6:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d11c      	bne.n	800e0fa <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	009b      	lsls	r3, r3, #2
 800e0c8:	4413      	add	r3, r2
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	4b91      	ldr	r3, [pc, #580]	@ (800e314 <USB_ActivateEndpoint+0x58c>)
 800e0ce:	4013      	ands	r3, r2
 800e0d0:	61fb      	str	r3, [r7, #28]
 800e0d2:	69fb      	ldr	r3, [r7, #28]
 800e0d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e0d8:	61fb      	str	r3, [r7, #28]
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e0e0:	61fb      	str	r3, [r7, #28]
 800e0e2:	687a      	ldr	r2, [r7, #4]
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	441a      	add	r2, r3
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0f6:	6013      	str	r3, [r2, #0]
 800e0f8:	e197      	b.n	800e42a <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	4413      	add	r3, r2
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	4b83      	ldr	r3, [pc, #524]	@ (800e314 <USB_ActivateEndpoint+0x58c>)
 800e108:	4013      	ands	r3, r2
 800e10a:	623b      	str	r3, [r7, #32]
 800e10c:	6a3b      	ldr	r3, [r7, #32]
 800e10e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e112:	623b      	str	r3, [r7, #32]
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	441a      	add	r2, r3
 800e11e:	6a3b      	ldr	r3, [r7, #32]
 800e120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e128:	6013      	str	r3, [r2, #0]
 800e12a:	e17e      	b.n	800e42a <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	78db      	ldrb	r3, [r3, #3]
 800e130:	2b02      	cmp	r3, #2
 800e132:	d114      	bne.n	800e15e <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	4413      	add	r3, r2
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	4b73      	ldr	r3, [pc, #460]	@ (800e310 <USB_ActivateEndpoint+0x588>)
 800e142:	4013      	ands	r3, r2
 800e144:	663b      	str	r3, [r7, #96]	@ 0x60
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	441a      	add	r2, r3
 800e150:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e152:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e15a:	6013      	str	r3, [r2, #0]
 800e15c:	e013      	b.n	800e186 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	4413      	add	r3, r2
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	4b6b      	ldr	r3, [pc, #428]	@ (800e318 <USB_ActivateEndpoint+0x590>)
 800e16c:	4013      	ands	r3, r2
 800e16e:	667b      	str	r3, [r7, #100]	@ 0x64
 800e170:	687a      	ldr	r2, [r7, #4]
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	441a      	add	r2, r3
 800e17a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e17c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e184:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	00db      	lsls	r3, r3, #3
 800e18c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e190:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	00db      	lsls	r3, r3, #3
 800e19c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1a4:	0c12      	lsrs	r2, r2, #16
 800e1a6:	0412      	lsls	r2, r2, #16
 800e1a8:	601a      	str	r2, [r3, #0]
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	00db      	lsls	r3, r3, #3
 800e1b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1b8:	6819      	ldr	r1, [r3, #0]
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	891b      	ldrh	r3, [r3, #8]
 800e1be:	089b      	lsrs	r3, r3, #2
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	009a      	lsls	r2, r3, #2
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	00db      	lsls	r3, r3, #3
 800e1ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1d2:	430a      	orrs	r2, r1
 800e1d4:	601a      	str	r2, [r3, #0]
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	00db      	lsls	r3, r3, #3
 800e1dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1e4:	685a      	ldr	r2, [r3, #4]
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	00db      	lsls	r3, r3, #3
 800e1ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1f4:	0c12      	lsrs	r2, r2, #16
 800e1f6:	0412      	lsls	r2, r2, #16
 800e1f8:	605a      	str	r2, [r3, #4]
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	00db      	lsls	r3, r3, #3
 800e200:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e204:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e208:	6859      	ldr	r1, [r3, #4]
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	895b      	ldrh	r3, [r3, #10]
 800e20e:	089b      	lsrs	r3, r3, #2
 800e210:	b29b      	uxth	r3, r3
 800e212:	009a      	lsls	r2, r3, #2
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	00db      	lsls	r3, r3, #3
 800e21a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e21e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e222:	430a      	orrs	r2, r1
 800e224:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	785b      	ldrb	r3, [r3, #1]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d178      	bne.n	800e320 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	4413      	add	r3, r2
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e23c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e23e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e242:	2b00      	cmp	r3, #0
 800e244:	d013      	beq.n	800e26e <USB_ActivateEndpoint+0x4e6>
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	4413      	add	r3, r2
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	4b2f      	ldr	r3, [pc, #188]	@ (800e310 <USB_ActivateEndpoint+0x588>)
 800e254:	4013      	ands	r3, r2
 800e256:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	009b      	lsls	r3, r3, #2
 800e260:	441a      	add	r2, r3
 800e262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e264:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e26c:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	009b      	lsls	r3, r3, #2
 800e276:	4413      	add	r3, r2
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e27e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e282:	2b00      	cmp	r3, #0
 800e284:	d013      	beq.n	800e2ae <USB_ActivateEndpoint+0x526>
 800e286:	687a      	ldr	r2, [r7, #4]
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	4413      	add	r3, r2
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	4b1f      	ldr	r3, [pc, #124]	@ (800e310 <USB_ActivateEndpoint+0x588>)
 800e294:	4013      	ands	r3, r2
 800e296:	637b      	str	r3, [r7, #52]	@ 0x34
 800e298:	687a      	ldr	r2, [r7, #4]
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	441a      	add	r2, r3
 800e2a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e2ac:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	781b      	ldrb	r3, [r3, #0]
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	4413      	add	r3, r2
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	4b16      	ldr	r3, [pc, #88]	@ (800e314 <USB_ActivateEndpoint+0x58c>)
 800e2bc:	4013      	ands	r3, r2
 800e2be:	633b      	str	r3, [r7, #48]	@ 0x30
 800e2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e2c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800e2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e2ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	441a      	add	r2, r3
 800e2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2e4:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	009b      	lsls	r3, r3, #2
 800e2ee:	4413      	add	r3, r2
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	4b0a      	ldr	r3, [pc, #40]	@ (800e31c <USB_ActivateEndpoint+0x594>)
 800e2f4:	4013      	ands	r3, r2
 800e2f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	441a      	add	r2, r3
 800e302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e30c:	6013      	str	r3, [r2, #0]
 800e30e:	e08c      	b.n	800e42a <USB_ActivateEndpoint+0x6a2>
 800e310:	07ff8f8f 	.word	0x07ff8f8f
 800e314:	07ffbf8f 	.word	0x07ffbf8f
 800e318:	07ff8e8f 	.word	0x07ff8e8f
 800e31c:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e320:	687a      	ldr	r2, [r7, #4]
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	009b      	lsls	r3, r3, #2
 800e328:	4413      	add	r3, r2
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e32e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e330:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e334:	2b00      	cmp	r3, #0
 800e336:	d013      	beq.n	800e360 <USB_ActivateEndpoint+0x5d8>
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	4413      	add	r3, r2
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	4b3d      	ldr	r3, [pc, #244]	@ (800e43c <USB_ActivateEndpoint+0x6b4>)
 800e346:	4013      	ands	r3, r2
 800e348:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e34a:	687a      	ldr	r2, [r7, #4]
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	441a      	add	r2, r3
 800e354:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e356:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e35a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e35e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	009b      	lsls	r3, r3, #2
 800e368:	4413      	add	r3, r2
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	657b      	str	r3, [r7, #84]	@ 0x54
 800e36e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e374:	2b00      	cmp	r3, #0
 800e376:	d013      	beq.n	800e3a0 <USB_ActivateEndpoint+0x618>
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	4413      	add	r3, r2
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	4b2d      	ldr	r3, [pc, #180]	@ (800e43c <USB_ActivateEndpoint+0x6b4>)
 800e386:	4013      	ands	r3, r2
 800e388:	653b      	str	r3, [r7, #80]	@ 0x50
 800e38a:	687a      	ldr	r2, [r7, #4]
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	441a      	add	r2, r3
 800e394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e39a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e39e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	78db      	ldrb	r3, [r3, #3]
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d018      	beq.n	800e3da <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	4413      	add	r3, r2
 800e3b2:	681a      	ldr	r2, [r3, #0]
 800e3b4:	4b22      	ldr	r3, [pc, #136]	@ (800e440 <USB_ActivateEndpoint+0x6b8>)
 800e3b6:	4013      	ands	r3, r2
 800e3b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e3ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3bc:	f083 0320 	eor.w	r3, r3, #32
 800e3c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	441a      	add	r2, r3
 800e3cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3d6:	6013      	str	r3, [r2, #0]
 800e3d8:	e013      	b.n	800e402 <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e3da:	687a      	ldr	r2, [r7, #4]
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	009b      	lsls	r3, r3, #2
 800e3e2:	4413      	add	r3, r2
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	4b16      	ldr	r3, [pc, #88]	@ (800e440 <USB_ActivateEndpoint+0x6b8>)
 800e3e8:	4013      	ands	r3, r2
 800e3ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	441a      	add	r2, r3
 800e3f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e400:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4413      	add	r3, r2
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	4b0d      	ldr	r3, [pc, #52]	@ (800e444 <USB_ActivateEndpoint+0x6bc>)
 800e410:	4013      	ands	r3, r2
 800e412:	647b      	str	r3, [r7, #68]	@ 0x44
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	441a      	add	r2, r3
 800e41e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e420:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e428:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800e42a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800e42e:	4618      	mov	r0, r3
 800e430:	377c      	adds	r7, #124	@ 0x7c
 800e432:	46bd      	mov	sp, r7
 800e434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e438:	4770      	bx	lr
 800e43a:	bf00      	nop
 800e43c:	07ff8f8f 	.word	0x07ff8f8f
 800e440:	07ff8fbf 	.word	0x07ff8fbf
 800e444:	07ffbf8f 	.word	0x07ffbf8f

0800e448 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e448:	b480      	push	{r7}
 800e44a:	b097      	sub	sp, #92	@ 0x5c
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	7b1b      	ldrb	r3, [r3, #12]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d16d      	bne.n	800e536 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	785b      	ldrb	r3, [r3, #1]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d034      	beq.n	800e4cc <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	4413      	add	r3, r2
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	613b      	str	r3, [r7, #16]
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e476:	2b00      	cmp	r3, #0
 800e478:	d013      	beq.n	800e4a2 <USB_DeactivateEndpoint+0x5a>
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	4413      	add	r3, r2
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	4b6d      	ldr	r3, [pc, #436]	@ (800e63c <USB_DeactivateEndpoint+0x1f4>)
 800e488:	4013      	ands	r3, r2
 800e48a:	60fb      	str	r3, [r7, #12]
 800e48c:	687a      	ldr	r2, [r7, #4]
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	441a      	add	r2, r3
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e49c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e4a0:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	4413      	add	r3, r2
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	4b64      	ldr	r3, [pc, #400]	@ (800e640 <USB_DeactivateEndpoint+0x1f8>)
 800e4b0:	4013      	ands	r3, r2
 800e4b2:	60bb      	str	r3, [r7, #8]
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	009b      	lsls	r3, r3, #2
 800e4bc:	441a      	add	r2, r3
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4c8:	6013      	str	r3, [r2, #0]
 800e4ca:	e139      	b.n	800e740 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e4cc:	687a      	ldr	r2, [r7, #4]
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	4413      	add	r3, r2
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	61fb      	str	r3, [r7, #28]
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d013      	beq.n	800e50c <USB_DeactivateEndpoint+0xc4>
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	009b      	lsls	r3, r3, #2
 800e4ec:	4413      	add	r3, r2
 800e4ee:	681a      	ldr	r2, [r3, #0]
 800e4f0:	4b52      	ldr	r3, [pc, #328]	@ (800e63c <USB_DeactivateEndpoint+0x1f4>)
 800e4f2:	4013      	ands	r3, r2
 800e4f4:	61bb      	str	r3, [r7, #24]
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	009b      	lsls	r3, r3, #2
 800e4fe:	441a      	add	r2, r3
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e50a:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e50c:	687a      	ldr	r2, [r7, #4]
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	4413      	add	r3, r2
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	4b4a      	ldr	r3, [pc, #296]	@ (800e644 <USB_DeactivateEndpoint+0x1fc>)
 800e51a:	4013      	ands	r3, r2
 800e51c:	617b      	str	r3, [r7, #20]
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	009b      	lsls	r3, r3, #2
 800e526:	441a      	add	r2, r3
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e52e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e532:	6013      	str	r3, [r2, #0]
 800e534:	e104      	b.n	800e740 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	785b      	ldrb	r3, [r3, #1]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f040 8084 	bne.w	800e648 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	4413      	add	r3, r2
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e554:	2b00      	cmp	r3, #0
 800e556:	d013      	beq.n	800e580 <USB_DeactivateEndpoint+0x138>
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	4413      	add	r3, r2
 800e562:	681a      	ldr	r2, [r3, #0]
 800e564:	4b35      	ldr	r3, [pc, #212]	@ (800e63c <USB_DeactivateEndpoint+0x1f4>)
 800e566:	4013      	ands	r3, r2
 800e568:	637b      	str	r3, [r7, #52]	@ 0x34
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	009b      	lsls	r3, r3, #2
 800e572:	441a      	add	r2, r3
 800e574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e576:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e57a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e57e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e580:	687a      	ldr	r2, [r7, #4]
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	781b      	ldrb	r3, [r3, #0]
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	4413      	add	r3, r2
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e594:	2b00      	cmp	r3, #0
 800e596:	d013      	beq.n	800e5c0 <USB_DeactivateEndpoint+0x178>
 800e598:	687a      	ldr	r2, [r7, #4]
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	009b      	lsls	r3, r3, #2
 800e5a0:	4413      	add	r3, r2
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	4b25      	ldr	r3, [pc, #148]	@ (800e63c <USB_DeactivateEndpoint+0x1f4>)
 800e5a6:	4013      	ands	r3, r2
 800e5a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	441a      	add	r2, r3
 800e5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e5ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e5be:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	009b      	lsls	r3, r3, #2
 800e5c8:	4413      	add	r3, r2
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	4b1b      	ldr	r3, [pc, #108]	@ (800e63c <USB_DeactivateEndpoint+0x1f4>)
 800e5ce:	4013      	ands	r3, r2
 800e5d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e5d2:	687a      	ldr	r2, [r7, #4]
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	009b      	lsls	r3, r3, #2
 800e5da:	441a      	add	r2, r3
 800e5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e5e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e5e6:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	009b      	lsls	r3, r3, #2
 800e5f0:	4413      	add	r3, r2
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	4b13      	ldr	r3, [pc, #76]	@ (800e644 <USB_DeactivateEndpoint+0x1fc>)
 800e5f6:	4013      	ands	r3, r2
 800e5f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	009b      	lsls	r3, r3, #2
 800e602:	441a      	add	r2, r3
 800e604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e60a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e60e:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e610:	687a      	ldr	r2, [r7, #4]
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	781b      	ldrb	r3, [r3, #0]
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	4413      	add	r3, r2
 800e61a:	681a      	ldr	r2, [r3, #0]
 800e61c:	4b08      	ldr	r3, [pc, #32]	@ (800e640 <USB_DeactivateEndpoint+0x1f8>)
 800e61e:	4013      	ands	r3, r2
 800e620:	623b      	str	r3, [r7, #32]
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	009b      	lsls	r3, r3, #2
 800e62a:	441a      	add	r2, r3
 800e62c:	6a3b      	ldr	r3, [r7, #32]
 800e62e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e636:	6013      	str	r3, [r2, #0]
 800e638:	e082      	b.n	800e740 <USB_DeactivateEndpoint+0x2f8>
 800e63a:	bf00      	nop
 800e63c:	07ff8f8f 	.word	0x07ff8f8f
 800e640:	07ff8fbf 	.word	0x07ff8fbf
 800e644:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e648:	687a      	ldr	r2, [r7, #4]
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	009b      	lsls	r3, r3, #2
 800e650:	4413      	add	r3, r2
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	657b      	str	r3, [r7, #84]	@ 0x54
 800e656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e658:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d013      	beq.n	800e688 <USB_DeactivateEndpoint+0x240>
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	009b      	lsls	r3, r3, #2
 800e668:	4413      	add	r3, r2
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	4b38      	ldr	r3, [pc, #224]	@ (800e750 <USB_DeactivateEndpoint+0x308>)
 800e66e:	4013      	ands	r3, r2
 800e670:	653b      	str	r3, [r7, #80]	@ 0x50
 800e672:	687a      	ldr	r2, [r7, #4]
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	441a      	add	r2, r3
 800e67c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e67e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e686:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	009b      	lsls	r3, r3, #2
 800e690:	4413      	add	r3, r2
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d013      	beq.n	800e6c8 <USB_DeactivateEndpoint+0x280>
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	4413      	add	r3, r2
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	4b28      	ldr	r3, [pc, #160]	@ (800e750 <USB_DeactivateEndpoint+0x308>)
 800e6ae:	4013      	ands	r3, r2
 800e6b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e6b2:	687a      	ldr	r2, [r7, #4]
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	009b      	lsls	r3, r3, #2
 800e6ba:	441a      	add	r2, r3
 800e6bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e6c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e6c6:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	009b      	lsls	r3, r3, #2
 800e6d0:	4413      	add	r3, r2
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	4b1e      	ldr	r3, [pc, #120]	@ (800e750 <USB_DeactivateEndpoint+0x308>)
 800e6d6:	4013      	ands	r3, r2
 800e6d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800e6da:	687a      	ldr	r2, [r7, #4]
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	441a      	add	r2, r3
 800e6e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e6ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6ee:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e6f0:	687a      	ldr	r2, [r7, #4]
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	4413      	add	r3, r2
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	4b15      	ldr	r3, [pc, #84]	@ (800e754 <USB_DeactivateEndpoint+0x30c>)
 800e6fe:	4013      	ands	r3, r2
 800e700:	643b      	str	r3, [r7, #64]	@ 0x40
 800e702:	687a      	ldr	r2, [r7, #4]
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	441a      	add	r2, r3
 800e70c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e70e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e716:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	009b      	lsls	r3, r3, #2
 800e720:	4413      	add	r3, r2
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	4b0c      	ldr	r3, [pc, #48]	@ (800e758 <USB_DeactivateEndpoint+0x310>)
 800e726:	4013      	ands	r3, r2
 800e728:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	009b      	lsls	r3, r3, #2
 800e732:	441a      	add	r2, r3
 800e734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e73a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e73e:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e740:	2300      	movs	r3, #0
}
 800e742:	4618      	mov	r0, r3
 800e744:	375c      	adds	r7, #92	@ 0x5c
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop
 800e750:	07ff8f8f 	.word	0x07ff8f8f
 800e754:	07ff8fbf 	.word	0x07ff8fbf
 800e758:	07ffbf8f 	.word	0x07ffbf8f

0800e75c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b096      	sub	sp, #88	@ 0x58
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	785b      	ldrb	r3, [r3, #1]
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	f040 84ed 	bne.w	800f14a <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	699a      	ldr	r2, [r3, #24]
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	691b      	ldr	r3, [r3, #16]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d903      	bls.n	800e784 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	691b      	ldr	r3, [r3, #16]
 800e780:	657b      	str	r3, [r7, #84]	@ 0x54
 800e782:	e002      	b.n	800e78a <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	699b      	ldr	r3, [r3, #24]
 800e788:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	7b1b      	ldrb	r3, [r3, #12]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d12e      	bne.n	800e7f0 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	6959      	ldr	r1, [r3, #20]
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	88da      	ldrh	r2, [r3, #6]
 800e79a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f001 f963 	bl	800fa6a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	00db      	lsls	r3, r3, #3
 800e7aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e7ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	00db      	lsls	r3, r3, #3
 800e7ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e7be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e7c2:	b292      	uxth	r2, r2
 800e7c4:	601a      	str	r2, [r3, #0]
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	00db      	lsls	r3, r3, #3
 800e7cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e7d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e7d4:	6819      	ldr	r1, [r3, #0]
 800e7d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7d8:	041a      	lsls	r2, r3, #16
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	781b      	ldrb	r3, [r3, #0]
 800e7de:	00db      	lsls	r3, r3, #3
 800e7e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e7e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e7e8:	430a      	orrs	r2, r1
 800e7ea:	601a      	str	r2, [r3, #0]
 800e7ec:	f000 bc90 	b.w	800f110 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	78db      	ldrb	r3, [r3, #3]
 800e7f4:	2b02      	cmp	r3, #2
 800e7f6:	f040 8332 	bne.w	800ee5e <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	6a1a      	ldr	r2, [r3, #32]
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	691b      	ldr	r3, [r3, #16]
 800e802:	429a      	cmp	r2, r3
 800e804:	f240 82e4 	bls.w	800edd0 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	4413      	add	r3, r2
 800e812:	681a      	ldr	r2, [r3, #0]
 800e814:	4ba4      	ldr	r3, [pc, #656]	@ (800eaa8 <USB_EPStartXfer+0x34c>)
 800e816:	4013      	ands	r3, r2
 800e818:	613b      	str	r3, [r7, #16]
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	009b      	lsls	r3, r3, #2
 800e822:	441a      	add	r2, r3
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e82a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e82e:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	6a1a      	ldr	r2, [r3, #32]
 800e834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e836:	1ad2      	subs	r2, r2, r3
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e83c:	687a      	ldr	r2, [r7, #4]
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	781b      	ldrb	r3, [r3, #0]
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	4413      	add	r3, r2
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f000 8161 	beq.w	800eb14 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	785b      	ldrb	r3, [r3, #1]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d16a      	bne.n	800e930 <USB_EPStartXfer+0x1d4>
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	00db      	lsls	r3, r3, #3
 800e860:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e864:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e868:	685a      	ldr	r2, [r3, #4]
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	00db      	lsls	r3, r3, #3
 800e870:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e874:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e878:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e87c:	605a      	str	r2, [r3, #4]
 800e87e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e880:	2b00      	cmp	r3, #0
 800e882:	d112      	bne.n	800e8aa <USB_EPStartXfer+0x14e>
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	00db      	lsls	r3, r3, #3
 800e88a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e88e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e892:	685a      	ldr	r2, [r3, #4]
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	00db      	lsls	r3, r3, #3
 800e89a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e89e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e8a6:	605a      	str	r2, [r3, #4]
 800e8a8:	e06a      	b.n	800e980 <USB_EPStartXfer+0x224>
 800e8aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8ac:	2b3e      	cmp	r3, #62	@ 0x3e
 800e8ae:	d81e      	bhi.n	800e8ee <USB_EPStartXfer+0x192>
 800e8b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8b2:	085b      	lsrs	r3, r3, #1
 800e8b4:	653b      	str	r3, [r7, #80]	@ 0x50
 800e8b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8b8:	f003 0301 	and.w	r3, r3, #1
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d002      	beq.n	800e8c6 <USB_EPStartXfer+0x16a>
 800e8c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	653b      	str	r3, [r7, #80]	@ 0x50
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	00db      	lsls	r3, r3, #3
 800e8cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8d4:	6859      	ldr	r1, [r3, #4]
 800e8d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8d8:	069a      	lsls	r2, r3, #26
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	00db      	lsls	r3, r3, #3
 800e8e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8e8:	430a      	orrs	r2, r1
 800e8ea:	605a      	str	r2, [r3, #4]
 800e8ec:	e048      	b.n	800e980 <USB_EPStartXfer+0x224>
 800e8ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8f0:	095b      	lsrs	r3, r3, #5
 800e8f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800e8f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8f6:	f003 031f 	and.w	r3, r3, #31
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d102      	bne.n	800e904 <USB_EPStartXfer+0x1a8>
 800e8fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e900:	3b01      	subs	r3, #1
 800e902:	653b      	str	r3, [r7, #80]	@ 0x50
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	00db      	lsls	r3, r3, #3
 800e90a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e90e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e912:	685a      	ldr	r2, [r3, #4]
 800e914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e916:	069b      	lsls	r3, r3, #26
 800e918:	431a      	orrs	r2, r3
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	00db      	lsls	r3, r3, #3
 800e920:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e924:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e928:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e92c:	605a      	str	r2, [r3, #4]
 800e92e:	e027      	b.n	800e980 <USB_EPStartXfer+0x224>
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	785b      	ldrb	r3, [r3, #1]
 800e934:	2b01      	cmp	r3, #1
 800e936:	d123      	bne.n	800e980 <USB_EPStartXfer+0x224>
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	00db      	lsls	r3, r3, #3
 800e93e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e942:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e946:	685a      	ldr	r2, [r3, #4]
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	00db      	lsls	r3, r3, #3
 800e94e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e952:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e956:	b292      	uxth	r2, r2
 800e958:	605a      	str	r2, [r3, #4]
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	00db      	lsls	r3, r3, #3
 800e960:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e964:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e968:	6859      	ldr	r1, [r3, #4]
 800e96a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e96c:	041a      	lsls	r2, r3, #16
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	00db      	lsls	r3, r3, #3
 800e974:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e978:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e97c:	430a      	orrs	r2, r1
 800e97e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	895b      	ldrh	r3, [r3, #10]
 800e984:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	6959      	ldr	r1, [r3, #20]
 800e98a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	8b7a      	ldrh	r2, [r7, #26]
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f001 f86a 	bl	800fa6a <USB_WritePMA>
            ep->xfer_buff += len;
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	695a      	ldr	r2, [r3, #20]
 800e99a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e99c:	441a      	add	r2, r3
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	6a1a      	ldr	r2, [r3, #32]
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	691b      	ldr	r3, [r3, #16]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d906      	bls.n	800e9bc <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	6a1a      	ldr	r2, [r3, #32]
 800e9b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9b4:	1ad2      	subs	r2, r2, r3
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	621a      	str	r2, [r3, #32]
 800e9ba:	e005      	b.n	800e9c8 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	6a1b      	ldr	r3, [r3, #32]
 800e9c0:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	785b      	ldrb	r3, [r3, #1]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d16d      	bne.n	800eaac <USB_EPStartXfer+0x350>
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	781b      	ldrb	r3, [r3, #0]
 800e9d4:	00db      	lsls	r3, r3, #3
 800e9d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	00db      	lsls	r3, r3, #3
 800e9e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9ee:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e9f2:	601a      	str	r2, [r3, #0]
 800e9f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d112      	bne.n	800ea20 <USB_EPStartXfer+0x2c4>
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	00db      	lsls	r3, r3, #3
 800ea00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea08:	681a      	ldr	r2, [r3, #0]
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	00db      	lsls	r3, r3, #3
 800ea10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea18:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ea1c:	601a      	str	r2, [r3, #0]
 800ea1e:	e06d      	b.n	800eafc <USB_EPStartXfer+0x3a0>
 800ea20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea22:	2b3e      	cmp	r3, #62	@ 0x3e
 800ea24:	d81e      	bhi.n	800ea64 <USB_EPStartXfer+0x308>
 800ea26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea28:	085b      	lsrs	r3, r3, #1
 800ea2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea2e:	f003 0301 	and.w	r3, r3, #1
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d002      	beq.n	800ea3c <USB_EPStartXfer+0x2e0>
 800ea36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea38:	3301      	adds	r3, #1
 800ea3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	00db      	lsls	r3, r3, #3
 800ea42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea4a:	6819      	ldr	r1, [r3, #0]
 800ea4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea4e:	069a      	lsls	r2, r3, #26
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	00db      	lsls	r3, r3, #3
 800ea56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea5e:	430a      	orrs	r2, r1
 800ea60:	601a      	str	r2, [r3, #0]
 800ea62:	e04b      	b.n	800eafc <USB_EPStartXfer+0x3a0>
 800ea64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea66:	095b      	lsrs	r3, r3, #5
 800ea68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea6c:	f003 031f 	and.w	r3, r3, #31
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d102      	bne.n	800ea7a <USB_EPStartXfer+0x31e>
 800ea74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea76:	3b01      	subs	r3, #1
 800ea78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	00db      	lsls	r3, r3, #3
 800ea80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea8c:	069b      	lsls	r3, r3, #26
 800ea8e:	431a      	orrs	r2, r3
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	00db      	lsls	r3, r3, #3
 800ea96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea9e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800eaa2:	601a      	str	r2, [r3, #0]
 800eaa4:	e02a      	b.n	800eafc <USB_EPStartXfer+0x3a0>
 800eaa6:	bf00      	nop
 800eaa8:	07ff8f8f 	.word	0x07ff8f8f
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	785b      	ldrb	r3, [r3, #1]
 800eab0:	2b01      	cmp	r3, #1
 800eab2:	d123      	bne.n	800eafc <USB_EPStartXfer+0x3a0>
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	00db      	lsls	r3, r3, #3
 800eaba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eabe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	00db      	lsls	r3, r3, #3
 800eaca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eace:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ead2:	b292      	uxth	r2, r2
 800ead4:	601a      	str	r2, [r3, #0]
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	00db      	lsls	r3, r3, #3
 800eadc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eae0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eae4:	6819      	ldr	r1, [r3, #0]
 800eae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eae8:	041a      	lsls	r2, r3, #16
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	00db      	lsls	r3, r3, #3
 800eaf0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eaf4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eaf8:	430a      	orrs	r2, r1
 800eafa:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	891b      	ldrh	r3, [r3, #8]
 800eb00:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	6959      	ldr	r1, [r3, #20]
 800eb06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	8b7a      	ldrh	r2, [r7, #26]
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 ffac 	bl	800fa6a <USB_WritePMA>
 800eb12:	e2fd      	b.n	800f110 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	785b      	ldrb	r3, [r3, #1]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d16a      	bne.n	800ebf2 <USB_EPStartXfer+0x496>
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	00db      	lsls	r3, r3, #3
 800eb22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	00db      	lsls	r3, r3, #3
 800eb32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb3a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800eb3e:	601a      	str	r2, [r3, #0]
 800eb40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d112      	bne.n	800eb6c <USB_EPStartXfer+0x410>
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	00db      	lsls	r3, r3, #3
 800eb4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb54:	681a      	ldr	r2, [r3, #0]
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	781b      	ldrb	r3, [r3, #0]
 800eb5a:	00db      	lsls	r3, r3, #3
 800eb5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb64:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800eb68:	601a      	str	r2, [r3, #0]
 800eb6a:	e06a      	b.n	800ec42 <USB_EPStartXfer+0x4e6>
 800eb6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb6e:	2b3e      	cmp	r3, #62	@ 0x3e
 800eb70:	d81e      	bhi.n	800ebb0 <USB_EPStartXfer+0x454>
 800eb72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb74:	085b      	lsrs	r3, r3, #1
 800eb76:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb7a:	f003 0301 	and.w	r3, r3, #1
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d002      	beq.n	800eb88 <USB_EPStartXfer+0x42c>
 800eb82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb84:	3301      	adds	r3, #1
 800eb86:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	00db      	lsls	r3, r3, #3
 800eb8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb96:	6819      	ldr	r1, [r3, #0]
 800eb98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb9a:	069a      	lsls	r2, r3, #26
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	00db      	lsls	r3, r3, #3
 800eba2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eba6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebaa:	430a      	orrs	r2, r1
 800ebac:	601a      	str	r2, [r3, #0]
 800ebae:	e048      	b.n	800ec42 <USB_EPStartXfer+0x4e6>
 800ebb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebb2:	095b      	lsrs	r3, r3, #5
 800ebb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ebb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebb8:	f003 031f 	and.w	r3, r3, #31
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d102      	bne.n	800ebc6 <USB_EPStartXfer+0x46a>
 800ebc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebc2:	3b01      	subs	r3, #1
 800ebc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	00db      	lsls	r3, r3, #3
 800ebcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebd0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebd8:	069b      	lsls	r3, r3, #26
 800ebda:	431a      	orrs	r2, r3
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	00db      	lsls	r3, r3, #3
 800ebe2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebe6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebea:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ebee:	601a      	str	r2, [r3, #0]
 800ebf0:	e027      	b.n	800ec42 <USB_EPStartXfer+0x4e6>
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	785b      	ldrb	r3, [r3, #1]
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d123      	bne.n	800ec42 <USB_EPStartXfer+0x4e6>
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	00db      	lsls	r3, r3, #3
 800ec00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	00db      	lsls	r3, r3, #3
 800ec10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec18:	b292      	uxth	r2, r2
 800ec1a:	601a      	str	r2, [r3, #0]
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	00db      	lsls	r3, r3, #3
 800ec22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec2a:	6819      	ldr	r1, [r3, #0]
 800ec2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec2e:	041a      	lsls	r2, r3, #16
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	00db      	lsls	r3, r3, #3
 800ec36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec3e:	430a      	orrs	r2, r1
 800ec40:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	891b      	ldrh	r3, [r3, #8]
 800ec46:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	6959      	ldr	r1, [r3, #20]
 800ec4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	8b7a      	ldrh	r2, [r7, #26]
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 ff09 	bl	800fa6a <USB_WritePMA>
            ep->xfer_buff += len;
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	695a      	ldr	r2, [r3, #20]
 800ec5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec5e:	441a      	add	r2, r3
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	6a1a      	ldr	r2, [r3, #32]
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	691b      	ldr	r3, [r3, #16]
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d906      	bls.n	800ec7e <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	6a1a      	ldr	r2, [r3, #32]
 800ec74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec76:	1ad2      	subs	r2, r2, r3
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	621a      	str	r2, [r3, #32]
 800ec7c:	e005      	b.n	800ec8a <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	6a1b      	ldr	r3, [r3, #32]
 800ec82:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	2200      	movs	r2, #0
 800ec88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	785b      	ldrb	r3, [r3, #1]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d16a      	bne.n	800ed68 <USB_EPStartXfer+0x60c>
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	00db      	lsls	r3, r3, #3
 800ec98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eca0:	685a      	ldr	r2, [r3, #4]
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	00db      	lsls	r3, r3, #3
 800eca8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecb0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ecb4:	605a      	str	r2, [r3, #4]
 800ecb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d112      	bne.n	800ece2 <USB_EPStartXfer+0x586>
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	00db      	lsls	r3, r3, #3
 800ecc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecca:	685a      	ldr	r2, [r3, #4]
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	00db      	lsls	r3, r3, #3
 800ecd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecd6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecda:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ecde:	605a      	str	r2, [r3, #4]
 800ece0:	e06a      	b.n	800edb8 <USB_EPStartXfer+0x65c>
 800ece2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ece4:	2b3e      	cmp	r3, #62	@ 0x3e
 800ece6:	d81e      	bhi.n	800ed26 <USB_EPStartXfer+0x5ca>
 800ece8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecea:	085b      	lsrs	r3, r3, #1
 800ecec:	647b      	str	r3, [r7, #68]	@ 0x44
 800ecee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecf0:	f003 0301 	and.w	r3, r3, #1
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d002      	beq.n	800ecfe <USB_EPStartXfer+0x5a2>
 800ecf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	647b      	str	r3, [r7, #68]	@ 0x44
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	00db      	lsls	r3, r3, #3
 800ed04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed0c:	6859      	ldr	r1, [r3, #4]
 800ed0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed10:	069a      	lsls	r2, r3, #26
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	00db      	lsls	r3, r3, #3
 800ed18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed20:	430a      	orrs	r2, r1
 800ed22:	605a      	str	r2, [r3, #4]
 800ed24:	e048      	b.n	800edb8 <USB_EPStartXfer+0x65c>
 800ed26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed28:	095b      	lsrs	r3, r3, #5
 800ed2a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed2e:	f003 031f 	and.w	r3, r3, #31
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d102      	bne.n	800ed3c <USB_EPStartXfer+0x5e0>
 800ed36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed38:	3b01      	subs	r3, #1
 800ed3a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	00db      	lsls	r3, r3, #3
 800ed42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed4a:	685a      	ldr	r2, [r3, #4]
 800ed4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed4e:	069b      	lsls	r3, r3, #26
 800ed50:	431a      	orrs	r2, r3
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	00db      	lsls	r3, r3, #3
 800ed58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed60:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ed64:	605a      	str	r2, [r3, #4]
 800ed66:	e027      	b.n	800edb8 <USB_EPStartXfer+0x65c>
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	785b      	ldrb	r3, [r3, #1]
 800ed6c:	2b01      	cmp	r3, #1
 800ed6e:	d123      	bne.n	800edb8 <USB_EPStartXfer+0x65c>
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	00db      	lsls	r3, r3, #3
 800ed76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed7e:	685a      	ldr	r2, [r3, #4]
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	00db      	lsls	r3, r3, #3
 800ed86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed8e:	b292      	uxth	r2, r2
 800ed90:	605a      	str	r2, [r3, #4]
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	00db      	lsls	r3, r3, #3
 800ed98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eda0:	6859      	ldr	r1, [r3, #4]
 800eda2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eda4:	041a      	lsls	r2, r3, #16
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	00db      	lsls	r3, r3, #3
 800edac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800edb4:	430a      	orrs	r2, r1
 800edb6:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	895b      	ldrh	r3, [r3, #10]
 800edbc:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	6959      	ldr	r1, [r3, #20]
 800edc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	8b7a      	ldrh	r2, [r7, #26]
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f000 fe4e 	bl	800fa6a <USB_WritePMA>
 800edce:	e19f      	b.n	800f110 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	6a1b      	ldr	r3, [r3, #32]
 800edd4:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	4413      	add	r3, r2
 800ede0:	681a      	ldr	r2, [r3, #0]
 800ede2:	4ba0      	ldr	r3, [pc, #640]	@ (800f064 <USB_EPStartXfer+0x908>)
 800ede4:	4013      	ands	r3, r2
 800ede6:	617b      	str	r3, [r7, #20]
 800ede8:	687a      	ldr	r2, [r7, #4]
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	009b      	lsls	r3, r3, #2
 800edf0:	441a      	add	r2, r3
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800edf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edfc:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	00db      	lsls	r3, r3, #3
 800ee04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee0c:	681a      	ldr	r2, [r3, #0]
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	00db      	lsls	r3, r3, #3
 800ee14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee1c:	b292      	uxth	r2, r2
 800ee1e:	601a      	str	r2, [r3, #0]
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	00db      	lsls	r3, r3, #3
 800ee26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee2e:	6819      	ldr	r1, [r3, #0]
 800ee30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee32:	041a      	lsls	r2, r3, #16
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	00db      	lsls	r3, r3, #3
 800ee3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee42:	430a      	orrs	r2, r1
 800ee44:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	891b      	ldrh	r3, [r3, #8]
 800ee4a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	6959      	ldr	r1, [r3, #20]
 800ee50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee52:	b29b      	uxth	r3, r3
 800ee54:	8b7a      	ldrh	r2, [r7, #26]
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f000 fe07 	bl	800fa6a <USB_WritePMA>
 800ee5c:	e158      	b.n	800f110 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	6a1a      	ldr	r2, [r3, #32]
 800ee62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee64:	1ad2      	subs	r2, r2, r3
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	4413      	add	r3, r2
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	f000 80a3 	beq.w	800efc6 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	785b      	ldrb	r3, [r3, #1]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d16a      	bne.n	800ef5e <USB_EPStartXfer+0x802>
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	00db      	lsls	r3, r3, #3
 800ee8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee96:	685a      	ldr	r2, [r3, #4]
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	00db      	lsls	r3, r3, #3
 800ee9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eea2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eea6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800eeaa:	605a      	str	r2, [r3, #4]
 800eeac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d112      	bne.n	800eed8 <USB_EPStartXfer+0x77c>
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	00db      	lsls	r3, r3, #3
 800eeb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eebc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eec0:	685a      	ldr	r2, [r3, #4]
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	00db      	lsls	r3, r3, #3
 800eec8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eecc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eed0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800eed4:	605a      	str	r2, [r3, #4]
 800eed6:	e06a      	b.n	800efae <USB_EPStartXfer+0x852>
 800eed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eeda:	2b3e      	cmp	r3, #62	@ 0x3e
 800eedc:	d81e      	bhi.n	800ef1c <USB_EPStartXfer+0x7c0>
 800eede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eee0:	085b      	lsrs	r3, r3, #1
 800eee2:	643b      	str	r3, [r7, #64]	@ 0x40
 800eee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eee6:	f003 0301 	and.w	r3, r3, #1
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d002      	beq.n	800eef4 <USB_EPStartXfer+0x798>
 800eeee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eef0:	3301      	adds	r3, #1
 800eef2:	643b      	str	r3, [r7, #64]	@ 0x40
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	00db      	lsls	r3, r3, #3
 800eefa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eefe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef02:	6859      	ldr	r1, [r3, #4]
 800ef04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef06:	069a      	lsls	r2, r3, #26
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	00db      	lsls	r3, r3, #3
 800ef0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef16:	430a      	orrs	r2, r1
 800ef18:	605a      	str	r2, [r3, #4]
 800ef1a:	e048      	b.n	800efae <USB_EPStartXfer+0x852>
 800ef1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef1e:	095b      	lsrs	r3, r3, #5
 800ef20:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef24:	f003 031f 	and.w	r3, r3, #31
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d102      	bne.n	800ef32 <USB_EPStartXfer+0x7d6>
 800ef2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef2e:	3b01      	subs	r3, #1
 800ef30:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	00db      	lsls	r3, r3, #3
 800ef38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef40:	685a      	ldr	r2, [r3, #4]
 800ef42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef44:	069b      	lsls	r3, r3, #26
 800ef46:	431a      	orrs	r2, r3
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	00db      	lsls	r3, r3, #3
 800ef4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef56:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ef5a:	605a      	str	r2, [r3, #4]
 800ef5c:	e027      	b.n	800efae <USB_EPStartXfer+0x852>
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	785b      	ldrb	r3, [r3, #1]
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	d123      	bne.n	800efae <USB_EPStartXfer+0x852>
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	00db      	lsls	r3, r3, #3
 800ef6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef74:	685a      	ldr	r2, [r3, #4]
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	00db      	lsls	r3, r3, #3
 800ef7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef84:	b292      	uxth	r2, r2
 800ef86:	605a      	str	r2, [r3, #4]
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	00db      	lsls	r3, r3, #3
 800ef8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef96:	6859      	ldr	r1, [r3, #4]
 800ef98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef9a:	041a      	lsls	r2, r3, #16
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	00db      	lsls	r3, r3, #3
 800efa2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efa6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efaa:	430a      	orrs	r2, r1
 800efac:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	895b      	ldrh	r3, [r3, #10]
 800efb2:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	6959      	ldr	r1, [r3, #20]
 800efb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efba:	b29b      	uxth	r3, r3
 800efbc:	8b7a      	ldrh	r2, [r7, #26]
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f000 fd53 	bl	800fa6a <USB_WritePMA>
 800efc4:	e0a4      	b.n	800f110 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	785b      	ldrb	r3, [r3, #1]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d16d      	bne.n	800f0aa <USB_EPStartXfer+0x94e>
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	00db      	lsls	r3, r3, #3
 800efd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	00db      	lsls	r3, r3, #3
 800efe4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efe8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efec:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800eff0:	601a      	str	r2, [r3, #0]
 800eff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d112      	bne.n	800f01e <USB_EPStartXfer+0x8c2>
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	00db      	lsls	r3, r3, #3
 800effe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f002:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	781b      	ldrb	r3, [r3, #0]
 800f00c:	00db      	lsls	r3, r3, #3
 800f00e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f012:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f016:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f01a:	601a      	str	r2, [r3, #0]
 800f01c:	e06d      	b.n	800f0fa <USB_EPStartXfer+0x99e>
 800f01e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f020:	2b3e      	cmp	r3, #62	@ 0x3e
 800f022:	d821      	bhi.n	800f068 <USB_EPStartXfer+0x90c>
 800f024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f026:	085b      	lsrs	r3, r3, #1
 800f028:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f02a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f02c:	f003 0301 	and.w	r3, r3, #1
 800f030:	2b00      	cmp	r3, #0
 800f032:	d002      	beq.n	800f03a <USB_EPStartXfer+0x8de>
 800f034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f036:	3301      	adds	r3, #1
 800f038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	00db      	lsls	r3, r3, #3
 800f040:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f044:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f048:	6819      	ldr	r1, [r3, #0]
 800f04a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f04c:	069a      	lsls	r2, r3, #26
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	00db      	lsls	r3, r3, #3
 800f054:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f058:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f05c:	430a      	orrs	r2, r1
 800f05e:	601a      	str	r2, [r3, #0]
 800f060:	e04b      	b.n	800f0fa <USB_EPStartXfer+0x99e>
 800f062:	bf00      	nop
 800f064:	07ff8e8f 	.word	0x07ff8e8f
 800f068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f06a:	095b      	lsrs	r3, r3, #5
 800f06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f06e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f070:	f003 031f 	and.w	r3, r3, #31
 800f074:	2b00      	cmp	r3, #0
 800f076:	d102      	bne.n	800f07e <USB_EPStartXfer+0x922>
 800f078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f07a:	3b01      	subs	r3, #1
 800f07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	00db      	lsls	r3, r3, #3
 800f084:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f088:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f090:	069b      	lsls	r3, r3, #26
 800f092:	431a      	orrs	r2, r3
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	00db      	lsls	r3, r3, #3
 800f09a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f09e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f0a6:	601a      	str	r2, [r3, #0]
 800f0a8:	e027      	b.n	800f0fa <USB_EPStartXfer+0x99e>
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	785b      	ldrb	r3, [r3, #1]
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	d123      	bne.n	800f0fa <USB_EPStartXfer+0x99e>
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	00db      	lsls	r3, r3, #3
 800f0b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0c0:	681a      	ldr	r2, [r3, #0]
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	00db      	lsls	r3, r3, #3
 800f0c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0d0:	b292      	uxth	r2, r2
 800f0d2:	601a      	str	r2, [r3, #0]
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	00db      	lsls	r3, r3, #3
 800f0da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0e2:	6819      	ldr	r1, [r3, #0]
 800f0e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0e6:	041a      	lsls	r2, r3, #16
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	00db      	lsls	r3, r3, #3
 800f0ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0f6:	430a      	orrs	r2, r1
 800f0f8:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	891b      	ldrh	r3, [r3, #8]
 800f0fe:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	6959      	ldr	r1, [r3, #20]
 800f104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f106:	b29b      	uxth	r3, r3
 800f108:	8b7a      	ldrh	r2, [r7, #26]
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f000 fcad 	bl	800fa6a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f110:	687a      	ldr	r2, [r7, #4]
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	4413      	add	r3, r2
 800f11a:	681a      	ldr	r2, [r3, #0]
 800f11c:	4b8b      	ldr	r3, [pc, #556]	@ (800f34c <USB_EPStartXfer+0xbf0>)
 800f11e:	4013      	ands	r3, r2
 800f120:	60fb      	str	r3, [r7, #12]
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	f083 0310 	eor.w	r3, r3, #16
 800f128:	60fb      	str	r3, [r7, #12]
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f083 0320 	eor.w	r3, r3, #32
 800f130:	60fb      	str	r3, [r7, #12]
 800f132:	687a      	ldr	r2, [r7, #4]
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	009b      	lsls	r3, r3, #2
 800f13a:	441a      	add	r2, r3
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f146:	6013      	str	r3, [r2, #0]
 800f148:	e36b      	b.n	800f822 <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	7b1b      	ldrb	r3, [r3, #12]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	f040 8081 	bne.w	800f256 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	699a      	ldr	r2, [r3, #24]
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	691b      	ldr	r3, [r3, #16]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d909      	bls.n	800f174 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	691b      	ldr	r3, [r3, #16]
 800f164:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	699a      	ldr	r2, [r3, #24]
 800f16a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f16c:	1ad2      	subs	r2, r2, r3
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	619a      	str	r2, [r3, #24]
 800f172:	e005      	b.n	800f180 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	699b      	ldr	r3, [r3, #24]
 800f178:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	2200      	movs	r2, #0
 800f17e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	00db      	lsls	r3, r3, #3
 800f186:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f18a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f18e:	685a      	ldr	r2, [r3, #4]
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	00db      	lsls	r3, r3, #3
 800f196:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f19a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f19e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f1a2:	605a      	str	r2, [r3, #4]
 800f1a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d112      	bne.n	800f1d0 <USB_EPStartXfer+0xa74>
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	00db      	lsls	r3, r3, #3
 800f1b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1b8:	685a      	ldr	r2, [r3, #4]
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	00db      	lsls	r3, r3, #3
 800f1c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1c8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f1cc:	605a      	str	r2, [r3, #4]
 800f1ce:	e30c      	b.n	800f7ea <USB_EPStartXfer+0x108e>
 800f1d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1d2:	2b3e      	cmp	r3, #62	@ 0x3e
 800f1d4:	d81e      	bhi.n	800f214 <USB_EPStartXfer+0xab8>
 800f1d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1d8:	085b      	lsrs	r3, r3, #1
 800f1da:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f1dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1de:	f003 0301 	and.w	r3, r3, #1
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d002      	beq.n	800f1ec <USB_EPStartXfer+0xa90>
 800f1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	00db      	lsls	r3, r3, #3
 800f1f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1fa:	6859      	ldr	r1, [r3, #4]
 800f1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1fe:	069a      	lsls	r2, r3, #26
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	00db      	lsls	r3, r3, #3
 800f206:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f20a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f20e:	430a      	orrs	r2, r1
 800f210:	605a      	str	r2, [r3, #4]
 800f212:	e2ea      	b.n	800f7ea <USB_EPStartXfer+0x108e>
 800f214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f216:	095b      	lsrs	r3, r3, #5
 800f218:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f21a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f21c:	f003 031f 	and.w	r3, r3, #31
 800f220:	2b00      	cmp	r3, #0
 800f222:	d102      	bne.n	800f22a <USB_EPStartXfer+0xace>
 800f224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f226:	3b01      	subs	r3, #1
 800f228:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	00db      	lsls	r3, r3, #3
 800f230:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f234:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f238:	685a      	ldr	r2, [r3, #4]
 800f23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f23c:	069b      	lsls	r3, r3, #26
 800f23e:	431a      	orrs	r2, r3
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	00db      	lsls	r3, r3, #3
 800f246:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f24a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f24e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f252:	605a      	str	r2, [r3, #4]
 800f254:	e2c9      	b.n	800f7ea <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	78db      	ldrb	r3, [r3, #3]
 800f25a:	2b02      	cmp	r3, #2
 800f25c:	f040 8176 	bne.w	800f54c <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	785b      	ldrb	r3, [r3, #1]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d173      	bne.n	800f350 <USB_EPStartXfer+0xbf4>
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	00db      	lsls	r3, r3, #3
 800f26e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f272:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	00db      	lsls	r3, r3, #3
 800f27e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f282:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f286:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f28a:	601a      	str	r2, [r3, #0]
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	691b      	ldr	r3, [r3, #16]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d112      	bne.n	800f2ba <USB_EPStartXfer+0xb5e>
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	00db      	lsls	r3, r3, #3
 800f29a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f29e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2a2:	681a      	ldr	r2, [r3, #0]
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	00db      	lsls	r3, r3, #3
 800f2aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2b2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f2b6:	601a      	str	r2, [r3, #0]
 800f2b8:	e073      	b.n	800f3a2 <USB_EPStartXfer+0xc46>
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	691b      	ldr	r3, [r3, #16]
 800f2be:	2b3e      	cmp	r3, #62	@ 0x3e
 800f2c0:	d820      	bhi.n	800f304 <USB_EPStartXfer+0xba8>
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	691b      	ldr	r3, [r3, #16]
 800f2c6:	085b      	lsrs	r3, r3, #1
 800f2c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	691b      	ldr	r3, [r3, #16]
 800f2ce:	f003 0301 	and.w	r3, r3, #1
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d002      	beq.n	800f2dc <USB_EPStartXfer+0xb80>
 800f2d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2d8:	3301      	adds	r3, #1
 800f2da:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	00db      	lsls	r3, r3, #3
 800f2e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2ea:	6819      	ldr	r1, [r3, #0]
 800f2ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2ee:	069a      	lsls	r2, r3, #26
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	00db      	lsls	r3, r3, #3
 800f2f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2fe:	430a      	orrs	r2, r1
 800f300:	601a      	str	r2, [r3, #0]
 800f302:	e04e      	b.n	800f3a2 <USB_EPStartXfer+0xc46>
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	691b      	ldr	r3, [r3, #16]
 800f308:	095b      	lsrs	r3, r3, #5
 800f30a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	691b      	ldr	r3, [r3, #16]
 800f310:	f003 031f 	and.w	r3, r3, #31
 800f314:	2b00      	cmp	r3, #0
 800f316:	d102      	bne.n	800f31e <USB_EPStartXfer+0xbc2>
 800f318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f31a:	3b01      	subs	r3, #1
 800f31c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	00db      	lsls	r3, r3, #3
 800f324:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f328:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f32c:	681a      	ldr	r2, [r3, #0]
 800f32e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f330:	069b      	lsls	r3, r3, #26
 800f332:	431a      	orrs	r2, r3
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	00db      	lsls	r3, r3, #3
 800f33a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f33e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f342:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f346:	601a      	str	r2, [r3, #0]
 800f348:	e02b      	b.n	800f3a2 <USB_EPStartXfer+0xc46>
 800f34a:	bf00      	nop
 800f34c:	07ff8fbf 	.word	0x07ff8fbf
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	785b      	ldrb	r3, [r3, #1]
 800f354:	2b01      	cmp	r3, #1
 800f356:	d124      	bne.n	800f3a2 <USB_EPStartXfer+0xc46>
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	00db      	lsls	r3, r3, #3
 800f35e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f362:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	00db      	lsls	r3, r3, #3
 800f36e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f372:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f376:	b292      	uxth	r2, r2
 800f378:	601a      	str	r2, [r3, #0]
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	781b      	ldrb	r3, [r3, #0]
 800f37e:	00db      	lsls	r3, r3, #3
 800f380:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f384:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f388:	6819      	ldr	r1, [r3, #0]
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	691b      	ldr	r3, [r3, #16]
 800f38e:	041a      	lsls	r2, r3, #16
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	00db      	lsls	r3, r3, #3
 800f396:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f39a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f39e:	430a      	orrs	r2, r1
 800f3a0:	601a      	str	r2, [r3, #0]
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	785b      	ldrb	r3, [r3, #1]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d170      	bne.n	800f48c <USB_EPStartXfer+0xd30>
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	00db      	lsls	r3, r3, #3
 800f3b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3b8:	685a      	ldr	r2, [r3, #4]
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	00db      	lsls	r3, r3, #3
 800f3c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3c8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f3cc:	605a      	str	r2, [r3, #4]
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	691b      	ldr	r3, [r3, #16]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d112      	bne.n	800f3fc <USB_EPStartXfer+0xca0>
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	00db      	lsls	r3, r3, #3
 800f3dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3e4:	685a      	ldr	r2, [r3, #4]
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	781b      	ldrb	r3, [r3, #0]
 800f3ea:	00db      	lsls	r3, r3, #3
 800f3ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3f4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f3f8:	605a      	str	r2, [r3, #4]
 800f3fa:	e070      	b.n	800f4de <USB_EPStartXfer+0xd82>
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	691b      	ldr	r3, [r3, #16]
 800f400:	2b3e      	cmp	r3, #62	@ 0x3e
 800f402:	d820      	bhi.n	800f446 <USB_EPStartXfer+0xcea>
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	691b      	ldr	r3, [r3, #16]
 800f408:	085b      	lsrs	r3, r3, #1
 800f40a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	691b      	ldr	r3, [r3, #16]
 800f410:	f003 0301 	and.w	r3, r3, #1
 800f414:	2b00      	cmp	r3, #0
 800f416:	d002      	beq.n	800f41e <USB_EPStartXfer+0xcc2>
 800f418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f41a:	3301      	adds	r3, #1
 800f41c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	00db      	lsls	r3, r3, #3
 800f424:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f428:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f42c:	6859      	ldr	r1, [r3, #4]
 800f42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f430:	069a      	lsls	r2, r3, #26
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	00db      	lsls	r3, r3, #3
 800f438:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f43c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f440:	430a      	orrs	r2, r1
 800f442:	605a      	str	r2, [r3, #4]
 800f444:	e04b      	b.n	800f4de <USB_EPStartXfer+0xd82>
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	691b      	ldr	r3, [r3, #16]
 800f44a:	095b      	lsrs	r3, r3, #5
 800f44c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	691b      	ldr	r3, [r3, #16]
 800f452:	f003 031f 	and.w	r3, r3, #31
 800f456:	2b00      	cmp	r3, #0
 800f458:	d102      	bne.n	800f460 <USB_EPStartXfer+0xd04>
 800f45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f45c:	3b01      	subs	r3, #1
 800f45e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	00db      	lsls	r3, r3, #3
 800f466:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f46a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f46e:	685a      	ldr	r2, [r3, #4]
 800f470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f472:	069b      	lsls	r3, r3, #26
 800f474:	431a      	orrs	r2, r3
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	00db      	lsls	r3, r3, #3
 800f47c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f480:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f484:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f488:	605a      	str	r2, [r3, #4]
 800f48a:	e028      	b.n	800f4de <USB_EPStartXfer+0xd82>
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	785b      	ldrb	r3, [r3, #1]
 800f490:	2b01      	cmp	r3, #1
 800f492:	d124      	bne.n	800f4de <USB_EPStartXfer+0xd82>
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	00db      	lsls	r3, r3, #3
 800f49a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f49e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4a2:	685a      	ldr	r2, [r3, #4]
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	00db      	lsls	r3, r3, #3
 800f4aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4b2:	b292      	uxth	r2, r2
 800f4b4:	605a      	str	r2, [r3, #4]
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	00db      	lsls	r3, r3, #3
 800f4bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4c4:	6859      	ldr	r1, [r3, #4]
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	691b      	ldr	r3, [r3, #16]
 800f4ca:	041a      	lsls	r2, r3, #16
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	00db      	lsls	r3, r3, #3
 800f4d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4da:	430a      	orrs	r2, r1
 800f4dc:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	69db      	ldr	r3, [r3, #28]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	f000 8181 	beq.w	800f7ea <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800f4e8:	687a      	ldr	r2, [r7, #4]
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	009b      	lsls	r3, r3, #2
 800f4f0:	4413      	add	r3, r2
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f4f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f4f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d004      	beq.n	800f50a <USB_EPStartXfer+0xdae>
 800f500:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f506:	2b00      	cmp	r3, #0
 800f508:	d10b      	bne.n	800f522 <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f50a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f50c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f510:	2b00      	cmp	r3, #0
 800f512:	f040 816a 	bne.w	800f7ea <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f516:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	f040 8164 	bne.w	800f7ea <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f522:	687a      	ldr	r2, [r7, #4]
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	009b      	lsls	r3, r3, #2
 800f52a:	4413      	add	r3, r2
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	4b98      	ldr	r3, [pc, #608]	@ (800f790 <USB_EPStartXfer+0x1034>)
 800f530:	4013      	ands	r3, r2
 800f532:	623b      	str	r3, [r7, #32]
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	009b      	lsls	r3, r3, #2
 800f53c:	441a      	add	r2, r3
 800f53e:	6a3b      	ldr	r3, [r7, #32]
 800f540:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f544:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f548:	6013      	str	r3, [r2, #0]
 800f54a:	e14e      	b.n	800f7ea <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	78db      	ldrb	r3, [r3, #3]
 800f550:	2b01      	cmp	r3, #1
 800f552:	f040 8148 	bne.w	800f7e6 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	699a      	ldr	r2, [r3, #24]
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	691b      	ldr	r3, [r3, #16]
 800f55e:	429a      	cmp	r2, r3
 800f560:	d909      	bls.n	800f576 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	691b      	ldr	r3, [r3, #16]
 800f566:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	699a      	ldr	r2, [r3, #24]
 800f56c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f56e:	1ad2      	subs	r2, r2, r3
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	619a      	str	r2, [r3, #24]
 800f574:	e005      	b.n	800f582 <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	699b      	ldr	r3, [r3, #24]
 800f57a:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	2200      	movs	r2, #0
 800f580:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	785b      	ldrb	r3, [r3, #1]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d16a      	bne.n	800f660 <USB_EPStartXfer+0xf04>
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	00db      	lsls	r3, r3, #3
 800f590:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f594:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f598:	681a      	ldr	r2, [r3, #0]
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	00db      	lsls	r3, r3, #3
 800f5a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5a8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f5ac:	601a      	str	r2, [r3, #0]
 800f5ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d112      	bne.n	800f5da <USB_EPStartXfer+0xe7e>
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	00db      	lsls	r3, r3, #3
 800f5ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	00db      	lsls	r3, r3, #3
 800f5ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5d2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f5d6:	601a      	str	r2, [r3, #0]
 800f5d8:	e06a      	b.n	800f6b0 <USB_EPStartXfer+0xf54>
 800f5da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5dc:	2b3e      	cmp	r3, #62	@ 0x3e
 800f5de:	d81e      	bhi.n	800f61e <USB_EPStartXfer+0xec2>
 800f5e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5e2:	085b      	lsrs	r3, r3, #1
 800f5e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f5e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5e8:	f003 0301 	and.w	r3, r3, #1
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d002      	beq.n	800f5f6 <USB_EPStartXfer+0xe9a>
 800f5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f2:	3301      	adds	r3, #1
 800f5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	00db      	lsls	r3, r3, #3
 800f5fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f600:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f604:	6819      	ldr	r1, [r3, #0]
 800f606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f608:	069a      	lsls	r2, r3, #26
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	00db      	lsls	r3, r3, #3
 800f610:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f614:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f618:	430a      	orrs	r2, r1
 800f61a:	601a      	str	r2, [r3, #0]
 800f61c:	e048      	b.n	800f6b0 <USB_EPStartXfer+0xf54>
 800f61e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f620:	095b      	lsrs	r3, r3, #5
 800f622:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f626:	f003 031f 	and.w	r3, r3, #31
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d102      	bne.n	800f634 <USB_EPStartXfer+0xed8>
 800f62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f630:	3b01      	subs	r3, #1
 800f632:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	00db      	lsls	r3, r3, #3
 800f63a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f63e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f646:	069b      	lsls	r3, r3, #26
 800f648:	431a      	orrs	r2, r3
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	00db      	lsls	r3, r3, #3
 800f650:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f654:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f658:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f65c:	601a      	str	r2, [r3, #0]
 800f65e:	e027      	b.n	800f6b0 <USB_EPStartXfer+0xf54>
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	785b      	ldrb	r3, [r3, #1]
 800f664:	2b01      	cmp	r3, #1
 800f666:	d123      	bne.n	800f6b0 <USB_EPStartXfer+0xf54>
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	00db      	lsls	r3, r3, #3
 800f66e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f672:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	00db      	lsls	r3, r3, #3
 800f67e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f682:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f686:	b292      	uxth	r2, r2
 800f688:	601a      	str	r2, [r3, #0]
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	00db      	lsls	r3, r3, #3
 800f690:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f694:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f698:	6819      	ldr	r1, [r3, #0]
 800f69a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f69c:	041a      	lsls	r2, r3, #16
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	00db      	lsls	r3, r3, #3
 800f6a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6ac:	430a      	orrs	r2, r1
 800f6ae:	601a      	str	r2, [r3, #0]
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	785b      	ldrb	r3, [r3, #1]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d16d      	bne.n	800f794 <USB_EPStartXfer+0x1038>
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	00db      	lsls	r3, r3, #3
 800f6be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6c6:	685a      	ldr	r2, [r3, #4]
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	00db      	lsls	r3, r3, #3
 800f6ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6d6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f6da:	605a      	str	r2, [r3, #4]
 800f6dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d112      	bne.n	800f708 <USB_EPStartXfer+0xfac>
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	00db      	lsls	r3, r3, #3
 800f6e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6f0:	685a      	ldr	r2, [r3, #4]
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	00db      	lsls	r3, r3, #3
 800f6f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f700:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f704:	605a      	str	r2, [r3, #4]
 800f706:	e070      	b.n	800f7ea <USB_EPStartXfer+0x108e>
 800f708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f70a:	2b3e      	cmp	r3, #62	@ 0x3e
 800f70c:	d81e      	bhi.n	800f74c <USB_EPStartXfer+0xff0>
 800f70e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f710:	085b      	lsrs	r3, r3, #1
 800f712:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f716:	f003 0301 	and.w	r3, r3, #1
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d002      	beq.n	800f724 <USB_EPStartXfer+0xfc8>
 800f71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f720:	3301      	adds	r3, #1
 800f722:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	00db      	lsls	r3, r3, #3
 800f72a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f72e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f732:	6859      	ldr	r1, [r3, #4]
 800f734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f736:	069a      	lsls	r2, r3, #26
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	00db      	lsls	r3, r3, #3
 800f73e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f742:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f746:	430a      	orrs	r2, r1
 800f748:	605a      	str	r2, [r3, #4]
 800f74a:	e04e      	b.n	800f7ea <USB_EPStartXfer+0x108e>
 800f74c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f74e:	095b      	lsrs	r3, r3, #5
 800f750:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f754:	f003 031f 	and.w	r3, r3, #31
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d102      	bne.n	800f762 <USB_EPStartXfer+0x1006>
 800f75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f75e:	3b01      	subs	r3, #1
 800f760:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	781b      	ldrb	r3, [r3, #0]
 800f766:	00db      	lsls	r3, r3, #3
 800f768:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f76c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f770:	685a      	ldr	r2, [r3, #4]
 800f772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f774:	069b      	lsls	r3, r3, #26
 800f776:	431a      	orrs	r2, r3
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	00db      	lsls	r3, r3, #3
 800f77e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f782:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f786:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f78a:	605a      	str	r2, [r3, #4]
 800f78c:	e02d      	b.n	800f7ea <USB_EPStartXfer+0x108e>
 800f78e:	bf00      	nop
 800f790:	07ff8f8f 	.word	0x07ff8f8f
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	785b      	ldrb	r3, [r3, #1]
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d126      	bne.n	800f7ea <USB_EPStartXfer+0x108e>
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	00db      	lsls	r3, r3, #3
 800f7a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f7a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f7aa:	685a      	ldr	r2, [r3, #4]
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	00db      	lsls	r3, r3, #3
 800f7b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f7b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f7ba:	b292      	uxth	r2, r2
 800f7bc:	605a      	str	r2, [r3, #4]
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	781b      	ldrb	r3, [r3, #0]
 800f7c2:	00db      	lsls	r3, r3, #3
 800f7c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f7c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f7cc:	6859      	ldr	r1, [r3, #4]
 800f7ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f7d0:	041a      	lsls	r2, r3, #16
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	00db      	lsls	r3, r3, #3
 800f7d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f7dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f7e0:	430a      	orrs	r2, r1
 800f7e2:	605a      	str	r2, [r3, #4]
 800f7e4:	e001      	b.n	800f7ea <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	e01c      	b.n	800f824 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f7ea:	687a      	ldr	r2, [r7, #4]
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	009b      	lsls	r3, r3, #2
 800f7f2:	4413      	add	r3, r2
 800f7f4:	681a      	ldr	r2, [r3, #0]
 800f7f6:	4b0d      	ldr	r3, [pc, #52]	@ (800f82c <USB_EPStartXfer+0x10d0>)
 800f7f8:	4013      	ands	r3, r2
 800f7fa:	61fb      	str	r3, [r7, #28]
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f802:	61fb      	str	r3, [r7, #28]
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f80a:	61fb      	str	r3, [r7, #28]
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	009b      	lsls	r3, r3, #2
 800f814:	441a      	add	r2, r3
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f81c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f820:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f822:	2300      	movs	r3, #0
}
 800f824:	4618      	mov	r0, r3
 800f826:	3758      	adds	r7, #88	@ 0x58
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	07ffbf8f 	.word	0x07ffbf8f

0800f830 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	785b      	ldrb	r3, [r3, #1]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d018      	beq.n	800f874 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	009b      	lsls	r3, r3, #2
 800f84a:	4413      	add	r3, r2
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	4b19      	ldr	r3, [pc, #100]	@ (800f8b4 <USB_EPSetStall+0x84>)
 800f850:	4013      	ands	r3, r2
 800f852:	60bb      	str	r3, [r7, #8]
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	f083 0310 	eor.w	r3, r3, #16
 800f85a:	60bb      	str	r3, [r7, #8]
 800f85c:	687a      	ldr	r2, [r7, #4]
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	009b      	lsls	r3, r3, #2
 800f864:	441a      	add	r2, r3
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f86c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f870:	6013      	str	r3, [r2, #0]
 800f872:	e017      	b.n	800f8a4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	009b      	lsls	r3, r3, #2
 800f87c:	4413      	add	r3, r2
 800f87e:	681a      	ldr	r2, [r3, #0]
 800f880:	4b0d      	ldr	r3, [pc, #52]	@ (800f8b8 <USB_EPSetStall+0x88>)
 800f882:	4013      	ands	r3, r2
 800f884:	60fb      	str	r3, [r7, #12]
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f88c:	60fb      	str	r3, [r7, #12]
 800f88e:	687a      	ldr	r2, [r7, #4]
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	009b      	lsls	r3, r3, #2
 800f896:	441a      	add	r2, r3
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f89e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f8a4:	2300      	movs	r3, #0
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3714      	adds	r7, #20
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr
 800f8b2:	bf00      	nop
 800f8b4:	07ff8fbf 	.word	0x07ff8fbf
 800f8b8:	07ffbf8f 	.word	0x07ffbf8f

0800f8bc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800f8bc:	b480      	push	{r7}
 800f8be:	b089      	sub	sp, #36	@ 0x24
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
 800f8c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	7b1b      	ldrb	r3, [r3, #12]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d17c      	bne.n	800f9c8 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	785b      	ldrb	r3, [r3, #1]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d03c      	beq.n	800f950 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f8d6:	687a      	ldr	r2, [r7, #4]
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	781b      	ldrb	r3, [r3, #0]
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	4413      	add	r3, r2
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	613b      	str	r3, [r7, #16]
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d013      	beq.n	800f916 <USB_EPClearStall+0x5a>
 800f8ee:	687a      	ldr	r2, [r7, #4]
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	009b      	lsls	r3, r3, #2
 800f8f6:	4413      	add	r3, r2
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	4b37      	ldr	r3, [pc, #220]	@ (800f9d8 <USB_EPClearStall+0x11c>)
 800f8fc:	4013      	ands	r3, r2
 800f8fe:	60fb      	str	r3, [r7, #12]
 800f900:	687a      	ldr	r2, [r7, #4]
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	441a      	add	r2, r3
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f910:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f914:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	78db      	ldrb	r3, [r3, #3]
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d054      	beq.n	800f9c8 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f91e:	687a      	ldr	r2, [r7, #4]
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	009b      	lsls	r3, r3, #2
 800f926:	4413      	add	r3, r2
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	4b2c      	ldr	r3, [pc, #176]	@ (800f9dc <USB_EPClearStall+0x120>)
 800f92c:	4013      	ands	r3, r2
 800f92e:	60bb      	str	r3, [r7, #8]
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	f083 0320 	eor.w	r3, r3, #32
 800f936:	60bb      	str	r3, [r7, #8]
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	441a      	add	r2, r3
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f94c:	6013      	str	r3, [r2, #0]
 800f94e:	e03b      	b.n	800f9c8 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f950:	687a      	ldr	r2, [r7, #4]
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	009b      	lsls	r3, r3, #2
 800f958:	4413      	add	r3, r2
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	61fb      	str	r3, [r7, #28]
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f964:	2b00      	cmp	r3, #0
 800f966:	d013      	beq.n	800f990 <USB_EPClearStall+0xd4>
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	781b      	ldrb	r3, [r3, #0]
 800f96e:	009b      	lsls	r3, r3, #2
 800f970:	4413      	add	r3, r2
 800f972:	681a      	ldr	r2, [r3, #0]
 800f974:	4b18      	ldr	r3, [pc, #96]	@ (800f9d8 <USB_EPClearStall+0x11c>)
 800f976:	4013      	ands	r3, r2
 800f978:	61bb      	str	r3, [r7, #24]
 800f97a:	687a      	ldr	r2, [r7, #4]
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	009b      	lsls	r3, r3, #2
 800f982:	441a      	add	r2, r3
 800f984:	69bb      	ldr	r3, [r7, #24]
 800f986:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f98a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f98e:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f990:	687a      	ldr	r2, [r7, #4]
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	781b      	ldrb	r3, [r3, #0]
 800f996:	009b      	lsls	r3, r3, #2
 800f998:	4413      	add	r3, r2
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	4b10      	ldr	r3, [pc, #64]	@ (800f9e0 <USB_EPClearStall+0x124>)
 800f99e:	4013      	ands	r3, r2
 800f9a0:	617b      	str	r3, [r7, #20]
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f9a8:	617b      	str	r3, [r7, #20]
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f9b0:	617b      	str	r3, [r7, #20]
 800f9b2:	687a      	ldr	r2, [r7, #4]
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	009b      	lsls	r3, r3, #2
 800f9ba:	441a      	add	r2, r3
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f9c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f9c6:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f9c8:	2300      	movs	r3, #0
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3724      	adds	r7, #36	@ 0x24
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d4:	4770      	bx	lr
 800f9d6:	bf00      	nop
 800f9d8:	07ff8f8f 	.word	0x07ff8f8f
 800f9dc:	07ff8fbf 	.word	0x07ff8fbf
 800f9e0:	07ffbf8f 	.word	0x07ffbf8f

0800f9e4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f9f0:	78fb      	ldrb	r3, [r7, #3]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d102      	bne.n	800f9fc <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2280      	movs	r2, #128	@ 0x80
 800f9fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f9fc:	2300      	movs	r3, #0
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	370c      	adds	r7, #12
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr

0800fa0a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800fa0a:	b480      	push	{r7}
 800fa0c:	b083      	sub	sp, #12
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa16:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800fa1e:	2300      	movs	r3, #0
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	370c      	adds	r7, #12
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr

0800fa2c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b083      	sub	sp, #12
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa38:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800fa40:	2300      	movs	r3, #0
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	370c      	adds	r7, #12
 800fa46:	46bd      	mov	sp, r7
 800fa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4c:	4770      	bx	lr

0800fa4e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800fa4e:	b480      	push	{r7}
 800fa50:	b085      	sub	sp, #20
 800fa52:	af00      	add	r7, sp, #0
 800fa54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa5a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
}
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3714      	adds	r7, #20
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr

0800fa6a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fa6a:	b480      	push	{r7}
 800fa6c:	b08b      	sub	sp, #44	@ 0x2c
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	60f8      	str	r0, [r7, #12]
 800fa72:	60b9      	str	r1, [r7, #8]
 800fa74:	4611      	mov	r1, r2
 800fa76:	461a      	mov	r2, r3
 800fa78:	460b      	mov	r3, r1
 800fa7a:	80fb      	strh	r3, [r7, #6]
 800fa7c:	4613      	mov	r3, r2
 800fa7e:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800fa80:	88bb      	ldrh	r3, [r7, #4]
 800fa82:	3303      	adds	r3, #3
 800fa84:	089b      	lsrs	r3, r3, #2
 800fa86:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800fa88:	88bb      	ldrh	r3, [r7, #4]
 800fa8a:	f003 0303 	and.w	r3, r3, #3
 800fa8e:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800fa94:	8afb      	ldrh	r3, [r7, #22]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d002      	beq.n	800faa0 <USB_WritePMA+0x36>
  {
    NbWords--;
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	3b01      	subs	r3, #1
 800fa9e:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800faa0:	88fb      	ldrh	r3, [r7, #6]
 800faa2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800faa6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800faaa:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800faac:	69bb      	ldr	r3, [r7, #24]
 800faae:	623b      	str	r3, [r7, #32]
 800fab0:	e015      	b.n	800fade <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	681a      	ldr	r2, [r3, #0]
 800fab6:	69fb      	ldr	r3, [r7, #28]
 800fab8:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800faba:	69fb      	ldr	r3, [r7, #28]
 800fabc:	3304      	adds	r3, #4
 800fabe:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	3301      	adds	r3, #1
 800fac4:	613b      	str	r3, [r7, #16]
    pBuf++;
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	3301      	adds	r3, #1
 800faca:	613b      	str	r3, [r7, #16]
    pBuf++;
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	3301      	adds	r3, #1
 800fad0:	613b      	str	r3, [r7, #16]
    pBuf++;
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	3301      	adds	r3, #1
 800fad6:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800fad8:	6a3b      	ldr	r3, [r7, #32]
 800fada:	3b01      	subs	r3, #1
 800fadc:	623b      	str	r3, [r7, #32]
 800fade:	6a3b      	ldr	r3, [r7, #32]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d1e6      	bne.n	800fab2 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800fae4:	8afb      	ldrh	r3, [r7, #22]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d01a      	beq.n	800fb20 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800faea:	2300      	movs	r3, #0
 800faec:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	461a      	mov	r2, r3
 800faf4:	6a3b      	ldr	r3, [r7, #32]
 800faf6:	00db      	lsls	r3, r3, #3
 800faf8:	fa02 f303 	lsl.w	r3, r2, r3
 800fafc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fafe:	4313      	orrs	r3, r2
 800fb00:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800fb02:	6a3b      	ldr	r3, [r7, #32]
 800fb04:	3301      	adds	r3, #1
 800fb06:	623b      	str	r3, [r7, #32]
      pBuf++;
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800fb0e:	8afb      	ldrh	r3, [r7, #22]
 800fb10:	3b01      	subs	r3, #1
 800fb12:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800fb14:	8afb      	ldrh	r3, [r7, #22]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d1e9      	bne.n	800faee <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800fb1a:	69fb      	ldr	r3, [r7, #28]
 800fb1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb1e:	601a      	str	r2, [r3, #0]
  }
}
 800fb20:	bf00      	nop
 800fb22:	372c      	adds	r7, #44	@ 0x2c
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr

0800fb2c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b08b      	sub	sp, #44	@ 0x2c
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	4611      	mov	r1, r2
 800fb38:	461a      	mov	r2, r3
 800fb3a:	460b      	mov	r3, r1
 800fb3c:	80fb      	strh	r3, [r7, #6]
 800fb3e:	4613      	mov	r3, r2
 800fb40:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800fb42:	88bb      	ldrh	r3, [r7, #4]
 800fb44:	3303      	adds	r3, #3
 800fb46:	089b      	lsrs	r3, r3, #2
 800fb48:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800fb4a:	88bb      	ldrh	r3, [r7, #4]
 800fb4c:	f003 0303 	and.w	r3, r3, #3
 800fb50:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800fb56:	88fb      	ldrh	r3, [r7, #6]
 800fb58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fb5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fb60:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800fb62:	8b7b      	ldrh	r3, [r7, #26]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d002      	beq.n	800fb6e <USB_ReadPMA+0x42>
  {
    NbWords--;
 800fb68:	69fb      	ldr	r3, [r7, #28]
 800fb6a:	3b01      	subs	r3, #1
 800fb6c:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800fb6e:	69fb      	ldr	r3, [r7, #28]
 800fb70:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb72:	e015      	b.n	800fba0 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800fb74:	6a3b      	ldr	r3, [r7, #32]
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800fb7c:	6a3b      	ldr	r3, [r7, #32]
 800fb7e:	3304      	adds	r3, #4
 800fb80:	623b      	str	r3, [r7, #32]
    pBuf++;
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	3301      	adds	r3, #1
 800fb86:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	3301      	adds	r3, #1
 800fb92:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	3301      	adds	r3, #1
 800fb98:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800fb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	627b      	str	r3, [r7, #36]	@ 0x24
 800fba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d1e6      	bne.n	800fb74 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800fba6:	8b7b      	ldrh	r3, [r7, #26]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d017      	beq.n	800fbdc <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800fbac:	6a3b      	ldr	r3, [r7, #32]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800fbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	00db      	lsls	r3, r3, #3
 800fbb8:	693a      	ldr	r2, [r7, #16]
 800fbba:	fa22 f303 	lsr.w	r3, r2, r3
 800fbbe:	b2da      	uxtb	r2, r3
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	701a      	strb	r2, [r3, #0]
      count++;
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800fbd0:	8b7b      	ldrh	r3, [r7, #26]
 800fbd2:	3b01      	subs	r3, #1
 800fbd4:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800fbd6:	8b7b      	ldrh	r3, [r7, #26]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d1ea      	bne.n	800fbb2 <USB_ReadPMA+0x86>
  }
}
 800fbdc:	bf00      	nop
 800fbde:	372c      	adds	r7, #44	@ 0x2c
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe6:	4770      	bx	lr

0800fbe8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b084      	sub	sp, #16
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fbf4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800fbf8:	f001 f8fa 	bl	8010df0 <USBD_static_malloc>
 800fbfc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d109      	bne.n	800fc18 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	32b0      	adds	r2, #176	@ 0xb0
 800fc0e:	2100      	movs	r1, #0
 800fc10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800fc14:	2302      	movs	r3, #2
 800fc16:	e0d4      	b.n	800fdc2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800fc18:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800fc1c:	2100      	movs	r1, #0
 800fc1e:	68f8      	ldr	r0, [r7, #12]
 800fc20:	f002 fe0c 	bl	801283c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	32b0      	adds	r2, #176	@ 0xb0
 800fc2e:	68f9      	ldr	r1, [r7, #12]
 800fc30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	32b0      	adds	r2, #176	@ 0xb0
 800fc3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	7c1b      	ldrb	r3, [r3, #16]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d138      	bne.n	800fcc2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fc50:	4b5e      	ldr	r3, [pc, #376]	@ (800fdcc <USBD_CDC_Init+0x1e4>)
 800fc52:	7819      	ldrb	r1, [r3, #0]
 800fc54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc58:	2202      	movs	r2, #2
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f000 ffcf 	bl	8010bfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fc60:	4b5a      	ldr	r3, [pc, #360]	@ (800fdcc <USBD_CDC_Init+0x1e4>)
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	f003 020f 	and.w	r2, r3, #15
 800fc68:	6879      	ldr	r1, [r7, #4]
 800fc6a:	4613      	mov	r3, r2
 800fc6c:	009b      	lsls	r3, r3, #2
 800fc6e:	4413      	add	r3, r2
 800fc70:	009b      	lsls	r3, r3, #2
 800fc72:	440b      	add	r3, r1
 800fc74:	3324      	adds	r3, #36	@ 0x24
 800fc76:	2201      	movs	r2, #1
 800fc78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fc7a:	4b55      	ldr	r3, [pc, #340]	@ (800fdd0 <USBD_CDC_Init+0x1e8>)
 800fc7c:	7819      	ldrb	r1, [r3, #0]
 800fc7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc82:	2202      	movs	r2, #2
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f000 ffba 	bl	8010bfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fc8a:	4b51      	ldr	r3, [pc, #324]	@ (800fdd0 <USBD_CDC_Init+0x1e8>)
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	f003 020f 	and.w	r2, r3, #15
 800fc92:	6879      	ldr	r1, [r7, #4]
 800fc94:	4613      	mov	r3, r2
 800fc96:	009b      	lsls	r3, r3, #2
 800fc98:	4413      	add	r3, r2
 800fc9a:	009b      	lsls	r3, r3, #2
 800fc9c:	440b      	add	r3, r1
 800fc9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fca2:	2201      	movs	r2, #1
 800fca4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fca6:	4b4b      	ldr	r3, [pc, #300]	@ (800fdd4 <USBD_CDC_Init+0x1ec>)
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	f003 020f 	and.w	r2, r3, #15
 800fcae:	6879      	ldr	r1, [r7, #4]
 800fcb0:	4613      	mov	r3, r2
 800fcb2:	009b      	lsls	r3, r3, #2
 800fcb4:	4413      	add	r3, r2
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	440b      	add	r3, r1
 800fcba:	3326      	adds	r3, #38	@ 0x26
 800fcbc:	2210      	movs	r2, #16
 800fcbe:	801a      	strh	r2, [r3, #0]
 800fcc0:	e035      	b.n	800fd2e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fcc2:	4b42      	ldr	r3, [pc, #264]	@ (800fdcc <USBD_CDC_Init+0x1e4>)
 800fcc4:	7819      	ldrb	r1, [r3, #0]
 800fcc6:	2340      	movs	r3, #64	@ 0x40
 800fcc8:	2202      	movs	r2, #2
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f000 ff97 	bl	8010bfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fcd0:	4b3e      	ldr	r3, [pc, #248]	@ (800fdcc <USBD_CDC_Init+0x1e4>)
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	f003 020f 	and.w	r2, r3, #15
 800fcd8:	6879      	ldr	r1, [r7, #4]
 800fcda:	4613      	mov	r3, r2
 800fcdc:	009b      	lsls	r3, r3, #2
 800fcde:	4413      	add	r3, r2
 800fce0:	009b      	lsls	r3, r3, #2
 800fce2:	440b      	add	r3, r1
 800fce4:	3324      	adds	r3, #36	@ 0x24
 800fce6:	2201      	movs	r2, #1
 800fce8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fcea:	4b39      	ldr	r3, [pc, #228]	@ (800fdd0 <USBD_CDC_Init+0x1e8>)
 800fcec:	7819      	ldrb	r1, [r3, #0]
 800fcee:	2340      	movs	r3, #64	@ 0x40
 800fcf0:	2202      	movs	r2, #2
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f000 ff83 	bl	8010bfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fcf8:	4b35      	ldr	r3, [pc, #212]	@ (800fdd0 <USBD_CDC_Init+0x1e8>)
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	f003 020f 	and.w	r2, r3, #15
 800fd00:	6879      	ldr	r1, [r7, #4]
 800fd02:	4613      	mov	r3, r2
 800fd04:	009b      	lsls	r3, r3, #2
 800fd06:	4413      	add	r3, r2
 800fd08:	009b      	lsls	r3, r3, #2
 800fd0a:	440b      	add	r3, r1
 800fd0c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fd10:	2201      	movs	r2, #1
 800fd12:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fd14:	4b2f      	ldr	r3, [pc, #188]	@ (800fdd4 <USBD_CDC_Init+0x1ec>)
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	f003 020f 	and.w	r2, r3, #15
 800fd1c:	6879      	ldr	r1, [r7, #4]
 800fd1e:	4613      	mov	r3, r2
 800fd20:	009b      	lsls	r3, r3, #2
 800fd22:	4413      	add	r3, r2
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	440b      	add	r3, r1
 800fd28:	3326      	adds	r3, #38	@ 0x26
 800fd2a:	2210      	movs	r2, #16
 800fd2c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fd2e:	4b29      	ldr	r3, [pc, #164]	@ (800fdd4 <USBD_CDC_Init+0x1ec>)
 800fd30:	7819      	ldrb	r1, [r3, #0]
 800fd32:	2308      	movs	r3, #8
 800fd34:	2203      	movs	r2, #3
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 ff61 	bl	8010bfe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800fd3c:	4b25      	ldr	r3, [pc, #148]	@ (800fdd4 <USBD_CDC_Init+0x1ec>)
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	f003 020f 	and.w	r2, r3, #15
 800fd44:	6879      	ldr	r1, [r7, #4]
 800fd46:	4613      	mov	r3, r2
 800fd48:	009b      	lsls	r3, r3, #2
 800fd4a:	4413      	add	r3, r2
 800fd4c:	009b      	lsls	r3, r3, #2
 800fd4e:	440b      	add	r3, r1
 800fd50:	3324      	adds	r3, #36	@ 0x24
 800fd52:	2201      	movs	r2, #1
 800fd54:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fd64:	687a      	ldr	r2, [r7, #4]
 800fd66:	33b0      	adds	r3, #176	@ 0xb0
 800fd68:	009b      	lsls	r3, r3, #2
 800fd6a:	4413      	add	r3, r2
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2200      	movs	r2, #0
 800fd76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d101      	bne.n	800fd90 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800fd8c:	2302      	movs	r3, #2
 800fd8e:	e018      	b.n	800fdc2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	7c1b      	ldrb	r3, [r3, #16]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d10a      	bne.n	800fdae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fd98:	4b0d      	ldr	r3, [pc, #52]	@ (800fdd0 <USBD_CDC_Init+0x1e8>)
 800fd9a:	7819      	ldrb	r1, [r3, #0]
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fda2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 fff4 	bl	8010d94 <USBD_LL_PrepareReceive>
 800fdac:	e008      	b.n	800fdc0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fdae:	4b08      	ldr	r3, [pc, #32]	@ (800fdd0 <USBD_CDC_Init+0x1e8>)
 800fdb0:	7819      	ldrb	r1, [r3, #0]
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fdb8:	2340      	movs	r3, #64	@ 0x40
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 ffea 	bl	8010d94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fdc0:	2300      	movs	r3, #0
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3710      	adds	r7, #16
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
 800fdca:	bf00      	nop
 800fdcc:	200000b3 	.word	0x200000b3
 800fdd0:	200000b4 	.word	0x200000b4
 800fdd4:	200000b5 	.word	0x200000b5

0800fdd8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	460b      	mov	r3, r1
 800fde2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800fde4:	4b3a      	ldr	r3, [pc, #232]	@ (800fed0 <USBD_CDC_DeInit+0xf8>)
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	4619      	mov	r1, r3
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f000 ff27 	bl	8010c3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800fdf0:	4b37      	ldr	r3, [pc, #220]	@ (800fed0 <USBD_CDC_DeInit+0xf8>)
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	f003 020f 	and.w	r2, r3, #15
 800fdf8:	6879      	ldr	r1, [r7, #4]
 800fdfa:	4613      	mov	r3, r2
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	4413      	add	r3, r2
 800fe00:	009b      	lsls	r3, r3, #2
 800fe02:	440b      	add	r3, r1
 800fe04:	3324      	adds	r3, #36	@ 0x24
 800fe06:	2200      	movs	r2, #0
 800fe08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fe0a:	4b32      	ldr	r3, [pc, #200]	@ (800fed4 <USBD_CDC_DeInit+0xfc>)
 800fe0c:	781b      	ldrb	r3, [r3, #0]
 800fe0e:	4619      	mov	r1, r3
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f000 ff14 	bl	8010c3e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fe16:	4b2f      	ldr	r3, [pc, #188]	@ (800fed4 <USBD_CDC_DeInit+0xfc>)
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	f003 020f 	and.w	r2, r3, #15
 800fe1e:	6879      	ldr	r1, [r7, #4]
 800fe20:	4613      	mov	r3, r2
 800fe22:	009b      	lsls	r3, r3, #2
 800fe24:	4413      	add	r3, r2
 800fe26:	009b      	lsls	r3, r3, #2
 800fe28:	440b      	add	r3, r1
 800fe2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fe2e:	2200      	movs	r2, #0
 800fe30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800fe32:	4b29      	ldr	r3, [pc, #164]	@ (800fed8 <USBD_CDC_DeInit+0x100>)
 800fe34:	781b      	ldrb	r3, [r3, #0]
 800fe36:	4619      	mov	r1, r3
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f000 ff00 	bl	8010c3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800fe3e:	4b26      	ldr	r3, [pc, #152]	@ (800fed8 <USBD_CDC_DeInit+0x100>)
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	f003 020f 	and.w	r2, r3, #15
 800fe46:	6879      	ldr	r1, [r7, #4]
 800fe48:	4613      	mov	r3, r2
 800fe4a:	009b      	lsls	r3, r3, #2
 800fe4c:	4413      	add	r3, r2
 800fe4e:	009b      	lsls	r3, r3, #2
 800fe50:	440b      	add	r3, r1
 800fe52:	3324      	adds	r3, #36	@ 0x24
 800fe54:	2200      	movs	r2, #0
 800fe56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800fe58:	4b1f      	ldr	r3, [pc, #124]	@ (800fed8 <USBD_CDC_DeInit+0x100>)
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	f003 020f 	and.w	r2, r3, #15
 800fe60:	6879      	ldr	r1, [r7, #4]
 800fe62:	4613      	mov	r3, r2
 800fe64:	009b      	lsls	r3, r3, #2
 800fe66:	4413      	add	r3, r2
 800fe68:	009b      	lsls	r3, r3, #2
 800fe6a:	440b      	add	r3, r1
 800fe6c:	3326      	adds	r3, #38	@ 0x26
 800fe6e:	2200      	movs	r2, #0
 800fe70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	32b0      	adds	r2, #176	@ 0xb0
 800fe7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d01f      	beq.n	800fec4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fe8a:	687a      	ldr	r2, [r7, #4]
 800fe8c:	33b0      	adds	r3, #176	@ 0xb0
 800fe8e:	009b      	lsls	r3, r3, #2
 800fe90:	4413      	add	r3, r2
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	32b0      	adds	r2, #176	@ 0xb0
 800fea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fea6:	4618      	mov	r0, r3
 800fea8:	f000 ffb0 	bl	8010e0c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	32b0      	adds	r2, #176	@ 0xb0
 800feb6:	2100      	movs	r1, #0
 800feb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fec4:	2300      	movs	r3, #0
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	3708      	adds	r7, #8
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}
 800fece:	bf00      	nop
 800fed0:	200000b3 	.word	0x200000b3
 800fed4:	200000b4 	.word	0x200000b4
 800fed8:	200000b5 	.word	0x200000b5

0800fedc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b086      	sub	sp, #24
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	32b0      	adds	r2, #176	@ 0xb0
 800fef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fef4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800fef6:	2300      	movs	r3, #0
 800fef8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800fefa:	2300      	movs	r3, #0
 800fefc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800fefe:	2300      	movs	r3, #0
 800ff00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d101      	bne.n	800ff0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ff08:	2303      	movs	r3, #3
 800ff0a:	e0bf      	b.n	801008c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d050      	beq.n	800ffba <USBD_CDC_Setup+0xde>
 800ff18:	2b20      	cmp	r3, #32
 800ff1a:	f040 80af 	bne.w	801007c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	88db      	ldrh	r3, [r3, #6]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d03a      	beq.n	800ff9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	b25b      	sxtb	r3, r3
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	da1b      	bge.n	800ff68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	33b0      	adds	r3, #176	@ 0xb0
 800ff3a:	009b      	lsls	r3, r3, #2
 800ff3c:	4413      	add	r3, r2
 800ff3e:	685b      	ldr	r3, [r3, #4]
 800ff40:	689b      	ldr	r3, [r3, #8]
 800ff42:	683a      	ldr	r2, [r7, #0]
 800ff44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ff46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ff48:	683a      	ldr	r2, [r7, #0]
 800ff4a:	88d2      	ldrh	r2, [r2, #6]
 800ff4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	88db      	ldrh	r3, [r3, #6]
 800ff52:	2b07      	cmp	r3, #7
 800ff54:	bf28      	it	cs
 800ff56:	2307      	movcs	r3, #7
 800ff58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	89fa      	ldrh	r2, [r7, #14]
 800ff5e:	4619      	mov	r1, r3
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f002 fa46 	bl	80123f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ff66:	e090      	b.n	801008a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	785a      	ldrb	r2, [r3, #1]
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	88db      	ldrh	r3, [r3, #6]
 800ff76:	2b3f      	cmp	r3, #63	@ 0x3f
 800ff78:	d803      	bhi.n	800ff82 <USBD_CDC_Setup+0xa6>
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	88db      	ldrh	r3, [r3, #6]
 800ff7e:	b2da      	uxtb	r2, r3
 800ff80:	e000      	b.n	800ff84 <USBD_CDC_Setup+0xa8>
 800ff82:	2240      	movs	r2, #64	@ 0x40
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ff8a:	6939      	ldr	r1, [r7, #16]
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ff92:	461a      	mov	r2, r3
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f002 fa58 	bl	801244a <USBD_CtlPrepareRx>
      break;
 800ff9a:	e076      	b.n	801008a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	33b0      	adds	r3, #176	@ 0xb0
 800ffa6:	009b      	lsls	r3, r3, #2
 800ffa8:	4413      	add	r3, r2
 800ffaa:	685b      	ldr	r3, [r3, #4]
 800ffac:	689b      	ldr	r3, [r3, #8]
 800ffae:	683a      	ldr	r2, [r7, #0]
 800ffb0:	7850      	ldrb	r0, [r2, #1]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	6839      	ldr	r1, [r7, #0]
 800ffb6:	4798      	blx	r3
      break;
 800ffb8:	e067      	b.n	801008a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	785b      	ldrb	r3, [r3, #1]
 800ffbe:	2b0b      	cmp	r3, #11
 800ffc0:	d851      	bhi.n	8010066 <USBD_CDC_Setup+0x18a>
 800ffc2:	a201      	add	r2, pc, #4	@ (adr r2, 800ffc8 <USBD_CDC_Setup+0xec>)
 800ffc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffc8:	0800fff9 	.word	0x0800fff9
 800ffcc:	08010075 	.word	0x08010075
 800ffd0:	08010067 	.word	0x08010067
 800ffd4:	08010067 	.word	0x08010067
 800ffd8:	08010067 	.word	0x08010067
 800ffdc:	08010067 	.word	0x08010067
 800ffe0:	08010067 	.word	0x08010067
 800ffe4:	08010067 	.word	0x08010067
 800ffe8:	08010067 	.word	0x08010067
 800ffec:	08010067 	.word	0x08010067
 800fff0:	08010023 	.word	0x08010023
 800fff4:	0801004d 	.word	0x0801004d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	2b03      	cmp	r3, #3
 8010002:	d107      	bne.n	8010014 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010004:	f107 030a 	add.w	r3, r7, #10
 8010008:	2202      	movs	r2, #2
 801000a:	4619      	mov	r1, r3
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f002 f9f0 	bl	80123f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010012:	e032      	b.n	801007a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010014:	6839      	ldr	r1, [r7, #0]
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f002 f86d 	bl	80120f6 <USBD_CtlError>
            ret = USBD_FAIL;
 801001c:	2303      	movs	r3, #3
 801001e:	75fb      	strb	r3, [r7, #23]
          break;
 8010020:	e02b      	b.n	801007a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010028:	b2db      	uxtb	r3, r3
 801002a:	2b03      	cmp	r3, #3
 801002c:	d107      	bne.n	801003e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801002e:	f107 030d 	add.w	r3, r7, #13
 8010032:	2201      	movs	r2, #1
 8010034:	4619      	mov	r1, r3
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f002 f9db 	bl	80123f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801003c:	e01d      	b.n	801007a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801003e:	6839      	ldr	r1, [r7, #0]
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f002 f858 	bl	80120f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8010046:	2303      	movs	r3, #3
 8010048:	75fb      	strb	r3, [r7, #23]
          break;
 801004a:	e016      	b.n	801007a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010052:	b2db      	uxtb	r3, r3
 8010054:	2b03      	cmp	r3, #3
 8010056:	d00f      	beq.n	8010078 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010058:	6839      	ldr	r1, [r7, #0]
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f002 f84b 	bl	80120f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8010060:	2303      	movs	r3, #3
 8010062:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010064:	e008      	b.n	8010078 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010066:	6839      	ldr	r1, [r7, #0]
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f002 f844 	bl	80120f6 <USBD_CtlError>
          ret = USBD_FAIL;
 801006e:	2303      	movs	r3, #3
 8010070:	75fb      	strb	r3, [r7, #23]
          break;
 8010072:	e002      	b.n	801007a <USBD_CDC_Setup+0x19e>
          break;
 8010074:	bf00      	nop
 8010076:	e008      	b.n	801008a <USBD_CDC_Setup+0x1ae>
          break;
 8010078:	bf00      	nop
      }
      break;
 801007a:	e006      	b.n	801008a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801007c:	6839      	ldr	r1, [r7, #0]
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f002 f839 	bl	80120f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8010084:	2303      	movs	r3, #3
 8010086:	75fb      	strb	r3, [r7, #23]
      break;
 8010088:	bf00      	nop
  }

  return (uint8_t)ret;
 801008a:	7dfb      	ldrb	r3, [r7, #23]
}
 801008c:	4618      	mov	r0, r3
 801008e:	3718      	adds	r7, #24
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b084      	sub	sp, #16
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	460b      	mov	r3, r1
 801009e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80100a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	32b0      	adds	r2, #176	@ 0xb0
 80100b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d101      	bne.n	80100be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80100ba:	2303      	movs	r3, #3
 80100bc:	e065      	b.n	801018a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	32b0      	adds	r2, #176	@ 0xb0
 80100c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80100ce:	78fb      	ldrb	r3, [r7, #3]
 80100d0:	f003 020f 	and.w	r2, r3, #15
 80100d4:	6879      	ldr	r1, [r7, #4]
 80100d6:	4613      	mov	r3, r2
 80100d8:	009b      	lsls	r3, r3, #2
 80100da:	4413      	add	r3, r2
 80100dc:	009b      	lsls	r3, r3, #2
 80100de:	440b      	add	r3, r1
 80100e0:	3318      	adds	r3, #24
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d02f      	beq.n	8010148 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80100e8:	78fb      	ldrb	r3, [r7, #3]
 80100ea:	f003 020f 	and.w	r2, r3, #15
 80100ee:	6879      	ldr	r1, [r7, #4]
 80100f0:	4613      	mov	r3, r2
 80100f2:	009b      	lsls	r3, r3, #2
 80100f4:	4413      	add	r3, r2
 80100f6:	009b      	lsls	r3, r3, #2
 80100f8:	440b      	add	r3, r1
 80100fa:	3318      	adds	r3, #24
 80100fc:	681a      	ldr	r2, [r3, #0]
 80100fe:	78fb      	ldrb	r3, [r7, #3]
 8010100:	f003 010f 	and.w	r1, r3, #15
 8010104:	68f8      	ldr	r0, [r7, #12]
 8010106:	460b      	mov	r3, r1
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	440b      	add	r3, r1
 801010c:	00db      	lsls	r3, r3, #3
 801010e:	4403      	add	r3, r0
 8010110:	3324      	adds	r3, #36	@ 0x24
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	fbb2 f1f3 	udiv	r1, r2, r3
 8010118:	fb01 f303 	mul.w	r3, r1, r3
 801011c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801011e:	2b00      	cmp	r3, #0
 8010120:	d112      	bne.n	8010148 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010122:	78fb      	ldrb	r3, [r7, #3]
 8010124:	f003 020f 	and.w	r2, r3, #15
 8010128:	6879      	ldr	r1, [r7, #4]
 801012a:	4613      	mov	r3, r2
 801012c:	009b      	lsls	r3, r3, #2
 801012e:	4413      	add	r3, r2
 8010130:	009b      	lsls	r3, r3, #2
 8010132:	440b      	add	r3, r1
 8010134:	3318      	adds	r3, #24
 8010136:	2200      	movs	r2, #0
 8010138:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801013a:	78f9      	ldrb	r1, [r7, #3]
 801013c:	2300      	movs	r3, #0
 801013e:	2200      	movs	r2, #0
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f000 fe0c 	bl	8010d5e <USBD_LL_Transmit>
 8010146:	e01f      	b.n	8010188 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	2200      	movs	r2, #0
 801014c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	33b0      	adds	r3, #176	@ 0xb0
 801015a:	009b      	lsls	r3, r3, #2
 801015c:	4413      	add	r3, r2
 801015e:	685b      	ldr	r3, [r3, #4]
 8010160:	691b      	ldr	r3, [r3, #16]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d010      	beq.n	8010188 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	33b0      	adds	r3, #176	@ 0xb0
 8010170:	009b      	lsls	r3, r3, #2
 8010172:	4413      	add	r3, r2
 8010174:	685b      	ldr	r3, [r3, #4]
 8010176:	691b      	ldr	r3, [r3, #16]
 8010178:	68ba      	ldr	r2, [r7, #8]
 801017a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801017e:	68ba      	ldr	r2, [r7, #8]
 8010180:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010184:	78fa      	ldrb	r2, [r7, #3]
 8010186:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010188:	2300      	movs	r3, #0
}
 801018a:	4618      	mov	r0, r3
 801018c:	3710      	adds	r7, #16
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b084      	sub	sp, #16
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
 801019a:	460b      	mov	r3, r1
 801019c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	32b0      	adds	r2, #176	@ 0xb0
 80101a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	32b0      	adds	r2, #176	@ 0xb0
 80101b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d101      	bne.n	80101c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80101c0:	2303      	movs	r3, #3
 80101c2:	e01a      	b.n	80101fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80101c4:	78fb      	ldrb	r3, [r7, #3]
 80101c6:	4619      	mov	r1, r3
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f000 fdfe 	bl	8010dca <USBD_LL_GetRxDataSize>
 80101ce:	4602      	mov	r2, r0
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	33b0      	adds	r3, #176	@ 0xb0
 80101e0:	009b      	lsls	r3, r3, #2
 80101e2:	4413      	add	r3, r2
 80101e4:	685b      	ldr	r3, [r3, #4]
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	68fa      	ldr	r2, [r7, #12]
 80101ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80101ee:	68fa      	ldr	r2, [r7, #12]
 80101f0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80101f4:	4611      	mov	r1, r2
 80101f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80101f8:	2300      	movs	r3, #0
}
 80101fa:	4618      	mov	r0, r3
 80101fc:	3710      	adds	r7, #16
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}

08010202 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010202:	b580      	push	{r7, lr}
 8010204:	b084      	sub	sp, #16
 8010206:	af00      	add	r7, sp, #0
 8010208:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	32b0      	adds	r2, #176	@ 0xb0
 8010214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010218:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d101      	bne.n	8010224 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010220:	2303      	movs	r3, #3
 8010222:	e024      	b.n	801026e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801022a:	687a      	ldr	r2, [r7, #4]
 801022c:	33b0      	adds	r3, #176	@ 0xb0
 801022e:	009b      	lsls	r3, r3, #2
 8010230:	4413      	add	r3, r2
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d019      	beq.n	801026c <USBD_CDC_EP0_RxReady+0x6a>
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801023e:	2bff      	cmp	r3, #255	@ 0xff
 8010240:	d014      	beq.n	801026c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010248:	687a      	ldr	r2, [r7, #4]
 801024a:	33b0      	adds	r3, #176	@ 0xb0
 801024c:	009b      	lsls	r3, r3, #2
 801024e:	4413      	add	r3, r2
 8010250:	685b      	ldr	r3, [r3, #4]
 8010252:	689b      	ldr	r3, [r3, #8]
 8010254:	68fa      	ldr	r2, [r7, #12]
 8010256:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801025a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801025c:	68fa      	ldr	r2, [r7, #12]
 801025e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010262:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	22ff      	movs	r2, #255	@ 0xff
 8010268:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801026c:	2300      	movs	r3, #0
}
 801026e:	4618      	mov	r0, r3
 8010270:	3710      	adds	r7, #16
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
	...

08010278 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b086      	sub	sp, #24
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010280:	2182      	movs	r1, #130	@ 0x82
 8010282:	4818      	ldr	r0, [pc, #96]	@ (80102e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010284:	f001 f901 	bl	801148a <USBD_GetEpDesc>
 8010288:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801028a:	2101      	movs	r1, #1
 801028c:	4815      	ldr	r0, [pc, #84]	@ (80102e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801028e:	f001 f8fc 	bl	801148a <USBD_GetEpDesc>
 8010292:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010294:	2181      	movs	r1, #129	@ 0x81
 8010296:	4813      	ldr	r0, [pc, #76]	@ (80102e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010298:	f001 f8f7 	bl	801148a <USBD_GetEpDesc>
 801029c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d002      	beq.n	80102aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	2210      	movs	r2, #16
 80102a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d006      	beq.n	80102be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	2200      	movs	r2, #0
 80102b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80102b8:	711a      	strb	r2, [r3, #4]
 80102ba:	2200      	movs	r2, #0
 80102bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d006      	beq.n	80102d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	2200      	movs	r2, #0
 80102c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80102cc:	711a      	strb	r2, [r3, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2243      	movs	r2, #67	@ 0x43
 80102d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80102d8:	4b02      	ldr	r3, [pc, #8]	@ (80102e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3718      	adds	r7, #24
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
 80102e2:	bf00      	nop
 80102e4:	20000070 	.word	0x20000070

080102e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b086      	sub	sp, #24
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80102f0:	2182      	movs	r1, #130	@ 0x82
 80102f2:	4818      	ldr	r0, [pc, #96]	@ (8010354 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80102f4:	f001 f8c9 	bl	801148a <USBD_GetEpDesc>
 80102f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80102fa:	2101      	movs	r1, #1
 80102fc:	4815      	ldr	r0, [pc, #84]	@ (8010354 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80102fe:	f001 f8c4 	bl	801148a <USBD_GetEpDesc>
 8010302:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010304:	2181      	movs	r1, #129	@ 0x81
 8010306:	4813      	ldr	r0, [pc, #76]	@ (8010354 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010308:	f001 f8bf 	bl	801148a <USBD_GetEpDesc>
 801030c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d002      	beq.n	801031a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	2210      	movs	r2, #16
 8010318:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d006      	beq.n	801032e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010320:	693b      	ldr	r3, [r7, #16]
 8010322:	2200      	movs	r2, #0
 8010324:	711a      	strb	r2, [r3, #4]
 8010326:	2200      	movs	r2, #0
 8010328:	f042 0202 	orr.w	r2, r2, #2
 801032c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d006      	beq.n	8010342 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	2200      	movs	r2, #0
 8010338:	711a      	strb	r2, [r3, #4]
 801033a:	2200      	movs	r2, #0
 801033c:	f042 0202 	orr.w	r2, r2, #2
 8010340:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2243      	movs	r2, #67	@ 0x43
 8010346:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010348:	4b02      	ldr	r3, [pc, #8]	@ (8010354 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801034a:	4618      	mov	r0, r3
 801034c:	3718      	adds	r7, #24
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}
 8010352:	bf00      	nop
 8010354:	20000070 	.word	0x20000070

08010358 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b086      	sub	sp, #24
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010360:	2182      	movs	r1, #130	@ 0x82
 8010362:	4818      	ldr	r0, [pc, #96]	@ (80103c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010364:	f001 f891 	bl	801148a <USBD_GetEpDesc>
 8010368:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801036a:	2101      	movs	r1, #1
 801036c:	4815      	ldr	r0, [pc, #84]	@ (80103c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801036e:	f001 f88c 	bl	801148a <USBD_GetEpDesc>
 8010372:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010374:	2181      	movs	r1, #129	@ 0x81
 8010376:	4813      	ldr	r0, [pc, #76]	@ (80103c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010378:	f001 f887 	bl	801148a <USBD_GetEpDesc>
 801037c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d002      	beq.n	801038a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	2210      	movs	r2, #16
 8010388:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d006      	beq.n	801039e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	2200      	movs	r2, #0
 8010394:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010398:	711a      	strb	r2, [r3, #4]
 801039a:	2200      	movs	r2, #0
 801039c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d006      	beq.n	80103b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2200      	movs	r2, #0
 80103a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80103ac:	711a      	strb	r2, [r3, #4]
 80103ae:	2200      	movs	r2, #0
 80103b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2243      	movs	r2, #67	@ 0x43
 80103b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80103b8:	4b02      	ldr	r3, [pc, #8]	@ (80103c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3718      	adds	r7, #24
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}
 80103c2:	bf00      	nop
 80103c4:	20000070 	.word	0x20000070

080103c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b083      	sub	sp, #12
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	220a      	movs	r2, #10
 80103d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80103d6:	4b03      	ldr	r3, [pc, #12]	@ (80103e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80103d8:	4618      	mov	r0, r3
 80103da:	370c      	adds	r7, #12
 80103dc:	46bd      	mov	sp, r7
 80103de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e2:	4770      	bx	lr
 80103e4:	2000002c 	.word	0x2000002c

080103e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b083      	sub	sp, #12
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d101      	bne.n	80103fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80103f8:	2303      	movs	r3, #3
 80103fa:	e009      	b.n	8010410 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	33b0      	adds	r3, #176	@ 0xb0
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	4413      	add	r3, r2
 801040a:	683a      	ldr	r2, [r7, #0]
 801040c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801040e:	2300      	movs	r3, #0
}
 8010410:	4618      	mov	r0, r3
 8010412:	370c      	adds	r7, #12
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	4770      	bx	lr

0801041c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801041c:	b480      	push	{r7}
 801041e:	b087      	sub	sp, #28
 8010420:	af00      	add	r7, sp, #0
 8010422:	60f8      	str	r0, [r7, #12]
 8010424:	60b9      	str	r1, [r7, #8]
 8010426:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	32b0      	adds	r2, #176	@ 0xb0
 8010432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010436:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d101      	bne.n	8010442 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801043e:	2303      	movs	r3, #3
 8010440:	e008      	b.n	8010454 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	68ba      	ldr	r2, [r7, #8]
 8010446:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	687a      	ldr	r2, [r7, #4]
 801044e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8010452:	2300      	movs	r3, #0
}
 8010454:	4618      	mov	r0, r3
 8010456:	371c      	adds	r7, #28
 8010458:	46bd      	mov	sp, r7
 801045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045e:	4770      	bx	lr

08010460 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010460:	b480      	push	{r7}
 8010462:	b085      	sub	sp, #20
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	32b0      	adds	r2, #176	@ 0xb0
 8010474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010478:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d101      	bne.n	8010484 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010480:	2303      	movs	r3, #3
 8010482:	e004      	b.n	801048e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	683a      	ldr	r2, [r7, #0]
 8010488:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801048c:	2300      	movs	r3, #0
}
 801048e:	4618      	mov	r0, r3
 8010490:	3714      	adds	r7, #20
 8010492:	46bd      	mov	sp, r7
 8010494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010498:	4770      	bx	lr
	...

0801049c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b084      	sub	sp, #16
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	32b0      	adds	r2, #176	@ 0xb0
 80104ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104b2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80104b4:	2301      	movs	r3, #1
 80104b6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d101      	bne.n	80104c2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80104be:	2303      	movs	r3, #3
 80104c0:	e025      	b.n	801050e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80104c2:	68bb      	ldr	r3, [r7, #8]
 80104c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d11f      	bne.n	801050c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	2201      	movs	r2, #1
 80104d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80104d4:	4b10      	ldr	r3, [pc, #64]	@ (8010518 <USBD_CDC_TransmitPacket+0x7c>)
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	f003 020f 	and.w	r2, r3, #15
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	4613      	mov	r3, r2
 80104e6:	009b      	lsls	r3, r3, #2
 80104e8:	4413      	add	r3, r2
 80104ea:	009b      	lsls	r3, r3, #2
 80104ec:	4403      	add	r3, r0
 80104ee:	3318      	adds	r3, #24
 80104f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80104f2:	4b09      	ldr	r3, [pc, #36]	@ (8010518 <USBD_CDC_TransmitPacket+0x7c>)
 80104f4:	7819      	ldrb	r1, [r3, #0]
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f000 fc2b 	bl	8010d5e <USBD_LL_Transmit>

    ret = USBD_OK;
 8010508:	2300      	movs	r3, #0
 801050a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801050c:	7bfb      	ldrb	r3, [r7, #15]
}
 801050e:	4618      	mov	r0, r3
 8010510:	3710      	adds	r7, #16
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
 8010516:	bf00      	nop
 8010518:	200000b3 	.word	0x200000b3

0801051c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	32b0      	adds	r2, #176	@ 0xb0
 801052e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010532:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	32b0      	adds	r2, #176	@ 0xb0
 801053e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d101      	bne.n	801054a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010546:	2303      	movs	r3, #3
 8010548:	e018      	b.n	801057c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	7c1b      	ldrb	r3, [r3, #16]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d10a      	bne.n	8010568 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010552:	4b0c      	ldr	r3, [pc, #48]	@ (8010584 <USBD_CDC_ReceivePacket+0x68>)
 8010554:	7819      	ldrb	r1, [r3, #0]
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801055c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f000 fc17 	bl	8010d94 <USBD_LL_PrepareReceive>
 8010566:	e008      	b.n	801057a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010568:	4b06      	ldr	r3, [pc, #24]	@ (8010584 <USBD_CDC_ReceivePacket+0x68>)
 801056a:	7819      	ldrb	r1, [r3, #0]
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010572:	2340      	movs	r3, #64	@ 0x40
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f000 fc0d 	bl	8010d94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801057a:	2300      	movs	r3, #0
}
 801057c:	4618      	mov	r0, r3
 801057e:	3710      	adds	r7, #16
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}
 8010584:	200000b4 	.word	0x200000b4

08010588 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801058c:	2200      	movs	r2, #0
 801058e:	4905      	ldr	r1, [pc, #20]	@ (80105a4 <TEMPLATE_Init+0x1c>)
 8010590:	4805      	ldr	r0, [pc, #20]	@ (80105a8 <TEMPLATE_Init+0x20>)
 8010592:	f7ff ff43 	bl	801041c <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010596:	4905      	ldr	r1, [pc, #20]	@ (80105ac <TEMPLATE_Init+0x24>)
 8010598:	4803      	ldr	r0, [pc, #12]	@ (80105a8 <TEMPLATE_Init+0x20>)
 801059a:	f7ff ff61 	bl	8010460 <USBD_CDC_SetRxBuffer>
      return (0);
 801059e:	2300      	movs	r3, #0
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	bd80      	pop	{r7, pc}
 80105a4:	20000ce8 	.word	0x20000ce8
 80105a8:	20000760 	.word	0x20000760
 80105ac:	20000ae8 	.word	0x20000ae8

080105b0 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 80105b0:	b480      	push	{r7}
 80105b2:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 80105b4:	2300      	movs	r3, #0
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	46bd      	mov	sp, r7
 80105ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105be:	4770      	bx	lr

080105c0 <USB_Transmit>:

uint8_t USB_Transmit(uint8_t *data, uint32_t len)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b0a4      	sub	sp, #144	@ 0x90
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	6039      	str	r1, [r7, #0]
    uint32_t offset = 0;
 80105ca:	2300      	movs	r3, #0
 80105cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    const uint32_t bytesPerLine = 16;
 80105d0:	2310      	movs	r3, #16
 80105d2:	67bb      	str	r3, [r7, #120]	@ 0x78

    while (offset < len)
 80105d4:	e0a4      	b.n	8010720 <USB_Transmit+0x160>
    {
        uint16_t chunk_len = ((len - offset) >= CDC_BLOCK_SIZE) ? CDC_BLOCK_SIZE : (len - offset);
 80105d6:	683a      	ldr	r2, [r7, #0]
 80105d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80105dc:	1ad3      	subs	r3, r2, r3
 80105de:	2b40      	cmp	r3, #64	@ 0x40
 80105e0:	bf28      	it	cs
 80105e2:	2340      	movcs	r3, #64	@ 0x40
 80105e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
        tx_complete = 0;
 80105e8:	4b53      	ldr	r3, [pc, #332]	@ (8010738 <USB_Transmit+0x178>)
 80105ea:	2200      	movs	r2, #0
 80105ec:	701a      	strb	r2, [r3, #0]
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &data[offset], chunk_len);
 80105ee:	687a      	ldr	r2, [r7, #4]
 80105f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80105f4:	4413      	add	r3, r2
 80105f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80105fa:	4619      	mov	r1, r3
 80105fc:	484f      	ldr	r0, [pc, #316]	@ (801073c <USB_Transmit+0x17c>)
 80105fe:	f7ff ff0d 	bl	801041c <USBD_CDC_SetTxBuffer>

        // Log in 32-byte lines
        uint32_t printed = 0;
 8010602:	2300      	movs	r3, #0
 8010604:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 8010608:	e056      	b.n	80106b8 <USB_Transmit+0xf8>
        {
            uint32_t lineLen = ((chunk_len - printed) > bytesPerLine) ? bytesPerLine : (chunk_len - printed);
 801060a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801060e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010612:	1ad3      	subs	r3, r2, r3
 8010614:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010616:	4293      	cmp	r3, r2
 8010618:	bf28      	it	cs
 801061a:	4613      	movcs	r3, r2
 801061c:	673b      	str	r3, [r7, #112]	@ 0x70
            char log_line[BYTES_PER_LINE * 3 + 1] = {0};
 801061e:	2300      	movs	r3, #0
 8010620:	60bb      	str	r3, [r7, #8]
 8010622:	f107 030c 	add.w	r3, r7, #12
 8010626:	225d      	movs	r2, #93	@ 0x5d
 8010628:	2100      	movs	r1, #0
 801062a:	4618      	mov	r0, r3
 801062c:	f002 f906 	bl	801283c <memset>
            char *ptr = log_line;
 8010630:	f107 0308 	add.w	r3, r7, #8
 8010634:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

            for (uint32_t i = 0; i < lineLen; i++)
 8010638:	2300      	movs	r3, #0
 801063a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801063e:	e01c      	b.n	801067a <USB_Transmit+0xba>
            {
                ptr += snprintf(ptr, 4, "%02X ", data[offset + printed + i]);
 8010640:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010644:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010648:	441a      	add	r2, r3
 801064a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801064e:	4413      	add	r3, r2
 8010650:	687a      	ldr	r2, [r7, #4]
 8010652:	4413      	add	r3, r2
 8010654:	781b      	ldrb	r3, [r3, #0]
 8010656:	4a3a      	ldr	r2, [pc, #232]	@ (8010740 <USB_Transmit+0x180>)
 8010658:	2104      	movs	r1, #4
 801065a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 801065e:	f002 f81d 	bl	801269c <sniprintf>
 8010662:	4603      	mov	r3, r0
 8010664:	461a      	mov	r2, r3
 8010666:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801066a:	4413      	add	r3, r2
 801066c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            for (uint32_t i = 0; i < lineLen; i++)
 8010670:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010674:	3301      	adds	r3, #1
 8010676:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801067a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801067e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010680:	429a      	cmp	r2, r3
 8010682:	d3dd      	bcc.n	8010640 <USB_Transmit+0x80>
            }

            if (printed == 0)
 8010684:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010688:	2b00      	cmp	r3, #0
 801068a:	d108      	bne.n	801069e <USB_Transmit+0xde>
            {
                log_info("USB Tx [%d bytes]: %s", chunk_len, log_line);
 801068c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8010690:	f107 0208 	add.w	r2, r7, #8
 8010694:	4619      	mov	r1, r3
 8010696:	482b      	ldr	r0, [pc, #172]	@ (8010744 <USB_Transmit+0x184>)
 8010698:	f7f1 f8e2 	bl	8001860 <log_info>
 801069c:	e006      	b.n	80106ac <USB_Transmit+0xec>
            }
            else
            {
                log_info("%19s%s", "", log_line);
 801069e:	f107 0308 	add.w	r3, r7, #8
 80106a2:	461a      	mov	r2, r3
 80106a4:	4928      	ldr	r1, [pc, #160]	@ (8010748 <USB_Transmit+0x188>)
 80106a6:	4829      	ldr	r0, [pc, #164]	@ (801074c <USB_Transmit+0x18c>)
 80106a8:	f7f1 f8da 	bl	8001860 <log_info>
            }

            printed += lineLen;
 80106ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80106b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80106b2:	4413      	add	r3, r2
 80106b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 80106b8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80106bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d3a2      	bcc.n	801060a <USB_Transmit+0x4a>
        }

        if (USBD_CDC_TransmitPacket(&hUsbDeviceFS) != USBD_OK)
 80106c4:	481d      	ldr	r0, [pc, #116]	@ (801073c <USB_Transmit+0x17c>)
 80106c6:	f7ff fee9 	bl	801049c <USBD_CDC_TransmitPacket>
 80106ca:	4603      	mov	r3, r0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d001      	beq.n	80106d4 <USB_Transmit+0x114>
        {
            return USBD_FAIL;
 80106d0:	2303      	movs	r3, #3
 80106d2:	e02c      	b.n	801072e <USB_Transmit+0x16e>
        }

        uint32_t timeout = 10000;
 80106d4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80106d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (tx_complete == 0 && timeout--);
 80106da:	bf00      	nop
 80106dc:	4b16      	ldr	r3, [pc, #88]	@ (8010738 <USB_Transmit+0x178>)
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	b2db      	uxtb	r3, r3
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d104      	bne.n	80106f0 <USB_Transmit+0x130>
 80106e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80106e8:	1e5a      	subs	r2, r3, #1
 80106ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d1f5      	bne.n	80106dc <USB_Transmit+0x11c>
        if (timeout == 0)
 80106f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d104      	bne.n	8010700 <USB_Transmit+0x140>
        {
            log_error("USB TX Timeout");
 80106f6:	4816      	ldr	r0, [pc, #88]	@ (8010750 <USB_Transmit+0x190>)
 80106f8:	f7f1 f8e6 	bl	80018c8 <log_error>
            return USBD_FAIL;
 80106fc:	2303      	movs	r3, #3
 80106fe:	e016      	b.n	801072e <USB_Transmit+0x16e>
        }

        offset += chunk_len;
 8010700:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8010704:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010708:	4413      	add	r3, r2
 801070a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (volatile int i = 0; i < 200; i++);
 801070e:	2300      	movs	r3, #0
 8010710:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010712:	e002      	b.n	801071a <USB_Transmit+0x15a>
 8010714:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010716:	3301      	adds	r3, #1
 8010718:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801071a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801071c:	2bc7      	cmp	r3, #199	@ 0xc7
 801071e:	ddf9      	ble.n	8010714 <USB_Transmit+0x154>
    while (offset < len)
 8010720:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	429a      	cmp	r2, r3
 8010728:	f4ff af55 	bcc.w	80105d6 <USB_Transmit+0x16>
    }

    return USBD_OK;
 801072c:	2300      	movs	r3, #0
}
 801072e:	4618      	mov	r0, r3
 8010730:	3790      	adds	r7, #144	@ 0x90
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
 8010736:	bf00      	nop
 8010738:	200000b6 	.word	0x200000b6
 801073c:	20000760 	.word	0x20000760
 8010740:	08014688 	.word	0x08014688
 8010744:	08014690 	.word	0x08014690
 8010748:	080146a8 	.word	0x080146a8
 801074c:	080146ac 	.word	0x080146ac
 8010750:	080146b4 	.word	0x080146b4

08010754 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8010754:	b480      	push	{r7}
 8010756:	b083      	sub	sp, #12
 8010758:	af00      	add	r7, sp, #0
 801075a:	4603      	mov	r3, r0
 801075c:	6039      	str	r1, [r7, #0]
 801075e:	71fb      	strb	r3, [r7, #7]
 8010760:	4613      	mov	r3, r2
 8010762:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 8010764:	79fb      	ldrb	r3, [r7, #7]
 8010766:	2b23      	cmp	r3, #35	@ 0x23
 8010768:	f200 8098 	bhi.w	801089c <TEMPLATE_Control+0x148>
 801076c:	a201      	add	r2, pc, #4	@ (adr r2, 8010774 <TEMPLATE_Control+0x20>)
 801076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010772:	bf00      	nop
 8010774:	0801089d 	.word	0x0801089d
 8010778:	0801089d 	.word	0x0801089d
 801077c:	0801089d 	.word	0x0801089d
 8010780:	0801089d 	.word	0x0801089d
 8010784:	0801089d 	.word	0x0801089d
 8010788:	0801089d 	.word	0x0801089d
 801078c:	0801089d 	.word	0x0801089d
 8010790:	0801089d 	.word	0x0801089d
 8010794:	0801089d 	.word	0x0801089d
 8010798:	0801089d 	.word	0x0801089d
 801079c:	0801089d 	.word	0x0801089d
 80107a0:	0801089d 	.word	0x0801089d
 80107a4:	0801089d 	.word	0x0801089d
 80107a8:	0801089d 	.word	0x0801089d
 80107ac:	0801089d 	.word	0x0801089d
 80107b0:	0801089d 	.word	0x0801089d
 80107b4:	0801089d 	.word	0x0801089d
 80107b8:	0801089d 	.word	0x0801089d
 80107bc:	0801089d 	.word	0x0801089d
 80107c0:	0801089d 	.word	0x0801089d
 80107c4:	0801089d 	.word	0x0801089d
 80107c8:	0801089d 	.word	0x0801089d
 80107cc:	0801089d 	.word	0x0801089d
 80107d0:	0801089d 	.word	0x0801089d
 80107d4:	0801089d 	.word	0x0801089d
 80107d8:	0801089d 	.word	0x0801089d
 80107dc:	0801089d 	.word	0x0801089d
 80107e0:	0801089d 	.word	0x0801089d
 80107e4:	0801089d 	.word	0x0801089d
 80107e8:	0801089d 	.word	0x0801089d
 80107ec:	0801089d 	.word	0x0801089d
 80107f0:	0801089d 	.word	0x0801089d
 80107f4:	08010805 	.word	0x08010805
 80107f8:	08010849 	.word	0x08010849
 80107fc:	0801089d 	.word	0x0801089d
 8010800:	0801089d 	.word	0x0801089d
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	781b      	ldrb	r3, [r3, #0]
 8010808:	461a      	mov	r2, r3
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	3301      	adds	r3, #1
 801080e:	781b      	ldrb	r3, [r3, #0]
 8010810:	021b      	lsls	r3, r3, #8
 8010812:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	3302      	adds	r3, #2
 8010818:	781b      	ldrb	r3, [r3, #0]
 801081a:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 801081c:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	3303      	adds	r3, #3
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	061b      	lsls	r3, r3, #24
 8010826:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8010828:	461a      	mov	r2, r3
 801082a:	4b20      	ldr	r3, [pc, #128]	@ (80108ac <TEMPLATE_Control+0x158>)
 801082c:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	791a      	ldrb	r2, [r3, #4]
 8010832:	4b1e      	ldr	r3, [pc, #120]	@ (80108ac <TEMPLATE_Control+0x158>)
 8010834:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	795a      	ldrb	r2, [r3, #5]
 801083a:	4b1c      	ldr	r3, [pc, #112]	@ (80108ac <TEMPLATE_Control+0x158>)
 801083c:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	799a      	ldrb	r2, [r3, #6]
 8010842:	4b1a      	ldr	r3, [pc, #104]	@ (80108ac <TEMPLATE_Control+0x158>)
 8010844:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 8010846:	e02a      	b.n	801089e <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 8010848:	4b18      	ldr	r3, [pc, #96]	@ (80108ac <TEMPLATE_Control+0x158>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	b2da      	uxtb	r2, r3
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 8010852:	4b16      	ldr	r3, [pc, #88]	@ (80108ac <TEMPLATE_Control+0x158>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	0a1a      	lsrs	r2, r3, #8
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	3301      	adds	r3, #1
 801085c:	b2d2      	uxtb	r2, r2
 801085e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8010860:	4b12      	ldr	r3, [pc, #72]	@ (80108ac <TEMPLATE_Control+0x158>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	0c1a      	lsrs	r2, r3, #16
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	3302      	adds	r3, #2
 801086a:	b2d2      	uxtb	r2, r2
 801086c:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 801086e:	4b0f      	ldr	r3, [pc, #60]	@ (80108ac <TEMPLATE_Control+0x158>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	0e1a      	lsrs	r2, r3, #24
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	3303      	adds	r3, #3
 8010878:	b2d2      	uxtb	r2, r2
 801087a:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	3304      	adds	r3, #4
 8010880:	4a0a      	ldr	r2, [pc, #40]	@ (80108ac <TEMPLATE_Control+0x158>)
 8010882:	7912      	ldrb	r2, [r2, #4]
 8010884:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	3305      	adds	r3, #5
 801088a:	4a08      	ldr	r2, [pc, #32]	@ (80108ac <TEMPLATE_Control+0x158>)
 801088c:	7952      	ldrb	r2, [r2, #5]
 801088e:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	3306      	adds	r3, #6
 8010894:	4a05      	ldr	r2, [pc, #20]	@ (80108ac <TEMPLATE_Control+0x158>)
 8010896:	7992      	ldrb	r2, [r2, #6]
 8010898:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 801089a:	e000      	b.n	801089e <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 801089c:	bf00      	nop
  }

  return (0);
 801089e:	2300      	movs	r3, #0
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	370c      	adds	r7, #12
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr
 80108ac:	200000cc 	.word	0x200000cc

080108b0 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 80108b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108b4:	b08b      	sub	sp, #44	@ 0x2c
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
 80108ba:	6039      	str	r1, [r7, #0]
 80108bc:	466b      	mov	r3, sp
 80108be:	461e      	mov	r6, r3
    const uint32_t bytesPerLine = 16;
 80108c0:	2310      	movs	r3, #16
 80108c2:	61bb      	str	r3, [r7, #24]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 80108c4:	69ba      	ldr	r2, [r7, #24]
 80108c6:	4613      	mov	r3, r2
 80108c8:	005b      	lsls	r3, r3, #1
 80108ca:	4413      	add	r3, r2
 80108cc:	617b      	str	r3, [r7, #20]
 80108ce:	69ba      	ldr	r2, [r7, #24]
 80108d0:	4613      	mov	r3, r2
 80108d2:	005b      	lsls	r3, r3, #1
 80108d4:	4413      	add	r3, r2
 80108d6:	3301      	adds	r3, #1
 80108d8:	2200      	movs	r2, #0
 80108da:	4698      	mov	r8, r3
 80108dc:	4691      	mov	r9, r2
 80108de:	f04f 0200 	mov.w	r2, #0
 80108e2:	f04f 0300 	mov.w	r3, #0
 80108e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80108ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80108ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80108f2:	69ba      	ldr	r2, [r7, #24]
 80108f4:	4613      	mov	r3, r2
 80108f6:	005b      	lsls	r3, r3, #1
 80108f8:	4413      	add	r3, r2
 80108fa:	3301      	adds	r3, #1
 80108fc:	2200      	movs	r2, #0
 80108fe:	461c      	mov	r4, r3
 8010900:	4615      	mov	r5, r2
 8010902:	f04f 0200 	mov.w	r2, #0
 8010906:	f04f 0300 	mov.w	r3, #0
 801090a:	00eb      	lsls	r3, r5, #3
 801090c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010910:	00e2      	lsls	r2, r4, #3
 8010912:	69ba      	ldr	r2, [r7, #24]
 8010914:	4613      	mov	r3, r2
 8010916:	005b      	lsls	r3, r3, #1
 8010918:	4413      	add	r3, r2
 801091a:	3301      	adds	r3, #1
 801091c:	3307      	adds	r3, #7
 801091e:	08db      	lsrs	r3, r3, #3
 8010920:	00db      	lsls	r3, r3, #3
 8010922:	ebad 0d03 	sub.w	sp, sp, r3
 8010926:	466b      	mov	r3, sp
 8010928:	3300      	adds	r3, #0
 801092a:	613b      	str	r3, [r7, #16]
    uint32_t totalLen = *Len;
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	60fb      	str	r3, [r7, #12]
    uint32_t printed = 0;
 8010932:	2300      	movs	r3, #0
 8010934:	627b      	str	r3, [r7, #36]	@ 0x24

    if (*Len > CDC_DATA_FS_MAX_PACKET_SIZE) {
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2b40      	cmp	r3, #64	@ 0x40
 801093c:	d944      	bls.n	80109c8 <TEMPLATE_Receive+0x118>
        *Len = CDC_DATA_FS_MAX_PACKET_SIZE;
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	2240      	movs	r2, #64	@ 0x40
 8010942:	601a      	str	r2, [r3, #0]
    }

    while (printed < *Len)
 8010944:	e040      	b.n	80109c8 <TEMPLATE_Receive+0x118>
    {
        uint32_t lineLen = ((*Len - printed) > bytesPerLine) ? bytesPerLine : (*Len - printed);
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	681a      	ldr	r2, [r3, #0]
 801094a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801094c:	1ad3      	subs	r3, r2, r3
 801094e:	69ba      	ldr	r2, [r7, #24]
 8010950:	4293      	cmp	r3, r2
 8010952:	bf28      	it	cs
 8010954:	4613      	movcs	r3, r2
 8010956:	60bb      	str	r3, [r7, #8]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 8010958:	69ba      	ldr	r2, [r7, #24]
 801095a:	4613      	mov	r3, r2
 801095c:	005b      	lsls	r3, r3, #1
 801095e:	4413      	add	r3, r2
        memset(hexLine, 0, sizeof(hexLine));
 8010960:	3301      	adds	r3, #1
 8010962:	461a      	mov	r2, r3
 8010964:	2100      	movs	r1, #0
 8010966:	6938      	ldr	r0, [r7, #16]
 8010968:	f001 ff68 	bl	801283c <memset>
        char *ptr = hexLine;
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	623b      	str	r3, [r7, #32]

        for (uint32_t i = 0; i < lineLen; ++i)
 8010970:	2300      	movs	r3, #0
 8010972:	61fb      	str	r3, [r7, #28]
 8010974:	e012      	b.n	801099c <TEMPLATE_Receive+0xec>
        {
            ptr += snprintf(ptr, 4, "%02X ", Buf[printed + i]);
 8010976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010978:	69fb      	ldr	r3, [r7, #28]
 801097a:	4413      	add	r3, r2
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	4413      	add	r3, r2
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	4a2d      	ldr	r2, [pc, #180]	@ (8010a38 <TEMPLATE_Receive+0x188>)
 8010984:	2104      	movs	r1, #4
 8010986:	6a38      	ldr	r0, [r7, #32]
 8010988:	f001 fe88 	bl	801269c <sniprintf>
 801098c:	4603      	mov	r3, r0
 801098e:	461a      	mov	r2, r3
 8010990:	6a3b      	ldr	r3, [r7, #32]
 8010992:	4413      	add	r3, r2
 8010994:	623b      	str	r3, [r7, #32]
        for (uint32_t i = 0; i < lineLen; ++i)
 8010996:	69fb      	ldr	r3, [r7, #28]
 8010998:	3301      	adds	r3, #1
 801099a:	61fb      	str	r3, [r7, #28]
 801099c:	69fa      	ldr	r2, [r7, #28]
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d3e8      	bcc.n	8010976 <TEMPLATE_Receive+0xc6>
        }

        if (printed == 0)
 80109a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d105      	bne.n	80109b6 <TEMPLATE_Receive+0x106>
        {
            // First line includes logger message
            log_info("USB Rx [%lu bytes]: %s", totalLen, hexLine);
 80109aa:	693a      	ldr	r2, [r7, #16]
 80109ac:	68f9      	ldr	r1, [r7, #12]
 80109ae:	4823      	ldr	r0, [pc, #140]	@ (8010a3c <TEMPLATE_Receive+0x18c>)
 80109b0:	f7f0 ff56 	bl	8001860 <log_info>
 80109b4:	e004      	b.n	80109c0 <TEMPLATE_Receive+0x110>
        }
        else
        {
            // Subsequent lines have 26-space indent
            log_info("%19s%s", "", hexLine);
 80109b6:	693a      	ldr	r2, [r7, #16]
 80109b8:	4921      	ldr	r1, [pc, #132]	@ (8010a40 <TEMPLATE_Receive+0x190>)
 80109ba:	4822      	ldr	r0, [pc, #136]	@ (8010a44 <TEMPLATE_Receive+0x194>)
 80109bc:	f7f0 ff50 	bl	8001860 <log_info>
        }

        printed += lineLen;
 80109c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	4413      	add	r3, r2
 80109c6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (printed < *Len)
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d3b9      	bcc.n	8010946 <TEMPLATE_Receive+0x96>
    }

    // Copy to usb_rx_buffer if space permits
    if ((usb_rx_index + *Len) < MAX_USB_DATA_SIZE)
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	681a      	ldr	r2, [r3, #0]
 80109d6:	4b1c      	ldr	r3, [pc, #112]	@ (8010a48 <TEMPLATE_Receive+0x198>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	4413      	add	r3, r2
 80109dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80109e0:	d215      	bcs.n	8010a0e <TEMPLATE_Receive+0x15e>
    {
        memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 80109e2:	4b19      	ldr	r3, [pc, #100]	@ (8010a48 <TEMPLATE_Receive+0x198>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	4a19      	ldr	r2, [pc, #100]	@ (8010a4c <TEMPLATE_Receive+0x19c>)
 80109e8:	1898      	adds	r0, r3, r2
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	461a      	mov	r2, r3
 80109f0:	6879      	ldr	r1, [r7, #4]
 80109f2:	f001 ff9e 	bl	8012932 <memcpy>
        usb_rx_index += *Len;
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	681a      	ldr	r2, [r3, #0]
 80109fa:	4b13      	ldr	r3, [pc, #76]	@ (8010a48 <TEMPLATE_Receive+0x198>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	4413      	add	r3, r2
 8010a00:	4a11      	ldr	r2, [pc, #68]	@ (8010a48 <TEMPLATE_Receive+0x198>)
 8010a02:	6013      	str	r3, [r2, #0]
        log_error("USB buffer overflow");
        return USBD_FAIL;
    }

    // If this was the last packet
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE)
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	2b3f      	cmp	r3, #63	@ 0x3f
 8010a0a:	d80b      	bhi.n	8010a24 <TEMPLATE_Receive+0x174>
 8010a0c:	e007      	b.n	8010a1e <TEMPLATE_Receive+0x16e>
        usb_rx_index = 0;
 8010a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8010a48 <TEMPLATE_Receive+0x198>)
 8010a10:	2200      	movs	r2, #0
 8010a12:	601a      	str	r2, [r3, #0]
        log_error("USB buffer overflow");
 8010a14:	480e      	ldr	r0, [pc, #56]	@ (8010a50 <TEMPLATE_Receive+0x1a0>)
 8010a16:	f7f0 ff57 	bl	80018c8 <log_error>
        return USBD_FAIL;
 8010a1a:	2303      	movs	r3, #3
 8010a1c:	e006      	b.n	8010a2c <TEMPLATE_Receive+0x17c>
    {
        usb_rx_complete = true;
 8010a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8010a54 <TEMPLATE_Receive+0x1a4>)
 8010a20:	2201      	movs	r2, #1
 8010a22:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010a24:	480c      	ldr	r0, [pc, #48]	@ (8010a58 <TEMPLATE_Receive+0x1a8>)
 8010a26:	f7ff fd79 	bl	801051c <USBD_CDC_ReceivePacket>
    return USBD_OK;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	46b5      	mov	sp, r6
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	372c      	adds	r7, #44	@ 0x2c
 8010a32:	46bd      	mov	sp, r7
 8010a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a38:	08014688 	.word	0x08014688
 8010a3c:	080146c4 	.word	0x080146c4
 8010a40:	080146a8 	.word	0x080146a8
 8010a44:	080146ac 	.word	0x080146ac
 8010a48:	20010ee8 	.word	0x20010ee8
 8010a4c:	20000ee8 	.word	0x20000ee8
 8010a50:	080146dc 	.word	0x080146dc
 8010a54:	20010eec 	.word	0x20010eec
 8010a58:	20000760 	.word	0x20000760

08010a5c <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b085      	sub	sp, #20
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	60f8      	str	r0, [r7, #12]
 8010a64:	60b9      	str	r1, [r7, #8]
 8010a66:	4613      	mov	r3, r2
 8010a68:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 8010a6a:	2300      	movs	r3, #0

}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3714      	adds	r7, #20
 8010a70:	46bd      	mov	sp, r7
 8010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a76:	4770      	bx	lr

08010a78 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8010a8c:	4619      	mov	r1, r3
 8010a8e:	4610      	mov	r0, r2
 8010a90:	f000 faa5 	bl	8010fde <USBD_LL_SetupStage>
}
 8010a94:	bf00      	nop
 8010a96:	3708      	adds	r7, #8
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}

08010a9c <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b082      	sub	sp, #8
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 8010aae:	78fa      	ldrb	r2, [r7, #3]
 8010ab0:	6879      	ldr	r1, [r7, #4]
 8010ab2:	4613      	mov	r3, r2
 8010ab4:	009b      	lsls	r3, r3, #2
 8010ab6:	4413      	add	r3, r2
 8010ab8:	00db      	lsls	r3, r3, #3
 8010aba:	440b      	add	r3, r1
 8010abc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8010ac0:	681a      	ldr	r2, [r3, #0]
 8010ac2:	78fb      	ldrb	r3, [r7, #3]
 8010ac4:	4619      	mov	r1, r3
 8010ac6:	f000 fadf 	bl	8011088 <USBD_LL_DataOutStage>
}
 8010aca:	bf00      	nop
 8010acc:	3708      	adds	r7, #8
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}

08010ad2 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010ad2:	b580      	push	{r7, lr}
 8010ad4:	b082      	sub	sp, #8
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	6078      	str	r0, [r7, #4]
 8010ada:	460b      	mov	r3, r1
 8010adc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 8010ae4:	78fa      	ldrb	r2, [r7, #3]
 8010ae6:	6879      	ldr	r1, [r7, #4]
 8010ae8:	4613      	mov	r3, r2
 8010aea:	009b      	lsls	r3, r3, #2
 8010aec:	4413      	add	r3, r2
 8010aee:	00db      	lsls	r3, r3, #3
 8010af0:	440b      	add	r3, r1
 8010af2:	3328      	adds	r3, #40	@ 0x28
 8010af4:	681a      	ldr	r2, [r3, #0]
 8010af6:	78fb      	ldrb	r3, [r7, #3]
 8010af8:	4619      	mov	r1, r3
 8010afa:	f000 fb78 	bl	80111ee <USBD_LL_DataInStage>
}
 8010afe:	bf00      	nop
 8010b00:	3708      	adds	r7, #8
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}

08010b06 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8010b06:	b580      	push	{r7, lr}
 8010b08:	b082      	sub	sp, #8
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8010b14:	4618      	mov	r0, r3
 8010b16:	f000 fc7e 	bl	8011416 <USBD_LL_SOF>
}
 8010b1a:	bf00      	nop
 8010b1c:	3708      	adds	r7, #8
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}

08010b22 <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8010b22:	b580      	push	{r7, lr}
 8010b24:	b084      	sub	sp, #16
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	79db      	ldrb	r3, [r3, #7]
 8010b32:	2b02      	cmp	r3, #2
 8010b34:	d001      	beq.n	8010b3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010b36:	f7f1 faf3 	bl	8002120 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8010b40:	7bfa      	ldrb	r2, [r7, #15]
 8010b42:	4611      	mov	r1, r2
 8010b44:	4618      	mov	r0, r3
 8010b46:	f000 fc56 	bl	80113f6 <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8010b50:	4618      	mov	r0, r3
 8010b52:	f000 fbfe 	bl	8011352 <USBD_LL_Reset>
}
 8010b56:	bf00      	nop
 8010b58:	3710      	adds	r7, #16
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
	...

08010b60 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b082      	sub	sp, #8
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	4a19      	ldr	r2, [pc, #100]	@ (8010bd0 <USBD_LL_Init+0x70>)
 8010b6c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010b76:	2340      	movs	r3, #64	@ 0x40
 8010b78:	2200      	movs	r2, #0
 8010b7a:	2100      	movs	r1, #0
 8010b7c:	f7f5 fc48 	bl	8006410 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010b86:	2380      	movs	r3, #128	@ 0x80
 8010b88:	2200      	movs	r2, #0
 8010b8a:	2180      	movs	r1, #128	@ 0x80
 8010b8c:	f7f5 fc40 	bl	8006410 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010b96:	23c0      	movs	r3, #192	@ 0xc0
 8010b98:	2200      	movs	r2, #0
 8010b9a:	2181      	movs	r1, #129	@ 0x81
 8010b9c:	f7f5 fc38 	bl	8006410 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010ba6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010baa:	2200      	movs	r2, #0
 8010bac:	2101      	movs	r1, #1
 8010bae:	f7f5 fc2f 	bl	8006410 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010bb8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	2182      	movs	r1, #130	@ 0x82
 8010bc0:	f7f5 fc26 	bl	8006410 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 8010bc4:	2300      	movs	r3, #0
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3708      	adds	r7, #8
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	2000047c 	.word	0x2000047c

08010bd4 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b084      	sub	sp, #16
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7f4 f8f8 	bl	8004dd8 <HAL_PCD_Start>
 8010be8:	4603      	mov	r3, r0
 8010bea:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 8010bec:	7bfb      	ldrb	r3, [r7, #15]
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f000 f916 	bl	8010e20 <USBD_Get_USB_Status>
 8010bf4:	4603      	mov	r3, r0
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3710      	adds	r7, #16
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}

08010bfe <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 8010bfe:	b580      	push	{r7, lr}
 8010c00:	b084      	sub	sp, #16
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	6078      	str	r0, [r7, #4]
 8010c06:	4608      	mov	r0, r1
 8010c08:	4611      	mov	r1, r2
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	70fb      	strb	r3, [r7, #3]
 8010c10:	460b      	mov	r3, r1
 8010c12:	70bb      	strb	r3, [r7, #2]
 8010c14:	4613      	mov	r3, r2
 8010c16:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010c1e:	78bb      	ldrb	r3, [r7, #2]
 8010c20:	883a      	ldrh	r2, [r7, #0]
 8010c22:	78f9      	ldrb	r1, [r7, #3]
 8010c24:	f7f4 fa27 	bl	8005076 <HAL_PCD_EP_Open>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010c2c:	7bfb      	ldrb	r3, [r7, #15]
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f000 f8f6 	bl	8010e20 <USBD_Get_USB_Status>
 8010c34:	4603      	mov	r3, r0
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3710      	adds	r7, #16
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}

08010c3e <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c3e:	b580      	push	{r7, lr}
 8010c40:	b084      	sub	sp, #16
 8010c42:	af00      	add	r7, sp, #0
 8010c44:	6078      	str	r0, [r7, #4]
 8010c46:	460b      	mov	r3, r1
 8010c48:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010c50:	78fa      	ldrb	r2, [r7, #3]
 8010c52:	4611      	mov	r1, r2
 8010c54:	4618      	mov	r0, r3
 8010c56:	f7f4 fa6f 	bl	8005138 <HAL_PCD_EP_Close>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010c5e:	7bfb      	ldrb	r3, [r7, #15]
 8010c60:	4618      	mov	r0, r3
 8010c62:	f000 f8dd 	bl	8010e20 <USBD_Get_USB_Status>
 8010c66:	4603      	mov	r3, r0
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3710      	adds	r7, #16
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	460b      	mov	r3, r1
 8010c7a:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010c82:	78fa      	ldrb	r2, [r7, #3]
 8010c84:	4611      	mov	r1, r2
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7f4 fb22 	bl	80052d0 <HAL_PCD_EP_SetStall>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010c90:	7bfb      	ldrb	r3, [r7, #15]
 8010c92:	4618      	mov	r0, r3
 8010c94:	f000 f8c4 	bl	8010e20 <USBD_Get_USB_Status>
 8010c98:	4603      	mov	r3, r0
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3710      	adds	r7, #16
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}

08010ca2 <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 8010ca2:	b580      	push	{r7, lr}
 8010ca4:	b084      	sub	sp, #16
 8010ca6:	af00      	add	r7, sp, #0
 8010ca8:	6078      	str	r0, [r7, #4]
 8010caa:	460b      	mov	r3, r1
 8010cac:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010cb4:	78fa      	ldrb	r2, [r7, #3]
 8010cb6:	4611      	mov	r1, r2
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7f4 fb5d 	bl	8005378 <HAL_PCD_EP_ClrStall>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010cc2:	7bfb      	ldrb	r3, [r7, #15]
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f000 f8ab 	bl	8010e20 <USBD_Get_USB_Status>
 8010cca:	4603      	mov	r3, r0
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3710      	adds	r7, #16
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010cd4:	b480      	push	{r7}
 8010cd6:	b085      	sub	sp, #20
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	460b      	mov	r3, r1
 8010cde:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010ce6:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 8010ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	da0b      	bge.n	8010d08 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010cf0:	78fb      	ldrb	r3, [r7, #3]
 8010cf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010cf6:	68f9      	ldr	r1, [r7, #12]
 8010cf8:	4613      	mov	r3, r2
 8010cfa:	009b      	lsls	r3, r3, #2
 8010cfc:	4413      	add	r3, r2
 8010cfe:	00db      	lsls	r3, r3, #3
 8010d00:	440b      	add	r3, r1
 8010d02:	3316      	adds	r3, #22
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	e00b      	b.n	8010d20 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010d08:	78fb      	ldrb	r3, [r7, #3]
 8010d0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010d0e:	68f9      	ldr	r1, [r7, #12]
 8010d10:	4613      	mov	r3, r2
 8010d12:	009b      	lsls	r3, r3, #2
 8010d14:	4413      	add	r3, r2
 8010d16:	00db      	lsls	r3, r3, #3
 8010d18:	440b      	add	r3, r1
 8010d1a:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 8010d1e:	781b      	ldrb	r3, [r3, #0]
      }
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3714      	adds	r7, #20
 8010d24:	46bd      	mov	sp, r7
 8010d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2a:	4770      	bx	lr

08010d2c <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b084      	sub	sp, #16
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	460b      	mov	r3, r1
 8010d36:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010d3e:	78fa      	ldrb	r2, [r7, #3]
 8010d40:	4611      	mov	r1, r2
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7f4 f973 	bl	800502e <HAL_PCD_SetAddress>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010d4c:	7bfb      	ldrb	r3, [r7, #15]
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f000 f866 	bl	8010e20 <USBD_Get_USB_Status>
 8010d54:	4603      	mov	r3, r0
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3710      	adds	r7, #16
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}

08010d5e <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 8010d5e:	b580      	push	{r7, lr}
 8010d60:	b086      	sub	sp, #24
 8010d62:	af00      	add	r7, sp, #0
 8010d64:	60f8      	str	r0, [r7, #12]
 8010d66:	607a      	str	r2, [r7, #4]
 8010d68:	603b      	str	r3, [r7, #0]
 8010d6a:	460b      	mov	r3, r1
 8010d6c:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010d74:	7af9      	ldrb	r1, [r7, #11]
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	687a      	ldr	r2, [r7, #4]
 8010d7a:	f7f4 fa71 	bl	8005260 <HAL_PCD_EP_Transmit>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 8010d82:	7dfb      	ldrb	r3, [r7, #23]
 8010d84:	4618      	mov	r0, r3
 8010d86:	f000 f84b 	bl	8010e20 <USBD_Get_USB_Status>
 8010d8a:	4603      	mov	r3, r0
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3718      	adds	r7, #24
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}

08010d94 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b086      	sub	sp, #24
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	60f8      	str	r0, [r7, #12]
 8010d9c:	607a      	str	r2, [r7, #4]
 8010d9e:	603b      	str	r3, [r7, #0]
 8010da0:	460b      	mov	r3, r1
 8010da2:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010daa:	7af9      	ldrb	r1, [r7, #11]
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	687a      	ldr	r2, [r7, #4]
 8010db0:	f7f4 fa0c 	bl	80051cc <HAL_PCD_EP_Receive>
 8010db4:	4603      	mov	r3, r0
 8010db6:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 8010db8:	7dfb      	ldrb	r3, [r7, #23]
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f000 f830 	bl	8010e20 <USBD_Get_USB_Status>
 8010dc0:	4603      	mov	r3, r0
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3718      	adds	r7, #24
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}

08010dca <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010dca:	b580      	push	{r7, lr}
 8010dcc:	b082      	sub	sp, #8
 8010dce:	af00      	add	r7, sp, #0
 8010dd0:	6078      	str	r0, [r7, #4]
 8010dd2:	460b      	mov	r3, r1
 8010dd4:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010ddc:	78fa      	ldrb	r2, [r7, #3]
 8010dde:	4611      	mov	r1, r2
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7f4 fa25 	bl	8005230 <HAL_PCD_EP_GetRxCount>
 8010de6:	4603      	mov	r3, r0
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	3708      	adds	r7, #8
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}

08010df0 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 8010df0:	b480      	push	{r7}
 8010df2:	b083      	sub	sp, #12
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 8010df8:	4b03      	ldr	r3, [pc, #12]	@ (8010e08 <USBD_static_malloc+0x18>)
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	370c      	adds	r7, #12
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e04:	4770      	bx	lr
 8010e06:	bf00      	nop
 8010e08:	20010ef0 	.word	0x20010ef0

08010e0c <USBD_static_free>:

void USBD_static_free(void *p)
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 8010e14:	bf00      	nop
 8010e16:	370c      	adds	r7, #12
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr

08010e20 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010e20:	b480      	push	{r7}
 8010e22:	b085      	sub	sp, #20
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	4603      	mov	r3, r0
 8010e28:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 8010e2e:	79fb      	ldrb	r3, [r7, #7]
 8010e30:	2b03      	cmp	r3, #3
 8010e32:	d817      	bhi.n	8010e64 <USBD_Get_USB_Status+0x44>
 8010e34:	a201      	add	r2, pc, #4	@ (adr r2, 8010e3c <USBD_Get_USB_Status+0x1c>)
 8010e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e3a:	bf00      	nop
 8010e3c:	08010e4d 	.word	0x08010e4d
 8010e40:	08010e53 	.word	0x08010e53
 8010e44:	08010e59 	.word	0x08010e59
 8010e48:	08010e5f 	.word	0x08010e5f
      {
      case HAL_OK :
             usb_status = USBD_OK;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	73fb      	strb	r3, [r7, #15]
             break;
 8010e50:	e00b      	b.n	8010e6a <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 8010e52:	2303      	movs	r3, #3
 8010e54:	73fb      	strb	r3, [r7, #15]
             break;
 8010e56:	e008      	b.n	8010e6a <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 8010e58:	2301      	movs	r3, #1
 8010e5a:	73fb      	strb	r3, [r7, #15]
             break;
 8010e5c:	e005      	b.n	8010e6a <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 8010e5e:	2303      	movs	r3, #3
 8010e60:	73fb      	strb	r3, [r7, #15]
             break;
 8010e62:	e002      	b.n	8010e6a <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 8010e64:	2303      	movs	r3, #3
 8010e66:	73fb      	strb	r3, [r7, #15]
             break;
 8010e68:	bf00      	nop
      }
      return usb_status;
 8010e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3714      	adds	r7, #20
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr

08010e78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b086      	sub	sp, #24
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	60f8      	str	r0, [r7, #12]
 8010e80:	60b9      	str	r1, [r7, #8]
 8010e82:	4613      	mov	r3, r2
 8010e84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d101      	bne.n	8010e90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010e8c:	2303      	movs	r3, #3
 8010e8e:	e01f      	b.n	8010ed0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	2200      	movs	r2, #0
 8010e94:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d003      	beq.n	8010eb6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	68ba      	ldr	r2, [r7, #8]
 8010eb2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	2201      	movs	r2, #1
 8010eba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	79fa      	ldrb	r2, [r7, #7]
 8010ec2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010ec4:	68f8      	ldr	r0, [r7, #12]
 8010ec6:	f7ff fe4b 	bl	8010b60 <USBD_LL_Init>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	3718      	adds	r7, #24
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}

08010ed8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d101      	bne.n	8010ef0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010eec:	2303      	movs	r3, #3
 8010eee:	e025      	b.n	8010f3c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	683a      	ldr	r2, [r7, #0]
 8010ef4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	32ae      	adds	r2, #174	@ 0xae
 8010f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d00f      	beq.n	8010f2c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	32ae      	adds	r2, #174	@ 0xae
 8010f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f1c:	f107 020e 	add.w	r2, r7, #14
 8010f20:	4610      	mov	r0, r2
 8010f22:	4798      	blx	r3
 8010f24:	4602      	mov	r2, r0
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010f32:	1c5a      	adds	r2, r3, #1
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8010f3a:	2300      	movs	r3, #0
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3710      	adds	r7, #16
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}

08010f44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b082      	sub	sp, #8
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f7ff fe41 	bl	8010bd4 <USBD_LL_Start>
 8010f52:	4603      	mov	r3, r0
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	3708      	adds	r7, #8
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}

08010f5c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b083      	sub	sp, #12
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010f64:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	370c      	adds	r7, #12
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f70:	4770      	bx	lr

08010f72 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f72:	b580      	push	{r7, lr}
 8010f74:	b084      	sub	sp, #16
 8010f76:	af00      	add	r7, sp, #0
 8010f78:	6078      	str	r0, [r7, #4]
 8010f7a:	460b      	mov	r3, r1
 8010f7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d009      	beq.n	8010fa0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	78fa      	ldrb	r2, [r7, #3]
 8010f96:	4611      	mov	r1, r2
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	4798      	blx	r3
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	3710      	adds	r7, #16
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}

08010faa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010faa:	b580      	push	{r7, lr}
 8010fac:	b084      	sub	sp, #16
 8010fae:	af00      	add	r7, sp, #0
 8010fb0:	6078      	str	r0, [r7, #4]
 8010fb2:	460b      	mov	r3, r1
 8010fb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	78fa      	ldrb	r2, [r7, #3]
 8010fc4:	4611      	mov	r1, r2
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	4798      	blx	r3
 8010fca:	4603      	mov	r3, r0
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d001      	beq.n	8010fd4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010fd0:	2303      	movs	r3, #3
 8010fd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	3710      	adds	r7, #16
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd80      	pop	{r7, pc}

08010fde <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010fde:	b580      	push	{r7, lr}
 8010fe0:	b084      	sub	sp, #16
 8010fe2:	af00      	add	r7, sp, #0
 8010fe4:	6078      	str	r0, [r7, #4]
 8010fe6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010fee:	6839      	ldr	r1, [r7, #0]
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f001 f846 	bl	8012082 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2201      	movs	r2, #1
 8010ffa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011004:	461a      	mov	r2, r3
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011012:	f003 031f 	and.w	r3, r3, #31
 8011016:	2b02      	cmp	r3, #2
 8011018:	d01a      	beq.n	8011050 <USBD_LL_SetupStage+0x72>
 801101a:	2b02      	cmp	r3, #2
 801101c:	d822      	bhi.n	8011064 <USBD_LL_SetupStage+0x86>
 801101e:	2b00      	cmp	r3, #0
 8011020:	d002      	beq.n	8011028 <USBD_LL_SetupStage+0x4a>
 8011022:	2b01      	cmp	r3, #1
 8011024:	d00a      	beq.n	801103c <USBD_LL_SetupStage+0x5e>
 8011026:	e01d      	b.n	8011064 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801102e:	4619      	mov	r1, r3
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f000 fa9d 	bl	8011570 <USBD_StdDevReq>
 8011036:	4603      	mov	r3, r0
 8011038:	73fb      	strb	r3, [r7, #15]
      break;
 801103a:	e020      	b.n	801107e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011042:	4619      	mov	r1, r3
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f000 fb05 	bl	8011654 <USBD_StdItfReq>
 801104a:	4603      	mov	r3, r0
 801104c:	73fb      	strb	r3, [r7, #15]
      break;
 801104e:	e016      	b.n	801107e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011056:	4619      	mov	r1, r3
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f000 fb67 	bl	801172c <USBD_StdEPReq>
 801105e:	4603      	mov	r3, r0
 8011060:	73fb      	strb	r3, [r7, #15]
      break;
 8011062:	e00c      	b.n	801107e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801106a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801106e:	b2db      	uxtb	r3, r3
 8011070:	4619      	mov	r1, r3
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f7ff fdfc 	bl	8010c70 <USBD_LL_StallEP>
 8011078:	4603      	mov	r3, r0
 801107a:	73fb      	strb	r3, [r7, #15]
      break;
 801107c:	bf00      	nop
  }

  return ret;
 801107e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011080:	4618      	mov	r0, r3
 8011082:	3710      	adds	r7, #16
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}

08011088 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b086      	sub	sp, #24
 801108c:	af00      	add	r7, sp, #0
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	460b      	mov	r3, r1
 8011092:	607a      	str	r2, [r7, #4]
 8011094:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011096:	2300      	movs	r3, #0
 8011098:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801109a:	7afb      	ldrb	r3, [r7, #11]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d16e      	bne.n	801117e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80110a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80110ae:	2b03      	cmp	r3, #3
 80110b0:	f040 8098 	bne.w	80111e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	689a      	ldr	r2, [r3, #8]
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	68db      	ldr	r3, [r3, #12]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d913      	bls.n	80110e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	689a      	ldr	r2, [r3, #8]
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	68db      	ldr	r3, [r3, #12]
 80110c8:	1ad2      	subs	r2, r2, r3
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80110ce:	693b      	ldr	r3, [r7, #16]
 80110d0:	68da      	ldr	r2, [r3, #12]
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	689b      	ldr	r3, [r3, #8]
 80110d6:	4293      	cmp	r3, r2
 80110d8:	bf28      	it	cs
 80110da:	4613      	movcs	r3, r2
 80110dc:	461a      	mov	r2, r3
 80110de:	6879      	ldr	r1, [r7, #4]
 80110e0:	68f8      	ldr	r0, [r7, #12]
 80110e2:	f001 f9cf 	bl	8012484 <USBD_CtlContinueRx>
 80110e6:	e07d      	b.n	80111e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80110ee:	f003 031f 	and.w	r3, r3, #31
 80110f2:	2b02      	cmp	r3, #2
 80110f4:	d014      	beq.n	8011120 <USBD_LL_DataOutStage+0x98>
 80110f6:	2b02      	cmp	r3, #2
 80110f8:	d81d      	bhi.n	8011136 <USBD_LL_DataOutStage+0xae>
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d002      	beq.n	8011104 <USBD_LL_DataOutStage+0x7c>
 80110fe:	2b01      	cmp	r3, #1
 8011100:	d003      	beq.n	801110a <USBD_LL_DataOutStage+0x82>
 8011102:	e018      	b.n	8011136 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011104:	2300      	movs	r3, #0
 8011106:	75bb      	strb	r3, [r7, #22]
            break;
 8011108:	e018      	b.n	801113c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011110:	b2db      	uxtb	r3, r3
 8011112:	4619      	mov	r1, r3
 8011114:	68f8      	ldr	r0, [r7, #12]
 8011116:	f000 f99e 	bl	8011456 <USBD_CoreFindIF>
 801111a:	4603      	mov	r3, r0
 801111c:	75bb      	strb	r3, [r7, #22]
            break;
 801111e:	e00d      	b.n	801113c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011126:	b2db      	uxtb	r3, r3
 8011128:	4619      	mov	r1, r3
 801112a:	68f8      	ldr	r0, [r7, #12]
 801112c:	f000 f9a0 	bl	8011470 <USBD_CoreFindEP>
 8011130:	4603      	mov	r3, r0
 8011132:	75bb      	strb	r3, [r7, #22]
            break;
 8011134:	e002      	b.n	801113c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011136:	2300      	movs	r3, #0
 8011138:	75bb      	strb	r3, [r7, #22]
            break;
 801113a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801113c:	7dbb      	ldrb	r3, [r7, #22]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d119      	bne.n	8011176 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011148:	b2db      	uxtb	r3, r3
 801114a:	2b03      	cmp	r3, #3
 801114c:	d113      	bne.n	8011176 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801114e:	7dba      	ldrb	r2, [r7, #22]
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	32ae      	adds	r2, #174	@ 0xae
 8011154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011158:	691b      	ldr	r3, [r3, #16]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d00b      	beq.n	8011176 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801115e:	7dba      	ldrb	r2, [r7, #22]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011166:	7dba      	ldrb	r2, [r7, #22]
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	32ae      	adds	r2, #174	@ 0xae
 801116c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011170:	691b      	ldr	r3, [r3, #16]
 8011172:	68f8      	ldr	r0, [r7, #12]
 8011174:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011176:	68f8      	ldr	r0, [r7, #12]
 8011178:	f001 f995 	bl	80124a6 <USBD_CtlSendStatus>
 801117c:	e032      	b.n	80111e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801117e:	7afb      	ldrb	r3, [r7, #11]
 8011180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011184:	b2db      	uxtb	r3, r3
 8011186:	4619      	mov	r1, r3
 8011188:	68f8      	ldr	r0, [r7, #12]
 801118a:	f000 f971 	bl	8011470 <USBD_CoreFindEP>
 801118e:	4603      	mov	r3, r0
 8011190:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011192:	7dbb      	ldrb	r3, [r7, #22]
 8011194:	2bff      	cmp	r3, #255	@ 0xff
 8011196:	d025      	beq.n	80111e4 <USBD_LL_DataOutStage+0x15c>
 8011198:	7dbb      	ldrb	r3, [r7, #22]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d122      	bne.n	80111e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111a4:	b2db      	uxtb	r3, r3
 80111a6:	2b03      	cmp	r3, #3
 80111a8:	d117      	bne.n	80111da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80111aa:	7dba      	ldrb	r2, [r7, #22]
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	32ae      	adds	r2, #174	@ 0xae
 80111b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111b4:	699b      	ldr	r3, [r3, #24]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d00f      	beq.n	80111da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80111ba:	7dba      	ldrb	r2, [r7, #22]
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80111c2:	7dba      	ldrb	r2, [r7, #22]
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	32ae      	adds	r2, #174	@ 0xae
 80111c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111cc:	699b      	ldr	r3, [r3, #24]
 80111ce:	7afa      	ldrb	r2, [r7, #11]
 80111d0:	4611      	mov	r1, r2
 80111d2:	68f8      	ldr	r0, [r7, #12]
 80111d4:	4798      	blx	r3
 80111d6:	4603      	mov	r3, r0
 80111d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80111da:	7dfb      	ldrb	r3, [r7, #23]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d001      	beq.n	80111e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80111e0:	7dfb      	ldrb	r3, [r7, #23]
 80111e2:	e000      	b.n	80111e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80111e4:	2300      	movs	r3, #0
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3718      	adds	r7, #24
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}

080111ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80111ee:	b580      	push	{r7, lr}
 80111f0:	b086      	sub	sp, #24
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	60f8      	str	r0, [r7, #12]
 80111f6:	460b      	mov	r3, r1
 80111f8:	607a      	str	r2, [r7, #4]
 80111fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80111fc:	7afb      	ldrb	r3, [r7, #11]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d16f      	bne.n	80112e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	3314      	adds	r3, #20
 8011206:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801120e:	2b02      	cmp	r3, #2
 8011210:	d15a      	bne.n	80112c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	689a      	ldr	r2, [r3, #8]
 8011216:	693b      	ldr	r3, [r7, #16]
 8011218:	68db      	ldr	r3, [r3, #12]
 801121a:	429a      	cmp	r2, r3
 801121c:	d914      	bls.n	8011248 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801121e:	693b      	ldr	r3, [r7, #16]
 8011220:	689a      	ldr	r2, [r3, #8]
 8011222:	693b      	ldr	r3, [r7, #16]
 8011224:	68db      	ldr	r3, [r3, #12]
 8011226:	1ad2      	subs	r2, r2, r3
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	689b      	ldr	r3, [r3, #8]
 8011230:	461a      	mov	r2, r3
 8011232:	6879      	ldr	r1, [r7, #4]
 8011234:	68f8      	ldr	r0, [r7, #12]
 8011236:	f001 f8f7 	bl	8012428 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801123a:	2300      	movs	r3, #0
 801123c:	2200      	movs	r2, #0
 801123e:	2100      	movs	r1, #0
 8011240:	68f8      	ldr	r0, [r7, #12]
 8011242:	f7ff fda7 	bl	8010d94 <USBD_LL_PrepareReceive>
 8011246:	e03f      	b.n	80112c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	68da      	ldr	r2, [r3, #12]
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	689b      	ldr	r3, [r3, #8]
 8011250:	429a      	cmp	r2, r3
 8011252:	d11c      	bne.n	801128e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	685a      	ldr	r2, [r3, #4]
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801125c:	429a      	cmp	r2, r3
 801125e:	d316      	bcc.n	801128e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	685a      	ldr	r2, [r3, #4]
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801126a:	429a      	cmp	r2, r3
 801126c:	d20f      	bcs.n	801128e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801126e:	2200      	movs	r2, #0
 8011270:	2100      	movs	r1, #0
 8011272:	68f8      	ldr	r0, [r7, #12]
 8011274:	f001 f8d8 	bl	8012428 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	2200      	movs	r2, #0
 801127c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011280:	2300      	movs	r3, #0
 8011282:	2200      	movs	r2, #0
 8011284:	2100      	movs	r1, #0
 8011286:	68f8      	ldr	r0, [r7, #12]
 8011288:	f7ff fd84 	bl	8010d94 <USBD_LL_PrepareReceive>
 801128c:	e01c      	b.n	80112c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011294:	b2db      	uxtb	r3, r3
 8011296:	2b03      	cmp	r3, #3
 8011298:	d10f      	bne.n	80112ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112a0:	68db      	ldr	r3, [r3, #12]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d009      	beq.n	80112ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	2200      	movs	r2, #0
 80112aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112b4:	68db      	ldr	r3, [r3, #12]
 80112b6:	68f8      	ldr	r0, [r7, #12]
 80112b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80112ba:	2180      	movs	r1, #128	@ 0x80
 80112bc:	68f8      	ldr	r0, [r7, #12]
 80112be:	f7ff fcd7 	bl	8010c70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80112c2:	68f8      	ldr	r0, [r7, #12]
 80112c4:	f001 f902 	bl	80124cc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d03a      	beq.n	8011348 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80112d2:	68f8      	ldr	r0, [r7, #12]
 80112d4:	f7ff fe42 	bl	8010f5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	2200      	movs	r2, #0
 80112dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80112e0:	e032      	b.n	8011348 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80112e2:	7afb      	ldrb	r3, [r7, #11]
 80112e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80112e8:	b2db      	uxtb	r3, r3
 80112ea:	4619      	mov	r1, r3
 80112ec:	68f8      	ldr	r0, [r7, #12]
 80112ee:	f000 f8bf 	bl	8011470 <USBD_CoreFindEP>
 80112f2:	4603      	mov	r3, r0
 80112f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80112f6:	7dfb      	ldrb	r3, [r7, #23]
 80112f8:	2bff      	cmp	r3, #255	@ 0xff
 80112fa:	d025      	beq.n	8011348 <USBD_LL_DataInStage+0x15a>
 80112fc:	7dfb      	ldrb	r3, [r7, #23]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d122      	bne.n	8011348 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011308:	b2db      	uxtb	r3, r3
 801130a:	2b03      	cmp	r3, #3
 801130c:	d11c      	bne.n	8011348 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801130e:	7dfa      	ldrb	r2, [r7, #23]
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	32ae      	adds	r2, #174	@ 0xae
 8011314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011318:	695b      	ldr	r3, [r3, #20]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d014      	beq.n	8011348 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801131e:	7dfa      	ldrb	r2, [r7, #23]
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011326:	7dfa      	ldrb	r2, [r7, #23]
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	32ae      	adds	r2, #174	@ 0xae
 801132c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011330:	695b      	ldr	r3, [r3, #20]
 8011332:	7afa      	ldrb	r2, [r7, #11]
 8011334:	4611      	mov	r1, r2
 8011336:	68f8      	ldr	r0, [r7, #12]
 8011338:	4798      	blx	r3
 801133a:	4603      	mov	r3, r0
 801133c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801133e:	7dbb      	ldrb	r3, [r7, #22]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d001      	beq.n	8011348 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011344:	7dbb      	ldrb	r3, [r7, #22]
 8011346:	e000      	b.n	801134a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011348:	2300      	movs	r3, #0
}
 801134a:	4618      	mov	r0, r3
 801134c:	3718      	adds	r7, #24
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}

08011352 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011352:	b580      	push	{r7, lr}
 8011354:	b084      	sub	sp, #16
 8011356:	af00      	add	r7, sp, #0
 8011358:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801135a:	2300      	movs	r3, #0
 801135c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	2201      	movs	r2, #1
 8011362:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2200      	movs	r2, #0
 801136a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2200      	movs	r2, #0
 8011372:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2200      	movs	r2, #0
 8011378:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	2200      	movs	r2, #0
 8011380:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801138a:	2b00      	cmp	r3, #0
 801138c:	d014      	beq.n	80113b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011394:	685b      	ldr	r3, [r3, #4]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d00e      	beq.n	80113b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	687a      	ldr	r2, [r7, #4]
 80113a4:	6852      	ldr	r2, [r2, #4]
 80113a6:	b2d2      	uxtb	r2, r2
 80113a8:	4611      	mov	r1, r2
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	4798      	blx	r3
 80113ae:	4603      	mov	r3, r0
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d001      	beq.n	80113b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80113b4:	2303      	movs	r3, #3
 80113b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80113b8:	2340      	movs	r3, #64	@ 0x40
 80113ba:	2200      	movs	r2, #0
 80113bc:	2100      	movs	r1, #0
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f7ff fc1d 	bl	8010bfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2201      	movs	r2, #1
 80113c8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2240      	movs	r2, #64	@ 0x40
 80113d0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80113d4:	2340      	movs	r3, #64	@ 0x40
 80113d6:	2200      	movs	r2, #0
 80113d8:	2180      	movs	r1, #128	@ 0x80
 80113da:	6878      	ldr	r0, [r7, #4]
 80113dc:	f7ff fc0f 	bl	8010bfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2201      	movs	r2, #1
 80113e4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2240      	movs	r2, #64	@ 0x40
 80113ea:	621a      	str	r2, [r3, #32]

  return ret;
 80113ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	3710      	adds	r7, #16
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}

080113f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80113f6:	b480      	push	{r7}
 80113f8:	b083      	sub	sp, #12
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	6078      	str	r0, [r7, #4]
 80113fe:	460b      	mov	r3, r1
 8011400:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	78fa      	ldrb	r2, [r7, #3]
 8011406:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011408:	2300      	movs	r3, #0
}
 801140a:	4618      	mov	r0, r3
 801140c:	370c      	adds	r7, #12
 801140e:	46bd      	mov	sp, r7
 8011410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011414:	4770      	bx	lr

08011416 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011416:	b580      	push	{r7, lr}
 8011418:	b082      	sub	sp, #8
 801141a:	af00      	add	r7, sp, #0
 801141c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011424:	b2db      	uxtb	r3, r3
 8011426:	2b03      	cmp	r3, #3
 8011428:	d110      	bne.n	801144c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011430:	2b00      	cmp	r3, #0
 8011432:	d00b      	beq.n	801144c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801143a:	69db      	ldr	r3, [r3, #28]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d005      	beq.n	801144c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011446:	69db      	ldr	r3, [r3, #28]
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801144c:	2300      	movs	r3, #0
}
 801144e:	4618      	mov	r0, r3
 8011450:	3708      	adds	r7, #8
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}

08011456 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011456:	b480      	push	{r7}
 8011458:	b083      	sub	sp, #12
 801145a:	af00      	add	r7, sp, #0
 801145c:	6078      	str	r0, [r7, #4]
 801145e:	460b      	mov	r3, r1
 8011460:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011462:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011464:	4618      	mov	r0, r3
 8011466:	370c      	adds	r7, #12
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr

08011470 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011470:	b480      	push	{r7}
 8011472:	b083      	sub	sp, #12
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	460b      	mov	r3, r1
 801147a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801147c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801147e:	4618      	mov	r0, r3
 8011480:	370c      	adds	r7, #12
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr

0801148a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801148a:	b580      	push	{r7, lr}
 801148c:	b086      	sub	sp, #24
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
 8011492:	460b      	mov	r3, r1
 8011494:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801149e:	2300      	movs	r3, #0
 80114a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	885b      	ldrh	r3, [r3, #2]
 80114a6:	b29b      	uxth	r3, r3
 80114a8:	68fa      	ldr	r2, [r7, #12]
 80114aa:	7812      	ldrb	r2, [r2, #0]
 80114ac:	4293      	cmp	r3, r2
 80114ae:	d91f      	bls.n	80114f0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	781b      	ldrb	r3, [r3, #0]
 80114b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80114b6:	e013      	b.n	80114e0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80114b8:	f107 030a 	add.w	r3, r7, #10
 80114bc:	4619      	mov	r1, r3
 80114be:	6978      	ldr	r0, [r7, #20]
 80114c0:	f000 f81b 	bl	80114fa <USBD_GetNextDesc>
 80114c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	785b      	ldrb	r3, [r3, #1]
 80114ca:	2b05      	cmp	r3, #5
 80114cc:	d108      	bne.n	80114e0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	789b      	ldrb	r3, [r3, #2]
 80114d6:	78fa      	ldrb	r2, [r7, #3]
 80114d8:	429a      	cmp	r2, r3
 80114da:	d008      	beq.n	80114ee <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80114dc:	2300      	movs	r3, #0
 80114de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	885b      	ldrh	r3, [r3, #2]
 80114e4:	b29a      	uxth	r2, r3
 80114e6:	897b      	ldrh	r3, [r7, #10]
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d8e5      	bhi.n	80114b8 <USBD_GetEpDesc+0x2e>
 80114ec:	e000      	b.n	80114f0 <USBD_GetEpDesc+0x66>
          break;
 80114ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80114f0:	693b      	ldr	r3, [r7, #16]
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3718      	adds	r7, #24
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}

080114fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80114fa:	b480      	push	{r7}
 80114fc:	b085      	sub	sp, #20
 80114fe:	af00      	add	r7, sp, #0
 8011500:	6078      	str	r0, [r7, #4]
 8011502:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	881b      	ldrh	r3, [r3, #0]
 801150c:	68fa      	ldr	r2, [r7, #12]
 801150e:	7812      	ldrb	r2, [r2, #0]
 8011510:	4413      	add	r3, r2
 8011512:	b29a      	uxth	r2, r3
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	781b      	ldrb	r3, [r3, #0]
 801151c:	461a      	mov	r2, r3
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	4413      	add	r3, r2
 8011522:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011524:	68fb      	ldr	r3, [r7, #12]
}
 8011526:	4618      	mov	r0, r3
 8011528:	3714      	adds	r7, #20
 801152a:	46bd      	mov	sp, r7
 801152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011530:	4770      	bx	lr

08011532 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011532:	b480      	push	{r7}
 8011534:	b087      	sub	sp, #28
 8011536:	af00      	add	r7, sp, #0
 8011538:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	781b      	ldrb	r3, [r3, #0]
 8011542:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	3301      	adds	r3, #1
 8011548:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801154a:	697b      	ldr	r3, [r7, #20]
 801154c:	781b      	ldrb	r3, [r3, #0]
 801154e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011550:	8a3b      	ldrh	r3, [r7, #16]
 8011552:	021b      	lsls	r3, r3, #8
 8011554:	b21a      	sxth	r2, r3
 8011556:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801155a:	4313      	orrs	r3, r2
 801155c:	b21b      	sxth	r3, r3
 801155e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011560:	89fb      	ldrh	r3, [r7, #14]
}
 8011562:	4618      	mov	r0, r3
 8011564:	371c      	adds	r7, #28
 8011566:	46bd      	mov	sp, r7
 8011568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156c:	4770      	bx	lr
	...

08011570 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801157a:	2300      	movs	r3, #0
 801157c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	781b      	ldrb	r3, [r3, #0]
 8011582:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011586:	2b40      	cmp	r3, #64	@ 0x40
 8011588:	d005      	beq.n	8011596 <USBD_StdDevReq+0x26>
 801158a:	2b40      	cmp	r3, #64	@ 0x40
 801158c:	d857      	bhi.n	801163e <USBD_StdDevReq+0xce>
 801158e:	2b00      	cmp	r3, #0
 8011590:	d00f      	beq.n	80115b2 <USBD_StdDevReq+0x42>
 8011592:	2b20      	cmp	r3, #32
 8011594:	d153      	bne.n	801163e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	32ae      	adds	r2, #174	@ 0xae
 80115a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115a4:	689b      	ldr	r3, [r3, #8]
 80115a6:	6839      	ldr	r1, [r7, #0]
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	4798      	blx	r3
 80115ac:	4603      	mov	r3, r0
 80115ae:	73fb      	strb	r3, [r7, #15]
      break;
 80115b0:	e04a      	b.n	8011648 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	785b      	ldrb	r3, [r3, #1]
 80115b6:	2b09      	cmp	r3, #9
 80115b8:	d83b      	bhi.n	8011632 <USBD_StdDevReq+0xc2>
 80115ba:	a201      	add	r2, pc, #4	@ (adr r2, 80115c0 <USBD_StdDevReq+0x50>)
 80115bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115c0:	08011615 	.word	0x08011615
 80115c4:	08011629 	.word	0x08011629
 80115c8:	08011633 	.word	0x08011633
 80115cc:	0801161f 	.word	0x0801161f
 80115d0:	08011633 	.word	0x08011633
 80115d4:	080115f3 	.word	0x080115f3
 80115d8:	080115e9 	.word	0x080115e9
 80115dc:	08011633 	.word	0x08011633
 80115e0:	0801160b 	.word	0x0801160b
 80115e4:	080115fd 	.word	0x080115fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80115e8:	6839      	ldr	r1, [r7, #0]
 80115ea:	6878      	ldr	r0, [r7, #4]
 80115ec:	f000 fa3c 	bl	8011a68 <USBD_GetDescriptor>
          break;
 80115f0:	e024      	b.n	801163c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80115f2:	6839      	ldr	r1, [r7, #0]
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	f000 fba1 	bl	8011d3c <USBD_SetAddress>
          break;
 80115fa:	e01f      	b.n	801163c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80115fc:	6839      	ldr	r1, [r7, #0]
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f000 fbe0 	bl	8011dc4 <USBD_SetConfig>
 8011604:	4603      	mov	r3, r0
 8011606:	73fb      	strb	r3, [r7, #15]
          break;
 8011608:	e018      	b.n	801163c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801160a:	6839      	ldr	r1, [r7, #0]
 801160c:	6878      	ldr	r0, [r7, #4]
 801160e:	f000 fc83 	bl	8011f18 <USBD_GetConfig>
          break;
 8011612:	e013      	b.n	801163c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011614:	6839      	ldr	r1, [r7, #0]
 8011616:	6878      	ldr	r0, [r7, #4]
 8011618:	f000 fcb4 	bl	8011f84 <USBD_GetStatus>
          break;
 801161c:	e00e      	b.n	801163c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801161e:	6839      	ldr	r1, [r7, #0]
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f000 fce3 	bl	8011fec <USBD_SetFeature>
          break;
 8011626:	e009      	b.n	801163c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011628:	6839      	ldr	r1, [r7, #0]
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f000 fd07 	bl	801203e <USBD_ClrFeature>
          break;
 8011630:	e004      	b.n	801163c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011632:	6839      	ldr	r1, [r7, #0]
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f000 fd5e 	bl	80120f6 <USBD_CtlError>
          break;
 801163a:	bf00      	nop
      }
      break;
 801163c:	e004      	b.n	8011648 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801163e:	6839      	ldr	r1, [r7, #0]
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f000 fd58 	bl	80120f6 <USBD_CtlError>
      break;
 8011646:	bf00      	nop
  }

  return ret;
 8011648:	7bfb      	ldrb	r3, [r7, #15]
}
 801164a:	4618      	mov	r0, r3
 801164c:	3710      	adds	r7, #16
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
 8011652:	bf00      	nop

08011654 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b084      	sub	sp, #16
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801165e:	2300      	movs	r3, #0
 8011660:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	781b      	ldrb	r3, [r3, #0]
 8011666:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801166a:	2b40      	cmp	r3, #64	@ 0x40
 801166c:	d005      	beq.n	801167a <USBD_StdItfReq+0x26>
 801166e:	2b40      	cmp	r3, #64	@ 0x40
 8011670:	d852      	bhi.n	8011718 <USBD_StdItfReq+0xc4>
 8011672:	2b00      	cmp	r3, #0
 8011674:	d001      	beq.n	801167a <USBD_StdItfReq+0x26>
 8011676:	2b20      	cmp	r3, #32
 8011678:	d14e      	bne.n	8011718 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011680:	b2db      	uxtb	r3, r3
 8011682:	3b01      	subs	r3, #1
 8011684:	2b02      	cmp	r3, #2
 8011686:	d840      	bhi.n	801170a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	889b      	ldrh	r3, [r3, #4]
 801168c:	b2db      	uxtb	r3, r3
 801168e:	2b01      	cmp	r3, #1
 8011690:	d836      	bhi.n	8011700 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	889b      	ldrh	r3, [r3, #4]
 8011696:	b2db      	uxtb	r3, r3
 8011698:	4619      	mov	r1, r3
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f7ff fedb 	bl	8011456 <USBD_CoreFindIF>
 80116a0:	4603      	mov	r3, r0
 80116a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80116a4:	7bbb      	ldrb	r3, [r7, #14]
 80116a6:	2bff      	cmp	r3, #255	@ 0xff
 80116a8:	d01d      	beq.n	80116e6 <USBD_StdItfReq+0x92>
 80116aa:	7bbb      	ldrb	r3, [r7, #14]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d11a      	bne.n	80116e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80116b0:	7bba      	ldrb	r2, [r7, #14]
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	32ae      	adds	r2, #174	@ 0xae
 80116b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116ba:	689b      	ldr	r3, [r3, #8]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00f      	beq.n	80116e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80116c0:	7bba      	ldrb	r2, [r7, #14]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80116c8:	7bba      	ldrb	r2, [r7, #14]
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	32ae      	adds	r2, #174	@ 0xae
 80116ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116d2:	689b      	ldr	r3, [r3, #8]
 80116d4:	6839      	ldr	r1, [r7, #0]
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	4798      	blx	r3
 80116da:	4603      	mov	r3, r0
 80116dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80116de:	e004      	b.n	80116ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80116e0:	2303      	movs	r3, #3
 80116e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80116e4:	e001      	b.n	80116ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80116e6:	2303      	movs	r3, #3
 80116e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	88db      	ldrh	r3, [r3, #6]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d110      	bne.n	8011714 <USBD_StdItfReq+0xc0>
 80116f2:	7bfb      	ldrb	r3, [r7, #15]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d10d      	bne.n	8011714 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f000 fed4 	bl	80124a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80116fe:	e009      	b.n	8011714 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011700:	6839      	ldr	r1, [r7, #0]
 8011702:	6878      	ldr	r0, [r7, #4]
 8011704:	f000 fcf7 	bl	80120f6 <USBD_CtlError>
          break;
 8011708:	e004      	b.n	8011714 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801170a:	6839      	ldr	r1, [r7, #0]
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f000 fcf2 	bl	80120f6 <USBD_CtlError>
          break;
 8011712:	e000      	b.n	8011716 <USBD_StdItfReq+0xc2>
          break;
 8011714:	bf00      	nop
      }
      break;
 8011716:	e004      	b.n	8011722 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011718:	6839      	ldr	r1, [r7, #0]
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f000 fceb 	bl	80120f6 <USBD_CtlError>
      break;
 8011720:	bf00      	nop
  }

  return ret;
 8011722:	7bfb      	ldrb	r3, [r7, #15]
}
 8011724:	4618      	mov	r0, r3
 8011726:	3710      	adds	r7, #16
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b084      	sub	sp, #16
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011736:	2300      	movs	r3, #0
 8011738:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	889b      	ldrh	r3, [r3, #4]
 801173e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	781b      	ldrb	r3, [r3, #0]
 8011744:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011748:	2b40      	cmp	r3, #64	@ 0x40
 801174a:	d007      	beq.n	801175c <USBD_StdEPReq+0x30>
 801174c:	2b40      	cmp	r3, #64	@ 0x40
 801174e:	f200 817f 	bhi.w	8011a50 <USBD_StdEPReq+0x324>
 8011752:	2b00      	cmp	r3, #0
 8011754:	d02a      	beq.n	80117ac <USBD_StdEPReq+0x80>
 8011756:	2b20      	cmp	r3, #32
 8011758:	f040 817a 	bne.w	8011a50 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801175c:	7bbb      	ldrb	r3, [r7, #14]
 801175e:	4619      	mov	r1, r3
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f7ff fe85 	bl	8011470 <USBD_CoreFindEP>
 8011766:	4603      	mov	r3, r0
 8011768:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801176a:	7b7b      	ldrb	r3, [r7, #13]
 801176c:	2bff      	cmp	r3, #255	@ 0xff
 801176e:	f000 8174 	beq.w	8011a5a <USBD_StdEPReq+0x32e>
 8011772:	7b7b      	ldrb	r3, [r7, #13]
 8011774:	2b00      	cmp	r3, #0
 8011776:	f040 8170 	bne.w	8011a5a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801177a:	7b7a      	ldrb	r2, [r7, #13]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011782:	7b7a      	ldrb	r2, [r7, #13]
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	32ae      	adds	r2, #174	@ 0xae
 8011788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801178c:	689b      	ldr	r3, [r3, #8]
 801178e:	2b00      	cmp	r3, #0
 8011790:	f000 8163 	beq.w	8011a5a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011794:	7b7a      	ldrb	r2, [r7, #13]
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	32ae      	adds	r2, #174	@ 0xae
 801179a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801179e:	689b      	ldr	r3, [r3, #8]
 80117a0:	6839      	ldr	r1, [r7, #0]
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	4798      	blx	r3
 80117a6:	4603      	mov	r3, r0
 80117a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80117aa:	e156      	b.n	8011a5a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	785b      	ldrb	r3, [r3, #1]
 80117b0:	2b03      	cmp	r3, #3
 80117b2:	d008      	beq.n	80117c6 <USBD_StdEPReq+0x9a>
 80117b4:	2b03      	cmp	r3, #3
 80117b6:	f300 8145 	bgt.w	8011a44 <USBD_StdEPReq+0x318>
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	f000 809b 	beq.w	80118f6 <USBD_StdEPReq+0x1ca>
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	d03c      	beq.n	801183e <USBD_StdEPReq+0x112>
 80117c4:	e13e      	b.n	8011a44 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117cc:	b2db      	uxtb	r3, r3
 80117ce:	2b02      	cmp	r3, #2
 80117d0:	d002      	beq.n	80117d8 <USBD_StdEPReq+0xac>
 80117d2:	2b03      	cmp	r3, #3
 80117d4:	d016      	beq.n	8011804 <USBD_StdEPReq+0xd8>
 80117d6:	e02c      	b.n	8011832 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80117d8:	7bbb      	ldrb	r3, [r7, #14]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d00d      	beq.n	80117fa <USBD_StdEPReq+0xce>
 80117de:	7bbb      	ldrb	r3, [r7, #14]
 80117e0:	2b80      	cmp	r3, #128	@ 0x80
 80117e2:	d00a      	beq.n	80117fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80117e4:	7bbb      	ldrb	r3, [r7, #14]
 80117e6:	4619      	mov	r1, r3
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f7ff fa41 	bl	8010c70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80117ee:	2180      	movs	r1, #128	@ 0x80
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f7ff fa3d 	bl	8010c70 <USBD_LL_StallEP>
 80117f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80117f8:	e020      	b.n	801183c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80117fa:	6839      	ldr	r1, [r7, #0]
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f000 fc7a 	bl	80120f6 <USBD_CtlError>
              break;
 8011802:	e01b      	b.n	801183c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	885b      	ldrh	r3, [r3, #2]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d10e      	bne.n	801182a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801180c:	7bbb      	ldrb	r3, [r7, #14]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d00b      	beq.n	801182a <USBD_StdEPReq+0xfe>
 8011812:	7bbb      	ldrb	r3, [r7, #14]
 8011814:	2b80      	cmp	r3, #128	@ 0x80
 8011816:	d008      	beq.n	801182a <USBD_StdEPReq+0xfe>
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	88db      	ldrh	r3, [r3, #6]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d104      	bne.n	801182a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011820:	7bbb      	ldrb	r3, [r7, #14]
 8011822:	4619      	mov	r1, r3
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f7ff fa23 	bl	8010c70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f000 fe3b 	bl	80124a6 <USBD_CtlSendStatus>

              break;
 8011830:	e004      	b.n	801183c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011832:	6839      	ldr	r1, [r7, #0]
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f000 fc5e 	bl	80120f6 <USBD_CtlError>
              break;
 801183a:	bf00      	nop
          }
          break;
 801183c:	e107      	b.n	8011a4e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011844:	b2db      	uxtb	r3, r3
 8011846:	2b02      	cmp	r3, #2
 8011848:	d002      	beq.n	8011850 <USBD_StdEPReq+0x124>
 801184a:	2b03      	cmp	r3, #3
 801184c:	d016      	beq.n	801187c <USBD_StdEPReq+0x150>
 801184e:	e04b      	b.n	80118e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011850:	7bbb      	ldrb	r3, [r7, #14]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d00d      	beq.n	8011872 <USBD_StdEPReq+0x146>
 8011856:	7bbb      	ldrb	r3, [r7, #14]
 8011858:	2b80      	cmp	r3, #128	@ 0x80
 801185a:	d00a      	beq.n	8011872 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801185c:	7bbb      	ldrb	r3, [r7, #14]
 801185e:	4619      	mov	r1, r3
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	f7ff fa05 	bl	8010c70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011866:	2180      	movs	r1, #128	@ 0x80
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f7ff fa01 	bl	8010c70 <USBD_LL_StallEP>
 801186e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011870:	e040      	b.n	80118f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011872:	6839      	ldr	r1, [r7, #0]
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f000 fc3e 	bl	80120f6 <USBD_CtlError>
              break;
 801187a:	e03b      	b.n	80118f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	885b      	ldrh	r3, [r3, #2]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d136      	bne.n	80118f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011884:	7bbb      	ldrb	r3, [r7, #14]
 8011886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801188a:	2b00      	cmp	r3, #0
 801188c:	d004      	beq.n	8011898 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801188e:	7bbb      	ldrb	r3, [r7, #14]
 8011890:	4619      	mov	r1, r3
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	f7ff fa05 	bl	8010ca2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f000 fe04 	bl	80124a6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801189e:	7bbb      	ldrb	r3, [r7, #14]
 80118a0:	4619      	mov	r1, r3
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f7ff fde4 	bl	8011470 <USBD_CoreFindEP>
 80118a8:	4603      	mov	r3, r0
 80118aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80118ac:	7b7b      	ldrb	r3, [r7, #13]
 80118ae:	2bff      	cmp	r3, #255	@ 0xff
 80118b0:	d01f      	beq.n	80118f2 <USBD_StdEPReq+0x1c6>
 80118b2:	7b7b      	ldrb	r3, [r7, #13]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d11c      	bne.n	80118f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80118b8:	7b7a      	ldrb	r2, [r7, #13]
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80118c0:	7b7a      	ldrb	r2, [r7, #13]
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	32ae      	adds	r2, #174	@ 0xae
 80118c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118ca:	689b      	ldr	r3, [r3, #8]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d010      	beq.n	80118f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80118d0:	7b7a      	ldrb	r2, [r7, #13]
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	32ae      	adds	r2, #174	@ 0xae
 80118d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118da:	689b      	ldr	r3, [r3, #8]
 80118dc:	6839      	ldr	r1, [r7, #0]
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	4798      	blx	r3
 80118e2:	4603      	mov	r3, r0
 80118e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80118e6:	e004      	b.n	80118f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80118e8:	6839      	ldr	r1, [r7, #0]
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f000 fc03 	bl	80120f6 <USBD_CtlError>
              break;
 80118f0:	e000      	b.n	80118f4 <USBD_StdEPReq+0x1c8>
              break;
 80118f2:	bf00      	nop
          }
          break;
 80118f4:	e0ab      	b.n	8011a4e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80118fc:	b2db      	uxtb	r3, r3
 80118fe:	2b02      	cmp	r3, #2
 8011900:	d002      	beq.n	8011908 <USBD_StdEPReq+0x1dc>
 8011902:	2b03      	cmp	r3, #3
 8011904:	d032      	beq.n	801196c <USBD_StdEPReq+0x240>
 8011906:	e097      	b.n	8011a38 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011908:	7bbb      	ldrb	r3, [r7, #14]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d007      	beq.n	801191e <USBD_StdEPReq+0x1f2>
 801190e:	7bbb      	ldrb	r3, [r7, #14]
 8011910:	2b80      	cmp	r3, #128	@ 0x80
 8011912:	d004      	beq.n	801191e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011914:	6839      	ldr	r1, [r7, #0]
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f000 fbed 	bl	80120f6 <USBD_CtlError>
                break;
 801191c:	e091      	b.n	8011a42 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801191e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011922:	2b00      	cmp	r3, #0
 8011924:	da0b      	bge.n	801193e <USBD_StdEPReq+0x212>
 8011926:	7bbb      	ldrb	r3, [r7, #14]
 8011928:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801192c:	4613      	mov	r3, r2
 801192e:	009b      	lsls	r3, r3, #2
 8011930:	4413      	add	r3, r2
 8011932:	009b      	lsls	r3, r3, #2
 8011934:	3310      	adds	r3, #16
 8011936:	687a      	ldr	r2, [r7, #4]
 8011938:	4413      	add	r3, r2
 801193a:	3304      	adds	r3, #4
 801193c:	e00b      	b.n	8011956 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801193e:	7bbb      	ldrb	r3, [r7, #14]
 8011940:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011944:	4613      	mov	r3, r2
 8011946:	009b      	lsls	r3, r3, #2
 8011948:	4413      	add	r3, r2
 801194a:	009b      	lsls	r3, r3, #2
 801194c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011950:	687a      	ldr	r2, [r7, #4]
 8011952:	4413      	add	r3, r2
 8011954:	3304      	adds	r3, #4
 8011956:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	2200      	movs	r2, #0
 801195c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801195e:	68bb      	ldr	r3, [r7, #8]
 8011960:	2202      	movs	r2, #2
 8011962:	4619      	mov	r1, r3
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	f000 fd44 	bl	80123f2 <USBD_CtlSendData>
              break;
 801196a:	e06a      	b.n	8011a42 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801196c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011970:	2b00      	cmp	r3, #0
 8011972:	da11      	bge.n	8011998 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011974:	7bbb      	ldrb	r3, [r7, #14]
 8011976:	f003 020f 	and.w	r2, r3, #15
 801197a:	6879      	ldr	r1, [r7, #4]
 801197c:	4613      	mov	r3, r2
 801197e:	009b      	lsls	r3, r3, #2
 8011980:	4413      	add	r3, r2
 8011982:	009b      	lsls	r3, r3, #2
 8011984:	440b      	add	r3, r1
 8011986:	3324      	adds	r3, #36	@ 0x24
 8011988:	881b      	ldrh	r3, [r3, #0]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d117      	bne.n	80119be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801198e:	6839      	ldr	r1, [r7, #0]
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f000 fbb0 	bl	80120f6 <USBD_CtlError>
                  break;
 8011996:	e054      	b.n	8011a42 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011998:	7bbb      	ldrb	r3, [r7, #14]
 801199a:	f003 020f 	and.w	r2, r3, #15
 801199e:	6879      	ldr	r1, [r7, #4]
 80119a0:	4613      	mov	r3, r2
 80119a2:	009b      	lsls	r3, r3, #2
 80119a4:	4413      	add	r3, r2
 80119a6:	009b      	lsls	r3, r3, #2
 80119a8:	440b      	add	r3, r1
 80119aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80119ae:	881b      	ldrh	r3, [r3, #0]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d104      	bne.n	80119be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80119b4:	6839      	ldr	r1, [r7, #0]
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f000 fb9d 	bl	80120f6 <USBD_CtlError>
                  break;
 80119bc:	e041      	b.n	8011a42 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80119be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	da0b      	bge.n	80119de <USBD_StdEPReq+0x2b2>
 80119c6:	7bbb      	ldrb	r3, [r7, #14]
 80119c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80119cc:	4613      	mov	r3, r2
 80119ce:	009b      	lsls	r3, r3, #2
 80119d0:	4413      	add	r3, r2
 80119d2:	009b      	lsls	r3, r3, #2
 80119d4:	3310      	adds	r3, #16
 80119d6:	687a      	ldr	r2, [r7, #4]
 80119d8:	4413      	add	r3, r2
 80119da:	3304      	adds	r3, #4
 80119dc:	e00b      	b.n	80119f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80119de:	7bbb      	ldrb	r3, [r7, #14]
 80119e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80119e4:	4613      	mov	r3, r2
 80119e6:	009b      	lsls	r3, r3, #2
 80119e8:	4413      	add	r3, r2
 80119ea:	009b      	lsls	r3, r3, #2
 80119ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80119f0:	687a      	ldr	r2, [r7, #4]
 80119f2:	4413      	add	r3, r2
 80119f4:	3304      	adds	r3, #4
 80119f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80119f8:	7bbb      	ldrb	r3, [r7, #14]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d002      	beq.n	8011a04 <USBD_StdEPReq+0x2d8>
 80119fe:	7bbb      	ldrb	r3, [r7, #14]
 8011a00:	2b80      	cmp	r3, #128	@ 0x80
 8011a02:	d103      	bne.n	8011a0c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	2200      	movs	r2, #0
 8011a08:	601a      	str	r2, [r3, #0]
 8011a0a:	e00e      	b.n	8011a2a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011a0c:	7bbb      	ldrb	r3, [r7, #14]
 8011a0e:	4619      	mov	r1, r3
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f7ff f95f 	bl	8010cd4 <USBD_LL_IsStallEP>
 8011a16:	4603      	mov	r3, r0
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d003      	beq.n	8011a24 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	2201      	movs	r2, #1
 8011a20:	601a      	str	r2, [r3, #0]
 8011a22:	e002      	b.n	8011a2a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	2200      	movs	r2, #0
 8011a28:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011a2a:	68bb      	ldr	r3, [r7, #8]
 8011a2c:	2202      	movs	r2, #2
 8011a2e:	4619      	mov	r1, r3
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f000 fcde 	bl	80123f2 <USBD_CtlSendData>
              break;
 8011a36:	e004      	b.n	8011a42 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011a38:	6839      	ldr	r1, [r7, #0]
 8011a3a:	6878      	ldr	r0, [r7, #4]
 8011a3c:	f000 fb5b 	bl	80120f6 <USBD_CtlError>
              break;
 8011a40:	bf00      	nop
          }
          break;
 8011a42:	e004      	b.n	8011a4e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011a44:	6839      	ldr	r1, [r7, #0]
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f000 fb55 	bl	80120f6 <USBD_CtlError>
          break;
 8011a4c:	bf00      	nop
      }
      break;
 8011a4e:	e005      	b.n	8011a5c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011a50:	6839      	ldr	r1, [r7, #0]
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f000 fb4f 	bl	80120f6 <USBD_CtlError>
      break;
 8011a58:	e000      	b.n	8011a5c <USBD_StdEPReq+0x330>
      break;
 8011a5a:	bf00      	nop
  }

  return ret;
 8011a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
	...

08011a68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b084      	sub	sp, #16
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
 8011a70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011a72:	2300      	movs	r3, #0
 8011a74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011a76:	2300      	movs	r3, #0
 8011a78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	885b      	ldrh	r3, [r3, #2]
 8011a82:	0a1b      	lsrs	r3, r3, #8
 8011a84:	b29b      	uxth	r3, r3
 8011a86:	3b01      	subs	r3, #1
 8011a88:	2b06      	cmp	r3, #6
 8011a8a:	f200 8128 	bhi.w	8011cde <USBD_GetDescriptor+0x276>
 8011a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8011a94 <USBD_GetDescriptor+0x2c>)
 8011a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a94:	08011ab1 	.word	0x08011ab1
 8011a98:	08011ac9 	.word	0x08011ac9
 8011a9c:	08011b09 	.word	0x08011b09
 8011aa0:	08011cdf 	.word	0x08011cdf
 8011aa4:	08011cdf 	.word	0x08011cdf
 8011aa8:	08011c7f 	.word	0x08011c7f
 8011aac:	08011cab 	.word	0x08011cab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	687a      	ldr	r2, [r7, #4]
 8011aba:	7c12      	ldrb	r2, [r2, #16]
 8011abc:	f107 0108 	add.w	r1, r7, #8
 8011ac0:	4610      	mov	r0, r2
 8011ac2:	4798      	blx	r3
 8011ac4:	60f8      	str	r0, [r7, #12]
      break;
 8011ac6:	e112      	b.n	8011cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	7c1b      	ldrb	r3, [r3, #16]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d10d      	bne.n	8011aec <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ad8:	f107 0208 	add.w	r2, r7, #8
 8011adc:	4610      	mov	r0, r2
 8011ade:	4798      	blx	r3
 8011ae0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	3301      	adds	r3, #1
 8011ae6:	2202      	movs	r2, #2
 8011ae8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011aea:	e100      	b.n	8011cee <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011af4:	f107 0208 	add.w	r2, r7, #8
 8011af8:	4610      	mov	r0, r2
 8011afa:	4798      	blx	r3
 8011afc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	3301      	adds	r3, #1
 8011b02:	2202      	movs	r2, #2
 8011b04:	701a      	strb	r2, [r3, #0]
      break;
 8011b06:	e0f2      	b.n	8011cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	885b      	ldrh	r3, [r3, #2]
 8011b0c:	b2db      	uxtb	r3, r3
 8011b0e:	2b05      	cmp	r3, #5
 8011b10:	f200 80ac 	bhi.w	8011c6c <USBD_GetDescriptor+0x204>
 8011b14:	a201      	add	r2, pc, #4	@ (adr r2, 8011b1c <USBD_GetDescriptor+0xb4>)
 8011b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b1a:	bf00      	nop
 8011b1c:	08011b35 	.word	0x08011b35
 8011b20:	08011b69 	.word	0x08011b69
 8011b24:	08011b9d 	.word	0x08011b9d
 8011b28:	08011bd1 	.word	0x08011bd1
 8011b2c:	08011c05 	.word	0x08011c05
 8011b30:	08011c39 	.word	0x08011c39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d00b      	beq.n	8011b58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b46:	685b      	ldr	r3, [r3, #4]
 8011b48:	687a      	ldr	r2, [r7, #4]
 8011b4a:	7c12      	ldrb	r2, [r2, #16]
 8011b4c:	f107 0108 	add.w	r1, r7, #8
 8011b50:	4610      	mov	r0, r2
 8011b52:	4798      	blx	r3
 8011b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011b56:	e091      	b.n	8011c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011b58:	6839      	ldr	r1, [r7, #0]
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f000 facb 	bl	80120f6 <USBD_CtlError>
            err++;
 8011b60:	7afb      	ldrb	r3, [r7, #11]
 8011b62:	3301      	adds	r3, #1
 8011b64:	72fb      	strb	r3, [r7, #11]
          break;
 8011b66:	e089      	b.n	8011c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b6e:	689b      	ldr	r3, [r3, #8]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d00b      	beq.n	8011b8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b7a:	689b      	ldr	r3, [r3, #8]
 8011b7c:	687a      	ldr	r2, [r7, #4]
 8011b7e:	7c12      	ldrb	r2, [r2, #16]
 8011b80:	f107 0108 	add.w	r1, r7, #8
 8011b84:	4610      	mov	r0, r2
 8011b86:	4798      	blx	r3
 8011b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011b8a:	e077      	b.n	8011c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011b8c:	6839      	ldr	r1, [r7, #0]
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f000 fab1 	bl	80120f6 <USBD_CtlError>
            err++;
 8011b94:	7afb      	ldrb	r3, [r7, #11]
 8011b96:	3301      	adds	r3, #1
 8011b98:	72fb      	strb	r3, [r7, #11]
          break;
 8011b9a:	e06f      	b.n	8011c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011ba2:	68db      	ldr	r3, [r3, #12]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d00b      	beq.n	8011bc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011bae:	68db      	ldr	r3, [r3, #12]
 8011bb0:	687a      	ldr	r2, [r7, #4]
 8011bb2:	7c12      	ldrb	r2, [r2, #16]
 8011bb4:	f107 0108 	add.w	r1, r7, #8
 8011bb8:	4610      	mov	r0, r2
 8011bba:	4798      	blx	r3
 8011bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011bbe:	e05d      	b.n	8011c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011bc0:	6839      	ldr	r1, [r7, #0]
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f000 fa97 	bl	80120f6 <USBD_CtlError>
            err++;
 8011bc8:	7afb      	ldrb	r3, [r7, #11]
 8011bca:	3301      	adds	r3, #1
 8011bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8011bce:	e055      	b.n	8011c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011bd6:	691b      	ldr	r3, [r3, #16]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d00b      	beq.n	8011bf4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011be2:	691b      	ldr	r3, [r3, #16]
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	7c12      	ldrb	r2, [r2, #16]
 8011be8:	f107 0108 	add.w	r1, r7, #8
 8011bec:	4610      	mov	r0, r2
 8011bee:	4798      	blx	r3
 8011bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011bf2:	e043      	b.n	8011c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011bf4:	6839      	ldr	r1, [r7, #0]
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f000 fa7d 	bl	80120f6 <USBD_CtlError>
            err++;
 8011bfc:	7afb      	ldrb	r3, [r7, #11]
 8011bfe:	3301      	adds	r3, #1
 8011c00:	72fb      	strb	r3, [r7, #11]
          break;
 8011c02:	e03b      	b.n	8011c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c0a:	695b      	ldr	r3, [r3, #20]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d00b      	beq.n	8011c28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c16:	695b      	ldr	r3, [r3, #20]
 8011c18:	687a      	ldr	r2, [r7, #4]
 8011c1a:	7c12      	ldrb	r2, [r2, #16]
 8011c1c:	f107 0108 	add.w	r1, r7, #8
 8011c20:	4610      	mov	r0, r2
 8011c22:	4798      	blx	r3
 8011c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c26:	e029      	b.n	8011c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011c28:	6839      	ldr	r1, [r7, #0]
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	f000 fa63 	bl	80120f6 <USBD_CtlError>
            err++;
 8011c30:	7afb      	ldrb	r3, [r7, #11]
 8011c32:	3301      	adds	r3, #1
 8011c34:	72fb      	strb	r3, [r7, #11]
          break;
 8011c36:	e021      	b.n	8011c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c3e:	699b      	ldr	r3, [r3, #24]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d00b      	beq.n	8011c5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c4a:	699b      	ldr	r3, [r3, #24]
 8011c4c:	687a      	ldr	r2, [r7, #4]
 8011c4e:	7c12      	ldrb	r2, [r2, #16]
 8011c50:	f107 0108 	add.w	r1, r7, #8
 8011c54:	4610      	mov	r0, r2
 8011c56:	4798      	blx	r3
 8011c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c5a:	e00f      	b.n	8011c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011c5c:	6839      	ldr	r1, [r7, #0]
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f000 fa49 	bl	80120f6 <USBD_CtlError>
            err++;
 8011c64:	7afb      	ldrb	r3, [r7, #11]
 8011c66:	3301      	adds	r3, #1
 8011c68:	72fb      	strb	r3, [r7, #11]
          break;
 8011c6a:	e007      	b.n	8011c7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011c6c:	6839      	ldr	r1, [r7, #0]
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f000 fa41 	bl	80120f6 <USBD_CtlError>
          err++;
 8011c74:	7afb      	ldrb	r3, [r7, #11]
 8011c76:	3301      	adds	r3, #1
 8011c78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011c7a:	bf00      	nop
      }
      break;
 8011c7c:	e037      	b.n	8011cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	7c1b      	ldrb	r3, [r3, #16]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d109      	bne.n	8011c9a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c8e:	f107 0208 	add.w	r2, r7, #8
 8011c92:	4610      	mov	r0, r2
 8011c94:	4798      	blx	r3
 8011c96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c98:	e029      	b.n	8011cee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011c9a:	6839      	ldr	r1, [r7, #0]
 8011c9c:	6878      	ldr	r0, [r7, #4]
 8011c9e:	f000 fa2a 	bl	80120f6 <USBD_CtlError>
        err++;
 8011ca2:	7afb      	ldrb	r3, [r7, #11]
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	72fb      	strb	r3, [r7, #11]
      break;
 8011ca8:	e021      	b.n	8011cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	7c1b      	ldrb	r3, [r3, #16]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d10d      	bne.n	8011cce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cba:	f107 0208 	add.w	r2, r7, #8
 8011cbe:	4610      	mov	r0, r2
 8011cc0:	4798      	blx	r3
 8011cc2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	3301      	adds	r3, #1
 8011cc8:	2207      	movs	r2, #7
 8011cca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011ccc:	e00f      	b.n	8011cee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011cce:	6839      	ldr	r1, [r7, #0]
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	f000 fa10 	bl	80120f6 <USBD_CtlError>
        err++;
 8011cd6:	7afb      	ldrb	r3, [r7, #11]
 8011cd8:	3301      	adds	r3, #1
 8011cda:	72fb      	strb	r3, [r7, #11]
      break;
 8011cdc:	e007      	b.n	8011cee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011cde:	6839      	ldr	r1, [r7, #0]
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f000 fa08 	bl	80120f6 <USBD_CtlError>
      err++;
 8011ce6:	7afb      	ldrb	r3, [r7, #11]
 8011ce8:	3301      	adds	r3, #1
 8011cea:	72fb      	strb	r3, [r7, #11]
      break;
 8011cec:	bf00      	nop
  }

  if (err != 0U)
 8011cee:	7afb      	ldrb	r3, [r7, #11]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d11e      	bne.n	8011d32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	88db      	ldrh	r3, [r3, #6]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d016      	beq.n	8011d2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8011cfc:	893b      	ldrh	r3, [r7, #8]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d00e      	beq.n	8011d20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	88da      	ldrh	r2, [r3, #6]
 8011d06:	893b      	ldrh	r3, [r7, #8]
 8011d08:	4293      	cmp	r3, r2
 8011d0a:	bf28      	it	cs
 8011d0c:	4613      	movcs	r3, r2
 8011d0e:	b29b      	uxth	r3, r3
 8011d10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011d12:	893b      	ldrh	r3, [r7, #8]
 8011d14:	461a      	mov	r2, r3
 8011d16:	68f9      	ldr	r1, [r7, #12]
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f000 fb6a 	bl	80123f2 <USBD_CtlSendData>
 8011d1e:	e009      	b.n	8011d34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011d20:	6839      	ldr	r1, [r7, #0]
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f000 f9e7 	bl	80120f6 <USBD_CtlError>
 8011d28:	e004      	b.n	8011d34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f000 fbbb 	bl	80124a6 <USBD_CtlSendStatus>
 8011d30:	e000      	b.n	8011d34 <USBD_GetDescriptor+0x2cc>
    return;
 8011d32:	bf00      	nop
  }
}
 8011d34:	3710      	adds	r7, #16
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}
 8011d3a:	bf00      	nop

08011d3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b084      	sub	sp, #16
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	889b      	ldrh	r3, [r3, #4]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d131      	bne.n	8011db2 <USBD_SetAddress+0x76>
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	88db      	ldrh	r3, [r3, #6]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d12d      	bne.n	8011db2 <USBD_SetAddress+0x76>
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	885b      	ldrh	r3, [r3, #2]
 8011d5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8011d5c:	d829      	bhi.n	8011db2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	885b      	ldrh	r3, [r3, #2]
 8011d62:	b2db      	uxtb	r3, r3
 8011d64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011d68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d70:	b2db      	uxtb	r3, r3
 8011d72:	2b03      	cmp	r3, #3
 8011d74:	d104      	bne.n	8011d80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011d76:	6839      	ldr	r1, [r7, #0]
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f000 f9bc 	bl	80120f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d7e:	e01d      	b.n	8011dbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	7bfa      	ldrb	r2, [r7, #15]
 8011d84:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011d88:	7bfb      	ldrb	r3, [r7, #15]
 8011d8a:	4619      	mov	r1, r3
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	f7fe ffcd 	bl	8010d2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011d92:	6878      	ldr	r0, [r7, #4]
 8011d94:	f000 fb87 	bl	80124a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011d98:	7bfb      	ldrb	r3, [r7, #15]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d004      	beq.n	8011da8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2202      	movs	r2, #2
 8011da2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011da6:	e009      	b.n	8011dbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2201      	movs	r2, #1
 8011dac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011db0:	e004      	b.n	8011dbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011db2:	6839      	ldr	r1, [r7, #0]
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f000 f99e 	bl	80120f6 <USBD_CtlError>
  }
}
 8011dba:	bf00      	nop
 8011dbc:	bf00      	nop
 8011dbe:	3710      	adds	r7, #16
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}

08011dc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b084      	sub	sp, #16
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	885b      	ldrh	r3, [r3, #2]
 8011dd6:	b2da      	uxtb	r2, r3
 8011dd8:	4b4e      	ldr	r3, [pc, #312]	@ (8011f14 <USBD_SetConfig+0x150>)
 8011dda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011ddc:	4b4d      	ldr	r3, [pc, #308]	@ (8011f14 <USBD_SetConfig+0x150>)
 8011dde:	781b      	ldrb	r3, [r3, #0]
 8011de0:	2b01      	cmp	r3, #1
 8011de2:	d905      	bls.n	8011df0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011de4:	6839      	ldr	r1, [r7, #0]
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f000 f985 	bl	80120f6 <USBD_CtlError>
    return USBD_FAIL;
 8011dec:	2303      	movs	r3, #3
 8011dee:	e08c      	b.n	8011f0a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011df6:	b2db      	uxtb	r3, r3
 8011df8:	2b02      	cmp	r3, #2
 8011dfa:	d002      	beq.n	8011e02 <USBD_SetConfig+0x3e>
 8011dfc:	2b03      	cmp	r3, #3
 8011dfe:	d029      	beq.n	8011e54 <USBD_SetConfig+0x90>
 8011e00:	e075      	b.n	8011eee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011e02:	4b44      	ldr	r3, [pc, #272]	@ (8011f14 <USBD_SetConfig+0x150>)
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d020      	beq.n	8011e4c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011e0a:	4b42      	ldr	r3, [pc, #264]	@ (8011f14 <USBD_SetConfig+0x150>)
 8011e0c:	781b      	ldrb	r3, [r3, #0]
 8011e0e:	461a      	mov	r2, r3
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011e14:	4b3f      	ldr	r3, [pc, #252]	@ (8011f14 <USBD_SetConfig+0x150>)
 8011e16:	781b      	ldrb	r3, [r3, #0]
 8011e18:	4619      	mov	r1, r3
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f7ff f8a9 	bl	8010f72 <USBD_SetClassConfig>
 8011e20:	4603      	mov	r3, r0
 8011e22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011e24:	7bfb      	ldrb	r3, [r7, #15]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d008      	beq.n	8011e3c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011e2a:	6839      	ldr	r1, [r7, #0]
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f000 f962 	bl	80120f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	2202      	movs	r2, #2
 8011e36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011e3a:	e065      	b.n	8011f08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f000 fb32 	bl	80124a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2203      	movs	r2, #3
 8011e46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011e4a:	e05d      	b.n	8011f08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011e4c:	6878      	ldr	r0, [r7, #4]
 8011e4e:	f000 fb2a 	bl	80124a6 <USBD_CtlSendStatus>
      break;
 8011e52:	e059      	b.n	8011f08 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011e54:	4b2f      	ldr	r3, [pc, #188]	@ (8011f14 <USBD_SetConfig+0x150>)
 8011e56:	781b      	ldrb	r3, [r3, #0]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d112      	bne.n	8011e82 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2202      	movs	r2, #2
 8011e60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011e64:	4b2b      	ldr	r3, [pc, #172]	@ (8011f14 <USBD_SetConfig+0x150>)
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	461a      	mov	r2, r3
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011e6e:	4b29      	ldr	r3, [pc, #164]	@ (8011f14 <USBD_SetConfig+0x150>)
 8011e70:	781b      	ldrb	r3, [r3, #0]
 8011e72:	4619      	mov	r1, r3
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f7ff f898 	bl	8010faa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f000 fb13 	bl	80124a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011e80:	e042      	b.n	8011f08 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011e82:	4b24      	ldr	r3, [pc, #144]	@ (8011f14 <USBD_SetConfig+0x150>)
 8011e84:	781b      	ldrb	r3, [r3, #0]
 8011e86:	461a      	mov	r2, r3
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	685b      	ldr	r3, [r3, #4]
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d02a      	beq.n	8011ee6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	b2db      	uxtb	r3, r3
 8011e96:	4619      	mov	r1, r3
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f7ff f886 	bl	8010faa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8011f14 <USBD_SetConfig+0x150>)
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	461a      	mov	r2, r3
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8011f14 <USBD_SetConfig+0x150>)
 8011eaa:	781b      	ldrb	r3, [r3, #0]
 8011eac:	4619      	mov	r1, r3
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f7ff f85f 	bl	8010f72 <USBD_SetClassConfig>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011eb8:	7bfb      	ldrb	r3, [r7, #15]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d00f      	beq.n	8011ede <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011ebe:	6839      	ldr	r1, [r7, #0]
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f000 f918 	bl	80120f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	685b      	ldr	r3, [r3, #4]
 8011eca:	b2db      	uxtb	r3, r3
 8011ecc:	4619      	mov	r1, r3
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f7ff f86b 	bl	8010faa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2202      	movs	r2, #2
 8011ed8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011edc:	e014      	b.n	8011f08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011ede:	6878      	ldr	r0, [r7, #4]
 8011ee0:	f000 fae1 	bl	80124a6 <USBD_CtlSendStatus>
      break;
 8011ee4:	e010      	b.n	8011f08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f000 fadd 	bl	80124a6 <USBD_CtlSendStatus>
      break;
 8011eec:	e00c      	b.n	8011f08 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011eee:	6839      	ldr	r1, [r7, #0]
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f000 f900 	bl	80120f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011ef6:	4b07      	ldr	r3, [pc, #28]	@ (8011f14 <USBD_SetConfig+0x150>)
 8011ef8:	781b      	ldrb	r3, [r3, #0]
 8011efa:	4619      	mov	r1, r3
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f7ff f854 	bl	8010faa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011f02:	2303      	movs	r3, #3
 8011f04:	73fb      	strb	r3, [r7, #15]
      break;
 8011f06:	bf00      	nop
  }

  return ret;
 8011f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	3710      	adds	r7, #16
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	20011110 	.word	0x20011110

08011f18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
 8011f20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	88db      	ldrh	r3, [r3, #6]
 8011f26:	2b01      	cmp	r3, #1
 8011f28:	d004      	beq.n	8011f34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011f2a:	6839      	ldr	r1, [r7, #0]
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f000 f8e2 	bl	80120f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011f32:	e023      	b.n	8011f7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f3a:	b2db      	uxtb	r3, r3
 8011f3c:	2b02      	cmp	r3, #2
 8011f3e:	dc02      	bgt.n	8011f46 <USBD_GetConfig+0x2e>
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	dc03      	bgt.n	8011f4c <USBD_GetConfig+0x34>
 8011f44:	e015      	b.n	8011f72 <USBD_GetConfig+0x5a>
 8011f46:	2b03      	cmp	r3, #3
 8011f48:	d00b      	beq.n	8011f62 <USBD_GetConfig+0x4a>
 8011f4a:	e012      	b.n	8011f72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2200      	movs	r2, #0
 8011f50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	3308      	adds	r3, #8
 8011f56:	2201      	movs	r2, #1
 8011f58:	4619      	mov	r1, r3
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f000 fa49 	bl	80123f2 <USBD_CtlSendData>
        break;
 8011f60:	e00c      	b.n	8011f7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	3304      	adds	r3, #4
 8011f66:	2201      	movs	r2, #1
 8011f68:	4619      	mov	r1, r3
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f000 fa41 	bl	80123f2 <USBD_CtlSendData>
        break;
 8011f70:	e004      	b.n	8011f7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011f72:	6839      	ldr	r1, [r7, #0]
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f000 f8be 	bl	80120f6 <USBD_CtlError>
        break;
 8011f7a:	bf00      	nop
}
 8011f7c:	bf00      	nop
 8011f7e:	3708      	adds	r7, #8
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}

08011f84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b082      	sub	sp, #8
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
 8011f8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	3b01      	subs	r3, #1
 8011f98:	2b02      	cmp	r3, #2
 8011f9a:	d81e      	bhi.n	8011fda <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	88db      	ldrh	r3, [r3, #6]
 8011fa0:	2b02      	cmp	r3, #2
 8011fa2:	d004      	beq.n	8011fae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011fa4:	6839      	ldr	r1, [r7, #0]
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f000 f8a5 	bl	80120f6 <USBD_CtlError>
        break;
 8011fac:	e01a      	b.n	8011fe4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2201      	movs	r2, #1
 8011fb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d005      	beq.n	8011fca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	68db      	ldr	r3, [r3, #12]
 8011fc2:	f043 0202 	orr.w	r2, r3, #2
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	330c      	adds	r3, #12
 8011fce:	2202      	movs	r2, #2
 8011fd0:	4619      	mov	r1, r3
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f000 fa0d 	bl	80123f2 <USBD_CtlSendData>
      break;
 8011fd8:	e004      	b.n	8011fe4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011fda:	6839      	ldr	r1, [r7, #0]
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f000 f88a 	bl	80120f6 <USBD_CtlError>
      break;
 8011fe2:	bf00      	nop
  }
}
 8011fe4:	bf00      	nop
 8011fe6:	3708      	adds	r7, #8
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}

08011fec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b082      	sub	sp, #8
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	885b      	ldrh	r3, [r3, #2]
 8011ffa:	2b01      	cmp	r3, #1
 8011ffc:	d107      	bne.n	801200e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2201      	movs	r2, #1
 8012002:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f000 fa4d 	bl	80124a6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801200c:	e013      	b.n	8012036 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	885b      	ldrh	r3, [r3, #2]
 8012012:	2b02      	cmp	r3, #2
 8012014:	d10b      	bne.n	801202e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	889b      	ldrh	r3, [r3, #4]
 801201a:	0a1b      	lsrs	r3, r3, #8
 801201c:	b29b      	uxth	r3, r3
 801201e:	b2da      	uxtb	r2, r3
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f000 fa3d 	bl	80124a6 <USBD_CtlSendStatus>
}
 801202c:	e003      	b.n	8012036 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801202e:	6839      	ldr	r1, [r7, #0]
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f000 f860 	bl	80120f6 <USBD_CtlError>
}
 8012036:	bf00      	nop
 8012038:	3708      	adds	r7, #8
 801203a:	46bd      	mov	sp, r7
 801203c:	bd80      	pop	{r7, pc}

0801203e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801203e:	b580      	push	{r7, lr}
 8012040:	b082      	sub	sp, #8
 8012042:	af00      	add	r7, sp, #0
 8012044:	6078      	str	r0, [r7, #4]
 8012046:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801204e:	b2db      	uxtb	r3, r3
 8012050:	3b01      	subs	r3, #1
 8012052:	2b02      	cmp	r3, #2
 8012054:	d80b      	bhi.n	801206e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	885b      	ldrh	r3, [r3, #2]
 801205a:	2b01      	cmp	r3, #1
 801205c:	d10c      	bne.n	8012078 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2200      	movs	r2, #0
 8012062:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f000 fa1d 	bl	80124a6 <USBD_CtlSendStatus>
      }
      break;
 801206c:	e004      	b.n	8012078 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801206e:	6839      	ldr	r1, [r7, #0]
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f000 f840 	bl	80120f6 <USBD_CtlError>
      break;
 8012076:	e000      	b.n	801207a <USBD_ClrFeature+0x3c>
      break;
 8012078:	bf00      	nop
  }
}
 801207a:	bf00      	nop
 801207c:	3708      	adds	r7, #8
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}

08012082 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012082:	b580      	push	{r7, lr}
 8012084:	b084      	sub	sp, #16
 8012086:	af00      	add	r7, sp, #0
 8012088:	6078      	str	r0, [r7, #4]
 801208a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801208c:	683b      	ldr	r3, [r7, #0]
 801208e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	781a      	ldrb	r2, [r3, #0]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	3301      	adds	r3, #1
 801209c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	781a      	ldrb	r2, [r3, #0]
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	3301      	adds	r3, #1
 80120aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80120ac:	68f8      	ldr	r0, [r7, #12]
 80120ae:	f7ff fa40 	bl	8011532 <SWAPBYTE>
 80120b2:	4603      	mov	r3, r0
 80120b4:	461a      	mov	r2, r3
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	3301      	adds	r3, #1
 80120be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	3301      	adds	r3, #1
 80120c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80120c6:	68f8      	ldr	r0, [r7, #12]
 80120c8:	f7ff fa33 	bl	8011532 <SWAPBYTE>
 80120cc:	4603      	mov	r3, r0
 80120ce:	461a      	mov	r2, r3
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	3301      	adds	r3, #1
 80120d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	3301      	adds	r3, #1
 80120de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80120e0:	68f8      	ldr	r0, [r7, #12]
 80120e2:	f7ff fa26 	bl	8011532 <SWAPBYTE>
 80120e6:	4603      	mov	r3, r0
 80120e8:	461a      	mov	r2, r3
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	80da      	strh	r2, [r3, #6]
}
 80120ee:	bf00      	nop
 80120f0:	3710      	adds	r7, #16
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}

080120f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120f6:	b580      	push	{r7, lr}
 80120f8:	b082      	sub	sp, #8
 80120fa:	af00      	add	r7, sp, #0
 80120fc:	6078      	str	r0, [r7, #4]
 80120fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012100:	2180      	movs	r1, #128	@ 0x80
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f7fe fdb4 	bl	8010c70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012108:	2100      	movs	r1, #0
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f7fe fdb0 	bl	8010c70 <USBD_LL_StallEP>
}
 8012110:	bf00      	nop
 8012112:	3708      	adds	r7, #8
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}

08012118 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b086      	sub	sp, #24
 801211c:	af00      	add	r7, sp, #0
 801211e:	60f8      	str	r0, [r7, #12]
 8012120:	60b9      	str	r1, [r7, #8]
 8012122:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012124:	2300      	movs	r3, #0
 8012126:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d036      	beq.n	801219c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012132:	6938      	ldr	r0, [r7, #16]
 8012134:	f000 f836 	bl	80121a4 <USBD_GetLen>
 8012138:	4603      	mov	r3, r0
 801213a:	3301      	adds	r3, #1
 801213c:	b29b      	uxth	r3, r3
 801213e:	005b      	lsls	r3, r3, #1
 8012140:	b29a      	uxth	r2, r3
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012146:	7dfb      	ldrb	r3, [r7, #23]
 8012148:	68ba      	ldr	r2, [r7, #8]
 801214a:	4413      	add	r3, r2
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	7812      	ldrb	r2, [r2, #0]
 8012150:	701a      	strb	r2, [r3, #0]
  idx++;
 8012152:	7dfb      	ldrb	r3, [r7, #23]
 8012154:	3301      	adds	r3, #1
 8012156:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012158:	7dfb      	ldrb	r3, [r7, #23]
 801215a:	68ba      	ldr	r2, [r7, #8]
 801215c:	4413      	add	r3, r2
 801215e:	2203      	movs	r2, #3
 8012160:	701a      	strb	r2, [r3, #0]
  idx++;
 8012162:	7dfb      	ldrb	r3, [r7, #23]
 8012164:	3301      	adds	r3, #1
 8012166:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012168:	e013      	b.n	8012192 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801216a:	7dfb      	ldrb	r3, [r7, #23]
 801216c:	68ba      	ldr	r2, [r7, #8]
 801216e:	4413      	add	r3, r2
 8012170:	693a      	ldr	r2, [r7, #16]
 8012172:	7812      	ldrb	r2, [r2, #0]
 8012174:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	3301      	adds	r3, #1
 801217a:	613b      	str	r3, [r7, #16]
    idx++;
 801217c:	7dfb      	ldrb	r3, [r7, #23]
 801217e:	3301      	adds	r3, #1
 8012180:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012182:	7dfb      	ldrb	r3, [r7, #23]
 8012184:	68ba      	ldr	r2, [r7, #8]
 8012186:	4413      	add	r3, r2
 8012188:	2200      	movs	r2, #0
 801218a:	701a      	strb	r2, [r3, #0]
    idx++;
 801218c:	7dfb      	ldrb	r3, [r7, #23]
 801218e:	3301      	adds	r3, #1
 8012190:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012192:	693b      	ldr	r3, [r7, #16]
 8012194:	781b      	ldrb	r3, [r3, #0]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d1e7      	bne.n	801216a <USBD_GetString+0x52>
 801219a:	e000      	b.n	801219e <USBD_GetString+0x86>
    return;
 801219c:	bf00      	nop
  }
}
 801219e:	3718      	adds	r7, #24
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}

080121a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80121a4:	b480      	push	{r7}
 80121a6:	b085      	sub	sp, #20
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80121ac:	2300      	movs	r3, #0
 80121ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80121b4:	e005      	b.n	80121c2 <USBD_GetLen+0x1e>
  {
    len++;
 80121b6:	7bfb      	ldrb	r3, [r7, #15]
 80121b8:	3301      	adds	r3, #1
 80121ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80121bc:	68bb      	ldr	r3, [r7, #8]
 80121be:	3301      	adds	r3, #1
 80121c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80121c2:	68bb      	ldr	r3, [r7, #8]
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d1f5      	bne.n	80121b6 <USBD_GetLen+0x12>
  }

  return len;
 80121ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3714      	adds	r7, #20
 80121d0:	46bd      	mov	sp, r7
 80121d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d6:	4770      	bx	lr

080121d8 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121d8:	b480      	push	{r7}
 80121da:	b083      	sub	sp, #12
 80121dc:	af00      	add	r7, sp, #0
 80121de:	4603      	mov	r3, r0
 80121e0:	6039      	str	r1, [r7, #0]
 80121e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	2212      	movs	r2, #18
 80121e8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 80121ea:	4b03      	ldr	r3, [pc, #12]	@ (80121f8 <USBD_Class_DeviceDescriptor+0x20>)
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	370c      	adds	r7, #12
 80121f0:	46bd      	mov	sp, r7
 80121f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f6:	4770      	bx	lr
 80121f8:	200000f0 	.word	0x200000f0

080121fc <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121fc:	b480      	push	{r7}
 80121fe:	b083      	sub	sp, #12
 8012200:	af00      	add	r7, sp, #0
 8012202:	4603      	mov	r3, r0
 8012204:	6039      	str	r1, [r7, #0]
 8012206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	2204      	movs	r2, #4
 801220c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 801220e:	4b03      	ldr	r3, [pc, #12]	@ (801221c <USBD_Class_LangIDStrDescriptor+0x20>)
}
 8012210:	4618      	mov	r0, r3
 8012212:	370c      	adds	r7, #12
 8012214:	46bd      	mov	sp, r7
 8012216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221a:	4770      	bx	lr
 801221c:	20000104 	.word	0x20000104

08012220 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	4603      	mov	r3, r0
 8012228:	6039      	str	r1, [r7, #0]
 801222a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 801222c:	79fb      	ldrb	r3, [r7, #7]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d105      	bne.n	801223e <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8012232:	683a      	ldr	r2, [r7, #0]
 8012234:	4907      	ldr	r1, [pc, #28]	@ (8012254 <USBD_Class_ProductStrDescriptor+0x34>)
 8012236:	4808      	ldr	r0, [pc, #32]	@ (8012258 <USBD_Class_ProductStrDescriptor+0x38>)
 8012238:	f7ff ff6e 	bl	8012118 <USBD_GetString>
 801223c:	e004      	b.n	8012248 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 801223e:	683a      	ldr	r2, [r7, #0]
 8012240:	4904      	ldr	r1, [pc, #16]	@ (8012254 <USBD_Class_ProductStrDescriptor+0x34>)
 8012242:	4805      	ldr	r0, [pc, #20]	@ (8012258 <USBD_Class_ProductStrDescriptor+0x38>)
 8012244:	f7ff ff68 	bl	8012118 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012248:	4b02      	ldr	r3, [pc, #8]	@ (8012254 <USBD_Class_ProductStrDescriptor+0x34>)
}
 801224a:	4618      	mov	r0, r3
 801224c:	3708      	adds	r7, #8
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}
 8012252:	bf00      	nop
 8012254:	20011114 	.word	0x20011114
 8012258:	080146f0 	.word	0x080146f0

0801225c <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b082      	sub	sp, #8
 8012260:	af00      	add	r7, sp, #0
 8012262:	4603      	mov	r3, r0
 8012264:	6039      	str	r1, [r7, #0]
 8012266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012268:	683a      	ldr	r2, [r7, #0]
 801226a:	4904      	ldr	r1, [pc, #16]	@ (801227c <USBD_Class_ManufacturerStrDescriptor+0x20>)
 801226c:	4804      	ldr	r0, [pc, #16]	@ (8012280 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 801226e:	f7ff ff53 	bl	8012118 <USBD_GetString>
  return USBD_StrDesc;
 8012272:	4b02      	ldr	r3, [pc, #8]	@ (801227c <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 8012274:	4618      	mov	r0, r3
 8012276:	3708      	adds	r7, #8
 8012278:	46bd      	mov	sp, r7
 801227a:	bd80      	pop	{r7, pc}
 801227c:	20011114 	.word	0x20011114
 8012280:	08014708 	.word	0x08014708

08012284 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b082      	sub	sp, #8
 8012288:	af00      	add	r7, sp, #0
 801228a:	4603      	mov	r3, r0
 801228c:	6039      	str	r1, [r7, #0]
 801228e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	221a      	movs	r2, #26
 8012294:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 8012296:	f000 f843 	bl	8012320 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 801229a:	4b02      	ldr	r3, [pc, #8]	@ (80122a4 <USBD_Class_SerialStrDescriptor+0x20>)
}
 801229c:	4618      	mov	r0, r3
 801229e:	3708      	adds	r7, #8
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}
 80122a4:	20000108 	.word	0x20000108

080122a8 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b082      	sub	sp, #8
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	4603      	mov	r3, r0
 80122b0:	6039      	str	r1, [r7, #0]
 80122b2:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80122b4:	79fb      	ldrb	r3, [r7, #7]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d105      	bne.n	80122c6 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80122ba:	683a      	ldr	r2, [r7, #0]
 80122bc:	4907      	ldr	r1, [pc, #28]	@ (80122dc <USBD_Class_ConfigStrDescriptor+0x34>)
 80122be:	4808      	ldr	r0, [pc, #32]	@ (80122e0 <USBD_Class_ConfigStrDescriptor+0x38>)
 80122c0:	f7ff ff2a 	bl	8012118 <USBD_GetString>
 80122c4:	e004      	b.n	80122d0 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 80122c6:	683a      	ldr	r2, [r7, #0]
 80122c8:	4904      	ldr	r1, [pc, #16]	@ (80122dc <USBD_Class_ConfigStrDescriptor+0x34>)
 80122ca:	4805      	ldr	r0, [pc, #20]	@ (80122e0 <USBD_Class_ConfigStrDescriptor+0x38>)
 80122cc:	f7ff ff24 	bl	8012118 <USBD_GetString>
  }
  return USBD_StrDesc;
 80122d0:	4b02      	ldr	r3, [pc, #8]	@ (80122dc <USBD_Class_ConfigStrDescriptor+0x34>)
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	3708      	adds	r7, #8
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	20011114 	.word	0x20011114
 80122e0:	0801471c 	.word	0x0801471c

080122e4 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b082      	sub	sp, #8
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	4603      	mov	r3, r0
 80122ec:	6039      	str	r1, [r7, #0]
 80122ee:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80122f0:	79fb      	ldrb	r3, [r7, #7]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d105      	bne.n	8012302 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 80122f6:	683a      	ldr	r2, [r7, #0]
 80122f8:	4907      	ldr	r1, [pc, #28]	@ (8012318 <USBD_Class_InterfaceStrDescriptor+0x34>)
 80122fa:	4808      	ldr	r0, [pc, #32]	@ (801231c <USBD_Class_InterfaceStrDescriptor+0x38>)
 80122fc:	f7ff ff0c 	bl	8012118 <USBD_GetString>
 8012300:	e004      	b.n	801230c <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8012302:	683a      	ldr	r2, [r7, #0]
 8012304:	4904      	ldr	r1, [pc, #16]	@ (8012318 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8012306:	4805      	ldr	r0, [pc, #20]	@ (801231c <USBD_Class_InterfaceStrDescriptor+0x38>)
 8012308:	f7ff ff06 	bl	8012118 <USBD_GetString>
  }
  return USBD_StrDesc;
 801230c:	4b02      	ldr	r3, [pc, #8]	@ (8012318 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 801230e:	4618      	mov	r0, r3
 8012310:	3708      	adds	r7, #8
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	20011114 	.word	0x20011114
 801231c:	08014728 	.word	0x08014728

08012320 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b084      	sub	sp, #16
 8012324:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 8012326:	4b0f      	ldr	r3, [pc, #60]	@ (8012364 <Get_SerialNum+0x44>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 801232c:	4b0e      	ldr	r3, [pc, #56]	@ (8012368 <Get_SerialNum+0x48>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 8012332:	4b0e      	ldr	r3, [pc, #56]	@ (801236c <Get_SerialNum+0x4c>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012338:	68fa      	ldr	r2, [r7, #12]
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	4413      	add	r3, r2
 801233e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d009      	beq.n	801235a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 8012346:	2208      	movs	r2, #8
 8012348:	4909      	ldr	r1, [pc, #36]	@ (8012370 <Get_SerialNum+0x50>)
 801234a:	68f8      	ldr	r0, [r7, #12]
 801234c:	f000 f814 	bl	8012378 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 8012350:	2204      	movs	r2, #4
 8012352:	4908      	ldr	r1, [pc, #32]	@ (8012374 <Get_SerialNum+0x54>)
 8012354:	68b8      	ldr	r0, [r7, #8]
 8012356:	f000 f80f 	bl	8012378 <IntToUnicode>
  }
}
 801235a:	bf00      	nop
 801235c:	3710      	adds	r7, #16
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}
 8012362:	bf00      	nop
 8012364:	08fff800 	.word	0x08fff800
 8012368:	08fff804 	.word	0x08fff804
 801236c:	08fff808 	.word	0x08fff808
 8012370:	2000010a 	.word	0x2000010a
 8012374:	2000011a 	.word	0x2000011a

08012378 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 8012378:	b480      	push	{r7}
 801237a:	b087      	sub	sp, #28
 801237c:	af00      	add	r7, sp, #0
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	60b9      	str	r1, [r7, #8]
 8012382:	4613      	mov	r3, r2
 8012384:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 8012386:	2300      	movs	r3, #0
 8012388:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 801238a:	2300      	movs	r3, #0
 801238c:	75fb      	strb	r3, [r7, #23]
 801238e:	e025      	b.n	80123dc <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	0f1b      	lsrs	r3, r3, #28
 8012394:	2b09      	cmp	r3, #9
 8012396:	d80a      	bhi.n	80123ae <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	0f1b      	lsrs	r3, r3, #28
 801239c:	b2da      	uxtb	r2, r3
 801239e:	7dfb      	ldrb	r3, [r7, #23]
 80123a0:	005b      	lsls	r3, r3, #1
 80123a2:	68b9      	ldr	r1, [r7, #8]
 80123a4:	440b      	add	r3, r1
 80123a6:	3230      	adds	r2, #48	@ 0x30
 80123a8:	b2d2      	uxtb	r2, r2
 80123aa:	701a      	strb	r2, [r3, #0]
 80123ac:	e009      	b.n	80123c2 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	0f1b      	lsrs	r3, r3, #28
 80123b2:	b2da      	uxtb	r2, r3
 80123b4:	7dfb      	ldrb	r3, [r7, #23]
 80123b6:	005b      	lsls	r3, r3, #1
 80123b8:	68b9      	ldr	r1, [r7, #8]
 80123ba:	440b      	add	r3, r1
 80123bc:	3237      	adds	r2, #55	@ 0x37
 80123be:	b2d2      	uxtb	r2, r2
 80123c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	011b      	lsls	r3, r3, #4
 80123c6:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 80123c8:	7dfb      	ldrb	r3, [r7, #23]
 80123ca:	005b      	lsls	r3, r3, #1
 80123cc:	3301      	adds	r3, #1
 80123ce:	68ba      	ldr	r2, [r7, #8]
 80123d0:	4413      	add	r3, r2
 80123d2:	2200      	movs	r2, #0
 80123d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 80123d6:	7dfb      	ldrb	r3, [r7, #23]
 80123d8:	3301      	adds	r3, #1
 80123da:	75fb      	strb	r3, [r7, #23]
 80123dc:	7dfa      	ldrb	r2, [r7, #23]
 80123de:	79fb      	ldrb	r3, [r7, #7]
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d3d5      	bcc.n	8012390 <IntToUnicode+0x18>
  }
}
 80123e4:	bf00      	nop
 80123e6:	bf00      	nop
 80123e8:	371c      	adds	r7, #28
 80123ea:	46bd      	mov	sp, r7
 80123ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f0:	4770      	bx	lr

080123f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80123f2:	b580      	push	{r7, lr}
 80123f4:	b084      	sub	sp, #16
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	60f8      	str	r0, [r7, #12]
 80123fa:	60b9      	str	r1, [r7, #8]
 80123fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	2202      	movs	r2, #2
 8012402:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	687a      	ldr	r2, [r7, #4]
 801240a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	687a      	ldr	r2, [r7, #4]
 8012410:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	68ba      	ldr	r2, [r7, #8]
 8012416:	2100      	movs	r1, #0
 8012418:	68f8      	ldr	r0, [r7, #12]
 801241a:	f7fe fca0 	bl	8010d5e <USBD_LL_Transmit>

  return USBD_OK;
 801241e:	2300      	movs	r3, #0
}
 8012420:	4618      	mov	r0, r3
 8012422:	3710      	adds	r7, #16
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b084      	sub	sp, #16
 801242c:	af00      	add	r7, sp, #0
 801242e:	60f8      	str	r0, [r7, #12]
 8012430:	60b9      	str	r1, [r7, #8]
 8012432:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	68ba      	ldr	r2, [r7, #8]
 8012438:	2100      	movs	r1, #0
 801243a:	68f8      	ldr	r0, [r7, #12]
 801243c:	f7fe fc8f 	bl	8010d5e <USBD_LL_Transmit>

  return USBD_OK;
 8012440:	2300      	movs	r3, #0
}
 8012442:	4618      	mov	r0, r3
 8012444:	3710      	adds	r7, #16
 8012446:	46bd      	mov	sp, r7
 8012448:	bd80      	pop	{r7, pc}

0801244a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801244a:	b580      	push	{r7, lr}
 801244c:	b084      	sub	sp, #16
 801244e:	af00      	add	r7, sp, #0
 8012450:	60f8      	str	r0, [r7, #12]
 8012452:	60b9      	str	r1, [r7, #8]
 8012454:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	2203      	movs	r2, #3
 801245a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	687a      	ldr	r2, [r7, #4]
 8012462:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	687a      	ldr	r2, [r7, #4]
 801246a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	68ba      	ldr	r2, [r7, #8]
 8012472:	2100      	movs	r1, #0
 8012474:	68f8      	ldr	r0, [r7, #12]
 8012476:	f7fe fc8d 	bl	8010d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801247a:	2300      	movs	r3, #0
}
 801247c:	4618      	mov	r0, r3
 801247e:	3710      	adds	r7, #16
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b084      	sub	sp, #16
 8012488:	af00      	add	r7, sp, #0
 801248a:	60f8      	str	r0, [r7, #12]
 801248c:	60b9      	str	r1, [r7, #8]
 801248e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	68ba      	ldr	r2, [r7, #8]
 8012494:	2100      	movs	r1, #0
 8012496:	68f8      	ldr	r0, [r7, #12]
 8012498:	f7fe fc7c 	bl	8010d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801249c:	2300      	movs	r3, #0
}
 801249e:	4618      	mov	r0, r3
 80124a0:	3710      	adds	r7, #16
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}

080124a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80124a6:	b580      	push	{r7, lr}
 80124a8:	b082      	sub	sp, #8
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	2204      	movs	r2, #4
 80124b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80124b6:	2300      	movs	r3, #0
 80124b8:	2200      	movs	r2, #0
 80124ba:	2100      	movs	r1, #0
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f7fe fc4e 	bl	8010d5e <USBD_LL_Transmit>

  return USBD_OK;
 80124c2:	2300      	movs	r3, #0
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	3708      	adds	r7, #8
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}

080124cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b082      	sub	sp, #8
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2205      	movs	r2, #5
 80124d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80124dc:	2300      	movs	r3, #0
 80124de:	2200      	movs	r2, #0
 80124e0:	2100      	movs	r1, #0
 80124e2:	6878      	ldr	r0, [r7, #4]
 80124e4:	f7fe fc56 	bl	8010d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80124e8:	2300      	movs	r3, #0
}
 80124ea:	4618      	mov	r0, r3
 80124ec:	3708      	adds	r7, #8
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}
	...

080124f4 <std>:
 80124f4:	2300      	movs	r3, #0
 80124f6:	b510      	push	{r4, lr}
 80124f8:	4604      	mov	r4, r0
 80124fa:	6083      	str	r3, [r0, #8]
 80124fc:	8181      	strh	r1, [r0, #12]
 80124fe:	4619      	mov	r1, r3
 8012500:	6643      	str	r3, [r0, #100]	@ 0x64
 8012502:	81c2      	strh	r2, [r0, #14]
 8012504:	2208      	movs	r2, #8
 8012506:	6183      	str	r3, [r0, #24]
 8012508:	e9c0 3300 	strd	r3, r3, [r0]
 801250c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012510:	305c      	adds	r0, #92	@ 0x5c
 8012512:	f000 f993 	bl	801283c <memset>
 8012516:	4b0d      	ldr	r3, [pc, #52]	@ (801254c <std+0x58>)
 8012518:	6224      	str	r4, [r4, #32]
 801251a:	6263      	str	r3, [r4, #36]	@ 0x24
 801251c:	4b0c      	ldr	r3, [pc, #48]	@ (8012550 <std+0x5c>)
 801251e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012520:	4b0c      	ldr	r3, [pc, #48]	@ (8012554 <std+0x60>)
 8012522:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012524:	4b0c      	ldr	r3, [pc, #48]	@ (8012558 <std+0x64>)
 8012526:	6323      	str	r3, [r4, #48]	@ 0x30
 8012528:	4b0c      	ldr	r3, [pc, #48]	@ (801255c <std+0x68>)
 801252a:	429c      	cmp	r4, r3
 801252c:	d006      	beq.n	801253c <std+0x48>
 801252e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012532:	4294      	cmp	r4, r2
 8012534:	d002      	beq.n	801253c <std+0x48>
 8012536:	33d0      	adds	r3, #208	@ 0xd0
 8012538:	429c      	cmp	r4, r3
 801253a:	d105      	bne.n	8012548 <std+0x54>
 801253c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012544:	f000 b9f2 	b.w	801292c <__retarget_lock_init_recursive>
 8012548:	bd10      	pop	{r4, pc}
 801254a:	bf00      	nop
 801254c:	08012745 	.word	0x08012745
 8012550:	08012767 	.word	0x08012767
 8012554:	0801279f 	.word	0x0801279f
 8012558:	080127c3 	.word	0x080127c3
 801255c:	20011214 	.word	0x20011214

08012560 <stdio_exit_handler>:
 8012560:	4a02      	ldr	r2, [pc, #8]	@ (801256c <stdio_exit_handler+0xc>)
 8012562:	4903      	ldr	r1, [pc, #12]	@ (8012570 <stdio_exit_handler+0x10>)
 8012564:	4803      	ldr	r0, [pc, #12]	@ (8012574 <stdio_exit_handler+0x14>)
 8012566:	f000 b869 	b.w	801263c <_fwalk_sglue>
 801256a:	bf00      	nop
 801256c:	20000124 	.word	0x20000124
 8012570:	0801349d 	.word	0x0801349d
 8012574:	20000134 	.word	0x20000134

08012578 <cleanup_stdio>:
 8012578:	6841      	ldr	r1, [r0, #4]
 801257a:	4b0c      	ldr	r3, [pc, #48]	@ (80125ac <cleanup_stdio+0x34>)
 801257c:	4299      	cmp	r1, r3
 801257e:	b510      	push	{r4, lr}
 8012580:	4604      	mov	r4, r0
 8012582:	d001      	beq.n	8012588 <cleanup_stdio+0x10>
 8012584:	f000 ff8a 	bl	801349c <_fflush_r>
 8012588:	68a1      	ldr	r1, [r4, #8]
 801258a:	4b09      	ldr	r3, [pc, #36]	@ (80125b0 <cleanup_stdio+0x38>)
 801258c:	4299      	cmp	r1, r3
 801258e:	d002      	beq.n	8012596 <cleanup_stdio+0x1e>
 8012590:	4620      	mov	r0, r4
 8012592:	f000 ff83 	bl	801349c <_fflush_r>
 8012596:	68e1      	ldr	r1, [r4, #12]
 8012598:	4b06      	ldr	r3, [pc, #24]	@ (80125b4 <cleanup_stdio+0x3c>)
 801259a:	4299      	cmp	r1, r3
 801259c:	d004      	beq.n	80125a8 <cleanup_stdio+0x30>
 801259e:	4620      	mov	r0, r4
 80125a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125a4:	f000 bf7a 	b.w	801349c <_fflush_r>
 80125a8:	bd10      	pop	{r4, pc}
 80125aa:	bf00      	nop
 80125ac:	20011214 	.word	0x20011214
 80125b0:	2001127c 	.word	0x2001127c
 80125b4:	200112e4 	.word	0x200112e4

080125b8 <global_stdio_init.part.0>:
 80125b8:	b510      	push	{r4, lr}
 80125ba:	4b0b      	ldr	r3, [pc, #44]	@ (80125e8 <global_stdio_init.part.0+0x30>)
 80125bc:	2104      	movs	r1, #4
 80125be:	4c0b      	ldr	r4, [pc, #44]	@ (80125ec <global_stdio_init.part.0+0x34>)
 80125c0:	4a0b      	ldr	r2, [pc, #44]	@ (80125f0 <global_stdio_init.part.0+0x38>)
 80125c2:	4620      	mov	r0, r4
 80125c4:	601a      	str	r2, [r3, #0]
 80125c6:	2200      	movs	r2, #0
 80125c8:	f7ff ff94 	bl	80124f4 <std>
 80125cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80125d0:	2201      	movs	r2, #1
 80125d2:	2109      	movs	r1, #9
 80125d4:	f7ff ff8e 	bl	80124f4 <std>
 80125d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80125dc:	2202      	movs	r2, #2
 80125de:	2112      	movs	r1, #18
 80125e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125e4:	f7ff bf86 	b.w	80124f4 <std>
 80125e8:	2001134c 	.word	0x2001134c
 80125ec:	20011214 	.word	0x20011214
 80125f0:	08012561 	.word	0x08012561

080125f4 <__sfp_lock_acquire>:
 80125f4:	4801      	ldr	r0, [pc, #4]	@ (80125fc <__sfp_lock_acquire+0x8>)
 80125f6:	f000 b99a 	b.w	801292e <__retarget_lock_acquire_recursive>
 80125fa:	bf00      	nop
 80125fc:	20011355 	.word	0x20011355

08012600 <__sfp_lock_release>:
 8012600:	4801      	ldr	r0, [pc, #4]	@ (8012608 <__sfp_lock_release+0x8>)
 8012602:	f000 b995 	b.w	8012930 <__retarget_lock_release_recursive>
 8012606:	bf00      	nop
 8012608:	20011355 	.word	0x20011355

0801260c <__sinit>:
 801260c:	b510      	push	{r4, lr}
 801260e:	4604      	mov	r4, r0
 8012610:	f7ff fff0 	bl	80125f4 <__sfp_lock_acquire>
 8012614:	6a23      	ldr	r3, [r4, #32]
 8012616:	b11b      	cbz	r3, 8012620 <__sinit+0x14>
 8012618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801261c:	f7ff bff0 	b.w	8012600 <__sfp_lock_release>
 8012620:	4b04      	ldr	r3, [pc, #16]	@ (8012634 <__sinit+0x28>)
 8012622:	6223      	str	r3, [r4, #32]
 8012624:	4b04      	ldr	r3, [pc, #16]	@ (8012638 <__sinit+0x2c>)
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d1f5      	bne.n	8012618 <__sinit+0xc>
 801262c:	f7ff ffc4 	bl	80125b8 <global_stdio_init.part.0>
 8012630:	e7f2      	b.n	8012618 <__sinit+0xc>
 8012632:	bf00      	nop
 8012634:	08012579 	.word	0x08012579
 8012638:	2001134c 	.word	0x2001134c

0801263c <_fwalk_sglue>:
 801263c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012640:	4607      	mov	r7, r0
 8012642:	4688      	mov	r8, r1
 8012644:	4614      	mov	r4, r2
 8012646:	2600      	movs	r6, #0
 8012648:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801264c:	f1b9 0901 	subs.w	r9, r9, #1
 8012650:	d505      	bpl.n	801265e <_fwalk_sglue+0x22>
 8012652:	6824      	ldr	r4, [r4, #0]
 8012654:	2c00      	cmp	r4, #0
 8012656:	d1f7      	bne.n	8012648 <_fwalk_sglue+0xc>
 8012658:	4630      	mov	r0, r6
 801265a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801265e:	89ab      	ldrh	r3, [r5, #12]
 8012660:	2b01      	cmp	r3, #1
 8012662:	d907      	bls.n	8012674 <_fwalk_sglue+0x38>
 8012664:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012668:	3301      	adds	r3, #1
 801266a:	d003      	beq.n	8012674 <_fwalk_sglue+0x38>
 801266c:	4629      	mov	r1, r5
 801266e:	4638      	mov	r0, r7
 8012670:	47c0      	blx	r8
 8012672:	4306      	orrs	r6, r0
 8012674:	3568      	adds	r5, #104	@ 0x68
 8012676:	e7e9      	b.n	801264c <_fwalk_sglue+0x10>

08012678 <iprintf>:
 8012678:	b40f      	push	{r0, r1, r2, r3}
 801267a:	b507      	push	{r0, r1, r2, lr}
 801267c:	4906      	ldr	r1, [pc, #24]	@ (8012698 <iprintf+0x20>)
 801267e:	ab04      	add	r3, sp, #16
 8012680:	6808      	ldr	r0, [r1, #0]
 8012682:	f853 2b04 	ldr.w	r2, [r3], #4
 8012686:	6881      	ldr	r1, [r0, #8]
 8012688:	9301      	str	r3, [sp, #4]
 801268a:	f000 fbd9 	bl	8012e40 <_vfiprintf_r>
 801268e:	b003      	add	sp, #12
 8012690:	f85d eb04 	ldr.w	lr, [sp], #4
 8012694:	b004      	add	sp, #16
 8012696:	4770      	bx	lr
 8012698:	20000130 	.word	0x20000130

0801269c <sniprintf>:
 801269c:	b40c      	push	{r2, r3}
 801269e:	4b18      	ldr	r3, [pc, #96]	@ (8012700 <sniprintf+0x64>)
 80126a0:	b530      	push	{r4, r5, lr}
 80126a2:	1e0c      	subs	r4, r1, #0
 80126a4:	b09d      	sub	sp, #116	@ 0x74
 80126a6:	681d      	ldr	r5, [r3, #0]
 80126a8:	da08      	bge.n	80126bc <sniprintf+0x20>
 80126aa:	238b      	movs	r3, #139	@ 0x8b
 80126ac:	f04f 30ff 	mov.w	r0, #4294967295
 80126b0:	602b      	str	r3, [r5, #0]
 80126b2:	b01d      	add	sp, #116	@ 0x74
 80126b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126b8:	b002      	add	sp, #8
 80126ba:	4770      	bx	lr
 80126bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80126c0:	9002      	str	r0, [sp, #8]
 80126c2:	9006      	str	r0, [sp, #24]
 80126c4:	a902      	add	r1, sp, #8
 80126c6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80126ca:	bf14      	ite	ne
 80126cc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80126d0:	4623      	moveq	r3, r4
 80126d2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80126d4:	4628      	mov	r0, r5
 80126d6:	9304      	str	r3, [sp, #16]
 80126d8:	9307      	str	r3, [sp, #28]
 80126da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80126de:	f8ad 3016 	strh.w	r3, [sp, #22]
 80126e2:	ab21      	add	r3, sp, #132	@ 0x84
 80126e4:	9301      	str	r3, [sp, #4]
 80126e6:	f000 fa85 	bl	8012bf4 <_svfiprintf_r>
 80126ea:	1c43      	adds	r3, r0, #1
 80126ec:	bfbc      	itt	lt
 80126ee:	238b      	movlt	r3, #139	@ 0x8b
 80126f0:	602b      	strlt	r3, [r5, #0]
 80126f2:	2c00      	cmp	r4, #0
 80126f4:	d0dd      	beq.n	80126b2 <sniprintf+0x16>
 80126f6:	9b02      	ldr	r3, [sp, #8]
 80126f8:	2200      	movs	r2, #0
 80126fa:	701a      	strb	r2, [r3, #0]
 80126fc:	e7d9      	b.n	80126b2 <sniprintf+0x16>
 80126fe:	bf00      	nop
 8012700:	20000130 	.word	0x20000130

08012704 <siprintf>:
 8012704:	b40e      	push	{r1, r2, r3}
 8012706:	b500      	push	{lr}
 8012708:	b09c      	sub	sp, #112	@ 0x70
 801270a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801270e:	ab1d      	add	r3, sp, #116	@ 0x74
 8012710:	9002      	str	r0, [sp, #8]
 8012712:	9006      	str	r0, [sp, #24]
 8012714:	9107      	str	r1, [sp, #28]
 8012716:	9104      	str	r1, [sp, #16]
 8012718:	4808      	ldr	r0, [pc, #32]	@ (801273c <siprintf+0x38>)
 801271a:	4909      	ldr	r1, [pc, #36]	@ (8012740 <siprintf+0x3c>)
 801271c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012720:	9105      	str	r1, [sp, #20]
 8012722:	a902      	add	r1, sp, #8
 8012724:	6800      	ldr	r0, [r0, #0]
 8012726:	9301      	str	r3, [sp, #4]
 8012728:	f000 fa64 	bl	8012bf4 <_svfiprintf_r>
 801272c:	9b02      	ldr	r3, [sp, #8]
 801272e:	2200      	movs	r2, #0
 8012730:	701a      	strb	r2, [r3, #0]
 8012732:	b01c      	add	sp, #112	@ 0x70
 8012734:	f85d eb04 	ldr.w	lr, [sp], #4
 8012738:	b003      	add	sp, #12
 801273a:	4770      	bx	lr
 801273c:	20000130 	.word	0x20000130
 8012740:	ffff0208 	.word	0xffff0208

08012744 <__sread>:
 8012744:	b510      	push	{r4, lr}
 8012746:	460c      	mov	r4, r1
 8012748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801274c:	f000 f8a0 	bl	8012890 <_read_r>
 8012750:	2800      	cmp	r0, #0
 8012752:	bfab      	itete	ge
 8012754:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012756:	89a3      	ldrhlt	r3, [r4, #12]
 8012758:	181b      	addge	r3, r3, r0
 801275a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801275e:	bfac      	ite	ge
 8012760:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012762:	81a3      	strhlt	r3, [r4, #12]
 8012764:	bd10      	pop	{r4, pc}

08012766 <__swrite>:
 8012766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801276a:	461f      	mov	r7, r3
 801276c:	898b      	ldrh	r3, [r1, #12]
 801276e:	4605      	mov	r5, r0
 8012770:	460c      	mov	r4, r1
 8012772:	05db      	lsls	r3, r3, #23
 8012774:	4616      	mov	r6, r2
 8012776:	d505      	bpl.n	8012784 <__swrite+0x1e>
 8012778:	2302      	movs	r3, #2
 801277a:	2200      	movs	r2, #0
 801277c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012780:	f000 f874 	bl	801286c <_lseek_r>
 8012784:	89a3      	ldrh	r3, [r4, #12]
 8012786:	4632      	mov	r2, r6
 8012788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801278c:	4628      	mov	r0, r5
 801278e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012792:	81a3      	strh	r3, [r4, #12]
 8012794:	463b      	mov	r3, r7
 8012796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801279a:	f000 b88b 	b.w	80128b4 <_write_r>

0801279e <__sseek>:
 801279e:	b510      	push	{r4, lr}
 80127a0:	460c      	mov	r4, r1
 80127a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127a6:	f000 f861 	bl	801286c <_lseek_r>
 80127aa:	1c43      	adds	r3, r0, #1
 80127ac:	89a3      	ldrh	r3, [r4, #12]
 80127ae:	bf15      	itete	ne
 80127b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80127b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80127b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80127ba:	81a3      	strheq	r3, [r4, #12]
 80127bc:	bf18      	it	ne
 80127be:	81a3      	strhne	r3, [r4, #12]
 80127c0:	bd10      	pop	{r4, pc}

080127c2 <__sclose>:
 80127c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127c6:	f000 b841 	b.w	801284c <_close_r>

080127ca <_vsniprintf_r>:
 80127ca:	b530      	push	{r4, r5, lr}
 80127cc:	4614      	mov	r4, r2
 80127ce:	b09b      	sub	sp, #108	@ 0x6c
 80127d0:	4605      	mov	r5, r0
 80127d2:	461a      	mov	r2, r3
 80127d4:	2c00      	cmp	r4, #0
 80127d6:	da05      	bge.n	80127e4 <_vsniprintf_r+0x1a>
 80127d8:	238b      	movs	r3, #139	@ 0x8b
 80127da:	6003      	str	r3, [r0, #0]
 80127dc:	f04f 30ff 	mov.w	r0, #4294967295
 80127e0:	b01b      	add	sp, #108	@ 0x6c
 80127e2:	bd30      	pop	{r4, r5, pc}
 80127e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80127e8:	9100      	str	r1, [sp, #0]
 80127ea:	9104      	str	r1, [sp, #16]
 80127ec:	4669      	mov	r1, sp
 80127ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 80127f2:	bf14      	ite	ne
 80127f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80127f8:	4623      	moveq	r3, r4
 80127fa:	9302      	str	r3, [sp, #8]
 80127fc:	9305      	str	r3, [sp, #20]
 80127fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012802:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012806:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012808:	f000 f9f4 	bl	8012bf4 <_svfiprintf_r>
 801280c:	1c43      	adds	r3, r0, #1
 801280e:	bfbc      	itt	lt
 8012810:	238b      	movlt	r3, #139	@ 0x8b
 8012812:	602b      	strlt	r3, [r5, #0]
 8012814:	2c00      	cmp	r4, #0
 8012816:	d0e3      	beq.n	80127e0 <_vsniprintf_r+0x16>
 8012818:	9b00      	ldr	r3, [sp, #0]
 801281a:	2200      	movs	r2, #0
 801281c:	701a      	strb	r2, [r3, #0]
 801281e:	e7df      	b.n	80127e0 <_vsniprintf_r+0x16>

08012820 <vsniprintf>:
 8012820:	b507      	push	{r0, r1, r2, lr}
 8012822:	9300      	str	r3, [sp, #0]
 8012824:	4613      	mov	r3, r2
 8012826:	460a      	mov	r2, r1
 8012828:	4601      	mov	r1, r0
 801282a:	4803      	ldr	r0, [pc, #12]	@ (8012838 <vsniprintf+0x18>)
 801282c:	6800      	ldr	r0, [r0, #0]
 801282e:	f7ff ffcc 	bl	80127ca <_vsniprintf_r>
 8012832:	b003      	add	sp, #12
 8012834:	f85d fb04 	ldr.w	pc, [sp], #4
 8012838:	20000130 	.word	0x20000130

0801283c <memset>:
 801283c:	4402      	add	r2, r0
 801283e:	4603      	mov	r3, r0
 8012840:	4293      	cmp	r3, r2
 8012842:	d100      	bne.n	8012846 <memset+0xa>
 8012844:	4770      	bx	lr
 8012846:	f803 1b01 	strb.w	r1, [r3], #1
 801284a:	e7f9      	b.n	8012840 <memset+0x4>

0801284c <_close_r>:
 801284c:	b538      	push	{r3, r4, r5, lr}
 801284e:	2300      	movs	r3, #0
 8012850:	4d05      	ldr	r5, [pc, #20]	@ (8012868 <_close_r+0x1c>)
 8012852:	4604      	mov	r4, r0
 8012854:	4608      	mov	r0, r1
 8012856:	602b      	str	r3, [r5, #0]
 8012858:	f7f0 f8b5 	bl	80029c6 <_close>
 801285c:	1c43      	adds	r3, r0, #1
 801285e:	d102      	bne.n	8012866 <_close_r+0x1a>
 8012860:	682b      	ldr	r3, [r5, #0]
 8012862:	b103      	cbz	r3, 8012866 <_close_r+0x1a>
 8012864:	6023      	str	r3, [r4, #0]
 8012866:	bd38      	pop	{r3, r4, r5, pc}
 8012868:	20011350 	.word	0x20011350

0801286c <_lseek_r>:
 801286c:	b538      	push	{r3, r4, r5, lr}
 801286e:	4604      	mov	r4, r0
 8012870:	4d06      	ldr	r5, [pc, #24]	@ (801288c <_lseek_r+0x20>)
 8012872:	4608      	mov	r0, r1
 8012874:	4611      	mov	r1, r2
 8012876:	2200      	movs	r2, #0
 8012878:	602a      	str	r2, [r5, #0]
 801287a:	461a      	mov	r2, r3
 801287c:	f7f0 f8ca 	bl	8002a14 <_lseek>
 8012880:	1c43      	adds	r3, r0, #1
 8012882:	d102      	bne.n	801288a <_lseek_r+0x1e>
 8012884:	682b      	ldr	r3, [r5, #0]
 8012886:	b103      	cbz	r3, 801288a <_lseek_r+0x1e>
 8012888:	6023      	str	r3, [r4, #0]
 801288a:	bd38      	pop	{r3, r4, r5, pc}
 801288c:	20011350 	.word	0x20011350

08012890 <_read_r>:
 8012890:	b538      	push	{r3, r4, r5, lr}
 8012892:	4604      	mov	r4, r0
 8012894:	4d06      	ldr	r5, [pc, #24]	@ (80128b0 <_read_r+0x20>)
 8012896:	4608      	mov	r0, r1
 8012898:	4611      	mov	r1, r2
 801289a:	2200      	movs	r2, #0
 801289c:	602a      	str	r2, [r5, #0]
 801289e:	461a      	mov	r2, r3
 80128a0:	f7f0 f858 	bl	8002954 <_read>
 80128a4:	1c43      	adds	r3, r0, #1
 80128a6:	d102      	bne.n	80128ae <_read_r+0x1e>
 80128a8:	682b      	ldr	r3, [r5, #0]
 80128aa:	b103      	cbz	r3, 80128ae <_read_r+0x1e>
 80128ac:	6023      	str	r3, [r4, #0]
 80128ae:	bd38      	pop	{r3, r4, r5, pc}
 80128b0:	20011350 	.word	0x20011350

080128b4 <_write_r>:
 80128b4:	b538      	push	{r3, r4, r5, lr}
 80128b6:	4604      	mov	r4, r0
 80128b8:	4d06      	ldr	r5, [pc, #24]	@ (80128d4 <_write_r+0x20>)
 80128ba:	4608      	mov	r0, r1
 80128bc:	4611      	mov	r1, r2
 80128be:	2200      	movs	r2, #0
 80128c0:	602a      	str	r2, [r5, #0]
 80128c2:	461a      	mov	r2, r3
 80128c4:	f7f0 f863 	bl	800298e <_write>
 80128c8:	1c43      	adds	r3, r0, #1
 80128ca:	d102      	bne.n	80128d2 <_write_r+0x1e>
 80128cc:	682b      	ldr	r3, [r5, #0]
 80128ce:	b103      	cbz	r3, 80128d2 <_write_r+0x1e>
 80128d0:	6023      	str	r3, [r4, #0]
 80128d2:	bd38      	pop	{r3, r4, r5, pc}
 80128d4:	20011350 	.word	0x20011350

080128d8 <__errno>:
 80128d8:	4b01      	ldr	r3, [pc, #4]	@ (80128e0 <__errno+0x8>)
 80128da:	6818      	ldr	r0, [r3, #0]
 80128dc:	4770      	bx	lr
 80128de:	bf00      	nop
 80128e0:	20000130 	.word	0x20000130

080128e4 <__libc_init_array>:
 80128e4:	b570      	push	{r4, r5, r6, lr}
 80128e6:	4d0d      	ldr	r5, [pc, #52]	@ (801291c <__libc_init_array+0x38>)
 80128e8:	2600      	movs	r6, #0
 80128ea:	4c0d      	ldr	r4, [pc, #52]	@ (8012920 <__libc_init_array+0x3c>)
 80128ec:	1b64      	subs	r4, r4, r5
 80128ee:	10a4      	asrs	r4, r4, #2
 80128f0:	42a6      	cmp	r6, r4
 80128f2:	d109      	bne.n	8012908 <__libc_init_array+0x24>
 80128f4:	4d0b      	ldr	r5, [pc, #44]	@ (8012924 <__libc_init_array+0x40>)
 80128f6:	2600      	movs	r6, #0
 80128f8:	4c0b      	ldr	r4, [pc, #44]	@ (8012928 <__libc_init_array+0x44>)
 80128fa:	f000 ff7d 	bl	80137f8 <_init>
 80128fe:	1b64      	subs	r4, r4, r5
 8012900:	10a4      	asrs	r4, r4, #2
 8012902:	42a6      	cmp	r6, r4
 8012904:	d105      	bne.n	8012912 <__libc_init_array+0x2e>
 8012906:	bd70      	pop	{r4, r5, r6, pc}
 8012908:	f855 3b04 	ldr.w	r3, [r5], #4
 801290c:	3601      	adds	r6, #1
 801290e:	4798      	blx	r3
 8012910:	e7ee      	b.n	80128f0 <__libc_init_array+0xc>
 8012912:	f855 3b04 	ldr.w	r3, [r5], #4
 8012916:	3601      	adds	r6, #1
 8012918:	4798      	blx	r3
 801291a:	e7f2      	b.n	8012902 <__libc_init_array+0x1e>
 801291c:	080147c0 	.word	0x080147c0
 8012920:	080147c0 	.word	0x080147c0
 8012924:	080147c0 	.word	0x080147c0
 8012928:	080147c4 	.word	0x080147c4

0801292c <__retarget_lock_init_recursive>:
 801292c:	4770      	bx	lr

0801292e <__retarget_lock_acquire_recursive>:
 801292e:	4770      	bx	lr

08012930 <__retarget_lock_release_recursive>:
 8012930:	4770      	bx	lr

08012932 <memcpy>:
 8012932:	440a      	add	r2, r1
 8012934:	1e43      	subs	r3, r0, #1
 8012936:	4291      	cmp	r1, r2
 8012938:	d100      	bne.n	801293c <memcpy+0xa>
 801293a:	4770      	bx	lr
 801293c:	b510      	push	{r4, lr}
 801293e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012942:	4291      	cmp	r1, r2
 8012944:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012948:	d1f9      	bne.n	801293e <memcpy+0xc>
 801294a:	bd10      	pop	{r4, pc}

0801294c <_free_r>:
 801294c:	b538      	push	{r3, r4, r5, lr}
 801294e:	4605      	mov	r5, r0
 8012950:	2900      	cmp	r1, #0
 8012952:	d041      	beq.n	80129d8 <_free_r+0x8c>
 8012954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012958:	1f0c      	subs	r4, r1, #4
 801295a:	2b00      	cmp	r3, #0
 801295c:	bfb8      	it	lt
 801295e:	18e4      	addlt	r4, r4, r3
 8012960:	f000 f8e0 	bl	8012b24 <__malloc_lock>
 8012964:	4a1d      	ldr	r2, [pc, #116]	@ (80129dc <_free_r+0x90>)
 8012966:	6813      	ldr	r3, [r2, #0]
 8012968:	b933      	cbnz	r3, 8012978 <_free_r+0x2c>
 801296a:	6063      	str	r3, [r4, #4]
 801296c:	6014      	str	r4, [r2, #0]
 801296e:	4628      	mov	r0, r5
 8012970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012974:	f000 b8dc 	b.w	8012b30 <__malloc_unlock>
 8012978:	42a3      	cmp	r3, r4
 801297a:	d908      	bls.n	801298e <_free_r+0x42>
 801297c:	6820      	ldr	r0, [r4, #0]
 801297e:	1821      	adds	r1, r4, r0
 8012980:	428b      	cmp	r3, r1
 8012982:	bf01      	itttt	eq
 8012984:	6819      	ldreq	r1, [r3, #0]
 8012986:	685b      	ldreq	r3, [r3, #4]
 8012988:	1809      	addeq	r1, r1, r0
 801298a:	6021      	streq	r1, [r4, #0]
 801298c:	e7ed      	b.n	801296a <_free_r+0x1e>
 801298e:	461a      	mov	r2, r3
 8012990:	685b      	ldr	r3, [r3, #4]
 8012992:	b10b      	cbz	r3, 8012998 <_free_r+0x4c>
 8012994:	42a3      	cmp	r3, r4
 8012996:	d9fa      	bls.n	801298e <_free_r+0x42>
 8012998:	6811      	ldr	r1, [r2, #0]
 801299a:	1850      	adds	r0, r2, r1
 801299c:	42a0      	cmp	r0, r4
 801299e:	d10b      	bne.n	80129b8 <_free_r+0x6c>
 80129a0:	6820      	ldr	r0, [r4, #0]
 80129a2:	4401      	add	r1, r0
 80129a4:	1850      	adds	r0, r2, r1
 80129a6:	6011      	str	r1, [r2, #0]
 80129a8:	4283      	cmp	r3, r0
 80129aa:	d1e0      	bne.n	801296e <_free_r+0x22>
 80129ac:	6818      	ldr	r0, [r3, #0]
 80129ae:	685b      	ldr	r3, [r3, #4]
 80129b0:	4408      	add	r0, r1
 80129b2:	6053      	str	r3, [r2, #4]
 80129b4:	6010      	str	r0, [r2, #0]
 80129b6:	e7da      	b.n	801296e <_free_r+0x22>
 80129b8:	d902      	bls.n	80129c0 <_free_r+0x74>
 80129ba:	230c      	movs	r3, #12
 80129bc:	602b      	str	r3, [r5, #0]
 80129be:	e7d6      	b.n	801296e <_free_r+0x22>
 80129c0:	6820      	ldr	r0, [r4, #0]
 80129c2:	1821      	adds	r1, r4, r0
 80129c4:	428b      	cmp	r3, r1
 80129c6:	bf02      	ittt	eq
 80129c8:	6819      	ldreq	r1, [r3, #0]
 80129ca:	685b      	ldreq	r3, [r3, #4]
 80129cc:	1809      	addeq	r1, r1, r0
 80129ce:	6063      	str	r3, [r4, #4]
 80129d0:	bf08      	it	eq
 80129d2:	6021      	streq	r1, [r4, #0]
 80129d4:	6054      	str	r4, [r2, #4]
 80129d6:	e7ca      	b.n	801296e <_free_r+0x22>
 80129d8:	bd38      	pop	{r3, r4, r5, pc}
 80129da:	bf00      	nop
 80129dc:	2001135c 	.word	0x2001135c

080129e0 <sbrk_aligned>:
 80129e0:	b570      	push	{r4, r5, r6, lr}
 80129e2:	4e0f      	ldr	r6, [pc, #60]	@ (8012a20 <sbrk_aligned+0x40>)
 80129e4:	460c      	mov	r4, r1
 80129e6:	4605      	mov	r5, r0
 80129e8:	6831      	ldr	r1, [r6, #0]
 80129ea:	b911      	cbnz	r1, 80129f2 <sbrk_aligned+0x12>
 80129ec:	f000 fe2c 	bl	8013648 <_sbrk_r>
 80129f0:	6030      	str	r0, [r6, #0]
 80129f2:	4621      	mov	r1, r4
 80129f4:	4628      	mov	r0, r5
 80129f6:	f000 fe27 	bl	8013648 <_sbrk_r>
 80129fa:	1c43      	adds	r3, r0, #1
 80129fc:	d103      	bne.n	8012a06 <sbrk_aligned+0x26>
 80129fe:	f04f 34ff 	mov.w	r4, #4294967295
 8012a02:	4620      	mov	r0, r4
 8012a04:	bd70      	pop	{r4, r5, r6, pc}
 8012a06:	1cc4      	adds	r4, r0, #3
 8012a08:	f024 0403 	bic.w	r4, r4, #3
 8012a0c:	42a0      	cmp	r0, r4
 8012a0e:	d0f8      	beq.n	8012a02 <sbrk_aligned+0x22>
 8012a10:	1a21      	subs	r1, r4, r0
 8012a12:	4628      	mov	r0, r5
 8012a14:	f000 fe18 	bl	8013648 <_sbrk_r>
 8012a18:	3001      	adds	r0, #1
 8012a1a:	d1f2      	bne.n	8012a02 <sbrk_aligned+0x22>
 8012a1c:	e7ef      	b.n	80129fe <sbrk_aligned+0x1e>
 8012a1e:	bf00      	nop
 8012a20:	20011358 	.word	0x20011358

08012a24 <_malloc_r>:
 8012a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a28:	1ccd      	adds	r5, r1, #3
 8012a2a:	4606      	mov	r6, r0
 8012a2c:	f025 0503 	bic.w	r5, r5, #3
 8012a30:	3508      	adds	r5, #8
 8012a32:	2d0c      	cmp	r5, #12
 8012a34:	bf38      	it	cc
 8012a36:	250c      	movcc	r5, #12
 8012a38:	2d00      	cmp	r5, #0
 8012a3a:	db01      	blt.n	8012a40 <_malloc_r+0x1c>
 8012a3c:	42a9      	cmp	r1, r5
 8012a3e:	d904      	bls.n	8012a4a <_malloc_r+0x26>
 8012a40:	230c      	movs	r3, #12
 8012a42:	6033      	str	r3, [r6, #0]
 8012a44:	2000      	movs	r0, #0
 8012a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012b20 <_malloc_r+0xfc>
 8012a4e:	f000 f869 	bl	8012b24 <__malloc_lock>
 8012a52:	f8d8 3000 	ldr.w	r3, [r8]
 8012a56:	461c      	mov	r4, r3
 8012a58:	bb44      	cbnz	r4, 8012aac <_malloc_r+0x88>
 8012a5a:	4629      	mov	r1, r5
 8012a5c:	4630      	mov	r0, r6
 8012a5e:	f7ff ffbf 	bl	80129e0 <sbrk_aligned>
 8012a62:	1c43      	adds	r3, r0, #1
 8012a64:	4604      	mov	r4, r0
 8012a66:	d158      	bne.n	8012b1a <_malloc_r+0xf6>
 8012a68:	f8d8 4000 	ldr.w	r4, [r8]
 8012a6c:	4627      	mov	r7, r4
 8012a6e:	2f00      	cmp	r7, #0
 8012a70:	d143      	bne.n	8012afa <_malloc_r+0xd6>
 8012a72:	2c00      	cmp	r4, #0
 8012a74:	d04b      	beq.n	8012b0e <_malloc_r+0xea>
 8012a76:	6823      	ldr	r3, [r4, #0]
 8012a78:	4639      	mov	r1, r7
 8012a7a:	4630      	mov	r0, r6
 8012a7c:	eb04 0903 	add.w	r9, r4, r3
 8012a80:	f000 fde2 	bl	8013648 <_sbrk_r>
 8012a84:	4581      	cmp	r9, r0
 8012a86:	d142      	bne.n	8012b0e <_malloc_r+0xea>
 8012a88:	6821      	ldr	r1, [r4, #0]
 8012a8a:	4630      	mov	r0, r6
 8012a8c:	1a6d      	subs	r5, r5, r1
 8012a8e:	4629      	mov	r1, r5
 8012a90:	f7ff ffa6 	bl	80129e0 <sbrk_aligned>
 8012a94:	3001      	adds	r0, #1
 8012a96:	d03a      	beq.n	8012b0e <_malloc_r+0xea>
 8012a98:	6823      	ldr	r3, [r4, #0]
 8012a9a:	442b      	add	r3, r5
 8012a9c:	6023      	str	r3, [r4, #0]
 8012a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8012aa2:	685a      	ldr	r2, [r3, #4]
 8012aa4:	bb62      	cbnz	r2, 8012b00 <_malloc_r+0xdc>
 8012aa6:	f8c8 7000 	str.w	r7, [r8]
 8012aaa:	e00f      	b.n	8012acc <_malloc_r+0xa8>
 8012aac:	6822      	ldr	r2, [r4, #0]
 8012aae:	1b52      	subs	r2, r2, r5
 8012ab0:	d420      	bmi.n	8012af4 <_malloc_r+0xd0>
 8012ab2:	2a0b      	cmp	r2, #11
 8012ab4:	d917      	bls.n	8012ae6 <_malloc_r+0xc2>
 8012ab6:	1961      	adds	r1, r4, r5
 8012ab8:	42a3      	cmp	r3, r4
 8012aba:	6025      	str	r5, [r4, #0]
 8012abc:	bf18      	it	ne
 8012abe:	6059      	strne	r1, [r3, #4]
 8012ac0:	6863      	ldr	r3, [r4, #4]
 8012ac2:	bf08      	it	eq
 8012ac4:	f8c8 1000 	streq.w	r1, [r8]
 8012ac8:	5162      	str	r2, [r4, r5]
 8012aca:	604b      	str	r3, [r1, #4]
 8012acc:	4630      	mov	r0, r6
 8012ace:	f000 f82f 	bl	8012b30 <__malloc_unlock>
 8012ad2:	f104 000b 	add.w	r0, r4, #11
 8012ad6:	1d23      	adds	r3, r4, #4
 8012ad8:	f020 0007 	bic.w	r0, r0, #7
 8012adc:	1ac2      	subs	r2, r0, r3
 8012ade:	bf1c      	itt	ne
 8012ae0:	1a1b      	subne	r3, r3, r0
 8012ae2:	50a3      	strne	r3, [r4, r2]
 8012ae4:	e7af      	b.n	8012a46 <_malloc_r+0x22>
 8012ae6:	6862      	ldr	r2, [r4, #4]
 8012ae8:	42a3      	cmp	r3, r4
 8012aea:	bf0c      	ite	eq
 8012aec:	f8c8 2000 	streq.w	r2, [r8]
 8012af0:	605a      	strne	r2, [r3, #4]
 8012af2:	e7eb      	b.n	8012acc <_malloc_r+0xa8>
 8012af4:	4623      	mov	r3, r4
 8012af6:	6864      	ldr	r4, [r4, #4]
 8012af8:	e7ae      	b.n	8012a58 <_malloc_r+0x34>
 8012afa:	463c      	mov	r4, r7
 8012afc:	687f      	ldr	r7, [r7, #4]
 8012afe:	e7b6      	b.n	8012a6e <_malloc_r+0x4a>
 8012b00:	461a      	mov	r2, r3
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	42a3      	cmp	r3, r4
 8012b06:	d1fb      	bne.n	8012b00 <_malloc_r+0xdc>
 8012b08:	2300      	movs	r3, #0
 8012b0a:	6053      	str	r3, [r2, #4]
 8012b0c:	e7de      	b.n	8012acc <_malloc_r+0xa8>
 8012b0e:	230c      	movs	r3, #12
 8012b10:	4630      	mov	r0, r6
 8012b12:	6033      	str	r3, [r6, #0]
 8012b14:	f000 f80c 	bl	8012b30 <__malloc_unlock>
 8012b18:	e794      	b.n	8012a44 <_malloc_r+0x20>
 8012b1a:	6005      	str	r5, [r0, #0]
 8012b1c:	e7d6      	b.n	8012acc <_malloc_r+0xa8>
 8012b1e:	bf00      	nop
 8012b20:	2001135c 	.word	0x2001135c

08012b24 <__malloc_lock>:
 8012b24:	4801      	ldr	r0, [pc, #4]	@ (8012b2c <__malloc_lock+0x8>)
 8012b26:	f7ff bf02 	b.w	801292e <__retarget_lock_acquire_recursive>
 8012b2a:	bf00      	nop
 8012b2c:	20011354 	.word	0x20011354

08012b30 <__malloc_unlock>:
 8012b30:	4801      	ldr	r0, [pc, #4]	@ (8012b38 <__malloc_unlock+0x8>)
 8012b32:	f7ff befd 	b.w	8012930 <__retarget_lock_release_recursive>
 8012b36:	bf00      	nop
 8012b38:	20011354 	.word	0x20011354

08012b3c <__ssputs_r>:
 8012b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b40:	461f      	mov	r7, r3
 8012b42:	688e      	ldr	r6, [r1, #8]
 8012b44:	4682      	mov	sl, r0
 8012b46:	460c      	mov	r4, r1
 8012b48:	42be      	cmp	r6, r7
 8012b4a:	4690      	mov	r8, r2
 8012b4c:	680b      	ldr	r3, [r1, #0]
 8012b4e:	d82d      	bhi.n	8012bac <__ssputs_r+0x70>
 8012b50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012b54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012b58:	d026      	beq.n	8012ba8 <__ssputs_r+0x6c>
 8012b5a:	6965      	ldr	r5, [r4, #20]
 8012b5c:	6909      	ldr	r1, [r1, #16]
 8012b5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b62:	eba3 0901 	sub.w	r9, r3, r1
 8012b66:	1c7b      	adds	r3, r7, #1
 8012b68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012b6c:	444b      	add	r3, r9
 8012b6e:	106d      	asrs	r5, r5, #1
 8012b70:	429d      	cmp	r5, r3
 8012b72:	bf38      	it	cc
 8012b74:	461d      	movcc	r5, r3
 8012b76:	0553      	lsls	r3, r2, #21
 8012b78:	d527      	bpl.n	8012bca <__ssputs_r+0x8e>
 8012b7a:	4629      	mov	r1, r5
 8012b7c:	f7ff ff52 	bl	8012a24 <_malloc_r>
 8012b80:	4606      	mov	r6, r0
 8012b82:	b360      	cbz	r0, 8012bde <__ssputs_r+0xa2>
 8012b84:	464a      	mov	r2, r9
 8012b86:	6921      	ldr	r1, [r4, #16]
 8012b88:	f7ff fed3 	bl	8012932 <memcpy>
 8012b8c:	89a3      	ldrh	r3, [r4, #12]
 8012b8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b96:	81a3      	strh	r3, [r4, #12]
 8012b98:	6126      	str	r6, [r4, #16]
 8012b9a:	444e      	add	r6, r9
 8012b9c:	6165      	str	r5, [r4, #20]
 8012b9e:	eba5 0509 	sub.w	r5, r5, r9
 8012ba2:	6026      	str	r6, [r4, #0]
 8012ba4:	463e      	mov	r6, r7
 8012ba6:	60a5      	str	r5, [r4, #8]
 8012ba8:	42be      	cmp	r6, r7
 8012baa:	d900      	bls.n	8012bae <__ssputs_r+0x72>
 8012bac:	463e      	mov	r6, r7
 8012bae:	4632      	mov	r2, r6
 8012bb0:	4641      	mov	r1, r8
 8012bb2:	6820      	ldr	r0, [r4, #0]
 8012bb4:	f000 fd2e 	bl	8013614 <memmove>
 8012bb8:	68a3      	ldr	r3, [r4, #8]
 8012bba:	2000      	movs	r0, #0
 8012bbc:	1b9b      	subs	r3, r3, r6
 8012bbe:	60a3      	str	r3, [r4, #8]
 8012bc0:	6823      	ldr	r3, [r4, #0]
 8012bc2:	4433      	add	r3, r6
 8012bc4:	6023      	str	r3, [r4, #0]
 8012bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bca:	462a      	mov	r2, r5
 8012bcc:	f000 fd5a 	bl	8013684 <_realloc_r>
 8012bd0:	4606      	mov	r6, r0
 8012bd2:	2800      	cmp	r0, #0
 8012bd4:	d1e0      	bne.n	8012b98 <__ssputs_r+0x5c>
 8012bd6:	6921      	ldr	r1, [r4, #16]
 8012bd8:	4650      	mov	r0, sl
 8012bda:	f7ff feb7 	bl	801294c <_free_r>
 8012bde:	230c      	movs	r3, #12
 8012be0:	f04f 30ff 	mov.w	r0, #4294967295
 8012be4:	f8ca 3000 	str.w	r3, [sl]
 8012be8:	89a3      	ldrh	r3, [r4, #12]
 8012bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012bee:	81a3      	strh	r3, [r4, #12]
 8012bf0:	e7e9      	b.n	8012bc6 <__ssputs_r+0x8a>
	...

08012bf4 <_svfiprintf_r>:
 8012bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bf8:	4698      	mov	r8, r3
 8012bfa:	898b      	ldrh	r3, [r1, #12]
 8012bfc:	b09d      	sub	sp, #116	@ 0x74
 8012bfe:	4607      	mov	r7, r0
 8012c00:	061b      	lsls	r3, r3, #24
 8012c02:	460d      	mov	r5, r1
 8012c04:	4614      	mov	r4, r2
 8012c06:	d510      	bpl.n	8012c2a <_svfiprintf_r+0x36>
 8012c08:	690b      	ldr	r3, [r1, #16]
 8012c0a:	b973      	cbnz	r3, 8012c2a <_svfiprintf_r+0x36>
 8012c0c:	2140      	movs	r1, #64	@ 0x40
 8012c0e:	f7ff ff09 	bl	8012a24 <_malloc_r>
 8012c12:	6028      	str	r0, [r5, #0]
 8012c14:	6128      	str	r0, [r5, #16]
 8012c16:	b930      	cbnz	r0, 8012c26 <_svfiprintf_r+0x32>
 8012c18:	230c      	movs	r3, #12
 8012c1a:	603b      	str	r3, [r7, #0]
 8012c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c20:	b01d      	add	sp, #116	@ 0x74
 8012c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c26:	2340      	movs	r3, #64	@ 0x40
 8012c28:	616b      	str	r3, [r5, #20]
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c30:	f04f 0901 	mov.w	r9, #1
 8012c34:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8012dd8 <_svfiprintf_r+0x1e4>
 8012c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c3a:	2320      	movs	r3, #32
 8012c3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012c40:	2330      	movs	r3, #48	@ 0x30
 8012c42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c46:	4623      	mov	r3, r4
 8012c48:	469a      	mov	sl, r3
 8012c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c4e:	b10a      	cbz	r2, 8012c54 <_svfiprintf_r+0x60>
 8012c50:	2a25      	cmp	r2, #37	@ 0x25
 8012c52:	d1f9      	bne.n	8012c48 <_svfiprintf_r+0x54>
 8012c54:	ebba 0b04 	subs.w	fp, sl, r4
 8012c58:	d00b      	beq.n	8012c72 <_svfiprintf_r+0x7e>
 8012c5a:	465b      	mov	r3, fp
 8012c5c:	4622      	mov	r2, r4
 8012c5e:	4629      	mov	r1, r5
 8012c60:	4638      	mov	r0, r7
 8012c62:	f7ff ff6b 	bl	8012b3c <__ssputs_r>
 8012c66:	3001      	adds	r0, #1
 8012c68:	f000 80a7 	beq.w	8012dba <_svfiprintf_r+0x1c6>
 8012c6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c6e:	445a      	add	r2, fp
 8012c70:	9209      	str	r2, [sp, #36]	@ 0x24
 8012c72:	f89a 3000 	ldrb.w	r3, [sl]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	f000 809f 	beq.w	8012dba <_svfiprintf_r+0x1c6>
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c82:	f10a 0a01 	add.w	sl, sl, #1
 8012c86:	9304      	str	r3, [sp, #16]
 8012c88:	9307      	str	r3, [sp, #28]
 8012c8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012c8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012c90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c94:	4654      	mov	r4, sl
 8012c96:	2205      	movs	r2, #5
 8012c98:	484f      	ldr	r0, [pc, #316]	@ (8012dd8 <_svfiprintf_r+0x1e4>)
 8012c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c9e:	f000 fce3 	bl	8013668 <memchr>
 8012ca2:	9a04      	ldr	r2, [sp, #16]
 8012ca4:	b9d8      	cbnz	r0, 8012cde <_svfiprintf_r+0xea>
 8012ca6:	06d0      	lsls	r0, r2, #27
 8012ca8:	bf44      	itt	mi
 8012caa:	2320      	movmi	r3, #32
 8012cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cb0:	0711      	lsls	r1, r2, #28
 8012cb2:	bf44      	itt	mi
 8012cb4:	232b      	movmi	r3, #43	@ 0x2b
 8012cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cba:	f89a 3000 	ldrb.w	r3, [sl]
 8012cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8012cc0:	d015      	beq.n	8012cee <_svfiprintf_r+0xfa>
 8012cc2:	9a07      	ldr	r2, [sp, #28]
 8012cc4:	4654      	mov	r4, sl
 8012cc6:	2000      	movs	r0, #0
 8012cc8:	f04f 0c0a 	mov.w	ip, #10
 8012ccc:	4621      	mov	r1, r4
 8012cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cd2:	3b30      	subs	r3, #48	@ 0x30
 8012cd4:	2b09      	cmp	r3, #9
 8012cd6:	d94b      	bls.n	8012d70 <_svfiprintf_r+0x17c>
 8012cd8:	b1b0      	cbz	r0, 8012d08 <_svfiprintf_r+0x114>
 8012cda:	9207      	str	r2, [sp, #28]
 8012cdc:	e014      	b.n	8012d08 <_svfiprintf_r+0x114>
 8012cde:	eba0 0308 	sub.w	r3, r0, r8
 8012ce2:	46a2      	mov	sl, r4
 8012ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8012ce8:	4313      	orrs	r3, r2
 8012cea:	9304      	str	r3, [sp, #16]
 8012cec:	e7d2      	b.n	8012c94 <_svfiprintf_r+0xa0>
 8012cee:	9b03      	ldr	r3, [sp, #12]
 8012cf0:	1d19      	adds	r1, r3, #4
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	9103      	str	r1, [sp, #12]
 8012cf8:	bfbb      	ittet	lt
 8012cfa:	425b      	neglt	r3, r3
 8012cfc:	f042 0202 	orrlt.w	r2, r2, #2
 8012d00:	9307      	strge	r3, [sp, #28]
 8012d02:	9307      	strlt	r3, [sp, #28]
 8012d04:	bfb8      	it	lt
 8012d06:	9204      	strlt	r2, [sp, #16]
 8012d08:	7823      	ldrb	r3, [r4, #0]
 8012d0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d0c:	d10a      	bne.n	8012d24 <_svfiprintf_r+0x130>
 8012d0e:	7863      	ldrb	r3, [r4, #1]
 8012d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d12:	d132      	bne.n	8012d7a <_svfiprintf_r+0x186>
 8012d14:	9b03      	ldr	r3, [sp, #12]
 8012d16:	3402      	adds	r4, #2
 8012d18:	1d1a      	adds	r2, r3, #4
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012d20:	9203      	str	r2, [sp, #12]
 8012d22:	9305      	str	r3, [sp, #20]
 8012d24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012de8 <_svfiprintf_r+0x1f4>
 8012d28:	2203      	movs	r2, #3
 8012d2a:	7821      	ldrb	r1, [r4, #0]
 8012d2c:	4650      	mov	r0, sl
 8012d2e:	f000 fc9b 	bl	8013668 <memchr>
 8012d32:	b138      	cbz	r0, 8012d44 <_svfiprintf_r+0x150>
 8012d34:	eba0 000a 	sub.w	r0, r0, sl
 8012d38:	2240      	movs	r2, #64	@ 0x40
 8012d3a:	9b04      	ldr	r3, [sp, #16]
 8012d3c:	3401      	adds	r4, #1
 8012d3e:	4082      	lsls	r2, r0
 8012d40:	4313      	orrs	r3, r2
 8012d42:	9304      	str	r3, [sp, #16]
 8012d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d48:	2206      	movs	r2, #6
 8012d4a:	4824      	ldr	r0, [pc, #144]	@ (8012ddc <_svfiprintf_r+0x1e8>)
 8012d4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012d50:	f000 fc8a 	bl	8013668 <memchr>
 8012d54:	2800      	cmp	r0, #0
 8012d56:	d036      	beq.n	8012dc6 <_svfiprintf_r+0x1d2>
 8012d58:	4b21      	ldr	r3, [pc, #132]	@ (8012de0 <_svfiprintf_r+0x1ec>)
 8012d5a:	bb1b      	cbnz	r3, 8012da4 <_svfiprintf_r+0x1b0>
 8012d5c:	9b03      	ldr	r3, [sp, #12]
 8012d5e:	3307      	adds	r3, #7
 8012d60:	f023 0307 	bic.w	r3, r3, #7
 8012d64:	3308      	adds	r3, #8
 8012d66:	9303      	str	r3, [sp, #12]
 8012d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d6a:	4433      	add	r3, r6
 8012d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d6e:	e76a      	b.n	8012c46 <_svfiprintf_r+0x52>
 8012d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d74:	460c      	mov	r4, r1
 8012d76:	2001      	movs	r0, #1
 8012d78:	e7a8      	b.n	8012ccc <_svfiprintf_r+0xd8>
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	3401      	adds	r4, #1
 8012d7e:	f04f 0c0a 	mov.w	ip, #10
 8012d82:	4619      	mov	r1, r3
 8012d84:	9305      	str	r3, [sp, #20]
 8012d86:	4620      	mov	r0, r4
 8012d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d8c:	3a30      	subs	r2, #48	@ 0x30
 8012d8e:	2a09      	cmp	r2, #9
 8012d90:	d903      	bls.n	8012d9a <_svfiprintf_r+0x1a6>
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d0c6      	beq.n	8012d24 <_svfiprintf_r+0x130>
 8012d96:	9105      	str	r1, [sp, #20]
 8012d98:	e7c4      	b.n	8012d24 <_svfiprintf_r+0x130>
 8012d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d9e:	4604      	mov	r4, r0
 8012da0:	2301      	movs	r3, #1
 8012da2:	e7f0      	b.n	8012d86 <_svfiprintf_r+0x192>
 8012da4:	ab03      	add	r3, sp, #12
 8012da6:	462a      	mov	r2, r5
 8012da8:	a904      	add	r1, sp, #16
 8012daa:	4638      	mov	r0, r7
 8012dac:	9300      	str	r3, [sp, #0]
 8012dae:	4b0d      	ldr	r3, [pc, #52]	@ (8012de4 <_svfiprintf_r+0x1f0>)
 8012db0:	f3af 8000 	nop.w
 8012db4:	1c42      	adds	r2, r0, #1
 8012db6:	4606      	mov	r6, r0
 8012db8:	d1d6      	bne.n	8012d68 <_svfiprintf_r+0x174>
 8012dba:	89ab      	ldrh	r3, [r5, #12]
 8012dbc:	065b      	lsls	r3, r3, #25
 8012dbe:	f53f af2d 	bmi.w	8012c1c <_svfiprintf_r+0x28>
 8012dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012dc4:	e72c      	b.n	8012c20 <_svfiprintf_r+0x2c>
 8012dc6:	ab03      	add	r3, sp, #12
 8012dc8:	462a      	mov	r2, r5
 8012dca:	a904      	add	r1, sp, #16
 8012dcc:	4638      	mov	r0, r7
 8012dce:	9300      	str	r3, [sp, #0]
 8012dd0:	4b04      	ldr	r3, [pc, #16]	@ (8012de4 <_svfiprintf_r+0x1f0>)
 8012dd2:	f000 f9bf 	bl	8013154 <_printf_i>
 8012dd6:	e7ed      	b.n	8012db4 <_svfiprintf_r+0x1c0>
 8012dd8:	08014784 	.word	0x08014784
 8012ddc:	0801478e 	.word	0x0801478e
 8012de0:	00000000 	.word	0x00000000
 8012de4:	08012b3d 	.word	0x08012b3d
 8012de8:	0801478a 	.word	0x0801478a

08012dec <__sfputc_r>:
 8012dec:	6893      	ldr	r3, [r2, #8]
 8012dee:	3b01      	subs	r3, #1
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	6093      	str	r3, [r2, #8]
 8012df4:	b410      	push	{r4}
 8012df6:	da08      	bge.n	8012e0a <__sfputc_r+0x1e>
 8012df8:	6994      	ldr	r4, [r2, #24]
 8012dfa:	42a3      	cmp	r3, r4
 8012dfc:	db01      	blt.n	8012e02 <__sfputc_r+0x16>
 8012dfe:	290a      	cmp	r1, #10
 8012e00:	d103      	bne.n	8012e0a <__sfputc_r+0x1e>
 8012e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e06:	f000 bb71 	b.w	80134ec <__swbuf_r>
 8012e0a:	6813      	ldr	r3, [r2, #0]
 8012e0c:	1c58      	adds	r0, r3, #1
 8012e0e:	6010      	str	r0, [r2, #0]
 8012e10:	4608      	mov	r0, r1
 8012e12:	7019      	strb	r1, [r3, #0]
 8012e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e18:	4770      	bx	lr

08012e1a <__sfputs_r>:
 8012e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e1c:	4606      	mov	r6, r0
 8012e1e:	460f      	mov	r7, r1
 8012e20:	4614      	mov	r4, r2
 8012e22:	18d5      	adds	r5, r2, r3
 8012e24:	42ac      	cmp	r4, r5
 8012e26:	d101      	bne.n	8012e2c <__sfputs_r+0x12>
 8012e28:	2000      	movs	r0, #0
 8012e2a:	e007      	b.n	8012e3c <__sfputs_r+0x22>
 8012e2c:	463a      	mov	r2, r7
 8012e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e32:	4630      	mov	r0, r6
 8012e34:	f7ff ffda 	bl	8012dec <__sfputc_r>
 8012e38:	1c43      	adds	r3, r0, #1
 8012e3a:	d1f3      	bne.n	8012e24 <__sfputs_r+0xa>
 8012e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012e40 <_vfiprintf_r>:
 8012e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e44:	460d      	mov	r5, r1
 8012e46:	b09d      	sub	sp, #116	@ 0x74
 8012e48:	4614      	mov	r4, r2
 8012e4a:	4698      	mov	r8, r3
 8012e4c:	4606      	mov	r6, r0
 8012e4e:	b118      	cbz	r0, 8012e58 <_vfiprintf_r+0x18>
 8012e50:	6a03      	ldr	r3, [r0, #32]
 8012e52:	b90b      	cbnz	r3, 8012e58 <_vfiprintf_r+0x18>
 8012e54:	f7ff fbda 	bl	801260c <__sinit>
 8012e58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e5a:	07d9      	lsls	r1, r3, #31
 8012e5c:	d405      	bmi.n	8012e6a <_vfiprintf_r+0x2a>
 8012e5e:	89ab      	ldrh	r3, [r5, #12]
 8012e60:	059a      	lsls	r2, r3, #22
 8012e62:	d402      	bmi.n	8012e6a <_vfiprintf_r+0x2a>
 8012e64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e66:	f7ff fd62 	bl	801292e <__retarget_lock_acquire_recursive>
 8012e6a:	89ab      	ldrh	r3, [r5, #12]
 8012e6c:	071b      	lsls	r3, r3, #28
 8012e6e:	d501      	bpl.n	8012e74 <_vfiprintf_r+0x34>
 8012e70:	692b      	ldr	r3, [r5, #16]
 8012e72:	b99b      	cbnz	r3, 8012e9c <_vfiprintf_r+0x5c>
 8012e74:	4629      	mov	r1, r5
 8012e76:	4630      	mov	r0, r6
 8012e78:	f000 fb76 	bl	8013568 <__swsetup_r>
 8012e7c:	b170      	cbz	r0, 8012e9c <_vfiprintf_r+0x5c>
 8012e7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e80:	07dc      	lsls	r4, r3, #31
 8012e82:	d504      	bpl.n	8012e8e <_vfiprintf_r+0x4e>
 8012e84:	f04f 30ff 	mov.w	r0, #4294967295
 8012e88:	b01d      	add	sp, #116	@ 0x74
 8012e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e8e:	89ab      	ldrh	r3, [r5, #12]
 8012e90:	0598      	lsls	r0, r3, #22
 8012e92:	d4f7      	bmi.n	8012e84 <_vfiprintf_r+0x44>
 8012e94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e96:	f7ff fd4b 	bl	8012930 <__retarget_lock_release_recursive>
 8012e9a:	e7f3      	b.n	8012e84 <_vfiprintf_r+0x44>
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ea2:	f04f 0901 	mov.w	r9, #1
 8012ea6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 801305c <_vfiprintf_r+0x21c>
 8012eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8012eac:	2320      	movs	r3, #32
 8012eae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012eb2:	2330      	movs	r3, #48	@ 0x30
 8012eb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012eb8:	4623      	mov	r3, r4
 8012eba:	469a      	mov	sl, r3
 8012ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ec0:	b10a      	cbz	r2, 8012ec6 <_vfiprintf_r+0x86>
 8012ec2:	2a25      	cmp	r2, #37	@ 0x25
 8012ec4:	d1f9      	bne.n	8012eba <_vfiprintf_r+0x7a>
 8012ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8012eca:	d00b      	beq.n	8012ee4 <_vfiprintf_r+0xa4>
 8012ecc:	465b      	mov	r3, fp
 8012ece:	4622      	mov	r2, r4
 8012ed0:	4629      	mov	r1, r5
 8012ed2:	4630      	mov	r0, r6
 8012ed4:	f7ff ffa1 	bl	8012e1a <__sfputs_r>
 8012ed8:	3001      	adds	r0, #1
 8012eda:	f000 80a7 	beq.w	801302c <_vfiprintf_r+0x1ec>
 8012ede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ee0:	445a      	add	r2, fp
 8012ee2:	9209      	str	r2, [sp, #36]	@ 0x24
 8012ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	f000 809f 	beq.w	801302c <_vfiprintf_r+0x1ec>
 8012eee:	2300      	movs	r3, #0
 8012ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ef4:	f10a 0a01 	add.w	sl, sl, #1
 8012ef8:	9304      	str	r3, [sp, #16]
 8012efa:	9307      	str	r3, [sp, #28]
 8012efc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012f00:	931a      	str	r3, [sp, #104]	@ 0x68
 8012f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f06:	4654      	mov	r4, sl
 8012f08:	2205      	movs	r2, #5
 8012f0a:	4854      	ldr	r0, [pc, #336]	@ (801305c <_vfiprintf_r+0x21c>)
 8012f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f10:	f000 fbaa 	bl	8013668 <memchr>
 8012f14:	9a04      	ldr	r2, [sp, #16]
 8012f16:	b9d8      	cbnz	r0, 8012f50 <_vfiprintf_r+0x110>
 8012f18:	06d1      	lsls	r1, r2, #27
 8012f1a:	bf44      	itt	mi
 8012f1c:	2320      	movmi	r3, #32
 8012f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f22:	0713      	lsls	r3, r2, #28
 8012f24:	bf44      	itt	mi
 8012f26:	232b      	movmi	r3, #43	@ 0x2b
 8012f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8012f30:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f32:	d015      	beq.n	8012f60 <_vfiprintf_r+0x120>
 8012f34:	9a07      	ldr	r2, [sp, #28]
 8012f36:	4654      	mov	r4, sl
 8012f38:	2000      	movs	r0, #0
 8012f3a:	f04f 0c0a 	mov.w	ip, #10
 8012f3e:	4621      	mov	r1, r4
 8012f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f44:	3b30      	subs	r3, #48	@ 0x30
 8012f46:	2b09      	cmp	r3, #9
 8012f48:	d94b      	bls.n	8012fe2 <_vfiprintf_r+0x1a2>
 8012f4a:	b1b0      	cbz	r0, 8012f7a <_vfiprintf_r+0x13a>
 8012f4c:	9207      	str	r2, [sp, #28]
 8012f4e:	e014      	b.n	8012f7a <_vfiprintf_r+0x13a>
 8012f50:	eba0 0308 	sub.w	r3, r0, r8
 8012f54:	46a2      	mov	sl, r4
 8012f56:	fa09 f303 	lsl.w	r3, r9, r3
 8012f5a:	4313      	orrs	r3, r2
 8012f5c:	9304      	str	r3, [sp, #16]
 8012f5e:	e7d2      	b.n	8012f06 <_vfiprintf_r+0xc6>
 8012f60:	9b03      	ldr	r3, [sp, #12]
 8012f62:	1d19      	adds	r1, r3, #4
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	9103      	str	r1, [sp, #12]
 8012f6a:	bfbb      	ittet	lt
 8012f6c:	425b      	neglt	r3, r3
 8012f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8012f72:	9307      	strge	r3, [sp, #28]
 8012f74:	9307      	strlt	r3, [sp, #28]
 8012f76:	bfb8      	it	lt
 8012f78:	9204      	strlt	r2, [sp, #16]
 8012f7a:	7823      	ldrb	r3, [r4, #0]
 8012f7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f7e:	d10a      	bne.n	8012f96 <_vfiprintf_r+0x156>
 8012f80:	7863      	ldrb	r3, [r4, #1]
 8012f82:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f84:	d132      	bne.n	8012fec <_vfiprintf_r+0x1ac>
 8012f86:	9b03      	ldr	r3, [sp, #12]
 8012f88:	3402      	adds	r4, #2
 8012f8a:	1d1a      	adds	r2, r3, #4
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012f92:	9203      	str	r2, [sp, #12]
 8012f94:	9305      	str	r3, [sp, #20]
 8012f96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801306c <_vfiprintf_r+0x22c>
 8012f9a:	2203      	movs	r2, #3
 8012f9c:	7821      	ldrb	r1, [r4, #0]
 8012f9e:	4650      	mov	r0, sl
 8012fa0:	f000 fb62 	bl	8013668 <memchr>
 8012fa4:	b138      	cbz	r0, 8012fb6 <_vfiprintf_r+0x176>
 8012fa6:	eba0 000a 	sub.w	r0, r0, sl
 8012faa:	2240      	movs	r2, #64	@ 0x40
 8012fac:	9b04      	ldr	r3, [sp, #16]
 8012fae:	3401      	adds	r4, #1
 8012fb0:	4082      	lsls	r2, r0
 8012fb2:	4313      	orrs	r3, r2
 8012fb4:	9304      	str	r3, [sp, #16]
 8012fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fba:	2206      	movs	r2, #6
 8012fbc:	4828      	ldr	r0, [pc, #160]	@ (8013060 <_vfiprintf_r+0x220>)
 8012fbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012fc2:	f000 fb51 	bl	8013668 <memchr>
 8012fc6:	2800      	cmp	r0, #0
 8012fc8:	d03f      	beq.n	801304a <_vfiprintf_r+0x20a>
 8012fca:	4b26      	ldr	r3, [pc, #152]	@ (8013064 <_vfiprintf_r+0x224>)
 8012fcc:	bb1b      	cbnz	r3, 8013016 <_vfiprintf_r+0x1d6>
 8012fce:	9b03      	ldr	r3, [sp, #12]
 8012fd0:	3307      	adds	r3, #7
 8012fd2:	f023 0307 	bic.w	r3, r3, #7
 8012fd6:	3308      	adds	r3, #8
 8012fd8:	9303      	str	r3, [sp, #12]
 8012fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fdc:	443b      	add	r3, r7
 8012fde:	9309      	str	r3, [sp, #36]	@ 0x24
 8012fe0:	e76a      	b.n	8012eb8 <_vfiprintf_r+0x78>
 8012fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8012fe6:	460c      	mov	r4, r1
 8012fe8:	2001      	movs	r0, #1
 8012fea:	e7a8      	b.n	8012f3e <_vfiprintf_r+0xfe>
 8012fec:	2300      	movs	r3, #0
 8012fee:	3401      	adds	r4, #1
 8012ff0:	f04f 0c0a 	mov.w	ip, #10
 8012ff4:	4619      	mov	r1, r3
 8012ff6:	9305      	str	r3, [sp, #20]
 8012ff8:	4620      	mov	r0, r4
 8012ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ffe:	3a30      	subs	r2, #48	@ 0x30
 8013000:	2a09      	cmp	r2, #9
 8013002:	d903      	bls.n	801300c <_vfiprintf_r+0x1cc>
 8013004:	2b00      	cmp	r3, #0
 8013006:	d0c6      	beq.n	8012f96 <_vfiprintf_r+0x156>
 8013008:	9105      	str	r1, [sp, #20]
 801300a:	e7c4      	b.n	8012f96 <_vfiprintf_r+0x156>
 801300c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013010:	4604      	mov	r4, r0
 8013012:	2301      	movs	r3, #1
 8013014:	e7f0      	b.n	8012ff8 <_vfiprintf_r+0x1b8>
 8013016:	ab03      	add	r3, sp, #12
 8013018:	462a      	mov	r2, r5
 801301a:	a904      	add	r1, sp, #16
 801301c:	4630      	mov	r0, r6
 801301e:	9300      	str	r3, [sp, #0]
 8013020:	4b11      	ldr	r3, [pc, #68]	@ (8013068 <_vfiprintf_r+0x228>)
 8013022:	f3af 8000 	nop.w
 8013026:	4607      	mov	r7, r0
 8013028:	1c78      	adds	r0, r7, #1
 801302a:	d1d6      	bne.n	8012fda <_vfiprintf_r+0x19a>
 801302c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801302e:	07d9      	lsls	r1, r3, #31
 8013030:	d405      	bmi.n	801303e <_vfiprintf_r+0x1fe>
 8013032:	89ab      	ldrh	r3, [r5, #12]
 8013034:	059a      	lsls	r2, r3, #22
 8013036:	d402      	bmi.n	801303e <_vfiprintf_r+0x1fe>
 8013038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801303a:	f7ff fc79 	bl	8012930 <__retarget_lock_release_recursive>
 801303e:	89ab      	ldrh	r3, [r5, #12]
 8013040:	065b      	lsls	r3, r3, #25
 8013042:	f53f af1f 	bmi.w	8012e84 <_vfiprintf_r+0x44>
 8013046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013048:	e71e      	b.n	8012e88 <_vfiprintf_r+0x48>
 801304a:	ab03      	add	r3, sp, #12
 801304c:	462a      	mov	r2, r5
 801304e:	a904      	add	r1, sp, #16
 8013050:	4630      	mov	r0, r6
 8013052:	9300      	str	r3, [sp, #0]
 8013054:	4b04      	ldr	r3, [pc, #16]	@ (8013068 <_vfiprintf_r+0x228>)
 8013056:	f000 f87d 	bl	8013154 <_printf_i>
 801305a:	e7e4      	b.n	8013026 <_vfiprintf_r+0x1e6>
 801305c:	08014784 	.word	0x08014784
 8013060:	0801478e 	.word	0x0801478e
 8013064:	00000000 	.word	0x00000000
 8013068:	08012e1b 	.word	0x08012e1b
 801306c:	0801478a 	.word	0x0801478a

08013070 <_printf_common>:
 8013070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013074:	4616      	mov	r6, r2
 8013076:	4698      	mov	r8, r3
 8013078:	688a      	ldr	r2, [r1, #8]
 801307a:	4607      	mov	r7, r0
 801307c:	690b      	ldr	r3, [r1, #16]
 801307e:	460c      	mov	r4, r1
 8013080:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013084:	4293      	cmp	r3, r2
 8013086:	bfb8      	it	lt
 8013088:	4613      	movlt	r3, r2
 801308a:	6033      	str	r3, [r6, #0]
 801308c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013090:	b10a      	cbz	r2, 8013096 <_printf_common+0x26>
 8013092:	3301      	adds	r3, #1
 8013094:	6033      	str	r3, [r6, #0]
 8013096:	6823      	ldr	r3, [r4, #0]
 8013098:	0699      	lsls	r1, r3, #26
 801309a:	bf42      	ittt	mi
 801309c:	6833      	ldrmi	r3, [r6, #0]
 801309e:	3302      	addmi	r3, #2
 80130a0:	6033      	strmi	r3, [r6, #0]
 80130a2:	6825      	ldr	r5, [r4, #0]
 80130a4:	f015 0506 	ands.w	r5, r5, #6
 80130a8:	d106      	bne.n	80130b8 <_printf_common+0x48>
 80130aa:	f104 0a19 	add.w	sl, r4, #25
 80130ae:	68e3      	ldr	r3, [r4, #12]
 80130b0:	6832      	ldr	r2, [r6, #0]
 80130b2:	1a9b      	subs	r3, r3, r2
 80130b4:	42ab      	cmp	r3, r5
 80130b6:	dc2b      	bgt.n	8013110 <_printf_common+0xa0>
 80130b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80130bc:	6822      	ldr	r2, [r4, #0]
 80130be:	3b00      	subs	r3, #0
 80130c0:	bf18      	it	ne
 80130c2:	2301      	movne	r3, #1
 80130c4:	0692      	lsls	r2, r2, #26
 80130c6:	d430      	bmi.n	801312a <_printf_common+0xba>
 80130c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80130cc:	4641      	mov	r1, r8
 80130ce:	4638      	mov	r0, r7
 80130d0:	47c8      	blx	r9
 80130d2:	3001      	adds	r0, #1
 80130d4:	d023      	beq.n	801311e <_printf_common+0xae>
 80130d6:	6823      	ldr	r3, [r4, #0]
 80130d8:	341a      	adds	r4, #26
 80130da:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80130de:	f003 0306 	and.w	r3, r3, #6
 80130e2:	2b04      	cmp	r3, #4
 80130e4:	bf0a      	itet	eq
 80130e6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80130ea:	2500      	movne	r5, #0
 80130ec:	6833      	ldreq	r3, [r6, #0]
 80130ee:	f04f 0600 	mov.w	r6, #0
 80130f2:	bf08      	it	eq
 80130f4:	1aed      	subeq	r5, r5, r3
 80130f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80130fa:	bf08      	it	eq
 80130fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013100:	4293      	cmp	r3, r2
 8013102:	bfc4      	itt	gt
 8013104:	1a9b      	subgt	r3, r3, r2
 8013106:	18ed      	addgt	r5, r5, r3
 8013108:	42b5      	cmp	r5, r6
 801310a:	d11a      	bne.n	8013142 <_printf_common+0xd2>
 801310c:	2000      	movs	r0, #0
 801310e:	e008      	b.n	8013122 <_printf_common+0xb2>
 8013110:	2301      	movs	r3, #1
 8013112:	4652      	mov	r2, sl
 8013114:	4641      	mov	r1, r8
 8013116:	4638      	mov	r0, r7
 8013118:	47c8      	blx	r9
 801311a:	3001      	adds	r0, #1
 801311c:	d103      	bne.n	8013126 <_printf_common+0xb6>
 801311e:	f04f 30ff 	mov.w	r0, #4294967295
 8013122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013126:	3501      	adds	r5, #1
 8013128:	e7c1      	b.n	80130ae <_printf_common+0x3e>
 801312a:	18e1      	adds	r1, r4, r3
 801312c:	1c5a      	adds	r2, r3, #1
 801312e:	2030      	movs	r0, #48	@ 0x30
 8013130:	3302      	adds	r3, #2
 8013132:	4422      	add	r2, r4
 8013134:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013138:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801313c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013140:	e7c2      	b.n	80130c8 <_printf_common+0x58>
 8013142:	2301      	movs	r3, #1
 8013144:	4622      	mov	r2, r4
 8013146:	4641      	mov	r1, r8
 8013148:	4638      	mov	r0, r7
 801314a:	47c8      	blx	r9
 801314c:	3001      	adds	r0, #1
 801314e:	d0e6      	beq.n	801311e <_printf_common+0xae>
 8013150:	3601      	adds	r6, #1
 8013152:	e7d9      	b.n	8013108 <_printf_common+0x98>

08013154 <_printf_i>:
 8013154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013158:	7e0f      	ldrb	r7, [r1, #24]
 801315a:	4691      	mov	r9, r2
 801315c:	4680      	mov	r8, r0
 801315e:	460c      	mov	r4, r1
 8013160:	2f78      	cmp	r7, #120	@ 0x78
 8013162:	469a      	mov	sl, r3
 8013164:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013166:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801316a:	d807      	bhi.n	801317c <_printf_i+0x28>
 801316c:	2f62      	cmp	r7, #98	@ 0x62
 801316e:	d80a      	bhi.n	8013186 <_printf_i+0x32>
 8013170:	2f00      	cmp	r7, #0
 8013172:	f000 80d2 	beq.w	801331a <_printf_i+0x1c6>
 8013176:	2f58      	cmp	r7, #88	@ 0x58
 8013178:	f000 80b9 	beq.w	80132ee <_printf_i+0x19a>
 801317c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013180:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013184:	e03a      	b.n	80131fc <_printf_i+0xa8>
 8013186:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801318a:	2b15      	cmp	r3, #21
 801318c:	d8f6      	bhi.n	801317c <_printf_i+0x28>
 801318e:	a101      	add	r1, pc, #4	@ (adr r1, 8013194 <_printf_i+0x40>)
 8013190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013194:	080131ed 	.word	0x080131ed
 8013198:	08013201 	.word	0x08013201
 801319c:	0801317d 	.word	0x0801317d
 80131a0:	0801317d 	.word	0x0801317d
 80131a4:	0801317d 	.word	0x0801317d
 80131a8:	0801317d 	.word	0x0801317d
 80131ac:	08013201 	.word	0x08013201
 80131b0:	0801317d 	.word	0x0801317d
 80131b4:	0801317d 	.word	0x0801317d
 80131b8:	0801317d 	.word	0x0801317d
 80131bc:	0801317d 	.word	0x0801317d
 80131c0:	08013301 	.word	0x08013301
 80131c4:	0801322b 	.word	0x0801322b
 80131c8:	080132bb 	.word	0x080132bb
 80131cc:	0801317d 	.word	0x0801317d
 80131d0:	0801317d 	.word	0x0801317d
 80131d4:	08013323 	.word	0x08013323
 80131d8:	0801317d 	.word	0x0801317d
 80131dc:	0801322b 	.word	0x0801322b
 80131e0:	0801317d 	.word	0x0801317d
 80131e4:	0801317d 	.word	0x0801317d
 80131e8:	080132c3 	.word	0x080132c3
 80131ec:	6833      	ldr	r3, [r6, #0]
 80131ee:	1d1a      	adds	r2, r3, #4
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	6032      	str	r2, [r6, #0]
 80131f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80131f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80131fc:	2301      	movs	r3, #1
 80131fe:	e09d      	b.n	801333c <_printf_i+0x1e8>
 8013200:	6833      	ldr	r3, [r6, #0]
 8013202:	6820      	ldr	r0, [r4, #0]
 8013204:	1d19      	adds	r1, r3, #4
 8013206:	6031      	str	r1, [r6, #0]
 8013208:	0606      	lsls	r6, r0, #24
 801320a:	d501      	bpl.n	8013210 <_printf_i+0xbc>
 801320c:	681d      	ldr	r5, [r3, #0]
 801320e:	e003      	b.n	8013218 <_printf_i+0xc4>
 8013210:	0645      	lsls	r5, r0, #25
 8013212:	d5fb      	bpl.n	801320c <_printf_i+0xb8>
 8013214:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013218:	2d00      	cmp	r5, #0
 801321a:	da03      	bge.n	8013224 <_printf_i+0xd0>
 801321c:	232d      	movs	r3, #45	@ 0x2d
 801321e:	426d      	negs	r5, r5
 8013220:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013224:	4859      	ldr	r0, [pc, #356]	@ (801338c <_printf_i+0x238>)
 8013226:	230a      	movs	r3, #10
 8013228:	e011      	b.n	801324e <_printf_i+0xfa>
 801322a:	6821      	ldr	r1, [r4, #0]
 801322c:	6833      	ldr	r3, [r6, #0]
 801322e:	0608      	lsls	r0, r1, #24
 8013230:	f853 5b04 	ldr.w	r5, [r3], #4
 8013234:	d402      	bmi.n	801323c <_printf_i+0xe8>
 8013236:	0649      	lsls	r1, r1, #25
 8013238:	bf48      	it	mi
 801323a:	b2ad      	uxthmi	r5, r5
 801323c:	2f6f      	cmp	r7, #111	@ 0x6f
 801323e:	6033      	str	r3, [r6, #0]
 8013240:	4852      	ldr	r0, [pc, #328]	@ (801338c <_printf_i+0x238>)
 8013242:	bf14      	ite	ne
 8013244:	230a      	movne	r3, #10
 8013246:	2308      	moveq	r3, #8
 8013248:	2100      	movs	r1, #0
 801324a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801324e:	6866      	ldr	r6, [r4, #4]
 8013250:	2e00      	cmp	r6, #0
 8013252:	60a6      	str	r6, [r4, #8]
 8013254:	bfa2      	ittt	ge
 8013256:	6821      	ldrge	r1, [r4, #0]
 8013258:	f021 0104 	bicge.w	r1, r1, #4
 801325c:	6021      	strge	r1, [r4, #0]
 801325e:	b90d      	cbnz	r5, 8013264 <_printf_i+0x110>
 8013260:	2e00      	cmp	r6, #0
 8013262:	d04b      	beq.n	80132fc <_printf_i+0x1a8>
 8013264:	4616      	mov	r6, r2
 8013266:	fbb5 f1f3 	udiv	r1, r5, r3
 801326a:	fb03 5711 	mls	r7, r3, r1, r5
 801326e:	5dc7      	ldrb	r7, [r0, r7]
 8013270:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013274:	462f      	mov	r7, r5
 8013276:	460d      	mov	r5, r1
 8013278:	42bb      	cmp	r3, r7
 801327a:	d9f4      	bls.n	8013266 <_printf_i+0x112>
 801327c:	2b08      	cmp	r3, #8
 801327e:	d10b      	bne.n	8013298 <_printf_i+0x144>
 8013280:	6823      	ldr	r3, [r4, #0]
 8013282:	07df      	lsls	r7, r3, #31
 8013284:	d508      	bpl.n	8013298 <_printf_i+0x144>
 8013286:	6923      	ldr	r3, [r4, #16]
 8013288:	6861      	ldr	r1, [r4, #4]
 801328a:	4299      	cmp	r1, r3
 801328c:	bfde      	ittt	le
 801328e:	2330      	movle	r3, #48	@ 0x30
 8013290:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013294:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013298:	1b92      	subs	r2, r2, r6
 801329a:	6122      	str	r2, [r4, #16]
 801329c:	464b      	mov	r3, r9
 801329e:	aa03      	add	r2, sp, #12
 80132a0:	4621      	mov	r1, r4
 80132a2:	4640      	mov	r0, r8
 80132a4:	f8cd a000 	str.w	sl, [sp]
 80132a8:	f7ff fee2 	bl	8013070 <_printf_common>
 80132ac:	3001      	adds	r0, #1
 80132ae:	d14a      	bne.n	8013346 <_printf_i+0x1f2>
 80132b0:	f04f 30ff 	mov.w	r0, #4294967295
 80132b4:	b004      	add	sp, #16
 80132b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132ba:	6823      	ldr	r3, [r4, #0]
 80132bc:	f043 0320 	orr.w	r3, r3, #32
 80132c0:	6023      	str	r3, [r4, #0]
 80132c2:	2778      	movs	r7, #120	@ 0x78
 80132c4:	4832      	ldr	r0, [pc, #200]	@ (8013390 <_printf_i+0x23c>)
 80132c6:	6823      	ldr	r3, [r4, #0]
 80132c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80132cc:	061f      	lsls	r7, r3, #24
 80132ce:	6831      	ldr	r1, [r6, #0]
 80132d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80132d4:	d402      	bmi.n	80132dc <_printf_i+0x188>
 80132d6:	065f      	lsls	r7, r3, #25
 80132d8:	bf48      	it	mi
 80132da:	b2ad      	uxthmi	r5, r5
 80132dc:	6031      	str	r1, [r6, #0]
 80132de:	07d9      	lsls	r1, r3, #31
 80132e0:	bf44      	itt	mi
 80132e2:	f043 0320 	orrmi.w	r3, r3, #32
 80132e6:	6023      	strmi	r3, [r4, #0]
 80132e8:	b11d      	cbz	r5, 80132f2 <_printf_i+0x19e>
 80132ea:	2310      	movs	r3, #16
 80132ec:	e7ac      	b.n	8013248 <_printf_i+0xf4>
 80132ee:	4827      	ldr	r0, [pc, #156]	@ (801338c <_printf_i+0x238>)
 80132f0:	e7e9      	b.n	80132c6 <_printf_i+0x172>
 80132f2:	6823      	ldr	r3, [r4, #0]
 80132f4:	f023 0320 	bic.w	r3, r3, #32
 80132f8:	6023      	str	r3, [r4, #0]
 80132fa:	e7f6      	b.n	80132ea <_printf_i+0x196>
 80132fc:	4616      	mov	r6, r2
 80132fe:	e7bd      	b.n	801327c <_printf_i+0x128>
 8013300:	6833      	ldr	r3, [r6, #0]
 8013302:	6825      	ldr	r5, [r4, #0]
 8013304:	1d18      	adds	r0, r3, #4
 8013306:	6961      	ldr	r1, [r4, #20]
 8013308:	6030      	str	r0, [r6, #0]
 801330a:	062e      	lsls	r6, r5, #24
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	d501      	bpl.n	8013314 <_printf_i+0x1c0>
 8013310:	6019      	str	r1, [r3, #0]
 8013312:	e002      	b.n	801331a <_printf_i+0x1c6>
 8013314:	0668      	lsls	r0, r5, #25
 8013316:	d5fb      	bpl.n	8013310 <_printf_i+0x1bc>
 8013318:	8019      	strh	r1, [r3, #0]
 801331a:	2300      	movs	r3, #0
 801331c:	4616      	mov	r6, r2
 801331e:	6123      	str	r3, [r4, #16]
 8013320:	e7bc      	b.n	801329c <_printf_i+0x148>
 8013322:	6833      	ldr	r3, [r6, #0]
 8013324:	2100      	movs	r1, #0
 8013326:	1d1a      	adds	r2, r3, #4
 8013328:	6032      	str	r2, [r6, #0]
 801332a:	681e      	ldr	r6, [r3, #0]
 801332c:	6862      	ldr	r2, [r4, #4]
 801332e:	4630      	mov	r0, r6
 8013330:	f000 f99a 	bl	8013668 <memchr>
 8013334:	b108      	cbz	r0, 801333a <_printf_i+0x1e6>
 8013336:	1b80      	subs	r0, r0, r6
 8013338:	6060      	str	r0, [r4, #4]
 801333a:	6863      	ldr	r3, [r4, #4]
 801333c:	6123      	str	r3, [r4, #16]
 801333e:	2300      	movs	r3, #0
 8013340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013344:	e7aa      	b.n	801329c <_printf_i+0x148>
 8013346:	6923      	ldr	r3, [r4, #16]
 8013348:	4632      	mov	r2, r6
 801334a:	4649      	mov	r1, r9
 801334c:	4640      	mov	r0, r8
 801334e:	47d0      	blx	sl
 8013350:	3001      	adds	r0, #1
 8013352:	d0ad      	beq.n	80132b0 <_printf_i+0x15c>
 8013354:	6823      	ldr	r3, [r4, #0]
 8013356:	079b      	lsls	r3, r3, #30
 8013358:	d413      	bmi.n	8013382 <_printf_i+0x22e>
 801335a:	68e0      	ldr	r0, [r4, #12]
 801335c:	9b03      	ldr	r3, [sp, #12]
 801335e:	4298      	cmp	r0, r3
 8013360:	bfb8      	it	lt
 8013362:	4618      	movlt	r0, r3
 8013364:	e7a6      	b.n	80132b4 <_printf_i+0x160>
 8013366:	2301      	movs	r3, #1
 8013368:	4632      	mov	r2, r6
 801336a:	4649      	mov	r1, r9
 801336c:	4640      	mov	r0, r8
 801336e:	47d0      	blx	sl
 8013370:	3001      	adds	r0, #1
 8013372:	d09d      	beq.n	80132b0 <_printf_i+0x15c>
 8013374:	3501      	adds	r5, #1
 8013376:	68e3      	ldr	r3, [r4, #12]
 8013378:	9903      	ldr	r1, [sp, #12]
 801337a:	1a5b      	subs	r3, r3, r1
 801337c:	42ab      	cmp	r3, r5
 801337e:	dcf2      	bgt.n	8013366 <_printf_i+0x212>
 8013380:	e7eb      	b.n	801335a <_printf_i+0x206>
 8013382:	2500      	movs	r5, #0
 8013384:	f104 0619 	add.w	r6, r4, #25
 8013388:	e7f5      	b.n	8013376 <_printf_i+0x222>
 801338a:	bf00      	nop
 801338c:	08014795 	.word	0x08014795
 8013390:	080147a6 	.word	0x080147a6

08013394 <__sflush_r>:
 8013394:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801339c:	0716      	lsls	r6, r2, #28
 801339e:	4605      	mov	r5, r0
 80133a0:	460c      	mov	r4, r1
 80133a2:	d454      	bmi.n	801344e <__sflush_r+0xba>
 80133a4:	684b      	ldr	r3, [r1, #4]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	dc02      	bgt.n	80133b0 <__sflush_r+0x1c>
 80133aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	dd48      	ble.n	8013442 <__sflush_r+0xae>
 80133b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80133b2:	2e00      	cmp	r6, #0
 80133b4:	d045      	beq.n	8013442 <__sflush_r+0xae>
 80133b6:	2300      	movs	r3, #0
 80133b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80133bc:	682f      	ldr	r7, [r5, #0]
 80133be:	6a21      	ldr	r1, [r4, #32]
 80133c0:	602b      	str	r3, [r5, #0]
 80133c2:	d030      	beq.n	8013426 <__sflush_r+0x92>
 80133c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80133c6:	89a3      	ldrh	r3, [r4, #12]
 80133c8:	0759      	lsls	r1, r3, #29
 80133ca:	d505      	bpl.n	80133d8 <__sflush_r+0x44>
 80133cc:	6863      	ldr	r3, [r4, #4]
 80133ce:	1ad2      	subs	r2, r2, r3
 80133d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80133d2:	b10b      	cbz	r3, 80133d8 <__sflush_r+0x44>
 80133d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80133d6:	1ad2      	subs	r2, r2, r3
 80133d8:	2300      	movs	r3, #0
 80133da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80133dc:	6a21      	ldr	r1, [r4, #32]
 80133de:	4628      	mov	r0, r5
 80133e0:	47b0      	blx	r6
 80133e2:	1c43      	adds	r3, r0, #1
 80133e4:	89a3      	ldrh	r3, [r4, #12]
 80133e6:	d106      	bne.n	80133f6 <__sflush_r+0x62>
 80133e8:	6829      	ldr	r1, [r5, #0]
 80133ea:	291d      	cmp	r1, #29
 80133ec:	d82b      	bhi.n	8013446 <__sflush_r+0xb2>
 80133ee:	4a2a      	ldr	r2, [pc, #168]	@ (8013498 <__sflush_r+0x104>)
 80133f0:	410a      	asrs	r2, r1
 80133f2:	07d6      	lsls	r6, r2, #31
 80133f4:	d427      	bmi.n	8013446 <__sflush_r+0xb2>
 80133f6:	2200      	movs	r2, #0
 80133f8:	04d9      	lsls	r1, r3, #19
 80133fa:	6062      	str	r2, [r4, #4]
 80133fc:	6922      	ldr	r2, [r4, #16]
 80133fe:	6022      	str	r2, [r4, #0]
 8013400:	d504      	bpl.n	801340c <__sflush_r+0x78>
 8013402:	1c42      	adds	r2, r0, #1
 8013404:	d101      	bne.n	801340a <__sflush_r+0x76>
 8013406:	682b      	ldr	r3, [r5, #0]
 8013408:	b903      	cbnz	r3, 801340c <__sflush_r+0x78>
 801340a:	6560      	str	r0, [r4, #84]	@ 0x54
 801340c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801340e:	602f      	str	r7, [r5, #0]
 8013410:	b1b9      	cbz	r1, 8013442 <__sflush_r+0xae>
 8013412:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013416:	4299      	cmp	r1, r3
 8013418:	d002      	beq.n	8013420 <__sflush_r+0x8c>
 801341a:	4628      	mov	r0, r5
 801341c:	f7ff fa96 	bl	801294c <_free_r>
 8013420:	2300      	movs	r3, #0
 8013422:	6363      	str	r3, [r4, #52]	@ 0x34
 8013424:	e00d      	b.n	8013442 <__sflush_r+0xae>
 8013426:	2301      	movs	r3, #1
 8013428:	4628      	mov	r0, r5
 801342a:	47b0      	blx	r6
 801342c:	4602      	mov	r2, r0
 801342e:	1c50      	adds	r0, r2, #1
 8013430:	d1c9      	bne.n	80133c6 <__sflush_r+0x32>
 8013432:	682b      	ldr	r3, [r5, #0]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d0c6      	beq.n	80133c6 <__sflush_r+0x32>
 8013438:	2b1d      	cmp	r3, #29
 801343a:	d001      	beq.n	8013440 <__sflush_r+0xac>
 801343c:	2b16      	cmp	r3, #22
 801343e:	d11d      	bne.n	801347c <__sflush_r+0xe8>
 8013440:	602f      	str	r7, [r5, #0]
 8013442:	2000      	movs	r0, #0
 8013444:	e021      	b.n	801348a <__sflush_r+0xf6>
 8013446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801344a:	b21b      	sxth	r3, r3
 801344c:	e01a      	b.n	8013484 <__sflush_r+0xf0>
 801344e:	690f      	ldr	r7, [r1, #16]
 8013450:	2f00      	cmp	r7, #0
 8013452:	d0f6      	beq.n	8013442 <__sflush_r+0xae>
 8013454:	0793      	lsls	r3, r2, #30
 8013456:	680e      	ldr	r6, [r1, #0]
 8013458:	600f      	str	r7, [r1, #0]
 801345a:	bf0c      	ite	eq
 801345c:	694b      	ldreq	r3, [r1, #20]
 801345e:	2300      	movne	r3, #0
 8013460:	eba6 0807 	sub.w	r8, r6, r7
 8013464:	608b      	str	r3, [r1, #8]
 8013466:	f1b8 0f00 	cmp.w	r8, #0
 801346a:	ddea      	ble.n	8013442 <__sflush_r+0xae>
 801346c:	4643      	mov	r3, r8
 801346e:	463a      	mov	r2, r7
 8013470:	6a21      	ldr	r1, [r4, #32]
 8013472:	4628      	mov	r0, r5
 8013474:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013476:	47b0      	blx	r6
 8013478:	2800      	cmp	r0, #0
 801347a:	dc08      	bgt.n	801348e <__sflush_r+0xfa>
 801347c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013480:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013484:	f04f 30ff 	mov.w	r0, #4294967295
 8013488:	81a3      	strh	r3, [r4, #12]
 801348a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801348e:	4407      	add	r7, r0
 8013490:	eba8 0800 	sub.w	r8, r8, r0
 8013494:	e7e7      	b.n	8013466 <__sflush_r+0xd2>
 8013496:	bf00      	nop
 8013498:	dfbffffe 	.word	0xdfbffffe

0801349c <_fflush_r>:
 801349c:	b538      	push	{r3, r4, r5, lr}
 801349e:	690b      	ldr	r3, [r1, #16]
 80134a0:	4605      	mov	r5, r0
 80134a2:	460c      	mov	r4, r1
 80134a4:	b913      	cbnz	r3, 80134ac <_fflush_r+0x10>
 80134a6:	2500      	movs	r5, #0
 80134a8:	4628      	mov	r0, r5
 80134aa:	bd38      	pop	{r3, r4, r5, pc}
 80134ac:	b118      	cbz	r0, 80134b6 <_fflush_r+0x1a>
 80134ae:	6a03      	ldr	r3, [r0, #32]
 80134b0:	b90b      	cbnz	r3, 80134b6 <_fflush_r+0x1a>
 80134b2:	f7ff f8ab 	bl	801260c <__sinit>
 80134b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d0f3      	beq.n	80134a6 <_fflush_r+0xa>
 80134be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80134c0:	07d0      	lsls	r0, r2, #31
 80134c2:	d404      	bmi.n	80134ce <_fflush_r+0x32>
 80134c4:	0599      	lsls	r1, r3, #22
 80134c6:	d402      	bmi.n	80134ce <_fflush_r+0x32>
 80134c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80134ca:	f7ff fa30 	bl	801292e <__retarget_lock_acquire_recursive>
 80134ce:	4628      	mov	r0, r5
 80134d0:	4621      	mov	r1, r4
 80134d2:	f7ff ff5f 	bl	8013394 <__sflush_r>
 80134d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80134d8:	4605      	mov	r5, r0
 80134da:	07da      	lsls	r2, r3, #31
 80134dc:	d4e4      	bmi.n	80134a8 <_fflush_r+0xc>
 80134de:	89a3      	ldrh	r3, [r4, #12]
 80134e0:	059b      	lsls	r3, r3, #22
 80134e2:	d4e1      	bmi.n	80134a8 <_fflush_r+0xc>
 80134e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80134e6:	f7ff fa23 	bl	8012930 <__retarget_lock_release_recursive>
 80134ea:	e7dd      	b.n	80134a8 <_fflush_r+0xc>

080134ec <__swbuf_r>:
 80134ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ee:	460e      	mov	r6, r1
 80134f0:	4614      	mov	r4, r2
 80134f2:	4605      	mov	r5, r0
 80134f4:	b118      	cbz	r0, 80134fe <__swbuf_r+0x12>
 80134f6:	6a03      	ldr	r3, [r0, #32]
 80134f8:	b90b      	cbnz	r3, 80134fe <__swbuf_r+0x12>
 80134fa:	f7ff f887 	bl	801260c <__sinit>
 80134fe:	69a3      	ldr	r3, [r4, #24]
 8013500:	60a3      	str	r3, [r4, #8]
 8013502:	89a3      	ldrh	r3, [r4, #12]
 8013504:	071a      	lsls	r2, r3, #28
 8013506:	d501      	bpl.n	801350c <__swbuf_r+0x20>
 8013508:	6923      	ldr	r3, [r4, #16]
 801350a:	b943      	cbnz	r3, 801351e <__swbuf_r+0x32>
 801350c:	4621      	mov	r1, r4
 801350e:	4628      	mov	r0, r5
 8013510:	f000 f82a 	bl	8013568 <__swsetup_r>
 8013514:	b118      	cbz	r0, 801351e <__swbuf_r+0x32>
 8013516:	f04f 37ff 	mov.w	r7, #4294967295
 801351a:	4638      	mov	r0, r7
 801351c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801351e:	6823      	ldr	r3, [r4, #0]
 8013520:	b2f6      	uxtb	r6, r6
 8013522:	6922      	ldr	r2, [r4, #16]
 8013524:	4637      	mov	r7, r6
 8013526:	1a98      	subs	r0, r3, r2
 8013528:	6963      	ldr	r3, [r4, #20]
 801352a:	4283      	cmp	r3, r0
 801352c:	dc05      	bgt.n	801353a <__swbuf_r+0x4e>
 801352e:	4621      	mov	r1, r4
 8013530:	4628      	mov	r0, r5
 8013532:	f7ff ffb3 	bl	801349c <_fflush_r>
 8013536:	2800      	cmp	r0, #0
 8013538:	d1ed      	bne.n	8013516 <__swbuf_r+0x2a>
 801353a:	68a3      	ldr	r3, [r4, #8]
 801353c:	3b01      	subs	r3, #1
 801353e:	60a3      	str	r3, [r4, #8]
 8013540:	6823      	ldr	r3, [r4, #0]
 8013542:	1c5a      	adds	r2, r3, #1
 8013544:	6022      	str	r2, [r4, #0]
 8013546:	701e      	strb	r6, [r3, #0]
 8013548:	1c43      	adds	r3, r0, #1
 801354a:	6962      	ldr	r2, [r4, #20]
 801354c:	429a      	cmp	r2, r3
 801354e:	d004      	beq.n	801355a <__swbuf_r+0x6e>
 8013550:	89a3      	ldrh	r3, [r4, #12]
 8013552:	07db      	lsls	r3, r3, #31
 8013554:	d5e1      	bpl.n	801351a <__swbuf_r+0x2e>
 8013556:	2e0a      	cmp	r6, #10
 8013558:	d1df      	bne.n	801351a <__swbuf_r+0x2e>
 801355a:	4621      	mov	r1, r4
 801355c:	4628      	mov	r0, r5
 801355e:	f7ff ff9d 	bl	801349c <_fflush_r>
 8013562:	2800      	cmp	r0, #0
 8013564:	d0d9      	beq.n	801351a <__swbuf_r+0x2e>
 8013566:	e7d6      	b.n	8013516 <__swbuf_r+0x2a>

08013568 <__swsetup_r>:
 8013568:	b538      	push	{r3, r4, r5, lr}
 801356a:	4b29      	ldr	r3, [pc, #164]	@ (8013610 <__swsetup_r+0xa8>)
 801356c:	4605      	mov	r5, r0
 801356e:	460c      	mov	r4, r1
 8013570:	6818      	ldr	r0, [r3, #0]
 8013572:	b118      	cbz	r0, 801357c <__swsetup_r+0x14>
 8013574:	6a03      	ldr	r3, [r0, #32]
 8013576:	b90b      	cbnz	r3, 801357c <__swsetup_r+0x14>
 8013578:	f7ff f848 	bl	801260c <__sinit>
 801357c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013580:	0719      	lsls	r1, r3, #28
 8013582:	d422      	bmi.n	80135ca <__swsetup_r+0x62>
 8013584:	06da      	lsls	r2, r3, #27
 8013586:	d407      	bmi.n	8013598 <__swsetup_r+0x30>
 8013588:	2209      	movs	r2, #9
 801358a:	602a      	str	r2, [r5, #0]
 801358c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013590:	f04f 30ff 	mov.w	r0, #4294967295
 8013594:	81a3      	strh	r3, [r4, #12]
 8013596:	e033      	b.n	8013600 <__swsetup_r+0x98>
 8013598:	0758      	lsls	r0, r3, #29
 801359a:	d512      	bpl.n	80135c2 <__swsetup_r+0x5a>
 801359c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801359e:	b141      	cbz	r1, 80135b2 <__swsetup_r+0x4a>
 80135a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80135a4:	4299      	cmp	r1, r3
 80135a6:	d002      	beq.n	80135ae <__swsetup_r+0x46>
 80135a8:	4628      	mov	r0, r5
 80135aa:	f7ff f9cf 	bl	801294c <_free_r>
 80135ae:	2300      	movs	r3, #0
 80135b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80135b2:	89a3      	ldrh	r3, [r4, #12]
 80135b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80135b8:	81a3      	strh	r3, [r4, #12]
 80135ba:	2300      	movs	r3, #0
 80135bc:	6063      	str	r3, [r4, #4]
 80135be:	6923      	ldr	r3, [r4, #16]
 80135c0:	6023      	str	r3, [r4, #0]
 80135c2:	89a3      	ldrh	r3, [r4, #12]
 80135c4:	f043 0308 	orr.w	r3, r3, #8
 80135c8:	81a3      	strh	r3, [r4, #12]
 80135ca:	6923      	ldr	r3, [r4, #16]
 80135cc:	b94b      	cbnz	r3, 80135e2 <__swsetup_r+0x7a>
 80135ce:	89a3      	ldrh	r3, [r4, #12]
 80135d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80135d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80135d8:	d003      	beq.n	80135e2 <__swsetup_r+0x7a>
 80135da:	4621      	mov	r1, r4
 80135dc:	4628      	mov	r0, r5
 80135de:	f000 f8a4 	bl	801372a <__smakebuf_r>
 80135e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135e6:	f013 0201 	ands.w	r2, r3, #1
 80135ea:	d00a      	beq.n	8013602 <__swsetup_r+0x9a>
 80135ec:	2200      	movs	r2, #0
 80135ee:	60a2      	str	r2, [r4, #8]
 80135f0:	6962      	ldr	r2, [r4, #20]
 80135f2:	4252      	negs	r2, r2
 80135f4:	61a2      	str	r2, [r4, #24]
 80135f6:	6922      	ldr	r2, [r4, #16]
 80135f8:	b942      	cbnz	r2, 801360c <__swsetup_r+0xa4>
 80135fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80135fe:	d1c5      	bne.n	801358c <__swsetup_r+0x24>
 8013600:	bd38      	pop	{r3, r4, r5, pc}
 8013602:	0799      	lsls	r1, r3, #30
 8013604:	bf58      	it	pl
 8013606:	6962      	ldrpl	r2, [r4, #20]
 8013608:	60a2      	str	r2, [r4, #8]
 801360a:	e7f4      	b.n	80135f6 <__swsetup_r+0x8e>
 801360c:	2000      	movs	r0, #0
 801360e:	e7f7      	b.n	8013600 <__swsetup_r+0x98>
 8013610:	20000130 	.word	0x20000130

08013614 <memmove>:
 8013614:	4288      	cmp	r0, r1
 8013616:	b510      	push	{r4, lr}
 8013618:	eb01 0402 	add.w	r4, r1, r2
 801361c:	d902      	bls.n	8013624 <memmove+0x10>
 801361e:	4284      	cmp	r4, r0
 8013620:	4623      	mov	r3, r4
 8013622:	d807      	bhi.n	8013634 <memmove+0x20>
 8013624:	1e43      	subs	r3, r0, #1
 8013626:	42a1      	cmp	r1, r4
 8013628:	d008      	beq.n	801363c <memmove+0x28>
 801362a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801362e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013632:	e7f8      	b.n	8013626 <memmove+0x12>
 8013634:	4402      	add	r2, r0
 8013636:	4601      	mov	r1, r0
 8013638:	428a      	cmp	r2, r1
 801363a:	d100      	bne.n	801363e <memmove+0x2a>
 801363c:	bd10      	pop	{r4, pc}
 801363e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013646:	e7f7      	b.n	8013638 <memmove+0x24>

08013648 <_sbrk_r>:
 8013648:	b538      	push	{r3, r4, r5, lr}
 801364a:	2300      	movs	r3, #0
 801364c:	4d05      	ldr	r5, [pc, #20]	@ (8013664 <_sbrk_r+0x1c>)
 801364e:	4604      	mov	r4, r0
 8013650:	4608      	mov	r0, r1
 8013652:	602b      	str	r3, [r5, #0]
 8013654:	f7ef f9ec 	bl	8002a30 <_sbrk>
 8013658:	1c43      	adds	r3, r0, #1
 801365a:	d102      	bne.n	8013662 <_sbrk_r+0x1a>
 801365c:	682b      	ldr	r3, [r5, #0]
 801365e:	b103      	cbz	r3, 8013662 <_sbrk_r+0x1a>
 8013660:	6023      	str	r3, [r4, #0]
 8013662:	bd38      	pop	{r3, r4, r5, pc}
 8013664:	20011350 	.word	0x20011350

08013668 <memchr>:
 8013668:	b2c9      	uxtb	r1, r1
 801366a:	4603      	mov	r3, r0
 801366c:	4402      	add	r2, r0
 801366e:	b510      	push	{r4, lr}
 8013670:	4293      	cmp	r3, r2
 8013672:	4618      	mov	r0, r3
 8013674:	d101      	bne.n	801367a <memchr+0x12>
 8013676:	2000      	movs	r0, #0
 8013678:	e003      	b.n	8013682 <memchr+0x1a>
 801367a:	7804      	ldrb	r4, [r0, #0]
 801367c:	3301      	adds	r3, #1
 801367e:	428c      	cmp	r4, r1
 8013680:	d1f6      	bne.n	8013670 <memchr+0x8>
 8013682:	bd10      	pop	{r4, pc}

08013684 <_realloc_r>:
 8013684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013688:	4680      	mov	r8, r0
 801368a:	4615      	mov	r5, r2
 801368c:	460c      	mov	r4, r1
 801368e:	b921      	cbnz	r1, 801369a <_realloc_r+0x16>
 8013690:	4611      	mov	r1, r2
 8013692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013696:	f7ff b9c5 	b.w	8012a24 <_malloc_r>
 801369a:	b92a      	cbnz	r2, 80136a8 <_realloc_r+0x24>
 801369c:	f7ff f956 	bl	801294c <_free_r>
 80136a0:	2400      	movs	r4, #0
 80136a2:	4620      	mov	r0, r4
 80136a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136a8:	f000 f89e 	bl	80137e8 <_malloc_usable_size_r>
 80136ac:	4285      	cmp	r5, r0
 80136ae:	4606      	mov	r6, r0
 80136b0:	d802      	bhi.n	80136b8 <_realloc_r+0x34>
 80136b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80136b6:	d8f4      	bhi.n	80136a2 <_realloc_r+0x1e>
 80136b8:	4629      	mov	r1, r5
 80136ba:	4640      	mov	r0, r8
 80136bc:	f7ff f9b2 	bl	8012a24 <_malloc_r>
 80136c0:	4607      	mov	r7, r0
 80136c2:	2800      	cmp	r0, #0
 80136c4:	d0ec      	beq.n	80136a0 <_realloc_r+0x1c>
 80136c6:	42b5      	cmp	r5, r6
 80136c8:	462a      	mov	r2, r5
 80136ca:	4621      	mov	r1, r4
 80136cc:	bf28      	it	cs
 80136ce:	4632      	movcs	r2, r6
 80136d0:	f7ff f92f 	bl	8012932 <memcpy>
 80136d4:	4621      	mov	r1, r4
 80136d6:	4640      	mov	r0, r8
 80136d8:	463c      	mov	r4, r7
 80136da:	f7ff f937 	bl	801294c <_free_r>
 80136de:	e7e0      	b.n	80136a2 <_realloc_r+0x1e>

080136e0 <__swhatbuf_r>:
 80136e0:	b570      	push	{r4, r5, r6, lr}
 80136e2:	460c      	mov	r4, r1
 80136e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136e8:	b096      	sub	sp, #88	@ 0x58
 80136ea:	4615      	mov	r5, r2
 80136ec:	2900      	cmp	r1, #0
 80136ee:	461e      	mov	r6, r3
 80136f0:	da0c      	bge.n	801370c <__swhatbuf_r+0x2c>
 80136f2:	89a3      	ldrh	r3, [r4, #12]
 80136f4:	2100      	movs	r1, #0
 80136f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80136fa:	bf14      	ite	ne
 80136fc:	2340      	movne	r3, #64	@ 0x40
 80136fe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013702:	2000      	movs	r0, #0
 8013704:	6031      	str	r1, [r6, #0]
 8013706:	602b      	str	r3, [r5, #0]
 8013708:	b016      	add	sp, #88	@ 0x58
 801370a:	bd70      	pop	{r4, r5, r6, pc}
 801370c:	466a      	mov	r2, sp
 801370e:	f000 f849 	bl	80137a4 <_fstat_r>
 8013712:	2800      	cmp	r0, #0
 8013714:	dbed      	blt.n	80136f2 <__swhatbuf_r+0x12>
 8013716:	9901      	ldr	r1, [sp, #4]
 8013718:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801371c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013720:	4259      	negs	r1, r3
 8013722:	4159      	adcs	r1, r3
 8013724:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013728:	e7eb      	b.n	8013702 <__swhatbuf_r+0x22>

0801372a <__smakebuf_r>:
 801372a:	898b      	ldrh	r3, [r1, #12]
 801372c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801372e:	079d      	lsls	r5, r3, #30
 8013730:	4606      	mov	r6, r0
 8013732:	460c      	mov	r4, r1
 8013734:	d507      	bpl.n	8013746 <__smakebuf_r+0x1c>
 8013736:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801373a:	6023      	str	r3, [r4, #0]
 801373c:	6123      	str	r3, [r4, #16]
 801373e:	2301      	movs	r3, #1
 8013740:	6163      	str	r3, [r4, #20]
 8013742:	b003      	add	sp, #12
 8013744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013746:	ab01      	add	r3, sp, #4
 8013748:	466a      	mov	r2, sp
 801374a:	f7ff ffc9 	bl	80136e0 <__swhatbuf_r>
 801374e:	9f00      	ldr	r7, [sp, #0]
 8013750:	4605      	mov	r5, r0
 8013752:	4630      	mov	r0, r6
 8013754:	4639      	mov	r1, r7
 8013756:	f7ff f965 	bl	8012a24 <_malloc_r>
 801375a:	b948      	cbnz	r0, 8013770 <__smakebuf_r+0x46>
 801375c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013760:	059a      	lsls	r2, r3, #22
 8013762:	d4ee      	bmi.n	8013742 <__smakebuf_r+0x18>
 8013764:	f023 0303 	bic.w	r3, r3, #3
 8013768:	f043 0302 	orr.w	r3, r3, #2
 801376c:	81a3      	strh	r3, [r4, #12]
 801376e:	e7e2      	b.n	8013736 <__smakebuf_r+0xc>
 8013770:	89a3      	ldrh	r3, [r4, #12]
 8013772:	6020      	str	r0, [r4, #0]
 8013774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013778:	81a3      	strh	r3, [r4, #12]
 801377a:	9b01      	ldr	r3, [sp, #4]
 801377c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013780:	b15b      	cbz	r3, 801379a <__smakebuf_r+0x70>
 8013782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013786:	4630      	mov	r0, r6
 8013788:	f000 f81e 	bl	80137c8 <_isatty_r>
 801378c:	b128      	cbz	r0, 801379a <__smakebuf_r+0x70>
 801378e:	89a3      	ldrh	r3, [r4, #12]
 8013790:	f023 0303 	bic.w	r3, r3, #3
 8013794:	f043 0301 	orr.w	r3, r3, #1
 8013798:	81a3      	strh	r3, [r4, #12]
 801379a:	89a3      	ldrh	r3, [r4, #12]
 801379c:	431d      	orrs	r5, r3
 801379e:	81a5      	strh	r5, [r4, #12]
 80137a0:	e7cf      	b.n	8013742 <__smakebuf_r+0x18>
	...

080137a4 <_fstat_r>:
 80137a4:	b538      	push	{r3, r4, r5, lr}
 80137a6:	2300      	movs	r3, #0
 80137a8:	4d06      	ldr	r5, [pc, #24]	@ (80137c4 <_fstat_r+0x20>)
 80137aa:	4604      	mov	r4, r0
 80137ac:	4608      	mov	r0, r1
 80137ae:	4611      	mov	r1, r2
 80137b0:	602b      	str	r3, [r5, #0]
 80137b2:	f7ef f914 	bl	80029de <_fstat>
 80137b6:	1c43      	adds	r3, r0, #1
 80137b8:	d102      	bne.n	80137c0 <_fstat_r+0x1c>
 80137ba:	682b      	ldr	r3, [r5, #0]
 80137bc:	b103      	cbz	r3, 80137c0 <_fstat_r+0x1c>
 80137be:	6023      	str	r3, [r4, #0]
 80137c0:	bd38      	pop	{r3, r4, r5, pc}
 80137c2:	bf00      	nop
 80137c4:	20011350 	.word	0x20011350

080137c8 <_isatty_r>:
 80137c8:	b538      	push	{r3, r4, r5, lr}
 80137ca:	2300      	movs	r3, #0
 80137cc:	4d05      	ldr	r5, [pc, #20]	@ (80137e4 <_isatty_r+0x1c>)
 80137ce:	4604      	mov	r4, r0
 80137d0:	4608      	mov	r0, r1
 80137d2:	602b      	str	r3, [r5, #0]
 80137d4:	f7ef f913 	bl	80029fe <_isatty>
 80137d8:	1c43      	adds	r3, r0, #1
 80137da:	d102      	bne.n	80137e2 <_isatty_r+0x1a>
 80137dc:	682b      	ldr	r3, [r5, #0]
 80137de:	b103      	cbz	r3, 80137e2 <_isatty_r+0x1a>
 80137e0:	6023      	str	r3, [r4, #0]
 80137e2:	bd38      	pop	{r3, r4, r5, pc}
 80137e4:	20011350 	.word	0x20011350

080137e8 <_malloc_usable_size_r>:
 80137e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137ec:	1f18      	subs	r0, r3, #4
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	bfbc      	itt	lt
 80137f2:	580b      	ldrlt	r3, [r1, r0]
 80137f4:	18c0      	addlt	r0, r0, r3
 80137f6:	4770      	bx	lr

080137f8 <_init>:
 80137f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137fa:	bf00      	nop
 80137fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137fe:	bc08      	pop	{r3}
 8013800:	469e      	mov	lr, r3
 8013802:	4770      	bx	lr

08013804 <_fini>:
 8013804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013806:	bf00      	nop
 8013808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801380a:	bc08      	pop	{r3}
 801380c:	469e      	mov	lr, r3
 801380e:	4770      	bx	lr
