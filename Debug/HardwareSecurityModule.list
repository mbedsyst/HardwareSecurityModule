
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000135d8  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f58  08013824  08013824  00014824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801477c  0801477c  00016180  2**0
                  CONTENTS
  4 .ARM          00000008  0801477c  0801477c  0001577c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014784  08014784  00016180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014784  08014784  00015784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014788  08014788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  0801478c  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000111e0  20000180  0801490c  00016180  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20011360  0801490c  00016360  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00016180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028ffc  00000000  00000000  000161b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c12  00000000  00000000  0003f1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  00044dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017cd  00000000  00000000  00046d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039fd8  00000000  00000000  000484cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030e19  00000000  00000000  000824a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014c35a  00000000  00000000  000b32be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ff618  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c64  00000000  00000000  001ff65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  002082c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	0801380c 	.word	0x0801380c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	0801380c 	.word	0x0801380c

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <GetCommandName>:

#include <stdio.h>
#include <stdint.h>

static const char* GetCommandName(uint8_t cmd)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    switch (cmd)
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	2b0e      	cmp	r3, #14
 80005b4:	d832      	bhi.n	800061c <GetCommandName+0x78>
 80005b6:	a201      	add	r2, pc, #4	@ (adr r2, 80005bc <GetCommandName+0x18>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005f9 	.word	0x080005f9
 80005c0:	080005fd 	.word	0x080005fd
 80005c4:	08000601 	.word	0x08000601
 80005c8:	08000605 	.word	0x08000605
 80005cc:	08000609 	.word	0x08000609
 80005d0:	0800060d 	.word	0x0800060d
 80005d4:	08000611 	.word	0x08000611
 80005d8:	08000615 	.word	0x08000615
 80005dc:	0800061d 	.word	0x0800061d
 80005e0:	0800061d 	.word	0x0800061d
 80005e4:	0800061d 	.word	0x0800061d
 80005e8:	0800061d 	.word	0x0800061d
 80005ec:	0800061d 	.word	0x0800061d
 80005f0:	0800061d 	.word	0x0800061d
 80005f4:	08000619 	.word	0x08000619
    {
        case CMD_ENCRYPT:   	return "Encryption Operation";
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <GetCommandName+0x88>)
 80005fa:	e010      	b.n	800061e <GetCommandName+0x7a>
        case CMD_DECRYPT:   	return "Decryption Operation";
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <GetCommandName+0x8c>)
 80005fe:	e00e      	b.n	800061e <GetCommandName+0x7a>
        case CMD_HASH:      	return "Hashing Operation";
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <GetCommandName+0x90>)
 8000602:	e00c      	b.n	800061e <GetCommandName+0x7a>
        case CMD_RANDOM:   		return "RNG Operation";
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <GetCommandName+0x94>)
 8000606:	e00a      	b.n	800061e <GetCommandName+0x7a>
        case CMD_OTP:   		return "OTP Operation";
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <GetCommandName+0x98>)
 800060a:	e008      	b.n	800061e <GetCommandName+0x7a>
        case CMD_KEY_GEN:   	return "Key Generation Operation";
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <GetCommandName+0x9c>)
 800060e:	e006      	b.n	800061e <GetCommandName+0x7a>
        case CMD_KEY_STORE:     return "Key Store Operation";
 8000610:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <GetCommandName+0xa0>)
 8000612:	e004      	b.n	800061e <GetCommandName+0x7a>
        case CMD_KEY_ERASE:   	return "Key Erase Operation";
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <GetCommandName+0xa4>)
 8000616:	e002      	b.n	800061e <GetCommandName+0x7a>
        case CMD_PING:   		return "Device Ping Operation";
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <GetCommandName+0xa8>)
 800061a:	e000      	b.n	800061e <GetCommandName+0x7a>
        default:            	return "Unknown Command";
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <GetCommandName+0xac>)
    }
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	08013824 	.word	0x08013824
 8000630:	0801383c 	.word	0x0801383c
 8000634:	08013854 	.word	0x08013854
 8000638:	08013868 	.word	0x08013868
 800063c:	08013878 	.word	0x08013878
 8000640:	08013888 	.word	0x08013888
 8000644:	080138a4 	.word	0x080138a4
 8000648:	080138b8 	.word	0x080138b8
 800064c:	080138cc 	.word	0x080138cc
 8000650:	080138e4 	.word	0x080138e4

08000654 <GetOptionName>:

static const char* GetOptionName(uint8_t option)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
    switch (option)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	3b01      	subs	r3, #1
 8000662:	2b3e      	cmp	r3, #62	@ 0x3e
 8000664:	f200 80b2 	bhi.w	80007cc <GetOptionName+0x178>
 8000668:	a201      	add	r2, pc, #4	@ (adr r2, 8000670 <GetOptionName+0x1c>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	0800076d 	.word	0x0800076d
 8000674:	08000771 	.word	0x08000771
 8000678:	080007cd 	.word	0x080007cd
 800067c:	080007cd 	.word	0x080007cd
 8000680:	080007cd 	.word	0x080007cd
 8000684:	080007cd 	.word	0x080007cd
 8000688:	080007cd 	.word	0x080007cd
 800068c:	080007cd 	.word	0x080007cd
 8000690:	080007cd 	.word	0x080007cd
 8000694:	080007cd 	.word	0x080007cd
 8000698:	080007cd 	.word	0x080007cd
 800069c:	080007cd 	.word	0x080007cd
 80006a0:	080007cd 	.word	0x080007cd
 80006a4:	080007cd 	.word	0x080007cd
 80006a8:	080007cd 	.word	0x080007cd
 80006ac:	080007cd 	.word	0x080007cd
 80006b0:	08000775 	.word	0x08000775
 80006b4:	08000779 	.word	0x08000779
 80006b8:	080007cd 	.word	0x080007cd
 80006bc:	080007cd 	.word	0x080007cd
 80006c0:	080007cd 	.word	0x080007cd
 80006c4:	080007cd 	.word	0x080007cd
 80006c8:	080007cd 	.word	0x080007cd
 80006cc:	080007cd 	.word	0x080007cd
 80006d0:	080007cd 	.word	0x080007cd
 80006d4:	080007cd 	.word	0x080007cd
 80006d8:	080007cd 	.word	0x080007cd
 80006dc:	080007cd 	.word	0x080007cd
 80006e0:	080007cd 	.word	0x080007cd
 80006e4:	080007cd 	.word	0x080007cd
 80006e8:	080007cd 	.word	0x080007cd
 80006ec:	080007cd 	.word	0x080007cd
 80006f0:	0800077d 	.word	0x0800077d
 80006f4:	08000781 	.word	0x08000781
 80006f8:	08000785 	.word	0x08000785
 80006fc:	08000789 	.word	0x08000789
 8000700:	0800078d 	.word	0x0800078d
 8000704:	08000791 	.word	0x08000791
 8000708:	080007cd 	.word	0x080007cd
 800070c:	080007cd 	.word	0x080007cd
 8000710:	080007cd 	.word	0x080007cd
 8000714:	080007cd 	.word	0x080007cd
 8000718:	080007cd 	.word	0x080007cd
 800071c:	080007cd 	.word	0x080007cd
 8000720:	080007cd 	.word	0x080007cd
 8000724:	080007cd 	.word	0x080007cd
 8000728:	080007cd 	.word	0x080007cd
 800072c:	080007cd 	.word	0x080007cd
 8000730:	08000795 	.word	0x08000795
 8000734:	08000799 	.word	0x08000799
 8000738:	0800079d 	.word	0x0800079d
 800073c:	080007a1 	.word	0x080007a1
 8000740:	080007a5 	.word	0x080007a5
 8000744:	080007a9 	.word	0x080007a9
 8000748:	080007ad 	.word	0x080007ad
 800074c:	080007b1 	.word	0x080007b1
 8000750:	080007b5 	.word	0x080007b5
 8000754:	080007b9 	.word	0x080007b9
 8000758:	080007cd 	.word	0x080007cd
 800075c:	080007bd 	.word	0x080007bd
 8000760:	080007c1 	.word	0x080007c1
 8000764:	080007c5 	.word	0x080007c5
 8000768:	080007c9 	.word	0x080007c9
    {
    	case OPTION_ENCRYP_KEY128:	return "128-bit Encryption";
 800076c:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <GetOptionName+0x188>)
 800076e:	e02e      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_ENCRYP_KEY256:	return "256-bit Encryption";
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <GetOptionName+0x18c>)
 8000772:	e02c      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_DECRYP_KEY128:	return "128-bit Decryption";
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <GetOptionName+0x190>)
 8000776:	e02a      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_DECRYP_KEY256:	return "256-bit Decryption";
 8000778:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <GetOptionName+0x194>)
 800077a:	e028      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_HASH_SHA224:	return "SHA224 Hashing Algorithm";
 800077c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <GetOptionName+0x198>)
 800077e:	e026      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_HASH_SHA256:	return "SHA256 Hashing Algorithm";
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <GetOptionName+0x19c>)
 8000782:	e024      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_HASH_SHA384:	return "SHA384 Hashing Algorithm";
 8000784:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <GetOptionName+0x1a0>)
 8000786:	e022      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_HASH_SHA512:	return "SHA512 Hashing Algorithm";
 8000788:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <GetOptionName+0x1a4>)
 800078a:	e020      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_HMAC_SHA224:	return "SHA224 HMAC Algorithm";
 800078c:	4b1b      	ldr	r3, [pc, #108]	@ (80007fc <GetOptionName+0x1a8>)
 800078e:	e01e      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_HMAC_SHA256:	return "SHA256 HMAC Algorithm";
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <GetOptionName+0x1ac>)
 8000792:	e01c      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0004:		return "4-byte Random Number Generation";
 8000794:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <GetOptionName+0x1b0>)
 8000796:	e01a      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0008:		return "8-byte Random Number Generation";
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <GetOptionName+0x1b4>)
 800079a:	e018      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0016:		return "16-byte Random Number Generation";
 800079c:	4b1b      	ldr	r3, [pc, #108]	@ (800080c <GetOptionName+0x1b8>)
 800079e:	e016      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0024:		return "24-byte Random Number Generation";
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <GetOptionName+0x1bc>)
 80007a2:	e014      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0032:		return "32-byte Random Number Generation";
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <GetOptionName+0x1c0>)
 80007a6:	e012      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0048:		return "48-byte Random Number Generation";
 80007a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000818 <GetOptionName+0x1c4>)
 80007aa:	e010      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0064:		return "64-byte Random Number Generation";
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <GetOptionName+0x1c8>)
 80007ae:	e00e      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0066:		return "66-byte Random Number Generation";
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <GetOptionName+0x1cc>)
 80007b2:	e00c      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0128:		return "128-byte Random Number Generation";
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <GetOptionName+0x1d0>)
 80007b6:	e00a      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0256:		return "256-byte Random Number Generation";
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <GetOptionName+0x1d4>)
 80007ba:	e008      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0512:		return "512-byte Random Number Generation";
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <GetOptionName+0x1d8>)
 80007be:	e006      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_1024:		return "1024-byte Random Number Generation";
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <GetOptionName+0x1dc>)
 80007c2:	e004      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_2048:		return "2048-byte Random Number Generation";
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <GetOptionName+0x1e0>)
 80007c6:	e002      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_4096:		return "4096-byte Random Number Generation";
 80007c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <GetOptionName+0x1e4>)
 80007ca:	e000      	b.n	80007ce <GetOptionName+0x17a>
		default:					return "Unknown Command"; 	break;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <GetOptionName+0x1e8>)
    }
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	080138f4 	.word	0x080138f4
 80007e0:	08013908 	.word	0x08013908
 80007e4:	0801391c 	.word	0x0801391c
 80007e8:	08013930 	.word	0x08013930
 80007ec:	08013944 	.word	0x08013944
 80007f0:	08013960 	.word	0x08013960
 80007f4:	0801397c 	.word	0x0801397c
 80007f8:	08013998 	.word	0x08013998
 80007fc:	080139b4 	.word	0x080139b4
 8000800:	080139cc 	.word	0x080139cc
 8000804:	080139e4 	.word	0x080139e4
 8000808:	08013a04 	.word	0x08013a04
 800080c:	08013a24 	.word	0x08013a24
 8000810:	08013a48 	.word	0x08013a48
 8000814:	08013a6c 	.word	0x08013a6c
 8000818:	08013a90 	.word	0x08013a90
 800081c:	08013ab4 	.word	0x08013ab4
 8000820:	08013ad8 	.word	0x08013ad8
 8000824:	08013afc 	.word	0x08013afc
 8000828:	08013b20 	.word	0x08013b20
 800082c:	08013b44 	.word	0x08013b44
 8000830:	08013b68 	.word	0x08013b68
 8000834:	08013b8c 	.word	0x08013b8c
 8000838:	08013bb0 	.word	0x08013bb0
 800083c:	080138e4 	.word	0x080138e4

08000840 <LogParsedPacket>:

static void LogParsedPacket(const ParsedPacket_t* packet)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	@ 0x50
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
    if (!packet)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d103      	bne.n	8000856 <LogParsedPacket+0x16>
    {
        log_error("ParsedPacket is NULL");
 800084e:	4841      	ldr	r0, [pc, #260]	@ (8000954 <LogParsedPacket+0x114>)
 8000850:	f001 f844 	bl	80018dc <log_error>
        return;
 8000854:	e07b      	b.n	800094e <LogParsedPacket+0x10e>
    }

    log_debug("PARSED PACKET:");
 8000856:	4840      	ldr	r0, [pc, #256]	@ (8000958 <LogParsedPacket+0x118>)
 8000858:	f000 fff2 	bl	8001840 <log_debug>
    log_debug("TXID       : %u", packet->transactionID);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	483e      	ldr	r0, [pc, #248]	@ (800095c <LogParsedPacket+0x11c>)
 8000864:	f000 ffec 	bl	8001840 <log_debug>
    log_debug("CMD        : %s", GetCommandName(packet->cmd));
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	791b      	ldrb	r3, [r3, #4]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe99 	bl	80005a4 <GetCommandName>
 8000872:	4603      	mov	r3, r0
 8000874:	4619      	mov	r1, r3
 8000876:	483a      	ldr	r0, [pc, #232]	@ (8000960 <LogParsedPacket+0x120>)
 8000878:	f000 ffe2 	bl	8001840 <log_debug>
    log_debug("OPTION     : %s", GetOptionName(packet->option));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	795b      	ldrb	r3, [r3, #5]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fee7 	bl	8000654 <GetOptionName>
 8000886:	4603      	mov	r3, r0
 8000888:	4619      	mov	r1, r3
 800088a:	4836      	ldr	r0, [pc, #216]	@ (8000964 <LogParsedPacket+0x124>)
 800088c:	f000 ffd8 	bl	8001840 <log_debug>
    log_debug("INPUT SIZE : %hu bytes", packet->inputSize);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	88db      	ldrh	r3, [r3, #6]
 8000894:	4619      	mov	r1, r3
 8000896:	4834      	ldr	r0, [pc, #208]	@ (8000968 <LogParsedPacket+0x128>)
 8000898:	f000 ffd2 	bl	8001840 <log_debug>

    const uint8_t* data = packet->inputData;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3308      	adds	r3, #8
 80008a0:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->inputSize;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	88db      	ldrh	r3, [r3, #6]
 80008a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 80008a8:	2300      	movs	r3, #0
 80008aa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80008ae:	e049      	b.n	8000944 <LogParsedPacket+0x104>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	222d      	movs	r2, #45	@ 0x2d
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f011 ffc7 	bl	8012850 <memset>
        char* ptr = line;
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80008ce:	e017      	b.n	8000900 <LogParsedPacket+0xc0>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 80008d0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80008d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008d8:	4413      	add	r3, r2
 80008da:	461a      	mov	r2, r3
 80008dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80008de:	4413      	add	r3, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	4921      	ldr	r1, [pc, #132]	@ (800096c <LogParsedPacket+0x12c>)
 80008e6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008e8:	f011 ff16 	bl	8012718 <siprintf>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80008f2:	4413      	add	r3, r2
 80008f4:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80008f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008fa:	3301      	adds	r3, #1
 80008fc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000900:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d807      	bhi.n	8000918 <LogParsedPacket+0xd8>
 8000908:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800090c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000910:	441a      	add	r2, r3
 8000912:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000914:	429a      	cmp	r2, r3
 8000916:	dbdb      	blt.n	80008d0 <LogParsedPacket+0x90>
        }

        if (i == 0)
 8000918:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800091c:	2b00      	cmp	r3, #0
 800091e:	d106      	bne.n	800092e <LogParsedPacket+0xee>
        {
        	log_debug("INPUT DATA : %s", line);
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4619      	mov	r1, r3
 8000926:	4812      	ldr	r0, [pc, #72]	@ (8000970 <LogParsedPacket+0x130>)
 8000928:	f000 ff8a 	bl	8001840 <log_debug>
 800092c:	e005      	b.n	800093a <LogParsedPacket+0xfa>
        }
        else
        {
        	log_debug("             %s", line);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4619      	mov	r1, r3
 8000934:	480f      	ldr	r0, [pc, #60]	@ (8000974 <LogParsedPacket+0x134>)
 8000936:	f000 ff83 	bl	8001840 <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 800093a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800093e:	3310      	adds	r3, #16
 8000940:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000944:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000948:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800094a:	429a      	cmp	r2, r3
 800094c:	d3b0      	bcc.n	80008b0 <LogParsedPacket+0x70>
        }
    }
    // log_debug("EOD FLAG    : %04X", packet->out_eod_flag);
}
 800094e:	3750      	adds	r7, #80	@ 0x50
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	08013bd4 	.word	0x08013bd4
 8000958:	08013bec 	.word	0x08013bec
 800095c:	08013bfc 	.word	0x08013bfc
 8000960:	08013c0c 	.word	0x08013c0c
 8000964:	08013c1c 	.word	0x08013c1c
 8000968:	08013c2c 	.word	0x08013c2c
 800096c:	08013c44 	.word	0x08013c44
 8000970:	08013c4c 	.word	0x08013c4c
 8000974:	08013c5c 	.word	0x08013c5c

08000978 <LogResponsePacket>:

static void LogResponsePacket(const ResponsePacket_t* packet)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b094      	sub	sp, #80	@ 0x50
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
    if (!packet)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d103      	bne.n	800098e <LogResponsePacket+0x16>
    {
        log_error("ResponsePacket is NULL");
 8000986:	483b      	ldr	r0, [pc, #236]	@ (8000a74 <LogResponsePacket+0xfc>)
 8000988:	f000 ffa8 	bl	80018dc <log_error>
        return;
 800098c:	e06f      	b.n	8000a6e <LogResponsePacket+0xf6>
    }

    log_debug("RESPONSE PACKET");
 800098e:	483a      	ldr	r0, [pc, #232]	@ (8000a78 <LogResponsePacket+0x100>)
 8000990:	f000 ff56 	bl	8001840 <log_debug>
    log_debug("TXID        : %u", packet->transactionID);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	4838      	ldr	r0, [pc, #224]	@ (8000a7c <LogResponsePacket+0x104>)
 800099c:	f000 ff50 	bl	8001840 <log_debug>
    log_debug("OUTPUT SIZE : %u bytes", packet->outputSize);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	889b      	ldrh	r3, [r3, #4]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4836      	ldr	r0, [pc, #216]	@ (8000a80 <LogResponsePacket+0x108>)
 80009a8:	f000 ff4a 	bl	8001840 <log_debug>

    const uint8_t* data = packet->outputData;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3306      	adds	r3, #6
 80009b0:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->outputSize;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	889b      	ldrh	r3, [r3, #4]
 80009b6:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80009be:	e049      	b.n	8000a54 <LogResponsePacket+0xdc>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	222d      	movs	r2, #45	@ 0x2d
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f011 ff3f 	bl	8012850 <memset>
        char* ptr = line;
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80009d8:	2300      	movs	r3, #0
 80009da:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80009de:	e017      	b.n	8000a10 <LogResponsePacket+0x98>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 80009e0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80009e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009e8:	4413      	add	r3, r2
 80009ea:	461a      	mov	r2, r3
 80009ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009ee:	4413      	add	r3, r2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	4923      	ldr	r1, [pc, #140]	@ (8000a84 <LogResponsePacket+0x10c>)
 80009f6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80009f8:	f011 fe8e 	bl	8012718 <siprintf>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a02:	4413      	add	r3, r2
 8000a04:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 8000a06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000a10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a14:	2b0f      	cmp	r3, #15
 8000a16:	d807      	bhi.n	8000a28 <LogResponsePacket+0xb0>
 8000a18:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000a1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a20:	441a      	add	r2, r3
 8000a22:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbdb      	blt.n	80009e0 <LogResponsePacket+0x68>
        }

        if (i == 0)
 8000a28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d106      	bne.n	8000a3e <LogResponsePacket+0xc6>
            log_debug("OUTPUT DATA : %s", line);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4619      	mov	r1, r3
 8000a36:	4814      	ldr	r0, [pc, #80]	@ (8000a88 <LogResponsePacket+0x110>)
 8000a38:	f000 ff02 	bl	8001840 <log_debug>
 8000a3c:	e005      	b.n	8000a4a <LogResponsePacket+0xd2>
        else
            log_debug("              %s", line);
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	4619      	mov	r1, r3
 8000a44:	4811      	ldr	r0, [pc, #68]	@ (8000a8c <LogResponsePacket+0x114>)
 8000a46:	f000 fefb 	bl	8001840 <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 8000a4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a4e:	3310      	adds	r3, #16
 8000a50:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000a54:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000a58:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d3b0      	bcc.n	80009c0 <LogResponsePacket+0x48>
    }
    log_debug("EOD FLAG    : %04X", packet->out_eod_flag);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	4619      	mov	r1, r3
 8000a68:	4809      	ldr	r0, [pc, #36]	@ (8000a90 <LogResponsePacket+0x118>)
 8000a6a:	f000 fee9 	bl	8001840 <log_debug>
}
 8000a6e:	3750      	adds	r7, #80	@ 0x50
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	08013c6c 	.word	0x08013c6c
 8000a78:	08013c84 	.word	0x08013c84
 8000a7c:	08013c94 	.word	0x08013c94
 8000a80:	08013ca8 	.word	0x08013ca8
 8000a84:	08013c44 	.word	0x08013c44
 8000a88:	08013cc0 	.word	0x08013cc0
 8000a8c:	08013cd4 	.word	0x08013cd4
 8000a90:	08013ce8 	.word	0x08013ce8

08000a94 <LogTransmitBuffer>:

static void LogTransmitBuffer(const uint8_t* usb_tx_buffer, uint32_t usb_tx_index)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b092      	sub	sp, #72	@ 0x48
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
    if (!usb_tx_buffer || usb_tx_index == 0)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d002      	beq.n	8000aaa <LogTransmitBuffer+0x16>
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d103      	bne.n	8000ab2 <LogTransmitBuffer+0x1e>
    {
        log_debug("USB TX buffer is empty or NULL.");
 8000aaa:	4826      	ldr	r0, [pc, #152]	@ (8000b44 <LogTransmitBuffer+0xb0>)
 8000aac:	f000 fec8 	bl	8001840 <log_debug>
        return;
 8000ab0:	e045      	b.n	8000b3e <LogTransmitBuffer+0xaa>
    }


    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ab6:	e03e      	b.n	8000b36 <LogTransmitBuffer+0xa2>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	222d      	movs	r2, #45	@ 0x2d
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f011 fec3 	bl	8012850 <memset>
        char* ptr = line;
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	643b      	str	r3, [r7, #64]	@ 0x40

        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ad4:	e012      	b.n	8000afc <LogTransmitBuffer+0x68>
        {
            ptr += sprintf(ptr, "%02X ", usb_tx_buffer[i + j]);
 8000ad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ada:	4413      	add	r3, r2
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4918      	ldr	r1, [pc, #96]	@ (8000b48 <LogTransmitBuffer+0xb4>)
 8000ae6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000ae8:	f011 fe16 	bl	8012718 <siprintf>
 8000aec:	4603      	mov	r3, r0
 8000aee:	461a      	mov	r2, r3
 8000af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000af2:	4413      	add	r3, r2
 8000af4:	643b      	str	r3, [r7, #64]	@ 0x40
        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000af8:	3301      	adds	r3, #1
 8000afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000afe:	2b0f      	cmp	r3, #15
 8000b00:	d805      	bhi.n	8000b0e <LogTransmitBuffer+0x7a>
 8000b02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b06:	4413      	add	r3, r2
 8000b08:	683a      	ldr	r2, [r7, #0]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d8e3      	bhi.n	8000ad6 <LogTransmitBuffer+0x42>
        }

        if (i == 0)
 8000b0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d107      	bne.n	8000b24 <LogTransmitBuffer+0x90>
            log_debug("USB Tx [%lu bytes]: %s", usb_tx_index, line);
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	461a      	mov	r2, r3
 8000b1a:	6839      	ldr	r1, [r7, #0]
 8000b1c:	480b      	ldr	r0, [pc, #44]	@ (8000b4c <LogTransmitBuffer+0xb8>)
 8000b1e:	f000 fe8f 	bl	8001840 <log_debug>
 8000b22:	e005      	b.n	8000b30 <LogTransmitBuffer+0x9c>
        else
            log_debug("                   %s", line);  // 17-character indent to align with line 1
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4809      	ldr	r0, [pc, #36]	@ (8000b50 <LogTransmitBuffer+0xbc>)
 8000b2c:	f000 fe88 	bl	8001840 <log_debug>
    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b32:	3310      	adds	r3, #16
 8000b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d3bc      	bcc.n	8000ab8 <LogTransmitBuffer+0x24>
    }
}
 8000b3e:	3748      	adds	r7, #72	@ 0x48
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	08013cfc 	.word	0x08013cfc
 8000b48:	08013c44 	.word	0x08013c44
 8000b4c:	08013d1c 	.word	0x08013d1c
 8000b50:	08013d34 	.word	0x08013d34

08000b54 <HSMManager_Init>:

void HSMManager_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  log_init(LOG_LEVEL_DEBUG);
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f000 fe15 	bl	8001788 <log_init>
  log_info("HSM Initialized.");
 8000b5e:	4834      	ldr	r0, [pc, #208]	@ (8000c30 <HSMManager_Init+0xdc>)
 8000b60:	f000 fe88 	bl	8001874 <log_info>
  HAL_Delay(1000);
 8000b64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b68:	f002 fb20 	bl	80031ac <HAL_Delay>
  log_info("Turning LED ON.");
 8000b6c:	4831      	ldr	r0, [pc, #196]	@ (8000c34 <HSMManager_Init+0xe0>)
 8000b6e:	f000 fe81 	bl	8001874 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f002 f8b8 	bl	8002ce8 <BSP_LED_Toggle>
 8000b78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b7c:	f002 fb16 	bl	80031ac <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000b80:	2002      	movs	r0, #2
 8000b82:	f002 f8b1 	bl	8002ce8 <BSP_LED_Toggle>
 8000b86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b8a:	f002 fb0f 	bl	80031ac <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f002 f8aa 	bl	8002ce8 <BSP_LED_Toggle>
 8000b94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b98:	f002 fb08 	bl	80031ac <HAL_Delay>
  log_info("Turning LED OFF.");
 8000b9c:	4826      	ldr	r0, [pc, #152]	@ (8000c38 <HSMManager_Init+0xe4>)
 8000b9e:	f000 fe69 	bl	8001874 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f002 f8a0 	bl	8002ce8 <BSP_LED_Toggle>
 8000ba8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bac:	f002 fafe 	bl	80031ac <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f002 f899 	bl	8002ce8 <BSP_LED_Toggle>
 8000bb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bba:	f002 faf7 	bl	80031ac <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f002 f892 	bl	8002ce8 <BSP_LED_Toggle>
 8000bc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc8:	f002 faf0 	bl	80031ac <HAL_Delay>
  log_info("Turning LED ON.");
 8000bcc:	4819      	ldr	r0, [pc, #100]	@ (8000c34 <HSMManager_Init+0xe0>)
 8000bce:	f000 fe51 	bl	8001874 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f002 f888 	bl	8002ce8 <BSP_LED_Toggle>
 8000bd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bdc:	f002 fae6 	bl	80031ac <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000be0:	2002      	movs	r0, #2
 8000be2:	f002 f881 	bl	8002ce8 <BSP_LED_Toggle>
 8000be6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bea:	f002 fadf 	bl	80031ac <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f002 f87a 	bl	8002ce8 <BSP_LED_Toggle>
 8000bf4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bf8:	f002 fad8 	bl	80031ac <HAL_Delay>
  log_info("Turning LED OFF.");
 8000bfc:	480e      	ldr	r0, [pc, #56]	@ (8000c38 <HSMManager_Init+0xe4>)
 8000bfe:	f000 fe39 	bl	8001874 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f002 f870 	bl	8002ce8 <BSP_LED_Toggle>
 8000c08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c0c:	f002 face 	bl	80031ac <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000c10:	2002      	movs	r0, #2
 8000c12:	f002 f869 	bl	8002ce8 <BSP_LED_Toggle>
 8000c16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c1a:	f002 fac7 	bl	80031ac <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f002 f862 	bl	8002ce8 <BSP_LED_Toggle>
 8000c24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c28:	f002 fac0 	bl	80031ac <HAL_Delay>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	08013d4c 	.word	0x08013d4c
 8000c34:	08013d60 	.word	0x08013d60
 8000c38:	08013d70 	.word	0x08013d70

08000c3c <HSMManager_ProcessCommand>:


OperationStatus_t HSMManager_ProcessCommand(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	f5ad 3d90 	sub.w	sp, sp, #73728	@ 0x12000
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
	 if (usb_rx_complete)
 8000c46:	4b48      	ldr	r3, [pc, #288]	@ (8000d68 <HSMManager_ProcessCommand+0x12c>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f000 8084 	beq.w	8000d5a <HSMManager_ProcessCommand+0x11e>
	 {
		 ParsedPacket_t request;
		 ResponsePacket_t response;
		 uint8_t usb_tx_buffer[MAX_USB_DATA_SIZE];
		 uint16_t usb_tx_index;
		 ParseStatus_t status = PacketParser_Parse(usb_rx_buffer, usb_rx_index, &request);
 8000c52:	4b46      	ldr	r3, [pc, #280]	@ (8000d6c <HSMManager_ProcessCommand+0x130>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	b299      	uxth	r1, r3
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	3b18      	subs	r3, #24
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4843      	ldr	r0, [pc, #268]	@ (8000d70 <HSMManager_ProcessCommand+0x134>)
 8000c62:	f000 fcb1 	bl	80015c8 <PacketParser_Parse>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000c6c:	f102 0217 	add.w	r2, r2, #23
 8000c70:	7013      	strb	r3, [r2, #0]

		 if (status == PARSE_SUCCESS)
 8000c72:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000c76:	f103 0317 	add.w	r3, r3, #23
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d163      	bne.n	8000d48 <HSMManager_ProcessCommand+0x10c>
		 {
			 log_debug("Packet Parsed Successfully:");
 8000c80:	483c      	ldr	r0, [pc, #240]	@ (8000d74 <HSMManager_ProcessCommand+0x138>)
 8000c82:	f000 fddd 	bl	8001840 <log_debug>
			 LogParsedPacket(&request);
 8000c86:	f107 0318 	add.w	r3, r7, #24
 8000c8a:	3b18      	subs	r3, #24
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fdd7 	bl	8000840 <LogParsedPacket>
			 OperationDispatcher_Dispatch(&request, &response);
 8000c92:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000c96:	f102 0218 	add.w	r2, r2, #24
 8000c9a:	3a10      	subs	r2, #16
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	3b18      	subs	r3, #24
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f869 	bl	8000d7c <OperationDispatcher_Dispatch>
			 response.transactionID = request.transactionID;
 8000caa:	f107 0318 	add.w	r3, r7, #24
 8000cae:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000cb2:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000cb6:	f102 0218 	add.w	r2, r2, #24
 8000cba:	f842 3c10 	str.w	r3, [r2, #-16]
			 LogResponsePacket(&response);
 8000cbe:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cc2:	f103 0318 	add.w	r3, r3, #24
 8000cc6:	3b10      	subs	r3, #16
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fe55 	bl	8000978 <LogResponsePacket>
			 usb_tx_index = response.outputSize + 10;
 8000cce:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cd2:	f103 0318 	add.w	r3, r3, #24
 8000cd6:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000cda:	330a      	adds	r3, #10
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000ce2:	f102 0214 	add.w	r2, r2, #20
 8000ce6:	8013      	strh	r3, [r2, #0]
			 PacketBuilder_Build(&response, usb_tx_buffer, &usb_tx_index);
 8000ce8:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000cec:	f102 0214 	add.w	r2, r2, #20
 8000cf0:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8000cf4:	f101 0118 	add.w	r1, r1, #24
 8000cf8:	3904      	subs	r1, #4
 8000cfa:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cfe:	f103 0318 	add.w	r3, r3, #24
 8000d02:	3b10      	subs	r3, #16
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 fbaf 	bl	8001468 <PacketBuilder_Build>
			 LogTransmitBuffer(usb_tx_buffer, usb_tx_index);
 8000d0a:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000d0e:	f103 0314 	add.w	r3, r3, #20
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000d1a:	f103 0318 	add.w	r3, r3, #24
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff feb6 	bl	8000a94 <LogTransmitBuffer>
			 USB_Transmit(usb_tx_buffer, usb_tx_index);
 8000d28:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000d2c:	f103 0314 	add.w	r3, r3, #20
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000d38:	f103 0318 	add.w	r3, r3, #24
 8000d3c:	3b04      	subs	r3, #4
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f00f fc47 	bl	80105d4 <USB_Transmit>
 8000d46:	e008      	b.n	8000d5a <HSMManager_ProcessCommand+0x11e>
		 }
		 else
		 {
			 log_error("Parsing failed with status code: %d", status);
 8000d48:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000d4c:	f103 0317 	add.w	r3, r3, #23
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4619      	mov	r1, r3
 8000d54:	4808      	ldr	r0, [pc, #32]	@ (8000d78 <HSMManager_ProcessCommand+0x13c>)
 8000d56:	f000 fdc1 	bl	80018dc <log_error>
		 }
	 }
	 return 0;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f507 3790 	add.w	r7, r7, #73728	@ 0x12000
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20010eec 	.word	0x20010eec
 8000d6c:	20010ee8 	.word	0x20010ee8
 8000d70:	20000ee8 	.word	0x20000ee8
 8000d74:	08013d84 	.word	0x08013d84
 8000d78:	08013da0 	.word	0x08013da0

08000d7c <OperationDispatcher_Dispatch>:
#include "constants.h"
#include "types.h"
#include "Logger.h"

OperationStatus_t OperationDispatcher_Dispatch(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
    log_info("Dispatching Command.");
 8000d86:	4838      	ldr	r0, [pc, #224]	@ (8000e68 <OperationDispatcher_Dispatch+0xec>)
 8000d88:	f000 fd74 	bl	8001874 <log_info>

    switch (request->cmd)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	791b      	ldrb	r3, [r3, #4]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	2b0e      	cmp	r3, #14
 8000d94:	d85c      	bhi.n	8000e50 <OperationDispatcher_Dispatch+0xd4>
 8000d96:	a201      	add	r2, pc, #4	@ (adr r2, 8000d9c <OperationDispatcher_Dispatch+0x20>)
 8000d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9c:	08000dd9 	.word	0x08000dd9
 8000da0:	08000de9 	.word	0x08000de9
 8000da4:	08000df9 	.word	0x08000df9
 8000da8:	08000e0b 	.word	0x08000e0b
 8000dac:	08000e1d 	.word	0x08000e1d
 8000db0:	08000e2f 	.word	0x08000e2f
 8000db4:	08000e2f 	.word	0x08000e2f
 8000db8:	08000e2f 	.word	0x08000e2f
 8000dbc:	08000e51 	.word	0x08000e51
 8000dc0:	08000e51 	.word	0x08000e51
 8000dc4:	08000e51 	.word	0x08000e51
 8000dc8:	08000e51 	.word	0x08000e51
 8000dcc:	08000e51 	.word	0x08000e51
 8000dd0:	08000e51 	.word	0x08000e51
 8000dd4:	08000e41 	.word	0x08000e41
    {
        case CMD_ENCRYPT:
        	log_info("Calling Encryption Operation.");
 8000dd8:	4824      	ldr	r0, [pc, #144]	@ (8000e6c <OperationDispatcher_Dispatch+0xf0>)
 8000dda:	f000 fd4b 	bl	8001874 <log_info>
        	log_warn("Encryption Operation not supported");
 8000dde:	4824      	ldr	r0, [pc, #144]	@ (8000e70 <OperationDispatcher_Dispatch+0xf4>)
 8000de0:	f000 fd62 	bl	80018a8 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000de4:	230b      	movs	r3, #11
 8000de6:	e03a      	b.n	8000e5e <OperationDispatcher_Dispatch+0xe2>

        case CMD_DECRYPT:
        	log_info("Calling Decryption Operation.");
 8000de8:	4822      	ldr	r0, [pc, #136]	@ (8000e74 <OperationDispatcher_Dispatch+0xf8>)
 8000dea:	f000 fd43 	bl	8001874 <log_info>
        	log_warn("Decryption Operation not supported");
 8000dee:	4822      	ldr	r0, [pc, #136]	@ (8000e78 <OperationDispatcher_Dispatch+0xfc>)
 8000df0:	f000 fd5a 	bl	80018a8 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000df4:	230b      	movs	r3, #11
 8000df6:	e032      	b.n	8000e5e <OperationDispatcher_Dispatch+0xe2>

        case CMD_HASH:
        	log_info("Calling Hashing Operation.");
 8000df8:	4820      	ldr	r0, [pc, #128]	@ (8000e7c <OperationDispatcher_Dispatch+0x100>)
 8000dfa:	f000 fd3b 	bl	8001874 <log_info>
            return HashingHandler_Handle(request, response);
 8000dfe:	6839      	ldr	r1, [r7, #0]
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 f84b 	bl	8000e9c <HashingHandler_Handle>
 8000e06:	4603      	mov	r3, r0
 8000e08:	e029      	b.n	8000e5e <OperationDispatcher_Dispatch+0xe2>

        case CMD_RANDOM:
        	log_info("Calling RNG Operation.");
 8000e0a:	481d      	ldr	r0, [pc, #116]	@ (8000e80 <OperationDispatcher_Dispatch+0x104>)
 8000e0c:	f000 fd32 	bl	8001874 <log_info>
            return RandomHandler_Handle(request, response);
 8000e10:	6839      	ldr	r1, [r7, #0]
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 faca 	bl	80013ac <RandomHandler_Handle>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	e020      	b.n	8000e5e <OperationDispatcher_Dispatch+0xe2>

        case CMD_OTP:
            log_info("Calling OTP Operation.");
 8000e1c:	4819      	ldr	r0, [pc, #100]	@ (8000e84 <OperationDispatcher_Dispatch+0x108>)
 8000e1e:	f000 fd29 	bl	8001874 <log_info>
            return OTPHandler_Handle(request, response);
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 fa0b 	bl	8001240 <OTPHandler_Handle>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	e017      	b.n	8000e5e <OperationDispatcher_Dispatch+0xe2>

        case CMD_KEY_GEN:
        case CMD_KEY_STORE:
        case CMD_KEY_ERASE:
        	log_info("Calling Key Management.");
 8000e2e:	4816      	ldr	r0, [pc, #88]	@ (8000e88 <OperationDispatcher_Dispatch+0x10c>)
 8000e30:	f000 fd20 	bl	8001874 <log_info>
            return KeyHandler_Handle(request, response);
 8000e34:	6839      	ldr	r1, [r7, #0]
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 f98a 	bl	8001150 <KeyHandler_Handle>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	e00e      	b.n	8000e5e <OperationDispatcher_Dispatch+0xe2>

        case CMD_PING:
        	log_info("Calling Ping Operation.");
 8000e40:	4812      	ldr	r0, [pc, #72]	@ (8000e8c <OperationDispatcher_Dispatch+0x110>)
 8000e42:	f000 fd17 	bl	8001874 <log_info>
        	log_warn("Ping Operation not supported");
 8000e46:	4812      	ldr	r0, [pc, #72]	@ (8000e90 <OperationDispatcher_Dispatch+0x114>)
 8000e48:	f000 fd2e 	bl	80018a8 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000e4c:	230b      	movs	r3, #11
 8000e4e:	e006      	b.n	8000e5e <OperationDispatcher_Dispatch+0xe2>

        default:
            log_error("Invalid Command code received");
 8000e50:	4810      	ldr	r0, [pc, #64]	@ (8000e94 <OperationDispatcher_Dispatch+0x118>)
 8000e52:	f000 fd43 	bl	80018dc <log_error>
            log_error("Returning Failure Status code");
 8000e56:	4810      	ldr	r0, [pc, #64]	@ (8000e98 <OperationDispatcher_Dispatch+0x11c>)
 8000e58:	f000 fd40 	bl	80018dc <log_error>
            return OPERATION_INVALID_CMD;
 8000e5c:	2301      	movs	r3, #1
    }
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	08013dc4 	.word	0x08013dc4
 8000e6c:	08013ddc 	.word	0x08013ddc
 8000e70:	08013dfc 	.word	0x08013dfc
 8000e74:	08013e20 	.word	0x08013e20
 8000e78:	08013e40 	.word	0x08013e40
 8000e7c:	08013e64 	.word	0x08013e64
 8000e80:	08013e80 	.word	0x08013e80
 8000e84:	08013e98 	.word	0x08013e98
 8000e88:	08013eb0 	.word	0x08013eb0
 8000e8c:	08013ec8 	.word	0x08013ec8
 8000e90:	08013ee0 	.word	0x08013ee0
 8000e94:	08013f00 	.word	0x08013f00
 8000e98:	08013f20 	.word	0x08013f20

08000e9c <HashingHandler_Handle>:

extern HASH_HandleTypeDef hhash;
extern void Error_Handler(void);

OperationStatus_t HashingHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
	log_info("Handling Hashing operation.");
 8000ea6:	4849      	ldr	r0, [pc, #292]	@ (8000fcc <HashingHandler_Handle+0x130>)
 8000ea8:	f000 fce4 	bl	8001874 <log_info>
	// Check if either Request or Response Packet is NULL
    if (!request )
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HashingHandler_Handle+0x1a>
    {
        return OPERATION_INVALID_DATA;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e085      	b.n	8000fc2 <HashingHandler_Handle+0x126>
    }
    uint32_t AlgorithmSelected;
    // Declare status as Negative for Early Exit Pattern
    OperationStatus_t status = OPERATION_INVALID_OPTION;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	72fb      	strb	r3, [r7, #11]
    // Declare a static byte array of 64 elements
    static uint8_t digest[64] = {0};
    // Check the Request Packet's option member
    switch (request->option)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	795b      	ldrb	r3, [r3, #5]
 8000ebe:	3b21      	subs	r3, #33	@ 0x21
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d833      	bhi.n	8000f2c <HashingHandler_Handle+0x90>
 8000ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8000ecc <HashingHandler_Handle+0x30>)
 8000ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eca:	bf00      	nop
 8000ecc:	08000edd 	.word	0x08000edd
 8000ed0:	08000ef1 	.word	0x08000ef1
 8000ed4:	08000f05 	.word	0x08000f05
 8000ed8:	08000f19 	.word	0x08000f19
    {
    	// SHA224 Hashing Algorithm Selected.
        case OPTION_HASH_SHA224:
        	log_info("SHA224 Hashing Algorithm Selected.");
 8000edc:	483c      	ldr	r0, [pc, #240]	@ (8000fd0 <HashingHandler_Handle+0x134>)
 8000ede:	f000 fcc9 	bl	8001874 <log_info>
        	response->outputSize = 28;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	221c      	movs	r2, #28
 8000ee6:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA224;
 8000ee8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000eec:	60fb      	str	r3, [r7, #12]
            break;
 8000eee:	e01f      	b.n	8000f30 <HashingHandler_Handle+0x94>

        // SHA256 Hashing Algorithm Selected.
        case OPTION_HASH_SHA256:
        	log_info("SHA256 Hashing Algorithm Selected.");
 8000ef0:	4838      	ldr	r0, [pc, #224]	@ (8000fd4 <HashingHandler_Handle+0x138>)
 8000ef2:	f000 fcbf 	bl	8001874 <log_info>
        	response->outputSize = 32;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	2220      	movs	r2, #32
 8000efa:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA256;
 8000efc:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
 8000f00:	60fb      	str	r3, [r7, #12]
            break;
 8000f02:	e015      	b.n	8000f30 <HashingHandler_Handle+0x94>

        // SHA384 Hashing Algorithm Selected.
        case OPTION_HASH_SHA384:
        	log_info("SHA384 Hashing Algorithm Selected.");
 8000f04:	4834      	ldr	r0, [pc, #208]	@ (8000fd8 <HashingHandler_Handle+0x13c>)
 8000f06:	f000 fcb5 	bl	8001874 <log_info>
        	response->outputSize = 48;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2230      	movs	r2, #48	@ 0x30
 8000f0e:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA384;
 8000f10:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000f14:	60fb      	str	r3, [r7, #12]
            break;
 8000f16:	e00b      	b.n	8000f30 <HashingHandler_Handle+0x94>

        // SHA512 Hashing Algorithm Selected.
        case OPTION_HASH_SHA512:
        	log_info("SHA512 Hashing Algorithm Selected.");
 8000f18:	4830      	ldr	r0, [pc, #192]	@ (8000fdc <HashingHandler_Handle+0x140>)
 8000f1a:	f000 fcab 	bl	8001874 <log_info>
        	response->outputSize = 64;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	2240      	movs	r2, #64	@ 0x40
 8000f22:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA512;
 8000f24:	f44f 13f0 	mov.w	r3, #1966080	@ 0x1e0000
 8000f28:	60fb      	str	r3, [r7, #12]
            break;
 8000f2a:	e001      	b.n	8000f30 <HashingHandler_Handle+0x94>

        // Default switch case
        default:
            return OPERATION_INVALID_OPTION;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e048      	b.n	8000fc2 <HashingHandler_Handle+0x126>
    }

    status = OPERATION_SUCCESS;
 8000f30:	2300      	movs	r3, #0
 8000f32:	72fb      	strb	r3, [r7, #11]
    HAL_HASH_DeInit(&hhash);
 8000f34:	482a      	ldr	r0, [pc, #168]	@ (8000fe0 <HashingHandler_Handle+0x144>)
 8000f36:	f002 fd63 	bl	8003a00 <HAL_HASH_DeInit>

    log_info("De-Initialized HASH Peripheral.");
 8000f3a:	482a      	ldr	r0, [pc, #168]	@ (8000fe4 <HashingHandler_Handle+0x148>)
 8000f3c:	f000 fc9a 	bl	8001874 <log_info>

    hhash.Instance = HASH;
 8000f40:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <HashingHandler_Handle+0x144>)
 8000f42:	4a29      	ldr	r2, [pc, #164]	@ (8000fe8 <HashingHandler_Handle+0x14c>)
 8000f44:	601a      	str	r2, [r3, #0]
    hhash.Init.DataType = HASH_BYTE_SWAP;
 8000f46:	4b26      	ldr	r3, [pc, #152]	@ (8000fe0 <HashingHandler_Handle+0x144>)
 8000f48:	2220      	movs	r2, #32
 8000f4a:	605a      	str	r2, [r3, #4]
    hhash.Init.Algorithm = AlgorithmSelected;
 8000f4c:	4a24      	ldr	r2, [pc, #144]	@ (8000fe0 <HashingHandler_Handle+0x144>)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6113      	str	r3, [r2, #16]
    if (HAL_HASH_Init(&hhash) != HAL_OK)
 8000f52:	4823      	ldr	r0, [pc, #140]	@ (8000fe0 <HashingHandler_Handle+0x144>)
 8000f54:	f002 fd1c 	bl	8003990 <HAL_HASH_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HashingHandler_Handle+0xc6>
    {
    	status = OPERATION_FAILURE;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	72fb      	strb	r3, [r7, #11]
    }

    log_info("Re-initialized HASH Peripheral.");
 8000f62:	4822      	ldr	r0, [pc, #136]	@ (8000fec <HashingHandler_Handle+0x150>)
 8000f64:	f000 fc86 	bl	8001874 <log_info>

    if (HAL_HASH_Start_IT(&hhash, (uint8_t*)request->inputData, (uint32_t)request->inputSize, digest) != HAL_OK)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f103 0108 	add.w	r1, r3, #8
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	88db      	ldrh	r3, [r3, #6]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <HashingHandler_Handle+0x154>)
 8000f76:	481a      	ldr	r0, [pc, #104]	@ (8000fe0 <HashingHandler_Handle+0x144>)
 8000f78:	f002 fd65 	bl	8003a46 <HAL_HASH_Start_IT>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HashingHandler_Handle+0xea>
    {
      Error_Handler();
 8000f82:	f001 f8d7 	bl	8002134 <Error_Handler>
    }
    while (HAL_HASH_GetState(&hhash) != HAL_HASH_STATE_READY);
 8000f86:	bf00      	nop
 8000f88:	4815      	ldr	r0, [pc, #84]	@ (8000fe0 <HashingHandler_Handle+0x144>)
 8000f8a:	f002 fe74 	bl	8003c76 <HAL_HASH_GetState>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d1f9      	bne.n	8000f88 <HashingHandler_Handle+0xec>

    log_info("Generated Hash Digest successfully.");
 8000f94:	4817      	ldr	r0, [pc, #92]	@ (8000ff4 <HashingHandler_Handle+0x158>)
 8000f96:	f000 fc6d 	bl	8001874 <log_info>
    // Check if operation status is Success
    if (status != OPERATION_SUCCESS)
 8000f9a:	7afb      	ldrb	r3, [r7, #11]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HashingHandler_Handle+0x108>
    {
        return status;
 8000fa0:	7afb      	ldrb	r3, [r7, #11]
 8000fa2:	e00e      	b.n	8000fc2 <HashingHandler_Handle+0x126>
    }
    log_info("Copying Hash Digest into Response Packet.");
 8000fa4:	4814      	ldr	r0, [pc, #80]	@ (8000ff8 <HashingHandler_Handle+0x15c>)
 8000fa6:	f000 fc65 	bl	8001874 <log_info>
    // Copy digest value to Response Packet structure
    memcpy(response->outputData, digest, response->outputSize);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	1d98      	adds	r0, r3, #6
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	889b      	ldrh	r3, [r3, #4]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	490e      	ldr	r1, [pc, #56]	@ (8000ff0 <HashingHandler_Handle+0x154>)
 8000fb6:	f011 fcc6 	bl	8012946 <memcpy>
    log_info("Hash operation complete.");
 8000fba:	4810      	ldr	r0, [pc, #64]	@ (8000ffc <HashingHandler_Handle+0x160>)
 8000fbc:	f000 fc5a 	bl	8001874 <log_info>
    // Return Success
    return OPERATION_SUCCESS;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	08013f40 	.word	0x08013f40
 8000fd0:	08013f5c 	.word	0x08013f5c
 8000fd4:	08013f80 	.word	0x08013f80
 8000fd8:	08013fa4 	.word	0x08013fa4
 8000fdc:	08013fc8 	.word	0x08013fc8
 8000fe0:	200001ec 	.word	0x200001ec
 8000fe4:	08013fec 	.word	0x08013fec
 8000fe8:	420c0400 	.word	0x420c0400
 8000fec:	0801400c 	.word	0x0801400c
 8000ff0:	2000019c 	.word	0x2000019c
 8000ff4:	0801402c 	.word	0x0801402c
 8000ff8:	08014050 	.word	0x08014050
 8000ffc:	0801407c 	.word	0x0801407c

08001000 <CalculateKeySize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

static uint16_t CalculateKeySize(uint8_t option_member)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	3b33      	subs	r3, #51	@ 0x33
 800100e:	2b09      	cmp	r3, #9
 8001010:	d837      	bhi.n	8001082 <CalculateKeySize+0x82>
 8001012:	a201      	add	r2, pc, #4	@ (adr r2, 8001018 <CalculateKeySize+0x18>)
 8001014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001018:	08001041 	.word	0x08001041
 800101c:	08001047 	.word	0x08001047
 8001020:	0800104d 	.word	0x0800104d
 8001024:	08001053 	.word	0x08001053
 8001028:	08001059 	.word	0x08001059
 800102c:	0800105f 	.word	0x0800105f
 8001030:	08001065 	.word	0x08001065
 8001034:	0800106b 	.word	0x0800106b
 8001038:	08001073 	.word	0x08001073
 800103c:	0800107b 	.word	0x0800107b
	{
		case OPTION_RNG_0016: byteSize = 16; 	break;
 8001040:	2310      	movs	r3, #16
 8001042:	81fb      	strh	r3, [r7, #14]
 8001044:	e01e      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0024: byteSize = 24; 	break;
 8001046:	2318      	movs	r3, #24
 8001048:	81fb      	strh	r3, [r7, #14]
 800104a:	e01b      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0032: byteSize = 32; 	break;
 800104c:	2320      	movs	r3, #32
 800104e:	81fb      	strh	r3, [r7, #14]
 8001050:	e018      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0048: byteSize = 48; 	break;
 8001052:	2330      	movs	r3, #48	@ 0x30
 8001054:	81fb      	strh	r3, [r7, #14]
 8001056:	e015      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0064: byteSize = 64; 	break;
 8001058:	2340      	movs	r3, #64	@ 0x40
 800105a:	81fb      	strh	r3, [r7, #14]
 800105c:	e012      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0066: byteSize = 66; 	break;
 800105e:	2342      	movs	r3, #66	@ 0x42
 8001060:	81fb      	strh	r3, [r7, #14]
 8001062:	e00f      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0128: byteSize = 128; 	break;
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	81fb      	strh	r3, [r7, #14]
 8001068:	e00c      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0256: byteSize = 256; 	break;
 800106a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800106e:	81fb      	strh	r3, [r7, #14]
 8001070:	e008      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0384: byteSize = 384; 	break;
 8001072:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001076:	81fb      	strh	r3, [r7, #14]
 8001078:	e004      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0512: byteSize = 512; 	break;
 800107a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800107e:	81fb      	strh	r3, [r7, #14]
 8001080:	e000      	b.n	8001084 <CalculateKeySize+0x84>
		default: break;
 8001082:	bf00      	nop
	}
	return byteSize;
 8001084:	89fb      	ldrh	r3, [r7, #14]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <KeyHandler_Generate>:

static OperationStatus_t KeyHandler_Generate(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
    log_info("Handling Key Generation operation.");
 800109e:	4826      	ldr	r0, [pc, #152]	@ (8001138 <KeyHandler_Generate+0xa4>)
 80010a0:	f000 fbe8 	bl	8001874 <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	795b      	ldrb	r3, [r3, #5]
 80010a8:	75bb      	strb	r3, [r7, #22]
    // Set the requested Pad size
    uint16_t numBytes = CalculateKeySize(option_val);
 80010aa:	7dbb      	ldrb	r3, [r7, #22]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffa7 	bl	8001000 <CalculateKeySize>
 80010b2:	4603      	mov	r3, r0
 80010b4:	82bb      	strh	r3, [r7, #20]
    log_info("Generating %d bytes of One-Time Pad", numBytes);
 80010b6:	8abb      	ldrh	r3, [r7, #20]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4820      	ldr	r0, [pc, #128]	@ (800113c <KeyHandler_Generate+0xa8>)
 80010bc:	f000 fbda 	bl	8001874 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 80010c0:	8abb      	ldrh	r3, [r7, #20]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <KeyHandler_Generate+0x3a>
 80010c6:	8abb      	ldrh	r3, [r7, #20]
 80010c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010cc:	d904      	bls.n	80010d8 <KeyHandler_Generate+0x44>
    {
        log_error("Requested Pad count is too big.");
 80010ce:	481c      	ldr	r0, [pc, #112]	@ (8001140 <KeyHandler_Generate+0xac>)
 80010d0:	f000 fc04 	bl	80018dc <log_error>
        return OPERATION_INVALID_OPTION;
 80010d4:	2302      	movs	r3, #2
 80010d6:	e02a      	b.n	800112e <KeyHandler_Generate+0x9a>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 80010d8:	2300      	movs	r3, #0
 80010da:	75fb      	strb	r3, [r7, #23]
 80010dc:	e019      	b.n	8001112 <KeyHandler_Generate+0x7e>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4619      	mov	r1, r3
 80010e4:	4817      	ldr	r0, [pc, #92]	@ (8001144 <KeyHandler_Generate+0xb0>)
 80010e6:	f00b fa91 	bl	800c60c <HAL_RNG_GenerateRandomNumber>
 80010ea:	4603      	mov	r3, r0
 80010ec:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 80010ee:	7cfb      	ldrb	r3, [r7, #19]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d004      	beq.n	80010fe <KeyHandler_Generate+0x6a>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 80010f4:	4814      	ldr	r0, [pc, #80]	@ (8001148 <KeyHandler_Generate+0xb4>)
 80010f6:	f000 fbf1 	bl	80018dc <log_error>
		    return OPERATION_RANDOM_GEN_FAIL;
 80010fa:	2306      	movs	r3, #6
 80010fc:	e017      	b.n	800112e <KeyHandler_Generate+0x9a>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	b2d1      	uxtb	r1, r2
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	460a      	mov	r2, r1
 800110a:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	3301      	adds	r3, #1
 8001110:	75fb      	strb	r3, [r7, #23]
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	b29a      	uxth	r2, r3
 8001116:	8abb      	ldrh	r3, [r7, #20]
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	b29b      	uxth	r3, r3
 800111c:	429a      	cmp	r2, r3
 800111e:	d3de      	bcc.n	80010de <KeyHandler_Generate+0x4a>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	8aba      	ldrh	r2, [r7, #20]
 8001124:	809a      	strh	r2, [r3, #4]
    log_info("One-Time Pad Generation Operation complete.");
 8001126:	4809      	ldr	r0, [pc, #36]	@ (800114c <KeyHandler_Generate+0xb8>)
 8001128:	f000 fba4 	bl	8001874 <log_info>
    return OPERATION_SUCCESS;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	08014098 	.word	0x08014098
 800113c:	080140bc 	.word	0x080140bc
 8001140:	080140e0 	.word	0x080140e0
 8001144:	20000280 	.word	0x20000280
 8001148:	08014100 	.word	0x08014100
 800114c:	08014138 	.word	0x08014138

08001150 <KeyHandler_Handle>:

OperationStatus_t KeyHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
	switch(request->cmd)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	791b      	ldrb	r3, [r3, #4]
 800115e:	2b08      	cmp	r3, #8
 8001160:	d017      	beq.n	8001192 <KeyHandler_Handle+0x42>
 8001162:	2b08      	cmp	r3, #8
 8001164:	dc1d      	bgt.n	80011a2 <KeyHandler_Handle+0x52>
 8001166:	2b06      	cmp	r3, #6
 8001168:	d002      	beq.n	8001170 <KeyHandler_Handle+0x20>
 800116a:	2b07      	cmp	r3, #7
 800116c:	d009      	beq.n	8001182 <KeyHandler_Handle+0x32>
			log_info("Calling Key Store operation.");
			log_warn("Key Store operation not supported now.");
			return OPERATION_UNKNOWN_ERROR;

		default:
			break;
 800116e:	e018      	b.n	80011a2 <KeyHandler_Handle+0x52>
			log_info("Handling Key Generation operation.");
 8001170:	480f      	ldr	r0, [pc, #60]	@ (80011b0 <KeyHandler_Handle+0x60>)
 8001172:	f000 fb7f 	bl	8001874 <log_info>
			return KeyHandler_Generate(request, response);
 8001176:	6839      	ldr	r1, [r7, #0]
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff8b 	bl	8001094 <KeyHandler_Generate>
 800117e:	4603      	mov	r3, r0
 8001180:	e011      	b.n	80011a6 <KeyHandler_Handle+0x56>
			log_info("Calling Key Store operation.");
 8001182:	480c      	ldr	r0, [pc, #48]	@ (80011b4 <KeyHandler_Handle+0x64>)
 8001184:	f000 fb76 	bl	8001874 <log_info>
			log_warn("Key Store operation not supported now.");
 8001188:	480b      	ldr	r0, [pc, #44]	@ (80011b8 <KeyHandler_Handle+0x68>)
 800118a:	f000 fb8d 	bl	80018a8 <log_warn>
			return OPERATION_UNKNOWN_ERROR;
 800118e:	230b      	movs	r3, #11
 8001190:	e009      	b.n	80011a6 <KeyHandler_Handle+0x56>
			log_info("Calling Key Store operation.");
 8001192:	4808      	ldr	r0, [pc, #32]	@ (80011b4 <KeyHandler_Handle+0x64>)
 8001194:	f000 fb6e 	bl	8001874 <log_info>
			log_warn("Key Store operation not supported now.");
 8001198:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <KeyHandler_Handle+0x68>)
 800119a:	f000 fb85 	bl	80018a8 <log_warn>
			return OPERATION_UNKNOWN_ERROR;
 800119e:	230b      	movs	r3, #11
 80011a0:	e001      	b.n	80011a6 <KeyHandler_Handle+0x56>
			break;
 80011a2:	bf00      	nop
	}

	return 0;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	08014098 	.word	0x08014098
 80011b4:	08014164 	.word	0x08014164
 80011b8:	08014184 	.word	0x08014184

080011bc <CalculatePadSize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

uint16_t CalculatePadSize(uint8_t option_member)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	3b33      	subs	r3, #51	@ 0x33
 80011ca:	2b0a      	cmp	r3, #10
 80011cc:	d830      	bhi.n	8001230 <CalculatePadSize+0x74>
 80011ce:	a201      	add	r2, pc, #4	@ (adr r2, 80011d4 <CalculatePadSize+0x18>)
 80011d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d4:	08001201 	.word	0x08001201
 80011d8:	08001231 	.word	0x08001231
 80011dc:	08001207 	.word	0x08001207
 80011e0:	08001231 	.word	0x08001231
 80011e4:	0800120d 	.word	0x0800120d
 80011e8:	08001231 	.word	0x08001231
 80011ec:	08001213 	.word	0x08001213
 80011f0:	08001219 	.word	0x08001219
 80011f4:	08001231 	.word	0x08001231
 80011f8:	08001221 	.word	0x08001221
 80011fc:	08001229 	.word	0x08001229
	{
		case OPTION_RNG_0016: byteSize = 16; 	break;
 8001200:	2310      	movs	r3, #16
 8001202:	81fb      	strh	r3, [r7, #14]
 8001204:	e015      	b.n	8001232 <CalculatePadSize+0x76>
		case OPTION_RNG_0032: byteSize = 32; 	break;
 8001206:	2320      	movs	r3, #32
 8001208:	81fb      	strh	r3, [r7, #14]
 800120a:	e012      	b.n	8001232 <CalculatePadSize+0x76>
		case OPTION_RNG_0064: byteSize = 64; 	break;
 800120c:	2340      	movs	r3, #64	@ 0x40
 800120e:	81fb      	strh	r3, [r7, #14]
 8001210:	e00f      	b.n	8001232 <CalculatePadSize+0x76>
		case OPTION_RNG_0128: byteSize = 128; 	break;
 8001212:	2380      	movs	r3, #128	@ 0x80
 8001214:	81fb      	strh	r3, [r7, #14]
 8001216:	e00c      	b.n	8001232 <CalculatePadSize+0x76>
		case OPTION_RNG_0256: byteSize = 256; 	break;
 8001218:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800121c:	81fb      	strh	r3, [r7, #14]
 800121e:	e008      	b.n	8001232 <CalculatePadSize+0x76>
		case OPTION_RNG_0512: byteSize = 512; 	break;
 8001220:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001224:	81fb      	strh	r3, [r7, #14]
 8001226:	e004      	b.n	8001232 <CalculatePadSize+0x76>
		case OPTION_RNG_1024: byteSize = 1024; 	break;
 8001228:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800122c:	81fb      	strh	r3, [r7, #14]
 800122e:	e000      	b.n	8001232 <CalculatePadSize+0x76>
		default: break;
 8001230:	bf00      	nop
	}
	return byteSize;
 8001232:	89fb      	ldrh	r3, [r7, #14]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <OTPHandler_Handle>:

OperationStatus_t OTPHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
    log_info("Handling One-Time Pad Generation operation.");
 800124a:	4826      	ldr	r0, [pc, #152]	@ (80012e4 <OTPHandler_Handle+0xa4>)
 800124c:	f000 fb12 	bl	8001874 <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	795b      	ldrb	r3, [r3, #5]
 8001254:	75bb      	strb	r3, [r7, #22]
    // Set the requested Pad size
    uint16_t numBytes = CalculatePadSize(option_val);
 8001256:	7dbb      	ldrb	r3, [r7, #22]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ffaf 	bl	80011bc <CalculatePadSize>
 800125e:	4603      	mov	r3, r0
 8001260:	82bb      	strh	r3, [r7, #20]
    log_info("Generating %d bytes of One-Time Pad", numBytes);
 8001262:	8abb      	ldrh	r3, [r7, #20]
 8001264:	4619      	mov	r1, r3
 8001266:	4820      	ldr	r0, [pc, #128]	@ (80012e8 <OTPHandler_Handle+0xa8>)
 8001268:	f000 fb04 	bl	8001874 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 800126c:	8abb      	ldrh	r3, [r7, #20]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <OTPHandler_Handle+0x3a>
 8001272:	8abb      	ldrh	r3, [r7, #20]
 8001274:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001278:	d904      	bls.n	8001284 <OTPHandler_Handle+0x44>
    {
        log_error("Requested Pad count is too big.");
 800127a:	481c      	ldr	r0, [pc, #112]	@ (80012ec <OTPHandler_Handle+0xac>)
 800127c:	f000 fb2e 	bl	80018dc <log_error>
        return OPERATION_INVALID_OPTION;
 8001280:	2302      	movs	r3, #2
 8001282:	e02a      	b.n	80012da <OTPHandler_Handle+0x9a>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001284:	2300      	movs	r3, #0
 8001286:	75fb      	strb	r3, [r7, #23]
 8001288:	e019      	b.n	80012be <OTPHandler_Handle+0x7e>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	4619      	mov	r1, r3
 8001290:	4817      	ldr	r0, [pc, #92]	@ (80012f0 <OTPHandler_Handle+0xb0>)
 8001292:	f00b f9bb 	bl	800c60c <HAL_RNG_GenerateRandomNumber>
 8001296:	4603      	mov	r3, r0
 8001298:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 800129a:	7cfb      	ldrb	r3, [r7, #19]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d004      	beq.n	80012aa <OTPHandler_Handle+0x6a>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 80012a0:	4814      	ldr	r0, [pc, #80]	@ (80012f4 <OTPHandler_Handle+0xb4>)
 80012a2:	f000 fb1b 	bl	80018dc <log_error>
		    return OPERATION_RANDOM_GEN_FAIL;
 80012a6:	2306      	movs	r3, #6
 80012a8:	e017      	b.n	80012da <OTPHandler_Handle+0x9a>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	b2d1      	uxtb	r1, r2
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	460a      	mov	r2, r1
 80012b6:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	3301      	adds	r3, #1
 80012bc:	75fb      	strb	r3, [r7, #23]
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	8abb      	ldrh	r3, [r7, #20]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3de      	bcc.n	800128a <OTPHandler_Handle+0x4a>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	8aba      	ldrh	r2, [r7, #20]
 80012d0:	809a      	strh	r2, [r3, #4]
    log_info("One-Time Pad Generation Operation complete.");
 80012d2:	4809      	ldr	r0, [pc, #36]	@ (80012f8 <OTPHandler_Handle+0xb8>)
 80012d4:	f000 face 	bl	8001874 <log_info>
    return OPERATION_SUCCESS;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	080141ac 	.word	0x080141ac
 80012e8:	080141d8 	.word	0x080141d8
 80012ec:	080141fc 	.word	0x080141fc
 80012f0:	20000280 	.word	0x20000280
 80012f4:	0801421c 	.word	0x0801421c
 80012f8:	08014254 	.word	0x08014254

080012fc <CalculateByteSize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

uint16_t CalculateByteSize(uint8_t option_member)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	3b31      	subs	r3, #49	@ 0x31
 800130a:	2b0e      	cmp	r3, #14
 800130c:	d846      	bhi.n	800139c <CalculateByteSize+0xa0>
 800130e:	a201      	add	r2, pc, #4	@ (adr r2, 8001314 <CalculateByteSize+0x18>)
 8001310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001314:	08001351 	.word	0x08001351
 8001318:	08001357 	.word	0x08001357
 800131c:	0800135d 	.word	0x0800135d
 8001320:	0800139d 	.word	0x0800139d
 8001324:	08001363 	.word	0x08001363
 8001328:	0800139d 	.word	0x0800139d
 800132c:	08001369 	.word	0x08001369
 8001330:	0800139d 	.word	0x0800139d
 8001334:	0800136f 	.word	0x0800136f
 8001338:	08001375 	.word	0x08001375
 800133c:	0800139d 	.word	0x0800139d
 8001340:	0800137d 	.word	0x0800137d
 8001344:	08001385 	.word	0x08001385
 8001348:	0800138d 	.word	0x0800138d
 800134c:	08001395 	.word	0x08001395
	{
		case OPTION_RNG_0004: byteSize = 4; break;
 8001350:	2304      	movs	r3, #4
 8001352:	81fb      	strh	r3, [r7, #14]
 8001354:	e023      	b.n	800139e <CalculateByteSize+0xa2>
		case OPTION_RNG_0008: byteSize = 8; break;
 8001356:	2308      	movs	r3, #8
 8001358:	81fb      	strh	r3, [r7, #14]
 800135a:	e020      	b.n	800139e <CalculateByteSize+0xa2>
		case OPTION_RNG_0016: byteSize = 16; break;
 800135c:	2310      	movs	r3, #16
 800135e:	81fb      	strh	r3, [r7, #14]
 8001360:	e01d      	b.n	800139e <CalculateByteSize+0xa2>
		case OPTION_RNG_0032: byteSize = 32; break;
 8001362:	2320      	movs	r3, #32
 8001364:	81fb      	strh	r3, [r7, #14]
 8001366:	e01a      	b.n	800139e <CalculateByteSize+0xa2>
		case OPTION_RNG_0064: byteSize = 64; break;
 8001368:	2340      	movs	r3, #64	@ 0x40
 800136a:	81fb      	strh	r3, [r7, #14]
 800136c:	e017      	b.n	800139e <CalculateByteSize+0xa2>
		case OPTION_RNG_0128: byteSize = 128; break;
 800136e:	2380      	movs	r3, #128	@ 0x80
 8001370:	81fb      	strh	r3, [r7, #14]
 8001372:	e014      	b.n	800139e <CalculateByteSize+0xa2>
		case OPTION_RNG_0256: byteSize = 256; break;
 8001374:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001378:	81fb      	strh	r3, [r7, #14]
 800137a:	e010      	b.n	800139e <CalculateByteSize+0xa2>
		case OPTION_RNG_0512: byteSize = 512; break;
 800137c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001380:	81fb      	strh	r3, [r7, #14]
 8001382:	e00c      	b.n	800139e <CalculateByteSize+0xa2>
		case OPTION_RNG_1024: byteSize = 1024; break;
 8001384:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001388:	81fb      	strh	r3, [r7, #14]
 800138a:	e008      	b.n	800139e <CalculateByteSize+0xa2>
		case OPTION_RNG_2048: byteSize = 2048; break;
 800138c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001390:	81fb      	strh	r3, [r7, #14]
 8001392:	e004      	b.n	800139e <CalculateByteSize+0xa2>
		case OPTION_RNG_4096: byteSize = 4096; break;
 8001394:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001398:	81fb      	strh	r3, [r7, #14]
 800139a:	e000      	b.n	800139e <CalculateByteSize+0xa2>
		default: break;
 800139c:	bf00      	nop
	}
	return byteSize;
 800139e:	89fb      	ldrh	r3, [r7, #14]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <RandomHandler_Handle>:

OperationStatus_t RandomHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
    log_info("Handling Random Number Generation operation.");
 80013b6:	4826      	ldr	r0, [pc, #152]	@ (8001450 <RandomHandler_Handle+0xa4>)
 80013b8:	f000 fa5c 	bl	8001874 <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	795b      	ldrb	r3, [r3, #5]
 80013c0:	75bb      	strb	r3, [r7, #22]
    // Set the requested Random Number size
    uint16_t numBytes = CalculateByteSize(option_val);
 80013c2:	7dbb      	ldrb	r3, [r7, #22]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff99 	bl	80012fc <CalculateByteSize>
 80013ca:	4603      	mov	r3, r0
 80013cc:	82bb      	strh	r3, [r7, #20]
    log_info("Generating %d bytes of Random Number", numBytes);
 80013ce:	8abb      	ldrh	r3, [r7, #20]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4820      	ldr	r0, [pc, #128]	@ (8001454 <RandomHandler_Handle+0xa8>)
 80013d4:	f000 fa4e 	bl	8001874 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 80013d8:	8abb      	ldrh	r3, [r7, #20]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <RandomHandler_Handle+0x3a>
 80013de:	8abb      	ldrh	r3, [r7, #20]
 80013e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013e4:	d904      	bls.n	80013f0 <RandomHandler_Handle+0x44>
    {
        log_error("Requested random byte count is invalid.");
 80013e6:	481c      	ldr	r0, [pc, #112]	@ (8001458 <RandomHandler_Handle+0xac>)
 80013e8:	f000 fa78 	bl	80018dc <log_error>
        return OPERATION_INVALID_OPTION;
 80013ec:	2302      	movs	r3, #2
 80013ee:	e02a      	b.n	8001446 <RandomHandler_Handle+0x9a>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 80013f0:	2300      	movs	r3, #0
 80013f2:	75fb      	strb	r3, [r7, #23]
 80013f4:	e019      	b.n	800142a <RandomHandler_Handle+0x7e>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	4619      	mov	r1, r3
 80013fc:	4817      	ldr	r0, [pc, #92]	@ (800145c <RandomHandler_Handle+0xb0>)
 80013fe:	f00b f905 	bl	800c60c <HAL_RNG_GenerateRandomNumber>
 8001402:	4603      	mov	r3, r0
 8001404:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 8001406:	7cfb      	ldrb	r3, [r7, #19]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <RandomHandler_Handle+0x6a>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 800140c:	4814      	ldr	r0, [pc, #80]	@ (8001460 <RandomHandler_Handle+0xb4>)
 800140e:	f000 fa65 	bl	80018dc <log_error>
		    return OPERATION_RANDOM_GEN_FAIL;
 8001412:	2306      	movs	r3, #6
 8001414:	e017      	b.n	8001446 <RandomHandler_Handle+0x9a>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	7dfb      	ldrb	r3, [r7, #23]
 800141a:	b2d1      	uxtb	r1, r2
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	4413      	add	r3, r2
 8001420:	460a      	mov	r2, r1
 8001422:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001424:	7dfb      	ldrb	r3, [r7, #23]
 8001426:	3301      	adds	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	b29a      	uxth	r2, r3
 800142e:	8abb      	ldrh	r3, [r7, #20]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	b29b      	uxth	r3, r3
 8001434:	429a      	cmp	r2, r3
 8001436:	d3de      	bcc.n	80013f6 <RandomHandler_Handle+0x4a>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	8aba      	ldrh	r2, [r7, #20]
 800143c:	809a      	strh	r2, [r3, #4]
    log_info("RNG Operation complete.");
 800143e:	4809      	ldr	r0, [pc, #36]	@ (8001464 <RandomHandler_Handle+0xb8>)
 8001440:	f000 fa18 	bl	8001874 <log_info>
    return OPERATION_SUCCESS;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	08014280 	.word	0x08014280
 8001454:	080142b0 	.word	0x080142b0
 8001458:	080142d8 	.word	0x080142d8
 800145c:	20000280 	.word	0x20000280
 8001460:	08014300 	.word	0x08014300
 8001464:	08014338 	.word	0x08014338

08001468 <PacketBuilder_Build>:
#include "Logger.h"
#include <string.h>


BuildStatus_t PacketBuilder_Build(const ResponsePacket_t* responsePacket, uint8_t* outBuffer, uint16_t* outLength)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
	log_debug("Checking if Response Packet is NULL");
 8001474:	484e      	ldr	r0, [pc, #312]	@ (80015b0 <PacketBuilder_Build+0x148>)
 8001476:	f000 f9e3 	bl	8001840 <log_debug>
	// Check if Response, Output and Output Size are NULL
    if (!responsePacket || !outBuffer || !outLength)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <PacketBuilder_Build+0x24>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <PacketBuilder_Build+0x24>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <PacketBuilder_Build+0x28>
    {
    	return BUILD_NULL_POINTER;
 800148c:	2301      	movs	r3, #1
 800148e:	e08b      	b.n	80015a8 <PacketBuilder_Build+0x140>
    }
    log_debug("Checking if Output Size is under limits");
 8001490:	4848      	ldr	r0, [pc, #288]	@ (80015b4 <PacketBuilder_Build+0x14c>)
 8001492:	f000 f9d5 	bl	8001840 <log_debug>
    // Check if Output Size is under the specified limits
    if (responsePacket->outputSize > MAX_OUTPUT_DATA_SIZE)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	889b      	ldrh	r3, [r3, #4]
 800149a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800149e:	d901      	bls.n	80014a4 <PacketBuilder_Build+0x3c>
    {
    	return BUILD_OUTPUT_TOO_LARGE;
 80014a0:	2302      	movs	r3, #2
 80014a2:	e081      	b.n	80015a8 <PacketBuilder_Build+0x140>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Transaction ID to Out Buffer");
 80014a8:	4843      	ldr	r0, [pc, #268]	@ (80015b8 <PacketBuilder_Build+0x150>)
 80014aa:	f000 f9c9 	bl	8001840 <log_debug>
    // Fill Data Stream with the corresponding Transaction ID
    outBuffer[index++] = (responsePacket->transactionID >> 24) & 0xFF;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	0e1a      	lsrs	r2, r3, #24
 80014b4:	8afb      	ldrh	r3, [r7, #22]
 80014b6:	1c59      	adds	r1, r3, #1
 80014b8:	82f9      	strh	r1, [r7, #22]
 80014ba:	4619      	mov	r1, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	440b      	add	r3, r1
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 16) & 0xFF;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0c1a      	lsrs	r2, r3, #16
 80014ca:	8afb      	ldrh	r3, [r7, #22]
 80014cc:	1c59      	adds	r1, r3, #1
 80014ce:	82f9      	strh	r1, [r7, #22]
 80014d0:	4619      	mov	r1, r3
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	440b      	add	r3, r1
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 8)  & 0xFF;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	0a1a      	lsrs	r2, r3, #8
 80014e0:	8afb      	ldrh	r3, [r7, #22]
 80014e2:	1c59      	adds	r1, r3, #1
 80014e4:	82f9      	strh	r1, [r7, #22]
 80014e6:	4619      	mov	r1, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	440b      	add	r3, r1
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID)       & 0xFF;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	8afb      	ldrh	r3, [r7, #22]
 80014f6:	1c59      	adds	r1, r3, #1
 80014f8:	82f9      	strh	r1, [r7, #22]
 80014fa:	4619      	mov	r1, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	440b      	add	r3, r1
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	701a      	strb	r2, [r3, #0]
    log_debug("Adding Output Data Size to Out Buffer");
 8001504:	482d      	ldr	r0, [pc, #180]	@ (80015bc <PacketBuilder_Build+0x154>)
 8001506:	f000 f99b 	bl	8001840 <log_debug>
    // Fill Data Stream with the Output Data Size
    outBuffer[index++] = (responsePacket->outputSize >> 8) & 0xFF;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	889b      	ldrh	r3, [r3, #4]
 800150e:	0a1b      	lsrs	r3, r3, #8
 8001510:	b29a      	uxth	r2, r3
 8001512:	8afb      	ldrh	r3, [r7, #22]
 8001514:	1c59      	adds	r1, r3, #1
 8001516:	82f9      	strh	r1, [r7, #22]
 8001518:	4619      	mov	r1, r3
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	440b      	add	r3, r1
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->outputSize)      & 0xFF;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	889a      	ldrh	r2, [r3, #4]
 8001526:	8afb      	ldrh	r3, [r7, #22]
 8001528:	1c59      	adds	r1, r3, #1
 800152a:	82f9      	strh	r1, [r7, #22]
 800152c:	4619      	mov	r1, r3
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	440b      	add	r3, r1
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	701a      	strb	r2, [r3, #0]
    // Copy Output Data contents to Data Stream
    log_debug("Copying Output Data to Out Buffer");
 8001536:	4822      	ldr	r0, [pc, #136]	@ (80015c0 <PacketBuilder_Build+0x158>)
 8001538:	f000 f982 	bl	8001840 <log_debug>
    memcpy(&outBuffer[index], responsePacket->outputData, responsePacket->outputSize);
 800153c:	8afb      	ldrh	r3, [r7, #22]
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	18d0      	adds	r0, r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	1d99      	adds	r1, r3, #6
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	889b      	ldrh	r3, [r3, #4]
 800154a:	461a      	mov	r2, r3
 800154c:	f011 f9fb 	bl	8012946 <memcpy>
    // Set Index to point to EOD Flag
    index += responsePacket->outputSize;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	889a      	ldrh	r2, [r3, #4]
 8001554:	8afb      	ldrh	r3, [r7, #22]
 8001556:	4413      	add	r3, r2
 8001558:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Outward EOD Flag to Out Buffer");
 800155a:	481a      	ldr	r0, [pc, #104]	@ (80015c4 <PacketBuilder_Build+0x15c>)
 800155c:	f000 f970 	bl	8001840 <log_debug>
    // Add EOD Flag to Data Stream
    outBuffer[index++] = (OUT_EOD_FLAG >> 24) & 0xFF;
 8001560:	8afb      	ldrh	r3, [r7, #22]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	82fa      	strh	r2, [r7, #22]
 8001566:	461a      	mov	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4413      	add	r3, r2
 800156c:	22ca      	movs	r2, #202	@ 0xca
 800156e:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 16) & 0xFF;
 8001570:	8afb      	ldrh	r3, [r7, #22]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	82fa      	strh	r2, [r7, #22]
 8001576:	461a      	mov	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4413      	add	r3, r2
 800157c:	22fe      	movs	r2, #254	@ 0xfe
 800157e:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 8)  & 0xFF;
 8001580:	8afb      	ldrh	r3, [r7, #22]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	82fa      	strh	r2, [r7, #22]
 8001586:	461a      	mov	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	22ba      	movs	r2, #186	@ 0xba
 800158e:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG)       & 0xFF;
 8001590:	8afb      	ldrh	r3, [r7, #22]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	82fa      	strh	r2, [r7, #22]
 8001596:	461a      	mov	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4413      	add	r3, r2
 800159c:	22be      	movs	r2, #190	@ 0xbe
 800159e:	701a      	strb	r2, [r3, #0]
    // Set Index to point to End of Data Stream
    *outLength = index;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	8afa      	ldrh	r2, [r7, #22]
 80015a4:	801a      	strh	r2, [r3, #0]
    // Return to indicate successful Packet Build
    return BUILD_SUCCESS;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	08014350 	.word	0x08014350
 80015b4:	08014374 	.word	0x08014374
 80015b8:	0801439c 	.word	0x0801439c
 80015bc:	080143c0 	.word	0x080143c0
 80015c0:	080143e8 	.word	0x080143e8
 80015c4:	0801440c 	.word	0x0801440c

080015c8 <PacketParser_Parse>:
#include "constants.h"
#include "Logger.h"
#include <string.h>

ParseStatus_t PacketParser_Parse(const uint8_t* rawData, uint16_t rawLength, ParsedPacket_t* parsedPacket)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	460b      	mov	r3, r1
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	817b      	strh	r3, [r7, #10]
	log_debug("Checking if Data Stream or Packet Structure is NULL.");
 80015d6:	4860      	ldr	r0, [pc, #384]	@ (8001758 <PacketParser_Parse+0x190>)
 80015d8:	f000 f932 	bl	8001840 <log_debug>
	// Check if Data Stream or Packet structure is NULL
	if (!rawData || !parsedPacket)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <PacketParser_Parse+0x20>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d104      	bne.n	80015f2 <PacketParser_Parse+0x2a>
    {
		log_error("Data Stream or Packet Structure is NULL");
 80015e8:	485c      	ldr	r0, [pc, #368]	@ (800175c <PacketParser_Parse+0x194>)
 80015ea:	f000 f977 	bl	80018dc <log_error>
    	return PARSE_NULL_POINTER;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0ae      	b.n	8001750 <PacketParser_Parse+0x188>
    }
	log_debug("Checking if Data Stream contains less than 12 bytes.");
 80015f2:	485b      	ldr	r0, [pc, #364]	@ (8001760 <PacketParser_Parse+0x198>)
 80015f4:	f000 f924 	bl	8001840 <log_debug>
    // Check if Data Stream contains Data of valid length
    if (rawLength < 12)
 80015f8:	897b      	ldrh	r3, [r7, #10]
 80015fa:	2b0b      	cmp	r3, #11
 80015fc:	d804      	bhi.n	8001608 <PacketParser_Parse+0x40>
    {
    	log_error("Data stream contain less than 12 bytes");
 80015fe:	4859      	ldr	r0, [pc, #356]	@ (8001764 <PacketParser_Parse+0x19c>)
 8001600:	f000 f96c 	bl	80018dc <log_error>
    	return PARSE_INVALID_LENGTH;
 8001604:	2301      	movs	r3, #1
 8001606:	e0a3      	b.n	8001750 <PacketParser_Parse+0x188>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up Transaction ID.");
 800160c:	4856      	ldr	r0, [pc, #344]	@ (8001768 <PacketParser_Parse+0x1a0>)
 800160e:	f000 f917 	bl	8001840 <log_debug>
    // Retrieve Transaction ID from Data Stream
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8001612:	8afb      	ldrh	r3, [r7, #22]
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	061a      	lsls	r2, r3, #24
                                  (rawData[index + 1] << 16) |
 800161c:	8afb      	ldrh	r3, [r7, #22]
 800161e:	3301      	adds	r3, #1
 8001620:	68f9      	ldr	r1, [r7, #12]
 8001622:	440b      	add	r3, r1
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	041b      	lsls	r3, r3, #16
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8001628:	431a      	orrs	r2, r3
                                  (rawData[index + 2] << 8)  |
 800162a:	8afb      	ldrh	r3, [r7, #22]
 800162c:	3302      	adds	r3, #2
 800162e:	68f9      	ldr	r1, [r7, #12]
 8001630:	440b      	add	r3, r1
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	021b      	lsls	r3, r3, #8
                                  (rawData[index + 1] << 16) |
 8001636:	4313      	orrs	r3, r2
                                  (rawData[index + 3]);
 8001638:	8afa      	ldrh	r2, [r7, #22]
 800163a:	3203      	adds	r2, #3
 800163c:	68f9      	ldr	r1, [r7, #12]
 800163e:	440a      	add	r2, r1
 8001640:	7812      	ldrb	r2, [r2, #0]
                                  (rawData[index + 2] << 8)  |
 8001642:	4313      	orrs	r3, r2
 8001644:	461a      	mov	r2, r3
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	601a      	str	r2, [r3, #0]
    // Set Index to point CMD byte
    index += 4;
 800164a:	8afb      	ldrh	r3, [r7, #22]
 800164c:	3304      	adds	r3, #4
 800164e:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up CMD, OPTION and INPUT_SIZE fields.");
 8001650:	4846      	ldr	r0, [pc, #280]	@ (800176c <PacketParser_Parse+0x1a4>)
 8001652:	f000 f8f5 	bl	8001840 <log_debug>
    // Retrieve CMD byte from Data Stream
    parsedPacket->cmd = rawData[index++];
 8001656:	8afb      	ldrh	r3, [r7, #22]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	82fa      	strh	r2, [r7, #22]
 800165c:	461a      	mov	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4413      	add	r3, r2
 8001662:	781a      	ldrb	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	711a      	strb	r2, [r3, #4]
    // Retrieve OPTION byte from Data Stream
    parsedPacket->option = rawData[index++];
 8001668:	8afb      	ldrh	r3, [r7, #22]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	82fa      	strh	r2, [r7, #22]
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	781a      	ldrb	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	715a      	strb	r2, [r3, #5]
    // Retrieve INPUT_SIZE half-word from Data Stream
    parsedPacket->inputSize = (rawData[index] << 8) | rawData[index + 1];
 800167a:	8afb      	ldrh	r3, [r7, #22]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	b21a      	sxth	r2, r3
 8001686:	8afb      	ldrh	r3, [r7, #22]
 8001688:	3301      	adds	r3, #1
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	440b      	add	r3, r1
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b21b      	sxth	r3, r3
 8001692:	4313      	orrs	r3, r2
 8001694:	b21b      	sxth	r3, r3
 8001696:	b29a      	uxth	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	80da      	strh	r2, [r3, #6]
    // Set Index to point INPUT_DATA
    index += 2;
 800169c:	8afb      	ldrh	r3, [r7, #22]
 800169e:	3302      	adds	r3, #2
 80016a0:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking if INPUT_SIZE is within the limits.");
 80016a2:	4833      	ldr	r0, [pc, #204]	@ (8001770 <PacketParser_Parse+0x1a8>)
 80016a4:	f000 f8cc 	bl	8001840 <log_debug>
    // Check if INPUT_SIZE is under the prescribed limit
    if (parsedPacket->inputSize > MAX_INPUT_DATA_SIZE || ((index - 1) + parsedPacket->inputSize + 4) > rawLength)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	88db      	ldrh	r3, [r3, #6]
 80016ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016b0:	d808      	bhi.n	80016c4 <PacketParser_Parse+0xfc>
 80016b2:	8afb      	ldrh	r3, [r7, #22]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	88d2      	ldrh	r2, [r2, #6]
 80016ba:	4413      	add	r3, r2
 80016bc:	1cda      	adds	r2, r3, #3
 80016be:	897b      	ldrh	r3, [r7, #10]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	db04      	blt.n	80016ce <PacketParser_Parse+0x106>
    {
    	log_error("Input Data Size is too big.");
 80016c4:	482b      	ldr	r0, [pc, #172]	@ (8001774 <PacketParser_Parse+0x1ac>)
 80016c6:	f000 f909 	bl	80018dc <log_error>
        return PARSE_INPUT_TOO_LARGE;
 80016ca:	2304      	movs	r3, #4
 80016cc:	e040      	b.n	8001750 <PacketParser_Parse+0x188>
    }
    log_debug("Copying INPUT DATA to Packet Structure.");
 80016ce:	482a      	ldr	r0, [pc, #168]	@ (8001778 <PacketParser_Parse+0x1b0>)
 80016d0:	f000 f8b6 	bl	8001840 <log_debug>
    // Copy INPUT_DATA array from Data Stream to Packet structure
    memcpy(parsedPacket->inputData, &rawData[index], parsedPacket->inputSize);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f103 0008 	add.w	r0, r3, #8
 80016da:	8afb      	ldrh	r3, [r7, #22]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	18d1      	adds	r1, r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	88db      	ldrh	r3, [r3, #6]
 80016e4:	461a      	mov	r2, r3
 80016e6:	f011 f92e 	bl	8012946 <memcpy>
    // Set Index to point EOD Flag
    if(!(parsedPacket->inputSize))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	88db      	ldrh	r3, [r3, #6]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d102      	bne.n	80016f8 <PacketParser_Parse+0x130>
    {
    	index = 8;
 80016f2:	2308      	movs	r3, #8
 80016f4:	82fb      	strh	r3, [r7, #22]
 80016f6:	e004      	b.n	8001702 <PacketParser_Parse+0x13a>
    }
    else
    {
    	index += parsedPacket->inputSize;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	88da      	ldrh	r2, [r3, #6]
 80016fc:	8afb      	ldrh	r3, [r7, #22]
 80016fe:	4413      	add	r3, r2
 8001700:	82fb      	strh	r3, [r7, #22]
    }
    log_debug("Checking the Received EOD word.");
 8001702:	481e      	ldr	r0, [pc, #120]	@ (800177c <PacketParser_Parse+0x1b4>)
 8001704:	f000 f89c 	bl	8001840 <log_debug>
    // Retrieve EOD Flag from Data Stream
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 8001708:	8afb      	ldrh	r3, [r7, #22]
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4413      	add	r3, r2
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	061a      	lsls	r2, r3, #24
                           	   (rawData[index + 1] << 16) |
 8001712:	8afb      	ldrh	r3, [r7, #22]
 8001714:	3301      	adds	r3, #1
 8001716:	68f9      	ldr	r1, [r7, #12]
 8001718:	440b      	add	r3, r1
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	041b      	lsls	r3, r3, #16
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 800171e:	431a      	orrs	r2, r3
							   (rawData[index + 2] << 8)  |
 8001720:	8afb      	ldrh	r3, [r7, #22]
 8001722:	3302      	adds	r3, #2
 8001724:	68f9      	ldr	r1, [r7, #12]
 8001726:	440b      	add	r3, r1
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	021b      	lsls	r3, r3, #8
                           	   (rawData[index + 1] << 16) |
 800172c:	4313      	orrs	r3, r2
							   (rawData[index + 3]);
 800172e:	8afa      	ldrh	r2, [r7, #22]
 8001730:	3203      	adds	r2, #3
 8001732:	68f9      	ldr	r1, [r7, #12]
 8001734:	440a      	add	r2, r1
 8001736:	7812      	ldrb	r2, [r2, #0]
							   (rawData[index + 2] << 8)  |
 8001738:	4313      	orrs	r3, r2
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 800173a:	613b      	str	r3, [r7, #16]
    // Check if EOD Flag is valid
    if (received_IN_EOD != IN_EOD_FLAG)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4a10      	ldr	r2, [pc, #64]	@ (8001780 <PacketParser_Parse+0x1b8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d004      	beq.n	800174e <PacketParser_Parse+0x186>
    {
    	log_error("Received EOD Flag is Invalid");
 8001744:	480f      	ldr	r0, [pc, #60]	@ (8001784 <PacketParser_Parse+0x1bc>)
 8001746:	f000 f8c9 	bl	80018dc <log_error>
        return PARSE_EOD_MISMATCH;
 800174a:	2302      	movs	r3, #2
 800174c:	e000      	b.n	8001750 <PacketParser_Parse+0x188>
    }
    // Return to Indicate successful parsing
    return PARSE_SUCCESS;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	08014434 	.word	0x08014434
 800175c:	0801446c 	.word	0x0801446c
 8001760:	08014494 	.word	0x08014494
 8001764:	080144cc 	.word	0x080144cc
 8001768:	080144f4 	.word	0x080144f4
 800176c:	08014510 	.word	0x08014510
 8001770:	08014540 	.word	0x08014540
 8001774:	08014570 	.word	0x08014570
 8001778:	0801458c 	.word	0x0801458c
 800177c:	080145b4 	.word	0x080145b4
 8001780:	deadbeef 	.word	0xdeadbeef
 8001784:	080145d4 	.word	0x080145d4

08001788 <log_init>:
#define LOG_BUFFER_SIZE 256

static LogLevel current_level = LOG_LEVEL_INFO;

void log_init(LogLevel level)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
    current_level = level;
 8001792:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <log_init+0x1c>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	7013      	strb	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	20000000 	.word	0x20000000

080017a8 <log_generic>:

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b0c7      	sub	sp, #284	@ 0x11c
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	4604      	mov	r4, r0
 80017b0:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80017b4:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 80017b8:	6001      	str	r1, [r0, #0]
 80017ba:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80017be:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80017c2:	600a      	str	r2, [r1, #0]
 80017c4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017c8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017d2:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80017d6:	4622      	mov	r2, r4
 80017d8:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 80017da:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <log_generic+0x8c>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017e2:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d31e      	bcc.n	800182a <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80017ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017f0:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80017f4:	f107 0010 	add.w	r0, r7, #16
 80017f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001802:	f011 f817 	bl	8012834 <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800180e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001812:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001816:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800181a:	4807      	ldr	r0, [pc, #28]	@ (8001838 <log_generic+0x90>)
 800181c:	9000      	str	r0, [sp, #0]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	6809      	ldr	r1, [r1, #0]
 8001822:	4806      	ldr	r0, [pc, #24]	@ (800183c <log_generic+0x94>)
 8001824:	f010 ff32 	bl	801268c <iprintf>
 8001828:	e000      	b.n	800182c <log_generic+0x84>
        return;
 800182a:	bf00      	nop
}
 800182c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001830:	46bd      	mov	sp, r7
 8001832:	bd90      	pop	{r4, r7, pc}
 8001834:	20000000 	.word	0x20000000
 8001838:	08014604 	.word	0x08014604
 800183c:	080145f4 	.word	0x080145f4

08001840 <log_debug>:

void log_debug(const char *fmt, ...)
{
 8001840:	b40f      	push	{r0, r1, r2, r3}
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4a05      	ldr	r2, [pc, #20]	@ (800186c <log_debug+0x2c>)
 8001856:	4906      	ldr	r1, [pc, #24]	@ (8001870 <log_debug+0x30>)
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff ffa5 	bl	80017a8 <log_generic>
    va_end(args);
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001868:	b004      	add	sp, #16
 800186a:	4770      	bx	lr
 800186c:	0801460c 	.word	0x0801460c
 8001870:	08014614 	.word	0x08014614

08001874 <log_info>:

void log_info(const char *fmt, ...)
{
 8001874:	b40f      	push	{r0, r1, r2, r3}
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4a05      	ldr	r2, [pc, #20]	@ (80018a0 <log_info+0x2c>)
 800188a:	4906      	ldr	r1, [pc, #24]	@ (80018a4 <log_info+0x30>)
 800188c:	2001      	movs	r0, #1
 800188e:	f7ff ff8b 	bl	80017a8 <log_generic>
    va_end(args);
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800189c:	b004      	add	sp, #16
 800189e:	4770      	bx	lr
 80018a0:	0801461c 	.word	0x0801461c
 80018a4:	08014624 	.word	0x08014624

080018a8 <log_warn>:

void log_warn(const char *fmt, ...)
{
 80018a8:	b40f      	push	{r0, r1, r2, r3}
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b084      	sub	sp, #16
 80018ae:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <log_warn+0x2c>)
 80018be:	4906      	ldr	r1, [pc, #24]	@ (80018d8 <log_warn+0x30>)
 80018c0:	2002      	movs	r0, #2
 80018c2:	f7ff ff71 	bl	80017a8 <log_generic>
    va_end(args);
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018d0:	b004      	add	sp, #16
 80018d2:	4770      	bx	lr
 80018d4:	0801462c 	.word	0x0801462c
 80018d8:	08014634 	.word	0x08014634

080018dc <log_error>:

void log_error(const char *fmt, ...)
{
 80018dc:	b40f      	push	{r0, r1, r2, r3}
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4a05      	ldr	r2, [pc, #20]	@ (8001908 <log_error+0x2c>)
 80018f2:	4906      	ldr	r1, [pc, #24]	@ (800190c <log_error+0x30>)
 80018f4:	2003      	movs	r0, #3
 80018f6:	f7ff ff57 	bl	80017a8 <log_generic>
    va_end(args);
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001904:	b004      	add	sp, #16
 8001906:	4770      	bx	lr
 8001908:	0801463c 	.word	0x0801463c
 800190c:	08014644 	.word	0x08014644

08001910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001914:	f001 fb8c 	bl	8003030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001918:	f000 f848 	bl	80019ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191c:	f000 fafe 	bl	8001f1c <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8001920:	f000 fa9a 	bl	8001e58 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8001924:	f000 fa00 	bl	8001d28 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001928:	f000 f8d0 	bl	8001acc <MX_I2C1_Init>
  MX_SPI1_Init();
 800192c:	f000 f9a6 	bl	8001c7c <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8001930:	f000 fa46 	bl	8001dc0 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001934:	f000 f920 	bl	8001b78 <MX_RTC_Init>
  MX_RNG_Init();
 8001938:	f000 f908 	bl	8001b4c <MX_RNG_Init>
  MX_HASH_Init();
 800193c:	f000 f8ac 	bl	8001a98 <MX_HASH_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 8001940:	bf00      	nop
 8001942:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <main+0x94>)
 8001944:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0fa      	beq.n	8001942 <main+0x32>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800194c:	2000      	movs	r0, #0
 800194e:	f001 f955 	bl	8002bfc <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8001952:	2001      	movs	r0, #1
 8001954:	f001 f952 	bl	8002bfc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001958:	2002      	movs	r0, #2
 800195a:	f001 f94f 	bl	8002bfc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800195e:	2101      	movs	r1, #1
 8001960:	2000      	movs	r0, #0
 8001962:	f001 f9eb 	bl	8002d3c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001966:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <main+0x98>)
 8001968:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800196c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <main+0x98>)
 8001970:	2200      	movs	r2, #0
 8001972:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <main+0x98>)
 8001976:	2200      	movs	r2, #0
 8001978:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800197a:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <main+0x98>)
 800197c:	2200      	movs	r2, #0
 800197e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001980:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <main+0x98>)
 8001982:	2200      	movs	r2, #0
 8001984:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001986:	4908      	ldr	r1, [pc, #32]	@ (80019a8 <main+0x98>)
 8001988:	2000      	movs	r0, #0
 800198a:	f001 fa71 	bl	8002e70 <BSP_COM_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <main+0x88>
  {
    Error_Handler();
 8001994:	f000 fbce 	bl	8002134 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HSMManager_Init();
 8001998:	f7ff f8dc 	bl	8000b54 <HSMManager_Init>

  HSMManager_ProcessCommand();
 800199c:	f7ff f94e 	bl	8000c3c <HSMManager_ProcessCommand>
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <main+0x90>
 80019a4:	20000760 	.word	0x20000760
 80019a8:	200001dc 	.word	0x200001dc

080019ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b09c      	sub	sp, #112	@ 0x70
 80019b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b2:	f107 0320 	add.w	r3, r7, #32
 80019b6:	2250      	movs	r2, #80	@ 0x50
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f010 ff48 	bl	8012850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
 80019d0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80019d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a90 <SystemClock_Config+0xe4>)
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001a90 <SystemClock_Config+0xe4>)
 80019d8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80019dc:	6113      	str	r3, [r2, #16]
 80019de:	4b2c      	ldr	r3, [pc, #176]	@ (8001a90 <SystemClock_Config+0xe4>)
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019ea:	bf00      	nop
 80019ec:	4b28      	ldr	r3, [pc, #160]	@ (8001a90 <SystemClock_Config+0xe4>)
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d1f9      	bne.n	80019ec <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80019f8:	2329      	movs	r3, #41	@ 0x29
 80019fa:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019fc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001a00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a02:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001a06:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a0c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001a12:	2303      	movs	r3, #3
 8001a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a16:	2304      	movs	r3, #4
 8001a18:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8001a1a:	23fa      	movs	r3, #250	@ 0xfa
 8001a1c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a22:	2302      	movs	r3, #2
 8001a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a26:	2302      	movs	r3, #2
 8001a28:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a36:	f107 0320 	add.w	r3, r7, #32
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f004 fd76 	bl	800652c <HAL_RCC_OscConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a46:	f000 fb75 	bl	8002134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a4a:	231f      	movs	r3, #31
 8001a4c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	2105      	movs	r1, #5
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f005 f997 	bl	8006d9c <HAL_RCC_ClockConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001a74:	f000 fb5e 	bl	8002134 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <SystemClock_Config+0xe8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a80:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <SystemClock_Config+0xe8>)
 8001a82:	f043 0320 	orr.w	r3, r3, #32
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	3770      	adds	r7, #112	@ 0x70
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	44020800 	.word	0x44020800
 8001a94:	40022000 	.word	0x40022000

08001a98 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <MX_HASH_Init+0x2c>)
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac8 <MX_HASH_Init+0x30>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_BYTE_SWAP;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <MX_HASH_Init+0x2c>)
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA256;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <MX_HASH_Init+0x2c>)
 8001aaa:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8001aae:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8001ab0:	4804      	ldr	r0, [pc, #16]	@ (8001ac4 <MX_HASH_Init+0x2c>)
 8001ab2:	f001 ff6d 	bl	8003990 <HAL_HASH_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_HASH_Init+0x28>
  {
    Error_Handler();
 8001abc:	f000 fb3a 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200001ec 	.word	0x200001ec
 8001ac8:	420c0400 	.word	0x420c0400

08001acc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b44 <MX_I2C1_Init+0x78>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b48 <MX_I2C1_Init+0x7c>)
 8001ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001adc:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001aee:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001af4:	4b12      	ldr	r3, [pc, #72]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b06:	480e      	ldr	r0, [pc, #56]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001b08:	f002 feda 	bl	80048c0 <HAL_I2C_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b12:	f000 fb0f 	bl	8002134 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b16:	2100      	movs	r1, #0
 8001b18:	4809      	ldr	r0, [pc, #36]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001b1a:	f002 ff6c 	bl	80049f6 <HAL_I2CEx_ConfigAnalogFilter>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b24:	f000 fb06 	bl	8002134 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4805      	ldr	r0, [pc, #20]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001b2c:	f002 ffae 	bl	8004a8c <HAL_I2CEx_ConfigDigitalFilter>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b36:	f000 fafd 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000022c 	.word	0x2000022c
 8001b44:	40005400 	.word	0x40005400
 8001b48:	10c043e5 	.word	0x10c043e5

08001b4c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001b50:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <MX_RNG_Init+0x24>)
 8001b52:	4a08      	ldr	r2, [pc, #32]	@ (8001b74 <MX_RNG_Init+0x28>)
 8001b54:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <MX_RNG_Init+0x24>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	@ (8001b70 <MX_RNG_Init+0x24>)
 8001b5e:	f00a fcb7 	bl	800c4d0 <HAL_RNG_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001b68:	f000 fae4 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000280 	.word	0x20000280
 8001b74:	420c0800 	.word	0x420c0800

08001b78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08e      	sub	sp, #56	@ 0x38
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	615a      	str	r2, [r3, #20]
 8001b90:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001b92:	f107 0308 	add.w	r3, r7, #8
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ba6:	4b33      	ldr	r3, [pc, #204]	@ (8001c74 <MX_RTC_Init+0xfc>)
 8001ba8:	4a33      	ldr	r2, [pc, #204]	@ (8001c78 <MX_RTC_Init+0x100>)
 8001baa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bac:	4b31      	ldr	r3, [pc, #196]	@ (8001c74 <MX_RTC_Init+0xfc>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bb2:	4b30      	ldr	r3, [pc, #192]	@ (8001c74 <MX_RTC_Init+0xfc>)
 8001bb4:	227f      	movs	r2, #127	@ 0x7f
 8001bb6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <MX_RTC_Init+0xfc>)
 8001bba:	22ff      	movs	r2, #255	@ 0xff
 8001bbc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001c74 <MX_RTC_Init+0xfc>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c74 <MX_RTC_Init+0xfc>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bca:	4b2a      	ldr	r3, [pc, #168]	@ (8001c74 <MX_RTC_Init+0xfc>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bd0:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <MX_RTC_Init+0xfc>)
 8001bd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bd6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001bd8:	4b26      	ldr	r3, [pc, #152]	@ (8001c74 <MX_RTC_Init+0xfc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001bde:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <MX_RTC_Init+0xfc>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001be4:	4823      	ldr	r0, [pc, #140]	@ (8001c74 <MX_RTC_Init+0xfc>)
 8001be6:	f00a fe17 	bl	800c818 <HAL_RTC_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001bf0:	f000 faa0 	bl	8002134 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	481a      	ldr	r0, [pc, #104]	@ (8001c74 <MX_RTC_Init+0xfc>)
 8001c0c:	f00b f86a 	bl	800cce4 <HAL_RTCEx_PrivilegeModeSet>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001c16:	f000 fa8d 	bl	8002134 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	2201      	movs	r2, #1
 8001c34:	4619      	mov	r1, r3
 8001c36:	480f      	ldr	r0, [pc, #60]	@ (8001c74 <MX_RTC_Init+0xfc>)
 8001c38:	f00a fe70 	bl	800c91c <HAL_RTC_SetTime>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001c42:	f000 fa77 	bl	8002134 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c46:	2301      	movs	r3, #1
 8001c48:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <MX_RTC_Init+0xfc>)
 8001c5e:	f00a feef 	bl	800ca40 <HAL_RTC_SetDate>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8001c68:	f000 fa64 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c6c:	bf00      	nop
 8001c6e:	3738      	adds	r7, #56	@ 0x38
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000294 	.word	0x20000294
 8001c78:	44007800 	.word	0x44007800

08001c7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c80:	4b27      	ldr	r3, [pc, #156]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001c82:	4a28      	ldr	r2, [pc, #160]	@ (8001d24 <MX_SPI1_Init+0xa8>)
 8001c84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c86:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001c88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c8e:	4b24      	ldr	r3, [pc, #144]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c94:	4b22      	ldr	r3, [pc, #136]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001c96:	2207      	movs	r2, #7
 8001c98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c9a:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001ca8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001cac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001cae:	4b1c      	ldr	r3, [pc, #112]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cb0:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001cb4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cbc:	4b18      	ldr	r3, [pc, #96]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc2:	4b17      	ldr	r3, [pc, #92]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001cc8:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cca:	2207      	movs	r2, #7
 8001ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cce:	4b14      	ldr	r3, [pc, #80]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cd4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001cd6:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001cee:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001cfa:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001d00:	4b07      	ldr	r3, [pc, #28]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d0c:	4804      	ldr	r0, [pc, #16]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001d0e:	f00b f817 	bl	800cd40 <HAL_SPI_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001d18:	f000 fa0c 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200002c4 	.word	0x200002c4
 8001d24:	40013000 	.word	0x40013000

08001d28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d2c:	4b22      	ldr	r3, [pc, #136]	@ (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d2e:	4a23      	ldr	r2, [pc, #140]	@ (8001dbc <MX_USART2_UART_Init+0x94>)
 8001d30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d32:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d40:	4b1d      	ldr	r3, [pc, #116]	@ (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d4e:	220c      	movs	r2, #12
 8001d50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d52:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d58:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d5e:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d64:	4b14      	ldr	r3, [pc, #80]	@ (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d6a:	4b13      	ldr	r3, [pc, #76]	@ (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d70:	4811      	ldr	r0, [pc, #68]	@ (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d72:	f00b f970 	bl	800d056 <HAL_UART_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d7c:	f000 f9da 	bl	8002134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d80:	2100      	movs	r1, #0
 8001d82:	480d      	ldr	r0, [pc, #52]	@ (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d84:	f00b fe9c 	bl	800dac0 <HAL_UARTEx_SetTxFifoThreshold>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d8e:	f000 f9d1 	bl	8002134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d92:	2100      	movs	r1, #0
 8001d94:	4808      	ldr	r0, [pc, #32]	@ (8001db8 <MX_USART2_UART_Init+0x90>)
 8001d96:	f00b fed1 	bl	800db3c <HAL_UARTEx_SetRxFifoThreshold>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001da0:	f000 f9c8 	bl	8002134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001da4:	4804      	ldr	r0, [pc, #16]	@ (8001db8 <MX_USART2_UART_Init+0x90>)
 8001da6:	f00b fe52 	bl	800da4e <HAL_UARTEx_DisableFifoMode>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001db0:	f000 f9c0 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000354 	.word	0x20000354
 8001dbc:	40004400 	.word	0x40004400

08001dc0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001dc4:	4b22      	ldr	r3, [pc, #136]	@ (8001e50 <MX_USART6_UART_Init+0x90>)
 8001dc6:	4a23      	ldr	r2, [pc, #140]	@ (8001e54 <MX_USART6_UART_Init+0x94>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001dca:	4b21      	ldr	r3, [pc, #132]	@ (8001e50 <MX_USART6_UART_Init+0x90>)
 8001dcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dd0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e50 <MX_USART6_UART_Init+0x90>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <MX_USART6_UART_Init+0x90>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b1c      	ldr	r3, [pc, #112]	@ (8001e50 <MX_USART6_UART_Init+0x90>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e50 <MX_USART6_UART_Init+0x90>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <MX_USART6_UART_Init+0x90>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <MX_USART6_UART_Init+0x90>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001df6:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <MX_USART6_UART_Init+0x90>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <MX_USART6_UART_Init+0x90>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e02:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <MX_USART6_UART_Init+0x90>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e08:	4811      	ldr	r0, [pc, #68]	@ (8001e50 <MX_USART6_UART_Init+0x90>)
 8001e0a:	f00b f924 	bl	800d056 <HAL_UART_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001e14:	f000 f98e 	bl	8002134 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e18:	2100      	movs	r1, #0
 8001e1a:	480d      	ldr	r0, [pc, #52]	@ (8001e50 <MX_USART6_UART_Init+0x90>)
 8001e1c:	f00b fe50 	bl	800dac0 <HAL_UARTEx_SetTxFifoThreshold>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001e26:	f000 f985 	bl	8002134 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4808      	ldr	r0, [pc, #32]	@ (8001e50 <MX_USART6_UART_Init+0x90>)
 8001e2e:	f00b fe85 	bl	800db3c <HAL_UARTEx_SetRxFifoThreshold>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001e38:	f000 f97c 	bl	8002134 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001e3c:	4804      	ldr	r0, [pc, #16]	@ (8001e50 <MX_USART6_UART_Init+0x90>)
 8001e3e:	f00b fe06 	bl	800da4e <HAL_UARTEx_DisableFifoMode>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001e48:	f000 f974 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200003e8 	.word	0x200003e8
 8001e54:	40006400 	.word	0x40006400

08001e58 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8001e5c:	4b29      	ldr	r3, [pc, #164]	@ (8001f04 <MX_USB_PCD_Init+0xac>)
 8001e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f08 <MX_USB_PCD_Init+0xb0>)
 8001e60:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001e64:	4b27      	ldr	r3, [pc, #156]	@ (8001f04 <MX_USB_PCD_Init+0xac>)
 8001e66:	4a29      	ldr	r2, [pc, #164]	@ (8001f0c <MX_USB_PCD_Init+0xb4>)
 8001e68:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8001e6a:	4b26      	ldr	r3, [pc, #152]	@ (8001f04 <MX_USB_PCD_Init+0xac>)
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8001e70:	4b24      	ldr	r3, [pc, #144]	@ (8001f04 <MX_USB_PCD_Init+0xac>)
 8001e72:	2202      	movs	r2, #2
 8001e74:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e76:	4b23      	ldr	r3, [pc, #140]	@ (8001f04 <MX_USB_PCD_Init+0xac>)
 8001e78:	2202      	movs	r2, #2
 8001e7a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8001e7c:	4b21      	ldr	r3, [pc, #132]	@ (8001f04 <MX_USB_PCD_Init+0xac>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8001e82:	4b20      	ldr	r3, [pc, #128]	@ (8001f04 <MX_USB_PCD_Init+0xac>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8001e88:	4b1e      	ldr	r3, [pc, #120]	@ (8001f04 <MX_USB_PCD_Init+0xac>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <MX_USB_PCD_Init+0xac>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001e94:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <MX_USB_PCD_Init+0xac>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <MX_USB_PCD_Init+0xac>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8001ea0:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <MX_USB_PCD_Init+0xac>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8001ea6:	4817      	ldr	r0, [pc, #92]	@ (8001f04 <MX_USB_PCD_Init+0xac>)
 8001ea8:	f002 fe9f 	bl	8004bea <HAL_PCD_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8001eb2:	f000 f93f 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4915      	ldr	r1, [pc, #84]	@ (8001f10 <MX_USB_PCD_Init+0xb8>)
 8001eba:	4813      	ldr	r0, [pc, #76]	@ (8001f08 <MX_USB_PCD_Init+0xb0>)
 8001ebc:	f00e ffe6 	bl	8010e8c <USBD_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8001ec6:	f000 f935 	bl	8002134 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001eca:	4912      	ldr	r1, [pc, #72]	@ (8001f14 <MX_USB_PCD_Init+0xbc>)
 8001ecc:	480e      	ldr	r0, [pc, #56]	@ (8001f08 <MX_USB_PCD_Init+0xb0>)
 8001ece:	f00f f80d 	bl	8010eec <USBD_RegisterClass>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8001ed8:	f000 f92c 	bl	8002134 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8001edc:	490e      	ldr	r1, [pc, #56]	@ (8001f18 <MX_USB_PCD_Init+0xc0>)
 8001ede:	480a      	ldr	r0, [pc, #40]	@ (8001f08 <MX_USB_PCD_Init+0xb0>)
 8001ee0:	f00e fa8c 	bl	80103fc <USBD_CDC_RegisterInterface>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8001eea:	f000 f923 	bl	8002134 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8001eee:	4806      	ldr	r0, [pc, #24]	@ (8001f08 <MX_USB_PCD_Init+0xb0>)
 8001ef0:	f00f f832 	bl	8010f58 <USBD_Start>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8001efa:	f000 f91b 	bl	8002134 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000047c 	.word	0x2000047c
 8001f08:	20000760 	.word	0x20000760
 8001f0c:	40016000 	.word	0x40016000
 8001f10:	200000d4 	.word	0x200000d4
 8001f14:	20000038 	.word	0x20000038
 8001f18:	200000b8 	.word	0x200000b8

08001f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	@ 0x30
 8001f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
 8001f30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f32:	4b7a      	ldr	r3, [pc, #488]	@ (800211c <MX_GPIO_Init+0x200>)
 8001f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f38:	4a78      	ldr	r2, [pc, #480]	@ (800211c <MX_GPIO_Init+0x200>)
 8001f3a:	f043 0310 	orr.w	r3, r3, #16
 8001f3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f42:	4b76      	ldr	r3, [pc, #472]	@ (800211c <MX_GPIO_Init+0x200>)
 8001f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f50:	4b72      	ldr	r3, [pc, #456]	@ (800211c <MX_GPIO_Init+0x200>)
 8001f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f56:	4a71      	ldr	r2, [pc, #452]	@ (800211c <MX_GPIO_Init+0x200>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f60:	4b6e      	ldr	r3, [pc, #440]	@ (800211c <MX_GPIO_Init+0x200>)
 8001f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f6e:	4b6b      	ldr	r3, [pc, #428]	@ (800211c <MX_GPIO_Init+0x200>)
 8001f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f74:	4a69      	ldr	r2, [pc, #420]	@ (800211c <MX_GPIO_Init+0x200>)
 8001f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f7e:	4b67      	ldr	r3, [pc, #412]	@ (800211c <MX_GPIO_Init+0x200>)
 8001f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8c:	4b63      	ldr	r3, [pc, #396]	@ (800211c <MX_GPIO_Init+0x200>)
 8001f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f92:	4a62      	ldr	r2, [pc, #392]	@ (800211c <MX_GPIO_Init+0x200>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f9c:	4b5f      	ldr	r3, [pc, #380]	@ (800211c <MX_GPIO_Init+0x200>)
 8001f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	4b5c      	ldr	r3, [pc, #368]	@ (800211c <MX_GPIO_Init+0x200>)
 8001fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fb0:	4a5a      	ldr	r2, [pc, #360]	@ (800211c <MX_GPIO_Init+0x200>)
 8001fb2:	f043 0302 	orr.w	r3, r3, #2
 8001fb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fba:	4b58      	ldr	r3, [pc, #352]	@ (800211c <MX_GPIO_Init+0x200>)
 8001fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fc8:	4b54      	ldr	r3, [pc, #336]	@ (800211c <MX_GPIO_Init+0x200>)
 8001fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fce:	4a53      	ldr	r2, [pc, #332]	@ (800211c <MX_GPIO_Init+0x200>)
 8001fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fd4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fd8:	4b50      	ldr	r3, [pc, #320]	@ (800211c <MX_GPIO_Init+0x200>)
 8001fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe6:	4b4d      	ldr	r3, [pc, #308]	@ (800211c <MX_GPIO_Init+0x200>)
 8001fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fec:	4a4b      	ldr	r2, [pc, #300]	@ (800211c <MX_GPIO_Init+0x200>)
 8001fee:	f043 0308 	orr.w	r3, r3, #8
 8001ff2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ff6:	4b49      	ldr	r3, [pc, #292]	@ (800211c <MX_GPIO_Init+0x200>)
 8001ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	603b      	str	r3, [r7, #0]
 8002002:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002004:	2332      	movs	r3, #50	@ 0x32
 8002006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002010:	2302      	movs	r3, #2
 8002012:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002014:	230b      	movs	r3, #11
 8002016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	4619      	mov	r1, r3
 800201e:	4840      	ldr	r0, [pc, #256]	@ (8002120 <MX_GPIO_Init+0x204>)
 8002020:	f001 fb32 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002024:	2384      	movs	r3, #132	@ 0x84
 8002026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002030:	2302      	movs	r3, #2
 8002032:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002034:	230b      	movs	r3, #11
 8002036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	4839      	ldr	r0, [pc, #228]	@ (8002124 <MX_GPIO_Init+0x208>)
 8002040:	f001 fb22 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8002044:	2310      	movs	r3, #16
 8002046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002048:	2303      	movs	r3, #3
 800204a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	4833      	ldr	r0, [pc, #204]	@ (8002124 <MX_GPIO_Init+0x208>)
 8002058:	f001 fb16 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800205c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800206e:	2307      	movs	r3, #7
 8002070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	4619      	mov	r1, r3
 8002078:	482b      	ldr	r0, [pc, #172]	@ (8002128 <MX_GPIO_Init+0x20c>)
 800207a:	f001 fb05 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 800207e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002084:	2303      	movs	r3, #3
 8002086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208c:	f107 031c 	add.w	r3, r7, #28
 8002090:	4619      	mov	r1, r3
 8002092:	4825      	ldr	r0, [pc, #148]	@ (8002128 <MX_GPIO_Init+0x20c>)
 8002094:	f001 faf8 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002098:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800209c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a6:	2302      	movs	r3, #2
 80020a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020aa:	230b      	movs	r3, #11
 80020ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80020ae:	f107 031c 	add.w	r3, r7, #28
 80020b2:	4619      	mov	r1, r3
 80020b4:	481c      	ldr	r0, [pc, #112]	@ (8002128 <MX_GPIO_Init+0x20c>)
 80020b6:	f001 fae7 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80020ba:	2380      	movs	r3, #128	@ 0x80
 80020bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020be:	4b1b      	ldr	r3, [pc, #108]	@ (800212c <MX_GPIO_Init+0x210>)
 80020c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	4619      	mov	r1, r3
 80020cc:	4818      	ldr	r0, [pc, #96]	@ (8002130 <MX_GPIO_Init+0x214>)
 80020ce:	f001 fadb 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 80020d2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80020d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e0:	2302      	movs	r3, #2
 80020e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020e4:	230b      	movs	r3, #11
 80020e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	4619      	mov	r1, r3
 80020ee:	4810      	ldr	r0, [pc, #64]	@ (8002130 <MX_GPIO_Init+0x214>)
 80020f0:	f001 faca 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 80020f4:	23c0      	movs	r3, #192	@ 0xc0
 80020f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002104:	2308      	movs	r3, #8
 8002106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	f107 031c 	add.w	r3, r7, #28
 800210c:	4619      	mov	r1, r3
 800210e:	4806      	ldr	r0, [pc, #24]	@ (8002128 <MX_GPIO_Init+0x20c>)
 8002110:	f001 faba 	bl	8003688 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002114:	bf00      	nop
 8002116:	3730      	adds	r7, #48	@ 0x30
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	44020c00 	.word	0x44020c00
 8002120:	42020800 	.word	0x42020800
 8002124:	42020000 	.word	0x42020000
 8002128:	42020400 	.word	0x42020400
 800212c:	10110000 	.word	0x10110000
 8002130:	42021800 	.word	0x42021800

08002134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002138:	b672      	cpsid	i
}
 800213a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <Error_Handler+0x8>

08002140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8002158:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <HAL_HASH_MspInit+0x40>)
 800215a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800215e:	4a0c      	ldr	r2, [pc, #48]	@ (8002190 <HAL_HASH_MspInit+0x40>)
 8002160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002164:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002168:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <HAL_HASH_MspInit+0x40>)
 800216a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800216e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    /* HASH interrupt Init */
    HAL_NVIC_SetPriority(HASH_IRQn, 0, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	2075      	movs	r0, #117	@ 0x75
 800217c:	f001 f916 	bl	80033ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_IRQn);
 8002180:	2075      	movs	r0, #117	@ 0x75
 8002182:	f001 f92d 	bl	80033e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	44020c00 	.word	0x44020c00

08002194 <HAL_HASH_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspDeInit(HASH_HandleTypeDef* hhash)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspDeInit 0 */

  /* USER CODE END HASH_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_HASH_CLK_DISABLE();
 800219c:	4b07      	ldr	r3, [pc, #28]	@ (80021bc <HAL_HASH_MspDeInit+0x28>)
 800219e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021a2:	4a06      	ldr	r2, [pc, #24]	@ (80021bc <HAL_HASH_MspDeInit+0x28>)
 80021a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80021a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

    /* HASH interrupt DeInit */
    HAL_NVIC_DisableIRQ(HASH_IRQn);
 80021ac:	2075      	movs	r0, #117	@ 0x75
 80021ae:	f001 f925 	bl	80033fc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN HASH_MspDeInit 1 */

  /* USER CODE END HASH_MspDeInit 1 */

}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	44020c00 	.word	0x44020c00

080021c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b0cc      	sub	sp, #304	@ 0x130
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80021ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80021ce:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80021e4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021e8:	4618      	mov	r0, r3
 80021ea:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80021ee:	461a      	mov	r2, r3
 80021f0:	2100      	movs	r1, #0
 80021f2:	f010 fb2d 	bl	8012850 <memset>
  if(hi2c->Instance==I2C1)
 80021f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80021fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a33      	ldr	r2, [pc, #204]	@ (80022d0 <HAL_I2C_MspInit+0x110>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d15e      	bne.n	80022c6 <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002208:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800220c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8002210:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800221c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002220:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002224:	2200      	movs	r2, #0
 8002226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800222a:	f107 0310 	add.w	r3, r7, #16
 800222e:	4618      	mov	r0, r3
 8002230:	f005 f8f6 	bl	8007420 <HAL_RCCEx_PeriphCLKConfig>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 800223a:	f7ff ff7b 	bl	8002134 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223e:	4b25      	ldr	r3, [pc, #148]	@ (80022d4 <HAL_I2C_MspInit+0x114>)
 8002240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002244:	4a23      	ldr	r2, [pc, #140]	@ (80022d4 <HAL_I2C_MspInit+0x114>)
 8002246:	f043 0302 	orr.w	r3, r3, #2
 800224a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800224e:	4b21      	ldr	r3, [pc, #132]	@ (80022d4 <HAL_I2C_MspInit+0x114>)
 8002250:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002254:	f003 0202 	and.w	r2, r3, #2
 8002258:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800225c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002266:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800226a:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800226c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002270:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002274:	2312      	movs	r3, #18
 8002276:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002286:	2304      	movs	r3, #4
 8002288:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002290:	4619      	mov	r1, r3
 8002292:	4811      	ldr	r0, [pc, #68]	@ (80022d8 <HAL_I2C_MspInit+0x118>)
 8002294:	f001 f9f8 	bl	8003688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002298:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <HAL_I2C_MspInit+0x114>)
 800229a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800229e:	4a0d      	ldr	r2, [pc, #52]	@ (80022d4 <HAL_I2C_MspInit+0x114>)
 80022a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022a4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022a8:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <HAL_I2C_MspInit+0x114>)
 80022aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022ae:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80022b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80022b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80022c0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022c4:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80022c6:	bf00      	nop
 80022c8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40005400 	.word	0x40005400
 80022d4:	44020c00 	.word	0x44020c00
 80022d8:	42020400 	.word	0x42020400

080022dc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b0c6      	sub	sp, #280	@ 0x118
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022ea:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80022f4:	4618      	mov	r0, r3
 80022f6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80022fa:	461a      	mov	r2, r3
 80022fc:	2100      	movs	r1, #0
 80022fe:	f010 faa7 	bl	8012850 <memset>
  if(hrng->Instance==RNG)
 8002302:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002306:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1d      	ldr	r2, [pc, #116]	@ (8002384 <HAL_RNG_MspInit+0xa8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d131      	bne.n	8002378 <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002314:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002318:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 800231c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002328:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800232c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002330:	2200      	movs	r2, #0
 8002332:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	4618      	mov	r0, r3
 800233c:	f005 f870 	bl	8007420 <HAL_RCCEx_PeriphCLKConfig>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 8002346:	f7ff fef5 	bl	8002134 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800234a:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <HAL_RNG_MspInit+0xac>)
 800234c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002350:	4a0d      	ldr	r2, [pc, #52]	@ (8002388 <HAL_RNG_MspInit+0xac>)
 8002352:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002356:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800235a:	4b0b      	ldr	r3, [pc, #44]	@ (8002388 <HAL_RNG_MspInit+0xac>)
 800235c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002360:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002364:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002368:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002372:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002376:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002378:	bf00      	nop
 800237a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	420c0800 	.word	0x420c0800
 8002388:	44020c00 	.word	0x44020c00

0800238c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b0c6      	sub	sp, #280	@ 0x118
 8002390:	af00      	add	r7, sp, #0
 8002392:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002396:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800239a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800239c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023a4:	4618      	mov	r0, r3
 80023a6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80023aa:	461a      	mov	r2, r3
 80023ac:	2100      	movs	r1, #0
 80023ae:	f010 fa4f 	bl	8012850 <memset>
  if(hrtc->Instance==RTC)
 80023b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a21      	ldr	r2, [pc, #132]	@ (8002444 <HAL_RTC_MspInit+0xb8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d13a      	bne.n	800243a <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023c8:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80023cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80023d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023e4:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	4618      	mov	r0, r3
 80023ee:	f005 f817 	bl	8007420 <HAL_RCCEx_PeriphCLKConfig>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 80023f8:	f7ff fe9c 	bl	8002134 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023fc:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <HAL_RTC_MspInit+0xbc>)
 80023fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002402:	4a11      	ldr	r2, [pc, #68]	@ (8002448 <HAL_RTC_MspInit+0xbc>)
 8002404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002408:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800240c:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <HAL_RTC_MspInit+0xbc>)
 800240e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002412:	4a0d      	ldr	r2, [pc, #52]	@ (8002448 <HAL_RTC_MspInit+0xbc>)
 8002414:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002418:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800241c:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <HAL_RTC_MspInit+0xbc>)
 800241e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002422:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002426:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800242a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002434:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002438:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800243a:	bf00      	nop
 800243c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	44007800 	.word	0x44007800
 8002448:	44020c00 	.word	0x44020c00

0800244c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b0ce      	sub	sp, #312	@ 0x138
 8002450:	af00      	add	r7, sp, #0
 8002452:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002456:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800245a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800246c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002470:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002474:	4618      	mov	r0, r3
 8002476:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800247a:	461a      	mov	r2, r3
 800247c:	2100      	movs	r1, #0
 800247e:	f010 f9e7 	bl	8012850 <memset>
  if(hspi->Instance==SPI1)
 8002482:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002486:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a49      	ldr	r2, [pc, #292]	@ (80025b4 <HAL_SPI_MspInit+0x168>)
 8002490:	4293      	cmp	r3, r2
 8002492:	f040 808a 	bne.w	80025aa <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002496:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800249a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800249e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 80024aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80024ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80024b2:	2200      	movs	r2, #0
 80024b4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024b8:	f107 0318 	add.w	r3, r7, #24
 80024bc:	4618      	mov	r0, r3
 80024be:	f004 ffaf 	bl	8007420 <HAL_RCCEx_PeriphCLKConfig>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 80024c8:	f7ff fe34 	bl	8002134 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024cc:	4b3a      	ldr	r3, [pc, #232]	@ (80025b8 <HAL_SPI_MspInit+0x16c>)
 80024ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024d2:	4a39      	ldr	r2, [pc, #228]	@ (80025b8 <HAL_SPI_MspInit+0x16c>)
 80024d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024d8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80024dc:	4b36      	ldr	r3, [pc, #216]	@ (80025b8 <HAL_SPI_MspInit+0x16c>)
 80024de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80024e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80024ea:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80024f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80024f8:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	4b2f      	ldr	r3, [pc, #188]	@ (80025b8 <HAL_SPI_MspInit+0x16c>)
 80024fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002500:	4a2d      	ldr	r2, [pc, #180]	@ (80025b8 <HAL_SPI_MspInit+0x16c>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800250a:	4b2b      	ldr	r3, [pc, #172]	@ (80025b8 <HAL_SPI_MspInit+0x16c>)
 800250c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002510:	f003 0201 	and.w	r2, r3, #1
 8002514:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002518:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002522:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002526:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002528:	4b23      	ldr	r3, [pc, #140]	@ (80025b8 <HAL_SPI_MspInit+0x16c>)
 800252a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800252e:	4a22      	ldr	r2, [pc, #136]	@ (80025b8 <HAL_SPI_MspInit+0x16c>)
 8002530:	f043 0308 	orr.w	r3, r3, #8
 8002534:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002538:	4b1f      	ldr	r3, [pc, #124]	@ (80025b8 <HAL_SPI_MspInit+0x16c>)
 800253a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800253e:	f003 0208 	and.w	r2, r3, #8
 8002542:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002546:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002550:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002554:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002556:	2360      	movs	r3, #96	@ 0x60
 8002558:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800256e:	2305      	movs	r3, #5
 8002570:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002574:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8002578:	4619      	mov	r1, r3
 800257a:	4810      	ldr	r0, [pc, #64]	@ (80025bc <HAL_SPI_MspInit+0x170>)
 800257c:	f001 f884 	bl	8003688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002580:	2380      	movs	r3, #128	@ 0x80
 8002582:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002592:	2300      	movs	r3, #0
 8002594:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002598:	2305      	movs	r3, #5
 800259a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800259e:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80025a2:	4619      	mov	r1, r3
 80025a4:	4806      	ldr	r0, [pc, #24]	@ (80025c0 <HAL_SPI_MspInit+0x174>)
 80025a6:	f001 f86f 	bl	8003688 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80025aa:	bf00      	nop
 80025ac:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40013000 	.word	0x40013000
 80025b8:	44020c00 	.word	0x44020c00
 80025bc:	42020000 	.word	0x42020000
 80025c0:	42020c00 	.word	0x42020c00

080025c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b0d0      	sub	sp, #320	@ 0x140
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025ce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025d2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025ec:	4618      	mov	r0, r3
 80025ee:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80025f2:	461a      	mov	r2, r3
 80025f4:	2100      	movs	r1, #0
 80025f6:	f010 f92b 	bl	8012850 <memset>
  if(huart->Instance==USART2)
 80025fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a7c      	ldr	r2, [pc, #496]	@ (80027f8 <HAL_UART_MspInit+0x234>)
 8002608:	4293      	cmp	r3, r2
 800260a:	f040 808a 	bne.w	8002722 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800260e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002612:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8002616:	f04f 0202 	mov.w	r2, #2
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002622:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002626:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800262a:	2200      	movs	r2, #0
 800262c:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800262e:	f107 0320 	add.w	r3, r7, #32
 8002632:	4618      	mov	r0, r3
 8002634:	f004 fef4 	bl	8007420 <HAL_RCCEx_PeriphCLKConfig>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 800263e:	f7ff fd79 	bl	8002134 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002642:	4b6e      	ldr	r3, [pc, #440]	@ (80027fc <HAL_UART_MspInit+0x238>)
 8002644:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002648:	4a6c      	ldr	r2, [pc, #432]	@ (80027fc <HAL_UART_MspInit+0x238>)
 800264a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800264e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002652:	4b6a      	ldr	r3, [pc, #424]	@ (80027fc <HAL_UART_MspInit+0x238>)
 8002654:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002658:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 800265c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002660:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800266a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800266e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002670:	4b62      	ldr	r3, [pc, #392]	@ (80027fc <HAL_UART_MspInit+0x238>)
 8002672:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002676:	4a61      	ldr	r2, [pc, #388]	@ (80027fc <HAL_UART_MspInit+0x238>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002680:	4b5e      	ldr	r3, [pc, #376]	@ (80027fc <HAL_UART_MspInit+0x238>)
 8002682:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002686:	f003 0201 	and.w	r2, r3, #1
 800268a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800268e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002698:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800269c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800269e:	4b57      	ldr	r3, [pc, #348]	@ (80027fc <HAL_UART_MspInit+0x238>)
 80026a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026a4:	4a55      	ldr	r2, [pc, #340]	@ (80027fc <HAL_UART_MspInit+0x238>)
 80026a6:	f043 0308 	orr.w	r3, r3, #8
 80026aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026ae:	4b53      	ldr	r3, [pc, #332]	@ (80027fc <HAL_UART_MspInit+0x238>)
 80026b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026b4:	f003 0208 	and.w	r2, r3, #8
 80026b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80026ca:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026cc:	2308      	movs	r3, #8
 80026ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026e4:	2307      	movs	r3, #7
 80026e6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ea:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80026ee:	4619      	mov	r1, r3
 80026f0:	4843      	ldr	r0, [pc, #268]	@ (8002800 <HAL_UART_MspInit+0x23c>)
 80026f2:	f000 ffc9 	bl	8003688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026f6:	2320      	movs	r3, #32
 80026f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fc:	2302      	movs	r3, #2
 80026fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	2300      	movs	r3, #0
 800270a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800270e:	2307      	movs	r3, #7
 8002710:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002714:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002718:	4619      	mov	r1, r3
 800271a:	483a      	ldr	r0, [pc, #232]	@ (8002804 <HAL_UART_MspInit+0x240>)
 800271c:	f000 ffb4 	bl	8003688 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002720:	e065      	b.n	80027ee <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART6)
 8002722:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002726:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a36      	ldr	r2, [pc, #216]	@ (8002808 <HAL_UART_MspInit+0x244>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d15c      	bne.n	80027ee <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002734:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002738:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800273c:	f04f 0220 	mov.w	r2, #32
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002748:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800274c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002750:	2200      	movs	r2, #0
 8002752:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002754:	f107 0320 	add.w	r3, r7, #32
 8002758:	4618      	mov	r0, r3
 800275a:	f004 fe61 	bl	8007420 <HAL_RCCEx_PeriphCLKConfig>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8002764:	f7ff fce6 	bl	8002134 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002768:	4b24      	ldr	r3, [pc, #144]	@ (80027fc <HAL_UART_MspInit+0x238>)
 800276a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800276e:	4a23      	ldr	r2, [pc, #140]	@ (80027fc <HAL_UART_MspInit+0x238>)
 8002770:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002774:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002778:	4b20      	ldr	r3, [pc, #128]	@ (80027fc <HAL_UART_MspInit+0x238>)
 800277a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800277e:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8002782:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002786:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002790:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002794:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002796:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <HAL_UART_MspInit+0x238>)
 8002798:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800279c:	4a17      	ldr	r2, [pc, #92]	@ (80027fc <HAL_UART_MspInit+0x238>)
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027a6:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <HAL_UART_MspInit+0x238>)
 80027a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027ac:	f003 0204 	and.w	r2, r3, #4
 80027b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027be:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027c2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027c4:	23c0      	movs	r3, #192	@ 0xc0
 80027c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80027dc:	2307      	movs	r3, #7
 80027de:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e2:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80027e6:	4619      	mov	r1, r3
 80027e8:	4808      	ldr	r0, [pc, #32]	@ (800280c <HAL_UART_MspInit+0x248>)
 80027ea:	f000 ff4d 	bl	8003688 <HAL_GPIO_Init>
}
 80027ee:	bf00      	nop
 80027f0:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40004400 	.word	0x40004400
 80027fc:	44020c00 	.word	0x44020c00
 8002800:	42020000 	.word	0x42020000
 8002804:	42020c00 	.word	0x42020c00
 8002808:	40006400 	.word	0x40006400
 800280c:	42020800 	.word	0x42020800

08002810 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b0c6      	sub	sp, #280	@ 0x118
 8002814:	af00      	add	r7, sp, #0
 8002816:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800281a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800281e:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002820:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002828:	4618      	mov	r0, r3
 800282a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800282e:	461a      	mov	r2, r3
 8002830:	2100      	movs	r1, #0
 8002832:	f010 f80d 	bl	8012850 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8002836:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800283a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a22      	ldr	r2, [pc, #136]	@ (80028cc <HAL_PCD_MspInit+0xbc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d13b      	bne.n	80028c0 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002848:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800284c:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0310 	mov.w	r3, #16
 8002858:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800285c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002864:	2230      	movs	r2, #48	@ 0x30
 8002866:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800286a:	f107 0310 	add.w	r3, r7, #16
 800286e:	4618      	mov	r0, r3
 8002870:	f004 fdd6 	bl	8007420 <HAL_RCCEx_PeriphCLKConfig>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 800287a:	f7ff fc5b 	bl	8002134 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 800287e:	f003 fe45 	bl	800650c <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002882:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <HAL_PCD_MspInit+0xc0>)
 8002884:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002888:	4a11      	ldr	r2, [pc, #68]	@ (80028d0 <HAL_PCD_MspInit+0xc0>)
 800288a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800288e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002892:	4b0f      	ldr	r3, [pc, #60]	@ (80028d0 <HAL_PCD_MspInit+0xc0>)
 8002894:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002898:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 800289c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80028ae:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2100      	movs	r1, #0
 80028b4:	204a      	movs	r0, #74	@ 0x4a
 80028b6:	f000 fd79 	bl	80033ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80028ba:	204a      	movs	r0, #74	@ 0x4a
 80028bc:	f000 fd90 	bl	80033e0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 80028c0:	bf00      	nop
 80028c2:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40016000 	.word	0x40016000
 80028d0:	44020c00 	.word	0x44020c00

080028d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <NMI_Handler+0x4>

080028dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <HardFault_Handler+0x4>

080028e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <MemManage_Handler+0x4>

080028ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <BusFault_Handler+0x4>

080028f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <UsageFault_Handler+0x4>

080028fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800292a:	f000 fc1f 	bl	800316c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}

08002932 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002936:	2000      	movs	r0, #0
 8002938:	f000 fa78 	bl	8002e2c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}

08002940 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8002944:	4802      	ldr	r0, [pc, #8]	@ (8002950 <USB_DRD_FS_IRQHandler+0x10>)
 8002946:	f002 fa73 	bl	8004e30 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	2000047c 	.word	0x2000047c

08002954 <HASH_IRQHandler>:

/**
  * @brief This function handles HASH global interrupt.
  */
void HASH_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_IRQn 0 */

  /* USER CODE END HASH_IRQn 0 */
  HAL_HASH_IRQHandler(&hhash);
 8002958:	4802      	ldr	r0, [pc, #8]	@ (8002964 <HASH_IRQHandler+0x10>)
 800295a:	f001 f8e1 	bl	8003b20 <HAL_HASH_IRQHandler>
  /* USER CODE BEGIN HASH_IRQn 1 */

  /* USER CODE END HASH_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200001ec 	.word	0x200001ec

08002968 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	e00a      	b.n	8002990 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800297a:	f3af 8000 	nop.w
 800297e:	4601      	mov	r1, r0
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	60ba      	str	r2, [r7, #8]
 8002986:	b2ca      	uxtb	r2, r1
 8002988:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3301      	adds	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	dbf0      	blt.n	800297a <_read+0x12>
  }

  return len;
 8002998:	687b      	ldr	r3, [r7, #4]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	e009      	b.n	80029c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	60ba      	str	r2, [r7, #8]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fabb 	bl	8002f38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	3301      	adds	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	dbf1      	blt.n	80029b4 <_write+0x12>
  }
  return len;
 80029d0:	687b      	ldr	r3, [r7, #4]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <_close>:

int _close(int file)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a02:	605a      	str	r2, [r3, #4]
  return 0;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <_isatty>:

int _isatty(int file)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a1a:	2301      	movs	r3, #1
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a4c:	4a14      	ldr	r2, [pc, #80]	@ (8002aa0 <_sbrk+0x5c>)
 8002a4e:	4b15      	ldr	r3, [pc, #84]	@ (8002aa4 <_sbrk+0x60>)
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a58:	4b13      	ldr	r3, [pc, #76]	@ (8002aa8 <_sbrk+0x64>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a60:	4b11      	ldr	r3, [pc, #68]	@ (8002aa8 <_sbrk+0x64>)
 8002a62:	4a12      	ldr	r2, [pc, #72]	@ (8002aac <_sbrk+0x68>)
 8002a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a66:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <_sbrk+0x64>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d207      	bcs.n	8002a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a74:	f00f ff3a 	bl	80128ec <__errno>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	220c      	movs	r2, #12
 8002a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a82:	e009      	b.n	8002a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a84:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <_sbrk+0x64>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a8a:	4b07      	ldr	r3, [pc, #28]	@ (8002aa8 <_sbrk+0x64>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	4a05      	ldr	r2, [pc, #20]	@ (8002aa8 <_sbrk+0x64>)
 8002a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a96:	68fb      	ldr	r3, [r7, #12]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	200a0000 	.word	0x200a0000
 8002aa4:	00000500 	.word	0x00000500
 8002aa8:	20000a3c 	.word	0x20000a3c
 8002aac:	20011360 	.word	0x20011360

08002ab0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ab6:	4b35      	ldr	r3, [pc, #212]	@ (8002b8c <SystemInit+0xdc>)
 8002ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002abc:	4a33      	ldr	r2, [pc, #204]	@ (8002b8c <SystemInit+0xdc>)
 8002abe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ac2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8002ac6:	4b32      	ldr	r3, [pc, #200]	@ (8002b90 <SystemInit+0xe0>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002acc:	4b30      	ldr	r3, [pc, #192]	@ (8002b90 <SystemInit+0xe0>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8002b90 <SystemInit+0xe0>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8002ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b90 <SystemInit+0xe0>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	492c      	ldr	r1, [pc, #176]	@ (8002b90 <SystemInit+0xe0>)
 8002ade:	4b2d      	ldr	r3, [pc, #180]	@ (8002b94 <SystemInit+0xe4>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b90 <SystemInit+0xe0>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8002aea:	4b29      	ldr	r3, [pc, #164]	@ (8002b90 <SystemInit+0xe0>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8002af0:	4b27      	ldr	r3, [pc, #156]	@ (8002b90 <SystemInit+0xe0>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8002af6:	4b26      	ldr	r3, [pc, #152]	@ (8002b90 <SystemInit+0xe0>)
 8002af8:	4a27      	ldr	r2, [pc, #156]	@ (8002b98 <SystemInit+0xe8>)
 8002afa:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002afc:	4b24      	ldr	r3, [pc, #144]	@ (8002b90 <SystemInit+0xe0>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8002b02:	4b23      	ldr	r3, [pc, #140]	@ (8002b90 <SystemInit+0xe0>)
 8002b04:	4a24      	ldr	r2, [pc, #144]	@ (8002b98 <SystemInit+0xe8>)
 8002b06:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8002b08:	4b21      	ldr	r3, [pc, #132]	@ (8002b90 <SystemInit+0xe0>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8002b0e:	4b20      	ldr	r3, [pc, #128]	@ (8002b90 <SystemInit+0xe0>)
 8002b10:	4a21      	ldr	r2, [pc, #132]	@ (8002b98 <SystemInit+0xe8>)
 8002b12:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8002b14:	4b1e      	ldr	r3, [pc, #120]	@ (8002b90 <SystemInit+0xe0>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b90 <SystemInit+0xe0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002b90 <SystemInit+0xe0>)
 8002b20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002b26:	4b1a      	ldr	r3, [pc, #104]	@ (8002b90 <SystemInit+0xe0>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b2c:	4b17      	ldr	r3, [pc, #92]	@ (8002b8c <SystemInit+0xdc>)
 8002b2e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b32:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002b34:	4b19      	ldr	r3, [pc, #100]	@ (8002b9c <SystemInit+0xec>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002b3c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8002b44:	d003      	beq.n	8002b4e <SystemInit+0x9e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002b4c:	d117      	bne.n	8002b7e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8002b4e:	4b13      	ldr	r3, [pc, #76]	@ (8002b9c <SystemInit+0xec>)
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002b5a:	4b10      	ldr	r3, [pc, #64]	@ (8002b9c <SystemInit+0xec>)
 8002b5c:	4a10      	ldr	r2, [pc, #64]	@ (8002ba0 <SystemInit+0xf0>)
 8002b5e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8002b60:	4b0e      	ldr	r3, [pc, #56]	@ (8002b9c <SystemInit+0xec>)
 8002b62:	4a10      	ldr	r2, [pc, #64]	@ (8002ba4 <SystemInit+0xf4>)
 8002b64:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002b66:	4b0d      	ldr	r3, [pc, #52]	@ (8002b9c <SystemInit+0xec>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b9c <SystemInit+0xec>)
 8002b6c:	f043 0302 	orr.w	r3, r3, #2
 8002b70:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002b72:	4b0a      	ldr	r3, [pc, #40]	@ (8002b9c <SystemInit+0xec>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	4a09      	ldr	r2, [pc, #36]	@ (8002b9c <SystemInit+0xec>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	61d3      	str	r3, [r2, #28]
  }
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000ed00 	.word	0xe000ed00
 8002b90:	44020c00 	.word	0x44020c00
 8002b94:	eae2eae3 	.word	0xeae2eae3
 8002b98:	01010280 	.word	0x01010280
 8002b9c:	40022000 	.word	0x40022000
 8002ba0:	08192a3b 	.word	0x08192a3b
 8002ba4:	4c5d6e7f 	.word	0x4c5d6e7f

08002ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ba8:	480d      	ldr	r0, [pc, #52]	@ (8002be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002baa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002bac:	f7ff ff80 	bl	8002ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bb0:	480c      	ldr	r0, [pc, #48]	@ (8002be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bb2:	490d      	ldr	r1, [pc, #52]	@ (8002be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bec <LoopForever+0xe>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bb8:	e002      	b.n	8002bc0 <LoopCopyDataInit>

08002bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bbe:	3304      	adds	r3, #4

08002bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc4:	d3f9      	bcc.n	8002bba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8002bf4 <LoopForever+0x16>)
  movs r3, #0
 8002bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bcc:	e001      	b.n	8002bd2 <LoopFillZerobss>

08002bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd0:	3204      	adds	r2, #4

08002bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd4:	d3fb      	bcc.n	8002bce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002bd6:	f00f fe8f 	bl	80128f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bda:	f7fe fe99 	bl	8001910 <main>

08002bde <LoopForever>:

LoopForever:
    b LoopForever
 8002bde:	e7fe      	b.n	8002bde <LoopForever>
  ldr   r0, =_estack
 8002be0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002be8:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8002bec:	0801478c 	.word	0x0801478c
  ldr r2, =_sbss
 8002bf0:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8002bf4:	20011360 	.word	0x20011360

08002bf8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bf8:	e7fe      	b.n	8002bf8 <ADC1_IRQHandler>
	...

08002bfc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08c      	sub	sp, #48	@ 0x30
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d009      	beq.n	8002c24 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d006      	beq.n	8002c24 <BSP_LED_Init+0x28>
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d003      	beq.n	8002c24 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002c1c:	f06f 0301 	mvn.w	r3, #1
 8002c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c22:	e055      	b.n	8002cd0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d10f      	bne.n	8002c4a <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8002c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cdc <BSP_LED_Init+0xe0>)
 8002c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c30:	4a2a      	ldr	r2, [pc, #168]	@ (8002cdc <BSP_LED_Init+0xe0>)
 8002c32:	f043 0320 	orr.w	r3, r3, #32
 8002c36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c3a:	4b28      	ldr	r3, [pc, #160]	@ (8002cdc <BSP_LED_Init+0xe0>)
 8002c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	e021      	b.n	8002c8e <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10f      	bne.n	8002c70 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8002c50:	4b22      	ldr	r3, [pc, #136]	@ (8002cdc <BSP_LED_Init+0xe0>)
 8002c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c56:	4a21      	ldr	r2, [pc, #132]	@ (8002cdc <BSP_LED_Init+0xe0>)
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c60:	4b1e      	ldr	r3, [pc, #120]	@ (8002cdc <BSP_LED_Init+0xe0>)
 8002c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	e00e      	b.n	8002c8e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002c70:	4b1a      	ldr	r3, [pc, #104]	@ (8002cdc <BSP_LED_Init+0xe0>)
 8002c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c76:	4a19      	ldr	r2, [pc, #100]	@ (8002cdc <BSP_LED_Init+0xe0>)
 8002c78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c7c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c80:	4b16      	ldr	r3, [pc, #88]	@ (8002cdc <BSP_LED_Init+0xe0>)
 8002c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	4a13      	ldr	r2, [pc, #76]	@ (8002ce0 <BSP_LED_Init+0xe4>)
 8002c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c96:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce4 <BSP_LED_Init+0xe8>)
 8002ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cac:	f107 0218 	add.w	r2, r7, #24
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fce8 	bl	8003688 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce4 <BSP_LED_Init+0xe8>)
 8002cbc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	4a07      	ldr	r2, [pc, #28]	@ (8002ce0 <BSP_LED_Init+0xe4>)
 8002cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f000 fe2e 	bl	800392c <HAL_GPIO_WritePin>
  }

  return ret;
 8002cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3730      	adds	r7, #48	@ 0x30
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	44020c00 	.word	0x44020c00
 8002ce0:	08014714 	.word	0x08014714
 8002ce4:	2000000c 	.word	0x2000000c

08002ce8 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d009      	beq.n	8002d10 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d006      	beq.n	8002d10 <BSP_LED_Toggle+0x28>
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d003      	beq.n	8002d10 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002d08:	f06f 0301 	mvn.w	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	e00b      	b.n	8002d28 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	4a08      	ldr	r2, [pc, #32]	@ (8002d34 <BSP_LED_Toggle+0x4c>)
 8002d14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	4907      	ldr	r1, [pc, #28]	@ (8002d38 <BSP_LED_Toggle+0x50>)
 8002d1c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f000 fe1a 	bl	800395c <HAL_GPIO_TogglePin>
  }

  return ret;
 8002d28:	68fb      	ldr	r3, [r7, #12]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	2000000c 	.word	0x2000000c
 8002d38:	08014714 	.word	0x08014714

08002d3c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	460a      	mov	r2, r1
 8002d46:	71fb      	strb	r3, [r7, #7]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002d4c:	4b30      	ldr	r3, [pc, #192]	@ (8002e10 <BSP_PB_Init+0xd4>)
 8002d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d52:	4a2f      	ldr	r2, [pc, #188]	@ (8002e10 <BSP_PB_Init+0xd4>)
 8002d54:	f043 0304 	orr.w	r3, r3, #4
 8002d58:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e10 <BSP_PB_Init+0xd4>)
 8002d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002d6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d6e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002d70:	2302      	movs	r3, #2
 8002d72:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d74:	2302      	movs	r3, #2
 8002d76:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002d78:	79bb      	ldrb	r3, [r7, #6]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10c      	bne.n	8002d98 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	4a23      	ldr	r2, [pc, #140]	@ (8002e14 <BSP_PB_Init+0xd8>)
 8002d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8a:	f107 020c 	add.w	r2, r7, #12
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fc79 	bl	8003688 <HAL_GPIO_Init>
 8002d96:	e036      	b.n	8002e06 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002d98:	4b1f      	ldr	r3, [pc, #124]	@ (8002e18 <BSP_PB_Init+0xdc>)
 8002d9a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e14 <BSP_PB_Init+0xd8>)
 8002da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da4:	f107 020c 	add.w	r2, r7, #12
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fc6c 	bl	8003688 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002db0:	79fa      	ldrb	r2, [r7, #7]
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4a18      	ldr	r2, [pc, #96]	@ (8002e1c <BSP_PB_Init+0xe0>)
 8002dbc:	441a      	add	r2, r3
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	4917      	ldr	r1, [pc, #92]	@ (8002e20 <BSP_PB_Init+0xe4>)
 8002dc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	f000 fc01 	bl	80035d0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002dce:	79fa      	ldrb	r2, [r7, #7]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4a10      	ldr	r2, [pc, #64]	@ (8002e1c <BSP_PB_Init+0xe0>)
 8002dda:	1898      	adds	r0, r3, r2
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	4a11      	ldr	r2, [pc, #68]	@ (8002e24 <BSP_PB_Init+0xe8>)
 8002de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de4:	461a      	mov	r2, r3
 8002de6:	2100      	movs	r1, #0
 8002de8:	f000 fbc6 	bl	8003578 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002dec:	2018      	movs	r0, #24
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	4a0d      	ldr	r2, [pc, #52]	@ (8002e28 <BSP_PB_Init+0xec>)
 8002df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df6:	2200      	movs	r2, #0
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f000 fad7 	bl	80033ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002dfe:	2318      	movs	r3, #24
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 faed 	bl	80033e0 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3720      	adds	r7, #32
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	44020c00 	.word	0x44020c00
 8002e14:	20000018 	.word	0x20000018
 8002e18:	10110000 	.word	0x10110000
 8002e1c:	20000a40 	.word	0x20000a40
 8002e20:	0801471c 	.word	0x0801471c
 8002e24:	2000001c 	.word	0x2000001c
 8002e28:	20000020 	.word	0x20000020

08002e2c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002e36:	79fa      	ldrb	r2, [r7, #7]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4a04      	ldr	r2, [pc, #16]	@ (8002e54 <BSP_PB_IRQHandler+0x28>)
 8002e42:	4413      	add	r3, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fbd7 	bl	80035f8 <HAL_EXTI_IRQHandler>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000a40 	.word	0x20000a40

08002e58 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	6039      	str	r1, [r7, #0]
 8002e7a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002e86:	f06f 0301 	mvn.w	r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e018      	b.n	8002ec0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	2294      	movs	r2, #148	@ 0x94
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	4a0d      	ldr	r2, [pc, #52]	@ (8002ecc <BSP_COM_Init+0x5c>)
 8002e98:	4413      	add	r3, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f870 	bl	8002f80 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	2294      	movs	r2, #148	@ 0x94
 8002ea4:	fb02 f303 	mul.w	r3, r2, r3
 8002ea8:	4a08      	ldr	r2, [pc, #32]	@ (8002ecc <BSP_COM_Init+0x5c>)
 8002eaa:	4413      	add	r3, r2
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f80e 	bl	8002ed0 <MX_USART_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002eba:	f06f 0303 	mvn.w	r3, #3
 8002ebe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000a4c 	.word	0x20000a4c

08002ed0 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8002eda:	4b16      	ldr	r3, [pc, #88]	@ (8002f34 <MX_USART_Init+0x64>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	220c      	movs	r2, #12
 8002eee:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	895b      	ldrh	r3, [r3, #10]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	891b      	ldrh	r3, [r3, #8]
 8002f06:	461a      	mov	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	899b      	ldrh	r3, [r3, #12]
 8002f10:	461a      	mov	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002f1c:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f00a f896 	bl	800d056 <HAL_UART_Init>
 8002f2a:	4603      	mov	r3, r0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000008 	.word	0x20000008

08002f38 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002f40:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <__io_putchar+0x30>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	2394      	movs	r3, #148	@ 0x94
 8002f48:	fb02 f303 	mul.w	r3, r2, r3
 8002f4c:	4a07      	ldr	r2, [pc, #28]	@ (8002f6c <__io_putchar+0x34>)
 8002f4e:	1898      	adds	r0, r3, r2
 8002f50:	1d39      	adds	r1, r7, #4
 8002f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f56:	2201      	movs	r2, #1
 8002f58:	f00a f8cd 	bl	800d0f6 <HAL_UART_Transmit>
  return ch;
 8002f5c:	687b      	ldr	r3, [r7, #4]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000ae0 	.word	0x20000ae0
 8002f6c:	20000a4c 	.word	0x20000a4c

08002f70 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7ff ff6f 	bl	8002e58 <BSP_PB_Callback>
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	@ 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002f88:	4b27      	ldr	r3, [pc, #156]	@ (8003028 <COM1_MspInit+0xa8>)
 8002f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f8e:	4a26      	ldr	r2, [pc, #152]	@ (8003028 <COM1_MspInit+0xa8>)
 8002f90:	f043 0308 	orr.w	r3, r3, #8
 8002f94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f98:	4b23      	ldr	r3, [pc, #140]	@ (8003028 <COM1_MspInit+0xa8>)
 8002f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002fa6:	4b20      	ldr	r3, [pc, #128]	@ (8003028 <COM1_MspInit+0xa8>)
 8002fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fac:	4a1e      	ldr	r2, [pc, #120]	@ (8003028 <COM1_MspInit+0xa8>)
 8002fae:	f043 0308 	orr.w	r3, r3, #8
 8002fb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8003028 <COM1_MspInit+0xa8>)
 8002fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002fc4:	4b18      	ldr	r3, [pc, #96]	@ (8003028 <COM1_MspInit+0xa8>)
 8002fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fca:	4a17      	ldr	r2, [pc, #92]	@ (8003028 <COM1_MspInit+0xa8>)
 8002fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fd0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002fd4:	4b14      	ldr	r3, [pc, #80]	@ (8003028 <COM1_MspInit+0xa8>)
 8002fd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8002fe2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fe6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002fec:	2302      	movs	r3, #2
 8002fee:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002ff4:	2307      	movs	r3, #7
 8002ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002ff8:	f107 0314 	add.w	r3, r7, #20
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	480b      	ldr	r0, [pc, #44]	@ (800302c <COM1_MspInit+0xac>)
 8003000:	f000 fb42 	bl	8003688 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8003004:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003008:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800300e:	2307      	movs	r3, #7
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8003012:	f107 0314 	add.w	r3, r7, #20
 8003016:	4619      	mov	r1, r3
 8003018:	4804      	ldr	r0, [pc, #16]	@ (800302c <COM1_MspInit+0xac>)
 800301a:	f000 fb35 	bl	8003688 <HAL_GPIO_Init>
}
 800301e:	bf00      	nop
 8003020:	3728      	adds	r7, #40	@ 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	44020c00 	.word	0x44020c00
 800302c:	42020c00 	.word	0x42020c00

08003030 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003034:	2003      	movs	r0, #3
 8003036:	f000 f9ae 	bl	8003396 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800303a:	f004 f867 	bl	800710c <HAL_RCC_GetSysClockFreq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <HAL_Init+0x44>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	490b      	ldr	r1, [pc, #44]	@ (8003078 <HAL_Init+0x48>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
 8003050:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <HAL_Init+0x4c>)
 8003052:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003054:	2004      	movs	r0, #4
 8003056:	f000 fa01 	bl	800345c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800305a:	200f      	movs	r0, #15
 800305c:	f000 f810 	bl	8003080 <HAL_InitTick>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e002      	b.n	8003070 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800306a:	f7ff f869 	bl	8002140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	44020c00 	.word	0x44020c00
 8003078:	080146fc 	.word	0x080146fc
 800307c:	20000004 	.word	0x20000004

08003080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800308c:	4b33      	ldr	r3, [pc, #204]	@ (800315c <HAL_InitTick+0xdc>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e05c      	b.n	8003152 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003098:	4b31      	ldr	r3, [pc, #196]	@ (8003160 <HAL_InitTick+0xe0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d10c      	bne.n	80030be <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80030a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003164 <HAL_InitTick+0xe4>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b2c      	ldr	r3, [pc, #176]	@ (800315c <HAL_InitTick+0xdc>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	4619      	mov	r1, r3
 80030ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e037      	b.n	800312e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80030be:	f000 fa25 	bl	800350c <HAL_SYSTICK_GetCLKSourceConfig>
 80030c2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d023      	beq.n	8003112 <HAL_InitTick+0x92>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d82d      	bhi.n	800312c <HAL_InitTick+0xac>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_InitTick+0x5e>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d00d      	beq.n	80030f8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80030dc:	e026      	b.n	800312c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80030de:	4b21      	ldr	r3, [pc, #132]	@ (8003164 <HAL_InitTick+0xe4>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b1e      	ldr	r3, [pc, #120]	@ (800315c <HAL_InitTick+0xdc>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	4619      	mov	r1, r3
 80030e8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80030ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	60fb      	str	r3, [r7, #12]
        break;
 80030f6:	e01a      	b.n	800312e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80030f8:	4b18      	ldr	r3, [pc, #96]	@ (800315c <HAL_InitTick+0xdc>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003102:	fbb3 f3f2 	udiv	r3, r3, r2
 8003106:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	60fb      	str	r3, [r7, #12]
        break;
 8003110:	e00d      	b.n	800312e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003112:	4b12      	ldr	r3, [pc, #72]	@ (800315c <HAL_InitTick+0xdc>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800311c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003120:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003124:	fbb2 f3f3 	udiv	r3, r2, r3
 8003128:	60fb      	str	r3, [r7, #12]
        break;
 800312a:	e000      	b.n	800312e <HAL_InitTick+0xae>
        break;
 800312c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f972 	bl	8003418 <HAL_SYSTICK_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e009      	b.n	8003152 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800313e:	2200      	movs	r2, #0
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	f04f 30ff 	mov.w	r0, #4294967295
 8003146:	f000 f931 	bl	80033ac <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800314a:	4a07      	ldr	r2, [pc, #28]	@ (8003168 <HAL_InitTick+0xe8>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000028 	.word	0x20000028
 8003160:	e000e010 	.word	0xe000e010
 8003164:	20000004 	.word	0x20000004
 8003168:	20000024 	.word	0x20000024

0800316c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003170:	4b06      	ldr	r3, [pc, #24]	@ (800318c <HAL_IncTick+0x20>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <HAL_IncTick+0x24>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4413      	add	r3, r2
 800317c:	4a04      	ldr	r2, [pc, #16]	@ (8003190 <HAL_IncTick+0x24>)
 800317e:	6013      	str	r3, [r2, #0]
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000028 	.word	0x20000028
 8003190:	20000ae4 	.word	0x20000ae4

08003194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return uwTick;
 8003198:	4b03      	ldr	r3, [pc, #12]	@ (80031a8 <HAL_GetTick+0x14>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000ae4 	.word	0x20000ae4

080031ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031b4:	f7ff ffee 	bl	8003194 <HAL_GetTick>
 80031b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d005      	beq.n	80031d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031c6:	4b0a      	ldr	r3, [pc, #40]	@ (80031f0 <HAL_Delay+0x44>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031d2:	bf00      	nop
 80031d4:	f7ff ffde 	bl	8003194 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d8f7      	bhi.n	80031d4 <HAL_Delay+0x28>
  {
  }
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000028 	.word	0x20000028

080031f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003204:	4b0c      	ldr	r3, [pc, #48]	@ (8003238 <__NVIC_SetPriorityGrouping+0x44>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003210:	4013      	ands	r3, r2
 8003212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800321c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003226:	4a04      	ldr	r2, [pc, #16]	@ (8003238 <__NVIC_SetPriorityGrouping+0x44>)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	60d3      	str	r3, [r2, #12]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	e000ed00 	.word	0xe000ed00

0800323c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003240:	4b04      	ldr	r3, [pc, #16]	@ (8003254 <__NVIC_GetPriorityGrouping+0x18>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	0a1b      	lsrs	r3, r3, #8
 8003246:	f003 0307 	and.w	r3, r3, #7
}
 800324a:	4618      	mov	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003266:	2b00      	cmp	r3, #0
 8003268:	db0b      	blt.n	8003282 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	f003 021f 	and.w	r2, r3, #31
 8003270:	4907      	ldr	r1, [pc, #28]	@ (8003290 <__NVIC_EnableIRQ+0x38>)
 8003272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	2001      	movs	r0, #1
 800327a:	fa00 f202 	lsl.w	r2, r0, r2
 800327e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000e100 	.word	0xe000e100

08003294 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800329e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	db12      	blt.n	80032cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	490a      	ldr	r1, [pc, #40]	@ (80032d8 <__NVIC_DisableIRQ+0x44>)
 80032ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	2001      	movs	r0, #1
 80032b6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ba:	3320      	adds	r3, #32
 80032bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80032c0:	f3bf 8f4f 	dsb	sy
}
 80032c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032c6:	f3bf 8f6f 	isb	sy
}
 80032ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000e100 	.word	0xe000e100

080032dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	6039      	str	r1, [r7, #0]
 80032e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	db0a      	blt.n	8003306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	490c      	ldr	r1, [pc, #48]	@ (8003328 <__NVIC_SetPriority+0x4c>)
 80032f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032fa:	0112      	lsls	r2, r2, #4
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	440b      	add	r3, r1
 8003300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003304:	e00a      	b.n	800331c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	4908      	ldr	r1, [pc, #32]	@ (800332c <__NVIC_SetPriority+0x50>)
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	3b04      	subs	r3, #4
 8003314:	0112      	lsls	r2, r2, #4
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	440b      	add	r3, r1
 800331a:	761a      	strb	r2, [r3, #24]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	e000e100 	.word	0xe000e100
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003330:	b480      	push	{r7}
 8003332:	b089      	sub	sp, #36	@ 0x24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f1c3 0307 	rsb	r3, r3, #7
 800334a:	2b04      	cmp	r3, #4
 800334c:	bf28      	it	cs
 800334e:	2304      	movcs	r3, #4
 8003350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3304      	adds	r3, #4
 8003356:	2b06      	cmp	r3, #6
 8003358:	d902      	bls.n	8003360 <NVIC_EncodePriority+0x30>
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3b03      	subs	r3, #3
 800335e:	e000      	b.n	8003362 <NVIC_EncodePriority+0x32>
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	f04f 32ff 	mov.w	r2, #4294967295
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43da      	mvns	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	401a      	ands	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003378:	f04f 31ff 	mov.w	r1, #4294967295
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	43d9      	mvns	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003388:	4313      	orrs	r3, r2
         );
}
 800338a:	4618      	mov	r0, r3
 800338c:	3724      	adds	r7, #36	@ 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ff28 	bl	80031f4 <__NVIC_SetPriorityGrouping>
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033ba:	f7ff ff3f 	bl	800323c <__NVIC_GetPriorityGrouping>
 80033be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	6978      	ldr	r0, [r7, #20]
 80033c6:	f7ff ffb3 	bl	8003330 <NVIC_EncodePriority>
 80033ca:	4602      	mov	r2, r0
 80033cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ff82 	bl	80032dc <__NVIC_SetPriority>
}
 80033d8:	bf00      	nop
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ff32 	bl	8003258 <__NVIC_EnableIRQ>
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff ff42 	bl	8003294 <__NVIC_DisableIRQ>
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003428:	d301      	bcc.n	800342e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800342a:	2301      	movs	r3, #1
 800342c:	e00d      	b.n	800344a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800342e:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <HAL_SYSTICK_Config+0x40>)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3b01      	subs	r3, #1
 8003434:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003436:	4b08      	ldr	r3, [pc, #32]	@ (8003458 <HAL_SYSTICK_Config+0x40>)
 8003438:	2200      	movs	r2, #0
 800343a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800343c:	4b06      	ldr	r3, [pc, #24]	@ (8003458 <HAL_SYSTICK_Config+0x40>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a05      	ldr	r2, [pc, #20]	@ (8003458 <HAL_SYSTICK_Config+0x40>)
 8003442:	f043 0303 	orr.w	r3, r3, #3
 8003446:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	e000e010 	.word	0xe000e010

0800345c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b04      	cmp	r3, #4
 8003468:	d844      	bhi.n	80034f4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800346a:	a201      	add	r2, pc, #4	@ (adr r2, 8003470 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800346c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003470:	08003493 	.word	0x08003493
 8003474:	080034b1 	.word	0x080034b1
 8003478:	080034d3 	.word	0x080034d3
 800347c:	080034f5 	.word	0x080034f5
 8003480:	08003485 	.word	0x08003485
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003484:	4b1f      	ldr	r3, [pc, #124]	@ (8003504 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1e      	ldr	r2, [pc, #120]	@ (8003504 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800348a:	f043 0304 	orr.w	r3, r3, #4
 800348e:	6013      	str	r3, [r2, #0]
      break;
 8003490:	e031      	b.n	80034f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003492:	4b1c      	ldr	r3, [pc, #112]	@ (8003504 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1b      	ldr	r2, [pc, #108]	@ (8003504 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003498:	f023 0304 	bic.w	r3, r3, #4
 800349c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800349e:	4b1a      	ldr	r3, [pc, #104]	@ (8003508 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034a4:	4a18      	ldr	r2, [pc, #96]	@ (8003508 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034a6:	f023 030c 	bic.w	r3, r3, #12
 80034aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80034ae:	e022      	b.n	80034f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80034b0:	4b14      	ldr	r3, [pc, #80]	@ (8003504 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a13      	ldr	r2, [pc, #76]	@ (8003504 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034b6:	f023 0304 	bic.w	r3, r3, #4
 80034ba:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80034bc:	4b12      	ldr	r3, [pc, #72]	@ (8003508 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034c2:	f023 030c 	bic.w	r3, r3, #12
 80034c6:	4a10      	ldr	r2, [pc, #64]	@ (8003508 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034c8:	f043 0304 	orr.w	r3, r3, #4
 80034cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80034d0:	e011      	b.n	80034f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80034d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003504 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003504 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034d8:	f023 0304 	bic.w	r3, r3, #4
 80034dc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80034de:	4b0a      	ldr	r3, [pc, #40]	@ (8003508 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034e4:	f023 030c 	bic.w	r3, r3, #12
 80034e8:	4a07      	ldr	r2, [pc, #28]	@ (8003508 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034ea:	f043 0308 	orr.w	r3, r3, #8
 80034ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80034f2:	e000      	b.n	80034f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80034f4:	bf00      	nop
  }
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	e000e010 	.word	0xe000e010
 8003508:	44020c00 	.word	0x44020c00

0800350c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003512:	4b17      	ldr	r3, [pc, #92]	@ (8003570 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800351e:	2304      	movs	r3, #4
 8003520:	607b      	str	r3, [r7, #4]
 8003522:	e01e      	b.n	8003562 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8003524:	4b13      	ldr	r3, [pc, #76]	@ (8003574 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8003526:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b08      	cmp	r3, #8
 8003534:	d00f      	beq.n	8003556 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d80f      	bhi.n	800355c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d003      	beq.n	8003550 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003548:	e008      	b.n	800355c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]
        break;
 800354e:	e008      	b.n	8003562 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003550:	2301      	movs	r3, #1
 8003552:	607b      	str	r3, [r7, #4]
        break;
 8003554:	e005      	b.n	8003562 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003556:	2302      	movs	r3, #2
 8003558:	607b      	str	r3, [r7, #4]
        break;
 800355a:	e002      	b.n	8003562 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800355c:	2300      	movs	r3, #0
 800355e:	607b      	str	r3, [r7, #4]
        break;
 8003560:	bf00      	nop
    }
  }
  return systick_source;
 8003562:	687b      	ldr	r3, [r7, #4]
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000e010 	.word	0xe000e010
 8003574:	44020c00 	.word	0x44020c00

08003578 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	460b      	mov	r3, r1
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800358a:	7afb      	ldrb	r3, [r7, #11]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d011      	beq.n	80035b4 <HAL_EXTI_RegisterCallback+0x3c>
 8003590:	2b02      	cmp	r3, #2
 8003592:	dc13      	bgt.n	80035bc <HAL_EXTI_RegisterCallback+0x44>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_EXTI_RegisterCallback+0x26>
 8003598:	2b01      	cmp	r3, #1
 800359a:	d007      	beq.n	80035ac <HAL_EXTI_RegisterCallback+0x34>
 800359c:	e00e      	b.n	80035bc <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	609a      	str	r2, [r3, #8]
      break;
 80035aa:	e00a      	b.n	80035c2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	605a      	str	r2, [r3, #4]
      break;
 80035b2:	e006      	b.n	80035c2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	609a      	str	r2, [r3, #8]
      break;
 80035ba:	e002      	b.n	80035c2 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	75fb      	strb	r3, [r7, #23]
      break;
 80035c0:	bf00      	nop
  }

  return status;
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e003      	b.n	80035ec <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80035ea:	2300      	movs	r3, #0
  }
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 031f 	and.w	r3, r3, #31
 8003614:	2201      	movs	r2, #1
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	4b17      	ldr	r3, [pc, #92]	@ (8003680 <HAL_EXTI_IRQHandler+0x88>)
 8003622:	4413      	add	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4013      	ands	r3, r2
 800362e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	4b0d      	ldr	r3, [pc, #52]	@ (8003684 <HAL_EXTI_IRQHandler+0x8c>)
 8003650:	4413      	add	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	4798      	blx	r3
    }
  }
}
 8003678:	bf00      	nop
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	4402200c 	.word	0x4402200c
 8003684:	44022010 	.word	0x44022010

08003688 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003696:	e136      	b.n	8003906 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	2101      	movs	r1, #1
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	fa01 f303 	lsl.w	r3, r1, r3
 80036a4:	4013      	ands	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 8128 	beq.w	8003900 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d003      	beq.n	80036c0 <HAL_GPIO_Init+0x38>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b12      	cmp	r3, #18
 80036be:	d125      	bne.n	800370c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	08da      	lsrs	r2, r3, #3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3208      	adds	r2, #8
 80036c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	220f      	movs	r2, #15
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4013      	ands	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f003 020f 	and.w	r2, r3, #15
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	08da      	lsrs	r2, r3, #3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3208      	adds	r2, #8
 8003706:	6979      	ldr	r1, [r7, #20]
 8003708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	2203      	movs	r2, #3
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4013      	ands	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0203 	and.w	r2, r3, #3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d00b      	beq.n	8003760 <HAL_GPIO_Init+0xd8>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d007      	beq.n	8003760 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003754:	2b11      	cmp	r3, #17
 8003756:	d003      	beq.n	8003760 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b12      	cmp	r3, #18
 800375e:	d130      	bne.n	80037c2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	2203      	movs	r2, #3
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4013      	ands	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003796:	2201      	movs	r2, #1
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4013      	ands	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	091b      	lsrs	r3, r3, #4
 80037ac:	f003 0201 	and.w	r2, r3, #1
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d017      	beq.n	80037fa <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	2203      	movs	r2, #3
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4013      	ands	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d07c      	beq.n	8003900 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003806:	4a47      	ldr	r2, [pc, #284]	@ (8003924 <HAL_GPIO_Init+0x29c>)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	089b      	lsrs	r3, r3, #2
 800380c:	3318      	adds	r3, #24
 800380e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003812:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	220f      	movs	r2, #15
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4013      	ands	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0a9a      	lsrs	r2, r3, #10
 800382e:	4b3e      	ldr	r3, [pc, #248]	@ (8003928 <HAL_GPIO_Init+0x2a0>)
 8003830:	4013      	ands	r3, r2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	f002 0203 	and.w	r2, r2, #3
 8003838:	00d2      	lsls	r2, r2, #3
 800383a:	4093      	lsls	r3, r2
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003842:	4938      	ldr	r1, [pc, #224]	@ (8003924 <HAL_GPIO_Init+0x29c>)
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	3318      	adds	r3, #24
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003850:	4b34      	ldr	r3, [pc, #208]	@ (8003924 <HAL_GPIO_Init+0x29c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	43db      	mvns	r3, r3
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4013      	ands	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003874:	4a2b      	ldr	r2, [pc, #172]	@ (8003924 <HAL_GPIO_Init+0x29c>)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800387a:	4b2a      	ldr	r3, [pc, #168]	@ (8003924 <HAL_GPIO_Init+0x29c>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	43db      	mvns	r3, r3
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4013      	ands	r3, r2
 8003888:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800389e:	4a21      	ldr	r2, [pc, #132]	@ (8003924 <HAL_GPIO_Init+0x29c>)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80038a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003924 <HAL_GPIO_Init+0x29c>)
 80038a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038aa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4013      	ands	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80038ca:	4a16      	ldr	r2, [pc, #88]	@ (8003924 <HAL_GPIO_Init+0x29c>)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80038d2:	4b14      	ldr	r3, [pc, #80]	@ (8003924 <HAL_GPIO_Init+0x29c>)
 80038d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038d8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	43db      	mvns	r3, r3
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4013      	ands	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80038f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003924 <HAL_GPIO_Init+0x29c>)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	3301      	adds	r3, #1
 8003904:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	f47f aec1 	bne.w	8003698 <HAL_GPIO_Init+0x10>
  }
}
 8003916:	bf00      	nop
 8003918:	bf00      	nop
 800391a:	371c      	adds	r7, #28
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	44022000 	.word	0x44022000
 8003928:	002f7f7f 	.word	0x002f7f7f

0800392c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	807b      	strh	r3, [r7, #2]
 8003938:	4613      	mov	r3, r2
 800393a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800393c:	787b      	ldrb	r3, [r7, #1]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003942:	887a      	ldrh	r2, [r7, #2]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003948:	e002      	b.n	8003950 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800396e:	887a      	ldrh	r2, [r7, #2]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4013      	ands	r3, r2
 8003974:	041a      	lsls	r2, r3, #16
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	43d9      	mvns	r1, r3
 800397a:	887b      	ldrh	r3, [r7, #2]
 800397c:	400b      	ands	r3, r1
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	619a      	str	r2, [r3, #24]
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e02a      	b.n	80039f8 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fe fbca 	bl	8002150 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 80039d2:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	430b      	orrs	r3, r1
 80039de:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_HASH_DeInit>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_DeInit(HASH_HandleTypeDef *hhash)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the HASH handle allocation */
  if (hhash == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_HASH_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e015      	b.n	8003a3e <HAL_HASH_DeInit+0x3e>
  }

  /* Change the default HASH phase */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Reset HashInCount */
  hhash->HashInCount = 0U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	61da      	str	r2, [r3, #28]

  /* Reset multi buffers accumulation flag */
  hhash->Accumulation = 0U;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DeInit the low level hardware */
  hhash->MspDeInitCallback(hhash);
#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_HASH_MspDeInit(hhash);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fe fbb4 	bl	8002194 <HAL_HASH_MspDeInit>
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_RESET;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  __HAL_UNLOCK(hhash);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_HASH_Start_IT>:
  * @param  pOutBuffer pointer to the computed digest.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Start_IT(HASH_HandleTypeDef *hhash, const uint8_t *const pInBuffer, uint32_t Size,
                                    uint8_t *const pOutBuffer)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b086      	sub	sp, #24
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_HASH_StateTypeDef temp_state;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_HASH_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e05c      	b.n	8003b18 <HAL_HASH_Start_IT+0xd2>
  }

  /* Check if peripheral is ready to start process or suspended */
  temp_state = hhash->State;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a64:	75bb      	strb	r3, [r7, #22]
  if ((temp_state == HAL_HASH_STATE_READY) || (temp_state == HAL_HASH_STATE_SUSPENDED))
 8003a66:	7dbb      	ldrb	r3, [r7, #22]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d002      	beq.n	8003a72 <HAL_HASH_Start_IT+0x2c>
 8003a6c:	7dbb      	ldrb	r3, [r7, #22]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d14f      	bne.n	8003b12 <HAL_HASH_Start_IT+0xcc>
  {
    /* Process Locked */
    __HAL_LOCK(hhash);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_HASH_Start_IT+0x3a>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e04b      	b.n	8003b18 <HAL_HASH_Start_IT+0xd2>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    if (hhash->State == HAL_HASH_STATE_READY)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d128      	bne.n	8003ae6 <HAL_HASH_Start_IT+0xa0>
    {
      /* Reset HashInCount and Initialize Size, pHashInBuffPtr and pHashOutBuffPtr parameters */
      hhash->HashInCount =  0U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	61da      	str	r2, [r3, #28]
      hhash->pHashInBuffPtr = pInBuffer;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	615a      	str	r2, [r3, #20]
      hhash->pHashOutBuffPtr = pOutBuffer;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	619a      	str	r2, [r3, #24]
      hhash->Size = Size;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	621a      	str	r2, [r3, #32]

      /* Set HASH mode */
      CLEAR_BIT(hhash->Instance->CR, HASH_CR_MODE);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aba:	601a      	str	r2, [r3, #0]
      /* Reset the HASH processor core */
      MODIFY_REG(hhash->Instance->CR, HASH_CR_INIT, HASH_CR_INIT);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0204 	orr.w	r2, r2, #4
 8003aca:	601a      	str	r2, [r3, #0]

      /* Configure the number of valid bits in last word of the message */
      MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (Size % 4U));
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f023 011f 	bic.w	r1, r3, #31
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	00da      	lsls	r2, r3, #3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	609a      	str	r2, [r3, #8]
    }
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_BUSY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Set the phase */
    hhash->Phase = HAL_HASH_PHASE_PROCESS;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    /* Enable the specified HASH interrupt*/
    __HAL_HASH_ENABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6a1a      	ldr	r2, [r3, #32]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 0203 	orr.w	r2, r2, #3
 8003b04:	621a      	str	r2, [r3, #32]

    status = HASH_WriteData_IT(hhash);
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f8c3 	bl	8003c92 <HASH_WriteData_IT>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	75fb      	strb	r3, [r7, #23]
 8003b10:	e001      	b.n	8003b16 <HAL_HASH_Start_IT+0xd0>
  }
  else
  {
    status =  HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
 8003b14:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_HASH_IRQHandler>:
  * @param hhash HASH handle.
  * @note  HAL_HASH_IRQHandler() handles interrupts in HMAC processing as well.
  * @retval None
  */
void HAL_HASH_IRQHandler(HASH_HandleTypeDef *hhash)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t itsource = hhash->Instance->IMR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	617b      	str	r3, [r7, #20]
  uint32_t itflag   = hhash->Instance->SR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	613b      	str	r3, [r7, #16]

  /* If digest is ready */
  if ((itflag & HASH_FLAG_DCIS) == HASH_FLAG_DCIS)
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d062      	beq.n	8003c08 <HAL_HASH_IRQHandler+0xe8>
  {
    /* Read the digest */
    HASH_GetDigest(hhash, hhash->pHashOutBuffPtr, HASH_DIGEST_LENGTH(hhash));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6999      	ldr	r1, [r3, #24]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d03d      	beq.n	8003bd0 <HAL_HASH_IRQHandler+0xb0>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b62:	d033      	beq.n	8003bcc <HAL_HASH_IRQHandler+0xac>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b6e:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8003b72:	d029      	beq.n	8003bc8 <HAL_HASH_IRQHandler+0xa8>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b7e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b82:	d01f      	beq.n	8003bc4 <HAL_HASH_IRQHandler+0xa4>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b8e:	f5b3 1fd0 	cmp.w	r3, #1703936	@ 0x1a0000
 8003b92:	d015      	beq.n	8003bc0 <HAL_HASH_IRQHandler+0xa0>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b9e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003ba2:	d00b      	beq.n	8003bbc <HAL_HASH_IRQHandler+0x9c>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003bae:	f5b3 1ff0 	cmp.w	r3, #1966080	@ 0x1e0000
 8003bb2:	d101      	bne.n	8003bb8 <HAL_HASH_IRQHandler+0x98>
 8003bb4:	2340      	movs	r3, #64	@ 0x40
 8003bb6:	e00c      	b.n	8003bd2 <HAL_HASH_IRQHandler+0xb2>
 8003bb8:	2314      	movs	r3, #20
 8003bba:	e00a      	b.n	8003bd2 <HAL_HASH_IRQHandler+0xb2>
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	e008      	b.n	8003bd2 <HAL_HASH_IRQHandler+0xb2>
 8003bc0:	231c      	movs	r3, #28
 8003bc2:	e006      	b.n	8003bd2 <HAL_HASH_IRQHandler+0xb2>
 8003bc4:	2330      	movs	r3, #48	@ 0x30
 8003bc6:	e004      	b.n	8003bd2 <HAL_HASH_IRQHandler+0xb2>
 8003bc8:	2320      	movs	r3, #32
 8003bca:	e002      	b.n	8003bd2 <HAL_HASH_IRQHandler+0xb2>
 8003bcc:	231c      	movs	r3, #28
 8003bce:	e000      	b.n	8003bd2 <HAL_HASH_IRQHandler+0xb2>
 8003bd0:	2314      	movs	r3, #20
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fb73 	bl	80042c0 <HASH_GetDigest>

    /* Disable Interrupts */
    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6a1a      	ldr	r2, [r3, #32]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0203 	bic.w	r2, r2, #3
 8003be8:	621a      	str	r2, [r3, #32]
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Reset HASH state machine */
    hhash->Phase = HAL_HASH_PHASE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    /* Process Unlocked */
    __HAL_UNLOCK(hhash);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    /* Call digest computation complete call back */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
    hhash->DgstCpltCallback(hhash);
#else
    HAL_HASH_DgstCpltCallback(hhash);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f823 	bl	8003c4e <HAL_HASH_DgstCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

  }
  /* If Peripheral ready to accept new data */
  if ((itflag & HASH_FLAG_DINIS) == HASH_FLAG_DINIS)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00f      	beq.n	8003c32 <HAL_HASH_IRQHandler+0x112>
  {
    if ((itsource & HASH_IT_DINI) == HASH_IT_DINI)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_HASH_IRQHandler+0x112>
    {
      status = HASH_WriteData_IT(hhash);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f838 	bl	8003c92 <HASH_WriteData_IT>
 8003c22:	4603      	mov	r3, r0
 8003c24:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_HASH_IRQHandler+0x112>
      {
        /* Call error callback */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
        hhash->ErrorCallback(hhash);
#else
        HAL_HASH_ErrorCallback(hhash);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f818 	bl	8003c62 <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003c32:	bf00      	nop
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_HASH_InCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_InCpltCallback(HASH_HandleTypeDef *hhash)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_InCpltCallback() can be implemented in the user file.
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <HAL_HASH_DgstCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_DgstCpltCallback(HASH_HandleTypeDef *hhash)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_DgstCpltCallback() can be implemented in the user file.
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_HASH_ErrorCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_ErrorCallback(HASH_HandleTypeDef *hhash)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_ErrorCallback() can be implemented in the user file.
   */
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <HAL_HASH_GetState>:
  * @note   The API yields the current state of the handle (BUSY, READY,...).
  * @param  hhash HASH handle.
  * @retval HAL HASH state
  */
HAL_HASH_StateTypeDef HAL_HASH_GetState(const HASH_HandleTypeDef *hhash)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  return hhash->State;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c84:	b2db      	uxtb	r3, r3
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HASH_WriteData_IT>:
  * @brief  Feed the input buffer to the HASH peripheral in interruption mode.
  * @param  hhash HASH handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WriteData_IT(HASH_HandleTypeDef *hhash)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b088      	sub	sp, #32
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  uint32_t buffercounter;
  uint32_t count;
  __IO uint32_t keyaddr = (uint32_t)(hhash->pHashKeyBuffPtr);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	613b      	str	r3, [r7, #16]
  __IO uint32_t inputaddr = (uint32_t)(hhash->pHashInBuffPtr);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	60fb      	str	r3, [r7, #12]
  uint32_t nbbytePartialHash  = (((hhash->Instance->SR) >> 16U) * 4U); /* Nb byte  to enter in HASH fifo to trig
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cac:	0c1b      	lsrs	r3, r3, #16
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	617b      	str	r3, [r7, #20]
                                                                      a partial HASH computation*/

  if (hhash->State == HAL_HASH_STATE_BUSY)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	f040 82ea 	bne.w	8004294 <HASH_WriteData_IT+0x602>
  {
    if ((hhash->Instance->CR & HASH_CR_MODE) == 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 80b3 	bne.w	8003e36 <HASH_WriteData_IT+0x1a4>
      }
      else
      {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	441a      	add	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d258      	bcs.n	8003d92 <HASH_WriteData_IT+0x100>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61fb      	str	r3, [r7, #28]
 8003ce4:	e015      	b.n	8003d12 <HASH_WriteData_IT+0x80>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	1d1a      	adds	r2, r3, #4
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	1d1a      	adds	r2, r3, #4
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	615a      	str	r2, [r3, #20]
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d3e5      	bcc.n	8003ce6 <HASH_WriteData_IT+0x54>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 8003d1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d1e:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d117      	bne.n	8003d5c <HASH_WriteData_IT+0xca>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6a1a      	ldr	r2, [r3, #32]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0203 	bic.w	r2, r2, #3
 8003d3a:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d40:	f043 0204 	orr.w	r2, r3, #4
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e2ad      	b.n	80042b8 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0da      	beq.n	8003d20 <HASH_WriteData_IT+0x8e>
 8003d6a:	e2a4      	b.n	80042b6 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < hhash->Size)
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	1d1a      	adds	r2, r3, #4
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	1d1a      	adds	r2, r3, #4
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	615a      	str	r2, [r3, #20]
          while ((hhash->HashInCount) < hhash->Size)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69da      	ldr	r2, [r3, #28]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d3e6      	bcc.n	8003d6c <HASH_WriteData_IT+0xda>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
          /*Call registered Input complete callback*/
          hhash->InCpltCallback(hhash);
#else
          /*Call legacy weak Input complete callback*/
          HAL_HASH_InCpltCallback(hhash);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff ff4b 	bl	8003c3a <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
          if (hhash->Accumulation == 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d138      	bne.n	8003e1e <HASH_WriteData_IT+0x18c>
          {
            if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	f040 827d 	bne.w	80042b6 <HASH_WriteData_IT+0x624>
            {
              /* Start the message padding then the Digest calculation */
              SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dca:	609a      	str	r2, [r3, #8]

              /* Wait for HASH_FLAG_DCIS flag to be set */
              count = HASH_TIMEOUTVALUE;
 8003dcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dd0:	61bb      	str	r3, [r7, #24]
              do
              {
                count--;
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	61bb      	str	r3, [r7, #24]
                if (count == 0U)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d117      	bne.n	8003e0e <HASH_WriteData_IT+0x17c>
                {
                  /* Disable Interrupts */
                  __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6a1a      	ldr	r2, [r3, #32]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0203 	bic.w	r2, r2, #3
 8003dec:	621a      	str	r2, [r3, #32]

                  /* Change state */
                  hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df2:	f043 0204 	orr.w	r2, r3, #4
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	635a      	str	r2, [r3, #52]	@ 0x34
                  hhash->State = HAL_HASH_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                  __HAL_UNLOCK(hhash);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                  return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e254      	b.n	80042b8 <HASH_WriteData_IT+0x626>
                }
              } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0da      	beq.n	8003dd2 <HASH_WriteData_IT+0x140>
 8003e1c:	e24b      	b.n	80042b6 <HASH_WriteData_IT+0x624>
            }
          }
          else
          {
            /* Reset multi buffers accumulation flag */
            hhash->Accumulation = 0U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	63da      	str	r2, [r3, #60]	@ 0x3c
            /* Disable Interrupts */
            __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6a1a      	ldr	r2, [r3, #32]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	621a      	str	r2, [r3, #32]
 8003e34:	e23f      	b.n	80042b6 <HASH_WriteData_IT+0x624>
      }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
    }
    else /*HMAC */
    {
      if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2) /* loading input*/
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	f040 80df 	bne.w	8004000 <HASH_WriteData_IT+0x36e>
          __HAL_UNLOCK(hhash);
        }
        else
        {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
          if (hhash->Accumulation == 1U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d108      	bne.n	8003e5c <HASH_WriteData_IT+0x1ca>
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 0U);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 021f 	bic.w	r2, r2, #31
 8003e58:	609a      	str	r2, [r3, #8]
 8003e5a:	e00d      	b.n	8003e78 <HASH_WriteData_IT+0x1e6>
          }
          else
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (hhash->Size % 4U));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f023 011f 	bic.w	r1, r3, #31
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	00da      	lsls	r2, r3, #3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]
          }
          if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69da      	ldr	r2, [r3, #28]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	441a      	add	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d258      	bcs.n	8003f3a <HASH_WriteData_IT+0x2a8>
          {
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	e015      	b.n	8003eba <HASH_WriteData_IT+0x228>
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	461a      	mov	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6812      	ldr	r2, [r2, #0]
 8003e98:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	1d1a      	adds	r2, r3, #4
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	1d1a      	adds	r2, r3, #4
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	615a      	str	r2, [r3, #20]
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d3e5      	bcc.n	8003e8e <HASH_WriteData_IT+0x1fc>
            }
            /* Wait for HASH_IT_DINI flag to be set */
            count = HASH_TIMEOUTVALUE;
 8003ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ec6:	61bb      	str	r3, [r7, #24]
            do
            {
              count--;
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	61bb      	str	r3, [r7, #24]
              if (count == 0U)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d117      	bne.n	8003f04 <HASH_WriteData_IT+0x272>
              {
                /* Disable Interrupts */
                __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6a1a      	ldr	r2, [r3, #32]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0203 	bic.w	r2, r2, #3
 8003ee2:	621a      	str	r2, [r3, #32]

                /* Change state */
                hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee8:	f043 0204 	orr.w	r2, r3, #4
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	635a      	str	r2, [r3, #52]	@ 0x34
                hhash->State = HAL_HASH_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                __HAL_UNLOCK(hhash);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e1d9      	b.n	80042b8 <HASH_WriteData_IT+0x626>
              }
            } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0da      	beq.n	8003ec8 <HASH_WriteData_IT+0x236>
 8003f12:	e1d0      	b.n	80042b6 <HASH_WriteData_IT+0x624>
          else
          {
            while ((hhash->HashInCount) < hhash->Size)
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	461a      	mov	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3304      	adds	r3, #4
 8003f24:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	1d1a      	adds	r2, r3, #4
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	1d1a      	adds	r2, r3, #4
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	615a      	str	r2, [r3, #20]
            while ((hhash->HashInCount) < hhash->Size)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69da      	ldr	r2, [r3, #28]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d3e6      	bcc.n	8003f14 <HASH_WriteData_IT+0x282>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
            /*Call registered Input complete callback*/
            hhash->InCpltCallback(hhash);
#else
            /*Call legacy weak Input complete callback*/
            HAL_HASH_InCpltCallback(hhash);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff fe77 	bl	8003c3a <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

            if (hhash->Accumulation == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d143      	bne.n	8003fdc <HASH_WriteData_IT+0x34a>
            {
              if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	f040 81a9 	bne.w	80042b6 <HASH_WriteData_IT+0x624>
              {
                /* Start the message padding then the Digest calculation */
                SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f72:	609a      	str	r2, [r3, #8]

                /* Wait for HASH_FLAG_BUSY flag to be set */
                count = HASH_TIMEOUTVALUE;
 8003f74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f78:	61bb      	str	r3, [r7, #24]
                do
                {
                  count--;
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	61bb      	str	r3, [r7, #24]
                  if (count == 0U)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d117      	bne.n	8003fb6 <HASH_WriteData_IT+0x324>
                  {
                    /* Disable Interrupts */
                    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a1a      	ldr	r2, [r3, #32]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0203 	bic.w	r2, r2, #3
 8003f94:	621a      	str	r2, [r3, #32]

                    /* Change state */
                    hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f9a:	f043 0204 	orr.w	r2, r3, #4
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	635a      	str	r2, [r3, #52]	@ 0x34
                    hhash->State = HAL_HASH_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    __HAL_UNLOCK(hhash);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e180      	b.n	80042b8 <HASH_WriteData_IT+0x626>
                  }
                } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d0da      	beq.n	8003f7a <HASH_WriteData_IT+0x2e8>

                hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_3;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2205      	movs	r2, #5
 8003fc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                hhash->HashInCount = 0U;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	61da      	str	r2, [r3, #28]
                hhash->pHashKeyBuffPtr = hhash->Init.pKey;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	625a      	str	r2, [r3, #36]	@ 0x24
 8003fda:	e16c      	b.n	80042b6 <HASH_WriteData_IT+0x624>
            }

            else
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6a1a      	ldr	r2, [r3, #32]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0203 	bic.w	r2, r2, #3
 8003fea:	621a      	str	r2, [r3, #32]
              hhash->State = HAL_HASH_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e15b      	b.n	80042b8 <HASH_WriteData_IT+0x626>
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
        }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
      }

      else if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3)/* loading Key*/
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004006:	2b05      	cmp	r3, #5
 8004008:	f040 80a1 	bne.w	800414e <HASH_WriteData_IT+0x4bc>
      {

        /* Configure the number of valid bits in last word of the Key */
        MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * ((hhash->Init.KeySize) % 4U));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f023 011f 	bic.w	r1, r3, #31
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	00da      	lsls	r2, r3, #3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	609a      	str	r2, [r3, #8]

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	441a      	add	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	429a      	cmp	r2, r3
 8004036:	d253      	bcs.n	80040e0 <HASH_WriteData_IT+0x44e>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8004038:	2300      	movs	r3, #0
 800403a:	61fb      	str	r3, [r7, #28]
 800403c:	e015      	b.n	800406a <HASH_WriteData_IT+0x3d8>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	461a      	mov	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	3304      	adds	r3, #4
 800404e:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	1d1a      	adds	r2, r3, #4
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405e:	1d1a      	adds	r2, r3, #4
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	3304      	adds	r3, #4
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	429a      	cmp	r2, r3
 8004070:	d3e5      	bcc.n	800403e <HASH_WriteData_IT+0x3ac>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 8004072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004076:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	3b01      	subs	r3, #1
 800407c:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d117      	bne.n	80040b4 <HASH_WriteData_IT+0x422>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6a1a      	ldr	r2, [r3, #32]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0203 	bic.w	r2, r2, #3
 8004092:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004098:	f043 0204 	orr.w	r2, r3, #4
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e101      	b.n	80042b8 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0da      	beq.n	8004078 <HASH_WriteData_IT+0x3e6>
 80040c2:	e0f8      	b.n	80042b6 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	461a      	mov	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	3304      	adds	r3, #4
 80040d4:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	1d1a      	adds	r2, r3, #4
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	61da      	str	r2, [r3, #28]
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d3eb      	bcc.n	80040c4 <HASH_WriteData_IT+0x432>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040fa:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_DCIS flag to be set */
          count = HASH_TIMEOUTVALUE;
 80040fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004100:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	3b01      	subs	r3, #1
 8004106:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d117      	bne.n	800413e <HASH_WriteData_IT+0x4ac>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6a1a      	ldr	r2, [r3, #32]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0203 	bic.w	r2, r2, #3
 800411c:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004122:	f043 0204 	orr.w	r2, r3, #4
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e0bc      	b.n	80042b8 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0da      	beq.n	8004102 <HASH_WriteData_IT+0x470>
 800414c:	e0b3      	b.n	80042b6 <HASH_WriteData_IT+0x624>
        }
      }
      else  /*first step , loading key*/
      {

        hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2203      	movs	r2, #3
 8004152:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69da      	ldr	r2, [r3, #28]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	441a      	add	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	429a      	cmp	r2, r3
 8004164:	d258      	bcs.n	8004218 <HASH_WriteData_IT+0x586>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8004166:	2300      	movs	r3, #0
 8004168:	61fb      	str	r3, [r7, #28]
 800416a:	e015      	b.n	8004198 <HASH_WriteData_IT+0x506>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	461a      	mov	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	3304      	adds	r3, #4
 800417c:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	1d1a      	adds	r2, r3, #4
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	1d1a      	adds	r2, r3, #4
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	3304      	adds	r3, #4
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	429a      	cmp	r2, r3
 800419e:	d3e5      	bcc.n	800416c <HASH_WriteData_IT+0x4da>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 80041a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041a4:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d117      	bne.n	80041e2 <HASH_WriteData_IT+0x550>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6a1a      	ldr	r2, [r3, #32]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0203 	bic.w	r2, r2, #3
 80041c0:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c6:	f043 0204 	orr.w	r2, r3, #4
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e06a      	b.n	80042b8 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0da      	beq.n	80041a6 <HASH_WriteData_IT+0x514>
 80041f0:	e061      	b.n	80042b6 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	461a      	mov	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	3304      	adds	r3, #4
 8004202:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	1d1a      	adds	r2, r3, #4
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004212:	1d1a      	adds	r2, r3, #4
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	625a      	str	r2, [r3, #36]	@ 0x24
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	429a      	cmp	r2, r3
 8004222:	d3e6      	bcc.n	80041f2 <HASH_WriteData_IT+0x560>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004232:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_BUSY flag to be set */
          count = HASH_TIMEOUTVALUE;
 8004234:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004238:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	3b01      	subs	r3, #1
 800423e:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d117      	bne.n	8004276 <HASH_WriteData_IT+0x5e4>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a1a      	ldr	r2, [r3, #32]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0203 	bic.w	r2, r2, #3
 8004254:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800425a:	f043 0204 	orr.w	r2, r3, #4
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e020      	b.n	80042b8 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b08      	cmp	r3, #8
 8004282:	d0da      	beq.n	800423a <HASH_WriteData_IT+0x5a8>
          /*change Phase to step 2*/
          hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2204      	movs	r2, #4
 8004288:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
          hhash->HashInCount = 0U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	61da      	str	r2, [r3, #28]
 8004292:	e010      	b.n	80042b6 <HASH_WriteData_IT+0x624>
        }
      }
    }
  }
  else if ((hhash->State == HAL_HASH_STATE_SUSPENDED))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b03      	cmp	r3, #3
 800429e:	d101      	bne.n	80042a4 <HASH_WriteData_IT+0x612>
  {
    return HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e009      	b.n	80042b8 <HASH_WriteData_IT+0x626>
  }
  else
  {
    /* Busy error code field */
    hhash->ErrorCode |= HAL_HASH_ERROR_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a8:	f043 0201 	orr.w	r2, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
    /*Call registered error callback*/
    hhash->ErrorCallback(hhash);
#else
    /*Call legacy weak error callback*/
    HAL_HASH_ErrorCallback(hhash);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff fcd6 	bl	8003c62 <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3720      	adds	r7, #32
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HASH_GetDigest>:
  * @param  pMsgDigest pointer to the computed digest.
  * @param  Size message digest size in bytes.
  * @retval None
  */
static void HASH_GetDigest(const HASH_HandleTypeDef *hhash, const uint8_t *pMsgDigest, uint8_t Size)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b0b7      	sub	sp, #220	@ 0xdc
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	4613      	mov	r3, r2
 80042cc:	71fb      	strb	r3, [r7, #7]
  uint32_t msgdigest = (uint32_t)pMsgDigest;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  switch (Size)
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	2b30      	cmp	r3, #48	@ 0x30
 80042d8:	dc44      	bgt.n	8004364 <HASH_GetDigest+0xa4>
 80042da:	2b14      	cmp	r3, #20
 80042dc:	f2c0 82e7 	blt.w	80048ae <HASH_GetDigest+0x5ee>
 80042e0:	3b14      	subs	r3, #20
 80042e2:	2b1c      	cmp	r3, #28
 80042e4:	f200 82e3 	bhi.w	80048ae <HASH_GetDigest+0x5ee>
 80042e8:	a201      	add	r2, pc, #4	@ (adr r2, 80042f0 <HASH_GetDigest+0x30>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	0800436d 	.word	0x0800436d
 80042f4:	080048af 	.word	0x080048af
 80042f8:	080048af 	.word	0x080048af
 80042fc:	080048af 	.word	0x080048af
 8004300:	080048af 	.word	0x080048af
 8004304:	080048af 	.word	0x080048af
 8004308:	080048af 	.word	0x080048af
 800430c:	080048af 	.word	0x080048af
 8004310:	08004405 	.word	0x08004405
 8004314:	080048af 	.word	0x080048af
 8004318:	080048af 	.word	0x080048af
 800431c:	080048af 	.word	0x080048af
 8004320:	080044d9 	.word	0x080044d9
 8004324:	080048af 	.word	0x080048af
 8004328:	080048af 	.word	0x080048af
 800432c:	080048af 	.word	0x080048af
 8004330:	080048af 	.word	0x080048af
 8004334:	080048af 	.word	0x080048af
 8004338:	080048af 	.word	0x080048af
 800433c:	080048af 	.word	0x080048af
 8004340:	080048af 	.word	0x080048af
 8004344:	080048af 	.word	0x080048af
 8004348:	080048af 	.word	0x080048af
 800434c:	080048af 	.word	0x080048af
 8004350:	080048af 	.word	0x080048af
 8004354:	080048af 	.word	0x080048af
 8004358:	080048af 	.word	0x080048af
 800435c:	080048af 	.word	0x080048af
 8004360:	080045cb 	.word	0x080045cb
 8004364:	2b40      	cmp	r3, #64	@ 0x40
 8004366:	f000 81d1 	beq.w	800470c <HASH_GetDigest+0x44c>
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);

      break;
#endif /* defined(HASH_ALGOSELECTION_SHA512)*/
    default:
      break;
 800436a:	e2a0      	b.n	80048ae <HASH_GetDigest+0x5ee>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004376:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
  return __builtin_bswap32(value);
 800437a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800437e:	ba12      	rev	r2, r2
 8004380:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004386:	3304      	adds	r3, #4
 8004388:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004396:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800439a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800439e:	ba12      	rev	r2, r2
 80043a0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80043a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043a6:	3304      	adds	r3, #4
 80043a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043b6:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80043ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043be:	ba12      	rev	r2, r2
 80043c0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80043c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043c6:	3304      	adds	r3, #4
 80043c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043d6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80043da:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80043de:	ba12      	rev	r2, r2
 80043e0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80043e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043e6:	3304      	adds	r3, #4
 80043e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69da      	ldr	r2, [r3, #28]
 80043f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043f6:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80043fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043fe:	ba12      	rev	r2, r2
 8004400:	601a      	str	r2, [r3, #0]
      break;
 8004402:	e255      	b.n	80048b0 <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800440e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004412:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8004416:	ba12      	rev	r2, r2
 8004418:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800441a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800441e:	3304      	adds	r3, #4
 8004420:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800442e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004432:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004436:	ba12      	rev	r2, r2
 8004438:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800443a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800443e:	3304      	adds	r3, #4
 8004440:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800444e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004452:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004456:	ba12      	rev	r2, r2
 8004458:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800445a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800445e:	3304      	adds	r3, #4
 8004460:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800446e:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8004472:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004476:	ba12      	rev	r2, r2
 8004478:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800447a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800447e:	3304      	adds	r3, #4
 8004480:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69da      	ldr	r2, [r3, #28]
 800448a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800448e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004492:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004496:	ba12      	rev	r2, r2
 8004498:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800449a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800449e:	3304      	adds	r3, #4
 80044a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 80044a4:	4b98      	ldr	r3, [pc, #608]	@ (8004708 <HASH_GetDigest+0x448>)
 80044a6:	695a      	ldr	r2, [r3, #20]
 80044a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044ac:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 80044b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80044b4:	ba12      	rev	r2, r2
 80044b6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80044b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044bc:	3304      	adds	r3, #4
 80044be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 80044c2:	4b91      	ldr	r3, [pc, #580]	@ (8004708 <HASH_GetDigest+0x448>)
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044ca:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80044d2:	ba12      	rev	r2, r2
 80044d4:	601a      	str	r2, [r3, #0]
      break;
 80044d6:	e1eb      	b.n	80048b0 <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044e2:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80044e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80044ea:	ba12      	rev	r2, r2
 80044ec:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80044ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044f2:	3304      	adds	r3, #4
 80044f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004502:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8004506:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800450a:	ba12      	rev	r2, r2
 800450c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800450e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004512:	3304      	adds	r3, #4
 8004514:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004522:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004526:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800452a:	ba12      	rev	r2, r2
 800452c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800452e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004532:	3304      	adds	r3, #4
 8004534:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004542:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8004546:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800454a:	ba12      	rev	r2, r2
 800454c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800454e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004552:	3304      	adds	r3, #4
 8004554:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69da      	ldr	r2, [r3, #28]
 800455e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004562:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004566:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800456a:	ba12      	rev	r2, r2
 800456c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800456e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004572:	3304      	adds	r3, #4
 8004574:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8004578:	4b63      	ldr	r3, [pc, #396]	@ (8004708 <HASH_GetDigest+0x448>)
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004580:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8004584:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004588:	ba12      	rev	r2, r2
 800458a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800458c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004590:	3304      	adds	r3, #4
 8004592:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8004596:	4b5c      	ldr	r3, [pc, #368]	@ (8004708 <HASH_GetDigest+0x448>)
 8004598:	699a      	ldr	r2, [r3, #24]
 800459a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800459e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80045a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80045a6:	ba12      	rev	r2, r2
 80045a8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80045aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045ae:	3304      	adds	r3, #4
 80045b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 80045b4:	4b54      	ldr	r3, [pc, #336]	@ (8004708 <HASH_GetDigest+0x448>)
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045bc:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80045c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80045c4:	ba12      	rev	r2, r2
 80045c6:	601a      	str	r2, [r3, #0]
      break;
 80045c8:	e172      	b.n	80048b0 <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045d4:	657a      	str	r2, [r7, #84]	@ 0x54
 80045d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80045d8:	ba12      	rev	r2, r2
 80045da:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80045dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045e0:	3304      	adds	r3, #4
 80045e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045f4:	ba12      	rev	r2, r2
 80045f6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80045f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045fc:	3304      	adds	r3, #4
 80045fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695a      	ldr	r2, [r3, #20]
 8004608:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800460c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800460e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004610:	ba12      	rev	r2, r2
 8004612:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004614:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004618:	3304      	adds	r3, #4
 800461a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699a      	ldr	r2, [r3, #24]
 8004624:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004628:	663a      	str	r2, [r7, #96]	@ 0x60
 800462a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800462c:	ba12      	rev	r2, r2
 800462e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004634:	3304      	adds	r3, #4
 8004636:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004644:	667a      	str	r2, [r7, #100]	@ 0x64
 8004646:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004648:	ba12      	rev	r2, r2
 800464a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800464c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004650:	3304      	adds	r3, #4
 8004652:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8004656:	4b2c      	ldr	r3, [pc, #176]	@ (8004708 <HASH_GetDigest+0x448>)
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800465e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8004660:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004662:	ba12      	rev	r2, r2
 8004664:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800466a:	3304      	adds	r3, #4
 800466c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8004670:	4b25      	ldr	r3, [pc, #148]	@ (8004708 <HASH_GetDigest+0x448>)
 8004672:	699a      	ldr	r2, [r3, #24]
 8004674:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004678:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800467a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800467c:	ba12      	rev	r2, r2
 800467e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004680:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004684:	3304      	adds	r3, #4
 8004686:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 800468a:	4b1f      	ldr	r3, [pc, #124]	@ (8004708 <HASH_GetDigest+0x448>)
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004692:	673a      	str	r2, [r7, #112]	@ 0x70
 8004694:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004696:	ba12      	rev	r2, r2
 8004698:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800469a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800469e:	3304      	adds	r3, #4
 80046a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 80046a4:	4b18      	ldr	r3, [pc, #96]	@ (8004708 <HASH_GetDigest+0x448>)
 80046a6:	6a1a      	ldr	r2, [r3, #32]
 80046a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80046ae:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80046b0:	ba12      	rev	r2, r2
 80046b2:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80046b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046b8:	3304      	adds	r3, #4
 80046ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 80046be:	4b12      	ldr	r3, [pc, #72]	@ (8004708 <HASH_GetDigest+0x448>)
 80046c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046c6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80046c8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80046ca:	ba12      	rev	r2, r2
 80046cc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80046ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046d2:	3304      	adds	r3, #4
 80046d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 80046d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004708 <HASH_GetDigest+0x448>)
 80046da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046e0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046e2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80046e4:	ba12      	rev	r2, r2
 80046e6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80046e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046ec:	3304      	adds	r3, #4
 80046ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 80046f2:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <HASH_GetDigest+0x448>)
 80046f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80046fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004702:	ba12      	rev	r2, r2
 8004704:	601a      	str	r2, [r3, #0]
      break;
 8004706:	e0d3      	b.n	80048b0 <HASH_GetDigest+0x5f0>
 8004708:	420c0710 	.word	0x420c0710
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004716:	617a      	str	r2, [r7, #20]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	ba12      	rev	r2, r2
 800471c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800471e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004722:	3304      	adds	r3, #4
 8004724:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004732:	61ba      	str	r2, [r7, #24]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	ba12      	rev	r2, r2
 8004738:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800473a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800473e:	3304      	adds	r3, #4
 8004740:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800474e:	61fa      	str	r2, [r7, #28]
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	ba12      	rev	r2, r2
 8004754:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800475a:	3304      	adds	r3, #4
 800475c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800476a:	623a      	str	r2, [r7, #32]
 800476c:	6a3a      	ldr	r2, [r7, #32]
 800476e:	ba12      	rev	r2, r2
 8004770:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004776:	3304      	adds	r3, #4
 8004778:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69da      	ldr	r2, [r3, #28]
 8004782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004786:	627a      	str	r2, [r7, #36]	@ 0x24
 8004788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800478a:	ba12      	rev	r2, r2
 800478c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800478e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004792:	3304      	adds	r3, #4
 8004794:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8004798:	4b48      	ldr	r3, [pc, #288]	@ (80048bc <HASH_GetDigest+0x5fc>)
 800479a:	695a      	ldr	r2, [r3, #20]
 800479c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047a0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80047a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047a4:	ba12      	rev	r2, r2
 80047a6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80047a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ac:	3304      	adds	r3, #4
 80047ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 80047b2:	4b42      	ldr	r3, [pc, #264]	@ (80048bc <HASH_GetDigest+0x5fc>)
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047be:	ba12      	rev	r2, r2
 80047c0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80047c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047c6:	3304      	adds	r3, #4
 80047c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 80047cc:	4b3b      	ldr	r3, [pc, #236]	@ (80048bc <HASH_GetDigest+0x5fc>)
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80047d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d8:	ba12      	rev	r2, r2
 80047da:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80047dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047e0:	3304      	adds	r3, #4
 80047e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 80047e6:	4b35      	ldr	r3, [pc, #212]	@ (80048bc <HASH_GetDigest+0x5fc>)
 80047e8:	6a1a      	ldr	r2, [r3, #32]
 80047ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ee:	637a      	str	r2, [r7, #52]	@ 0x34
 80047f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047f2:	ba12      	rev	r2, r2
 80047f4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80047f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047fa:	3304      	adds	r3, #4
 80047fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 8004800:	4b2e      	ldr	r3, [pc, #184]	@ (80048bc <HASH_GetDigest+0x5fc>)
 8004802:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004804:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004808:	63ba      	str	r2, [r7, #56]	@ 0x38
 800480a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800480c:	ba12      	rev	r2, r2
 800480e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004810:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004814:	3304      	adds	r3, #4
 8004816:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 800481a:	4b28      	ldr	r3, [pc, #160]	@ (80048bc <HASH_GetDigest+0x5fc>)
 800481c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800481e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004822:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004824:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004826:	ba12      	rev	r2, r2
 8004828:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800482a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800482e:	3304      	adds	r3, #4
 8004830:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 8004834:	4b21      	ldr	r3, [pc, #132]	@ (80048bc <HASH_GetDigest+0x5fc>)
 8004836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004838:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800483c:	643a      	str	r2, [r7, #64]	@ 0x40
 800483e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004840:	ba12      	rev	r2, r2
 8004842:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004844:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004848:	3304      	adds	r3, #4
 800484a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[12]);
 800484e:	4b1b      	ldr	r3, [pc, #108]	@ (80048bc <HASH_GetDigest+0x5fc>)
 8004850:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004856:	647a      	str	r2, [r7, #68]	@ 0x44
 8004858:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800485a:	ba12      	rev	r2, r2
 800485c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800485e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004862:	3304      	adds	r3, #4
 8004864:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[13]);
 8004868:	4b14      	ldr	r3, [pc, #80]	@ (80048bc <HASH_GetDigest+0x5fc>)
 800486a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800486c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004870:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004872:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004874:	ba12      	rev	r2, r2
 8004876:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004878:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800487c:	3304      	adds	r3, #4
 800487e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[14]);
 8004882:	4b0e      	ldr	r3, [pc, #56]	@ (80048bc <HASH_GetDigest+0x5fc>)
 8004884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800488a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800488c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800488e:	ba12      	rev	r2, r2
 8004890:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004896:	3304      	adds	r3, #4
 8004898:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);
 800489c:	4b07      	ldr	r3, [pc, #28]	@ (80048bc <HASH_GetDigest+0x5fc>)
 800489e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048a4:	653a      	str	r2, [r7, #80]	@ 0x50
 80048a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80048a8:	ba12      	rev	r2, r2
 80048aa:	601a      	str	r2, [r3, #0]
      break;
 80048ac:	e000      	b.n	80048b0 <HASH_GetDigest+0x5f0>
      break;
 80048ae:	bf00      	nop
  }
}
 80048b0:	bf00      	nop
 80048b2:	37dc      	adds	r7, #220	@ 0xdc
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	420c0710 	.word	0x420c0710

080048c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e08d      	b.n	80049ee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fd fc6a 	bl	80021c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2224      	movs	r2, #36	@ 0x24
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004910:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004920:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d107      	bne.n	800493a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004936:	609a      	str	r2, [r3, #8]
 8004938:	e006      	b.n	8004948 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004946:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d108      	bne.n	8004962 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800495e:	605a      	str	r2, [r3, #4]
 8004960:	e007      	b.n	8004972 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004970:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6812      	ldr	r2, [r2, #0]
 800497c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004980:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004984:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004994:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69d9      	ldr	r1, [r3, #28]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d138      	bne.n	8004a7e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e032      	b.n	8004a80 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2224      	movs	r2, #36	@ 0x24
 8004a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0201 	bic.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a48:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6819      	ldr	r1, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0201 	orr.w	r2, r2, #1
 8004a68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e000      	b.n	8004a80 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a7e:	2302      	movs	r3, #2
  }
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	d139      	bne.n	8004b16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e033      	b.n	8004b18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2224      	movs	r2, #36	@ 0x24
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0201 	bic.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004ade:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0201 	orr.w	r2, r2, #1
 8004b00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e000      	b.n	8004b18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b16:	2302      	movs	r3, #2
  }
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004b30:	230a      	movs	r3, #10
 8004b32:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004b34:	e002      	b.n	8004b3c <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f9      	bne.n	8004b36 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8004b42:	887b      	ldrh	r3, [r7, #2]
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	0c1b      	lsrs	r3, r3, #16
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b58:	b29b      	uxth	r3, r3
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004b72:	230a      	movs	r3, #10
 8004b74:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004b76:	e002      	b.n	8004b7e <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f9      	bne.n	8004b78 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8004b84:	887b      	ldrh	r3, [r7, #2]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	0c1b      	lsrs	r3, r3, #16
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b9a:	b29b      	uxth	r3, r3
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004bb4:	230a      	movs	r3, #10
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004bb8:	e002      	b.n	8004bc0 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f9      	bne.n	8004bba <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8004bc6:	887b      	ldrh	r3, [r7, #2]
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	0c1b      	lsrs	r3, r3, #16
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bdc:	b29b      	uxth	r3, r3
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b086      	sub	sp, #24
 8004bee:	af02      	add	r7, sp, #8
 8004bf0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0f3      	b.n	8004de4 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d106      	bne.n	8004c16 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7fd fdfd 	bl	8002810 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2203      	movs	r2, #3
 8004c1a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f009 f85f 	bl	800dce6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	7c1a      	ldrb	r2, [r3, #16]
 8004c30:	f88d 2000 	strb.w	r2, [sp]
 8004c34:	3304      	adds	r3, #4
 8004c36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c38:	f009 f823 	bl	800dc82 <USB_CoreInit>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2202      	movs	r2, #2
 8004c46:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e0ca      	b.n	8004de4 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2100      	movs	r1, #0
 8004c54:	4618      	mov	r0, r3
 8004c56:	f009 f85b 	bl	800dd10 <USB_SetCurrentMode>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0bb      	b.n	8004de4 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	73fb      	strb	r3, [r7, #15]
 8004c70:	e03f      	b.n	8004cf2 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c72:	7bfa      	ldrb	r2, [r7, #15]
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	440b      	add	r3, r1
 8004c80:	3315      	adds	r3, #21
 8004c82:	2201      	movs	r2, #1
 8004c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c86:	7bfa      	ldrb	r2, [r7, #15]
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	440b      	add	r3, r1
 8004c94:	3314      	adds	r3, #20
 8004c96:	7bfa      	ldrb	r2, [r7, #15]
 8004c98:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c9a:	7bfa      	ldrb	r2, [r7, #15]
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3317      	adds	r3, #23
 8004caa:	2200      	movs	r2, #0
 8004cac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004cae:	7bfa      	ldrb	r2, [r7, #15]
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	440b      	add	r3, r1
 8004cbc:	3324      	adds	r3, #36	@ 0x24
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cc2:	7bfa      	ldrb	r2, [r7, #15]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	440b      	add	r3, r1
 8004cd0:	3328      	adds	r3, #40	@ 0x28
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	440b      	add	r3, r1
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	791b      	ldrb	r3, [r3, #4]
 8004cf6:	7bfa      	ldrb	r2, [r7, #15]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d3ba      	bcc.n	8004c72 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	73fb      	strb	r3, [r7, #15]
 8004d00:	e044      	b.n	8004d8c <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d02:	7bfa      	ldrb	r2, [r7, #15]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	440b      	add	r3, r1
 8004d10:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d18:	7bfa      	ldrb	r2, [r7, #15]
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	440b      	add	r3, r1
 8004d26:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004d2a:	7bfa      	ldrb	r2, [r7, #15]
 8004d2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d2e:	7bfa      	ldrb	r2, [r7, #15]
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	440b      	add	r3, r1
 8004d3c:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8004d40:	2200      	movs	r2, #0
 8004d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d44:	7bfa      	ldrb	r2, [r7, #15]
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	440b      	add	r3, r1
 8004d52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d5a:	7bfa      	ldrb	r2, [r7, #15]
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	440b      	add	r3, r1
 8004d68:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d70:	7bfa      	ldrb	r2, [r7, #15]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	440b      	add	r3, r1
 8004d7e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	73fb      	strb	r3, [r7, #15]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	791b      	ldrb	r3, [r3, #4]
 8004d90:	7bfa      	ldrb	r2, [r7, #15]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d3b5      	bcc.n	8004d02 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6818      	ldr	r0, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	7c1a      	ldrb	r2, [r3, #16]
 8004d9e:	f88d 2000 	strb.w	r2, [sp]
 8004da2:	3304      	adds	r3, #4
 8004da4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004da6:	f008 ffd6 	bl	800dd56 <USB_DevInit>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e013      	b.n	8004de4 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	7b1b      	ldrb	r3, [r3, #12]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d102      	bne.n	8004dd8 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f001 fb6b 	bl	80064ae <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f00a fe2f 	bl	800fa40 <USB_DevDisconnect>

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_PCD_Start+0x16>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e012      	b.n	8004e28 <HAL_PCD_Start+0x3c>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f008 ff55 	bl	800dcbe <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f00a fe00 	bl	800fa1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f00a fe10 	bl	800fa62 <USB_ReadInterrupts>
 8004e42:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 faf2 	bl	8005438 <PCD_EP_ISR_Handler>

    return;
 8004e54:	e0de      	b.n	8005014 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d010      	beq.n	8004e82 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8004e6e:	400b      	ands	r3, r1
 8004e70:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f00b fe5f 	bl	8010b36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004e78:	2100      	movs	r1, #0
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f8e1 	bl	8005042 <HAL_PCD_SetAddress>

    return;
 8004e80:	e0c8      	b.n	8005014 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d009      	beq.n	8004ea0 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8004e9a:	400b      	ands	r3, r1
 8004e9c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004e9e:	e0b9      	b.n	8005014 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8004eb8:	400b      	ands	r3, r1
 8004eba:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004ebc:	e0aa      	b.n	8005014 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d029      	beq.n	8004f1c <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0204 	bic.w	r2, r2, #4
 8004ed6:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0208 	bic.w	r2, r2, #8
 8004ee6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d107      	bne.n	8004f02 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004efa:	2100      	movs	r1, #0
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f001 faf8 	bl	80064f2 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f893 	bl	800502e <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004f16:	400b      	ands	r3, r1
 8004f18:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004f1a:	e07b      	b.n	8005014 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01c      	beq.n	8004f60 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0208 	orr.w	r2, r2, #8
 8004f34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8004f44:	400b      	ands	r3, r1
 8004f46:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0204 	orr.w	r2, r2, #4
 8004f56:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f85e 	bl	800501a <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004f5e:	e059      	b.n	8005014 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d033      	beq.n	8004fd2 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8004f78:	400b      	ands	r3, r1
 8004f7a:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d121      	bne.n	8004fca <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0204 	orr.w	r2, r2, #4
 8004f94:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0208 	orr.w	r2, r2, #8
 8004fa4:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb4:	089b      	lsrs	r3, r3, #2
 8004fb6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f001 fa95 	bl	80064f2 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004fc8:	e024      	b.n	8005014 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f825 	bl	800501a <HAL_PCD_SuspendCallback>
    return;
 8004fd0:	e020      	b.n	8005014 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00c      	beq.n	8004ff6 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8004fea:	400b      	ands	r3, r1
 8004fec:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f00b fd93 	bl	8010b1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004ff4:	e00e      	b.n	8005014 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d009      	beq.n	8005014 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800500e:	400b      	ands	r3, r1
 8005010:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8005012:	bf00      	nop
  }
}
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	460b      	mov	r3, r1
 800504c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_PCD_SetAddress+0x1a>
 8005058:	2302      	movs	r3, #2
 800505a:	e012      	b.n	8005082 <HAL_PCD_SetAddress+0x40>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	78fa      	ldrb	r2, [r7, #3]
 8005068:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f00a fcc0 	bl	800f9f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	4608      	mov	r0, r1
 8005094:	4611      	mov	r1, r2
 8005096:	461a      	mov	r2, r3
 8005098:	4603      	mov	r3, r0
 800509a:	70fb      	strb	r3, [r7, #3]
 800509c:	460b      	mov	r3, r1
 800509e:	803b      	strh	r3, [r7, #0]
 80050a0:	4613      	mov	r3, r2
 80050a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	da0f      	bge.n	80050d0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050b0:	78fb      	ldrb	r3, [r7, #3]
 80050b2:	f003 0207 	and.w	r2, r3, #7
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	3310      	adds	r3, #16
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	4413      	add	r3, r2
 80050c4:	3304      	adds	r3, #4
 80050c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2201      	movs	r2, #1
 80050cc:	705a      	strb	r2, [r3, #1]
 80050ce:	e00f      	b.n	80050f0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	f003 0207 	and.w	r2, r3, #7
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	4413      	add	r3, r2
 80050e6:	3304      	adds	r3, #4
 80050e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80050fc:	883b      	ldrh	r3, [r7, #0]
 80050fe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	78ba      	ldrb	r2, [r7, #2]
 800510a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800510c:	78bb      	ldrb	r3, [r7, #2]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d102      	bne.n	8005118 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_PCD_EP_Open+0x9c>
 8005122:	2302      	movs	r3, #2
 8005124:	e00e      	b.n	8005144 <HAL_PCD_EP_Open+0xba>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68f9      	ldr	r1, [r7, #12]
 8005134:	4618      	mov	r0, r3
 8005136:	f008 fe31 	bl	800dd9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8005142:	7afb      	ldrb	r3, [r7, #11]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800515c:	2b00      	cmp	r3, #0
 800515e:	da0f      	bge.n	8005180 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	f003 0207 	and.w	r2, r3, #7
 8005166:	4613      	mov	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	3310      	adds	r3, #16
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	4413      	add	r3, r2
 8005174:	3304      	adds	r3, #4
 8005176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	705a      	strb	r2, [r3, #1]
 800517e:	e00f      	b.n	80051a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	f003 0207 	and.w	r2, r3, #7
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	4413      	add	r3, r2
 8005196:	3304      	adds	r3, #4
 8005198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d101      	bne.n	80051ba <HAL_PCD_EP_Close+0x6e>
 80051b6:	2302      	movs	r3, #2
 80051b8:	e00e      	b.n	80051d8 <HAL_PCD_EP_Close+0x8c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68f9      	ldr	r1, [r7, #12]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f009 f947 	bl	800e45c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	607a      	str	r2, [r7, #4]
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	460b      	mov	r3, r1
 80051ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051f0:	7afb      	ldrb	r3, [r7, #11]
 80051f2:	f003 0207 	and.w	r2, r3, #7
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4413      	add	r3, r2
 8005206:	3304      	adds	r3, #4
 8005208:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2200      	movs	r2, #0
 800521a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2200      	movs	r2, #0
 8005220:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005222:	7afb      	ldrb	r3, [r7, #11]
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	b2da      	uxtb	r2, r3
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6979      	ldr	r1, [r7, #20]
 8005234:	4618      	mov	r0, r3
 8005236:	f009 fa9b 	bl	800e770 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	f003 0207 	and.w	r2, r3, #7
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	440b      	add	r3, r1
 8005262:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8005266:	681b      	ldr	r3, [r3, #0]
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	607a      	str	r2, [r7, #4]
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	460b      	mov	r3, r1
 8005282:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005284:	7afb      	ldrb	r3, [r7, #11]
 8005286:	f003 0207 	and.w	r2, r3, #7
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	3310      	adds	r3, #16
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	3304      	adds	r3, #4
 800529a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2200      	movs	r2, #0
 80052ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2201      	movs	r2, #1
 80052c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052c2:	7afb      	ldrb	r3, [r7, #11]
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6979      	ldr	r1, [r7, #20]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f009 fa4b 	bl	800e770 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	7912      	ldrb	r2, [r2, #4]
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e040      	b.n	8005384 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005302:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005306:	2b00      	cmp	r3, #0
 8005308:	da0f      	bge.n	800532a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800530a:	78fb      	ldrb	r3, [r7, #3]
 800530c:	f003 0207 	and.w	r2, r3, #7
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	3310      	adds	r3, #16
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	4413      	add	r3, r2
 800531e:	3304      	adds	r3, #4
 8005320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	705a      	strb	r2, [r3, #1]
 8005328:	e00d      	b.n	8005346 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800532a:	78fa      	ldrb	r2, [r7, #3]
 800532c:	4613      	mov	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	4413      	add	r3, r2
 800533c:	3304      	adds	r3, #4
 800533e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	b2da      	uxtb	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_PCD_EP_SetStall+0x82>
 8005362:	2302      	movs	r3, #2
 8005364:	e00e      	b.n	8005384 <HAL_PCD_EP_SetStall+0xa0>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68f9      	ldr	r1, [r7, #12]
 8005374:	4618      	mov	r0, r3
 8005376:	f00a fa65 	bl	800f844 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005398:	78fb      	ldrb	r3, [r7, #3]
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	7912      	ldrb	r2, [r2, #4]
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e042      	b.n	8005430 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	da0f      	bge.n	80053d2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053b2:	78fb      	ldrb	r3, [r7, #3]
 80053b4:	f003 0207 	and.w	r2, r3, #7
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	3310      	adds	r3, #16
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	4413      	add	r3, r2
 80053c6:	3304      	adds	r3, #4
 80053c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	705a      	strb	r2, [r3, #1]
 80053d0:	e00f      	b.n	80053f2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053d2:	78fb      	ldrb	r3, [r7, #3]
 80053d4:	f003 0207 	and.w	r2, r3, #7
 80053d8:	4613      	mov	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4413      	add	r3, r2
 80053e8:	3304      	adds	r3, #4
 80053ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_PCD_EP_ClrStall+0x86>
 800540e:	2302      	movs	r3, #2
 8005410:	e00e      	b.n	8005430 <HAL_PCD_EP_ClrStall+0xa4>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68f9      	ldr	r1, [r7, #12]
 8005420:	4618      	mov	r0, r3
 8005422:	f00a fa55 	bl	800f8d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08e      	sub	sp, #56	@ 0x38
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005440:	e326      	b.n	8005a90 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005448:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800544a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800544c:	b2db      	uxtb	r3, r3
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8005456:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800545a:	2b00      	cmp	r3, #0
 800545c:	f040 8124 	bne.w	80056a8 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005460:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005462:	f003 0310 	and.w	r3, r3, #16
 8005466:	2b00      	cmp	r3, #0
 8005468:	d13e      	bne.n	80054e8 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b89      	ldr	r3, [pc, #548]	@ (8005698 <PCD_EP_ISR_Handler+0x260>)
 8005472:	4013      	ands	r3, r2
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005480:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3314      	adds	r3, #20
 8005486:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005492:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	0c1b      	lsrs	r3, r3, #16
 800549a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800549e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80054a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a4:	695a      	ldr	r2, [r3, #20]
 80054a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	441a      	add	r2, r3
 80054ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ae:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80054b0:	2100      	movs	r1, #0
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f00b fb17 	bl	8010ae6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	7c5b      	ldrb	r3, [r3, #17]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 82e6 	beq.w	8005a90 <PCD_EP_ISR_Handler+0x658>
 80054c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f040 82e1 	bne.w	8005a90 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	7c5b      	ldrb	r3, [r3, #17]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	745a      	strb	r2, [r3, #17]
 80054e6:	e2d3      	b.n	8005a90 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80054ee:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80054f8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80054fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d027      	beq.n	8005552 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	4619      	mov	r1, r3
 800550c:	4610      	mov	r0, r2
 800550e:	f7ff fb09 	bl	8004b24 <PCD_GET_EP_RX_CNT>
 8005512:	4603      	mov	r3, r0
 8005514:	461a      	mov	r2, r3
 8005516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005518:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8005524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005526:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800552c:	b29b      	uxth	r3, r3
 800552e:	f00a fb07 	bl	800fb40 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	4b58      	ldr	r3, [pc, #352]	@ (800569c <PCD_EP_ISR_Handler+0x264>)
 800553a:	4013      	ands	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005548:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f00b fa9e 	bl	8010a8c <HAL_PCD_SetupStageCallback>
 8005550:	e29e      	b.n	8005a90 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8005552:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8005556:	2b00      	cmp	r3, #0
 8005558:	f280 829a 	bge.w	8005a90 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	4b4e      	ldr	r3, [pc, #312]	@ (800569c <PCD_EP_ISR_Handler+0x264>)
 8005564:	4013      	ands	r3, r2
 8005566:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800556e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005572:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	4619      	mov	r1, r3
 800557e:	4610      	mov	r0, r2
 8005580:	f7ff fad0 	bl	8004b24 <PCD_GET_EP_RX_CNT>
 8005584:	4603      	mov	r3, r0
 8005586:	461a      	mov	r2, r3
 8005588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800558a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800558c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d019      	beq.n	80055c8 <PCD_EP_ISR_Handler+0x190>
 8005594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d015      	beq.n	80055c8 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a2:	6959      	ldr	r1, [r3, #20]
 80055a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80055a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055aa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f00a fac7 	bl	800fb40 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80055b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b4:	695a      	ldr	r2, [r3, #20]
 80055b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	441a      	add	r2, r3
 80055bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055be:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80055c0:	2100      	movs	r1, #0
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f00b fa74 	bl	8010ab0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80055d0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80055d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f040 825a 	bne.w	8005a90 <PCD_EP_ISR_Handler+0x658>
 80055dc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80055de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80055e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055e6:	f000 8253 	beq.w	8005a90 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80055ea:	4b2d      	ldr	r3, [pc, #180]	@ (80056a0 <PCD_EP_ISR_Handler+0x268>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	4a2c      	ldr	r2, [pc, #176]	@ (80056a0 <PCD_EP_ISR_Handler+0x268>)
 80055f0:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80055f4:	6053      	str	r3, [r2, #4]
 80055f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <PCD_EP_ISR_Handler+0x1d4>
 80055fe:	4b28      	ldr	r3, [pc, #160]	@ (80056a0 <PCD_EP_ISR_Handler+0x268>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	4a27      	ldr	r2, [pc, #156]	@ (80056a0 <PCD_EP_ISR_Handler+0x268>)
 8005604:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005608:	6053      	str	r3, [r2, #4]
 800560a:	e02e      	b.n	800566a <PCD_EP_ISR_Handler+0x232>
 800560c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	2b3e      	cmp	r3, #62	@ 0x3e
 8005612:	d814      	bhi.n	800563e <PCD_EP_ISR_Handler+0x206>
 8005614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	085b      	lsrs	r3, r3, #1
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <PCD_EP_ISR_Handler+0x1f6>
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	3301      	adds	r3, #1
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	4b1c      	ldr	r3, [pc, #112]	@ (80056a0 <PCD_EP_ISR_Handler+0x268>)
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	069b      	lsls	r3, r3, #26
 8005636:	491a      	ldr	r1, [pc, #104]	@ (80056a0 <PCD_EP_ISR_Handler+0x268>)
 8005638:	4313      	orrs	r3, r2
 800563a:	604b      	str	r3, [r1, #4]
 800563c:	e015      	b.n	800566a <PCD_EP_ISR_Handler+0x232>
 800563e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f003 031f 	and.w	r3, r3, #31
 800564e:	2b00      	cmp	r3, #0
 8005650:	d102      	bne.n	8005658 <PCD_EP_ISR_Handler+0x220>
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	3b01      	subs	r3, #1
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	4b11      	ldr	r3, [pc, #68]	@ (80056a0 <PCD_EP_ISR_Handler+0x268>)
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	069b      	lsls	r3, r3, #26
 8005660:	4313      	orrs	r3, r2
 8005662:	4a0f      	ldr	r2, [pc, #60]	@ (80056a0 <PCD_EP_ISR_Handler+0x268>)
 8005664:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005668:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <PCD_EP_ISR_Handler+0x26c>)
 8005672:	4013      	ands	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	e1fb      	b.n	8005a90 <PCD_EP_ISR_Handler+0x658>
 8005698:	07ff8f0f 	.word	0x07ff8f0f
 800569c:	07ff0f8f 	.word	0x07ff0f8f
 80056a0:	40016400 	.word	0x40016400
 80056a4:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 80056ba:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f280 80bd 	bge.w	800583e <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	4b9e      	ldr	r3, [pc, #632]	@ (8005950 <PCD_EP_ISR_Handler+0x518>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	61fb      	str	r3, [r7, #28]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80056ee:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80056f0:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	4413      	add	r3, r2
 8005704:	3304      	adds	r3, #4
 8005706:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570a:	7b1b      	ldrb	r3, [r3, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d116      	bne.n	800573e <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	4619      	mov	r1, r3
 800571a:	4610      	mov	r0, r2
 800571c:	f7ff fa02 	bl	8004b24 <PCD_GET_EP_RX_CNT>
 8005720:	4603      	mov	r3, r0
 8005722:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8005724:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005726:	2b00      	cmp	r3, #0
 8005728:	d067      	beq.n	80057fa <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6818      	ldr	r0, [r3, #0]
 800572e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005730:	6959      	ldr	r1, [r3, #20]
 8005732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005734:	88da      	ldrh	r2, [r3, #6]
 8005736:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005738:	f00a fa02 	bl	800fb40 <USB_ReadPMA>
 800573c:	e05d      	b.n	80057fa <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800573e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005740:	78db      	ldrb	r3, [r3, #3]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d108      	bne.n	8005758 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005746:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005748:	461a      	mov	r2, r3
 800574a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f9ad 	bl	8005aac <HAL_PCD_EP_DB_Receive>
 8005752:	4603      	mov	r3, r0
 8005754:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005756:	e050      	b.n	80057fa <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	4b7a      	ldr	r3, [pc, #488]	@ (8005954 <PCD_EP_ISR_Handler+0x51c>)
 800576a:	4013      	ands	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	441a      	add	r2, r3
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005782:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005786:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	461a      	mov	r2, r3
 800578e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d016      	beq.n	80057ce <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	4619      	mov	r1, r3
 80057aa:	4610      	mov	r0, r2
 80057ac:	f7ff f9db 	bl	8004b66 <PCD_GET_EP_DBUF0_CNT>
 80057b0:	4603      	mov	r3, r0
 80057b2:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80057b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d01f      	beq.n	80057fa <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c0:	6959      	ldr	r1, [r3, #20]
 80057c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c4:	891a      	ldrh	r2, [r3, #8]
 80057c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057c8:	f00a f9ba 	bl	800fb40 <USB_ReadPMA>
 80057cc:	e015      	b.n	80057fa <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f7ff f9e5 	bl	8004ba8 <PCD_GET_EP_DBUF1_CNT>
 80057de:	4603      	mov	r3, r0
 80057e0:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80057e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ee:	6959      	ldr	r1, [r3, #20]
 80057f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f2:	895a      	ldrh	r2, [r3, #10]
 80057f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057f6:	f00a f9a3 	bl	800fb40 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80057fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fc:	69da      	ldr	r2, [r3, #28]
 80057fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005800:	441a      	add	r2, r3
 8005802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005804:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005808:	695a      	ldr	r2, [r3, #20]
 800580a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800580c:	441a      	add	r2, r3
 800580e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005810:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d004      	beq.n	8005824 <PCD_EP_ISR_Handler+0x3ec>
 800581a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800581c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	429a      	cmp	r2, r3
 8005822:	d206      	bcs.n	8005832 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	4619      	mov	r1, r3
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f00b f940 	bl	8010ab0 <HAL_PCD_DataOutStageCallback>
 8005830:	e005      	b.n	800583e <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005838:	4618      	mov	r0, r3
 800583a:	f008 ff99 	bl	800e770 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800583e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 8123 	beq.w	8005a90 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 800584a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	3310      	adds	r3, #16
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	4413      	add	r3, r2
 800585c:	3304      	adds	r3, #4
 800585e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	4b39      	ldr	r3, [pc, #228]	@ (8005958 <PCD_EP_ISR_Handler+0x520>)
 8005872:	4013      	ands	r3, r2
 8005874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005886:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800588a:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800588c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588e:	78db      	ldrb	r3, [r3, #3]
 8005890:	2b01      	cmp	r3, #1
 8005892:	f040 80b8 	bne.w	8005a06 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8005896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005898:	2200      	movs	r2, #0
 800589a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800589c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800589e:	7b1b      	ldrb	r3, [r3, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 80a9 	beq.w	80059f8 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80058a6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80058a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d055      	beq.n	800595c <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d124      	bne.n	8005902 <PCD_EP_ISR_Handler+0x4ca>
 80058b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058d6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	e07a      	b.n	80059f8 <PCD_EP_ISR_Handler+0x5c0>
 8005902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005904:	785b      	ldrb	r3, [r3, #1]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d176      	bne.n	80059f8 <PCD_EP_ISR_Handler+0x5c0>
 800590a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005914:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005924:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005928:	b292      	uxth	r2, r2
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005936:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800593a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005944:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	e054      	b.n	80059f8 <PCD_EP_ISR_Handler+0x5c0>
 800594e:	bf00      	nop
 8005950:	07ff0f8f 	.word	0x07ff0f8f
 8005954:	07ff8f8f 	.word	0x07ff8f8f
 8005958:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800595c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595e:	785b      	ldrb	r3, [r3, #1]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d124      	bne.n	80059ae <PCD_EP_ISR_Handler+0x576>
 8005964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800596e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800597e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005982:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005986:	605a      	str	r2, [r3, #4]
 8005988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005992:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059a6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80059aa:	605a      	str	r2, [r3, #4]
 80059ac:	e024      	b.n	80059f8 <PCD_EP_ISR_Handler+0x5c0>
 80059ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b0:	785b      	ldrb	r3, [r3, #1]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d120      	bne.n	80059f8 <PCD_EP_ISR_Handler+0x5c0>
 80059b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059d4:	b292      	uxth	r2, r2
 80059d6:	605a      	str	r2, [r3, #4]
 80059d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80059e2:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80059e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059f4:	6852      	ldr	r2, [r2, #4]
 80059f6:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f00b f871 	bl	8010ae6 <HAL_PCD_DataInStageCallback>
 8005a04:	e044      	b.n	8005a90 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005a06:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d139      	bne.n	8005a84 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	0c1b      	lsrs	r3, r3, #16
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a28:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8005a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d906      	bls.n	8005a42 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8005a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a36:	699a      	ldr	r2, [r3, #24]
 8005a38:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a3a:	1ad2      	subs	r2, r2, r3
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3e:	619a      	str	r2, [r3, #24]
 8005a40:	e002      	b.n	8005a48 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8005a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a44:	2200      	movs	r2, #0
 8005a46:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	4619      	mov	r1, r3
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f00b f845 	bl	8010ae6 <HAL_PCD_DataInStageCallback>
 8005a5c:	e018      	b.n	8005a90 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a60:	695a      	ldr	r2, [r3, #20]
 8005a62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a64:	441a      	add	r2, r3
 8005a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a68:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6c:	69da      	ldr	r2, [r3, #28]
 8005a6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a70:	441a      	add	r2, r3
 8005a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a74:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f008 fe77 	bl	800e770 <USB_EPStartXfer>
 8005a82:	e005      	b.n	8005a90 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005a84:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005a86:	461a      	mov	r2, r3
 8005a88:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8e8 	bl	8005c60 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f47f acd1 	bne.w	8005442 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3738      	adds	r7, #56	@ 0x38
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop

08005aac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08a      	sub	sp, #40	@ 0x28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d062      	beq.n	8005b8a <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	4619      	mov	r1, r3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	f7ff f849 	bl	8004b66 <PCD_GET_EP_DBUF0_CNT>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	699a      	ldr	r2, [r3, #24]
 8005adc:	8bfb      	ldrh	r3, [r7, #30]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d306      	bcc.n	8005af0 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	8bfb      	ldrh	r3, [r7, #30]
 8005ae8:	1ad2      	subs	r2, r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	619a      	str	r2, [r3, #24]
 8005aee:	e002      	b.n	8005af6 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2200      	movs	r2, #0
 8005af4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d11b      	bne.n	8005b36 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	4b52      	ldr	r3, [pc, #328]	@ (8005c58 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b1a:	61bb      	str	r3, [r7, #24]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	441a      	add	r2, r3
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b34:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d017      	beq.n	8005b70 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	461a      	mov	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	4b42      	ldr	r3, [pc, #264]	@ (8005c5c <HAL_PCD_EP_DB_Receive+0x1b0>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	441a      	add	r2, r3
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b6e:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8005b70:	8bfb      	ldrh	r3, [r7, #30]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d06b      	beq.n	8005c4e <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6959      	ldr	r1, [r3, #20]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	891a      	ldrh	r2, [r3, #8]
 8005b82:	8bfb      	ldrh	r3, [r7, #30]
 8005b84:	f009 ffdc 	bl	800fb40 <USB_ReadPMA>
 8005b88:	e061      	b.n	8005c4e <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	4619      	mov	r1, r3
 8005b94:	4610      	mov	r0, r2
 8005b96:	f7ff f807 	bl	8004ba8 <PCD_GET_EP_DBUF1_CNT>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	8bfb      	ldrh	r3, [r7, #30]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d306      	bcc.n	8005bb6 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	699a      	ldr	r2, [r3, #24]
 8005bac:	8bfb      	ldrh	r3, [r7, #30]
 8005bae:	1ad2      	subs	r2, r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	619a      	str	r2, [r3, #24]
 8005bb4:	e002      	b.n	8005bbc <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d11b      	bne.n	8005bfc <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4b20      	ldr	r3, [pc, #128]	@ (8005c58 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bdc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	441a      	add	r2, r3
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bfa:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005bfc:	88fb      	ldrh	r3, [r7, #6]
 8005bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d117      	bne.n	8005c36 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	4b11      	ldr	r3, [pc, #68]	@ (8005c5c <HAL_PCD_EP_DB_Receive+0x1b0>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	623b      	str	r3, [r7, #32]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	441a      	add	r2, r3
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c34:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8005c36:	8bfb      	ldrh	r3, [r7, #30]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	6959      	ldr	r1, [r3, #20]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	895a      	ldrh	r2, [r3, #10]
 8005c48:	8bfb      	ldrh	r3, [r7, #30]
 8005c4a:	f009 ff79 	bl	800fb40 <USB_ReadPMA>
    }
  }

  return count;
 8005c4e:	8bfb      	ldrh	r3, [r7, #30]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3728      	adds	r7, #40	@ 0x28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	07ffbf8f 	.word	0x07ffbf8f
 8005c5c:	07ff8f8f 	.word	0x07ff8f8f

08005c60 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08e      	sub	sp, #56	@ 0x38
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005c6e:	88fb      	ldrh	r3, [r7, #6]
 8005c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 81d5 	beq.w	8006024 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	4619      	mov	r1, r3
 8005c84:	4610      	mov	r0, r2
 8005c86:	f7fe ff6e 	bl	8004b66 <PCD_GET_EP_DBUF0_CNT>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	8bfb      	ldrh	r3, [r7, #30]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d906      	bls.n	8005ca6 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	699a      	ldr	r2, [r3, #24]
 8005c9c:	8bfb      	ldrh	r3, [r7, #30]
 8005c9e:	1ad2      	subs	r2, r2, r3
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	619a      	str	r2, [r3, #24]
 8005ca4:	e002      	b.n	8005cac <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f040 80c1 	bne.w	8005e38 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d124      	bne.n	8005d08 <HAL_PCD_EP_DB_Transmit+0xa8>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005cc8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005cd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005cdc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005cec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005cfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d00:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	e024      	b.n	8005d52 <HAL_PCD_EP_DB_Transmit+0xf2>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	785b      	ldrb	r3, [r3, #1]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d120      	bne.n	8005d52 <HAL_PCD_EP_DB_Transmit+0xf2>
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d2e:	b292      	uxth	r2, r2
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005d3c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d4e:	6812      	ldr	r2, [r2, #0]
 8005d50:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	785b      	ldrb	r3, [r3, #1]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d124      	bne.n	8005da4 <HAL_PCD_EP_DB_Transmit+0x144>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d78:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005d7c:	605a      	str	r2, [r3, #4]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d9c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005da0:	605a      	str	r2, [r3, #4]
 8005da2:	e024      	b.n	8005dee <HAL_PCD_EP_DB_Transmit+0x18e>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	785b      	ldrb	r3, [r3, #1]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d120      	bne.n	8005dee <HAL_PCD_EP_DB_Transmit+0x18e>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005db6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005dc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005dca:	b292      	uxth	r2, r2
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005dd8:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005de6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005dea:	6852      	ldr	r2, [r2, #4]
 8005dec:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	4619      	mov	r1, r3
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f00a fe76 	bl	8010ae6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 82e5 	beq.w	80063d0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b8e      	ldr	r3, [pc, #568]	@ (8006050 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	441a      	add	r2, r3
 8005e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	e2cb      	b.n	80063d0 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e38:	88fb      	ldrh	r3, [r7, #6]
 8005e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d017      	beq.n	8005e72 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	4b7f      	ldr	r3, [pc, #508]	@ (8006050 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	441a      	add	r2, r3
 8005e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e70:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	f040 82a9 	bne.w	80063d0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	8bfb      	ldrh	r3, [r7, #30]
 8005e84:	441a      	add	r2, r3
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	69da      	ldr	r2, [r3, #28]
 8005e8e:	8bfb      	ldrh	r3, [r7, #30]
 8005e90:	441a      	add	r2, r3
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6a1a      	ldr	r2, [r3, #32]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d309      	bcc.n	8005eb6 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	6a1a      	ldr	r2, [r3, #32]
 8005eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eae:	1ad2      	subs	r2, r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	621a      	str	r2, [r3, #32]
 8005eb4:	e014      	b.n	8005ee0 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8005ebe:	8bfb      	ldrh	r3, [r7, #30]
 8005ec0:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005eca:	e009      	b.n	8005ee0 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2200      	movs	r2, #0
 8005ede:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d16a      	bne.n	8005fbe <HAL_PCD_EP_DB_Transmit+0x35e>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ef2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f06:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d112      	bne.n	8005f38 <HAL_PCD_EP_DB_Transmit+0x2d8>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f30:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	e06a      	b.n	800600e <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f3c:	d81e      	bhi.n	8005f7c <HAL_PCD_EP_DB_Transmit+0x31c>
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8005f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f50:	3301      	adds	r3, #1
 8005f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f62:	6819      	ldr	r1, [r3, #0]
 8005f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f66:	069a      	lsls	r2, r3, #26
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f76:	430a      	orrs	r2, r1
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	e048      	b.n	800600e <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d102      	bne.n	8005f92 <HAL_PCD_EP_DB_Transmit+0x332>
 8005f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa4:	069b      	lsls	r3, r3, #26
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fb6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	e027      	b.n	800600e <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	785b      	ldrb	r3, [r3, #1]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d123      	bne.n	800600e <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fd0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fe0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fe4:	b292      	uxth	r2, r2
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ff2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ff6:	6819      	ldr	r1, [r3, #0]
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	041a      	lsls	r2, r3, #16
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006006:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800600a:	430a      	orrs	r2, r1
 800600c:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	6959      	ldr	r1, [r3, #20]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	891a      	ldrh	r2, [r3, #8]
 800601a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601c:	b29b      	uxth	r3, r3
 800601e:	f009 fd2e 	bl	800fa7e <USB_WritePMA>
 8006022:	e1d5      	b.n	80063d0 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	4619      	mov	r1, r3
 800602e:	4610      	mov	r0, r2
 8006030:	f7fe fdba 	bl	8004ba8 <PCD_GET_EP_DBUF1_CNT>
 8006034:	4603      	mov	r3, r0
 8006036:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	699a      	ldr	r2, [r3, #24]
 800603c:	8bfb      	ldrh	r3, [r7, #30]
 800603e:	429a      	cmp	r2, r3
 8006040:	d308      	bcc.n	8006054 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	8bfb      	ldrh	r3, [r7, #30]
 8006048:	1ad2      	subs	r2, r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	619a      	str	r2, [r3, #24]
 800604e:	e004      	b.n	800605a <HAL_PCD_EP_DB_Transmit+0x3fa>
 8006050:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2200      	movs	r2, #0
 8006058:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f040 80c1 	bne.w	80061e6 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	785b      	ldrb	r3, [r3, #1]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d124      	bne.n	80060b6 <HAL_PCD_EP_DB_Transmit+0x456>
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006076:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006086:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800608a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800609a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060ae:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	e024      	b.n	8006100 <HAL_PCD_EP_DB_Transmit+0x4a0>
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	785b      	ldrb	r3, [r3, #1]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d120      	bne.n	8006100 <HAL_PCD_EP_DB_Transmit+0x4a0>
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060dc:	b292      	uxth	r2, r2
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80060ea:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	785b      	ldrb	r3, [r3, #1]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d124      	bne.n	8006152 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006112:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006122:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006126:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800612a:	605a      	str	r2, [r3, #4]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006136:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006146:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800614a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800614e:	605a      	str	r2, [r3, #4]
 8006150:	e024      	b.n	800619c <HAL_PCD_EP_DB_Transmit+0x53c>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d120      	bne.n	800619c <HAL_PCD_EP_DB_Transmit+0x53c>
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006164:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006174:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006178:	b292      	uxth	r2, r2
 800617a:	605a      	str	r2, [r3, #4]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8006186:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	00db      	lsls	r3, r3, #3
 8006190:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006194:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006198:	6852      	ldr	r2, [r2, #4]
 800619a:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	4619      	mov	r1, r3
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f00a fc9f 	bl	8010ae6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80061a8:	88fb      	ldrh	r3, [r7, #6]
 80061aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f040 810e 	bne.w	80063d0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4b95      	ldr	r3, [pc, #596]	@ (800641c <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	623b      	str	r3, [r7, #32]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	441a      	add	r2, r3
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	e0f4      	b.n	80063d0 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d117      	bne.n	8006220 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	461a      	mov	r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	4b86      	ldr	r3, [pc, #536]	@ (800641c <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8006202:	4013      	ands	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	441a      	add	r2, r3
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800621a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800621e:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006226:	2b01      	cmp	r3, #1
 8006228:	f040 80d2 	bne.w	80063d0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	695a      	ldr	r2, [r3, #20]
 8006230:	8bfb      	ldrh	r3, [r7, #30]
 8006232:	441a      	add	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	69da      	ldr	r2, [r3, #28]
 800623c:	8bfb      	ldrh	r3, [r7, #30]
 800623e:	441a      	add	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	6a1a      	ldr	r2, [r3, #32]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	429a      	cmp	r2, r3
 800624e:	d309      	bcc.n	8006264 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	6a1a      	ldr	r2, [r3, #32]
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	1ad2      	subs	r2, r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	621a      	str	r2, [r3, #32]
 8006262:	e014      	b.n	800628e <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d106      	bne.n	800627a <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 800626c:	8bfb      	ldrh	r3, [r7, #30]
 800626e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006278:	e009      	b.n	800628e <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2200      	movs	r2, #0
 8006284:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	785b      	ldrb	r3, [r3, #1]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d16a      	bne.n	800636c <HAL_PCD_EP_DB_Transmit+0x70c>
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062b4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80062b8:	605a      	str	r2, [r3, #4]
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d112      	bne.n	80062e6 <HAL_PCD_EP_DB_Transmit+0x686>
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	00db      	lsls	r3, r3, #3
 80062c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062de:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80062e2:	605a      	str	r2, [r3, #4]
 80062e4:	e06a      	b.n	80063bc <HAL_PCD_EP_DB_Transmit+0x75c>
 80062e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80062ea:	d81e      	bhi.n	800632a <HAL_PCD_EP_DB_Transmit+0x6ca>
 80062ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ee:	085b      	lsrs	r3, r3, #1
 80062f0:	61bb      	str	r3, [r7, #24]
 80062f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <HAL_PCD_EP_DB_Transmit+0x6a2>
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	3301      	adds	r3, #1
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800630c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006310:	6859      	ldr	r1, [r3, #4]
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	069a      	lsls	r2, r3, #26
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	00db      	lsls	r3, r3, #3
 800631c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006320:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006324:	430a      	orrs	r2, r1
 8006326:	605a      	str	r2, [r3, #4]
 8006328:	e048      	b.n	80063bc <HAL_PCD_EP_DB_Transmit+0x75c>
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632c:	095b      	lsrs	r3, r3, #5
 800632e:	61bb      	str	r3, [r7, #24]
 8006330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	2b00      	cmp	r3, #0
 8006338:	d102      	bne.n	8006340 <HAL_PCD_EP_DB_Transmit+0x6e0>
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	3b01      	subs	r3, #1
 800633e:	61bb      	str	r3, [r7, #24]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800634a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	069b      	lsls	r3, r3, #26
 8006354:	431a      	orrs	r2, r3
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006360:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006364:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006368:	605a      	str	r2, [r3, #4]
 800636a:	e027      	b.n	80063bc <HAL_PCD_EP_DB_Transmit+0x75c>
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	785b      	ldrb	r3, [r3, #1]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d123      	bne.n	80063bc <HAL_PCD_EP_DB_Transmit+0x75c>
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800637e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800638e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006392:	b292      	uxth	r2, r2
 8006394:	605a      	str	r2, [r3, #4]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063a4:	6859      	ldr	r1, [r3, #4]
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	041a      	lsls	r2, r3, #16
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063b8:	430a      	orrs	r2, r1
 80063ba:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	6959      	ldr	r1, [r3, #20]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	895a      	ldrh	r2, [r3, #10]
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	f009 fb57 	bl	800fa7e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006420 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 80063e2:	4013      	ands	r3, r2
 80063e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80063e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e8:	f083 0310 	eor.w	r3, r3, #16
 80063ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	f083 0320 	eor.w	r3, r3, #32
 80063f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	461a      	mov	r2, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	441a      	add	r2, r3
 8006404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800640a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800640e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3738      	adds	r7, #56	@ 0x38
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	07ff8f8f 	.word	0x07ff8f8f
 8006420:	07ff8fbf 	.word	0x07ff8fbf

08006424 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	607b      	str	r3, [r7, #4]
 800642e:	460b      	mov	r3, r1
 8006430:	817b      	strh	r3, [r7, #10]
 8006432:	4613      	mov	r3, r2
 8006434:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006436:	897b      	ldrh	r3, [r7, #10]
 8006438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00c      	beq.n	800645c <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006442:	897b      	ldrh	r3, [r7, #10]
 8006444:	f003 0207 	and.w	r2, r3, #7
 8006448:	4613      	mov	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	3310      	adds	r3, #16
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	3304      	adds	r3, #4
 8006458:	617b      	str	r3, [r7, #20]
 800645a:	e00a      	b.n	8006472 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800645c:	897a      	ldrh	r2, [r7, #10]
 800645e:	4613      	mov	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4413      	add	r3, r2
 800646e:	3304      	adds	r3, #4
 8006470:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006472:	893b      	ldrh	r3, [r7, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d107      	bne.n	8006488 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	2200      	movs	r2, #0
 800647c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	b29a      	uxth	r2, r3
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	80da      	strh	r2, [r3, #6]
 8006486:	e00b      	b.n	80064a0 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2201      	movs	r2, #1
 800648c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	b29a      	uxth	r2, r3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	0c1b      	lsrs	r3, r3, #16
 800649a:	b29a      	uxth	r2, r3
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d0:	f043 0201 	orr.w	r2, r3, #1
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064dc:	f043 0202 	orr.w	r2, r3, #2
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b083      	sub	sp, #12
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
	...

0800650c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8006510:	4b05      	ldr	r3, [pc, #20]	@ (8006528 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006514:	4a04      	ldr	r2, [pc, #16]	@ (8006528 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006516:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800651a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800651c:	bf00      	nop
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	44020800 	.word	0x44020800

0800652c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d102      	bne.n	8006540 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	f000 bc28 	b.w	8006d90 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006540:	4b94      	ldr	r3, [pc, #592]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	f003 0318 	and.w	r3, r3, #24
 8006548:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800654a:	4b92      	ldr	r3, [pc, #584]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 800654c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b00      	cmp	r3, #0
 800655e:	d05b      	beq.n	8006618 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	2b08      	cmp	r3, #8
 8006564:	d005      	beq.n	8006572 <HAL_RCC_OscConfig+0x46>
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	2b18      	cmp	r3, #24
 800656a:	d114      	bne.n	8006596 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d111      	bne.n	8006596 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d102      	bne.n	8006580 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f000 bc08 	b.w	8006d90 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8006580:	4b84      	ldr	r3, [pc, #528]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	041b      	lsls	r3, r3, #16
 800658e:	4981      	ldr	r1, [pc, #516]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 8006590:	4313      	orrs	r3, r2
 8006592:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8006594:	e040      	b.n	8006618 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d023      	beq.n	80065e6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800659e:	4b7d      	ldr	r3, [pc, #500]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a7c      	ldr	r2, [pc, #496]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80065a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065aa:	f7fc fdf3 	bl	8003194 <HAL_GetTick>
 80065ae:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80065b2:	f7fc fdef 	bl	8003194 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e3e5      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80065c4:	4b73      	ldr	r3, [pc, #460]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0f0      	beq.n	80065b2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80065d0:	4b70      	ldr	r3, [pc, #448]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	041b      	lsls	r3, r3, #16
 80065de:	496d      	ldr	r1, [pc, #436]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	618b      	str	r3, [r1, #24]
 80065e4:	e018      	b.n	8006618 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80065e6:	4b6b      	ldr	r3, [pc, #428]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a6a      	ldr	r2, [pc, #424]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80065ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f2:	f7fc fdcf 	bl	8003194 <HAL_GetTick>
 80065f6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80065f8:	e008      	b.n	800660c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80065fa:	f7fc fdcb 	bl	8003194 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d901      	bls.n	800660c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e3c1      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800660c:	4b61      	ldr	r3, [pc, #388]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1f0      	bne.n	80065fa <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 80a0 	beq.w	8006766 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	2b10      	cmp	r3, #16
 800662a:	d005      	beq.n	8006638 <HAL_RCC_OscConfig+0x10c>
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	2b18      	cmp	r3, #24
 8006630:	d109      	bne.n	8006646 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	2b03      	cmp	r3, #3
 8006636:	d106      	bne.n	8006646 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	f040 8092 	bne.w	8006766 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e3a4      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800664e:	d106      	bne.n	800665e <HAL_RCC_OscConfig+0x132>
 8006650:	4b50      	ldr	r3, [pc, #320]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a4f      	ldr	r2, [pc, #316]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 8006656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	e058      	b.n	8006710 <HAL_RCC_OscConfig+0x1e4>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d112      	bne.n	800668c <HAL_RCC_OscConfig+0x160>
 8006666:	4b4b      	ldr	r3, [pc, #300]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a4a      	ldr	r2, [pc, #296]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 800666c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	4b48      	ldr	r3, [pc, #288]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a47      	ldr	r2, [pc, #284]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 8006678:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800667c:	6013      	str	r3, [r2, #0]
 800667e:	4b45      	ldr	r3, [pc, #276]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a44      	ldr	r2, [pc, #272]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 8006684:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	e041      	b.n	8006710 <HAL_RCC_OscConfig+0x1e4>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006694:	d112      	bne.n	80066bc <HAL_RCC_OscConfig+0x190>
 8006696:	4b3f      	ldr	r3, [pc, #252]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a3e      	ldr	r2, [pc, #248]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 800669c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	4b3c      	ldr	r3, [pc, #240]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a3b      	ldr	r2, [pc, #236]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80066a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	4b39      	ldr	r3, [pc, #228]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a38      	ldr	r2, [pc, #224]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80066b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	e029      	b.n	8006710 <HAL_RCC_OscConfig+0x1e4>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80066c4:	d112      	bne.n	80066ec <HAL_RCC_OscConfig+0x1c0>
 80066c6:	4b33      	ldr	r3, [pc, #204]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a32      	ldr	r2, [pc, #200]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80066cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066d0:	6013      	str	r3, [r2, #0]
 80066d2:	4b30      	ldr	r3, [pc, #192]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a2f      	ldr	r2, [pc, #188]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80066d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	4b2d      	ldr	r3, [pc, #180]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80066e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	e011      	b.n	8006710 <HAL_RCC_OscConfig+0x1e4>
 80066ec:	4b29      	ldr	r3, [pc, #164]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a28      	ldr	r2, [pc, #160]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80066f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	4b26      	ldr	r3, [pc, #152]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a25      	ldr	r2, [pc, #148]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 80066fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	4b23      	ldr	r3, [pc, #140]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a22      	ldr	r2, [pc, #136]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 800670a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800670e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d013      	beq.n	8006740 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006718:	f7fc fd3c 	bl	8003194 <HAL_GetTick>
 800671c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006720:	f7fc fd38 	bl	8003194 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b64      	cmp	r3, #100	@ 0x64
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e32e      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006732:	4b18      	ldr	r3, [pc, #96]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0f0      	beq.n	8006720 <HAL_RCC_OscConfig+0x1f4>
 800673e:	e012      	b.n	8006766 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006740:	f7fc fd28 	bl	8003194 <HAL_GetTick>
 8006744:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006748:	f7fc fd24 	bl	8003194 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b64      	cmp	r3, #100	@ 0x64
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e31a      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800675a:	4b0e      	ldr	r3, [pc, #56]	@ (8006794 <HAL_RCC_OscConfig+0x268>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1f0      	bne.n	8006748 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 809a 	beq.w	80068a8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d005      	beq.n	8006786 <HAL_RCC_OscConfig+0x25a>
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	2b18      	cmp	r3, #24
 800677e:	d149      	bne.n	8006814 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d146      	bne.n	8006814 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d104      	bne.n	8006798 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e2fe      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
 8006792:	bf00      	nop
 8006794:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d11c      	bne.n	80067d8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800679e:	4b9a      	ldr	r3, [pc, #616]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0218 	and.w	r2, r3, #24
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d014      	beq.n	80067d8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80067ae:	4b96      	ldr	r3, [pc, #600]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f023 0218 	bic.w	r2, r3, #24
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	4993      	ldr	r1, [pc, #588]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80067c0:	f000 fdd0 	bl	8007364 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80067c4:	4b91      	ldr	r3, [pc, #580]	@ (8006a0c <HAL_RCC_OscConfig+0x4e0>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fc fc59 	bl	8003080 <HAL_InitTick>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e2db      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d8:	f7fc fcdc 	bl	8003194 <HAL_GetTick>
 80067dc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80067e0:	f7fc fcd8 	bl	8003194 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e2ce      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067f2:	4b85      	ldr	r3, [pc, #532]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0f0      	beq.n	80067e0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80067fe:	4b82      	ldr	r3, [pc, #520]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	041b      	lsls	r3, r3, #16
 800680c:	497e      	ldr	r1, [pc, #504]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 800680e:	4313      	orrs	r3, r2
 8006810:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8006812:	e049      	b.n	80068a8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d02c      	beq.n	8006876 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800681c:	4b7a      	ldr	r3, [pc, #488]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f023 0218 	bic.w	r2, r3, #24
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	4977      	ldr	r1, [pc, #476]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800682e:	4b76      	ldr	r3, [pc, #472]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a75      	ldr	r2, [pc, #468]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 8006834:	f043 0301 	orr.w	r3, r3, #1
 8006838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683a:	f7fc fcab 	bl	8003194 <HAL_GetTick>
 800683e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006840:	e008      	b.n	8006854 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006842:	f7fc fca7 	bl	8003194 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d901      	bls.n	8006854 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e29d      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006854:	4b6c      	ldr	r3, [pc, #432]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0f0      	beq.n	8006842 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006860:	4b69      	ldr	r3, [pc, #420]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	041b      	lsls	r3, r3, #16
 800686e:	4966      	ldr	r1, [pc, #408]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 8006870:	4313      	orrs	r3, r2
 8006872:	610b      	str	r3, [r1, #16]
 8006874:	e018      	b.n	80068a8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006876:	4b64      	ldr	r3, [pc, #400]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a63      	ldr	r2, [pc, #396]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 800687c:	f023 0301 	bic.w	r3, r3, #1
 8006880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006882:	f7fc fc87 	bl	8003194 <HAL_GetTick>
 8006886:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006888:	e008      	b.n	800689c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800688a:	f7fc fc83 	bl	8003194 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d901      	bls.n	800689c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e279      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800689c:	4b5a      	ldr	r3, [pc, #360]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1f0      	bne.n	800688a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d03c      	beq.n	800692e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01c      	beq.n	80068f6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068bc:	4b52      	ldr	r3, [pc, #328]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80068be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068c2:	4a51      	ldr	r2, [pc, #324]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80068c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068cc:	f7fc fc62 	bl	8003194 <HAL_GetTick>
 80068d0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80068d4:	f7fc fc5e 	bl	8003194 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e254      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80068e6:	4b48      	ldr	r3, [pc, #288]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80068e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0ef      	beq.n	80068d4 <HAL_RCC_OscConfig+0x3a8>
 80068f4:	e01b      	b.n	800692e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068f6:	4b44      	ldr	r3, [pc, #272]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80068f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068fc:	4a42      	ldr	r2, [pc, #264]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80068fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006902:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006906:	f7fc fc45 	bl	8003194 <HAL_GetTick>
 800690a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800690c:	e008      	b.n	8006920 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800690e:	f7fc fc41 	bl	8003194 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e237      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006920:	4b39      	ldr	r3, [pc, #228]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 8006922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006926:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1ef      	bne.n	800690e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 80d2 	beq.w	8006ae0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800693c:	4b34      	ldr	r3, [pc, #208]	@ (8006a10 <HAL_RCC_OscConfig+0x4e4>)
 800693e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d118      	bne.n	800697a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006948:	4b31      	ldr	r3, [pc, #196]	@ (8006a10 <HAL_RCC_OscConfig+0x4e4>)
 800694a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694c:	4a30      	ldr	r2, [pc, #192]	@ (8006a10 <HAL_RCC_OscConfig+0x4e4>)
 800694e:	f043 0301 	orr.w	r3, r3, #1
 8006952:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006954:	f7fc fc1e 	bl	8003194 <HAL_GetTick>
 8006958:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800695c:	f7fc fc1a 	bl	8003194 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e210      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800696e:	4b28      	ldr	r3, [pc, #160]	@ (8006a10 <HAL_RCC_OscConfig+0x4e4>)
 8006970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f0      	beq.n	800695c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d108      	bne.n	8006994 <HAL_RCC_OscConfig+0x468>
 8006982:	4b21      	ldr	r3, [pc, #132]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 8006984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006988:	4a1f      	ldr	r2, [pc, #124]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 800698a:	f043 0301 	orr.w	r3, r3, #1
 800698e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006992:	e074      	b.n	8006a7e <HAL_RCC_OscConfig+0x552>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d118      	bne.n	80069ce <HAL_RCC_OscConfig+0x4a2>
 800699c:	4b1a      	ldr	r3, [pc, #104]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 800699e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069a2:	4a19      	ldr	r2, [pc, #100]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80069a4:	f023 0301 	bic.w	r3, r3, #1
 80069a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80069ac:	4b16      	ldr	r3, [pc, #88]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80069ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069b2:	4a15      	ldr	r2, [pc, #84]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80069b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80069bc:	4b12      	ldr	r3, [pc, #72]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80069be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069c2:	4a11      	ldr	r2, [pc, #68]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80069c4:	f023 0304 	bic.w	r3, r3, #4
 80069c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80069cc:	e057      	b.n	8006a7e <HAL_RCC_OscConfig+0x552>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2b05      	cmp	r3, #5
 80069d4:	d11e      	bne.n	8006a14 <HAL_RCC_OscConfig+0x4e8>
 80069d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80069d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069dc:	4a0a      	ldr	r2, [pc, #40]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80069de:	f043 0304 	orr.w	r3, r3, #4
 80069e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80069e6:	4b08      	ldr	r3, [pc, #32]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80069e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069ec:	4a06      	ldr	r2, [pc, #24]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80069ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80069f6:	4b04      	ldr	r3, [pc, #16]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80069f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069fc:	4a02      	ldr	r2, [pc, #8]	@ (8006a08 <HAL_RCC_OscConfig+0x4dc>)
 80069fe:	f043 0301 	orr.w	r3, r3, #1
 8006a02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a06:	e03a      	b.n	8006a7e <HAL_RCC_OscConfig+0x552>
 8006a08:	44020c00 	.word	0x44020c00
 8006a0c:	20000024 	.word	0x20000024
 8006a10:	44020800 	.word	0x44020800
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	2b85      	cmp	r3, #133	@ 0x85
 8006a1a:	d118      	bne.n	8006a4e <HAL_RCC_OscConfig+0x522>
 8006a1c:	4ba2      	ldr	r3, [pc, #648]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006a1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a22:	4aa1      	ldr	r2, [pc, #644]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006a24:	f043 0304 	orr.w	r3, r3, #4
 8006a28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a2c:	4b9e      	ldr	r3, [pc, #632]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006a2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a32:	4a9d      	ldr	r2, [pc, #628]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a3c:	4b9a      	ldr	r3, [pc, #616]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a42:	4a99      	ldr	r2, [pc, #612]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006a44:	f043 0301 	orr.w	r3, r3, #1
 8006a48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a4c:	e017      	b.n	8006a7e <HAL_RCC_OscConfig+0x552>
 8006a4e:	4b96      	ldr	r3, [pc, #600]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a54:	4a94      	ldr	r2, [pc, #592]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006a56:	f023 0301 	bic.w	r3, r3, #1
 8006a5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a5e:	4b92      	ldr	r3, [pc, #584]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a64:	4a90      	ldr	r2, [pc, #576]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006a66:	f023 0304 	bic.w	r3, r3, #4
 8006a6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a6e:	4b8e      	ldr	r3, [pc, #568]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a74:	4a8c      	ldr	r2, [pc, #560]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006a76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d016      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a86:	f7fc fb85 	bl	8003194 <HAL_GetTick>
 8006a8a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a8c:	e00a      	b.n	8006aa4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a8e:	f7fc fb81 	bl	8003194 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d901      	bls.n	8006aa4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e175      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aa4:	4b80      	ldr	r3, [pc, #512]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0ed      	beq.n	8006a8e <HAL_RCC_OscConfig+0x562>
 8006ab2:	e015      	b.n	8006ae0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab4:	f7fc fb6e 	bl	8003194 <HAL_GetTick>
 8006ab8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006aba:	e00a      	b.n	8006ad2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006abc:	f7fc fb6a 	bl	8003194 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e15e      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ad2:	4b75      	ldr	r3, [pc, #468]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1ed      	bne.n	8006abc <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0320 	and.w	r3, r3, #32
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d036      	beq.n	8006b5a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d019      	beq.n	8006b28 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006af4:	4b6c      	ldr	r3, [pc, #432]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a6b      	ldr	r2, [pc, #428]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006afa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006afe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b00:	f7fc fb48 	bl	8003194 <HAL_GetTick>
 8006b04:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006b08:	f7fc fb44 	bl	8003194 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e13a      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006b1a:	4b63      	ldr	r3, [pc, #396]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0f0      	beq.n	8006b08 <HAL_RCC_OscConfig+0x5dc>
 8006b26:	e018      	b.n	8006b5a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b28:	4b5f      	ldr	r3, [pc, #380]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a5e      	ldr	r2, [pc, #376]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006b2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b34:	f7fc fb2e 	bl	8003194 <HAL_GetTick>
 8006b38:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006b3c:	f7fc fb2a 	bl	8003194 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e120      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006b4e:	4b56      	ldr	r3, [pc, #344]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1f0      	bne.n	8006b3c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 8115 	beq.w	8006d8e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	2b18      	cmp	r3, #24
 8006b68:	f000 80af 	beq.w	8006cca <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	f040 8086 	bne.w	8006c82 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006b76:	4b4c      	ldr	r3, [pc, #304]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a4b      	ldr	r2, [pc, #300]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006b7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b82:	f7fc fb07 	bl	8003194 <HAL_GetTick>
 8006b86:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006b88:	e008      	b.n	8006b9c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006b8a:	f7fc fb03 	bl	8003194 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d901      	bls.n	8006b9c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e0f9      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006b9c:	4b42      	ldr	r3, [pc, #264]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1f0      	bne.n	8006b8a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8006ba8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006bb0:	f023 0303 	bic.w	r3, r3, #3
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006bbc:	0212      	lsls	r2, r2, #8
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	4939      	ldr	r1, [pc, #228]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	628b      	str	r3, [r1, #40]	@ 0x28
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	025b      	lsls	r3, r3, #9
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be0:	3b01      	subs	r3, #1
 8006be2:	041b      	lsls	r3, r3, #16
 8006be4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006be8:	431a      	orrs	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	061b      	lsls	r3, r3, #24
 8006bf2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006bf6:	492c      	ldr	r1, [pc, #176]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c00:	4a29      	ldr	r2, [pc, #164]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006c02:	f023 0310 	bic.w	r3, r3, #16
 8006c06:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c0c:	4a26      	ldr	r2, [pc, #152]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006c12:	4b25      	ldr	r3, [pc, #148]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c16:	4a24      	ldr	r2, [pc, #144]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006c18:	f043 0310 	orr.w	r3, r3, #16
 8006c1c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8006c1e:	4b22      	ldr	r3, [pc, #136]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c22:	f023 020c 	bic.w	r2, r3, #12
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c2a:	491f      	ldr	r1, [pc, #124]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8006c30:	4b1d      	ldr	r3, [pc, #116]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c34:	f023 0220 	bic.w	r2, r3, #32
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c3c:	491a      	ldr	r1, [pc, #104]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c42:	4b19      	ldr	r3, [pc, #100]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c46:	4a18      	ldr	r2, [pc, #96]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c4c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8006c4e:	4b16      	ldr	r3, [pc, #88]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a15      	ldr	r2, [pc, #84]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006c54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5a:	f7fc fa9b 	bl	8003194 <HAL_GetTick>
 8006c5e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006c60:	e008      	b.n	8006c74 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006c62:	f7fc fa97 	bl	8003194 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d901      	bls.n	8006c74 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e08d      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006c74:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d0f0      	beq.n	8006c62 <HAL_RCC_OscConfig+0x736>
 8006c80:	e085      	b.n	8006d8e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006c82:	4b09      	ldr	r3, [pc, #36]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a08      	ldr	r2, [pc, #32]	@ (8006ca8 <HAL_RCC_OscConfig+0x77c>)
 8006c88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c8e:	f7fc fa81 	bl	8003194 <HAL_GetTick>
 8006c92:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006c94:	e00a      	b.n	8006cac <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006c96:	f7fc fa7d 	bl	8003194 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d903      	bls.n	8006cac <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e073      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
 8006ca8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006cac:	4b3a      	ldr	r3, [pc, #232]	@ (8006d98 <HAL_RCC_OscConfig+0x86c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1ee      	bne.n	8006c96 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006cb8:	4b37      	ldr	r3, [pc, #220]	@ (8006d98 <HAL_RCC_OscConfig+0x86c>)
 8006cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbc:	4a36      	ldr	r2, [pc, #216]	@ (8006d98 <HAL_RCC_OscConfig+0x86c>)
 8006cbe:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006cc2:	f023 0303 	bic.w	r3, r3, #3
 8006cc6:	6293      	str	r3, [r2, #40]	@ 0x28
 8006cc8:	e061      	b.n	8006d8e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006cca:	4b33      	ldr	r3, [pc, #204]	@ (8006d98 <HAL_RCC_OscConfig+0x86c>)
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cce:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006cd0:	4b31      	ldr	r3, [pc, #196]	@ (8006d98 <HAL_RCC_OscConfig+0x86c>)
 8006cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d031      	beq.n	8006d42 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	f003 0203 	and.w	r2, r3, #3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d12a      	bne.n	8006d42 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	0a1b      	lsrs	r3, r3, #8
 8006cf0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d122      	bne.n	8006d42 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d06:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d11a      	bne.n	8006d42 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	0a5b      	lsrs	r3, r3, #9
 8006d10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d18:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d111      	bne.n	8006d42 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	0c1b      	lsrs	r3, r3, #16
 8006d22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d2a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d108      	bne.n	8006d42 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	0e1b      	lsrs	r3, r3, #24
 8006d34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d001      	beq.n	8006d46 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e024      	b.n	8006d90 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006d46:	4b14      	ldr	r3, [pc, #80]	@ (8006d98 <HAL_RCC_OscConfig+0x86c>)
 8006d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4a:	08db      	lsrs	r3, r3, #3
 8006d4c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d01a      	beq.n	8006d8e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006d58:	4b0f      	ldr	r3, [pc, #60]	@ (8006d98 <HAL_RCC_OscConfig+0x86c>)
 8006d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8006d98 <HAL_RCC_OscConfig+0x86c>)
 8006d5e:	f023 0310 	bic.w	r3, r3, #16
 8006d62:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d64:	f7fc fa16 	bl	8003194 <HAL_GetTick>
 8006d68:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8006d6a:	bf00      	nop
 8006d6c:	f7fc fa12 	bl	8003194 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d0f9      	beq.n	8006d6c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d7c:	4a06      	ldr	r2, [pc, #24]	@ (8006d98 <HAL_RCC_OscConfig+0x86c>)
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006d82:	4b05      	ldr	r3, [pc, #20]	@ (8006d98 <HAL_RCC_OscConfig+0x86c>)
 8006d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d86:	4a04      	ldr	r2, [pc, #16]	@ (8006d98 <HAL_RCC_OscConfig+0x86c>)
 8006d88:	f043 0310 	orr.w	r3, r3, #16
 8006d8c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3720      	adds	r7, #32
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	44020c00 	.word	0x44020c00

08006d9c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e19e      	b.n	80070ee <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006db0:	4b83      	ldr	r3, [pc, #524]	@ (8006fc0 <HAL_RCC_ClockConfig+0x224>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 030f 	and.w	r3, r3, #15
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d910      	bls.n	8006de0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dbe:	4b80      	ldr	r3, [pc, #512]	@ (8006fc0 <HAL_RCC_ClockConfig+0x224>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f023 020f 	bic.w	r2, r3, #15
 8006dc6:	497e      	ldr	r1, [pc, #504]	@ (8006fc0 <HAL_RCC_ClockConfig+0x224>)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dce:	4b7c      	ldr	r3, [pc, #496]	@ (8006fc0 <HAL_RCC_ClockConfig+0x224>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d001      	beq.n	8006de0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e186      	b.n	80070ee <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0310 	and.w	r3, r3, #16
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d012      	beq.n	8006e12 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	695a      	ldr	r2, [r3, #20]
 8006df0:	4b74      	ldr	r3, [pc, #464]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	0a1b      	lsrs	r3, r3, #8
 8006df6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d909      	bls.n	8006e12 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006dfe:	4b71      	ldr	r3, [pc, #452]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	021b      	lsls	r3, r3, #8
 8006e0c:	496d      	ldr	r1, [pc, #436]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0308 	and.w	r3, r3, #8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d012      	beq.n	8006e44 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691a      	ldr	r2, [r3, #16]
 8006e22:	4b68      	ldr	r3, [pc, #416]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	091b      	lsrs	r3, r3, #4
 8006e28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d909      	bls.n	8006e44 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006e30:	4b64      	ldr	r3, [pc, #400]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	011b      	lsls	r3, r3, #4
 8006e3e:	4961      	ldr	r1, [pc, #388]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0304 	and.w	r3, r3, #4
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d010      	beq.n	8006e72 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	4b5b      	ldr	r3, [pc, #364]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d908      	bls.n	8006e72 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006e60:	4b58      	ldr	r3, [pc, #352]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	4955      	ldr	r1, [pc, #340]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d010      	beq.n	8006ea0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	4b50      	ldr	r3, [pc, #320]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d908      	bls.n	8006ea0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006e8e:	4b4d      	ldr	r3, [pc, #308]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	f023 020f 	bic.w	r2, r3, #15
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	494a      	ldr	r1, [pc, #296]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 8093 	beq.w	8006fd4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d107      	bne.n	8006ec6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006eb6:	4b43      	ldr	r3, [pc, #268]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d121      	bne.n	8006f06 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e113      	b.n	80070ee <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d107      	bne.n	8006ede <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ece:	4b3d      	ldr	r3, [pc, #244]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d115      	bne.n	8006f06 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e107      	b.n	80070ee <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d107      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006ee6:	4b37      	ldr	r3, [pc, #220]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d109      	bne.n	8006f06 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e0fb      	b.n	80070ee <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ef6:	4b33      	ldr	r3, [pc, #204]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e0f3      	b.n	80070ee <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8006f06:	4b2f      	ldr	r3, [pc, #188]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	f023 0203 	bic.w	r2, r3, #3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	492c      	ldr	r1, [pc, #176]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f18:	f7fc f93c 	bl	8003194 <HAL_GetTick>
 8006f1c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d112      	bne.n	8006f4c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f26:	e00a      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006f28:	f7fc f934 	bl	8003194 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d901      	bls.n	8006f3e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e0d7      	b.n	80070ee <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f3e:	4b21      	ldr	r3, [pc, #132]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f003 0318 	and.w	r3, r3, #24
 8006f46:	2b18      	cmp	r3, #24
 8006f48:	d1ee      	bne.n	8006f28 <HAL_RCC_ClockConfig+0x18c>
 8006f4a:	e043      	b.n	8006fd4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d112      	bne.n	8006f7a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f54:	e00a      	b.n	8006f6c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006f56:	f7fc f91d 	bl	8003194 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d901      	bls.n	8006f6c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e0c0      	b.n	80070ee <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f6c:	4b15      	ldr	r3, [pc, #84]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	f003 0318 	and.w	r3, r3, #24
 8006f74:	2b10      	cmp	r3, #16
 8006f76:	d1ee      	bne.n	8006f56 <HAL_RCC_ClockConfig+0x1ba>
 8006f78:	e02c      	b.n	8006fd4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d122      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006f82:	e00a      	b.n	8006f9a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006f84:	f7fc f906 	bl	8003194 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e0a9      	b.n	80070ee <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc4 <HAL_RCC_ClockConfig+0x228>)
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	f003 0318 	and.w	r3, r3, #24
 8006fa2:	2b08      	cmp	r3, #8
 8006fa4:	d1ee      	bne.n	8006f84 <HAL_RCC_ClockConfig+0x1e8>
 8006fa6:	e015      	b.n	8006fd4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006fa8:	f7fc f8f4 	bl	8003194 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d906      	bls.n	8006fc8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e097      	b.n	80070ee <HAL_RCC_ClockConfig+0x352>
 8006fbe:	bf00      	nop
 8006fc0:	40022000 	.word	0x40022000
 8006fc4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006fc8:	4b4b      	ldr	r3, [pc, #300]	@ (80070f8 <HAL_RCC_ClockConfig+0x35c>)
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	f003 0318 	and.w	r3, r3, #24
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e9      	bne.n	8006fa8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d010      	beq.n	8007002 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	4b44      	ldr	r3, [pc, #272]	@ (80070f8 <HAL_RCC_ClockConfig+0x35c>)
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	f003 030f 	and.w	r3, r3, #15
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d208      	bcs.n	8007002 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006ff0:	4b41      	ldr	r3, [pc, #260]	@ (80070f8 <HAL_RCC_ClockConfig+0x35c>)
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	f023 020f 	bic.w	r2, r3, #15
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	493e      	ldr	r1, [pc, #248]	@ (80070f8 <HAL_RCC_ClockConfig+0x35c>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007002:	4b3e      	ldr	r3, [pc, #248]	@ (80070fc <HAL_RCC_ClockConfig+0x360>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 030f 	and.w	r3, r3, #15
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	429a      	cmp	r2, r3
 800700e:	d210      	bcs.n	8007032 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007010:	4b3a      	ldr	r3, [pc, #232]	@ (80070fc <HAL_RCC_ClockConfig+0x360>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f023 020f 	bic.w	r2, r3, #15
 8007018:	4938      	ldr	r1, [pc, #224]	@ (80070fc <HAL_RCC_ClockConfig+0x360>)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	4313      	orrs	r3, r2
 800701e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007020:	4b36      	ldr	r3, [pc, #216]	@ (80070fc <HAL_RCC_ClockConfig+0x360>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 030f 	and.w	r3, r3, #15
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d001      	beq.n	8007032 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e05d      	b.n	80070ee <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d010      	beq.n	8007060 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	4b2d      	ldr	r3, [pc, #180]	@ (80070f8 <HAL_RCC_ClockConfig+0x35c>)
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800704a:	429a      	cmp	r2, r3
 800704c:	d208      	bcs.n	8007060 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800704e:	4b2a      	ldr	r3, [pc, #168]	@ (80070f8 <HAL_RCC_ClockConfig+0x35c>)
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	4927      	ldr	r1, [pc, #156]	@ (80070f8 <HAL_RCC_ClockConfig+0x35c>)
 800705c:	4313      	orrs	r3, r2
 800705e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d012      	beq.n	8007092 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691a      	ldr	r2, [r3, #16]
 8007070:	4b21      	ldr	r3, [pc, #132]	@ (80070f8 <HAL_RCC_ClockConfig+0x35c>)
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	091b      	lsrs	r3, r3, #4
 8007076:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800707a:	429a      	cmp	r2, r3
 800707c:	d209      	bcs.n	8007092 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800707e:	4b1e      	ldr	r3, [pc, #120]	@ (80070f8 <HAL_RCC_ClockConfig+0x35c>)
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	491a      	ldr	r1, [pc, #104]	@ (80070f8 <HAL_RCC_ClockConfig+0x35c>)
 800708e:	4313      	orrs	r3, r2
 8007090:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0310 	and.w	r3, r3, #16
 800709a:	2b00      	cmp	r3, #0
 800709c:	d012      	beq.n	80070c4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	695a      	ldr	r2, [r3, #20]
 80070a2:	4b15      	ldr	r3, [pc, #84]	@ (80070f8 <HAL_RCC_ClockConfig+0x35c>)
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	0a1b      	lsrs	r3, r3, #8
 80070a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d209      	bcs.n	80070c4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80070b0:	4b11      	ldr	r3, [pc, #68]	@ (80070f8 <HAL_RCC_ClockConfig+0x35c>)
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	021b      	lsls	r3, r3, #8
 80070be:	490e      	ldr	r1, [pc, #56]	@ (80070f8 <HAL_RCC_ClockConfig+0x35c>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80070c4:	f000 f822 	bl	800710c <HAL_RCC_GetSysClockFreq>
 80070c8:	4602      	mov	r2, r0
 80070ca:	4b0b      	ldr	r3, [pc, #44]	@ (80070f8 <HAL_RCC_ClockConfig+0x35c>)
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	f003 030f 	and.w	r3, r3, #15
 80070d2:	490b      	ldr	r1, [pc, #44]	@ (8007100 <HAL_RCC_ClockConfig+0x364>)
 80070d4:	5ccb      	ldrb	r3, [r1, r3]
 80070d6:	fa22 f303 	lsr.w	r3, r2, r3
 80070da:	4a0a      	ldr	r2, [pc, #40]	@ (8007104 <HAL_RCC_ClockConfig+0x368>)
 80070dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80070de:	4b0a      	ldr	r3, [pc, #40]	@ (8007108 <HAL_RCC_ClockConfig+0x36c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fb ffcc 	bl	8003080 <HAL_InitTick>
 80070e8:	4603      	mov	r3, r0
 80070ea:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80070ec:	7afb      	ldrb	r3, [r7, #11]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	44020c00 	.word	0x44020c00
 80070fc:	40022000 	.word	0x40022000
 8007100:	080146fc 	.word	0x080146fc
 8007104:	20000004 	.word	0x20000004
 8007108:	20000024 	.word	0x20000024

0800710c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800710c:	b480      	push	{r7}
 800710e:	b089      	sub	sp, #36	@ 0x24
 8007110:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8007112:	4b8c      	ldr	r3, [pc, #560]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	f003 0318 	and.w	r3, r3, #24
 800711a:	2b08      	cmp	r3, #8
 800711c:	d102      	bne.n	8007124 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800711e:	4b8a      	ldr	r3, [pc, #552]	@ (8007348 <HAL_RCC_GetSysClockFreq+0x23c>)
 8007120:	61fb      	str	r3, [r7, #28]
 8007122:	e107      	b.n	8007334 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007124:	4b87      	ldr	r3, [pc, #540]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	f003 0318 	and.w	r3, r3, #24
 800712c:	2b00      	cmp	r3, #0
 800712e:	d112      	bne.n	8007156 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8007130:	4b84      	ldr	r3, [pc, #528]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0320 	and.w	r3, r3, #32
 8007138:	2b00      	cmp	r3, #0
 800713a:	d009      	beq.n	8007150 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800713c:	4b81      	ldr	r3, [pc, #516]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	08db      	lsrs	r3, r3, #3
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	4a81      	ldr	r2, [pc, #516]	@ (800734c <HAL_RCC_GetSysClockFreq+0x240>)
 8007148:	fa22 f303 	lsr.w	r3, r2, r3
 800714c:	61fb      	str	r3, [r7, #28]
 800714e:	e0f1      	b.n	8007334 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8007150:	4b7e      	ldr	r3, [pc, #504]	@ (800734c <HAL_RCC_GetSysClockFreq+0x240>)
 8007152:	61fb      	str	r3, [r7, #28]
 8007154:	e0ee      	b.n	8007334 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007156:	4b7b      	ldr	r3, [pc, #492]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	f003 0318 	and.w	r3, r3, #24
 800715e:	2b10      	cmp	r3, #16
 8007160:	d102      	bne.n	8007168 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007162:	4b7b      	ldr	r3, [pc, #492]	@ (8007350 <HAL_RCC_GetSysClockFreq+0x244>)
 8007164:	61fb      	str	r3, [r7, #28]
 8007166:	e0e5      	b.n	8007334 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007168:	4b76      	ldr	r3, [pc, #472]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	f003 0318 	and.w	r3, r3, #24
 8007170:	2b18      	cmp	r3, #24
 8007172:	f040 80dd 	bne.w	8007330 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007176:	4b73      	ldr	r3, [pc, #460]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 8007178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800717a:	f003 0303 	and.w	r3, r3, #3
 800717e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007180:	4b70      	ldr	r3, [pc, #448]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 8007182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007184:	0a1b      	lsrs	r3, r3, #8
 8007186:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800718a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800718c:	4b6d      	ldr	r3, [pc, #436]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 800718e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007190:	091b      	lsrs	r3, r3, #4
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8007198:	4b6a      	ldr	r3, [pc, #424]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 800719a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800719c:	08db      	lsrs	r3, r3, #3
 800719e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	fb02 f303 	mul.w	r3, r2, r3
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f000 80b7 	beq.w	800732a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d003      	beq.n	80071ca <HAL_RCC_GetSysClockFreq+0xbe>
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d056      	beq.n	8007276 <HAL_RCC_GetSysClockFreq+0x16a>
 80071c8:	e077      	b.n	80072ba <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80071ca:	4b5e      	ldr	r3, [pc, #376]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0320 	and.w	r3, r3, #32
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d02d      	beq.n	8007232 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071d6:	4b5b      	ldr	r3, [pc, #364]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	08db      	lsrs	r3, r3, #3
 80071dc:	f003 0303 	and.w	r3, r3, #3
 80071e0:	4a5a      	ldr	r2, [pc, #360]	@ (800734c <HAL_RCC_GetSysClockFreq+0x240>)
 80071e2:	fa22 f303 	lsr.w	r3, r2, r3
 80071e6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	ee07 3a90 	vmov	s15, r3
 80071f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007200:	4b50      	ldr	r3, [pc, #320]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 8007202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007208:	ee07 3a90 	vmov	s15, r3
 800720c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007210:	ed97 6a02 	vldr	s12, [r7, #8]
 8007214:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8007354 <HAL_RCC_GetSysClockFreq+0x248>
 8007218:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800721c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007220:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007224:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8007230:	e065      	b.n	80072fe <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	ee07 3a90 	vmov	s15, r3
 8007238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8007358 <HAL_RCC_GetSysClockFreq+0x24c>
 8007240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007244:	4b3f      	ldr	r3, [pc, #252]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 8007246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724c:	ee07 3a90 	vmov	s15, r3
 8007250:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007254:	ed97 6a02 	vldr	s12, [r7, #8]
 8007258:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007354 <HAL_RCC_GetSysClockFreq+0x248>
 800725c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007260:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007264:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007268:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800726c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007270:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007274:	e043      	b.n	80072fe <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	ee07 3a90 	vmov	s15, r3
 800727c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007280:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800735c <HAL_RCC_GetSysClockFreq+0x250>
 8007284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007288:	4b2e      	ldr	r3, [pc, #184]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 800728a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800728c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007298:	ed97 6a02 	vldr	s12, [r7, #8]
 800729c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8007354 <HAL_RCC_GetSysClockFreq+0x248>
 80072a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80072a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80072b8:	e021      	b.n	80072fe <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	ee07 3a90 	vmov	s15, r3
 80072c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007360 <HAL_RCC_GetSysClockFreq+0x254>
 80072c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 80072ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d4:	ee07 3a90 	vmov	s15, r3
 80072d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80072dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80072e0:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8007354 <HAL_RCC_GetSysClockFreq+0x248>
 80072e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80072ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80072fc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80072fe:	4b11      	ldr	r3, [pc, #68]	@ (8007344 <HAL_RCC_GetSysClockFreq+0x238>)
 8007300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007302:	0a5b      	lsrs	r3, r3, #9
 8007304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007308:	3301      	adds	r3, #1
 800730a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007316:	edd7 6a06 	vldr	s13, [r7, #24]
 800731a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800731e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007322:	ee17 3a90 	vmov	r3, s15
 8007326:	61fb      	str	r3, [r7, #28]
 8007328:	e004      	b.n	8007334 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800732a:	2300      	movs	r3, #0
 800732c:	61fb      	str	r3, [r7, #28]
 800732e:	e001      	b.n	8007334 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8007330:	4b06      	ldr	r3, [pc, #24]	@ (800734c <HAL_RCC_GetSysClockFreq+0x240>)
 8007332:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8007334:	69fb      	ldr	r3, [r7, #28]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3724      	adds	r7, #36	@ 0x24
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	44020c00 	.word	0x44020c00
 8007348:	003d0900 	.word	0x003d0900
 800734c:	03d09000 	.word	0x03d09000
 8007350:	007a1200 	.word	0x007a1200
 8007354:	46000000 	.word	0x46000000
 8007358:	4c742400 	.word	0x4c742400
 800735c:	4af42400 	.word	0x4af42400
 8007360:	4a742400 	.word	0x4a742400

08007364 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007368:	f7ff fed0 	bl	800710c <HAL_RCC_GetSysClockFreq>
 800736c:	4602      	mov	r2, r0
 800736e:	4b08      	ldr	r3, [pc, #32]	@ (8007390 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007370:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8007372:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007376:	4907      	ldr	r1, [pc, #28]	@ (8007394 <HAL_RCC_GetHCLKFreq+0x30>)
 8007378:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800737a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800737e:	fa22 f303 	lsr.w	r3, r2, r3
 8007382:	4a05      	ldr	r2, [pc, #20]	@ (8007398 <HAL_RCC_GetHCLKFreq+0x34>)
 8007384:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8007386:	4b04      	ldr	r3, [pc, #16]	@ (8007398 <HAL_RCC_GetHCLKFreq+0x34>)
 8007388:	681b      	ldr	r3, [r3, #0]
}
 800738a:	4618      	mov	r0, r3
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	44020c00 	.word	0x44020c00
 8007394:	080146fc 	.word	0x080146fc
 8007398:	20000004 	.word	0x20000004

0800739c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80073a0:	f7ff ffe0 	bl	8007364 <HAL_RCC_GetHCLKFreq>
 80073a4:	4602      	mov	r2, r0
 80073a6:	4b06      	ldr	r3, [pc, #24]	@ (80073c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	091b      	lsrs	r3, r3, #4
 80073ac:	f003 0307 	and.w	r3, r3, #7
 80073b0:	4904      	ldr	r1, [pc, #16]	@ (80073c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073b2:	5ccb      	ldrb	r3, [r1, r3]
 80073b4:	f003 031f 	and.w	r3, r3, #31
 80073b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073bc:	4618      	mov	r0, r3
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	44020c00 	.word	0x44020c00
 80073c4:	0801470c 	.word	0x0801470c

080073c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80073cc:	f7ff ffca 	bl	8007364 <HAL_RCC_GetHCLKFreq>
 80073d0:	4602      	mov	r2, r0
 80073d2:	4b06      	ldr	r3, [pc, #24]	@ (80073ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	0a1b      	lsrs	r3, r3, #8
 80073d8:	f003 0307 	and.w	r3, r3, #7
 80073dc:	4904      	ldr	r1, [pc, #16]	@ (80073f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80073de:	5ccb      	ldrb	r3, [r1, r3]
 80073e0:	f003 031f 	and.w	r3, r3, #31
 80073e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	44020c00 	.word	0x44020c00
 80073f0:	0801470c 	.word	0x0801470c

080073f4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80073f8:	f7ff ffb4 	bl	8007364 <HAL_RCC_GetHCLKFreq>
 80073fc:	4602      	mov	r2, r0
 80073fe:	4b06      	ldr	r3, [pc, #24]	@ (8007418 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	0b1b      	lsrs	r3, r3, #12
 8007404:	f003 0307 	and.w	r3, r3, #7
 8007408:	4904      	ldr	r1, [pc, #16]	@ (800741c <HAL_RCC_GetPCLK3Freq+0x28>)
 800740a:	5ccb      	ldrb	r3, [r1, r3]
 800740c:	f003 031f 	and.w	r3, r3, #31
 8007410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007414:	4618      	mov	r0, r3
 8007416:	bd80      	pop	{r7, pc}
 8007418:	44020c00 	.word	0x44020c00
 800741c:	0801470c 	.word	0x0801470c

08007420 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007424:	b0d8      	sub	sp, #352	@ 0x160
 8007426:	af00      	add	r7, sp, #0
 8007428:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800742c:	2300      	movs	r3, #0
 800742e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007432:	2300      	movs	r3, #0
 8007434:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007438:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8007444:	2500      	movs	r5, #0
 8007446:	ea54 0305 	orrs.w	r3, r4, r5
 800744a:	d00b      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800744c:	4bcd      	ldr	r3, [pc, #820]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800744e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007452:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8007456:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800745a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800745c:	4ac9      	ldr	r2, [pc, #804]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800745e:	430b      	orrs	r3, r1
 8007460:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007464:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f002 0801 	and.w	r8, r2, #1
 8007470:	f04f 0900 	mov.w	r9, #0
 8007474:	ea58 0309 	orrs.w	r3, r8, r9
 8007478:	d042      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800747a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800747e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007480:	2b05      	cmp	r3, #5
 8007482:	d823      	bhi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xac>
 8007484:	a201      	add	r2, pc, #4	@ (adr r2, 800748c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8007486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748a:	bf00      	nop
 800748c:	080074d5 	.word	0x080074d5
 8007490:	080074a5 	.word	0x080074a5
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074d5 	.word	0x080074d5
 800749c:	080074d5 	.word	0x080074d5
 80074a0:	080074d5 	.word	0x080074d5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80074a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074a8:	3308      	adds	r3, #8
 80074aa:	4618      	mov	r0, r3
 80074ac:	f004 fee0 	bl	800c270 <RCCEx_PLL2_Config>
 80074b0:	4603      	mov	r3, r0
 80074b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80074b6:	e00e      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074bc:	3330      	adds	r3, #48	@ 0x30
 80074be:	4618      	mov	r0, r3
 80074c0:	f004 ff6e 	bl	800c3a0 <RCCEx_PLL3_Config>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80074ca:	e004      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80074d2:	e000      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80074d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10c      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80074de:	4ba9      	ldr	r3, [pc, #676]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80074e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80074e4:	f023 0107 	bic.w	r1, r3, #7
 80074e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ee:	4aa5      	ldr	r2, [pc, #660]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80074f0:	430b      	orrs	r3, r1
 80074f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80074f6:	e003      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074fc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007500:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	f002 0a02 	and.w	sl, r2, #2
 800750c:	f04f 0b00 	mov.w	fp, #0
 8007510:	ea5a 030b 	orrs.w	r3, sl, fp
 8007514:	f000 8088 	beq.w	8007628 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8007518:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800751c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800751e:	2b28      	cmp	r3, #40	@ 0x28
 8007520:	d868      	bhi.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007522:	a201      	add	r2, pc, #4	@ (adr r2, 8007528 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	080075fd 	.word	0x080075fd
 800752c:	080075f5 	.word	0x080075f5
 8007530:	080075f5 	.word	0x080075f5
 8007534:	080075f5 	.word	0x080075f5
 8007538:	080075f5 	.word	0x080075f5
 800753c:	080075f5 	.word	0x080075f5
 8007540:	080075f5 	.word	0x080075f5
 8007544:	080075f5 	.word	0x080075f5
 8007548:	080075cd 	.word	0x080075cd
 800754c:	080075f5 	.word	0x080075f5
 8007550:	080075f5 	.word	0x080075f5
 8007554:	080075f5 	.word	0x080075f5
 8007558:	080075f5 	.word	0x080075f5
 800755c:	080075f5 	.word	0x080075f5
 8007560:	080075f5 	.word	0x080075f5
 8007564:	080075f5 	.word	0x080075f5
 8007568:	080075e1 	.word	0x080075e1
 800756c:	080075f5 	.word	0x080075f5
 8007570:	080075f5 	.word	0x080075f5
 8007574:	080075f5 	.word	0x080075f5
 8007578:	080075f5 	.word	0x080075f5
 800757c:	080075f5 	.word	0x080075f5
 8007580:	080075f5 	.word	0x080075f5
 8007584:	080075f5 	.word	0x080075f5
 8007588:	080075fd 	.word	0x080075fd
 800758c:	080075f5 	.word	0x080075f5
 8007590:	080075f5 	.word	0x080075f5
 8007594:	080075f5 	.word	0x080075f5
 8007598:	080075f5 	.word	0x080075f5
 800759c:	080075f5 	.word	0x080075f5
 80075a0:	080075f5 	.word	0x080075f5
 80075a4:	080075f5 	.word	0x080075f5
 80075a8:	080075fd 	.word	0x080075fd
 80075ac:	080075f5 	.word	0x080075f5
 80075b0:	080075f5 	.word	0x080075f5
 80075b4:	080075f5 	.word	0x080075f5
 80075b8:	080075f5 	.word	0x080075f5
 80075bc:	080075f5 	.word	0x080075f5
 80075c0:	080075f5 	.word	0x080075f5
 80075c4:	080075f5 	.word	0x080075f5
 80075c8:	080075fd 	.word	0x080075fd
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80075cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075d0:	3308      	adds	r3, #8
 80075d2:	4618      	mov	r0, r3
 80075d4:	f004 fe4c 	bl	800c270 <RCCEx_PLL2_Config>
 80075d8:	4603      	mov	r3, r0
 80075da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80075de:	e00e      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80075e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075e4:	3330      	adds	r3, #48	@ 0x30
 80075e6:	4618      	mov	r0, r3
 80075e8:	f004 feda 	bl	800c3a0 <RCCEx_PLL3_Config>
 80075ec:	4603      	mov	r3, r0
 80075ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80075f2:	e004      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80075fa:	e000      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80075fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10c      	bne.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007606:	4b5f      	ldr	r3, [pc, #380]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007608:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800760c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007610:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007616:	4a5b      	ldr	r2, [pc, #364]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007618:	430b      	orrs	r3, r1
 800761a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800761e:	e003      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007620:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007624:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007628:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f002 0304 	and.w	r3, r2, #4
 8007634:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8007638:	2300      	movs	r3, #0
 800763a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800763e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8007642:	460b      	mov	r3, r1
 8007644:	4313      	orrs	r3, r2
 8007646:	d04e      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8007648:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800764c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800764e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007652:	d02c      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8007654:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007658:	d825      	bhi.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800765a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800765e:	d028      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007664:	d81f      	bhi.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007666:	2bc0      	cmp	r3, #192	@ 0xc0
 8007668:	d025      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800766a:	2bc0      	cmp	r3, #192	@ 0xc0
 800766c:	d81b      	bhi.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800766e:	2b80      	cmp	r3, #128	@ 0x80
 8007670:	d00f      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8007672:	2b80      	cmp	r3, #128	@ 0x80
 8007674:	d817      	bhi.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007676:	2b00      	cmp	r3, #0
 8007678:	d01f      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800767a:	2b40      	cmp	r3, #64	@ 0x40
 800767c:	d113      	bne.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800767e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007682:	3308      	adds	r3, #8
 8007684:	4618      	mov	r0, r3
 8007686:	f004 fdf3 	bl	800c270 <RCCEx_PLL2_Config>
 800768a:	4603      	mov	r3, r0
 800768c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8007690:	e014      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007692:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007696:	3330      	adds	r3, #48	@ 0x30
 8007698:	4618      	mov	r0, r3
 800769a:	f004 fe81 	bl	800c3a0 <RCCEx_PLL3_Config>
 800769e:	4603      	mov	r3, r0
 80076a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80076a4:	e00a      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80076ac:	e006      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80076ae:	bf00      	nop
 80076b0:	e004      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80076b2:	bf00      	nop
 80076b4:	e002      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80076b6:	bf00      	nop
 80076b8:	e000      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80076ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10c      	bne.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80076c4:	4b2f      	ldr	r3, [pc, #188]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80076c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80076ca:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80076ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076d4:	4a2b      	ldr	r2, [pc, #172]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80076d6:	430b      	orrs	r3, r1
 80076d8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80076dc:	e003      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ee:	f002 0308 	and.w	r3, r2, #8
 80076f2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80076f6:	2300      	movs	r3, #0
 80076f8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80076fc:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8007700:	460b      	mov	r3, r1
 8007702:	4313      	orrs	r3, r2
 8007704:	d056      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8007706:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800770a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800770c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007710:	d031      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8007712:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007716:	d82a      	bhi.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007718:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800771c:	d02d      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800771e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007722:	d824      	bhi.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007724:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007728:	d029      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800772a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800772e:	d81e      	bhi.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007734:	d011      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8007736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800773a:	d818      	bhi.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800773c:	2b00      	cmp	r3, #0
 800773e:	d023      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007744:	d113      	bne.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007746:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800774a:	3308      	adds	r3, #8
 800774c:	4618      	mov	r0, r3
 800774e:	f004 fd8f 	bl	800c270 <RCCEx_PLL2_Config>
 8007752:	4603      	mov	r3, r0
 8007754:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8007758:	e017      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800775a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800775e:	3330      	adds	r3, #48	@ 0x30
 8007760:	4618      	mov	r0, r3
 8007762:	f004 fe1d 	bl	800c3a0 <RCCEx_PLL3_Config>
 8007766:	4603      	mov	r3, r0
 8007768:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800776c:	e00d      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007774:	e009      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8007776:	bf00      	nop
 8007778:	e007      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800777a:	bf00      	nop
 800777c:	e005      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800777e:	bf00      	nop
 8007780:	e003      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007782:	bf00      	nop
 8007784:	44020c00 	.word	0x44020c00
        break;
 8007788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800778a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10c      	bne.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007792:	4bbb      	ldr	r3, [pc, #748]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007794:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007798:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800779c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077a2:	4ab7      	ldr	r2, [pc, #732]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80077a4:	430b      	orrs	r3, r1
 80077a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80077aa:	e003      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077b0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80077b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f002 0310 	and.w	r3, r2, #16
 80077c0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80077c4:	2300      	movs	r3, #0
 80077c6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80077ca:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80077ce:	460b      	mov	r3, r1
 80077d0:	4313      	orrs	r3, r2
 80077d2:	d053      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80077d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80077de:	d031      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80077e0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80077e4:	d82a      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80077e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077ea:	d02d      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80077ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077f0:	d824      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80077f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077f6:	d029      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80077f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077fc:	d81e      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80077fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007802:	d011      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007808:	d818      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d020      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800780e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007812:	d113      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007814:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007818:	3308      	adds	r3, #8
 800781a:	4618      	mov	r0, r3
 800781c:	f004 fd28 	bl	800c270 <RCCEx_PLL2_Config>
 8007820:	4603      	mov	r3, r0
 8007822:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8007826:	e014      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007828:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800782c:	3330      	adds	r3, #48	@ 0x30
 800782e:	4618      	mov	r0, r3
 8007830:	f004 fdb6 	bl	800c3a0 <RCCEx_PLL3_Config>
 8007834:	4603      	mov	r3, r0
 8007836:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800783a:	e00a      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007842:	e006      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007844:	bf00      	nop
 8007846:	e004      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007848:	bf00      	nop
 800784a:	e002      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800784c:	bf00      	nop
 800784e:	e000      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007852:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10c      	bne.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800785a:	4b89      	ldr	r3, [pc, #548]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800785c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007860:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007864:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007868:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800786a:	4a85      	ldr	r2, [pc, #532]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800786c:	430b      	orrs	r3, r1
 800786e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007872:	e003      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007874:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007878:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800787c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	f002 0320 	and.w	r3, r2, #32
 8007888:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800788c:	2300      	movs	r3, #0
 800788e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007892:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8007896:	460b      	mov	r3, r1
 8007898:	4313      	orrs	r3, r2
 800789a:	d053      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800789c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078a2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80078a6:	d031      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80078a8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80078ac:	d82a      	bhi.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80078ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078b2:	d02d      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80078b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078b8:	d824      	bhi.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80078ba:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80078be:	d029      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80078c0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80078c4:	d81e      	bhi.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80078c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078ca:	d011      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80078cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078d0:	d818      	bhi.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d020      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80078d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078da:	d113      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80078dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078e0:	3308      	adds	r3, #8
 80078e2:	4618      	mov	r0, r3
 80078e4:	f004 fcc4 	bl	800c270 <RCCEx_PLL2_Config>
 80078e8:	4603      	mov	r3, r0
 80078ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80078ee:	e014      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078f4:	3330      	adds	r3, #48	@ 0x30
 80078f6:	4618      	mov	r0, r3
 80078f8:	f004 fd52 	bl	800c3a0 <RCCEx_PLL3_Config>
 80078fc:	4603      	mov	r3, r0
 80078fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8007902:	e00a      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800790a:	e006      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800790c:	bf00      	nop
 800790e:	e004      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007910:	bf00      	nop
 8007912:	e002      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007914:	bf00      	nop
 8007916:	e000      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800791a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10c      	bne.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8007922:	4b57      	ldr	r3, [pc, #348]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007924:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007928:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800792c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007932:	4a53      	ldr	r2, [pc, #332]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007934:	430b      	orrs	r3, r1
 8007936:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800793a:	e003      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007940:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007944:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007950:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8007954:	2300      	movs	r3, #0
 8007956:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800795a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800795e:	460b      	mov	r3, r1
 8007960:	4313      	orrs	r3, r2
 8007962:	d053      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8007964:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800796a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800796e:	d031      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8007970:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007974:	d82a      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800797a:	d02d      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800797c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007980:	d824      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007982:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007986:	d029      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007988:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800798c:	d81e      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800798e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007992:	d011      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8007994:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007998:	d818      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d020      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800799e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079a2:	d113      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80079a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079a8:	3308      	adds	r3, #8
 80079aa:	4618      	mov	r0, r3
 80079ac:	f004 fc60 	bl	800c270 <RCCEx_PLL2_Config>
 80079b0:	4603      	mov	r3, r0
 80079b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80079b6:	e014      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079bc:	3330      	adds	r3, #48	@ 0x30
 80079be:	4618      	mov	r0, r3
 80079c0:	f004 fcee 	bl	800c3a0 <RCCEx_PLL3_Config>
 80079c4:	4603      	mov	r3, r0
 80079c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80079ca:	e00a      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80079d2:	e006      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80079d4:	bf00      	nop
 80079d6:	e004      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80079d8:	bf00      	nop
 80079da:	e002      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80079dc:	bf00      	nop
 80079de:	e000      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80079e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10c      	bne.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80079ea:	4b25      	ldr	r3, [pc, #148]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80079ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079f0:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 80079f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079fa:	4a21      	ldr	r2, [pc, #132]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80079fc:	430b      	orrs	r3, r1
 80079fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007a02:	e003      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a04:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a08:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007a18:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8007a22:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8007a26:	460b      	mov	r3, r1
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	d055      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8007a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a32:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007a36:	d033      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8007a38:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007a3c:	d82c      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007a3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a42:	d02f      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8007a44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a48:	d826      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007a4a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a4e:	d02b      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8007a50:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a54:	d820      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007a56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a5a:	d013      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007a5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a60:	d81a      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d022      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8007a66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a6a:	d115      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a70:	3308      	adds	r3, #8
 8007a72:	4618      	mov	r0, r3
 8007a74:	f004 fbfc 	bl	800c270 <RCCEx_PLL2_Config>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8007a7e:	e016      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8007a80:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a88:	3330      	adds	r3, #48	@ 0x30
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f004 fc88 	bl	800c3a0 <RCCEx_PLL3_Config>
 8007a90:	4603      	mov	r3, r0
 8007a92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8007a96:	e00a      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007a9e:	e006      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007aa0:	bf00      	nop
 8007aa2:	e004      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007aa4:	bf00      	nop
 8007aa6:	e002      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007aa8:	bf00      	nop
 8007aaa:	e000      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10c      	bne.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8007ab6:	4bbb      	ldr	r3, [pc, #748]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007ab8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007abc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ac4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ac6:	4ab7      	ldr	r2, [pc, #732]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007ace:	e003      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ad4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8007ad8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007ae4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8007aee:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8007af2:	460b      	mov	r3, r1
 8007af4:	4313      	orrs	r3, r2
 8007af6:	d053      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8007af8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007afc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007afe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007b02:	d031      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8007b04:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007b08:	d82a      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007b0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b0e:	d02d      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8007b10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b14:	d824      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007b16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b1a:	d029      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8007b1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b20:	d81e      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007b22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b26:	d011      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007b28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b2c:	d818      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d020      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8007b32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b36:	d113      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f004 fb96 	bl	800c270 <RCCEx_PLL2_Config>
 8007b44:	4603      	mov	r3, r0
 8007b46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8007b4a:	e014      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b50:	3330      	adds	r3, #48	@ 0x30
 8007b52:	4618      	mov	r0, r3
 8007b54:	f004 fc24 	bl	800c3a0 <RCCEx_PLL3_Config>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8007b5e:	e00a      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007b66:	e006      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007b68:	bf00      	nop
 8007b6a:	e004      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007b6c:	bf00      	nop
 8007b6e:	e002      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007b70:	bf00      	nop
 8007b72:	e000      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10c      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8007b7e:	4b89      	ldr	r3, [pc, #548]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007b80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007b84:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007b88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b8e:	4a85      	ldr	r2, [pc, #532]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007b90:	430b      	orrs	r3, r1
 8007b92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007b96:	e003      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b98:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b9c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8007ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007bac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007bb6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	d055      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8007bc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bc8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007bcc:	d031      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8007bce:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007bd2:	d82a      	bhi.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bd8:	d02d      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8007bda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bde:	d824      	bhi.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007be0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007be4:	d029      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8007be6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007bea:	d81e      	bhi.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007bec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bf0:	d011      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8007bf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bf6:	d818      	bhi.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d020      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8007bfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c00:	d113      	bne.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c06:	3308      	adds	r3, #8
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f004 fb31 	bl	800c270 <RCCEx_PLL2_Config>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007c14:	e014      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c1a:	3330      	adds	r3, #48	@ 0x30
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f004 fbbf 	bl	800c3a0 <RCCEx_PLL3_Config>
 8007c22:	4603      	mov	r3, r0
 8007c24:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007c28:	e00a      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007c30:	e006      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007c32:	bf00      	nop
 8007c34:	e004      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007c36:	bf00      	nop
 8007c38:	e002      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007c3a:	bf00      	nop
 8007c3c:	e000      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10d      	bne.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8007c48:	4b56      	ldr	r3, [pc, #344]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007c4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007c4e:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8007c52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c5a:	4a52      	ldr	r2, [pc, #328]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007c5c:	430b      	orrs	r3, r1
 8007c5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007c62:	e003      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c68:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8007c6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007c78:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007c82:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007c86:	460b      	mov	r3, r1
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	d044      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8007c8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c94:	2b05      	cmp	r3, #5
 8007c96:	d823      	bhi.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007c98:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8007c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9e:	bf00      	nop
 8007ca0:	08007ce9 	.word	0x08007ce9
 8007ca4:	08007cb9 	.word	0x08007cb9
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007ce9 	.word	0x08007ce9
 8007cb0:	08007ce9 	.word	0x08007ce9
 8007cb4:	08007ce9 	.word	0x08007ce9
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007cb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f004 fad6 	bl	800c270 <RCCEx_PLL2_Config>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8007cca:	e00e      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ccc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cd0:	3330      	adds	r3, #48	@ 0x30
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f004 fb64 	bl	800c3a0 <RCCEx_PLL3_Config>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8007cde:	e004      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007ce6:	e000      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8007ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10d      	bne.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8007cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007cf4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007cf8:	f023 0107 	bic.w	r1, r3, #7
 8007cfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d04:	4a27      	ldr	r2, [pc, #156]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007d06:	430b      	orrs	r3, r1
 8007d08:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007d0c:	e003      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d12:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8007d16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007d22:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007d26:	2300      	movs	r3, #0
 8007d28:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007d2c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007d30:	460b      	mov	r3, r1
 8007d32:	4313      	orrs	r3, r2
 8007d34:	d04f      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8007d36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d3e:	2b50      	cmp	r3, #80	@ 0x50
 8007d40:	d029      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007d42:	2b50      	cmp	r3, #80	@ 0x50
 8007d44:	d823      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007d46:	2b40      	cmp	r3, #64	@ 0x40
 8007d48:	d027      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8007d4a:	2b40      	cmp	r3, #64	@ 0x40
 8007d4c:	d81f      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007d4e:	2b30      	cmp	r3, #48	@ 0x30
 8007d50:	d025      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8007d52:	2b30      	cmp	r3, #48	@ 0x30
 8007d54:	d81b      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007d56:	2b20      	cmp	r3, #32
 8007d58:	d00f      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007d5a:	2b20      	cmp	r3, #32
 8007d5c:	d817      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d022      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007d62:	2b10      	cmp	r3, #16
 8007d64:	d113      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f004 fa7f 	bl	800c270 <RCCEx_PLL2_Config>
 8007d72:	4603      	mov	r3, r0
 8007d74:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8007d78:	e017      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d7e:	3330      	adds	r3, #48	@ 0x30
 8007d80:	4618      	mov	r0, r3
 8007d82:	f004 fb0d 	bl	800c3a0 <RCCEx_PLL3_Config>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8007d8c:	e00d      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d94:	e009      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007d96:	bf00      	nop
 8007d98:	e007      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007d9a:	bf00      	nop
 8007d9c:	e005      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007d9e:	bf00      	nop
 8007da0:	e003      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8007da2:	bf00      	nop
 8007da4:	44020c00 	.word	0x44020c00
        break;
 8007da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007daa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10d      	bne.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8007db2:	4baf      	ldr	r3, [pc, #700]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007db4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007db8:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007dbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dc4:	4aaa      	ldr	r2, [pc, #680]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007dc6:	430b      	orrs	r3, r1
 8007dc8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007dcc:	e003      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007dd2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007de2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007de6:	2300      	movs	r3, #0
 8007de8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007dec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4313      	orrs	r3, r2
 8007df4:	d055      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8007df6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dfe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007e02:	d031      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8007e04:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007e08:	d82a      	bhi.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007e0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e0e:	d02d      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8007e10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e14:	d824      	bhi.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007e16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e1a:	d029      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8007e1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e20:	d81e      	bhi.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007e22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e26:	d011      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8007e28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e2c:	d818      	bhi.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d020      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8007e32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e36:	d113      	bne.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f004 fa16 	bl	800c270 <RCCEx_PLL2_Config>
 8007e44:	4603      	mov	r3, r0
 8007e46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007e4a:	e014      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e50:	3330      	adds	r3, #48	@ 0x30
 8007e52:	4618      	mov	r0, r3
 8007e54:	f004 faa4 	bl	800c3a0 <RCCEx_PLL3_Config>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007e5e:	e00a      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007e66:	e006      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007e68:	bf00      	nop
 8007e6a:	e004      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007e6c:	bf00      	nop
 8007e6e:	e002      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007e70:	bf00      	nop
 8007e72:	e000      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10d      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007e7e:	4b7c      	ldr	r3, [pc, #496]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e84:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007e88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e90:	4a77      	ldr	r2, [pc, #476]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007e92:	430b      	orrs	r3, r1
 8007e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007e98:	e003      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e9e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ea2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007eae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007eb8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	d03d      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8007ec2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ece:	d01b      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8007ed0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ed4:	d814      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007ed6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eda:	d017      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8007edc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ee0:	d80e      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d014      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8007ee6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eea:	d109      	bne.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007eec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ef0:	3330      	adds	r3, #48	@ 0x30
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f004 fa54 	bl	800c3a0 <RCCEx_PLL3_Config>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8007efe:	e008      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007f06:	e004      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007f08:	bf00      	nop
 8007f0a:	e002      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007f0c:	bf00      	nop
 8007f0e:	e000      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10d      	bne.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007f1a:	4b55      	ldr	r3, [pc, #340]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007f1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f20:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007f24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f2c:	4a50      	ldr	r2, [pc, #320]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007f2e:	430b      	orrs	r3, r1
 8007f30:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007f34:	e003      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f3a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f46:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007f4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f54:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	d03d      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8007f5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f66:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007f6a:	d01b      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8007f6c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007f70:	d814      	bhi.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007f72:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007f76:	d017      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8007f78:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007f7c:	d80e      	bhi.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d014      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8007f82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f86:	d109      	bne.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007f88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f8c:	3330      	adds	r3, #48	@ 0x30
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f004 fa06 	bl	800c3a0 <RCCEx_PLL3_Config>
 8007f94:	4603      	mov	r3, r0
 8007f96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8007f9a:	e008      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007fa2:	e004      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007fa4:	bf00      	nop
 8007fa6:	e002      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007fa8:	bf00      	nop
 8007faa:	e000      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10d      	bne.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007fb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007fbc:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007fc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fc8:	4a29      	ldr	r2, [pc, #164]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007fca:	430b      	orrs	r3, r1
 8007fcc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007fd0:	e003      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007fd6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007fda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007fea:	2300      	movs	r3, #0
 8007fec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007ff0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	d040      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8007ffa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008002:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008006:	d01b      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8008008:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800800c:	d814      	bhi.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800800e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008012:	d017      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008014:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008018:	d80e      	bhi.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800801a:	2b00      	cmp	r3, #0
 800801c:	d014      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800801e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008022:	d109      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008024:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008028:	3330      	adds	r3, #48	@ 0x30
 800802a:	4618      	mov	r0, r3
 800802c:	f004 f9b8 	bl	800c3a0 <RCCEx_PLL3_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8008036:	e008      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800803e:	e004      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008040:	bf00      	nop
 8008042:	e002      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008044:	bf00      	nop
 8008046:	e000      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800804a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800804e:	2b00      	cmp	r3, #0
 8008050:	d110      	bne.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008052:	4b07      	ldr	r3, [pc, #28]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008054:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008058:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800805c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008060:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008064:	4a02      	ldr	r2, [pc, #8]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008066:	430b      	orrs	r3, r1
 8008068:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800806c:	e006      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800806e:	bf00      	nop
 8008070:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008074:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008078:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800807c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	2100      	movs	r1, #0
 8008086:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800808a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800808e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008092:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008096:	460b      	mov	r3, r1
 8008098:	4313      	orrs	r3, r2
 800809a:	d03d      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800809c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80080a8:	d01b      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80080aa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80080ae:	d814      	bhi.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80080b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080b4:	d017      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80080b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080ba:	d80e      	bhi.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d014      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80080c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080c4:	d109      	bne.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80080c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080ca:	3330      	adds	r3, #48	@ 0x30
 80080cc:	4618      	mov	r0, r3
 80080ce:	f004 f967 	bl	800c3a0 <RCCEx_PLL3_Config>
 80080d2:	4603      	mov	r3, r0
 80080d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80080d8:	e008      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80080e0:	e004      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80080e2:	bf00      	nop
 80080e4:	e002      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80080e6:	bf00      	nop
 80080e8:	e000      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80080ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10d      	bne.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80080f4:	4bbe      	ldr	r3, [pc, #760]	@ (80083f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80080f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080fa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80080fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008102:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008106:	4aba      	ldr	r2, [pc, #744]	@ (80083f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008108:	430b      	orrs	r3, r1
 800810a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800810e:	e003      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008110:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008114:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8008118:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800811c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008120:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008124:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008128:	2300      	movs	r3, #0
 800812a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800812e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008132:	460b      	mov	r3, r1
 8008134:	4313      	orrs	r3, r2
 8008136:	d035      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8008138:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800813c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008140:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008144:	d015      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8008146:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800814a:	d80e      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800814c:	2b00      	cmp	r3, #0
 800814e:	d012      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8008150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008154:	d109      	bne.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008156:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800815a:	3330      	adds	r3, #48	@ 0x30
 800815c:	4618      	mov	r0, r3
 800815e:	f004 f91f 	bl	800c3a0 <RCCEx_PLL3_Config>
 8008162:	4603      	mov	r3, r0
 8008164:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8008168:	e006      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008170:	e002      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8008172:	bf00      	nop
 8008174:	e000      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8008176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008178:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10d      	bne.n	800819c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8008180:	4b9b      	ldr	r3, [pc, #620]	@ (80083f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008182:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008186:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800818a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800818e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008192:	4a97      	ldr	r2, [pc, #604]	@ (80083f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008194:	430b      	orrs	r3, r1
 8008196:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800819a:	e003      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800819c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80081a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80081a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	2100      	movs	r1, #0
 80081ae:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80081b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80081ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80081be:	460b      	mov	r3, r1
 80081c0:	4313      	orrs	r3, r2
 80081c2:	d00e      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80081c4:	4b8a      	ldr	r3, [pc, #552]	@ (80083f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	4a89      	ldr	r2, [pc, #548]	@ (80083f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80081ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081ce:	61d3      	str	r3, [r2, #28]
 80081d0:	4b87      	ldr	r3, [pc, #540]	@ (80083f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80081d2:	69d9      	ldr	r1, [r3, #28]
 80081d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081d8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80081dc:	4a84      	ldr	r2, [pc, #528]	@ (80083f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80081de:	430b      	orrs	r3, r1
 80081e0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80081e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80081ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081f2:	2300      	movs	r3, #0
 80081f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80081f8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80081fc:	460b      	mov	r3, r1
 80081fe:	4313      	orrs	r3, r2
 8008200:	d055      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8008202:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008206:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800820a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800820e:	d031      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8008210:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008214:	d82a      	bhi.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800821a:	d02d      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800821c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008220:	d824      	bhi.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008226:	d029      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8008228:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800822c:	d81e      	bhi.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800822e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008232:	d011      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8008234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008238:	d818      	bhi.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800823a:	2b00      	cmp	r3, #0
 800823c:	d020      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800823e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008242:	d113      	bne.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008244:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008248:	3308      	adds	r3, #8
 800824a:	4618      	mov	r0, r3
 800824c:	f004 f810 	bl	800c270 <RCCEx_PLL2_Config>
 8008250:	4603      	mov	r3, r0
 8008252:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8008256:	e014      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008258:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800825c:	3330      	adds	r3, #48	@ 0x30
 800825e:	4618      	mov	r0, r3
 8008260:	f004 f89e 	bl	800c3a0 <RCCEx_PLL3_Config>
 8008264:	4603      	mov	r3, r0
 8008266:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800826a:	e00a      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008272:	e006      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008274:	bf00      	nop
 8008276:	e004      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008278:	bf00      	nop
 800827a:	e002      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800827c:	bf00      	nop
 800827e:	e000      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008282:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10d      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800828a:	4b59      	ldr	r3, [pc, #356]	@ (80083f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800828c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008290:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008294:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008298:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800829c:	4a54      	ldr	r2, [pc, #336]	@ (80083f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800829e:	430b      	orrs	r3, r1
 80082a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80082a4:	e003      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80082aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80082ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80082ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082be:	2300      	movs	r3, #0
 80082c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082c4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80082c8:	460b      	mov	r3, r1
 80082ca:	4313      	orrs	r3, r2
 80082cc:	d055      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80082ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80082d6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80082da:	d031      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80082dc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80082e0:	d82a      	bhi.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80082e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082e6:	d02d      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80082e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082ec:	d824      	bhi.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80082ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082f2:	d029      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80082f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082f8:	d81e      	bhi.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80082fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082fe:	d011      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8008300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008304:	d818      	bhi.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008306:	2b00      	cmp	r3, #0
 8008308:	d020      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800830a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800830e:	d113      	bne.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008310:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008314:	3308      	adds	r3, #8
 8008316:	4618      	mov	r0, r3
 8008318:	f003 ffaa 	bl	800c270 <RCCEx_PLL2_Config>
 800831c:	4603      	mov	r3, r0
 800831e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8008322:	e014      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008324:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008328:	3330      	adds	r3, #48	@ 0x30
 800832a:	4618      	mov	r0, r3
 800832c:	f004 f838 	bl	800c3a0 <RCCEx_PLL3_Config>
 8008330:	4603      	mov	r3, r0
 8008332:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8008336:	e00a      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800833e:	e006      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008340:	bf00      	nop
 8008342:	e004      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008344:	bf00      	nop
 8008346:	e002      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008348:	bf00      	nop
 800834a:	e000      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800834c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800834e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10d      	bne.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008356:	4b26      	ldr	r3, [pc, #152]	@ (80083f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008358:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800835c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008360:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008364:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008368:	4a21      	ldr	r2, [pc, #132]	@ (80083f0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800836a:	430b      	orrs	r3, r1
 800836c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008370:	e003      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008372:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008376:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800837a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	2100      	movs	r1, #0
 8008384:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8008388:	f003 0320 	and.w	r3, r3, #32
 800838c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008390:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008394:	460b      	mov	r3, r1
 8008396:	4313      	orrs	r3, r2
 8008398:	d057      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800839a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800839e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80083a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083a6:	d033      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80083a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083ac:	d82c      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80083ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083b2:	d02f      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80083b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083b8:	d826      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80083ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083be:	d02b      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80083c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083c4:	d820      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80083c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083ca:	d013      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80083cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083d0:	d81a      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d022      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80083d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083da:	d115      	bne.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80083dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083e0:	3308      	adds	r3, #8
 80083e2:	4618      	mov	r0, r3
 80083e4:	f003 ff44 	bl	800c270 <RCCEx_PLL2_Config>
 80083e8:	4603      	mov	r3, r0
 80083ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80083ee:	e016      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80083f0:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80083f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083f8:	3330      	adds	r3, #48	@ 0x30
 80083fa:	4618      	mov	r0, r3
 80083fc:	f003 ffd0 	bl	800c3a0 <RCCEx_PLL3_Config>
 8008400:	4603      	mov	r3, r0
 8008402:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8008406:	e00a      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800840e:	e006      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008410:	bf00      	nop
 8008412:	e004      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008414:	bf00      	nop
 8008416:	e002      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008418:	bf00      	nop
 800841a:	e000      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800841c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800841e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10d      	bne.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8008426:	4bbb      	ldr	r3, [pc, #748]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008428:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800842c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008430:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008434:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008438:	4ab6      	ldr	r2, [pc, #728]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800843a:	430b      	orrs	r3, r1
 800843c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008440:	e003      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008442:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008446:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800844a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	2100      	movs	r1, #0
 8008454:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8008458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800845c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008460:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008464:	460b      	mov	r3, r1
 8008466:	4313      	orrs	r3, r2
 8008468:	d055      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800846a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800846e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008472:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008476:	d031      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8008478:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800847c:	d82a      	bhi.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800847e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008482:	d02d      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8008484:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008488:	d824      	bhi.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800848a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800848e:	d029      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8008490:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008494:	d81e      	bhi.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8008496:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800849a:	d011      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800849c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084a0:	d818      	bhi.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d020      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80084a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084aa:	d113      	bne.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80084ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084b0:	3308      	adds	r3, #8
 80084b2:	4618      	mov	r0, r3
 80084b4:	f003 fedc 	bl	800c270 <RCCEx_PLL2_Config>
 80084b8:	4603      	mov	r3, r0
 80084ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80084be:	e014      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80084c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084c4:	3330      	adds	r3, #48	@ 0x30
 80084c6:	4618      	mov	r0, r3
 80084c8:	f003 ff6a 	bl	800c3a0 <RCCEx_PLL3_Config>
 80084cc:	4603      	mov	r3, r0
 80084ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80084d2:	e00a      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80084da:	e006      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80084dc:	bf00      	nop
 80084de:	e004      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80084e0:	bf00      	nop
 80084e2:	e002      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80084e4:	bf00      	nop
 80084e6:	e000      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80084e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10d      	bne.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80084f2:	4b88      	ldr	r3, [pc, #544]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80084f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80084f8:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80084fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008500:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008504:	4a83      	ldr	r2, [pc, #524]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008506:	430b      	orrs	r3, r1
 8008508:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800850c:	e003      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800850e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008512:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8008516:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	2100      	movs	r1, #0
 8008520:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8008524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008528:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800852c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008530:	460b      	mov	r3, r1
 8008532:	4313      	orrs	r3, r2
 8008534:	d055      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8008536:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800853a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800853e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008542:	d031      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8008544:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008548:	d82a      	bhi.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800854a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800854e:	d02d      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8008550:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008554:	d824      	bhi.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8008556:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800855a:	d029      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800855c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008560:	d81e      	bhi.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8008562:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008566:	d011      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8008568:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800856c:	d818      	bhi.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800856e:	2b00      	cmp	r3, #0
 8008570:	d020      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8008572:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008576:	d113      	bne.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008578:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800857c:	3308      	adds	r3, #8
 800857e:	4618      	mov	r0, r3
 8008580:	f003 fe76 	bl	800c270 <RCCEx_PLL2_Config>
 8008584:	4603      	mov	r3, r0
 8008586:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800858a:	e014      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800858c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008590:	3330      	adds	r3, #48	@ 0x30
 8008592:	4618      	mov	r0, r3
 8008594:	f003 ff04 	bl	800c3a0 <RCCEx_PLL3_Config>
 8008598:	4603      	mov	r3, r0
 800859a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800859e:	e00a      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80085a6:	e006      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80085a8:	bf00      	nop
 80085aa:	e004      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80085ac:	bf00      	nop
 80085ae:	e002      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80085b0:	bf00      	nop
 80085b2:	e000      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80085b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10d      	bne.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80085be:	4b55      	ldr	r3, [pc, #340]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80085c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80085c4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80085c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085d0:	4a50      	ldr	r2, [pc, #320]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80085d2:	430b      	orrs	r3, r1
 80085d4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80085d8:	e003      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085de:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80085e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	2100      	movs	r1, #0
 80085ec:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80085f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80085f8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80085fc:	460b      	mov	r3, r1
 80085fe:	4313      	orrs	r3, r2
 8008600:	d055      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8008602:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008606:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800860a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800860e:	d031      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8008610:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008614:	d82a      	bhi.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800861a:	d02d      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800861c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008620:	d824      	bhi.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008622:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008626:	d029      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8008628:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800862c:	d81e      	bhi.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800862e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008632:	d011      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8008634:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008638:	d818      	bhi.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800863a:	2b00      	cmp	r3, #0
 800863c:	d020      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800863e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008642:	d113      	bne.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008644:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008648:	3308      	adds	r3, #8
 800864a:	4618      	mov	r0, r3
 800864c:	f003 fe10 	bl	800c270 <RCCEx_PLL2_Config>
 8008650:	4603      	mov	r3, r0
 8008652:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8008656:	e014      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008658:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800865c:	3330      	adds	r3, #48	@ 0x30
 800865e:	4618      	mov	r0, r3
 8008660:	f003 fe9e 	bl	800c3a0 <RCCEx_PLL3_Config>
 8008664:	4603      	mov	r3, r0
 8008666:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800866a:	e00a      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008672:	e006      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008674:	bf00      	nop
 8008676:	e004      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008678:	bf00      	nop
 800867a:	e002      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800867c:	bf00      	nop
 800867e:	e000      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008682:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10d      	bne.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800868a:	4b22      	ldr	r3, [pc, #136]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800868c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008690:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008694:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008698:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800869c:	4a1d      	ldr	r2, [pc, #116]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800869e:	430b      	orrs	r3, r1
 80086a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80086a4:	e003      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80086aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80086ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80086ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086be:	2300      	movs	r3, #0
 80086c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80086c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80086c8:	460b      	mov	r3, r1
 80086ca:	4313      	orrs	r3, r2
 80086cc:	d055      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80086ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80086d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086da:	d035      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80086dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086e0:	d82e      	bhi.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80086e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80086e6:	d031      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80086e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80086ec:	d828      	bhi.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80086ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086f2:	d01b      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80086f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086f8:	d822      	bhi.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80086fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008702:	d009      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8008704:	e01c      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008706:	4b03      	ldr	r3, [pc, #12]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800870a:	4a02      	ldr	r2, [pc, #8]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800870c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008710:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008712:	e01c      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8008714:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008718:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800871c:	3308      	adds	r3, #8
 800871e:	4618      	mov	r0, r3
 8008720:	f003 fda6 	bl	800c270 <RCCEx_PLL2_Config>
 8008724:	4603      	mov	r3, r0
 8008726:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800872a:	e010      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800872c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008730:	3330      	adds	r3, #48	@ 0x30
 8008732:	4618      	mov	r0, r3
 8008734:	f003 fe34 	bl	800c3a0 <RCCEx_PLL3_Config>
 8008738:	4603      	mov	r3, r0
 800873a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800873e:	e006      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008746:	e002      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8008748:	bf00      	nop
 800874a:	e000      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800874c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800874e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10d      	bne.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8008756:	4bc3      	ldr	r3, [pc, #780]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800875c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008760:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008764:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008768:	4abe      	ldr	r2, [pc, #760]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800876a:	430b      	orrs	r3, r1
 800876c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008770:	e003      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008772:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008776:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800877a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800877e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008782:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008786:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800878a:	2300      	movs	r3, #0
 800878c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008790:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008794:	460b      	mov	r3, r1
 8008796:	4313      	orrs	r3, r2
 8008798:	d051      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800879a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800879e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80087a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087a6:	d033      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80087a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087ac:	d82c      	bhi.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80087ae:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80087b2:	d02d      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80087b4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80087b8:	d826      	bhi.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80087ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087be:	d019      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80087c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087c4:	d820      	bhi.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d003      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80087ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80087ce:	d007      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80087d0:	e01a      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087d2:	4ba4      	ldr	r3, [pc, #656]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80087d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d6:	4aa3      	ldr	r2, [pc, #652]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80087d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087dc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80087de:	e018      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80087e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087e4:	3308      	adds	r3, #8
 80087e6:	4618      	mov	r0, r3
 80087e8:	f003 fd42 	bl	800c270 <RCCEx_PLL2_Config>
 80087ec:	4603      	mov	r3, r0
 80087ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80087f2:	e00e      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80087f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087f8:	3330      	adds	r3, #48	@ 0x30
 80087fa:	4618      	mov	r0, r3
 80087fc:	f003 fdd0 	bl	800c3a0 <RCCEx_PLL3_Config>
 8008800:	4603      	mov	r3, r0
 8008802:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008806:	e004      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800880e:	e000      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8008810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008812:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10d      	bne.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800881a:	4b92      	ldr	r3, [pc, #584]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800881c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008820:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8008824:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008828:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800882c:	4a8d      	ldr	r2, [pc, #564]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800882e:	430b      	orrs	r3, r1
 8008830:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008834:	e003      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008836:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800883a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800883e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800884a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800884c:	2300      	movs	r3, #0
 800884e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008850:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008854:	460b      	mov	r3, r1
 8008856:	4313      	orrs	r3, r2
 8008858:	d032      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800885a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800885e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008862:	2b05      	cmp	r3, #5
 8008864:	d80f      	bhi.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8008866:	2b03      	cmp	r3, #3
 8008868:	d211      	bcs.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800886a:	2b01      	cmp	r3, #1
 800886c:	d911      	bls.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800886e:	2b02      	cmp	r3, #2
 8008870:	d109      	bne.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008872:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008876:	3308      	adds	r3, #8
 8008878:	4618      	mov	r0, r3
 800887a:	f003 fcf9 	bl	800c270 <RCCEx_PLL2_Config>
 800887e:	4603      	mov	r3, r0
 8008880:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008884:	e006      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800888c:	e002      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800888e:	bf00      	nop
 8008890:	e000      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8008892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008894:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10d      	bne.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800889c:	4b71      	ldr	r3, [pc, #452]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800889e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088a2:	f023 0107 	bic.w	r1, r3, #7
 80088a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80088ae:	4a6d      	ldr	r2, [pc, #436]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80088b0:	430b      	orrs	r3, r1
 80088b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80088b6:	e003      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088bc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80088c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	2100      	movs	r1, #0
 80088ca:	6739      	str	r1, [r7, #112]	@ 0x70
 80088cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80088d2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80088d6:	460b      	mov	r3, r1
 80088d8:	4313      	orrs	r3, r2
 80088da:	d024      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80088dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d005      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	d005      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80088f2:	e002      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80088f4:	bf00      	nop
 80088f6:	e000      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80088f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10d      	bne.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8008902:	4b58      	ldr	r3, [pc, #352]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008908:	f023 0108 	bic.w	r1, r3, #8
 800890c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008910:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008914:	4a53      	ldr	r2, [pc, #332]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008916:	430b      	orrs	r3, r1
 8008918:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800891c:	e003      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800891e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008922:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008926:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008932:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008934:	2300      	movs	r3, #0
 8008936:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008938:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800893c:	460b      	mov	r3, r1
 800893e:	4313      	orrs	r3, r2
 8008940:	f000 80b9 	beq.w	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8008944:	4b48      	ldr	r3, [pc, #288]	@ (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8008946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008948:	4a47      	ldr	r2, [pc, #284]	@ (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800894a:	f043 0301 	orr.w	r3, r3, #1
 800894e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008950:	f7fa fc20 	bl	8003194 <HAL_GetTick>
 8008954:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8008958:	e00b      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800895a:	f7fa fc1b 	bl	8003194 <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	2b02      	cmp	r3, #2
 8008968:	d903      	bls.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008970:	e005      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8008972:	4b3d      	ldr	r3, [pc, #244]	@ (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8008974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0ed      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800897e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008982:	2b00      	cmp	r3, #0
 8008984:	f040 8093 	bne.w	8008aae <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008988:	4b36      	ldr	r3, [pc, #216]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800898a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800898e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008992:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008996:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800899a:	2b00      	cmp	r3, #0
 800899c:	d023      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800899e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089a2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80089a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d01b      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80089ae:	4b2d      	ldr	r3, [pc, #180]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80089b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089b8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089bc:	4b29      	ldr	r3, [pc, #164]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80089be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089c2:	4a28      	ldr	r2, [pc, #160]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80089c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089cc:	4b25      	ldr	r3, [pc, #148]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80089ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089d2:	4a24      	ldr	r2, [pc, #144]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80089d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80089dc:	4a21      	ldr	r2, [pc, #132]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80089de:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80089e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80089e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d019      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f2:	f7fa fbcf 	bl	8003194 <HAL_GetTick>
 80089f6:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089fa:	e00d      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089fc:	f7fa fbca 	bl	8003194 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008a06:	1ad2      	subs	r2, r2, r3
 8008a08:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d903      	bls.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8008a16:	e006      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a18:	4b12      	ldr	r3, [pc, #72]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a1e:	f003 0302 	and.w	r3, r3, #2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d0ea      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8008a26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d13a      	bne.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8008a2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a32:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a3e:	d115      	bne.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8008a40:	4b08      	ldr	r3, [pc, #32]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008a42:	69db      	ldr	r3, [r3, #28]
 8008a44:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008a48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a4c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008a50:	091b      	lsrs	r3, r3, #4
 8008a52:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008a56:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8008a5a:	4a02      	ldr	r2, [pc, #8]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008a5c:	430b      	orrs	r3, r1
 8008a5e:	61d3      	str	r3, [r2, #28]
 8008a60:	e00a      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8008a62:	bf00      	nop
 8008a64:	44020c00 	.word	0x44020c00
 8008a68:	44020800 	.word	0x44020800
 8008a6c:	4b9f      	ldr	r3, [pc, #636]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008a6e:	69db      	ldr	r3, [r3, #28]
 8008a70:	4a9e      	ldr	r2, [pc, #632]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008a72:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a76:	61d3      	str	r3, [r2, #28]
 8008a78:	4b9c      	ldr	r3, [pc, #624]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a7e:	4a9b      	ldr	r2, [pc, #620]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a84:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008a88:	4b98      	ldr	r3, [pc, #608]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008a8a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8008a8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a92:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a9a:	4a94      	ldr	r2, [pc, #592]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008a9c:	430b      	orrs	r3, r1
 8008a9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008aa2:	e008      	b.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008aa4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008aa8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8008aac:	e003      	b.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008ab2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008ab6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abe:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8008ac2:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ac8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008acc:	460b      	mov	r3, r1
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	d035      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008ad2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ad6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008ada:	2b30      	cmp	r3, #48	@ 0x30
 8008adc:	d014      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8008ade:	2b30      	cmp	r3, #48	@ 0x30
 8008ae0:	d80e      	bhi.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8008ae2:	2b20      	cmp	r3, #32
 8008ae4:	d012      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8008ae6:	2b20      	cmp	r3, #32
 8008ae8:	d80a      	bhi.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d010      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8008aee:	2b10      	cmp	r3, #16
 8008af0:	d106      	bne.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008af2:	4b7e      	ldr	r3, [pc, #504]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af6:	4a7d      	ldr	r2, [pc, #500]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008afc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8008afe:	e008      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008b06:	e004      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008b08:	bf00      	nop
 8008b0a:	e002      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008b0c:	bf00      	nop
 8008b0e:	e000      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10d      	bne.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008b1a:	4b74      	ldr	r3, [pc, #464]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b20:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008b24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b28:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008b2c:	4a6f      	ldr	r2, [pc, #444]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008b2e:	430b      	orrs	r3, r1
 8008b30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008b34:	e003      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b3a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008b3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008b4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b50:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008b54:	460b      	mov	r3, r1
 8008b56:	4313      	orrs	r3, r2
 8008b58:	d033      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8008b5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b5e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d002      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8008b66:	2b40      	cmp	r3, #64	@ 0x40
 8008b68:	d007      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8008b6a:	e010      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b6c:	4b5f      	ldr	r3, [pc, #380]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b70:	4a5e      	ldr	r2, [pc, #376]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008b72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b76:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8008b78:	e00d      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b7e:	3308      	adds	r3, #8
 8008b80:	4618      	mov	r0, r3
 8008b82:	f003 fb75 	bl	800c270 <RCCEx_PLL2_Config>
 8008b86:	4603      	mov	r3, r0
 8008b88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8008b8c:	e003      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b96:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10d      	bne.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8008b9e:	4b53      	ldr	r3, [pc, #332]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008ba0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ba4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8008ba8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8008bb0:	4a4e      	ldr	r2, [pc, #312]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008bb2:	430b      	orrs	r3, r1
 8008bb4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008bb8:	e003      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008bbe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008bc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008bce:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bd4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	d033      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8008bde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008be2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d002      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8008bea:	2b80      	cmp	r3, #128	@ 0x80
 8008bec:	d007      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8008bee:	e010      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bf0:	4b3e      	ldr	r3, [pc, #248]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf4:	4a3d      	ldr	r2, [pc, #244]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bfa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8008bfc:	e00d      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008bfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c02:	3308      	adds	r3, #8
 8008c04:	4618      	mov	r0, r3
 8008c06:	f003 fb33 	bl	800c270 <RCCEx_PLL2_Config>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8008c10:	e003      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10d      	bne.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8008c22:	4b32      	ldr	r3, [pc, #200]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008c24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c28:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8008c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c30:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008c34:	4a2d      	ldr	r2, [pc, #180]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008c36:	430b      	orrs	r3, r1
 8008c38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008c3c:	e003      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008c42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008c46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8008c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c54:	2300      	movs	r3, #0
 8008c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c58:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	d04a      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8008c62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c6a:	2b04      	cmp	r3, #4
 8008c6c:	d827      	bhi.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8008c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008c89 	.word	0x08008c89
 8008c78:	08008c97 	.word	0x08008c97
 8008c7c:	08008cab 	.word	0x08008cab
 8008c80:	08008cc7 	.word	0x08008cc7
 8008c84:	08008cc7 	.word	0x08008cc7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c88:	4b18      	ldr	r3, [pc, #96]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8c:	4a17      	ldr	r2, [pc, #92]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008c8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c92:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008c94:	e018      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f003 fae7 	bl	800c270 <RCCEx_PLL2_Config>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008ca8:	e00e      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cae:	3330      	adds	r3, #48	@ 0x30
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f003 fb75 	bl	800c3a0 <RCCEx_PLL3_Config>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008cbc:	e004      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008cc4:	e000      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8008cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cc8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10f      	bne.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008cd0:	4b06      	ldr	r3, [pc, #24]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008cd6:	f023 0107 	bic.w	r1, r3, #7
 8008cda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ce2:	4a02      	ldr	r2, [pc, #8]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008ce4:	430b      	orrs	r3, r1
 8008ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008cea:	e005      	b.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8008cec:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008cf4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008cf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d00:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008d04:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d06:	2300      	movs	r3, #0
 8008d08:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d0a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008d0e:	460b      	mov	r3, r1
 8008d10:	4313      	orrs	r3, r2
 8008d12:	f000 8081 	beq.w	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8008d16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d1e:	2b20      	cmp	r3, #32
 8008d20:	d85f      	bhi.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8008d22:	a201      	add	r2, pc, #4	@ (adr r2, 8008d28 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8008d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d28:	08008dad 	.word	0x08008dad
 8008d2c:	08008de3 	.word	0x08008de3
 8008d30:	08008de3 	.word	0x08008de3
 8008d34:	08008de3 	.word	0x08008de3
 8008d38:	08008de3 	.word	0x08008de3
 8008d3c:	08008de3 	.word	0x08008de3
 8008d40:	08008de3 	.word	0x08008de3
 8008d44:	08008de3 	.word	0x08008de3
 8008d48:	08008dbb 	.word	0x08008dbb
 8008d4c:	08008de3 	.word	0x08008de3
 8008d50:	08008de3 	.word	0x08008de3
 8008d54:	08008de3 	.word	0x08008de3
 8008d58:	08008de3 	.word	0x08008de3
 8008d5c:	08008de3 	.word	0x08008de3
 8008d60:	08008de3 	.word	0x08008de3
 8008d64:	08008de3 	.word	0x08008de3
 8008d68:	08008dcf 	.word	0x08008dcf
 8008d6c:	08008de3 	.word	0x08008de3
 8008d70:	08008de3 	.word	0x08008de3
 8008d74:	08008de3 	.word	0x08008de3
 8008d78:	08008de3 	.word	0x08008de3
 8008d7c:	08008de3 	.word	0x08008de3
 8008d80:	08008de3 	.word	0x08008de3
 8008d84:	08008de3 	.word	0x08008de3
 8008d88:	08008deb 	.word	0x08008deb
 8008d8c:	08008de3 	.word	0x08008de3
 8008d90:	08008de3 	.word	0x08008de3
 8008d94:	08008de3 	.word	0x08008de3
 8008d98:	08008de3 	.word	0x08008de3
 8008d9c:	08008de3 	.word	0x08008de3
 8008da0:	08008de3 	.word	0x08008de3
 8008da4:	08008de3 	.word	0x08008de3
 8008da8:	08008deb 	.word	0x08008deb
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dac:	4bab      	ldr	r3, [pc, #684]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db0:	4aaa      	ldr	r2, [pc, #680]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008db6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008db8:	e018      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008dba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008dbe:	3308      	adds	r3, #8
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f003 fa55 	bl	800c270 <RCCEx_PLL2_Config>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008dcc:	e00e      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008dce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008dd2:	3330      	adds	r3, #48	@ 0x30
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f003 fae3 	bl	800c3a0 <RCCEx_PLL3_Config>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008de0:	e004      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008de8:	e000      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8008dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10d      	bne.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008df4:	4b99      	ldr	r3, [pc, #612]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008dfa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008dfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e06:	4a95      	ldr	r2, [pc, #596]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008e08:	430b      	orrs	r3, r1
 8008e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e0e:	e003      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e10:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008e14:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008e18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008e24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e26:	2300      	movs	r3, #0
 8008e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e2a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4313      	orrs	r3, r2
 8008e32:	d04e      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8008e34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e40:	d02e      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8008e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e46:	d827      	bhi.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008e48:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e4a:	d02b      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8008e4c:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e4e:	d823      	bhi.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008e50:	2b80      	cmp	r3, #128	@ 0x80
 8008e52:	d017      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8008e54:	2b80      	cmp	r3, #128	@ 0x80
 8008e56:	d81f      	bhi.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8008e5c:	2b40      	cmp	r3, #64	@ 0x40
 8008e5e:	d007      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8008e60:	e01a      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e62:	4b7e      	ldr	r3, [pc, #504]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e66:	4a7d      	ldr	r2, [pc, #500]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e6c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008e6e:	e01a      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e74:	3308      	adds	r3, #8
 8008e76:	4618      	mov	r0, r3
 8008e78:	f003 f9fa 	bl	800c270 <RCCEx_PLL2_Config>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008e82:	e010      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e88:	3330      	adds	r3, #48	@ 0x30
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f003 fa88 	bl	800c3a0 <RCCEx_PLL3_Config>
 8008e90:	4603      	mov	r3, r0
 8008e92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008e96:	e006      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008e9e:	e002      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008ea0:	bf00      	nop
 8008ea2:	e000      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ea6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10d      	bne.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008eae:	4b6b      	ldr	r3, [pc, #428]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008eb4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008eb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ec0:	4a66      	ldr	r2, [pc, #408]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008ec2:	430b      	orrs	r3, r1
 8008ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008ec8:	e003      	b.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008ece:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8008ed2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008ede:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ee4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008ee8:	460b      	mov	r3, r1
 8008eea:	4313      	orrs	r3, r2
 8008eec:	d055      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8008eee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ef2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008ef6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008efa:	d031      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8008efc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008f00:	d82a      	bhi.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008f02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f06:	d02d      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8008f08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f0c:	d824      	bhi.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008f0e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008f12:	d029      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8008f14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008f18:	d81e      	bhi.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f1e:	d011      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8008f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f24:	d818      	bhi.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d020      	beq.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8008f2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f2e:	d113      	bne.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f34:	3308      	adds	r3, #8
 8008f36:	4618      	mov	r0, r3
 8008f38:	f003 f99a 	bl	800c270 <RCCEx_PLL2_Config>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008f42:	e014      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008f44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f48:	3330      	adds	r3, #48	@ 0x30
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f003 fa28 	bl	800c3a0 <RCCEx_PLL3_Config>
 8008f50:	4603      	mov	r3, r0
 8008f52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008f56:	e00a      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008f5e:	e006      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008f60:	bf00      	nop
 8008f62:	e004      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008f64:	bf00      	nop
 8008f66:	e002      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008f68:	bf00      	nop
 8008f6a:	e000      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10d      	bne.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8008f76:	4b39      	ldr	r3, [pc, #228]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f7c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008f80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f84:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008f88:	4a34      	ldr	r2, [pc, #208]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008f8a:	430b      	orrs	r3, r1
 8008f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008f90:	e003      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008f96:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8008f9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fa8:	2300      	movs	r3, #0
 8008faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	d058      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8008fb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fbe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008fc2:	d031      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8008fc4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008fc8:	d82a      	bhi.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008fca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008fce:	d02d      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8008fd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008fd4:	d824      	bhi.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008fd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fda:	d029      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8008fdc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fe0:	d81e      	bhi.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fe6:	d011      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8008fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fec:	d818      	bhi.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d020      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8008ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ff6:	d113      	bne.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	4618      	mov	r0, r3
 8009000:	f003 f936 	bl	800c270 <RCCEx_PLL2_Config>
 8009004:	4603      	mov	r3, r0
 8009006:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800900a:	e014      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800900c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009010:	3330      	adds	r3, #48	@ 0x30
 8009012:	4618      	mov	r0, r3
 8009014:	f003 f9c4 	bl	800c3a0 <RCCEx_PLL3_Config>
 8009018:	4603      	mov	r3, r0
 800901a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800901e:	e00a      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009026:	e006      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009028:	bf00      	nop
 800902a:	e004      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800902c:	bf00      	nop
 800902e:	e002      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009030:	bf00      	nop
 8009032:	e000      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009036:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800903a:	2b00      	cmp	r3, #0
 800903c:	d110      	bne.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800903e:	4b07      	ldr	r3, [pc, #28]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009044:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8009048:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800904c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009050:	4902      	ldr	r1, [pc, #8]	@ (800905c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009052:	4313      	orrs	r3, r2
 8009054:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8009058:	e006      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800905a:	bf00      	nop
 800905c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009060:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009064:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009068:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009070:	2100      	movs	r1, #0
 8009072:	6239      	str	r1, [r7, #32]
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	627b      	str	r3, [r7, #36]	@ 0x24
 800907a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800907e:	460b      	mov	r3, r1
 8009080:	4313      	orrs	r3, r2
 8009082:	d055      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8009084:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009088:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800908c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009090:	d031      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8009092:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009096:	d82a      	bhi.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8009098:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800909c:	d02d      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800909e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090a2:	d824      	bhi.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80090a4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80090a8:	d029      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80090aa:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80090ae:	d81e      	bhi.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80090b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090b4:	d011      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80090b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090ba:	d818      	bhi.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d020      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80090c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090c4:	d113      	bne.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80090c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80090ca:	3308      	adds	r3, #8
 80090cc:	4618      	mov	r0, r3
 80090ce:	f003 f8cf 	bl	800c270 <RCCEx_PLL2_Config>
 80090d2:	4603      	mov	r3, r0
 80090d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80090d8:	e014      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80090da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80090de:	3330      	adds	r3, #48	@ 0x30
 80090e0:	4618      	mov	r0, r3
 80090e2:	f003 f95d 	bl	800c3a0 <RCCEx_PLL3_Config>
 80090e6:	4603      	mov	r3, r0
 80090e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80090ec:	e00a      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80090f4:	e006      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80090f6:	bf00      	nop
 80090f8:	e004      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80090fa:	bf00      	nop
 80090fc:	e002      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80090fe:	bf00      	nop
 8009100:	e000      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8009102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009104:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10d      	bne.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800910c:	4b88      	ldr	r3, [pc, #544]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800910e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009112:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8009116:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800911a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800911e:	4984      	ldr	r1, [pc, #528]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009120:	4313      	orrs	r3, r2
 8009122:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8009126:	e003      	b.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009128:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800912c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009130:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009138:	2100      	movs	r1, #0
 800913a:	61b9      	str	r1, [r7, #24]
 800913c:	f003 0302 	and.w	r3, r3, #2
 8009140:	61fb      	str	r3, [r7, #28]
 8009142:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009146:	460b      	mov	r3, r1
 8009148:	4313      	orrs	r3, r2
 800914a:	d03d      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800914c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009150:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009154:	2b03      	cmp	r3, #3
 8009156:	d81c      	bhi.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8009158:	a201      	add	r2, pc, #4	@ (adr r2, 8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800915a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915e:	bf00      	nop
 8009160:	0800919b 	.word	0x0800919b
 8009164:	08009171 	.word	0x08009171
 8009168:	0800917f 	.word	0x0800917f
 800916c:	0800919b 	.word	0x0800919b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009170:	4b6f      	ldr	r3, [pc, #444]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009174:	4a6e      	ldr	r2, [pc, #440]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800917a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800917c:	e00e      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800917e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009182:	3308      	adds	r3, #8
 8009184:	4618      	mov	r0, r3
 8009186:	f003 f873 	bl	800c270 <RCCEx_PLL2_Config>
 800918a:	4603      	mov	r3, r0
 800918c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8009190:	e004      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009198:	e000      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800919a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800919c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10d      	bne.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80091a4:	4b62      	ldr	r3, [pc, #392]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80091a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80091aa:	f023 0203 	bic.w	r2, r3, #3
 80091ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80091b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80091b6:	495e      	ldr	r1, [pc, #376]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80091b8:	4313      	orrs	r3, r2
 80091ba:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80091be:	e003      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80091c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80091c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d0:	2100      	movs	r1, #0
 80091d2:	6139      	str	r1, [r7, #16]
 80091d4:	f003 0304 	and.w	r3, r3, #4
 80091d8:	617b      	str	r3, [r7, #20]
 80091da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80091de:	460b      	mov	r3, r1
 80091e0:	4313      	orrs	r3, r2
 80091e2:	d03a      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80091e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80091e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80091ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091f0:	d00e      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80091f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091f6:	d815      	bhi.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d017      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80091fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009200:	d110      	bne.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009202:	4b4b      	ldr	r3, [pc, #300]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009206:	4a4a      	ldr	r2, [pc, #296]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800920c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800920e:	e00e      	b.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009210:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009214:	3308      	adds	r3, #8
 8009216:	4618      	mov	r0, r3
 8009218:	f003 f82a 	bl	800c270 <RCCEx_PLL2_Config>
 800921c:	4603      	mov	r3, r0
 800921e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8009222:	e004      	b.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800922a:	e000      	b.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800922c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800922e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009232:	2b00      	cmp	r3, #0
 8009234:	d10d      	bne.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8009236:	4b3e      	ldr	r3, [pc, #248]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800923c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009240:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009244:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009248:	4939      	ldr	r1, [pc, #228]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800924a:	4313      	orrs	r3, r2
 800924c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8009250:	e003      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009252:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009256:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800925a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	2100      	movs	r1, #0
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	f003 0310 	and.w	r3, r3, #16
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009270:	460b      	mov	r3, r1
 8009272:	4313      	orrs	r3, r2
 8009274:	d038      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8009276:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800927a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800927e:	2b30      	cmp	r3, #48	@ 0x30
 8009280:	d01b      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8009282:	2b30      	cmp	r3, #48	@ 0x30
 8009284:	d815      	bhi.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8009286:	2b10      	cmp	r3, #16
 8009288:	d002      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800928a:	2b20      	cmp	r3, #32
 800928c:	d007      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800928e:	e010      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009290:	4b27      	ldr	r3, [pc, #156]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009294:	4a26      	ldr	r2, [pc, #152]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800929a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800929c:	e00e      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800929e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80092a2:	3330      	adds	r3, #48	@ 0x30
 80092a4:	4618      	mov	r0, r3
 80092a6:	f003 f87b 	bl	800c3a0 <RCCEx_PLL3_Config>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80092b0:	e004      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80092b8:	e000      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80092ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10d      	bne.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80092c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80092c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092ca:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80092ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80092d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80092d6:	4916      	ldr	r1, [pc, #88]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80092d8:	4313      	orrs	r3, r2
 80092da:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80092de:	e003      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80092e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80092e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80092ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f0:	2100      	movs	r1, #0
 80092f2:	6039      	str	r1, [r7, #0]
 80092f4:	f003 0308 	and.w	r3, r3, #8
 80092f8:	607b      	str	r3, [r7, #4]
 80092fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80092fe:	460b      	mov	r3, r1
 8009300:	4313      	orrs	r3, r2
 8009302:	d00c      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8009304:	4b0a      	ldr	r3, [pc, #40]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800930a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800930e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009312:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8009316:	4906      	ldr	r1, [pc, #24]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009318:	4313      	orrs	r3, r2
 800931a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800931e:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8009322:	4618      	mov	r0, r3
 8009324:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8009328:	46bd      	mov	sp, r7
 800932a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800932e:	bf00      	nop
 8009330:	44020c00 	.word	0x44020c00

08009334 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8009334:	b480      	push	{r7}
 8009336:	b08b      	sub	sp, #44	@ 0x2c
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800933c:	4bae      	ldr	r3, [pc, #696]	@ (80095f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800933e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009344:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009346:	4bac      	ldr	r3, [pc, #688]	@ (80095f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800934a:	f003 0303 	and.w	r3, r3, #3
 800934e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8009350:	4ba9      	ldr	r3, [pc, #676]	@ (80095f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009354:	0a1b      	lsrs	r3, r3, #8
 8009356:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800935a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800935c:	4ba6      	ldr	r3, [pc, #664]	@ (80095f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800935e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009360:	091b      	lsrs	r3, r3, #4
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009368:	4ba3      	ldr	r3, [pc, #652]	@ (80095f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800936a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800936c:	08db      	lsrs	r3, r3, #3
 800936e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	fb02 f303 	mul.w	r3, r2, r3
 8009378:	ee07 3a90 	vmov	s15, r3
 800937c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009380:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	2b00      	cmp	r3, #0
 8009388:	f000 8126 	beq.w	80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	2b03      	cmp	r3, #3
 8009390:	d053      	beq.n	800943a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	2b03      	cmp	r3, #3
 8009396:	d86f      	bhi.n	8009478 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d003      	beq.n	80093a6 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d02b      	beq.n	80093fc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80093a4:	e068      	b.n	8009478 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093a6:	4b94      	ldr	r3, [pc, #592]	@ (80095f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	08db      	lsrs	r3, r3, #3
 80093ac:	f003 0303 	and.w	r3, r3, #3
 80093b0:	4a92      	ldr	r2, [pc, #584]	@ (80095fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80093b2:	fa22 f303 	lsr.w	r3, r2, r3
 80093b6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	ee07 3a90 	vmov	s15, r3
 80093c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093da:	ed97 6a04 	vldr	s12, [r7, #16]
 80093de:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8009600 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80093e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80093fa:	e068      	b.n	80094ce <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009406:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8009604 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800940a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	ee07 3a90 	vmov	s15, r3
 8009414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009418:	ed97 6a04 	vldr	s12, [r7, #16]
 800941c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009600 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8009420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009428:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800942c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009434:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009438:	e049      	b.n	80094ce <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	ee07 3a90 	vmov	s15, r3
 8009440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009444:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009608 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8009448:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944c:	6a3b      	ldr	r3, [r7, #32]
 800944e:	ee07 3a90 	vmov	s15, r3
 8009452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009456:	ed97 6a04 	vldr	s12, [r7, #16]
 800945a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8009600 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800945e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800946a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800946e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009472:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009476:	e02a      	b.n	80094ce <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009478:	4b5f      	ldr	r3, [pc, #380]	@ (80095f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	08db      	lsrs	r3, r3, #3
 800947e:	f003 0303 	and.w	r3, r3, #3
 8009482:	4a5e      	ldr	r2, [pc, #376]	@ (80095fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8009484:	fa22 f303 	lsr.w	r3, r2, r3
 8009488:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	ee07 3a90 	vmov	s15, r3
 8009490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	ee07 3a90 	vmov	s15, r3
 800949a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094a2:	6a3b      	ldr	r3, [r7, #32]
 80094a4:	ee07 3a90 	vmov	s15, r3
 80094a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ac:	ed97 6a04 	vldr	s12, [r7, #16]
 80094b0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009600 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80094b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80094cc:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094ce:	4b4a      	ldr	r3, [pc, #296]	@ (80095f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094da:	d121      	bne.n	8009520 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80094dc:	4b46      	ldr	r3, [pc, #280]	@ (80095f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80094de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d017      	beq.n	8009518 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80094e8:	4b43      	ldr	r3, [pc, #268]	@ (80095f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80094ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ec:	0a5b      	lsrs	r3, r3, #9
 80094ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094f2:	ee07 3a90 	vmov	s15, r3
 80094f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80094fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094fe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8009502:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800950a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800950e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	601a      	str	r2, [r3, #0]
 8009516:	e006      	b.n	8009526 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	e002      	b.n	8009526 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009526:	4b34      	ldr	r3, [pc, #208]	@ (80095f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800952e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009532:	d121      	bne.n	8009578 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009534:	4b30      	ldr	r3, [pc, #192]	@ (80095f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d017      	beq.n	8009570 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009540:	4b2d      	ldr	r3, [pc, #180]	@ (80095f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009544:	0c1b      	lsrs	r3, r3, #16
 8009546:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800954a:	ee07 3a90 	vmov	s15, r3
 800954e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009552:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009556:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800955a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800955e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009566:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	605a      	str	r2, [r3, #4]
 800956e:	e006      	b.n	800957e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	605a      	str	r2, [r3, #4]
 8009576:	e002      	b.n	800957e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800957e:	4b1e      	ldr	r3, [pc, #120]	@ (80095f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009586:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800958a:	d121      	bne.n	80095d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800958c:	4b1a      	ldr	r3, [pc, #104]	@ (80095f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800958e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009590:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d017      	beq.n	80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009598:	4b17      	ldr	r3, [pc, #92]	@ (80095f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800959a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800959c:	0e1b      	lsrs	r3, r3, #24
 800959e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095a2:	ee07 3a90 	vmov	s15, r3
 80095a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80095aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095ae:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80095b2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80095b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095be:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80095c6:	e010      	b.n	80095ea <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	609a      	str	r2, [r3, #8]
}
 80095ce:	e00c      	b.n	80095ea <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	609a      	str	r2, [r3, #8]
}
 80095d6:	e008      	b.n	80095ea <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	609a      	str	r2, [r3, #8]
}
 80095ea:	bf00      	nop
 80095ec:	372c      	adds	r7, #44	@ 0x2c
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	44020c00 	.word	0x44020c00
 80095fc:	03d09000 	.word	0x03d09000
 8009600:	46000000 	.word	0x46000000
 8009604:	4a742400 	.word	0x4a742400
 8009608:	4af42400 	.word	0x4af42400

0800960c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800960c:	b480      	push	{r7}
 800960e:	b08b      	sub	sp, #44	@ 0x2c
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009614:	4bae      	ldr	r3, [pc, #696]	@ (80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800961e:	4bac      	ldr	r3, [pc, #688]	@ (80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009622:	f003 0303 	and.w	r3, r3, #3
 8009626:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8009628:	4ba9      	ldr	r3, [pc, #676]	@ (80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800962a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800962c:	0a1b      	lsrs	r3, r3, #8
 800962e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009632:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8009634:	4ba6      	ldr	r3, [pc, #664]	@ (80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009638:	091b      	lsrs	r3, r3, #4
 800963a:	f003 0301 	and.w	r3, r3, #1
 800963e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8009640:	4ba3      	ldr	r3, [pc, #652]	@ (80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009644:	08db      	lsrs	r3, r3, #3
 8009646:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	fb02 f303 	mul.w	r3, r2, r3
 8009650:	ee07 3a90 	vmov	s15, r3
 8009654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009658:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	2b00      	cmp	r3, #0
 8009660:	f000 8126 	beq.w	80098b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	2b03      	cmp	r3, #3
 8009668:	d053      	beq.n	8009712 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	2b03      	cmp	r3, #3
 800966e:	d86f      	bhi.n	8009750 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	2b01      	cmp	r3, #1
 8009674:	d003      	beq.n	800967e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	2b02      	cmp	r3, #2
 800967a:	d02b      	beq.n	80096d4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800967c:	e068      	b.n	8009750 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800967e:	4b94      	ldr	r3, [pc, #592]	@ (80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	08db      	lsrs	r3, r3, #3
 8009684:	f003 0303 	and.w	r3, r3, #3
 8009688:	4a92      	ldr	r2, [pc, #584]	@ (80098d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800968a:	fa22 f303 	lsr.w	r3, r2, r3
 800968e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	ee07 3a90 	vmov	s15, r3
 8009696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	ee07 3a90 	vmov	s15, r3
 80096a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096a8:	6a3b      	ldr	r3, [r7, #32]
 80096aa:	ee07 3a90 	vmov	s15, r3
 80096ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b2:	ed97 6a04 	vldr	s12, [r7, #16]
 80096b6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80098d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80096ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ce:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80096d2:	e068      	b.n	80097a6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	ee07 3a90 	vmov	s15, r3
 80096da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096de:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80098dc <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80096e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096e6:	6a3b      	ldr	r3, [r7, #32]
 80096e8:	ee07 3a90 	vmov	s15, r3
 80096ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f0:	ed97 6a04 	vldr	s12, [r7, #16]
 80096f4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80098d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80096f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009700:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009704:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009710:	e049      	b.n	80097a6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	ee07 3a90 	vmov	s15, r3
 8009718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80098e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8009720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	ee07 3a90 	vmov	s15, r3
 800972a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800972e:	ed97 6a04 	vldr	s12, [r7, #16]
 8009732:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80098d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8009736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800973a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800973e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800974a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800974e:	e02a      	b.n	80097a6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009750:	4b5f      	ldr	r3, [pc, #380]	@ (80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	08db      	lsrs	r3, r3, #3
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	4a5e      	ldr	r2, [pc, #376]	@ (80098d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800975c:	fa22 f303 	lsr.w	r3, r2, r3
 8009760:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	ee07 3a90 	vmov	s15, r3
 8009768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	ee07 3a90 	vmov	s15, r3
 8009772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	ee07 3a90 	vmov	s15, r3
 8009780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009784:	ed97 6a04 	vldr	s12, [r7, #16]
 8009788:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80098d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800978c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009790:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009794:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800979c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80097a4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097a6:	4b4a      	ldr	r3, [pc, #296]	@ (80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097b2:	d121      	bne.n	80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80097b4:	4b46      	ldr	r3, [pc, #280]	@ (80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80097b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d017      	beq.n	80097f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80097c0:	4b43      	ldr	r3, [pc, #268]	@ (80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80097c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097c4:	0a5b      	lsrs	r3, r3, #9
 80097c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097ca:	ee07 3a90 	vmov	s15, r3
 80097ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80097d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097d6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80097da:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80097de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097e6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	e006      	b.n	80097fe <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	e002      	b.n	80097fe <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097fe:	4b34      	ldr	r3, [pc, #208]	@ (80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009806:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800980a:	d121      	bne.n	8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800980c:	4b30      	ldr	r3, [pc, #192]	@ (80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800980e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009814:	2b00      	cmp	r3, #0
 8009816:	d017      	beq.n	8009848 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009818:	4b2d      	ldr	r3, [pc, #180]	@ (80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800981a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800981c:	0c1b      	lsrs	r3, r3, #16
 800981e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009822:	ee07 3a90 	vmov	s15, r3
 8009826:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800982a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800982e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009832:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800983a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800983e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	605a      	str	r2, [r3, #4]
 8009846:	e006      	b.n	8009856 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	605a      	str	r2, [r3, #4]
 800984e:	e002      	b.n	8009856 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009856:	4b1e      	ldr	r3, [pc, #120]	@ (80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800985e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009862:	d121      	bne.n	80098a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009864:	4b1a      	ldr	r3, [pc, #104]	@ (80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009868:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d017      	beq.n	80098a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009870:	4b17      	ldr	r3, [pc, #92]	@ (80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009874:	0e1b      	lsrs	r3, r3, #24
 8009876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800987a:	ee07 3a90 	vmov	s15, r3
 800987e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8009882:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009886:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800988a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800988e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009896:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800989e:	e010      	b.n	80098c2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	609a      	str	r2, [r3, #8]
}
 80098a6:	e00c      	b.n	80098c2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	609a      	str	r2, [r3, #8]
}
 80098ae:	e008      	b.n	80098c2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	609a      	str	r2, [r3, #8]
}
 80098c2:	bf00      	nop
 80098c4:	372c      	adds	r7, #44	@ 0x2c
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	44020c00 	.word	0x44020c00
 80098d4:	03d09000 	.word	0x03d09000
 80098d8:	46000000 	.word	0x46000000
 80098dc:	4a742400 	.word	0x4a742400
 80098e0:	4af42400 	.word	0x4af42400

080098e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b08b      	sub	sp, #44	@ 0x2c
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80098ec:	4bae      	ldr	r3, [pc, #696]	@ (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80098ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80098f6:	4bac      	ldr	r3, [pc, #688]	@ (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80098f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8009900:	4ba9      	ldr	r3, [pc, #676]	@ (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009904:	0a1b      	lsrs	r3, r3, #8
 8009906:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800990a:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800990c:	4ba6      	ldr	r3, [pc, #664]	@ (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800990e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009910:	091b      	lsrs	r3, r3, #4
 8009912:	f003 0301 	and.w	r3, r3, #1
 8009916:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009918:	4ba3      	ldr	r3, [pc, #652]	@ (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800991a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800991c:	08db      	lsrs	r3, r3, #3
 800991e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	fb02 f303 	mul.w	r3, r2, r3
 8009928:	ee07 3a90 	vmov	s15, r3
 800992c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009930:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	2b00      	cmp	r3, #0
 8009938:	f000 8126 	beq.w	8009b88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	2b03      	cmp	r3, #3
 8009940:	d053      	beq.n	80099ea <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	2b03      	cmp	r3, #3
 8009946:	d86f      	bhi.n	8009a28 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d003      	beq.n	8009956 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	2b02      	cmp	r3, #2
 8009952:	d02b      	beq.n	80099ac <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8009954:	e068      	b.n	8009a28 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009956:	4b94      	ldr	r3, [pc, #592]	@ (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	08db      	lsrs	r3, r3, #3
 800995c:	f003 0303 	and.w	r3, r3, #3
 8009960:	4a92      	ldr	r2, [pc, #584]	@ (8009bac <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8009962:	fa22 f303 	lsr.w	r3, r2, r3
 8009966:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	ee07 3a90 	vmov	s15, r3
 8009978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	ee07 3a90 	vmov	s15, r3
 8009986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800998a:	ed97 6a04 	vldr	s12, [r7, #16]
 800998e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8009bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8009992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800999a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800999e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80099aa:	e068      	b.n	8009a7e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8009bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80099ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099be:	6a3b      	ldr	r3, [r7, #32]
 80099c0:	ee07 3a90 	vmov	s15, r3
 80099c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c8:	ed97 6a04 	vldr	s12, [r7, #16]
 80099cc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80099d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80099e8:	e049      	b.n	8009a7e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	ee07 3a90 	vmov	s15, r3
 80099f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80099f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	ee07 3a90 	vmov	s15, r3
 8009a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a06:	ed97 6a04 	vldr	s12, [r7, #16]
 8009a0a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8009bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8009a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a22:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009a26:	e02a      	b.n	8009a7e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a28:	4b5f      	ldr	r3, [pc, #380]	@ (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	08db      	lsrs	r3, r3, #3
 8009a2e:	f003 0303 	and.w	r3, r3, #3
 8009a32:	4a5e      	ldr	r2, [pc, #376]	@ (8009bac <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8009a34:	fa22 f303 	lsr.w	r3, r2, r3
 8009a38:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	ee07 3a90 	vmov	s15, r3
 8009a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	ee07 3a90 	vmov	s15, r3
 8009a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	ee07 3a90 	vmov	s15, r3
 8009a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a5c:	ed97 6a04 	vldr	s12, [r7, #16]
 8009a60:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8009a64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a78:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009a7c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a8a:	d121      	bne.n	8009ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8009a8c:	4b46      	ldr	r3, [pc, #280]	@ (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d017      	beq.n	8009ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009a98:	4b43      	ldr	r3, [pc, #268]	@ (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a9c:	0a5b      	lsrs	r3, r3, #9
 8009a9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009aa2:	ee07 3a90 	vmov	s15, r3
 8009aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8009aaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009aae:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009ab2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009abe:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	601a      	str	r2, [r3, #0]
 8009ac6:	e006      	b.n	8009ad6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	601a      	str	r2, [r3, #0]
 8009ace:	e002      	b.n	8009ad6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ad6:	4b34      	ldr	r3, [pc, #208]	@ (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ade:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ae2:	d121      	bne.n	8009b28 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009ae4:	4b30      	ldr	r3, [pc, #192]	@ (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d017      	beq.n	8009b20 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009af0:	4b2d      	ldr	r3, [pc, #180]	@ (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009af4:	0c1b      	lsrs	r3, r3, #16
 8009af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009afa:	ee07 3a90 	vmov	s15, r3
 8009afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8009b02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b06:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009b0a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b16:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	605a      	str	r2, [r3, #4]
 8009b1e:	e006      	b.n	8009b2e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	605a      	str	r2, [r3, #4]
 8009b26:	e002      	b.n	8009b2e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b3a:	d121      	bne.n	8009b80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8009b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d017      	beq.n	8009b78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009b48:	4b17      	ldr	r3, [pc, #92]	@ (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b4c:	0e1b      	lsrs	r3, r3, #24
 8009b4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b52:	ee07 3a90 	vmov	s15, r3
 8009b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8009b5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b5e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009b62:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b6e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8009b76:	e010      	b.n	8009b9a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	609a      	str	r2, [r3, #8]
}
 8009b7e:	e00c      	b.n	8009b9a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	609a      	str	r2, [r3, #8]
}
 8009b86:	e008      	b.n	8009b9a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	609a      	str	r2, [r3, #8]
}
 8009b9a:	bf00      	nop
 8009b9c:	372c      	adds	r7, #44	@ 0x2c
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	44020c00 	.word	0x44020c00
 8009bac:	03d09000 	.word	0x03d09000
 8009bb0:	46000000 	.word	0x46000000
 8009bb4:	4a742400 	.word	0x4a742400
 8009bb8:	4af42400 	.word	0x4af42400

08009bbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009bbc:	b590      	push	{r4, r7, lr}
 8009bbe:	b08f      	sub	sp, #60	@ 0x3c
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8009bc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bca:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8009bce:	4321      	orrs	r1, r4
 8009bd0:	d150      	bne.n	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009bd2:	4b26      	ldr	r3, [pc, #152]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bdc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8009bde:	4b23      	ldr	r3, [pc, #140]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d108      	bne.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bf2:	d104      	bne.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009bf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bfa:	f002 bb2a 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8009bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c0c:	d108      	bne.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c14:	d104      	bne.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8009c16:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c1c:	f002 bb19 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8009c20:	4b12      	ldr	r3, [pc, #72]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c2c:	d119      	bne.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c34:	d115      	bne.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009c36:	4b0d      	ldr	r3, [pc, #52]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c38:	69db      	ldr	r3, [r3, #28]
 8009c3a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8009c3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c42:	d30a      	bcc.n	8009c5a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8009c44:	4b09      	ldr	r3, [pc, #36]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	0a1b      	lsrs	r3, r3, #8
 8009c4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c4e:	4a08      	ldr	r2, [pc, #32]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8009c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c54:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009c56:	f002 bafc 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009c5e:	f002 baf8 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8009c62:	2300      	movs	r3, #0
 8009c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c66:	f002 baf4 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c6a:	bf00      	nop
 8009c6c:	44020c00 	.word	0x44020c00
 8009c70:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8009c74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c78:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8009c7c:	ea50 0104 	orrs.w	r1, r0, r4
 8009c80:	f001 8275 	beq.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8009c84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c88:	2801      	cmp	r0, #1
 8009c8a:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8009c8e:	f082 82dd 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009c92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c96:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8009c9a:	ea50 0104 	orrs.w	r1, r0, r4
 8009c9e:	f001 816c 	beq.w	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8009ca2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ca6:	2801      	cmp	r0, #1
 8009ca8:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8009cac:	f082 82ce 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009cb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cb4:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8009cb8:	ea50 0104 	orrs.w	r1, r0, r4
 8009cbc:	f001 8602 	beq.w	800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8009cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cc4:	2801      	cmp	r0, #1
 8009cc6:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8009cca:	f082 82bf 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009cce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cd2:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8009cd6:	ea50 0104 	orrs.w	r1, r0, r4
 8009cda:	f001 854c 	beq.w	800b776 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8009cde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ce2:	2801      	cmp	r0, #1
 8009ce4:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8009ce8:	f082 82b0 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009cec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cf0:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8009cf4:	ea50 0104 	orrs.w	r1, r0, r4
 8009cf8:	f001 849e 	beq.w	800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8009cfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d00:	2801      	cmp	r0, #1
 8009d02:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8009d06:	f082 82a1 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d0e:	f1a1 0420 	sub.w	r4, r1, #32
 8009d12:	ea50 0104 	orrs.w	r1, r0, r4
 8009d16:	f001 83e8 	beq.w	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8009d1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d1e:	2801      	cmp	r0, #1
 8009d20:	f171 0120 	sbcs.w	r1, r1, #32
 8009d24:	f082 8292 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d2c:	f1a1 0410 	sub.w	r4, r1, #16
 8009d30:	ea50 0104 	orrs.w	r1, r0, r4
 8009d34:	f002 8256 	beq.w	800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8009d38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d3c:	2801      	cmp	r0, #1
 8009d3e:	f171 0110 	sbcs.w	r1, r1, #16
 8009d42:	f082 8283 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d4a:	f1a1 0408 	sub.w	r4, r1, #8
 8009d4e:	ea50 0104 	orrs.w	r1, r0, r4
 8009d52:	f002 81cc 	beq.w	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8009d56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d5a:	2801      	cmp	r0, #1
 8009d5c:	f171 0108 	sbcs.w	r1, r1, #8
 8009d60:	f082 8274 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d68:	1f0c      	subs	r4, r1, #4
 8009d6a:	ea50 0104 	orrs.w	r1, r0, r4
 8009d6e:	f001 8648 	beq.w	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8009d72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d76:	2801      	cmp	r0, #1
 8009d78:	f171 0104 	sbcs.w	r1, r1, #4
 8009d7c:	f082 8266 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d84:	1e8c      	subs	r4, r1, #2
 8009d86:	ea50 0104 	orrs.w	r1, r0, r4
 8009d8a:	f002 8143 	beq.w	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8009d8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d92:	2801      	cmp	r0, #1
 8009d94:	f171 0102 	sbcs.w	r1, r1, #2
 8009d98:	f082 8258 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009da0:	1e4c      	subs	r4, r1, #1
 8009da2:	ea50 0104 	orrs.w	r1, r0, r4
 8009da6:	f002 80ce 	beq.w	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8009daa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dae:	2801      	cmp	r0, #1
 8009db0:	f171 0101 	sbcs.w	r1, r1, #1
 8009db4:	f082 824a 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009db8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dbc:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8009dc0:	4321      	orrs	r1, r4
 8009dc2:	f002 8059 	beq.w	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8009dc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dca:	4cd9      	ldr	r4, [pc, #868]	@ (800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8009dcc:	42a0      	cmp	r0, r4
 8009dce:	f171 0100 	sbcs.w	r1, r1, #0
 8009dd2:	f082 823b 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009dd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dda:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8009dde:	4321      	orrs	r1, r4
 8009de0:	f001 87d9 	beq.w	800bd96 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8009de4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009de8:	4cd2      	ldr	r4, [pc, #840]	@ (800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8009dea:	42a0      	cmp	r0, r4
 8009dec:	f171 0100 	sbcs.w	r1, r1, #0
 8009df0:	f082 822c 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009df4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009df8:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8009dfc:	4321      	orrs	r1, r4
 8009dfe:	f001 8751 	beq.w	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8009e02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e06:	4ccc      	ldr	r4, [pc, #816]	@ (800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009e08:	42a0      	cmp	r0, r4
 8009e0a:	f171 0100 	sbcs.w	r1, r1, #0
 8009e0e:	f082 821d 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e16:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8009e1a:	4321      	orrs	r1, r4
 8009e1c:	f001 869a 	beq.w	800bb54 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8009e20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e24:	4cc5      	ldr	r4, [pc, #788]	@ (800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8009e26:	42a0      	cmp	r0, r4
 8009e28:	f171 0100 	sbcs.w	r1, r1, #0
 8009e2c:	f082 820e 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e34:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8009e38:	4321      	orrs	r1, r4
 8009e3a:	f001 8612 	beq.w	800ba62 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8009e3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e42:	4cbf      	ldr	r4, [pc, #764]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009e44:	42a0      	cmp	r0, r4
 8009e46:	f171 0100 	sbcs.w	r1, r1, #0
 8009e4a:	f082 81ff 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e52:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8009e56:	4321      	orrs	r1, r4
 8009e58:	f002 817e 	beq.w	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8009e5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e60:	4cb8      	ldr	r4, [pc, #736]	@ (800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e62:	42a0      	cmp	r0, r4
 8009e64:	f171 0100 	sbcs.w	r1, r1, #0
 8009e68:	f082 81f0 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e70:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8009e74:	4321      	orrs	r1, r4
 8009e76:	f000 829e 	beq.w	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8009e7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e7e:	4cb2      	ldr	r4, [pc, #712]	@ (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009e80:	42a0      	cmp	r0, r4
 8009e82:	f171 0100 	sbcs.w	r1, r1, #0
 8009e86:	f082 81e1 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e8e:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8009e92:	4321      	orrs	r1, r4
 8009e94:	f000 826d 	beq.w	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8009e98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e9c:	4cab      	ldr	r4, [pc, #684]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009e9e:	42a0      	cmp	r0, r4
 8009ea0:	f171 0100 	sbcs.w	r1, r1, #0
 8009ea4:	f082 81d2 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009eac:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8009eb0:	4321      	orrs	r1, r4
 8009eb2:	f001 800d 	beq.w	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8009eb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009eba:	4ca5      	ldr	r4, [pc, #660]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009ebc:	42a0      	cmp	r0, r4
 8009ebe:	f171 0100 	sbcs.w	r1, r1, #0
 8009ec2:	f082 81c3 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009ec6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009eca:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8009ece:	4321      	orrs	r1, r4
 8009ed0:	f000 81d0 	beq.w	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8009ed4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ed8:	4c9e      	ldr	r4, [pc, #632]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009eda:	42a0      	cmp	r0, r4
 8009edc:	f171 0100 	sbcs.w	r1, r1, #0
 8009ee0:	f082 81b4 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009ee4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ee8:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8009eec:	4321      	orrs	r1, r4
 8009eee:	f000 8142 	beq.w	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8009ef2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ef6:	4c98      	ldr	r4, [pc, #608]	@ (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009ef8:	42a0      	cmp	r0, r4
 8009efa:	f171 0100 	sbcs.w	r1, r1, #0
 8009efe:	f082 81a5 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f06:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8009f0a:	4321      	orrs	r1, r4
 8009f0c:	f001 824e 	beq.w	800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8009f10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f14:	4c91      	ldr	r4, [pc, #580]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8009f16:	42a0      	cmp	r0, r4
 8009f18:	f171 0100 	sbcs.w	r1, r1, #0
 8009f1c:	f082 8196 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f24:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8009f28:	4321      	orrs	r1, r4
 8009f2a:	f001 8197 	beq.w	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8009f2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f32:	4c8b      	ldr	r4, [pc, #556]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009f34:	42a0      	cmp	r0, r4
 8009f36:	f171 0100 	sbcs.w	r1, r1, #0
 8009f3a:	f082 8187 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f42:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8009f46:	4321      	orrs	r1, r4
 8009f48:	f001 8154 	beq.w	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8009f4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f50:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8009f54:	f171 0100 	sbcs.w	r1, r1, #0
 8009f58:	f082 8178 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f60:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8009f64:	4321      	orrs	r1, r4
 8009f66:	f001 80b7 	beq.w	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009f6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f6e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8009f72:	42a0      	cmp	r0, r4
 8009f74:	f171 0100 	sbcs.w	r1, r1, #0
 8009f78:	f082 8168 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f80:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8009f84:	4321      	orrs	r1, r4
 8009f86:	f001 8064 	beq.w	800b052 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8009f8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f8e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8009f92:	42a0      	cmp	r0, r4
 8009f94:	f171 0100 	sbcs.w	r1, r1, #0
 8009f98:	f082 8158 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fa0:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8009fa4:	4321      	orrs	r1, r4
 8009fa6:	f001 8011 	beq.w	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8009faa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fae:	f242 0401 	movw	r4, #8193	@ 0x2001
 8009fb2:	42a0      	cmp	r0, r4
 8009fb4:	f171 0100 	sbcs.w	r1, r1, #0
 8009fb8:	f082 8148 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fc0:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8009fc4:	4321      	orrs	r1, r4
 8009fc6:	f000 871e 	beq.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8009fca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fce:	f241 0401 	movw	r4, #4097	@ 0x1001
 8009fd2:	42a0      	cmp	r0, r4
 8009fd4:	f171 0100 	sbcs.w	r1, r1, #0
 8009fd8:	f082 8138 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009fdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fe0:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8009fe4:	4321      	orrs	r1, r4
 8009fe6:	f000 86a8 	beq.w	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8009fea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fee:	f640 0401 	movw	r4, #2049	@ 0x801
 8009ff2:	42a0      	cmp	r0, r4
 8009ff4:	f171 0100 	sbcs.w	r1, r1, #0
 8009ff8:	f082 8128 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009ffc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a000:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 800a004:	4321      	orrs	r1, r4
 800a006:	f000 8632 	beq.w	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800a00a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a00e:	f240 4401 	movw	r4, #1025	@ 0x401
 800a012:	42a0      	cmp	r0, r4
 800a014:	f171 0100 	sbcs.w	r1, r1, #0
 800a018:	f082 8118 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a01c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a020:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 800a024:	4321      	orrs	r1, r4
 800a026:	f000 85b0 	beq.w	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800a02a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a02e:	f240 2401 	movw	r4, #513	@ 0x201
 800a032:	42a0      	cmp	r0, r4
 800a034:	f171 0100 	sbcs.w	r1, r1, #0
 800a038:	f082 8108 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a03c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a040:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 800a044:	4321      	orrs	r1, r4
 800a046:	f000 8535 	beq.w	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800a04a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a04e:	f240 1401 	movw	r4, #257	@ 0x101
 800a052:	42a0      	cmp	r0, r4
 800a054:	f171 0100 	sbcs.w	r1, r1, #0
 800a058:	f082 80f8 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a05c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a060:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800a064:	4321      	orrs	r1, r4
 800a066:	f000 84ba 	beq.w	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800a06a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a06e:	2881      	cmp	r0, #129	@ 0x81
 800a070:	f171 0100 	sbcs.w	r1, r1, #0
 800a074:	f082 80ea 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a07c:	2821      	cmp	r0, #33	@ 0x21
 800a07e:	f171 0100 	sbcs.w	r1, r1, #0
 800a082:	d26f      	bcs.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a084:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a088:	4301      	orrs	r1, r0
 800a08a:	f002 80df 	beq.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a08e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a092:	1e42      	subs	r2, r0, #1
 800a094:	f141 33ff 	adc.w	r3, r1, #4294967295
 800a098:	2a20      	cmp	r2, #32
 800a09a:	f173 0100 	sbcs.w	r1, r3, #0
 800a09e:	f082 80d5 	bcs.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a0a2:	2a1f      	cmp	r2, #31
 800a0a4:	f202 80d2 	bhi.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a0a8:	a101      	add	r1, pc, #4	@ (adr r1, 800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800a0aa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a0ae:	bf00      	nop
 800a0b0:	0800a411 	.word	0x0800a411
 800a0b4:	0800a4dd 	.word	0x0800a4dd
 800a0b8:	0800c24d 	.word	0x0800c24d
 800a0bc:	0800a59d 	.word	0x0800a59d
 800a0c0:	0800c24d 	.word	0x0800c24d
 800a0c4:	0800c24d 	.word	0x0800c24d
 800a0c8:	0800c24d 	.word	0x0800c24d
 800a0cc:	0800a66d 	.word	0x0800a66d
 800a0d0:	0800c24d 	.word	0x0800c24d
 800a0d4:	0800c24d 	.word	0x0800c24d
 800a0d8:	0800c24d 	.word	0x0800c24d
 800a0dc:	0800c24d 	.word	0x0800c24d
 800a0e0:	0800c24d 	.word	0x0800c24d
 800a0e4:	0800c24d 	.word	0x0800c24d
 800a0e8:	0800c24d 	.word	0x0800c24d
 800a0ec:	0800a74f 	.word	0x0800a74f
 800a0f0:	0800c24d 	.word	0x0800c24d
 800a0f4:	0800c24d 	.word	0x0800c24d
 800a0f8:	0800c24d 	.word	0x0800c24d
 800a0fc:	0800c24d 	.word	0x0800c24d
 800a100:	0800c24d 	.word	0x0800c24d
 800a104:	0800c24d 	.word	0x0800c24d
 800a108:	0800c24d 	.word	0x0800c24d
 800a10c:	0800c24d 	.word	0x0800c24d
 800a110:	0800c24d 	.word	0x0800c24d
 800a114:	0800c24d 	.word	0x0800c24d
 800a118:	0800c24d 	.word	0x0800c24d
 800a11c:	0800c24d 	.word	0x0800c24d
 800a120:	0800c24d 	.word	0x0800c24d
 800a124:	0800c24d 	.word	0x0800c24d
 800a128:	0800c24d 	.word	0x0800c24d
 800a12c:	0800a825 	.word	0x0800a825
 800a130:	80000001 	.word	0x80000001
 800a134:	40000001 	.word	0x40000001
 800a138:	20000001 	.word	0x20000001
 800a13c:	10000001 	.word	0x10000001
 800a140:	08000001 	.word	0x08000001
 800a144:	04000001 	.word	0x04000001
 800a148:	00800001 	.word	0x00800001
 800a14c:	00400001 	.word	0x00400001
 800a150:	00200001 	.word	0x00200001
 800a154:	00100001 	.word	0x00100001
 800a158:	00080001 	.word	0x00080001
 800a15c:	00040001 	.word	0x00040001
 800a160:	00020001 	.word	0x00020001
 800a164:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a168:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800a16c:	430b      	orrs	r3, r1
 800a16e:	f000 83c4 	beq.w	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800a172:	f002 b86b 	b.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a176:	4ba1      	ldr	r3, [pc, #644]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a17c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a180:	633b      	str	r3, [r7, #48]	@ 0x30
 800a182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a184:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a188:	d036      	beq.n	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800a18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a190:	d86b      	bhi.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800a192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a194:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a198:	d02b      	beq.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a1a0:	d863      	bhi.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1a8:	d01b      	beq.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1b0:	d85b      	bhi.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d004      	beq.n	800a1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1be:	d008      	beq.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800a1c0:	e053      	b.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1c2:	f107 0320 	add.w	r3, r7, #32
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff f8b4 	bl	8009334 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1d0:	e04e      	b.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1d2:	f107 0314 	add.w	r3, r7, #20
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7ff fa18 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1e0:	e046      	b.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1e2:	f107 0308 	add.w	r3, r7, #8
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7ff fb7c 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1f0:	e03e      	b.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a1f2:	4b83      	ldr	r3, [pc, #524]	@ (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a1f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1f6:	e03b      	b.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1f8:	4b80      	ldr	r3, [pc, #512]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a1fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a1fe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a202:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a204:	4b7d      	ldr	r3, [pc, #500]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 0302 	and.w	r3, r3, #2
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d10c      	bne.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800a210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a212:	2b00      	cmp	r3, #0
 800a214:	d109      	bne.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a216:	4b79      	ldr	r3, [pc, #484]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	08db      	lsrs	r3, r3, #3
 800a21c:	f003 0303 	and.w	r3, r3, #3
 800a220:	4a78      	ldr	r2, [pc, #480]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800a222:	fa22 f303 	lsr.w	r3, r2, r3
 800a226:	637b      	str	r3, [r7, #52]	@ 0x34
 800a228:	e01e      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a22a:	4b74      	ldr	r3, [pc, #464]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a236:	d106      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a23a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a23e:	d102      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a240:	4b71      	ldr	r3, [pc, #452]	@ (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800a242:	637b      	str	r3, [r7, #52]	@ 0x34
 800a244:	e010      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a246:	4b6d      	ldr	r3, [pc, #436]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a24e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a252:	d106      	bne.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800a254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a256:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a25a:	d102      	bne.n	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a25c:	4b6b      	ldr	r3, [pc, #428]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800a25e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a260:	e002      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a262:	2300      	movs	r3, #0
 800a264:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a266:	e003      	b.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800a268:	e002      	b.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800a26a:	2300      	movs	r3, #0
 800a26c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a26e:	bf00      	nop
          }
        }
        break;
 800a270:	f001 bfef 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a274:	4b61      	ldr	r3, [pc, #388]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a276:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a27a:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800a27e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a282:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a286:	d036      	beq.n	800a2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800a288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a28e:	d86b      	bhi.n	800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a292:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a296:	d02b      	beq.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800a298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a29e:	d863      	bhi.n	800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2a6:	d01b      	beq.n	800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2ae:	d85b      	bhi.n	800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d004      	beq.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a2bc:	d008      	beq.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800a2be:	e053      	b.n	800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2c0:	f107 0320 	add.w	r3, r7, #32
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7ff f835 	bl	8009334 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a2ce:	e04e      	b.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2d0:	f107 0314 	add.w	r3, r7, #20
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7ff f999 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a2de:	e046      	b.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2e0:	f107 0308 	add.w	r3, r7, #8
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7ff fafd 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a2ee:	e03e      	b.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a2f0:	4b43      	ldr	r3, [pc, #268]	@ (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a2f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a2f4:	e03b      	b.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2f6:	4b41      	ldr	r3, [pc, #260]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a2f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a2fc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a300:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a302:	4b3e      	ldr	r3, [pc, #248]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f003 0302 	and.w	r3, r3, #2
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d10c      	bne.n	800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800a30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a310:	2b00      	cmp	r3, #0
 800a312:	d109      	bne.n	800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a314:	4b39      	ldr	r3, [pc, #228]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	08db      	lsrs	r3, r3, #3
 800a31a:	f003 0303 	and.w	r3, r3, #3
 800a31e:	4a39      	ldr	r2, [pc, #228]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800a320:	fa22 f303 	lsr.w	r3, r2, r3
 800a324:	637b      	str	r3, [r7, #52]	@ 0x34
 800a326:	e01e      	b.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a328:	4b34      	ldr	r3, [pc, #208]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a334:	d106      	bne.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a33c:	d102      	bne.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a33e:	4b32      	ldr	r3, [pc, #200]	@ (800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800a340:	637b      	str	r3, [r7, #52]	@ 0x34
 800a342:	e010      	b.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a344:	4b2d      	ldr	r3, [pc, #180]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a34c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a350:	d106      	bne.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800a352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a354:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a358:	d102      	bne.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a35a:	4b2c      	ldr	r3, [pc, #176]	@ (800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800a35c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a35e:	e002      	b.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a360:	2300      	movs	r3, #0
 800a362:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a364:	e003      	b.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800a366:	e002      	b.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800a368:	2300      	movs	r3, #0
 800a36a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a36c:	bf00      	nop
          }
        }
        break;
 800a36e:	f001 bf70 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800a372:	4b22      	ldr	r3, [pc, #136]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a374:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a37c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800a37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a380:	2b00      	cmp	r3, #0
 800a382:	d108      	bne.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a384:	f107 0320 	add.w	r3, r7, #32
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fe ffd3 	bl	8009334 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a390:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a392:	f001 bf5e 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800a396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a398:	2b40      	cmp	r3, #64	@ 0x40
 800a39a:	d108      	bne.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a39c:	f107 0314 	add.w	r3, r7, #20
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7ff f933 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3aa:	f001 bf52 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3b2:	f001 bf4e 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800a3b6:	4b11      	ldr	r3, [pc, #68]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a3b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a3bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3c0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d108      	bne.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3c8:	f107 0320 	add.w	r3, r7, #32
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fe ffb1 	bl	8009334 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a3d6:	f001 bf3c 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800a3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3dc:	2b80      	cmp	r3, #128	@ 0x80
 800a3de:	d108      	bne.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3e0:	f107 0314 	add.w	r3, r7, #20
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7ff f911 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3ee:	f001 bf30 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3f6:	f001 bf2c 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a3fa:	bf00      	nop
 800a3fc:	44020c00 	.word	0x44020c00
 800a400:	00bb8000 	.word	0x00bb8000
 800a404:	03d09000 	.word	0x03d09000
 800a408:	003d0900 	.word	0x003d0900
 800a40c:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a410:	4b9d      	ldr	r3, [pc, #628]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a412:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d104      	bne.n	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a422:	f7fc ffd1 	bl	80073c8 <HAL_RCC_GetPCLK2Freq>
 800a426:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a428:	f001 bf13 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800a42c:	4b96      	ldr	r3, [pc, #600]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a434:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a438:	d10a      	bne.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800a43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d107      	bne.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a440:	f107 0314 	add.w	r3, r7, #20
 800a444:	4618      	mov	r0, r3
 800a446:	f7ff f8e1 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a44e:	e043      	b.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800a450:	4b8d      	ldr	r3, [pc, #564]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a458:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a45c:	d10a      	bne.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800a45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a460:	2b02      	cmp	r3, #2
 800a462:	d107      	bne.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a464:	f107 0308 	add.w	r3, r7, #8
 800a468:	4618      	mov	r0, r3
 800a46a:	f7ff fa3b 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	637b      	str	r3, [r7, #52]	@ 0x34
 800a472:	e031      	b.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800a474:	4b84      	ldr	r3, [pc, #528]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 0302 	and.w	r3, r3, #2
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d10c      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800a480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a482:	2b03      	cmp	r3, #3
 800a484:	d109      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a486:	4b80      	ldr	r3, [pc, #512]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	08db      	lsrs	r3, r3, #3
 800a48c:	f003 0303 	and.w	r3, r3, #3
 800a490:	4a7e      	ldr	r2, [pc, #504]	@ (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a492:	fa22 f303 	lsr.w	r3, r2, r3
 800a496:	637b      	str	r3, [r7, #52]	@ 0x34
 800a498:	e01e      	b.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800a49a:	4b7b      	ldr	r3, [pc, #492]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4a6:	d105      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4aa:	2b04      	cmp	r3, #4
 800a4ac:	d102      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800a4ae:	4b78      	ldr	r3, [pc, #480]	@ (800a690 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a4b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4b2:	e011      	b.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a4b4:	4b74      	ldr	r3, [pc, #464]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a4b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a4ba:	f003 0302 	and.w	r3, r3, #2
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	d106      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c4:	2b05      	cmp	r3, #5
 800a4c6:	d103      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800a4c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ce:	e003      	b.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a4d4:	f001 bebd 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a4d8:	f001 bebb 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a4dc:	4b6a      	ldr	r3, [pc, #424]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a4de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a4e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a4e6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d104      	bne.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a4ee:	f7fc ff55 	bl	800739c <HAL_RCC_GetPCLK1Freq>
 800a4f2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800a4f4:	f001 bead 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800a4f8:	4b63      	ldr	r3, [pc, #396]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a500:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a504:	d10a      	bne.n	800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800a506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a508:	2b08      	cmp	r3, #8
 800a50a:	d107      	bne.n	800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a50c:	f107 0314 	add.w	r3, r7, #20
 800a510:	4618      	mov	r0, r3
 800a512:	f7ff f87b 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	637b      	str	r3, [r7, #52]	@ 0x34
 800a51a:	e03d      	b.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800a51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51e:	2b10      	cmp	r3, #16
 800a520:	d108      	bne.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a522:	f107 0308 	add.w	r3, r7, #8
 800a526:	4618      	mov	r0, r3
 800a528:	f7ff f9dc 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a530:	f001 be8f 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a534:	4b54      	ldr	r3, [pc, #336]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 0302 	and.w	r3, r3, #2
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d10c      	bne.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800a540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a542:	2b18      	cmp	r3, #24
 800a544:	d109      	bne.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a546:	4b50      	ldr	r3, [pc, #320]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	08db      	lsrs	r3, r3, #3
 800a54c:	f003 0303 	and.w	r3, r3, #3
 800a550:	4a4e      	ldr	r2, [pc, #312]	@ (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a552:	fa22 f303 	lsr.w	r3, r2, r3
 800a556:	637b      	str	r3, [r7, #52]	@ 0x34
 800a558:	e01e      	b.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800a55a:	4b4b      	ldr	r3, [pc, #300]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a562:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a566:	d105      	bne.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56a:	2b20      	cmp	r3, #32
 800a56c:	d102      	bne.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800a56e:	4b48      	ldr	r3, [pc, #288]	@ (800a690 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a570:	637b      	str	r3, [r7, #52]	@ 0x34
 800a572:	e011      	b.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a574:	4b44      	ldr	r3, [pc, #272]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a57a:	f003 0302 	and.w	r3, r3, #2
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d106      	bne.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800a582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a584:	2b28      	cmp	r3, #40	@ 0x28
 800a586:	d103      	bne.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800a588:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a58c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a58e:	e003      	b.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800a590:	2300      	movs	r3, #0
 800a592:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a594:	f001 be5d 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a598:	f001 be5b 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a59c:	4b3a      	ldr	r3, [pc, #232]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a59e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a5a2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a5a6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d104      	bne.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a5ae:	f7fc fef5 	bl	800739c <HAL_RCC_GetPCLK1Freq>
 800a5b2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800a5b4:	f001 be4d 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800a5b8:	4b33      	ldr	r3, [pc, #204]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5c4:	d10a      	bne.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c8:	2b40      	cmp	r3, #64	@ 0x40
 800a5ca:	d107      	bne.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5cc:	f107 0314 	add.w	r3, r7, #20
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7ff f81b 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5da:	e045      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800a5dc:	4b2a      	ldr	r3, [pc, #168]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5e8:	d10a      	bne.n	800a600 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ec:	2b80      	cmp	r3, #128	@ 0x80
 800a5ee:	d107      	bne.n	800a600 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5f0:	f107 0308 	add.w	r3, r7, #8
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7ff f975 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5fe:	e033      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a600:	4b21      	ldr	r3, [pc, #132]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 0302 	and.w	r3, r3, #2
 800a608:	2b02      	cmp	r3, #2
 800a60a:	d10c      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800a60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a60e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a610:	d109      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a612:	4b1d      	ldr	r3, [pc, #116]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	08db      	lsrs	r3, r3, #3
 800a618:	f003 0303 	and.w	r3, r3, #3
 800a61c:	4a1b      	ldr	r2, [pc, #108]	@ (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a61e:	fa22 f303 	lsr.w	r3, r2, r3
 800a622:	637b      	str	r3, [r7, #52]	@ 0x34
 800a624:	e020      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800a626:	4b18      	ldr	r3, [pc, #96]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a62e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a632:	d106      	bne.n	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800a634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a63a:	d102      	bne.n	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800a63c:	4b14      	ldr	r3, [pc, #80]	@ (800a690 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a63e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a640:	e012      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800a642:	4b11      	ldr	r3, [pc, #68]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a648:	f003 0302 	and.w	r3, r3, #2
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	d107      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800a650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a652:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a656:	d103      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800a658:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a65c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a65e:	e003      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800a660:	2300      	movs	r3, #0
 800a662:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a664:	f001 bdf5 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a668:	f001 bdf3 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a66c:	4b06      	ldr	r3, [pc, #24]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a66e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a672:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a676:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800a678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10a      	bne.n	800a694 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a67e:	f7fc fe8d 	bl	800739c <HAL_RCC_GetPCLK1Freq>
 800a682:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800a684:	f001 bde5 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a688:	44020c00 	.word	0x44020c00
 800a68c:	03d09000 	.word	0x03d09000
 800a690:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800a694:	4ba0      	ldr	r3, [pc, #640]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a69c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6a0:	d10b      	bne.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6a8:	d107      	bne.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6aa:	f107 0314 	add.w	r3, r7, #20
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fe ffac 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6b8:	e047      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800a6ba:	4b97      	ldr	r3, [pc, #604]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6c6:	d10b      	bne.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800a6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6ce:	d107      	bne.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6d0:	f107 0308 	add.w	r3, r7, #8
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7ff f905 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6de:	e034      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a6e0:	4b8d      	ldr	r3, [pc, #564]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 0302 	and.w	r3, r3, #2
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d10d      	bne.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a6f2:	d109      	bne.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a6f4:	4b88      	ldr	r3, [pc, #544]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	08db      	lsrs	r3, r3, #3
 800a6fa:	f003 0303 	and.w	r3, r3, #3
 800a6fe:	4a87      	ldr	r2, [pc, #540]	@ (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a700:	fa22 f303 	lsr.w	r3, r2, r3
 800a704:	637b      	str	r3, [r7, #52]	@ 0x34
 800a706:	e020      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800a708:	4b83      	ldr	r3, [pc, #524]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a714:	d106      	bne.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800a716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a718:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a71c:	d102      	bne.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800a71e:	4b80      	ldr	r3, [pc, #512]	@ (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a720:	637b      	str	r3, [r7, #52]	@ 0x34
 800a722:	e012      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a724:	4b7c      	ldr	r3, [pc, #496]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a726:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a72a:	f003 0302 	and.w	r3, r3, #2
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d107      	bne.n	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800a732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a734:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a738:	d103      	bne.n	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800a73a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a73e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a740:	e003      	b.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800a742:	2300      	movs	r3, #0
 800a744:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a746:	f001 bd84 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a74a:	f001 bd82 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a74e:	4b72      	ldr	r3, [pc, #456]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a750:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a754:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a758:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d104      	bne.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a760:	f7fc fe1c 	bl	800739c <HAL_RCC_GetPCLK1Freq>
 800a764:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800a766:	f001 bd74 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800a76a:	4b6b      	ldr	r3, [pc, #428]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a776:	d10b      	bne.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800a778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a77e:	d107      	bne.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a780:	f107 0314 	add.w	r3, r7, #20
 800a784:	4618      	mov	r0, r3
 800a786:	f7fe ff41 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a78e:	e047      	b.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800a790:	4b61      	ldr	r3, [pc, #388]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a79c:	d10b      	bne.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800a79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7a4:	d107      	bne.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7a6:	f107 0308 	add.w	r3, r7, #8
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7ff f89a 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7b4:	e034      	b.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a7b6:	4b58      	ldr	r3, [pc, #352]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 0302 	and.w	r3, r3, #2
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d10d      	bne.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a7c8:	d109      	bne.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a7ca:	4b53      	ldr	r3, [pc, #332]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	08db      	lsrs	r3, r3, #3
 800a7d0:	f003 0303 	and.w	r3, r3, #3
 800a7d4:	4a51      	ldr	r2, [pc, #324]	@ (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a7d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7dc:	e020      	b.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800a7de:	4b4e      	ldr	r3, [pc, #312]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7ea:	d106      	bne.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7f2:	d102      	bne.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800a7f4:	4b4a      	ldr	r3, [pc, #296]	@ (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a7f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7f8:	e012      	b.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a7fa:	4b47      	ldr	r3, [pc, #284]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a7fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a800:	f003 0302 	and.w	r3, r3, #2
 800a804:	2b02      	cmp	r3, #2
 800a806:	d107      	bne.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800a808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a80e:	d103      	bne.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800a810:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a814:	637b      	str	r3, [r7, #52]	@ 0x34
 800a816:	e003      	b.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800a818:	2300      	movs	r3, #0
 800a81a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a81c:	f001 bd19 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a820:	f001 bd17 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a824:	4b3c      	ldr	r3, [pc, #240]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a826:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a82a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800a82e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a832:	2b00      	cmp	r3, #0
 800a834:	d104      	bne.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a836:	f7fc fdb1 	bl	800739c <HAL_RCC_GetPCLK1Freq>
 800a83a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800a83c:	f001 bd09 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800a840:	4b35      	ldr	r3, [pc, #212]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a848:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a84c:	d10b      	bne.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800a84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a854:	d107      	bne.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a856:	f107 0314 	add.w	r3, r7, #20
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe fed6 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	637b      	str	r3, [r7, #52]	@ 0x34
 800a864:	e047      	b.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800a866:	4b2c      	ldr	r3, [pc, #176]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a86e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a872:	d10b      	bne.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800a874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a87a:	d107      	bne.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a87c:	f107 0308 	add.w	r3, r7, #8
 800a880:	4618      	mov	r0, r3
 800a882:	f7ff f82f 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	637b      	str	r3, [r7, #52]	@ 0x34
 800a88a:	e034      	b.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a88c:	4b22      	ldr	r3, [pc, #136]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 0302 	and.w	r3, r3, #2
 800a894:	2b02      	cmp	r3, #2
 800a896:	d10d      	bne.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800a898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a89e:	d109      	bne.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a8a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	08db      	lsrs	r3, r3, #3
 800a8a6:	f003 0303 	and.w	r3, r3, #3
 800a8aa:	4a1c      	ldr	r2, [pc, #112]	@ (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a8ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8b2:	e020      	b.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800a8b4:	4b18      	ldr	r3, [pc, #96]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8c0:	d106      	bne.n	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8c8:	d102      	bne.n	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800a8ca:	4b15      	ldr	r3, [pc, #84]	@ (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a8cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8ce:	e012      	b.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a8d0:	4b11      	ldr	r3, [pc, #68]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a8d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a8d6:	f003 0302 	and.w	r3, r3, #2
 800a8da:	2b02      	cmp	r3, #2
 800a8dc:	d107      	bne.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800a8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a8e4:	d103      	bne.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800a8e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8ec:	e003      	b.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a8f2:	f001 bcae 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a8f6:	f001 bcac 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800a8fa:	4b07      	ldr	r3, [pc, #28]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a8fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a900:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800a904:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800a906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10b      	bne.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a90c:	f7fc fd46 	bl	800739c <HAL_RCC_GetPCLK1Freq>
 800a910:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800a912:	f001 bc9e 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a916:	bf00      	nop
 800a918:	44020c00 	.word	0x44020c00
 800a91c:	03d09000 	.word	0x03d09000
 800a920:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800a924:	4ba0      	ldr	r3, [pc, #640]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a92c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a930:	d10b      	bne.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800a932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a934:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a938:	d107      	bne.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a93a:	f107 0314 	add.w	r3, r7, #20
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fe fe64 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	637b      	str	r3, [r7, #52]	@ 0x34
 800a948:	e047      	b.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800a94a:	4b97      	ldr	r3, [pc, #604]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a952:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a956:	d10b      	bne.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800a958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a95e:	d107      	bne.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a960:	f107 0308 	add.w	r3, r7, #8
 800a964:	4618      	mov	r0, r3
 800a966:	f7fe ffbd 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a96e:	e034      	b.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800a970:	4b8d      	ldr	r3, [pc, #564]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 0302 	and.w	r3, r3, #2
 800a978:	2b02      	cmp	r3, #2
 800a97a:	d10d      	bne.n	800a998 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800a97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a982:	d109      	bne.n	800a998 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a984:	4b88      	ldr	r3, [pc, #544]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	08db      	lsrs	r3, r3, #3
 800a98a:	f003 0303 	and.w	r3, r3, #3
 800a98e:	4a87      	ldr	r2, [pc, #540]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a990:	fa22 f303 	lsr.w	r3, r2, r3
 800a994:	637b      	str	r3, [r7, #52]	@ 0x34
 800a996:	e020      	b.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800a998:	4b83      	ldr	r3, [pc, #524]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9a4:	d106      	bne.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9ac:	d102      	bne.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800a9ae:	4b80      	ldr	r3, [pc, #512]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a9b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9b2:	e012      	b.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800a9b4:	4b7c      	ldr	r3, [pc, #496]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a9b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9ba:	f003 0302 	and.w	r3, r3, #2
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	d107      	bne.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a9c8:	d103      	bne.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800a9ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9d0:	e003      	b.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9d6:	f001 bc3c 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a9da:	f001 bc3a 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800a9de:	4b72      	ldr	r3, [pc, #456]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a9e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a9e4:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a9e8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d104      	bne.n	800a9fa <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a9f0:	f7fc fcd4 	bl	800739c <HAL_RCC_GetPCLK1Freq>
 800a9f4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800a9f6:	f001 bc2c 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800a9fa:	4b6b      	ldr	r3, [pc, #428]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa06:	d10b      	bne.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800aa08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa0e:	d107      	bne.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa10:	f107 0314 	add.w	r3, r7, #20
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fe fdf9 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa1e:	e047      	b.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800aa20:	4b61      	ldr	r3, [pc, #388]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa2c:	d10b      	bne.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa34:	d107      	bne.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa36:	f107 0308 	add.w	r3, r7, #8
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fe ff52 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa44:	e034      	b.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800aa46:	4b58      	ldr	r3, [pc, #352]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 0302 	and.w	r3, r3, #2
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d10d      	bne.n	800aa6e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800aa52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa54:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aa58:	d109      	bne.n	800aa6e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa5a:	4b53      	ldr	r3, [pc, #332]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	08db      	lsrs	r3, r3, #3
 800aa60:	f003 0303 	and.w	r3, r3, #3
 800aa64:	4a51      	ldr	r2, [pc, #324]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800aa66:	fa22 f303 	lsr.w	r3, r2, r3
 800aa6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa6c:	e020      	b.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800aa6e:	4b4e      	ldr	r3, [pc, #312]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa7a:	d106      	bne.n	800aa8a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aa82:	d102      	bne.n	800aa8a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800aa84:	4b4a      	ldr	r3, [pc, #296]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800aa86:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa88:	e012      	b.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800aa8a:	4b47      	ldr	r3, [pc, #284]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aa8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa90:	f003 0302 	and.w	r3, r3, #2
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d107      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800aa98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800aa9e:	d103      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800aaa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aaa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaa6:	e003      	b.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aaac:	f001 bbd1 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aab0:	f001 bbcf 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800aab4:	4b3c      	ldr	r3, [pc, #240]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aab6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800aaba:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800aabe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800aac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d104      	bne.n	800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800aac6:	f7fc fc69 	bl	800739c <HAL_RCC_GetPCLK1Freq>
 800aaca:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800aacc:	f001 bbc1 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800aad0:	4b35      	ldr	r3, [pc, #212]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aad8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aadc:	d10b      	bne.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800aade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aae4:	d107      	bne.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aae6:	f107 0314 	add.w	r3, r7, #20
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe fd8e 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaf4:	e047      	b.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800aaf6:	4b2c      	ldr	r3, [pc, #176]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aafe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab02:	d10b      	bne.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800ab04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab0a:	d107      	bne.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab0c:	f107 0308 	add.w	r3, r7, #8
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fe fee7 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab1a:	e034      	b.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800ab1c:	4b22      	ldr	r3, [pc, #136]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 0302 	and.w	r3, r3, #2
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d10d      	bne.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800ab28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ab2e:	d109      	bne.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab30:	4b1d      	ldr	r3, [pc, #116]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	08db      	lsrs	r3, r3, #3
 800ab36:	f003 0303 	and.w	r3, r3, #3
 800ab3a:	4a1c      	ldr	r2, [pc, #112]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800ab3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab40:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab42:	e020      	b.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800ab44:	4b18      	ldr	r3, [pc, #96]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab50:	d106      	bne.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800ab52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ab58:	d102      	bne.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800ab5a:	4b15      	ldr	r3, [pc, #84]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800ab5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab5e:	e012      	b.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800ab60:	4b11      	ldr	r3, [pc, #68]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ab62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab66:	f003 0302 	and.w	r3, r3, #2
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	d107      	bne.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab70:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ab74:	d103      	bne.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800ab76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab7c:	e003      	b.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab82:	f001 bb66 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ab86:	f001 bb64 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800ab8a:	4b07      	ldr	r3, [pc, #28]	@ (800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ab8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ab90:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800ab94:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800ab96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10b      	bne.n	800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ab9c:	f7fc fbfe 	bl	800739c <HAL_RCC_GetPCLK1Freq>
 800aba0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800aba2:	f001 bb56 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aba6:	bf00      	nop
 800aba8:	44020c00 	.word	0x44020c00
 800abac:	03d09000 	.word	0x03d09000
 800abb0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800abb4:	4ba1      	ldr	r3, [pc, #644]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abc0:	d10b      	bne.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800abc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abc8:	d107      	bne.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abca:	f107 0314 	add.w	r3, r7, #20
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fe fd1c 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800abd8:	e047      	b.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800abda:	4b98      	ldr	r3, [pc, #608]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abe6:	d10b      	bne.n	800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800abe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abee:	d107      	bne.n	800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abf0:	f107 0308 	add.w	r3, r7, #8
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fe fe75 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	637b      	str	r3, [r7, #52]	@ 0x34
 800abfe:	e034      	b.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800ac00:	4b8e      	ldr	r3, [pc, #568]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f003 0302 	and.w	r3, r3, #2
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	d10d      	bne.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800ac12:	d109      	bne.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac14:	4b89      	ldr	r3, [pc, #548]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	08db      	lsrs	r3, r3, #3
 800ac1a:	f003 0303 	and.w	r3, r3, #3
 800ac1e:	4a88      	ldr	r2, [pc, #544]	@ (800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800ac20:	fa22 f303 	lsr.w	r3, r2, r3
 800ac24:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac26:	e020      	b.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800ac28:	4b84      	ldr	r3, [pc, #528]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac34:	d106      	bne.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800ac36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac3c:	d102      	bne.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800ac3e:	4b81      	ldr	r3, [pc, #516]	@ (800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800ac40:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac42:	e012      	b.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800ac44:	4b7d      	ldr	r3, [pc, #500]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac4a:	f003 0302 	and.w	r3, r3, #2
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d107      	bne.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800ac52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac54:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800ac58:	d103      	bne.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800ac5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac60:	e003      	b.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800ac62:	2300      	movs	r3, #0
 800ac64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac66:	f001 baf4 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ac6a:	f001 baf2 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800ac6e:	4b73      	ldr	r3, [pc, #460]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac70:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ac74:	f003 0307 	and.w	r3, r3, #7
 800ac78:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d104      	bne.n	800ac8a <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ac80:	f7fc fb8c 	bl	800739c <HAL_RCC_GetPCLK1Freq>
 800ac84:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800ac86:	f001 bae4 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800ac8a:	4b6c      	ldr	r3, [pc, #432]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac96:	d10a      	bne.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800ac98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d107      	bne.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac9e:	f107 0314 	add.w	r3, r7, #20
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fe fcb2 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800acac:	e043      	b.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800acae:	4b63      	ldr	r3, [pc, #396]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acba:	d10a      	bne.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800acbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d107      	bne.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acc2:	f107 0308 	add.w	r3, r7, #8
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe fe0c 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	637b      	str	r3, [r7, #52]	@ 0x34
 800acd0:	e031      	b.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800acd2:	4b5a      	ldr	r3, [pc, #360]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f003 0302 	and.w	r3, r3, #2
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d10c      	bne.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800acde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace0:	2b03      	cmp	r3, #3
 800ace2:	d109      	bne.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ace4:	4b55      	ldr	r3, [pc, #340]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	08db      	lsrs	r3, r3, #3
 800acea:	f003 0303 	and.w	r3, r3, #3
 800acee:	4a54      	ldr	r2, [pc, #336]	@ (800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800acf0:	fa22 f303 	lsr.w	r3, r2, r3
 800acf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800acf6:	e01e      	b.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800acf8:	4b50      	ldr	r3, [pc, #320]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad04:	d105      	bne.n	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800ad06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad08:	2b04      	cmp	r3, #4
 800ad0a:	d102      	bne.n	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800ad0c:	4b4d      	ldr	r3, [pc, #308]	@ (800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800ad0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad10:	e011      	b.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800ad12:	4b4a      	ldr	r3, [pc, #296]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ad14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad18:	f003 0302 	and.w	r3, r3, #2
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d106      	bne.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800ad20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad22:	2b05      	cmp	r3, #5
 800ad24:	d103      	bne.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800ad26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad2c:	e003      	b.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad32:	f001 ba8e 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ad36:	f001 ba8c 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800ad3a:	4b40      	ldr	r3, [pc, #256]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ad3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ad40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ad44:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800ad46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d104      	bne.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad4c:	f7fc fb26 	bl	800739c <HAL_RCC_GetPCLK1Freq>
 800ad50:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800ad52:	f001 ba7e 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800ad56:	4b39      	ldr	r3, [pc, #228]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad62:	d10a      	bne.n	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800ad64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad66:	2b10      	cmp	r3, #16
 800ad68:	d107      	bne.n	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad6a:	f107 0314 	add.w	r3, r7, #20
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fe fc4c 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad78:	e043      	b.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800ad7a:	4b30      	ldr	r3, [pc, #192]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad86:	d10a      	bne.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800ad88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8a:	2b20      	cmp	r3, #32
 800ad8c:	d107      	bne.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad8e:	f107 0308 	add.w	r3, r7, #8
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fe fda6 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad9c:	e031      	b.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800ad9e:	4b27      	ldr	r3, [pc, #156]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 0302 	and.w	r3, r3, #2
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d10c      	bne.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800adaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adac:	2b30      	cmp	r3, #48	@ 0x30
 800adae:	d109      	bne.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800adb0:	4b22      	ldr	r3, [pc, #136]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	08db      	lsrs	r3, r3, #3
 800adb6:	f003 0303 	and.w	r3, r3, #3
 800adba:	4a21      	ldr	r2, [pc, #132]	@ (800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800adbc:	fa22 f303 	lsr.w	r3, r2, r3
 800adc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800adc2:	e01e      	b.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800adc4:	4b1d      	ldr	r3, [pc, #116]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800adcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800add0:	d105      	bne.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800add2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add4:	2b40      	cmp	r3, #64	@ 0x40
 800add6:	d102      	bne.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800add8:	4b1a      	ldr	r3, [pc, #104]	@ (800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800adda:	637b      	str	r3, [r7, #52]	@ 0x34
 800addc:	e011      	b.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800adde:	4b17      	ldr	r3, [pc, #92]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ade0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ade4:	f003 0302 	and.w	r3, r3, #2
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d106      	bne.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800adec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adee:	2b50      	cmp	r3, #80	@ 0x50
 800adf0:	d103      	bne.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800adf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800adf8:	e003      	b.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800adfa:	2300      	movs	r3, #0
 800adfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adfe:	f001 ba28 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ae02:	f001 ba26 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800ae06:	4b0d      	ldr	r3, [pc, #52]	@ (800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ae08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae0c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ae10:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800ae12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d104      	bne.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800ae18:	f7fc faec 	bl	80073f4 <HAL_RCC_GetPCLK3Freq>
 800ae1c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800ae1e:	f001 ba18 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800ae22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae28:	d10e      	bne.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae2a:	f107 0314 	add.w	r3, r7, #20
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fe fbec 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae38:	f001 ba0b 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ae3c:	44020c00 	.word	0x44020c00
 800ae40:	03d09000 	.word	0x03d09000
 800ae44:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800ae48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae4e:	d108      	bne.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae50:	f107 0308 	add.w	r3, r7, #8
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fe fd45 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae5e:	f001 b9f8 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800ae62:	4ba4      	ldr	r3, [pc, #656]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 0302 	and.w	r3, r3, #2
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d10d      	bne.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ae74:	d109      	bne.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ae76:	4b9f      	ldr	r3, [pc, #636]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	08db      	lsrs	r3, r3, #3
 800ae7c:	f003 0303 	and.w	r3, r3, #3
 800ae80:	4a9d      	ldr	r2, [pc, #628]	@ (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800ae82:	fa22 f303 	lsr.w	r3, r2, r3
 800ae86:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae88:	e020      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800ae8a:	4b9a      	ldr	r3, [pc, #616]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae96:	d106      	bne.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800ae98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ae9e:	d102      	bne.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800aea0:	4b96      	ldr	r3, [pc, #600]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800aea2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aea4:	e012      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800aea6:	4b93      	ldr	r3, [pc, #588]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aeac:	f003 0302 	and.w	r3, r3, #2
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d107      	bne.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800aeba:	d103      	bne.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800aebc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aec0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aec2:	e003      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800aec4:	2300      	movs	r3, #0
 800aec6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aec8:	f001 b9c3 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aecc:	f001 b9c1 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800aed0:	4b88      	ldr	r3, [pc, #544]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aed2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aed6:	f003 0307 	and.w	r3, r3, #7
 800aeda:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800aedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d104      	bne.n	800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800aee2:	f7fc fa3f 	bl	8007364 <HAL_RCC_GetHCLKFreq>
 800aee6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800aee8:	f001 b9b3 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800aeec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d104      	bne.n	800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800aef2:	f7fc f90b 	bl	800710c <HAL_RCC_GetSysClockFreq>
 800aef6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800aef8:	f001 b9ab 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800aefc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d108      	bne.n	800af14 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af02:	f107 0314 	add.w	r3, r7, #20
 800af06:	4618      	mov	r0, r3
 800af08:	f7fe fb80 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af10:	f001 b99f 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800af14:	4b77      	ldr	r3, [pc, #476]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af20:	d105      	bne.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800af22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af24:	2b03      	cmp	r3, #3
 800af26:	d102      	bne.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800af28:	4b75      	ldr	r3, [pc, #468]	@ (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800af2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800af2c:	e023      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800af2e:	4b71      	ldr	r3, [pc, #452]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	2b02      	cmp	r3, #2
 800af38:	d10c      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800af3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3c:	2b04      	cmp	r3, #4
 800af3e:	d109      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800af40:	4b6c      	ldr	r3, [pc, #432]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	08db      	lsrs	r3, r3, #3
 800af46:	f003 0303 	and.w	r3, r3, #3
 800af4a:	4a6b      	ldr	r2, [pc, #428]	@ (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800af4c:	fa22 f303 	lsr.w	r3, r2, r3
 800af50:	637b      	str	r3, [r7, #52]	@ 0x34
 800af52:	e010      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800af54:	4b67      	ldr	r3, [pc, #412]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af60:	d105      	bne.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800af62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af64:	2b05      	cmp	r3, #5
 800af66:	d102      	bne.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800af68:	4b64      	ldr	r3, [pc, #400]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800af6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800af6c:	e003      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800af6e:	2300      	movs	r3, #0
 800af70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af72:	f001 b96e 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800af76:	f001 b96c 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800af7a:	4b5e      	ldr	r3, [pc, #376]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800af80:	f003 0308 	and.w	r3, r3, #8
 800af84:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800af86:	4b5b      	ldr	r3, [pc, #364]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af8c:	f003 0302 	and.w	r3, r3, #2
 800af90:	2b02      	cmp	r3, #2
 800af92:	d106      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800af94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af96:	2b00      	cmp	r3, #0
 800af98:	d103      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800af9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800afa0:	e012      	b.n	800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800afa2:	4b54      	ldr	r3, [pc, #336]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800afa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800afa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800afb0:	d106      	bne.n	800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800afb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb4:	2b08      	cmp	r3, #8
 800afb6:	d103      	bne.n	800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800afb8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800afbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800afbe:	e003      	b.n	800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800afc0:	2300      	movs	r3, #0
 800afc2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800afc4:	f001 b945 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800afc8:	f001 b943 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800afcc:	4b49      	ldr	r3, [pc, #292]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800afce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800afd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800afd6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800afd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d104      	bne.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800afde:	f7fc f9dd 	bl	800739c <HAL_RCC_GetPCLK1Freq>
 800afe2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800afe4:	f001 b935 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800afe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afee:	d108      	bne.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aff0:	f107 0308 	add.w	r3, r7, #8
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7fe fc75 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800affe:	f001 b928 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800b002:	4b3c      	ldr	r3, [pc, #240]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 0302 	and.w	r3, r3, #2
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	d10d      	bne.n	800b02a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800b00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b010:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b014:	d109      	bne.n	800b02a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b016:	4b37      	ldr	r3, [pc, #220]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	08db      	lsrs	r3, r3, #3
 800b01c:	f003 0303 	and.w	r3, r3, #3
 800b020:	4a35      	ldr	r2, [pc, #212]	@ (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800b022:	fa22 f303 	lsr.w	r3, r2, r3
 800b026:	637b      	str	r3, [r7, #52]	@ 0x34
 800b028:	e011      	b.n	800b04e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800b02a:	4b32      	ldr	r3, [pc, #200]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b032:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b036:	d106      	bne.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800b038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b03e:	d102      	bne.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800b040:	4b2e      	ldr	r3, [pc, #184]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800b042:	637b      	str	r3, [r7, #52]	@ 0x34
 800b044:	e003      	b.n	800b04e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800b046:	2300      	movs	r3, #0
 800b048:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b04a:	f001 b902 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b04e:	f001 b900 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800b052:	4b28      	ldr	r3, [pc, #160]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b054:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b058:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800b05c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800b05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b060:	2b00      	cmp	r3, #0
 800b062:	d104      	bne.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b064:	f7fc f99a 	bl	800739c <HAL_RCC_GetPCLK1Freq>
 800b068:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800b06a:	f001 b8f2 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800b06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b070:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b074:	d108      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b076:	f107 0308 	add.w	r3, r7, #8
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fe fc32 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b084:	f001 b8e5 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800b088:	4b1a      	ldr	r3, [pc, #104]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 0302 	and.w	r3, r3, #2
 800b090:	2b02      	cmp	r3, #2
 800b092:	d10d      	bne.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800b094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b096:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b09a:	d109      	bne.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b09c:	4b15      	ldr	r3, [pc, #84]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	08db      	lsrs	r3, r3, #3
 800b0a2:	f003 0303 	and.w	r3, r3, #3
 800b0a6:	4a14      	ldr	r2, [pc, #80]	@ (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800b0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0ae:	e011      	b.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800b0b0:	4b10      	ldr	r3, [pc, #64]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b0b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0bc:	d106      	bne.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800b0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b0c4:	d102      	bne.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800b0c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800b0c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0ca:	e003      	b.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0d0:	f001 b8bf 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b0d4:	f001 b8bd 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b0d8:	4b06      	ldr	r3, [pc, #24]	@ (800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b0da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b0de:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b0e2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800b0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10c      	bne.n	800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b0ea:	f7fc f983 	bl	80073f4 <HAL_RCC_GetPCLK3Freq>
 800b0ee:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800b0f0:	f001 b8af 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b0f4:	44020c00 	.word	0x44020c00
 800b0f8:	03d09000 	.word	0x03d09000
 800b0fc:	003d0900 	.word	0x003d0900
 800b100:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800b104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b10a:	d108      	bne.n	800b11e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b10c:	f107 0308 	add.w	r3, r7, #8
 800b110:	4618      	mov	r0, r3
 800b112:	f7fe fbe7 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b11a:	f001 b89a 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800b11e:	4b9f      	ldr	r3, [pc, #636]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f003 0302 	and.w	r3, r3, #2
 800b126:	2b02      	cmp	r3, #2
 800b128:	d10d      	bne.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800b12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b12c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b130:	d109      	bne.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b132:	4b9a      	ldr	r3, [pc, #616]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	08db      	lsrs	r3, r3, #3
 800b138:	f003 0303 	and.w	r3, r3, #3
 800b13c:	4a98      	ldr	r2, [pc, #608]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b13e:	fa22 f303 	lsr.w	r3, r2, r3
 800b142:	637b      	str	r3, [r7, #52]	@ 0x34
 800b144:	e011      	b.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800b146:	4b95      	ldr	r3, [pc, #596]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b14e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b152:	d106      	bne.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800b154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b156:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b15a:	d102      	bne.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800b15c:	4b91      	ldr	r3, [pc, #580]	@ (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800b15e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b160:	e003      	b.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800b162:	2300      	movs	r3, #0
 800b164:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b166:	f001 b874 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b16a:	f001 b872 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b16e:	4b8b      	ldr	r3, [pc, #556]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b170:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b174:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b178:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800b17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d104      	bne.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b180:	f7fc f938 	bl	80073f4 <HAL_RCC_GetPCLK3Freq>
 800b184:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800b186:	f001 b864 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800b18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b190:	d108      	bne.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b192:	f107 0308 	add.w	r3, r7, #8
 800b196:	4618      	mov	r0, r3
 800b198:	f7fe fba4 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1a0:	f001 b857 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800b1a4:	4b7d      	ldr	r3, [pc, #500]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 0302 	and.w	r3, r3, #2
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d10d      	bne.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800b1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b1b6:	d109      	bne.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b1b8:	4b78      	ldr	r3, [pc, #480]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	08db      	lsrs	r3, r3, #3
 800b1be:	f003 0303 	and.w	r3, r3, #3
 800b1c2:	4a77      	ldr	r2, [pc, #476]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b1c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1ca:	e011      	b.n	800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800b1cc:	4b73      	ldr	r3, [pc, #460]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b1d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1d8:	d106      	bne.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800b1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b1e0:	d102      	bne.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800b1e2:	4b70      	ldr	r3, [pc, #448]	@ (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800b1e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1e6:	e003      	b.n	800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1ec:	f001 b831 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b1f0:	f001 b82f 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800b1f4:	4b69      	ldr	r3, [pc, #420]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b1f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b1fa:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800b1fe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800b200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b202:	2b00      	cmp	r3, #0
 800b204:	d104      	bne.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b206:	f7fc f8c9 	bl	800739c <HAL_RCC_GetPCLK1Freq>
 800b20a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b20c:	f001 b821 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800b210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b212:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b216:	d108      	bne.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b218:	f107 0308 	add.w	r3, r7, #8
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7fe fb61 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b226:	f001 b814 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800b22a:	4b5c      	ldr	r3, [pc, #368]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 0302 	and.w	r3, r3, #2
 800b232:	2b02      	cmp	r3, #2
 800b234:	d10e      	bne.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800b236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b238:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b23c:	d10a      	bne.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b23e:	4b57      	ldr	r3, [pc, #348]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	08db      	lsrs	r3, r3, #3
 800b244:	f003 0303 	and.w	r3, r3, #3
 800b248:	4a55      	ldr	r2, [pc, #340]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b24a:	fa22 f303 	lsr.w	r3, r2, r3
 800b24e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b250:	f000 bfff 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b254:	2300      	movs	r3, #0
 800b256:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b258:	f000 bffb 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b25c:	4b4f      	ldr	r3, [pc, #316]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b25e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b262:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b266:	633b      	str	r3, [r7, #48]	@ 0x30
 800b268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800b26e:	d056      	beq.n	800b31e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800b270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b272:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800b276:	f200 808b 	bhi.w	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b280:	d03e      	beq.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800b282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b288:	f200 8082 	bhi.w	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b292:	d027      	beq.n	800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800b294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b29a:	d879      	bhi.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2a2:	d017      	beq.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800b2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2aa:	d871      	bhi.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d004      	beq.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2b8:	d004      	beq.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800b2ba:	e069      	b.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b2bc:	f7fc f89a 	bl	80073f4 <HAL_RCC_GetPCLK3Freq>
 800b2c0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b2c2:	e068      	b.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2c4:	f107 0314 	add.w	r3, r7, #20
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7fe f99f 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2d2:	e060      	b.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2d4:	f107 0308 	add.w	r3, r7, #8
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7fe fb03 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2e2:	e058      	b.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b2e4:	4b2d      	ldr	r3, [pc, #180]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b2e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b2ea:	f003 0302 	and.w	r3, r3, #2
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	d103      	bne.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800b2f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2f6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b2f8:	e04d      	b.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2fe:	e04a      	b.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b300:	4b26      	ldr	r3, [pc, #152]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b306:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b30a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b30e:	d103      	bne.n	800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800b310:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b314:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b316:	e03e      	b.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b31c:	e03b      	b.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b31e:	4b1f      	ldr	r3, [pc, #124]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b320:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b324:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b328:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b32a:	4b1c      	ldr	r3, [pc, #112]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f003 0302 	and.w	r3, r3, #2
 800b332:	2b02      	cmp	r3, #2
 800b334:	d10c      	bne.n	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800b336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d109      	bne.n	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b33c:	4b17      	ldr	r3, [pc, #92]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	08db      	lsrs	r3, r3, #3
 800b342:	f003 0303 	and.w	r3, r3, #3
 800b346:	4a16      	ldr	r2, [pc, #88]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b348:	fa22 f303 	lsr.w	r3, r2, r3
 800b34c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b34e:	e01e      	b.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b350:	4b12      	ldr	r3, [pc, #72]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b35c:	d106      	bne.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800b35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b364:	d102      	bne.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b366:	4b0f      	ldr	r3, [pc, #60]	@ (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800b368:	637b      	str	r3, [r7, #52]	@ 0x34
 800b36a:	e010      	b.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b36c:	4b0b      	ldr	r3, [pc, #44]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b378:	d106      	bne.n	800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800b37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b37c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b380:	d102      	bne.n	800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b382:	4b09      	ldr	r3, [pc, #36]	@ (800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800b384:	637b      	str	r3, [r7, #52]	@ 0x34
 800b386:	e002      	b.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b388:	2300      	movs	r3, #0
 800b38a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b38c:	e003      	b.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800b38e:	e002      	b.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800b390:	2300      	movs	r3, #0
 800b392:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b394:	bf00      	nop
          }
        }
        break;
 800b396:	f000 bf5c 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b39a:	bf00      	nop
 800b39c:	44020c00 	.word	0x44020c00
 800b3a0:	03d09000 	.word	0x03d09000
 800b3a4:	003d0900 	.word	0x003d0900
 800b3a8:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b3ac:	4b9e      	ldr	r3, [pc, #632]	@ (800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b3ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b3b2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b3b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b3be:	d056      	beq.n	800b46e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b3c6:	f200 808b 	bhi.w	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3d0:	d03e      	beq.n	800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3d8:	f200 8082 	bhi.w	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3e2:	d027      	beq.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800b3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3ea:	d879      	bhi.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3f2:	d017      	beq.n	800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800b3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3fa:	d871      	bhi.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d004      	beq.n	800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800b402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b408:	d004      	beq.n	800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800b40a:	e069      	b.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800b40c:	f7fb ffc6 	bl	800739c <HAL_RCC_GetPCLK1Freq>
 800b410:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b412:	e068      	b.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b414:	f107 0314 	add.w	r3, r7, #20
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fe f8f7 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b422:	e060      	b.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b424:	f107 0308 	add.w	r3, r7, #8
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fe fa5b 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b432:	e058      	b.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b434:	4b7c      	ldr	r3, [pc, #496]	@ (800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b43a:	f003 0302 	and.w	r3, r3, #2
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d103      	bne.n	800b44a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800b442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b446:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b448:	e04d      	b.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b44e:	e04a      	b.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b450:	4b75      	ldr	r3, [pc, #468]	@ (800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b456:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b45a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b45e:	d103      	bne.n	800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800b460:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b464:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b466:	e03e      	b.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800b468:	2300      	movs	r3, #0
 800b46a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b46c:	e03b      	b.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b46e:	4b6e      	ldr	r3, [pc, #440]	@ (800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b474:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b478:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b47a:	4b6b      	ldr	r3, [pc, #428]	@ (800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 0302 	and.w	r3, r3, #2
 800b482:	2b02      	cmp	r3, #2
 800b484:	d10c      	bne.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800b486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d109      	bne.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b48c:	4b66      	ldr	r3, [pc, #408]	@ (800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	08db      	lsrs	r3, r3, #3
 800b492:	f003 0303 	and.w	r3, r3, #3
 800b496:	4a65      	ldr	r2, [pc, #404]	@ (800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800b498:	fa22 f303 	lsr.w	r3, r2, r3
 800b49c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b49e:	e01e      	b.n	800b4de <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4a0:	4b61      	ldr	r3, [pc, #388]	@ (800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b4a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4ac:	d106      	bne.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800b4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4b4:	d102      	bne.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b4b6:	4b5e      	ldr	r3, [pc, #376]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800b4b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4ba:	e010      	b.n	800b4de <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4bc:	4b5a      	ldr	r3, [pc, #360]	@ (800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4c8:	d106      	bne.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800b4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4d0:	d102      	bne.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b4d2:	4b58      	ldr	r3, [pc, #352]	@ (800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800b4d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4d6:	e002      	b.n	800b4de <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b4dc:	e003      	b.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800b4de:	e002      	b.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b4e4:	bf00      	nop
          }
        }
        break;
 800b4e6:	f000 beb4 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800b4ea:	4b4f      	ldr	r3, [pc, #316]	@ (800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b4ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b4f0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b4f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b4fc:	d056      	beq.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800b4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b500:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b504:	f200 808b 	bhi.w	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b50a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b50e:	d03e      	beq.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800b510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b512:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b516:	f200 8082 	bhi.w	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b51c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b520:	d027      	beq.n	800b572 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800b522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b524:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b528:	d879      	bhi.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b530:	d017      	beq.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800b532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b534:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b538:	d871      	bhi.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d004      	beq.n	800b54a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800b540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b546:	d004      	beq.n	800b552 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800b548:	e069      	b.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b54a:	f7fb ff53 	bl	80073f4 <HAL_RCC_GetPCLK3Freq>
 800b54e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b550:	e068      	b.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b552:	f107 0314 	add.w	r3, r7, #20
 800b556:	4618      	mov	r0, r3
 800b558:	f7fe f858 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b560:	e060      	b.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b562:	f107 0308 	add.w	r3, r7, #8
 800b566:	4618      	mov	r0, r3
 800b568:	f7fe f9bc 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b570:	e058      	b.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b572:	4b2d      	ldr	r3, [pc, #180]	@ (800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b578:	f003 0302 	and.w	r3, r3, #2
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d103      	bne.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800b580:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b584:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b586:	e04d      	b.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800b588:	2300      	movs	r3, #0
 800b58a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b58c:	e04a      	b.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b58e:	4b26      	ldr	r3, [pc, #152]	@ (800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b594:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b598:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b59c:	d103      	bne.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800b59e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b5a2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b5a4:	e03e      	b.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b5aa:	e03b      	b.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5ac:	4b1e      	ldr	r3, [pc, #120]	@ (800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b5ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b5b2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b5b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5b8:	4b1b      	ldr	r3, [pc, #108]	@ (800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 0302 	and.w	r3, r3, #2
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	d10c      	bne.n	800b5de <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800b5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d109      	bne.n	800b5de <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b5ca:	4b17      	ldr	r3, [pc, #92]	@ (800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	08db      	lsrs	r3, r3, #3
 800b5d0:	f003 0303 	and.w	r3, r3, #3
 800b5d4:	4a15      	ldr	r2, [pc, #84]	@ (800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800b5d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b5da:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5dc:	e01e      	b.n	800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b5de:	4b12      	ldr	r3, [pc, #72]	@ (800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b5e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5ea:	d106      	bne.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800b5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5f2:	d102      	bne.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b5f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800b5f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5f8:	e010      	b.n	800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b5fa:	4b0b      	ldr	r3, [pc, #44]	@ (800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b602:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b606:	d106      	bne.n	800b616 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800b608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b60a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b60e:	d102      	bne.n	800b616 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b610:	4b08      	ldr	r3, [pc, #32]	@ (800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800b612:	637b      	str	r3, [r7, #52]	@ 0x34
 800b614:	e002      	b.n	800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b616:	2300      	movs	r3, #0
 800b618:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b61a:	e003      	b.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800b61c:	e002      	b.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b622:	bf00      	nop
          }
        }
        break;
 800b624:	f000 be15 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b628:	44020c00 	.word	0x44020c00
 800b62c:	03d09000 	.word	0x03d09000
 800b630:	003d0900 	.word	0x003d0900
 800b634:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800b638:	4b9e      	ldr	r3, [pc, #632]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b63a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b63e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800b642:	633b      	str	r3, [r7, #48]	@ 0x30
 800b644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b646:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b64a:	d056      	beq.n	800b6fa <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800b64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b64e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b652:	f200 808b 	bhi.w	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b658:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b65c:	d03e      	beq.n	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800b65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b660:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b664:	f200 8082 	bhi.w	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b66e:	d027      	beq.n	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800b670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b672:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b676:	d879      	bhi.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b67a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b67e:	d017      	beq.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800b680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b682:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b686:	d871      	bhi.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d004      	beq.n	800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800b68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b690:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b694:	d004      	beq.n	800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800b696:	e069      	b.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b698:	f7fb feac 	bl	80073f4 <HAL_RCC_GetPCLK3Freq>
 800b69c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b69e:	e068      	b.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6a0:	f107 0314 	add.w	r3, r7, #20
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7fd ffb1 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b6ae:	e060      	b.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6b0:	f107 0308 	add.w	r3, r7, #8
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7fe f915 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b6be:	e058      	b.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b6c0:	4b7c      	ldr	r3, [pc, #496]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b6c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6c6:	f003 0302 	and.w	r3, r3, #2
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d103      	bne.n	800b6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800b6ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6d2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b6d4:	e04d      	b.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b6da:	e04a      	b.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b6dc:	4b75      	ldr	r3, [pc, #468]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b6de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b6ea:	d103      	bne.n	800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800b6ec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b6f0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b6f2:	e03e      	b.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b6f8:	e03b      	b.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b6fa:	4b6e      	ldr	r3, [pc, #440]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b6fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b700:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b704:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b706:	4b6b      	ldr	r3, [pc, #428]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f003 0302 	and.w	r3, r3, #2
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d10c      	bne.n	800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800b712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b714:	2b00      	cmp	r3, #0
 800b716:	d109      	bne.n	800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b718:	4b66      	ldr	r3, [pc, #408]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	08db      	lsrs	r3, r3, #3
 800b71e:	f003 0303 	and.w	r3, r3, #3
 800b722:	4a65      	ldr	r2, [pc, #404]	@ (800b8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800b724:	fa22 f303 	lsr.w	r3, r2, r3
 800b728:	637b      	str	r3, [r7, #52]	@ 0x34
 800b72a:	e01e      	b.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b72c:	4b61      	ldr	r3, [pc, #388]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b738:	d106      	bne.n	800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800b73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b73c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b740:	d102      	bne.n	800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b742:	4b5e      	ldr	r3, [pc, #376]	@ (800b8bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800b744:	637b      	str	r3, [r7, #52]	@ 0x34
 800b746:	e010      	b.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b748:	4b5a      	ldr	r3, [pc, #360]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b750:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b754:	d106      	bne.n	800b764 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800b756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b758:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b75c:	d102      	bne.n	800b764 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b75e:	4b58      	ldr	r3, [pc, #352]	@ (800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800b760:	637b      	str	r3, [r7, #52]	@ 0x34
 800b762:	e002      	b.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b764:	2300      	movs	r3, #0
 800b766:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b768:	e003      	b.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800b76a:	e002      	b.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800b76c:	2300      	movs	r3, #0
 800b76e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b770:	bf00      	nop
          }
        }
        break;
 800b772:	f000 bd6e 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800b776:	4b4f      	ldr	r3, [pc, #316]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b778:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b77c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b780:	633b      	str	r3, [r7, #48]	@ 0x30
 800b782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b784:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b788:	d056      	beq.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800b78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b78c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b790:	f200 808b 	bhi.w	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b796:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b79a:	d03e      	beq.n	800b81a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800b79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b79e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b7a2:	f200 8082 	bhi.w	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b7ac:	d027      	beq.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800b7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b7b4:	d879      	bhi.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7bc:	d017      	beq.n	800b7ee <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800b7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7c4:	d871      	bhi.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d004      	beq.n	800b7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800b7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b7d2:	d004      	beq.n	800b7de <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800b7d4:	e069      	b.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b7d6:	f7fb fe0d 	bl	80073f4 <HAL_RCC_GetPCLK3Freq>
 800b7da:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b7dc:	e068      	b.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7de:	f107 0314 	add.w	r3, r7, #20
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fd ff12 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b7ec:	e060      	b.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7ee:	f107 0308 	add.w	r3, r7, #8
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fe f876 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b7fc:	e058      	b.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b7fe:	4b2d      	ldr	r3, [pc, #180]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b804:	f003 0302 	and.w	r3, r3, #2
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d103      	bne.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800b80c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b810:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b812:	e04d      	b.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800b814:	2300      	movs	r3, #0
 800b816:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b818:	e04a      	b.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b81a:	4b26      	ldr	r3, [pc, #152]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b81c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b824:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b828:	d103      	bne.n	800b832 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800b82a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b82e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b830:	e03e      	b.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800b832:	2300      	movs	r3, #0
 800b834:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b836:	e03b      	b.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b838:	4b1e      	ldr	r3, [pc, #120]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b83a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b83e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b842:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b844:	4b1b      	ldr	r3, [pc, #108]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f003 0302 	and.w	r3, r3, #2
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	d10c      	bne.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800b850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b852:	2b00      	cmp	r3, #0
 800b854:	d109      	bne.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b856:	4b17      	ldr	r3, [pc, #92]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	08db      	lsrs	r3, r3, #3
 800b85c:	f003 0303 	and.w	r3, r3, #3
 800b860:	4a15      	ldr	r2, [pc, #84]	@ (800b8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800b862:	fa22 f303 	lsr.w	r3, r2, r3
 800b866:	637b      	str	r3, [r7, #52]	@ 0x34
 800b868:	e01e      	b.n	800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b86a:	4b12      	ldr	r3, [pc, #72]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b876:	d106      	bne.n	800b886 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800b878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b87a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b87e:	d102      	bne.n	800b886 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b880:	4b0e      	ldr	r3, [pc, #56]	@ (800b8bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800b882:	637b      	str	r3, [r7, #52]	@ 0x34
 800b884:	e010      	b.n	800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b886:	4b0b      	ldr	r3, [pc, #44]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b88e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b892:	d106      	bne.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800b894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b896:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b89a:	d102      	bne.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b89c:	4b08      	ldr	r3, [pc, #32]	@ (800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800b89e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8a0:	e002      	b.n	800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b8a6:	e003      	b.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800b8a8:	e002      	b.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b8ae:	bf00      	nop
          }
        }
        break;
 800b8b0:	f000 bccf 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b8b4:	44020c00 	.word	0x44020c00
 800b8b8:	03d09000 	.word	0x03d09000
 800b8bc:	003d0900 	.word	0x003d0900
 800b8c0:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800b8c4:	4b9e      	ldr	r3, [pc, #632]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b8c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b8ca:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b8ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8d6:	d056      	beq.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8de:	f200 808b 	bhi.w	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8e8:	d03e      	beq.n	800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800b8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8f0:	f200 8082 	bhi.w	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b8fa:	d027      	beq.n	800b94c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800b8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b902:	d879      	bhi.n	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b906:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b90a:	d017      	beq.n	800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800b90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b90e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b912:	d871      	bhi.n	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b916:	2b00      	cmp	r3, #0
 800b918:	d004      	beq.n	800b924 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800b91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b920:	d004      	beq.n	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800b922:	e069      	b.n	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b924:	f7fb fd66 	bl	80073f4 <HAL_RCC_GetPCLK3Freq>
 800b928:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b92a:	e068      	b.n	800b9fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b92c:	f107 0314 	add.w	r3, r7, #20
 800b930:	4618      	mov	r0, r3
 800b932:	f7fd fe6b 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b93a:	e060      	b.n	800b9fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b93c:	f107 0308 	add.w	r3, r7, #8
 800b940:	4618      	mov	r0, r3
 800b942:	f7fd ffcf 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b94a:	e058      	b.n	800b9fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b94c:	4b7c      	ldr	r3, [pc, #496]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b94e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b952:	f003 0302 	and.w	r3, r3, #2
 800b956:	2b02      	cmp	r3, #2
 800b958:	d103      	bne.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800b95a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b95e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b960:	e04d      	b.n	800b9fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b962:	2300      	movs	r3, #0
 800b964:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b966:	e04a      	b.n	800b9fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b968:	4b75      	ldr	r3, [pc, #468]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b96a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b96e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b972:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b976:	d103      	bne.n	800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800b978:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b97c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b97e:	e03e      	b.n	800b9fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b980:	2300      	movs	r3, #0
 800b982:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b984:	e03b      	b.n	800b9fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b986:	4b6e      	ldr	r3, [pc, #440]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b988:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b98c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b990:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b992:	4b6b      	ldr	r3, [pc, #428]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f003 0302 	and.w	r3, r3, #2
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d10c      	bne.n	800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800b99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d109      	bne.n	800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b9a4:	4b66      	ldr	r3, [pc, #408]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	08db      	lsrs	r3, r3, #3
 800b9aa:	f003 0303 	and.w	r3, r3, #3
 800b9ae:	4a65      	ldr	r2, [pc, #404]	@ (800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b9b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b9b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9b6:	e01e      	b.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9b8:	4b61      	ldr	r3, [pc, #388]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b9c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9c4:	d106      	bne.n	800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800b9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9cc:	d102      	bne.n	800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b9ce:	4b5e      	ldr	r3, [pc, #376]	@ (800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800b9d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9d2:	e010      	b.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b9d4:	4b5a      	ldr	r3, [pc, #360]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9e0:	d106      	bne.n	800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800b9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9e8:	d102      	bne.n	800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b9ea:	4b58      	ldr	r3, [pc, #352]	@ (800bb4c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b9ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9ee:	e002      	b.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b9f4:	e003      	b.n	800b9fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800b9f6:	e002      	b.n	800b9fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b9fc:	bf00      	nop
          }
        }
        break;
 800b9fe:	f000 bc28 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ba02:	4b4f      	ldr	r3, [pc, #316]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ba04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ba08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba0c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800ba0e:	4b4c      	ldr	r3, [pc, #304]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba1a:	d106      	bne.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800ba1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d103      	bne.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800ba22:	4b4a      	ldr	r3, [pc, #296]	@ (800bb4c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800ba24:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800ba26:	f000 bc14 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba30:	d108      	bne.n	800ba44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba32:	f107 0320 	add.w	r3, r7, #32
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fd fc7c 	bl	8009334 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba40:	f000 bc07 	b.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800ba44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba4a:	d107      	bne.n	800ba5c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba4c:	f107 0314 	add.w	r3, r7, #20
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fd fddb 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba5a:	e3fa      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba60:	e3f7      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800ba62:	4b37      	ldr	r3, [pc, #220]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ba64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba68:	f003 0307 	and.w	r3, r3, #7
 800ba6c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba70:	2b04      	cmp	r3, #4
 800ba72:	d861      	bhi.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800ba74:	a201      	add	r2, pc, #4	@ (adr r2, 800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800ba76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba7a:	bf00      	nop
 800ba7c:	0800ba91 	.word	0x0800ba91
 800ba80:	0800baa1 	.word	0x0800baa1
 800ba84:	0800bab1 	.word	0x0800bab1
 800ba88:	0800bac1 	.word	0x0800bac1
 800ba8c:	0800bac7 	.word	0x0800bac7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba90:	f107 0320 	add.w	r3, r7, #32
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fd fc4d 	bl	8009334 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba9e:	e04e      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800baa0:	f107 0314 	add.w	r3, r7, #20
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fd fdb1 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800baae:	e046      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bab0:	f107 0308 	add.w	r3, r7, #8
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7fd ff15 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800babe:	e03e      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800bac0:	4b23      	ldr	r3, [pc, #140]	@ (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800bac2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bac4:	e03b      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bac6:	4b1e      	ldr	r3, [pc, #120]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bacc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bad0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bad2:	4b1b      	ldr	r3, [pc, #108]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f003 0302 	and.w	r3, r3, #2
 800bada:	2b02      	cmp	r3, #2
 800badc:	d10c      	bne.n	800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800bade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d109      	bne.n	800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bae4:	4b16      	ldr	r3, [pc, #88]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	08db      	lsrs	r3, r3, #3
 800baea:	f003 0303 	and.w	r3, r3, #3
 800baee:	4a15      	ldr	r2, [pc, #84]	@ (800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800baf0:	fa22 f303 	lsr.w	r3, r2, r3
 800baf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800baf6:	e01e      	b.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800baf8:	4b11      	ldr	r3, [pc, #68]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bb00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb04:	d106      	bne.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800bb06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb0c:	d102      	bne.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bb0e:	4b0e      	ldr	r3, [pc, #56]	@ (800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800bb10:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb12:	e010      	b.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb14:	4b0a      	ldr	r3, [pc, #40]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb20:	d106      	bne.n	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800bb22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb28:	d102      	bne.n	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bb2a:	4b08      	ldr	r3, [pc, #32]	@ (800bb4c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800bb2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb2e:	e002      	b.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bb30:	2300      	movs	r3, #0
 800bb32:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bb34:	e003      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800bb36:	e002      	b.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bb3c:	bf00      	nop
          }
        }
        break;
 800bb3e:	e388      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bb40:	44020c00 	.word	0x44020c00
 800bb44:	03d09000 	.word	0x03d09000
 800bb48:	003d0900 	.word	0x003d0900
 800bb4c:	007a1200 	.word	0x007a1200
 800bb50:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800bb54:	4ba9      	ldr	r3, [pc, #676]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bb56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb62:	2b20      	cmp	r3, #32
 800bb64:	f200 809a 	bhi.w	800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800bb68:	a201      	add	r2, pc, #4	@ (adr r2, 800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800bb6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6e:	bf00      	nop
 800bb70:	0800bbf5 	.word	0x0800bbf5
 800bb74:	0800bc9d 	.word	0x0800bc9d
 800bb78:	0800bc9d 	.word	0x0800bc9d
 800bb7c:	0800bc9d 	.word	0x0800bc9d
 800bb80:	0800bc9d 	.word	0x0800bc9d
 800bb84:	0800bc9d 	.word	0x0800bc9d
 800bb88:	0800bc9d 	.word	0x0800bc9d
 800bb8c:	0800bc9d 	.word	0x0800bc9d
 800bb90:	0800bc05 	.word	0x0800bc05
 800bb94:	0800bc9d 	.word	0x0800bc9d
 800bb98:	0800bc9d 	.word	0x0800bc9d
 800bb9c:	0800bc9d 	.word	0x0800bc9d
 800bba0:	0800bc9d 	.word	0x0800bc9d
 800bba4:	0800bc9d 	.word	0x0800bc9d
 800bba8:	0800bc9d 	.word	0x0800bc9d
 800bbac:	0800bc9d 	.word	0x0800bc9d
 800bbb0:	0800bc15 	.word	0x0800bc15
 800bbb4:	0800bc9d 	.word	0x0800bc9d
 800bbb8:	0800bc9d 	.word	0x0800bc9d
 800bbbc:	0800bc9d 	.word	0x0800bc9d
 800bbc0:	0800bc9d 	.word	0x0800bc9d
 800bbc4:	0800bc9d 	.word	0x0800bc9d
 800bbc8:	0800bc9d 	.word	0x0800bc9d
 800bbcc:	0800bc9d 	.word	0x0800bc9d
 800bbd0:	0800bc25 	.word	0x0800bc25
 800bbd4:	0800bc9d 	.word	0x0800bc9d
 800bbd8:	0800bc9d 	.word	0x0800bc9d
 800bbdc:	0800bc9d 	.word	0x0800bc9d
 800bbe0:	0800bc9d 	.word	0x0800bc9d
 800bbe4:	0800bc9d 	.word	0x0800bc9d
 800bbe8:	0800bc9d 	.word	0x0800bc9d
 800bbec:	0800bc9d 	.word	0x0800bc9d
 800bbf0:	0800bc2b 	.word	0x0800bc2b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbf4:	f107 0320 	add.w	r3, r7, #32
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7fd fb9b 	bl	8009334 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bc02:	e04e      	b.n	800bca2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc04:	f107 0314 	add.w	r3, r7, #20
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7fd fcff 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bc12:	e046      	b.n	800bca2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc14:	f107 0308 	add.w	r3, r7, #8
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7fd fe63 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bc22:	e03e      	b.n	800bca2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800bc24:	4b76      	ldr	r3, [pc, #472]	@ (800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800bc26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bc28:	e03b      	b.n	800bca2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc2a:	4b74      	ldr	r3, [pc, #464]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bc2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bc30:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bc34:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc36:	4b71      	ldr	r3, [pc, #452]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f003 0302 	and.w	r3, r3, #2
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	d10c      	bne.n	800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800bc42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d109      	bne.n	800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bc48:	4b6c      	ldr	r3, [pc, #432]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	08db      	lsrs	r3, r3, #3
 800bc4e:	f003 0303 	and.w	r3, r3, #3
 800bc52:	4a6c      	ldr	r2, [pc, #432]	@ (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800bc54:	fa22 f303 	lsr.w	r3, r2, r3
 800bc58:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc5a:	e01e      	b.n	800bc9a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc5c:	4b67      	ldr	r3, [pc, #412]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc68:	d106      	bne.n	800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800bc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc70:	d102      	bne.n	800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bc72:	4b65      	ldr	r3, [pc, #404]	@ (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800bc74:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc76:	e010      	b.n	800bc9a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc78:	4b60      	ldr	r3, [pc, #384]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc84:	d106      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800bc86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc8c:	d102      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bc8e:	4b5f      	ldr	r3, [pc, #380]	@ (800be0c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800bc90:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc92:	e002      	b.n	800bc9a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bc94:	2300      	movs	r3, #0
 800bc96:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bc98:	e003      	b.n	800bca2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800bc9a:	e002      	b.n	800bca2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bca0:	bf00      	nop
          }
        }
        break;
 800bca2:	e2d6      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800bca4:	4b55      	ldr	r3, [pc, #340]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcaa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800bcae:	633b      	str	r3, [r7, #48]	@ 0x30
 800bcb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcb6:	d031      	beq.n	800bd1c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcbe:	d866      	bhi.n	800bd8e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc2:	2bc0      	cmp	r3, #192	@ 0xc0
 800bcc4:	d027      	beq.n	800bd16 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800bcc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc8:	2bc0      	cmp	r3, #192	@ 0xc0
 800bcca:	d860      	bhi.n	800bd8e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800bccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcce:	2b80      	cmp	r3, #128	@ 0x80
 800bcd0:	d019      	beq.n	800bd06 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd4:	2b80      	cmp	r3, #128	@ 0x80
 800bcd6:	d85a      	bhi.n	800bd8e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800bcd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d003      	beq.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800bcde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce0:	2b40      	cmp	r3, #64	@ 0x40
 800bce2:	d008      	beq.n	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800bce4:	e053      	b.n	800bd8e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bce6:	f107 0320 	add.w	r3, r7, #32
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fd fb22 	bl	8009334 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bcf4:	e04e      	b.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcf6:	f107 0314 	add.w	r3, r7, #20
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7fd fc86 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bd04:	e046      	b.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd06:	f107 0308 	add.w	r3, r7, #8
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fd fdea 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bd14:	e03e      	b.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800bd16:	4b3a      	ldr	r3, [pc, #232]	@ (800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800bd18:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bd1a:	e03b      	b.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd1c:	4b37      	ldr	r3, [pc, #220]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bd22:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bd26:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd28:	4b34      	ldr	r3, [pc, #208]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f003 0302 	and.w	r3, r3, #2
 800bd30:	2b02      	cmp	r3, #2
 800bd32:	d10c      	bne.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800bd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d109      	bne.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bd3a:	4b30      	ldr	r3, [pc, #192]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	08db      	lsrs	r3, r3, #3
 800bd40:	f003 0303 	and.w	r3, r3, #3
 800bd44:	4a2f      	ldr	r2, [pc, #188]	@ (800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800bd46:	fa22 f303 	lsr.w	r3, r2, r3
 800bd4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd4c:	e01e      	b.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd4e:	4b2b      	ldr	r3, [pc, #172]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bd56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd5a:	d106      	bne.n	800bd6a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800bd5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd62:	d102      	bne.n	800bd6a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bd64:	4b28      	ldr	r3, [pc, #160]	@ (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800bd66:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd68:	e010      	b.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd6a:	4b24      	ldr	r3, [pc, #144]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd76:	d106      	bne.n	800bd86 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800bd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd7e:	d102      	bne.n	800bd86 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bd80:	4b22      	ldr	r3, [pc, #136]	@ (800be0c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800bd82:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd84:	e002      	b.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bd86:	2300      	movs	r3, #0
 800bd88:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bd8a:	e003      	b.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800bd8c:	e002      	b.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bd92:	bf00      	nop
          }
        }
        break;
 800bd94:	e25d      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800bd96:	4b19      	ldr	r3, [pc, #100]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bd9c:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800bda0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800bda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d103      	bne.n	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800bda8:	f7fb fb0e 	bl	80073c8 <HAL_RCC_GetPCLK2Freq>
 800bdac:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800bdae:	e250      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800bdb0:	4b12      	ldr	r3, [pc, #72]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bdb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bdbc:	d10b      	bne.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdc4:	d107      	bne.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdc6:	f107 0314 	add.w	r3, r7, #20
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fd fc1e 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bdd0:	69bb      	ldr	r3, [r7, #24]
 800bdd2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdd4:	e04f      	b.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800bdd6:	4b09      	ldr	r3, [pc, #36]	@ (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bdde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bde2:	d115      	bne.n	800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800bde4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bdea:	d111      	bne.n	800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdec:	f107 0308 	add.w	r3, r7, #8
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7fd fd77 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdfa:	e03c      	b.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800bdfc:	44020c00 	.word	0x44020c00
 800be00:	00bb8000 	.word	0x00bb8000
 800be04:	03d09000 	.word	0x03d09000
 800be08:	003d0900 	.word	0x003d0900
 800be0c:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800be10:	4b94      	ldr	r3, [pc, #592]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f003 0302 	and.w	r3, r3, #2
 800be18:	2b02      	cmp	r3, #2
 800be1a:	d10d      	bne.n	800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800be1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800be22:	d109      	bne.n	800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800be24:	4b8f      	ldr	r3, [pc, #572]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	08db      	lsrs	r3, r3, #3
 800be2a:	f003 0303 	and.w	r3, r3, #3
 800be2e:	4a8e      	ldr	r2, [pc, #568]	@ (800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800be30:	fa22 f303 	lsr.w	r3, r2, r3
 800be34:	637b      	str	r3, [r7, #52]	@ 0x34
 800be36:	e01e      	b.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800be38:	4b8a      	ldr	r3, [pc, #552]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be44:	d106      	bne.n	800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800be46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800be4c:	d102      	bne.n	800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800be4e:	4b87      	ldr	r3, [pc, #540]	@ (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800be50:	637b      	str	r3, [r7, #52]	@ 0x34
 800be52:	e010      	b.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800be54:	4b83      	ldr	r3, [pc, #524]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be60:	d106      	bne.n	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800be62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be64:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800be68:	d102      	bne.n	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800be6a:	4b81      	ldr	r3, [pc, #516]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800be6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800be6e:	e002      	b.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800be70:	2300      	movs	r3, #0
 800be72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800be74:	e1ed      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800be76:	e1ec      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800be78:	4b7a      	ldr	r3, [pc, #488]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800be7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800be7e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800be82:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800be84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be86:	2b00      	cmp	r3, #0
 800be88:	d103      	bne.n	800be92 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800be8a:	f7fb fab3 	bl	80073f4 <HAL_RCC_GetPCLK3Freq>
 800be8e:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800be90:	e1df      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800be92:	4b74      	ldr	r3, [pc, #464]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be9e:	d10b      	bne.n	800beb8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800bea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bea6:	d107      	bne.n	800beb8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bea8:	f107 0314 	add.w	r3, r7, #20
 800beac:	4618      	mov	r0, r3
 800beae:	f7fd fbad 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800beb6:	e045      	b.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800beb8:	4b6a      	ldr	r3, [pc, #424]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bec0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bec4:	d10b      	bne.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800bec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800becc:	d107      	bne.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bece:	f107 0308 	add.w	r3, r7, #8
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fd fd06 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	637b      	str	r3, [r7, #52]	@ 0x34
 800bedc:	e032      	b.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800bede:	4b61      	ldr	r3, [pc, #388]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f003 0302 	and.w	r3, r3, #2
 800bee6:	2b02      	cmp	r3, #2
 800bee8:	d10d      	bne.n	800bf06 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800beea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bef0:	d109      	bne.n	800bf06 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bef2:	4b5c      	ldr	r3, [pc, #368]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	08db      	lsrs	r3, r3, #3
 800bef8:	f003 0303 	and.w	r3, r3, #3
 800befc:	4a5a      	ldr	r2, [pc, #360]	@ (800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800befe:	fa22 f303 	lsr.w	r3, r2, r3
 800bf02:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf04:	e01e      	b.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800bf06:	4b57      	ldr	r3, [pc, #348]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bf0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf12:	d106      	bne.n	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800bf14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf1a:	d102      	bne.n	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800bf1c:	4b53      	ldr	r3, [pc, #332]	@ (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800bf1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf20:	e010      	b.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800bf22:	4b50      	ldr	r3, [pc, #320]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf2e:	d106      	bne.n	800bf3e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800bf30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf32:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800bf36:	d102      	bne.n	800bf3e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800bf38:	4b4d      	ldr	r3, [pc, #308]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800bf3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf3c:	e002      	b.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf42:	e186      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bf44:	e185      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bf46:	4b47      	ldr	r3, [pc, #284]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bf48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf4c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800bf50:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800bf52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d103      	bne.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800bf58:	f7fb fa36 	bl	80073c8 <HAL_RCC_GetPCLK2Freq>
 800bf5c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800bf5e:	e178      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800bf60:	4b40      	ldr	r3, [pc, #256]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf6c:	d10b      	bne.n	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf74:	d107      	bne.n	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf76:	f107 0314 	add.w	r3, r7, #20
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fd fb46 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf84:	e045      	b.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800bf86:	4b37      	ldr	r3, [pc, #220]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf92:	d10b      	bne.n	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800bf94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf9a:	d107      	bne.n	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf9c:	f107 0308 	add.w	r3, r7, #8
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7fd fc9f 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfaa:	e032      	b.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800bfac:	4b2d      	ldr	r3, [pc, #180]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f003 0302 	and.w	r3, r3, #2
 800bfb4:	2b02      	cmp	r3, #2
 800bfb6:	d10d      	bne.n	800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800bfb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfba:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800bfbe:	d109      	bne.n	800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bfc0:	4b28      	ldr	r3, [pc, #160]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	08db      	lsrs	r3, r3, #3
 800bfc6:	f003 0303 	and.w	r3, r3, #3
 800bfca:	4a27      	ldr	r2, [pc, #156]	@ (800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800bfcc:	fa22 f303 	lsr.w	r3, r2, r3
 800bfd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfd2:	e01e      	b.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800bfd4:	4b23      	ldr	r3, [pc, #140]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bfdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfe0:	d106      	bne.n	800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800bfe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bfe8:	d102      	bne.n	800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800bfea:	4b20      	ldr	r3, [pc, #128]	@ (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800bfec:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfee:	e010      	b.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800bff0:	4b1c      	ldr	r3, [pc, #112]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bff8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bffc:	d106      	bne.n	800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800bffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c000:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800c004:	d102      	bne.n	800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800c006:	4b1a      	ldr	r3, [pc, #104]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800c008:	637b      	str	r3, [r7, #52]	@ 0x34
 800c00a:	e002      	b.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800c00c:	2300      	movs	r3, #0
 800c00e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c010:	e11f      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c012:	e11e      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c014:	4b13      	ldr	r3, [pc, #76]	@ (800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c016:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c01a:	f003 0303 	and.w	r3, r3, #3
 800c01e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c022:	2b03      	cmp	r3, #3
 800c024:	d85f      	bhi.n	800c0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800c026:	a201      	add	r2, pc, #4	@ (adr r2, 800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800c028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c02c:	0800c03d 	.word	0x0800c03d
 800c030:	0800c045 	.word	0x0800c045
 800c034:	0800c055 	.word	0x0800c055
 800c038:	0800c075 	.word	0x0800c075

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800c03c:	f7fb f992 	bl	8007364 <HAL_RCC_GetHCLKFreq>
 800c040:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800c042:	e053      	b.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c044:	f107 0320 	add.w	r3, r7, #32
 800c048:	4618      	mov	r0, r3
 800c04a:	f7fd f973 	bl	8009334 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c050:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c052:	e04b      	b.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c054:	f107 0314 	add.w	r3, r7, #20
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fd fad7 	bl	800960c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c062:	e043      	b.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800c064:	44020c00 	.word	0x44020c00
 800c068:	03d09000 	.word	0x03d09000
 800c06c:	003d0900 	.word	0x003d0900
 800c070:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c074:	4b79      	ldr	r3, [pc, #484]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c07a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c07e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c080:	4b76      	ldr	r3, [pc, #472]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f003 0302 	and.w	r3, r3, #2
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d10c      	bne.n	800c0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800c08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d109      	bne.n	800c0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c092:	4b72      	ldr	r3, [pc, #456]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	08db      	lsrs	r3, r3, #3
 800c098:	f003 0303 	and.w	r3, r3, #3
 800c09c:	4a70      	ldr	r2, [pc, #448]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800c09e:	fa22 f303 	lsr.w	r3, r2, r3
 800c0a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0a4:	e01e      	b.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0a6:	4b6d      	ldr	r3, [pc, #436]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c0ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0b2:	d106      	bne.n	800c0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800c0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0ba:	d102      	bne.n	800c0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c0bc:	4b69      	ldr	r3, [pc, #420]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800c0be:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0c0:	e010      	b.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0c2:	4b66      	ldr	r3, [pc, #408]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c0ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0ce:	d106      	bne.n	800c0de <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800c0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c0d6:	d102      	bne.n	800c0de <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c0d8:	4b63      	ldr	r3, [pc, #396]	@ (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800c0da:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0dc:	e002      	b.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800c0e2:	e003      	b.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800c0e4:	e002      	b.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c0ea:	bf00      	nop
          }
        }
        break;
 800c0ec:	e0b1      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800c0ee:	4b5b      	ldr	r3, [pc, #364]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c0f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c0f4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c0f8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800c0fa:	4b58      	ldr	r3, [pc, #352]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c0fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c100:	f003 0302 	and.w	r3, r3, #2
 800c104:	2b02      	cmp	r3, #2
 800c106:	d106      	bne.n	800c116 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800c108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d103      	bne.n	800c116 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800c10e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c112:	637b      	str	r3, [r7, #52]	@ 0x34
 800c114:	e01f      	b.n	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800c116:	4b51      	ldr	r3, [pc, #324]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c11c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c120:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c124:	d106      	bne.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800c126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c128:	2b40      	cmp	r3, #64	@ 0x40
 800c12a:	d103      	bne.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800c12c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c130:	637b      	str	r3, [r7, #52]	@ 0x34
 800c132:	e010      	b.n	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800c134:	4b49      	ldr	r3, [pc, #292]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c13c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c140:	d106      	bne.n	800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800c142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c144:	2b80      	cmp	r3, #128	@ 0x80
 800c146:	d103      	bne.n	800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800c148:	f248 0312 	movw	r3, #32786	@ 0x8012
 800c14c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c14e:	e002      	b.n	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800c150:	2300      	movs	r3, #0
 800c152:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800c154:	e07d      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c156:	e07c      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c158:	4b40      	ldr	r3, [pc, #256]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c15a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c15e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c162:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c164:	4b3d      	ldr	r3, [pc, #244]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c16c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c170:	d105      	bne.n	800c17e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800c172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c174:	2b00      	cmp	r3, #0
 800c176:	d102      	bne.n	800c17e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800c178:	4b3c      	ldr	r3, [pc, #240]	@ (800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800c17a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c17c:	e031      	b.n	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800c17e:	4b37      	ldr	r3, [pc, #220]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c186:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c18a:	d10a      	bne.n	800c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800c18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c18e:	2b10      	cmp	r3, #16
 800c190:	d107      	bne.n	800c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c192:	f107 0320 	add.w	r3, r7, #32
 800c196:	4618      	mov	r0, r3
 800c198:	f7fd f8cc 	bl	8009334 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c19e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1a0:	e01f      	b.n	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800c1a2:	4b2e      	ldr	r3, [pc, #184]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c1a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c1a8:	f003 0302 	and.w	r3, r3, #2
 800c1ac:	2b02      	cmp	r3, #2
 800c1ae:	d106      	bne.n	800c1be <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800c1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b2:	2b20      	cmp	r3, #32
 800c1b4:	d103      	bne.n	800c1be <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800c1b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c1ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1bc:	e011      	b.n	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800c1be:	4b27      	ldr	r3, [pc, #156]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c1c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c1c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c1c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1cc:	d106      	bne.n	800c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800c1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d0:	2b30      	cmp	r3, #48	@ 0x30
 800c1d2:	d103      	bne.n	800c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800c1d4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c1d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1da:	e002      	b.n	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800c1e0:	e037      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c1e2:	e036      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800c1e4:	4b1d      	ldr	r3, [pc, #116]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c1e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c1ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c1ee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1f2:	2b10      	cmp	r3, #16
 800c1f4:	d107      	bne.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1f6:	f107 0320 	add.w	r3, r7, #32
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7fd f89a 	bl	8009334 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c202:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c204:	e025      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800c206:	4b15      	ldr	r3, [pc, #84]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c20e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c212:	d10a      	bne.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800c214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c216:	2b20      	cmp	r3, #32
 800c218:	d107      	bne.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c21a:	f107 0308 	add.w	r3, r7, #8
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fd fb60 	bl	80098e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	637b      	str	r3, [r7, #52]	@ 0x34
 800c228:	e00f      	b.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800c22a:	4b0c      	ldr	r3, [pc, #48]	@ (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c236:	d105      	bne.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800c238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c23a:	2b30      	cmp	r3, #48	@ 0x30
 800c23c:	d102      	bne.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800c23e:	4b0b      	ldr	r3, [pc, #44]	@ (800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800c240:	637b      	str	r3, [r7, #52]	@ 0x34
 800c242:	e002      	b.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800c244:	2300      	movs	r3, #0
 800c246:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800c248:	e003      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c24a:	e002      	b.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800c24c:	2300      	movs	r3, #0
 800c24e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c250:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800c252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c254:	4618      	mov	r0, r3
 800c256:	373c      	adds	r7, #60	@ 0x3c
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd90      	pop	{r4, r7, pc}
 800c25c:	44020c00 	.word	0x44020c00
 800c260:	03d09000 	.word	0x03d09000
 800c264:	003d0900 	.word	0x003d0900
 800c268:	007a1200 	.word	0x007a1200
 800c26c:	02dc6c00 	.word	0x02dc6c00

0800c270 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800c278:	4b48      	ldr	r3, [pc, #288]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a47      	ldr	r2, [pc, #284]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c27e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c282:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c284:	f7f6 ff86 	bl	8003194 <HAL_GetTick>
 800c288:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c28a:	e008      	b.n	800c29e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c28c:	f7f6 ff82 	bl	8003194 <HAL_GetTick>
 800c290:	4602      	mov	r2, r0
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	2b02      	cmp	r3, #2
 800c298:	d901      	bls.n	800c29e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c29a:	2303      	movs	r3, #3
 800c29c:	e07a      	b.n	800c394 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c29e:	4b3f      	ldr	r3, [pc, #252]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d1f0      	bne.n	800c28c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c2aa:	4b3c      	ldr	r3, [pc, #240]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c2b2:	f023 0303 	bic.w	r3, r3, #3
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	6811      	ldr	r1, [r2, #0]
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	6852      	ldr	r2, [r2, #4]
 800c2be:	0212      	lsls	r2, r2, #8
 800c2c0:	430a      	orrs	r2, r1
 800c2c2:	4936      	ldr	r1, [pc, #216]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	3b01      	subs	r3, #1
 800c2ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	025b      	lsls	r3, r3, #9
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	431a      	orrs	r2, r3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	041b      	lsls	r3, r3, #16
 800c2e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c2ea:	431a      	orrs	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	695b      	ldr	r3, [r3, #20]
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	061b      	lsls	r3, r3, #24
 800c2f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c2f8:	4928      	ldr	r1, [pc, #160]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c2fe:	4b27      	ldr	r3, [pc, #156]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c302:	f023 020c 	bic.w	r2, r3, #12
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	699b      	ldr	r3, [r3, #24]
 800c30a:	4924      	ldr	r1, [pc, #144]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c30c:	4313      	orrs	r3, r2
 800c30e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800c310:	4b22      	ldr	r3, [pc, #136]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c314:	f023 0220 	bic.w	r2, r3, #32
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	69db      	ldr	r3, [r3, #28]
 800c31c:	491f      	ldr	r1, [pc, #124]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c31e:	4313      	orrs	r3, r2
 800c320:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c322:	4b1e      	ldr	r3, [pc, #120]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c32a:	491c      	ldr	r1, [pc, #112]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c32c:	4313      	orrs	r3, r2
 800c32e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800c330:	4b1a      	ldr	r3, [pc, #104]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c334:	4a19      	ldr	r2, [pc, #100]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c336:	f023 0310 	bic.w	r3, r3, #16
 800c33a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800c33c:	4b17      	ldr	r3, [pc, #92]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c33e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c340:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c344:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	6a12      	ldr	r2, [r2, #32]
 800c34c:	00d2      	lsls	r2, r2, #3
 800c34e:	4913      	ldr	r1, [pc, #76]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c350:	4313      	orrs	r3, r2
 800c352:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800c354:	4b11      	ldr	r3, [pc, #68]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c358:	4a10      	ldr	r2, [pc, #64]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c35a:	f043 0310 	orr.w	r3, r3, #16
 800c35e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800c360:	4b0e      	ldr	r3, [pc, #56]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a0d      	ldr	r2, [pc, #52]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c366:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c36a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c36c:	f7f6 ff12 	bl	8003194 <HAL_GetTick>
 800c370:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c372:	e008      	b.n	800c386 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c374:	f7f6 ff0e 	bl	8003194 <HAL_GetTick>
 800c378:	4602      	mov	r2, r0
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	1ad3      	subs	r3, r2, r3
 800c37e:	2b02      	cmp	r3, #2
 800c380:	d901      	bls.n	800c386 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800c382:	2303      	movs	r3, #3
 800c384:	e006      	b.n	800c394 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c386:	4b05      	ldr	r3, [pc, #20]	@ (800c39c <RCCEx_PLL2_Config+0x12c>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d0f0      	beq.n	800c374 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800c392:	2300      	movs	r3, #0

}
 800c394:	4618      	mov	r0, r3
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	44020c00 	.word	0x44020c00

0800c3a0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800c3a8:	4b48      	ldr	r3, [pc, #288]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a47      	ldr	r2, [pc, #284]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c3ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c3b2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c3b4:	f7f6 feee 	bl	8003194 <HAL_GetTick>
 800c3b8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c3ba:	e008      	b.n	800c3ce <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c3bc:	f7f6 feea 	bl	8003194 <HAL_GetTick>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	1ad3      	subs	r3, r2, r3
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d901      	bls.n	800c3ce <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	e07a      	b.n	800c4c4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c3ce:	4b3f      	ldr	r3, [pc, #252]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1f0      	bne.n	800c3bc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c3da:	4b3c      	ldr	r3, [pc, #240]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c3dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c3e2:	f023 0303 	bic.w	r3, r3, #3
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	6811      	ldr	r1, [r2, #0]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	6852      	ldr	r2, [r2, #4]
 800c3ee:	0212      	lsls	r2, r2, #8
 800c3f0:	430a      	orrs	r2, r1
 800c3f2:	4936      	ldr	r1, [pc, #216]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	630b      	str	r3, [r1, #48]	@ 0x30
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	3b01      	subs	r3, #1
 800c408:	025b      	lsls	r3, r3, #9
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	431a      	orrs	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	3b01      	subs	r3, #1
 800c414:	041b      	lsls	r3, r3, #16
 800c416:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c41a:	431a      	orrs	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	695b      	ldr	r3, [r3, #20]
 800c420:	3b01      	subs	r3, #1
 800c422:	061b      	lsls	r3, r3, #24
 800c424:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c428:	4928      	ldr	r1, [pc, #160]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c42a:	4313      	orrs	r3, r2
 800c42c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c42e:	4b27      	ldr	r3, [pc, #156]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c432:	f023 020c 	bic.w	r2, r3, #12
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	699b      	ldr	r3, [r3, #24]
 800c43a:	4924      	ldr	r1, [pc, #144]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c43c:	4313      	orrs	r3, r2
 800c43e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800c440:	4b22      	ldr	r3, [pc, #136]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c444:	f023 0220 	bic.w	r2, r3, #32
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	69db      	ldr	r3, [r3, #28]
 800c44c:	491f      	ldr	r1, [pc, #124]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c44e:	4313      	orrs	r3, r2
 800c450:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c452:	4b1e      	ldr	r3, [pc, #120]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c454:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c45a:	491c      	ldr	r1, [pc, #112]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c45c:	4313      	orrs	r3, r2
 800c45e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800c460:	4b1a      	ldr	r3, [pc, #104]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c464:	4a19      	ldr	r2, [pc, #100]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c466:	f023 0310 	bic.w	r3, r3, #16
 800c46a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800c46c:	4b17      	ldr	r3, [pc, #92]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c46e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c470:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c474:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	6a12      	ldr	r2, [r2, #32]
 800c47c:	00d2      	lsls	r2, r2, #3
 800c47e:	4913      	ldr	r1, [pc, #76]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c480:	4313      	orrs	r3, r2
 800c482:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800c484:	4b11      	ldr	r3, [pc, #68]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c488:	4a10      	ldr	r2, [pc, #64]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c48a:	f043 0310 	orr.w	r3, r3, #16
 800c48e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800c490:	4b0e      	ldr	r3, [pc, #56]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a0d      	ldr	r2, [pc, #52]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c49a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c49c:	f7f6 fe7a 	bl	8003194 <HAL_GetTick>
 800c4a0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c4a2:	e008      	b.n	800c4b6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c4a4:	f7f6 fe76 	bl	8003194 <HAL_GetTick>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	d901      	bls.n	800c4b6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	e006      	b.n	800c4c4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c4b6:	4b05      	ldr	r3, [pc, #20]	@ (800c4cc <RCCEx_PLL3_Config+0x12c>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d0f0      	beq.n	800c4a4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800c4c2:	2300      	movs	r3, #0
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3710      	adds	r7, #16
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	44020c00 	.word	0x44020c00

0800c4d0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d101      	bne.n	800c4e2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e08c      	b.n	800c5fc <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	7a5b      	ldrb	r3, [r3, #9]
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d105      	bne.n	800c4f8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7f5 fef2 	bl	80022dc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2202      	movs	r2, #2
 800c4fc:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f022 0204 	bic.w	r2, r2, #4
 800c50c:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6859      	ldr	r1, [r3, #4]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	4b3b      	ldr	r3, [pc, #236]	@ (800c604 <HAL_RNG_Init+0x134>)
 800c518:	430b      	orrs	r3, r1
 800c51a:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800c524:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a37      	ldr	r2, [pc, #220]	@ (800c608 <HAL_RNG_Init+0x138>)
 800c52c:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800c53c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c53e:	f7f6 fe29 	bl	8003194 <HAL_GetTick>
 800c542:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800c544:	e016      	b.n	800c574 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c546:	f7f6 fe25 	bl	8003194 <HAL_GetTick>
 800c54a:	4602      	mov	r2, r0
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	1ad3      	subs	r3, r2, r3
 800c550:	2b04      	cmp	r3, #4
 800c552:	d90f      	bls.n	800c574 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c55e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c562:	d107      	bne.n	800c574 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2202      	movs	r2, #2
 800c56e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800c570:	2301      	movs	r3, #1
 800c572:	e043      	b.n	800c5fc <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c57e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c582:	d0e0      	beq.n	800c546 <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f042 0204 	orr.w	r2, r2, #4
 800c592:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c59e:	2b40      	cmp	r3, #64	@ 0x40
 800c5a0:	d104      	bne.n	800c5ac <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2204      	movs	r2, #4
 800c5a6:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e027      	b.n	800c5fc <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800c5ac:	f7f6 fdf2 	bl	8003194 <HAL_GetTick>
 800c5b0:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800c5b2:	e015      	b.n	800c5e0 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c5b4:	f7f6 fdee 	bl	8003194 <HAL_GetTick>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	1ad3      	subs	r3, r2, r3
 800c5be:	2b04      	cmp	r3, #4
 800c5c0:	d90e      	bls.n	800c5e0 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	f003 0301 	and.w	r3, r3, #1
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d007      	beq.n	800c5e0 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2204      	movs	r2, #4
 800c5d4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2202      	movs	r2, #2
 800c5da:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e00d      	b.n	800c5fc <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	f003 0301 	and.w	r3, r3, #1
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d1e2      	bne.n	800c5b4 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}
 800c604:	40f00e00 	.word	0x40f00e00
 800c608:	0003af66 	.word	0x0003af66

0800c60c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c616:	2300      	movs	r3, #0
 800c618:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	7a1b      	ldrb	r3, [r3, #8]
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d101      	bne.n	800c626 <HAL_RNG_GenerateRandomNumber+0x1a>
 800c622:	2302      	movs	r3, #2
 800c624:	e068      	b.n	800c6f8 <HAL_RNG_GenerateRandomNumber+0xec>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2201      	movs	r2, #1
 800c62a:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7a5b      	ldrb	r3, [r3, #9]
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b01      	cmp	r3, #1
 800c634:	d157      	bne.n	800c6e6 <HAL_RNG_GenerateRandomNumber+0xda>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2202      	movs	r2, #2
 800c63a:	725a      	strb	r2, [r3, #9]
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c646:	2b40      	cmp	r3, #64	@ 0x40
 800c648:	d10f      	bne.n	800c66a <HAL_RNG_GenerateRandomNumber+0x5e>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2208      	movs	r2, #8
 800c64e:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 f85f 	bl	800c714 <RNG_RecoverSeedError>
 800c656:	4603      	mov	r3, r0
 800c658:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800c65a:	7bfb      	ldrb	r3, [r7, #15]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d104      	bne.n	800c66a <HAL_RNG_GenerateRandomNumber+0x5e>
      {
        /* Update the error code */
        hrng->ErrorCode = HAL_RNG_ERROR_RECOVERSEED;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2220      	movs	r2, #32
 800c664:	60da      	str	r2, [r3, #12]
        return status;
 800c666:	7bfb      	ldrb	r3, [r7, #15]
 800c668:	e046      	b.n	800c6f8 <HAL_RNG_GenerateRandomNumber+0xec>
      }
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800c66a:	f7f6 fd93 	bl	8003194 <HAL_GetTick>
 800c66e:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c670:	e018      	b.n	800c6a4 <HAL_RNG_GenerateRandomNumber+0x98>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c672:	f7f6 fd8f 	bl	8003194 <HAL_GetTick>
 800c676:	4602      	mov	r2, r0
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	1ad3      	subs	r3, r2, r3
 800c67c:	2b04      	cmp	r3, #4
 800c67e:	d911      	bls.n	800c6a4 <HAL_RNG_GenerateRandomNumber+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	f003 0301 	and.w	r3, r3, #1
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d00a      	beq.n	800c6a4 <HAL_RNG_GenerateRandomNumber+0x98>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2201      	movs	r2, #1
 800c692:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2202      	movs	r2, #2
 800c698:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	e029      	b.n	800c6f8 <HAL_RNG_GenerateRandomNumber+0xec>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	f003 0301 	and.w	r3, r3, #1
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d1df      	bne.n	800c672 <HAL_RNG_GenerateRandomNumber+0x66>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	689a      	ldr	r2, [r3, #8]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	611a      	str	r2, [r3, #16]
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6c6:	2b40      	cmp	r3, #64	@ 0x40
 800c6c8:	d105      	bne.n	800c6d6 <HAL_RNG_GenerateRandomNumber+0xca>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2208      	movs	r2, #8
 800c6ce:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	73fb      	strb	r3, [r7, #15]
 800c6d4:	e003      	b.n	800c6de <HAL_RNG_GenerateRandomNumber+0xd2>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	691a      	ldr	r2, [r3, #16]
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	601a      	str	r2, [r3, #0]
    }
    hrng->State = HAL_RNG_STATE_READY;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	725a      	strb	r2, [r3, #9]
 800c6e4:	e004      	b.n	800c6f0 <HAL_RNG_GenerateRandomNumber+0xe4>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2204      	movs	r2, #4
 800c6ea:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	721a      	strb	r2, [r3, #8]

  return status;
 800c6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800c708:	bf00      	nop
 800c70a:	370c      	adds	r7, #12
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c71c:	2300      	movs	r3, #0
 800c71e:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	f003 0304 	and.w	r3, r3, #4
 800c72a:	2b04      	cmp	r3, #4
 800c72c:	d008      	beq.n	800c740 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	685a      	ldr	r2, [r3, #4]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c73c:	605a      	str	r2, [r3, #4]
 800c73e:	e05f      	b.n	800c800 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800c74e:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800c75e:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800c760:	2304      	movs	r3, #4
 800c762:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	3b01      	subs	r3, #1
 800c768:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d110      	bne.n	800c792 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	f043 0202 	orr.w	r2, r3, #2
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f7ff ffb9 	bl	800c700 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800c78e:	2301      	movs	r3, #1
 800c790:	e03d      	b.n	800c80e <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c79c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7a0:	d0e0      	beq.n	800c764 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7ac:	2b40      	cmp	r3, #64	@ 0x40
 800c7ae:	d107      	bne.n	800c7c0 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	685a      	ldr	r2, [r3, #4]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c7be:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800c7c0:	2304      	movs	r3, #4
 800c7c2:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d110      	bne.n	800c7f2 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	f043 0202 	orr.w	r2, r3, #2
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f7ff ff89 	bl	800c700 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e00d      	b.n	800c80e <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	f003 0304 	and.w	r3, r3, #4
 800c7fc:	2b04      	cmp	r3, #4
 800c7fe:	d0e1      	beq.n	800c7c4 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	f023 0208 	bic.w	r2, r3, #8
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800c80c:	2300      	movs	r3, #0
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3710      	adds	r7, #16
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
	...

0800c818 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c820:	2301      	movs	r3, #1
 800c822:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d071      	beq.n	800c90e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c830:	b2db      	uxtb	r3, r3
 800c832:	2b00      	cmp	r3, #0
 800c834:	d106      	bne.n	800c844 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7f5 fda4 	bl	800238c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2202      	movs	r2, #2
 800c848:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c84c:	4b32      	ldr	r3, [pc, #200]	@ (800c918 <HAL_RTC_Init+0x100>)
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	f003 0310 	and.w	r3, r3, #16
 800c854:	2b10      	cmp	r3, #16
 800c856:	d051      	beq.n	800c8fc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c858:	4b2f      	ldr	r3, [pc, #188]	@ (800c918 <HAL_RTC_Init+0x100>)
 800c85a:	22ca      	movs	r2, #202	@ 0xca
 800c85c:	625a      	str	r2, [r3, #36]	@ 0x24
 800c85e:	4b2e      	ldr	r3, [pc, #184]	@ (800c918 <HAL_RTC_Init+0x100>)
 800c860:	2253      	movs	r2, #83	@ 0x53
 800c862:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 f9a3 	bl	800cbb0 <RTC_EnterInitMode>
 800c86a:	4603      	mov	r3, r0
 800c86c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c86e:	7bfb      	ldrb	r3, [r7, #15]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d13f      	bne.n	800c8f4 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c874:	4b28      	ldr	r3, [pc, #160]	@ (800c918 <HAL_RTC_Init+0x100>)
 800c876:	699b      	ldr	r3, [r3, #24]
 800c878:	4a27      	ldr	r2, [pc, #156]	@ (800c918 <HAL_RTC_Init+0x100>)
 800c87a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800c87e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c882:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c884:	4b24      	ldr	r3, [pc, #144]	@ (800c918 <HAL_RTC_Init+0x100>)
 800c886:	699a      	ldr	r2, [r3, #24]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6859      	ldr	r1, [r3, #4]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	691b      	ldr	r3, [r3, #16]
 800c890:	4319      	orrs	r1, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	699b      	ldr	r3, [r3, #24]
 800c896:	430b      	orrs	r3, r1
 800c898:	491f      	ldr	r1, [pc, #124]	@ (800c918 <HAL_RTC_Init+0x100>)
 800c89a:	4313      	orrs	r3, r2
 800c89c:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	68da      	ldr	r2, [r3, #12]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	041b      	lsls	r3, r3, #16
 800c8a8:	491b      	ldr	r1, [pc, #108]	@ (800c918 <HAL_RTC_Init+0x100>)
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c8ae:	4b1a      	ldr	r3, [pc, #104]	@ (800c918 <HAL_RTC_Init+0x100>)
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8be:	430b      	orrs	r3, r1
 800c8c0:	4915      	ldr	r1, [pc, #84]	@ (800c918 <HAL_RTC_Init+0x100>)
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 f9ae 	bl	800cc28 <RTC_ExitInitMode>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d10e      	bne.n	800c8f4 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800c8d6:	4b10      	ldr	r3, [pc, #64]	@ (800c918 <HAL_RTC_Init+0x100>)
 800c8d8:	699b      	ldr	r3, [r3, #24]
 800c8da:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6a19      	ldr	r1, [r3, #32]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	69db      	ldr	r3, [r3, #28]
 800c8e6:	4319      	orrs	r1, r3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	695b      	ldr	r3, [r3, #20]
 800c8ec:	430b      	orrs	r3, r1
 800c8ee:	490a      	ldr	r1, [pc, #40]	@ (800c918 <HAL_RTC_Init+0x100>)
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8f4:	4b08      	ldr	r3, [pc, #32]	@ (800c918 <HAL_RTC_Init+0x100>)
 800c8f6:	22ff      	movs	r2, #255	@ 0xff
 800c8f8:	625a      	str	r2, [r3, #36]	@ 0x24
 800c8fa:	e001      	b.n	800c900 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c900:	7bfb      	ldrb	r3, [r7, #15]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d103      	bne.n	800c90e <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2201      	movs	r2, #1
 800c90a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800c90e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c910:	4618      	mov	r0, r3
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	44007800 	.word	0x44007800

0800c91c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c91c:	b590      	push	{r4, r7, lr}
 800c91e:	b087      	sub	sp, #28
 800c920:	af00      	add	r7, sp, #0
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	60b9      	str	r1, [r7, #8]
 800c926:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d101      	bne.n	800c936 <HAL_RTC_SetTime+0x1a>
 800c932:	2302      	movs	r3, #2
 800c934:	e07e      	b.n	800ca34 <HAL_RTC_SetTime+0x118>
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2201      	movs	r2, #1
 800c93a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2202      	movs	r2, #2
 800c942:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c946:	4b3d      	ldr	r3, [pc, #244]	@ (800ca3c <HAL_RTC_SetTime+0x120>)
 800c948:	22ca      	movs	r2, #202	@ 0xca
 800c94a:	625a      	str	r2, [r3, #36]	@ 0x24
 800c94c:	4b3b      	ldr	r3, [pc, #236]	@ (800ca3c <HAL_RTC_SetTime+0x120>)
 800c94e:	2253      	movs	r2, #83	@ 0x53
 800c950:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c952:	68f8      	ldr	r0, [r7, #12]
 800c954:	f000 f92c 	bl	800cbb0 <RTC_EnterInitMode>
 800c958:	4603      	mov	r3, r0
 800c95a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c95c:	7cfb      	ldrb	r3, [r7, #19]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d159      	bne.n	800ca16 <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800c962:	4b36      	ldr	r3, [pc, #216]	@ (800ca3c <HAL_RTC_SetTime+0x120>)
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c96a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c96e:	d04d      	beq.n	800ca0c <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d125      	bne.n	800c9c2 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c976:	4b31      	ldr	r3, [pc, #196]	@ (800ca3c <HAL_RTC_SetTime+0x120>)
 800c978:	699b      	ldr	r3, [r3, #24]
 800c97a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d102      	bne.n	800c988 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	2200      	movs	r2, #0
 800c986:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 f989 	bl	800cca4 <RTC_ByteToBcd2>
 800c992:	4603      	mov	r3, r0
 800c994:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	785b      	ldrb	r3, [r3, #1]
 800c99a:	4618      	mov	r0, r3
 800c99c:	f000 f982 	bl	800cca4 <RTC_ByteToBcd2>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9a4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	789b      	ldrb	r3, [r3, #2]
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 f97a 	bl	800cca4 <RTC_ByteToBcd2>
 800c9b0:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9b2:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	78db      	ldrb	r3, [r3, #3]
 800c9ba:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	617b      	str	r3, [r7, #20]
 800c9c0:	e017      	b.n	800c9f2 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c9c2:	4b1e      	ldr	r3, [pc, #120]	@ (800ca3c <HAL_RTC_SetTime+0x120>)
 800c9c4:	699b      	ldr	r3, [r3, #24]
 800c9c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d102      	bne.n	800c9d4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	785b      	ldrb	r3, [r3, #1]
 800c9de:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9e0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c9e2:	68ba      	ldr	r2, [r7, #8]
 800c9e4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9e6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	78db      	ldrb	r3, [r3, #3]
 800c9ec:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800c9f2:	4a12      	ldr	r2, [pc, #72]	@ (800ca3c <HAL_RTC_SetTime+0x120>)
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800c9fa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800c9fe:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800ca00:	4b0e      	ldr	r3, [pc, #56]	@ (800ca3c <HAL_RTC_SetTime+0x120>)
 800ca02:	699b      	ldr	r3, [r3, #24]
 800ca04:	4a0d      	ldr	r2, [pc, #52]	@ (800ca3c <HAL_RTC_SetTime+0x120>)
 800ca06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ca0a:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ca0c:	68f8      	ldr	r0, [r7, #12]
 800ca0e:	f000 f90b 	bl	800cc28 <RTC_ExitInitMode>
 800ca12:	4603      	mov	r3, r0
 800ca14:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca16:	4b09      	ldr	r3, [pc, #36]	@ (800ca3c <HAL_RTC_SetTime+0x120>)
 800ca18:	22ff      	movs	r2, #255	@ 0xff
 800ca1a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800ca1c:	7cfb      	ldrb	r3, [r7, #19]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d103      	bne.n	800ca2a <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2201      	movs	r2, #1
 800ca26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800ca32:	7cfb      	ldrb	r3, [r7, #19]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	371c      	adds	r7, #28
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd90      	pop	{r4, r7, pc}
 800ca3c:	44007800 	.word	0x44007800

0800ca40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ca40:	b590      	push	{r4, r7, lr}
 800ca42:	b087      	sub	sp, #28
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d101      	bne.n	800ca5a <HAL_RTC_SetDate+0x1a>
 800ca56:	2302      	movs	r3, #2
 800ca58:	e071      	b.n	800cb3e <HAL_RTC_SetDate+0xfe>
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2202      	movs	r2, #2
 800ca66:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d10e      	bne.n	800ca8e <HAL_RTC_SetDate+0x4e>
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	785b      	ldrb	r3, [r3, #1]
 800ca74:	f003 0310 	and.w	r3, r3, #16
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d008      	beq.n	800ca8e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	785b      	ldrb	r3, [r3, #1]
 800ca80:	f023 0310 	bic.w	r3, r3, #16
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	330a      	adds	r3, #10
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d11c      	bne.n	800cace <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	78db      	ldrb	r3, [r3, #3]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f000 f903 	bl	800cca4 <RTC_ByteToBcd2>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	785b      	ldrb	r3, [r3, #1]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f000 f8fc 	bl	800cca4 <RTC_ByteToBcd2>
 800caac:	4603      	mov	r3, r0
 800caae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cab0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	789b      	ldrb	r3, [r3, #2]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f000 f8f4 	bl	800cca4 <RTC_ByteToBcd2>
 800cabc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cabe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cac8:	4313      	orrs	r3, r2
 800caca:	617b      	str	r3, [r7, #20]
 800cacc:	e00e      	b.n	800caec <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	78db      	ldrb	r3, [r3, #3]
 800cad2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	785b      	ldrb	r3, [r3, #1]
 800cad8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cada:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cae0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	781b      	ldrb	r3, [r3, #0]
 800cae6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cae8:	4313      	orrs	r3, r2
 800caea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800caec:	4b16      	ldr	r3, [pc, #88]	@ (800cb48 <HAL_RTC_SetDate+0x108>)
 800caee:	22ca      	movs	r2, #202	@ 0xca
 800caf0:	625a      	str	r2, [r3, #36]	@ 0x24
 800caf2:	4b15      	ldr	r3, [pc, #84]	@ (800cb48 <HAL_RTC_SetDate+0x108>)
 800caf4:	2253      	movs	r2, #83	@ 0x53
 800caf6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800caf8:	68f8      	ldr	r0, [r7, #12]
 800cafa:	f000 f859 	bl	800cbb0 <RTC_EnterInitMode>
 800cafe:	4603      	mov	r3, r0
 800cb00:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800cb02:	7cfb      	ldrb	r3, [r7, #19]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d10b      	bne.n	800cb20 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800cb08:	4a0f      	ldr	r2, [pc, #60]	@ (800cb48 <HAL_RTC_SetDate+0x108>)
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cb10:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cb14:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f000 f886 	bl	800cc28 <RTC_ExitInitMode>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb20:	4b09      	ldr	r3, [pc, #36]	@ (800cb48 <HAL_RTC_SetDate+0x108>)
 800cb22:	22ff      	movs	r2, #255	@ 0xff
 800cb24:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800cb26:	7cfb      	ldrb	r3, [r7, #19]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d103      	bne.n	800cb34 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2201      	movs	r2, #1
 800cb30:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2200      	movs	r2, #0
 800cb38:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800cb3c:	7cfb      	ldrb	r3, [r7, #19]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	371c      	adds	r7, #28
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd90      	pop	{r4, r7, pc}
 800cb46:	bf00      	nop
 800cb48:	44007800 	.word	0x44007800

0800cb4c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800cb54:	4b15      	ldr	r3, [pc, #84]	@ (800cbac <HAL_RTC_WaitForSynchro+0x60>)
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	4a14      	ldr	r2, [pc, #80]	@ (800cbac <HAL_RTC_WaitForSynchro+0x60>)
 800cb5a:	f023 0320 	bic.w	r3, r3, #32
 800cb5e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800cb60:	f7f6 fb18 	bl	8003194 <HAL_GetTick>
 800cb64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cb66:	e013      	b.n	800cb90 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cb68:	f7f6 fb14 	bl	8003194 <HAL_GetTick>
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	1ad3      	subs	r3, r2, r3
 800cb72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cb76:	d90b      	bls.n	800cb90 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cb78:	4b0c      	ldr	r3, [pc, #48]	@ (800cbac <HAL_RTC_WaitForSynchro+0x60>)
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	f003 0320 	and.w	r3, r3, #32
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d10c      	bne.n	800cb9e <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2203      	movs	r2, #3
 800cb88:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800cb8c:	2303      	movs	r3, #3
 800cb8e:	e008      	b.n	800cba2 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cb90:	4b06      	ldr	r3, [pc, #24]	@ (800cbac <HAL_RTC_WaitForSynchro+0x60>)
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	f003 0320 	and.w	r3, r3, #32
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d0e5      	beq.n	800cb68 <HAL_RTC_WaitForSynchro+0x1c>
 800cb9c:	e000      	b.n	800cba0 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800cb9e:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800cba0:	2300      	movs	r3, #0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3710      	adds	r7, #16
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	44007800 	.word	0x44007800

0800cbb0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cbbc:	4b19      	ldr	r3, [pc, #100]	@ (800cc24 <RTC_EnterInitMode+0x74>)
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d128      	bne.n	800cc1a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cbc8:	4b16      	ldr	r3, [pc, #88]	@ (800cc24 <RTC_EnterInitMode+0x74>)
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	4a15      	ldr	r2, [pc, #84]	@ (800cc24 <RTC_EnterInitMode+0x74>)
 800cbce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbd2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800cbd4:	f7f6 fade 	bl	8003194 <HAL_GetTick>
 800cbd8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cbda:	e013      	b.n	800cc04 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cbdc:	f7f6 fada 	bl	8003194 <HAL_GetTick>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	1ad3      	subs	r3, r2, r3
 800cbe6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cbea:	d90b      	bls.n	800cc04 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cbec:	4b0d      	ldr	r3, [pc, #52]	@ (800cc24 <RTC_EnterInitMode+0x74>)
 800cbee:	68db      	ldr	r3, [r3, #12]
 800cbf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10f      	bne.n	800cc18 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800cbf8:	2303      	movs	r3, #3
 800cbfa:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2203      	movs	r2, #3
 800cc00:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cc04:	4b07      	ldr	r3, [pc, #28]	@ (800cc24 <RTC_EnterInitMode+0x74>)
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d104      	bne.n	800cc1a <RTC_EnterInitMode+0x6a>
 800cc10:	7bfb      	ldrb	r3, [r7, #15]
 800cc12:	2b03      	cmp	r3, #3
 800cc14:	d1e2      	bne.n	800cbdc <RTC_EnterInitMode+0x2c>
 800cc16:	e000      	b.n	800cc1a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800cc18:	bf00      	nop
        }
      }
    }
  }

  return status;
 800cc1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	44007800 	.word	0x44007800

0800cc28 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc30:	2300      	movs	r3, #0
 800cc32:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cc34:	4b1a      	ldr	r3, [pc, #104]	@ (800cca0 <RTC_ExitInitMode+0x78>)
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	4a19      	ldr	r2, [pc, #100]	@ (800cca0 <RTC_ExitInitMode+0x78>)
 800cc3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc3e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cc40:	4b17      	ldr	r3, [pc, #92]	@ (800cca0 <RTC_ExitInitMode+0x78>)
 800cc42:	699b      	ldr	r3, [r3, #24]
 800cc44:	f003 0320 	and.w	r3, r3, #32
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10c      	bne.n	800cc66 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7ff ff7d 	bl	800cb4c <HAL_RTC_WaitForSynchro>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d01e      	beq.n	800cc96 <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2203      	movs	r2, #3
 800cc5c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800cc60:	2303      	movs	r3, #3
 800cc62:	73fb      	strb	r3, [r7, #15]
 800cc64:	e017      	b.n	800cc96 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cc66:	4b0e      	ldr	r3, [pc, #56]	@ (800cca0 <RTC_ExitInitMode+0x78>)
 800cc68:	699b      	ldr	r3, [r3, #24]
 800cc6a:	4a0d      	ldr	r2, [pc, #52]	@ (800cca0 <RTC_ExitInitMode+0x78>)
 800cc6c:	f023 0320 	bic.w	r3, r3, #32
 800cc70:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f7ff ff6a 	bl	800cb4c <HAL_RTC_WaitForSynchro>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d005      	beq.n	800cc8a <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2203      	movs	r2, #3
 800cc82:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800cc86:	2303      	movs	r3, #3
 800cc88:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cc8a:	4b05      	ldr	r3, [pc, #20]	@ (800cca0 <RTC_ExitInitMode+0x78>)
 800cc8c:	699b      	ldr	r3, [r3, #24]
 800cc8e:	4a04      	ldr	r2, [pc, #16]	@ (800cca0 <RTC_ExitInitMode+0x78>)
 800cc90:	f043 0320 	orr.w	r3, r3, #32
 800cc94:	6193      	str	r3, [r2, #24]
  }
  return status;
 800cc96:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3710      	adds	r7, #16
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	44007800 	.word	0x44007800

0800cca4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	4603      	mov	r3, r0
 800ccac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800ccb2:	79fb      	ldrb	r3, [r7, #7]
 800ccb4:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800ccb6:	e005      	b.n	800ccc4 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800ccbe:	7afb      	ldrb	r3, [r7, #11]
 800ccc0:	3b0a      	subs	r3, #10
 800ccc2:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800ccc4:	7afb      	ldrb	r3, [r7, #11]
 800ccc6:	2b09      	cmp	r3, #9
 800ccc8:	d8f6      	bhi.n	800ccb8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	011b      	lsls	r3, r3, #4
 800ccd0:	b2da      	uxtb	r2, r3
 800ccd2:	7afb      	ldrb	r3, [r7, #11]
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	b2db      	uxtb	r3, r3
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3714      	adds	r7, #20
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	4910      	ldr	r1, [pc, #64]	@ (800cd38 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	689a      	ldr	r2, [r3, #8]
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	431a      	orrs	r2, r3
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	699b      	ldr	r3, [r3, #24]
 800cd0a:	490c      	ldr	r1, [pc, #48]	@ (800cd3c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800cd10:	4b0a      	ldr	r3, [pc, #40]	@ (800cd3c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd12:	6a1b      	ldr	r3, [r3, #32]
 800cd14:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	6919      	ldr	r1, [r3, #16]
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	695b      	ldr	r3, [r3, #20]
 800cd20:	041b      	lsls	r3, r3, #16
 800cd22:	430b      	orrs	r3, r1
 800cd24:	4905      	ldr	r1, [pc, #20]	@ (800cd3c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd26:	4313      	orrs	r3, r2
 800cd28:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800cd2a:	2300      	movs	r3, #0
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr
 800cd38:	44007800 	.word	0x44007800
 800cd3c:	44007c00 	.word	0x44007c00

0800cd40 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d101      	bne.n	800cd52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e162      	b.n	800d018 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a70      	ldr	r2, [pc, #448]	@ (800cf18 <HAL_SPI_Init+0x1d8>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d018      	beq.n	800cd8e <HAL_SPI_Init+0x4e>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a6e      	ldr	r2, [pc, #440]	@ (800cf1c <HAL_SPI_Init+0x1dc>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d013      	beq.n	800cd8e <HAL_SPI_Init+0x4e>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a6d      	ldr	r2, [pc, #436]	@ (800cf20 <HAL_SPI_Init+0x1e0>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d00e      	beq.n	800cd8e <HAL_SPI_Init+0x4e>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a6b      	ldr	r2, [pc, #428]	@ (800cf24 <HAL_SPI_Init+0x1e4>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d009      	beq.n	800cd8e <HAL_SPI_Init+0x4e>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a6a      	ldr	r2, [pc, #424]	@ (800cf28 <HAL_SPI_Init+0x1e8>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d004      	beq.n	800cd8e <HAL_SPI_Init+0x4e>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a68      	ldr	r2, [pc, #416]	@ (800cf2c <HAL_SPI_Init+0x1ec>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	e000      	b.n	800cd90 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800cd8e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a5f      	ldr	r2, [pc, #380]	@ (800cf18 <HAL_SPI_Init+0x1d8>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d018      	beq.n	800cdd2 <HAL_SPI_Init+0x92>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4a5d      	ldr	r2, [pc, #372]	@ (800cf1c <HAL_SPI_Init+0x1dc>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d013      	beq.n	800cdd2 <HAL_SPI_Init+0x92>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	4a5c      	ldr	r2, [pc, #368]	@ (800cf20 <HAL_SPI_Init+0x1e0>)
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	d00e      	beq.n	800cdd2 <HAL_SPI_Init+0x92>
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a5a      	ldr	r2, [pc, #360]	@ (800cf24 <HAL_SPI_Init+0x1e4>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d009      	beq.n	800cdd2 <HAL_SPI_Init+0x92>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4a59      	ldr	r2, [pc, #356]	@ (800cf28 <HAL_SPI_Init+0x1e8>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d004      	beq.n	800cdd2 <HAL_SPI_Init+0x92>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a57      	ldr	r2, [pc, #348]	@ (800cf2c <HAL_SPI_Init+0x1ec>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d105      	bne.n	800cdde <HAL_SPI_Init+0x9e>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	2b0f      	cmp	r3, #15
 800cdd8:	d901      	bls.n	800cdde <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	e11c      	b.n	800d018 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 f91e 	bl	800d020 <SPI_GetPacketSize>
 800cde4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a4b      	ldr	r2, [pc, #300]	@ (800cf18 <HAL_SPI_Init+0x1d8>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d018      	beq.n	800ce22 <HAL_SPI_Init+0xe2>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a49      	ldr	r2, [pc, #292]	@ (800cf1c <HAL_SPI_Init+0x1dc>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d013      	beq.n	800ce22 <HAL_SPI_Init+0xe2>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a48      	ldr	r2, [pc, #288]	@ (800cf20 <HAL_SPI_Init+0x1e0>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d00e      	beq.n	800ce22 <HAL_SPI_Init+0xe2>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a46      	ldr	r2, [pc, #280]	@ (800cf24 <HAL_SPI_Init+0x1e4>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d009      	beq.n	800ce22 <HAL_SPI_Init+0xe2>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4a45      	ldr	r2, [pc, #276]	@ (800cf28 <HAL_SPI_Init+0x1e8>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d004      	beq.n	800ce22 <HAL_SPI_Init+0xe2>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a43      	ldr	r2, [pc, #268]	@ (800cf2c <HAL_SPI_Init+0x1ec>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d102      	bne.n	800ce28 <HAL_SPI_Init+0xe8>
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2b08      	cmp	r3, #8
 800ce26:	d820      	bhi.n	800ce6a <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce2c:	4a40      	ldr	r2, [pc, #256]	@ (800cf30 <HAL_SPI_Init+0x1f0>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d018      	beq.n	800ce64 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a3f      	ldr	r2, [pc, #252]	@ (800cf34 <HAL_SPI_Init+0x1f4>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d013      	beq.n	800ce64 <HAL_SPI_Init+0x124>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a3d      	ldr	r2, [pc, #244]	@ (800cf38 <HAL_SPI_Init+0x1f8>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d00e      	beq.n	800ce64 <HAL_SPI_Init+0x124>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a3c      	ldr	r2, [pc, #240]	@ (800cf3c <HAL_SPI_Init+0x1fc>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d009      	beq.n	800ce64 <HAL_SPI_Init+0x124>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a3a      	ldr	r2, [pc, #232]	@ (800cf40 <HAL_SPI_Init+0x200>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d004      	beq.n	800ce64 <HAL_SPI_Init+0x124>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a39      	ldr	r2, [pc, #228]	@ (800cf44 <HAL_SPI_Init+0x204>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d104      	bne.n	800ce6e <HAL_SPI_Init+0x12e>
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2b10      	cmp	r3, #16
 800ce68:	d901      	bls.n	800ce6e <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e0d4      	b.n	800d018 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d106      	bne.n	800ce88 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f7f5 fae2 	bl	800244c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2202      	movs	r2, #2
 800ce8c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f022 0201 	bic.w	r2, r2, #1
 800ce9e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ceaa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	699b      	ldr	r3, [r3, #24]
 800ceb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ceb4:	d119      	bne.n	800ceea <HAL_SPI_Init+0x1aa>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cebe:	d103      	bne.n	800cec8 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d008      	beq.n	800ceda <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d10c      	bne.n	800ceea <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ced4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ced8:	d107      	bne.n	800ceea <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cee8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d028      	beq.n	800cf48 <HAL_SPI_Init+0x208>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	2b06      	cmp	r3, #6
 800cefc:	d924      	bls.n	800cf48 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	430a      	orrs	r2, r1
 800cf12:	601a      	str	r2, [r3, #0]
 800cf14:	e020      	b.n	800cf58 <HAL_SPI_Init+0x218>
 800cf16:	bf00      	nop
 800cf18:	40014c00 	.word	0x40014c00
 800cf1c:	50014c00 	.word	0x50014c00
 800cf20:	44002000 	.word	0x44002000
 800cf24:	54002000 	.word	0x54002000
 800cf28:	40015000 	.word	0x40015000
 800cf2c:	50015000 	.word	0x50015000
 800cf30:	40013000 	.word	0x40013000
 800cf34:	50013000 	.word	0x50013000
 800cf38:	40003800 	.word	0x40003800
 800cf3c:	50003800 	.word	0x50003800
 800cf40:	40003c00 	.word	0x40003c00
 800cf44:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cf56:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	69da      	ldr	r2, [r3, #28]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf60:	431a      	orrs	r2, r3
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	431a      	orrs	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf6a:	ea42 0103 	orr.w	r1, r2, r3
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	68da      	ldr	r2, [r3, #12]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	430a      	orrs	r2, r1
 800cf78:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf82:	431a      	orrs	r2, r3
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf88:	431a      	orrs	r2, r3
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	699b      	ldr	r3, [r3, #24]
 800cf8e:	431a      	orrs	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	691b      	ldr	r3, [r3, #16]
 800cf94:	431a      	orrs	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	695b      	ldr	r3, [r3, #20]
 800cf9a:	431a      	orrs	r2, r3
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6a1b      	ldr	r3, [r3, #32]
 800cfa0:	431a      	orrs	r2, r3
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	431a      	orrs	r2, r3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfac:	431a      	orrs	r2, r3
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	431a      	orrs	r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cfb8:	431a      	orrs	r2, r3
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfbe:	431a      	orrs	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfc4:	ea42 0103 	orr.w	r1, r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	430a      	orrs	r2, r1
 800cfd2:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f022 0201 	bic.w	r2, r2, #1
 800cfe2:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d00a      	beq.n	800d006 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	68db      	ldr	r3, [r3, #12]
 800cff6:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	430a      	orrs	r2, r1
 800d004:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2200      	movs	r2, #0
 800d00a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2201      	movs	r2, #1
 800d012:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800d016:	2300      	movs	r3, #0
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3710      	adds	r7, #16
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d02c:	095b      	lsrs	r3, r3, #5
 800d02e:	3301      	adds	r3, #1
 800d030:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	3301      	adds	r3, #1
 800d038:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	3307      	adds	r3, #7
 800d03e:	08db      	lsrs	r3, r3, #3
 800d040:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	68fa      	ldr	r2, [r7, #12]
 800d046:	fb02 f303 	mul.w	r3, r2, r3
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3714      	adds	r7, #20
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr

0800d056 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b082      	sub	sp, #8
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d101      	bne.n	800d068 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d064:	2301      	movs	r3, #1
 800d066:	e042      	b.n	800d0ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d106      	bne.n	800d080 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2200      	movs	r2, #0
 800d076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f7f5 faa2 	bl	80025c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2224      	movs	r2, #36	@ 0x24
 800d084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f022 0201 	bic.w	r2, r2, #1
 800d096:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d002      	beq.n	800d0a6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 fab5 	bl	800d610 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f000 f8c4 	bl	800d234 <UART_SetConfig>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d101      	bne.n	800d0b6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e01b      	b.n	800d0ee <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	685a      	ldr	r2, [r3, #4]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d0c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	689a      	ldr	r2, [r3, #8]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d0d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f042 0201 	orr.w	r2, r2, #1
 800d0e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 fb34 	bl	800d754 <UART_CheckIdleState>
 800d0ec:	4603      	mov	r3, r0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b08a      	sub	sp, #40	@ 0x28
 800d0fa:	af02      	add	r7, sp, #8
 800d0fc:	60f8      	str	r0, [r7, #12]
 800d0fe:	60b9      	str	r1, [r7, #8]
 800d100:	603b      	str	r3, [r7, #0]
 800d102:	4613      	mov	r3, r2
 800d104:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d10c:	2b20      	cmp	r3, #32
 800d10e:	f040 808b 	bne.w	800d228 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d002      	beq.n	800d11e <HAL_UART_Transmit+0x28>
 800d118:	88fb      	ldrh	r3, [r7, #6]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d101      	bne.n	800d122 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	e083      	b.n	800d22a <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d12c:	2b80      	cmp	r3, #128	@ 0x80
 800d12e:	d107      	bne.n	800d140 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	689a      	ldr	r2, [r3, #8]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d13e:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2200      	movs	r2, #0
 800d144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2221      	movs	r2, #33	@ 0x21
 800d14c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d150:	f7f6 f820 	bl	8003194 <HAL_GetTick>
 800d154:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	88fa      	ldrh	r2, [r7, #6]
 800d15a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	88fa      	ldrh	r2, [r7, #6]
 800d162:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d16e:	d108      	bne.n	800d182 <HAL_UART_Transmit+0x8c>
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	691b      	ldr	r3, [r3, #16]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d104      	bne.n	800d182 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800d178:	2300      	movs	r3, #0
 800d17a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	61bb      	str	r3, [r7, #24]
 800d180:	e003      	b.n	800d18a <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d186:	2300      	movs	r3, #0
 800d188:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d18a:	e030      	b.n	800d1ee <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	9300      	str	r3, [sp, #0]
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	2200      	movs	r2, #0
 800d194:	2180      	movs	r1, #128	@ 0x80
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f000 fb86 	bl	800d8a8 <UART_WaitOnFlagUntilTimeout>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d005      	beq.n	800d1ae <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2220      	movs	r2, #32
 800d1a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d1aa:	2303      	movs	r3, #3
 800d1ac:	e03d      	b.n	800d22a <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d10b      	bne.n	800d1cc <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d1b4:	69bb      	ldr	r3, [r7, #24]
 800d1b6:	881b      	ldrh	r3, [r3, #0]
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d1c4:	69bb      	ldr	r3, [r7, #24]
 800d1c6:	3302      	adds	r3, #2
 800d1c8:	61bb      	str	r3, [r7, #24]
 800d1ca:	e007      	b.n	800d1dc <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	781a      	ldrb	r2, [r3, #0]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	3b01      	subs	r3, #1
 800d1e6:	b29a      	uxth	r2, r3
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1c8      	bne.n	800d18c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	9300      	str	r3, [sp, #0]
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	2200      	movs	r2, #0
 800d202:	2140      	movs	r1, #64	@ 0x40
 800d204:	68f8      	ldr	r0, [r7, #12]
 800d206:	f000 fb4f 	bl	800d8a8 <UART_WaitOnFlagUntilTimeout>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d005      	beq.n	800d21c <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2220      	movs	r2, #32
 800d214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d218:	2303      	movs	r3, #3
 800d21a:	e006      	b.n	800d22a <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2220      	movs	r2, #32
 800d220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d224:	2300      	movs	r3, #0
 800d226:	e000      	b.n	800d22a <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800d228:	2302      	movs	r3, #2
  }
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3720      	adds	r7, #32
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
	...

0800d234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d238:	b094      	sub	sp, #80	@ 0x50
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d23e:	2300      	movs	r3, #0
 800d240:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	4b78      	ldr	r3, [pc, #480]	@ (800d42c <UART_SetConfig+0x1f8>)
 800d24a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24e:	689a      	ldr	r2, [r3, #8]
 800d250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	431a      	orrs	r2, r3
 800d256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d258:	695b      	ldr	r3, [r3, #20]
 800d25a:	431a      	orrs	r2, r3
 800d25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d25e:	69db      	ldr	r3, [r3, #28]
 800d260:	4313      	orrs	r3, r2
 800d262:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4971      	ldr	r1, [pc, #452]	@ (800d430 <UART_SetConfig+0x1fc>)
 800d26c:	4019      	ands	r1, r3
 800d26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d274:	430b      	orrs	r3, r1
 800d276:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d284:	68d9      	ldr	r1, [r3, #12]
 800d286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	ea40 0301 	orr.w	r3, r0, r1
 800d28e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d292:	699b      	ldr	r3, [r3, #24]
 800d294:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d298:	681a      	ldr	r2, [r3, #0]
 800d29a:	4b64      	ldr	r3, [pc, #400]	@ (800d42c <UART_SetConfig+0x1f8>)
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d009      	beq.n	800d2b4 <UART_SetConfig+0x80>
 800d2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	4b63      	ldr	r3, [pc, #396]	@ (800d434 <UART_SetConfig+0x200>)
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d004      	beq.n	800d2b4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d2aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ac:	6a1a      	ldr	r2, [r3, #32]
 800d2ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	689b      	ldr	r3, [r3, #8]
 800d2ba:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d2be:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2c8:	430b      	orrs	r3, r1
 800d2ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2d2:	f023 000f 	bic.w	r0, r3, #15
 800d2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d2da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	ea40 0301 	orr.w	r3, r0, r1
 800d2e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	4b53      	ldr	r3, [pc, #332]	@ (800d438 <UART_SetConfig+0x204>)
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d102      	bne.n	800d2f4 <UART_SetConfig+0xc0>
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2f2:	e066      	b.n	800d3c2 <UART_SetConfig+0x18e>
 800d2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	4b50      	ldr	r3, [pc, #320]	@ (800d43c <UART_SetConfig+0x208>)
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d102      	bne.n	800d304 <UART_SetConfig+0xd0>
 800d2fe:	2302      	movs	r3, #2
 800d300:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d302:	e05e      	b.n	800d3c2 <UART_SetConfig+0x18e>
 800d304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	4b4d      	ldr	r3, [pc, #308]	@ (800d440 <UART_SetConfig+0x20c>)
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d102      	bne.n	800d314 <UART_SetConfig+0xe0>
 800d30e:	2304      	movs	r3, #4
 800d310:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d312:	e056      	b.n	800d3c2 <UART_SetConfig+0x18e>
 800d314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	4b4a      	ldr	r3, [pc, #296]	@ (800d444 <UART_SetConfig+0x210>)
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d102      	bne.n	800d324 <UART_SetConfig+0xf0>
 800d31e:	2308      	movs	r3, #8
 800d320:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d322:	e04e      	b.n	800d3c2 <UART_SetConfig+0x18e>
 800d324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	4b47      	ldr	r3, [pc, #284]	@ (800d448 <UART_SetConfig+0x214>)
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d102      	bne.n	800d334 <UART_SetConfig+0x100>
 800d32e:	2310      	movs	r3, #16
 800d330:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d332:	e046      	b.n	800d3c2 <UART_SetConfig+0x18e>
 800d334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	4b44      	ldr	r3, [pc, #272]	@ (800d44c <UART_SetConfig+0x218>)
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d102      	bne.n	800d344 <UART_SetConfig+0x110>
 800d33e:	2320      	movs	r3, #32
 800d340:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d342:	e03e      	b.n	800d3c2 <UART_SetConfig+0x18e>
 800d344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	4b41      	ldr	r3, [pc, #260]	@ (800d450 <UART_SetConfig+0x21c>)
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d102      	bne.n	800d354 <UART_SetConfig+0x120>
 800d34e:	2340      	movs	r3, #64	@ 0x40
 800d350:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d352:	e036      	b.n	800d3c2 <UART_SetConfig+0x18e>
 800d354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	4b3e      	ldr	r3, [pc, #248]	@ (800d454 <UART_SetConfig+0x220>)
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d102      	bne.n	800d364 <UART_SetConfig+0x130>
 800d35e:	2380      	movs	r3, #128	@ 0x80
 800d360:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d362:	e02e      	b.n	800d3c2 <UART_SetConfig+0x18e>
 800d364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	4b3b      	ldr	r3, [pc, #236]	@ (800d458 <UART_SetConfig+0x224>)
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d103      	bne.n	800d376 <UART_SetConfig+0x142>
 800d36e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d372:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d374:	e025      	b.n	800d3c2 <UART_SetConfig+0x18e>
 800d376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	4b38      	ldr	r3, [pc, #224]	@ (800d45c <UART_SetConfig+0x228>)
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d103      	bne.n	800d388 <UART_SetConfig+0x154>
 800d380:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d384:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d386:	e01c      	b.n	800d3c2 <UART_SetConfig+0x18e>
 800d388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	4b34      	ldr	r3, [pc, #208]	@ (800d460 <UART_SetConfig+0x22c>)
 800d38e:	429a      	cmp	r2, r3
 800d390:	d103      	bne.n	800d39a <UART_SetConfig+0x166>
 800d392:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d396:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d398:	e013      	b.n	800d3c2 <UART_SetConfig+0x18e>
 800d39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	4b31      	ldr	r3, [pc, #196]	@ (800d464 <UART_SetConfig+0x230>)
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d103      	bne.n	800d3ac <UART_SetConfig+0x178>
 800d3a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d3a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d3aa:	e00a      	b.n	800d3c2 <UART_SetConfig+0x18e>
 800d3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	4b1e      	ldr	r3, [pc, #120]	@ (800d42c <UART_SetConfig+0x1f8>)
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d103      	bne.n	800d3be <UART_SetConfig+0x18a>
 800d3b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d3bc:	e001      	b.n	800d3c2 <UART_SetConfig+0x18e>
 800d3be:	2300      	movs	r3, #0
 800d3c0:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	4b19      	ldr	r3, [pc, #100]	@ (800d42c <UART_SetConfig+0x1f8>)
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d005      	beq.n	800d3d8 <UART_SetConfig+0x1a4>
 800d3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	4b18      	ldr	r3, [pc, #96]	@ (800d434 <UART_SetConfig+0x200>)
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	f040 8094 	bne.w	800d500 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d3d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3da:	2200      	movs	r2, #0
 800d3dc:	623b      	str	r3, [r7, #32]
 800d3de:	627a      	str	r2, [r7, #36]	@ 0x24
 800d3e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d3e4:	f7fc fbea 	bl	8009bbc <HAL_RCCEx_GetPeriphCLKFreq>
 800d3e8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d3ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f000 80f7 	beq.w	800d5e0 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3f6:	4a1c      	ldr	r2, [pc, #112]	@ (800d468 <UART_SetConfig+0x234>)
 800d3f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d400:	fbb3 f3f2 	udiv	r3, r3, r2
 800d404:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d408:	685a      	ldr	r2, [r3, #4]
 800d40a:	4613      	mov	r3, r2
 800d40c:	005b      	lsls	r3, r3, #1
 800d40e:	4413      	add	r3, r2
 800d410:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d412:	429a      	cmp	r2, r3
 800d414:	d305      	bcc.n	800d422 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d418:	685b      	ldr	r3, [r3, #4]
 800d41a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d41c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d41e:	429a      	cmp	r2, r3
 800d420:	d924      	bls.n	800d46c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800d422:	2301      	movs	r3, #1
 800d424:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d428:	e069      	b.n	800d4fe <UART_SetConfig+0x2ca>
 800d42a:	bf00      	nop
 800d42c:	44002400 	.word	0x44002400
 800d430:	cfff69f3 	.word	0xcfff69f3
 800d434:	54002400 	.word	0x54002400
 800d438:	40013800 	.word	0x40013800
 800d43c:	40004400 	.word	0x40004400
 800d440:	40004800 	.word	0x40004800
 800d444:	40004c00 	.word	0x40004c00
 800d448:	40005000 	.word	0x40005000
 800d44c:	40006400 	.word	0x40006400
 800d450:	40007800 	.word	0x40007800
 800d454:	40007c00 	.word	0x40007c00
 800d458:	40008000 	.word	0x40008000
 800d45c:	40006800 	.word	0x40006800
 800d460:	40006c00 	.word	0x40006c00
 800d464:	40008400 	.word	0x40008400
 800d468:	08014720 	.word	0x08014720
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d46c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d46e:	2200      	movs	r2, #0
 800d470:	61bb      	str	r3, [r7, #24]
 800d472:	61fa      	str	r2, [r7, #28]
 800d474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d478:	4a64      	ldr	r2, [pc, #400]	@ (800d60c <UART_SetConfig+0x3d8>)
 800d47a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d47e:	b29b      	uxth	r3, r3
 800d480:	2200      	movs	r2, #0
 800d482:	613b      	str	r3, [r7, #16]
 800d484:	617a      	str	r2, [r7, #20]
 800d486:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d48a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d48e:	f7f2 fefd 	bl	800028c <__aeabi_uldivmod>
 800d492:	4602      	mov	r2, r0
 800d494:	460b      	mov	r3, r1
 800d496:	4610      	mov	r0, r2
 800d498:	4619      	mov	r1, r3
 800d49a:	f04f 0200 	mov.w	r2, #0
 800d49e:	f04f 0300 	mov.w	r3, #0
 800d4a2:	020b      	lsls	r3, r1, #8
 800d4a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d4a8:	0202      	lsls	r2, r0, #8
 800d4aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4ac:	6849      	ldr	r1, [r1, #4]
 800d4ae:	0849      	lsrs	r1, r1, #1
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	460c      	mov	r4, r1
 800d4b4:	4605      	mov	r5, r0
 800d4b6:	eb12 0804 	adds.w	r8, r2, r4
 800d4ba:	eb43 0905 	adc.w	r9, r3, r5
 800d4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	60bb      	str	r3, [r7, #8]
 800d4c6:	60fa      	str	r2, [r7, #12]
 800d4c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d4cc:	4640      	mov	r0, r8
 800d4ce:	4649      	mov	r1, r9
 800d4d0:	f7f2 fedc 	bl	800028c <__aeabi_uldivmod>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	4613      	mov	r3, r2
 800d4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d4e2:	d308      	bcc.n	800d4f6 <UART_SetConfig+0x2c2>
 800d4e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4ea:	d204      	bcs.n	800d4f6 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800d4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d4f2:	60da      	str	r2, [r3, #12]
 800d4f4:	e003      	b.n	800d4fe <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d4fc:	e070      	b.n	800d5e0 <UART_SetConfig+0x3ac>
 800d4fe:	e06f      	b.n	800d5e0 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d502:	69db      	ldr	r3, [r3, #28]
 800d504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d508:	d13c      	bne.n	800d584 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d50a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d50c:	2200      	movs	r2, #0
 800d50e:	603b      	str	r3, [r7, #0]
 800d510:	607a      	str	r2, [r7, #4]
 800d512:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d516:	f7fc fb51 	bl	8009bbc <HAL_RCCEx_GetPeriphCLKFreq>
 800d51a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d51c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d05e      	beq.n	800d5e0 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d526:	4a39      	ldr	r2, [pc, #228]	@ (800d60c <UART_SetConfig+0x3d8>)
 800d528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d52c:	461a      	mov	r2, r3
 800d52e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d530:	fbb3 f3f2 	udiv	r3, r3, r2
 800d534:	005a      	lsls	r2, r3, #1
 800d536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	085b      	lsrs	r3, r3, #1
 800d53c:	441a      	add	r2, r3
 800d53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	fbb2 f3f3 	udiv	r3, r2, r3
 800d546:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d54a:	2b0f      	cmp	r3, #15
 800d54c:	d916      	bls.n	800d57c <UART_SetConfig+0x348>
 800d54e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d554:	d212      	bcs.n	800d57c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d558:	b29b      	uxth	r3, r3
 800d55a:	f023 030f 	bic.w	r3, r3, #15
 800d55e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d562:	085b      	lsrs	r3, r3, #1
 800d564:	b29b      	uxth	r3, r3
 800d566:	f003 0307 	and.w	r3, r3, #7
 800d56a:	b29a      	uxth	r2, r3
 800d56c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d56e:	4313      	orrs	r3, r2
 800d570:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800d572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d578:	60da      	str	r2, [r3, #12]
 800d57a:	e031      	b.n	800d5e0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800d57c:	2301      	movs	r3, #1
 800d57e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d582:	e02d      	b.n	800d5e0 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d586:	2200      	movs	r2, #0
 800d588:	469a      	mov	sl, r3
 800d58a:	4693      	mov	fp, r2
 800d58c:	4650      	mov	r0, sl
 800d58e:	4659      	mov	r1, fp
 800d590:	f7fc fb14 	bl	8009bbc <HAL_RCCEx_GetPeriphCLKFreq>
 800d594:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d021      	beq.n	800d5e0 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5a0:	4a1a      	ldr	r2, [pc, #104]	@ (800d60c <UART_SetConfig+0x3d8>)
 800d5a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800d5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	085b      	lsrs	r3, r3, #1
 800d5b4:	441a      	add	r2, r3
 800d5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5c2:	2b0f      	cmp	r3, #15
 800d5c4:	d909      	bls.n	800d5da <UART_SetConfig+0x3a6>
 800d5c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5cc:	d205      	bcs.n	800d5da <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d5ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5d0:	b29a      	uxth	r2, r3
 800d5d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	60da      	str	r2, [r3, #12]
 800d5d8:	e002      	b.n	800d5e0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d5fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d600:	4618      	mov	r0, r3
 800d602:	3750      	adds	r7, #80	@ 0x50
 800d604:	46bd      	mov	sp, r7
 800d606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d60a:	bf00      	nop
 800d60c:	08014720 	.word	0x08014720

0800d610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d61c:	f003 0308 	and.w	r3, r3, #8
 800d620:	2b00      	cmp	r3, #0
 800d622:	d00a      	beq.n	800d63a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	430a      	orrs	r2, r1
 800d638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d63e:	f003 0301 	and.w	r3, r3, #1
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00a      	beq.n	800d65c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	430a      	orrs	r2, r1
 800d65a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d660:	f003 0302 	and.w	r3, r3, #2
 800d664:	2b00      	cmp	r3, #0
 800d666:	d00a      	beq.n	800d67e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	430a      	orrs	r2, r1
 800d67c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d682:	f003 0304 	and.w	r3, r3, #4
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00a      	beq.n	800d6a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	430a      	orrs	r2, r1
 800d69e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6a4:	f003 0310 	and.w	r3, r3, #16
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00a      	beq.n	800d6c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	689b      	ldr	r3, [r3, #8]
 800d6b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	430a      	orrs	r2, r1
 800d6c0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6c6:	f003 0320 	and.w	r3, r3, #32
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00a      	beq.n	800d6e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	689b      	ldr	r3, [r3, #8]
 800d6d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	430a      	orrs	r2, r1
 800d6e2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d01a      	beq.n	800d726 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	430a      	orrs	r2, r1
 800d704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d70a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d70e:	d10a      	bne.n	800d726 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	430a      	orrs	r2, r1
 800d724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d72a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d00a      	beq.n	800d748 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	430a      	orrs	r2, r1
 800d746:	605a      	str	r2, [r3, #4]
  }
}
 800d748:	bf00      	nop
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b098      	sub	sp, #96	@ 0x60
 800d758:	af02      	add	r7, sp, #8
 800d75a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d764:	f7f5 fd16 	bl	8003194 <HAL_GetTick>
 800d768:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f003 0308 	and.w	r3, r3, #8
 800d774:	2b08      	cmp	r3, #8
 800d776:	d12f      	bne.n	800d7d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d778:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d780:	2200      	movs	r2, #0
 800d782:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 f88e 	bl	800d8a8 <UART_WaitOnFlagUntilTimeout>
 800d78c:	4603      	mov	r3, r0
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d022      	beq.n	800d7d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d79a:	e853 3f00 	ldrex	r3, [r3]
 800d79e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d7a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d7b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d7b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7b8:	e841 2300 	strex	r3, r2, [r1]
 800d7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d1e6      	bne.n	800d792 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2220      	movs	r2, #32
 800d7c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7d4:	2303      	movs	r3, #3
 800d7d6:	e063      	b.n	800d8a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f003 0304 	and.w	r3, r3, #4
 800d7e2:	2b04      	cmp	r3, #4
 800d7e4:	d149      	bne.n	800d87a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d7ea:	9300      	str	r3, [sp, #0]
 800d7ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f000 f857 	bl	800d8a8 <UART_WaitOnFlagUntilTimeout>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d03c      	beq.n	800d87a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d808:	e853 3f00 	ldrex	r3, [r3]
 800d80c:	623b      	str	r3, [r7, #32]
   return(result);
 800d80e:	6a3b      	ldr	r3, [r7, #32]
 800d810:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d814:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	461a      	mov	r2, r3
 800d81c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d81e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d820:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d822:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d826:	e841 2300 	strex	r3, r2, [r1]
 800d82a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d1e6      	bne.n	800d800 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	3308      	adds	r3, #8
 800d838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	e853 3f00 	ldrex	r3, [r3]
 800d840:	60fb      	str	r3, [r7, #12]
   return(result);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f023 0301 	bic.w	r3, r3, #1
 800d848:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	3308      	adds	r3, #8
 800d850:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d852:	61fa      	str	r2, [r7, #28]
 800d854:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d856:	69b9      	ldr	r1, [r7, #24]
 800d858:	69fa      	ldr	r2, [r7, #28]
 800d85a:	e841 2300 	strex	r3, r2, [r1]
 800d85e:	617b      	str	r3, [r7, #20]
   return(result);
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1e5      	bne.n	800d832 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2220      	movs	r2, #32
 800d86a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2200      	movs	r2, #0
 800d872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d876:	2303      	movs	r3, #3
 800d878:	e012      	b.n	800d8a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2220      	movs	r2, #32
 800d87e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2220      	movs	r2, #32
 800d886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2200      	movs	r2, #0
 800d88e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d89e:	2300      	movs	r3, #0
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3758      	adds	r7, #88	@ 0x58
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	603b      	str	r3, [r7, #0]
 800d8b4:	4613      	mov	r3, r2
 800d8b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8b8:	e04f      	b.n	800d95a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c0:	d04b      	beq.n	800d95a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8c2:	f7f5 fc67 	bl	8003194 <HAL_GetTick>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	1ad3      	subs	r3, r2, r3
 800d8cc:	69ba      	ldr	r2, [r7, #24]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d302      	bcc.n	800d8d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d101      	bne.n	800d8dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d8d8:	2303      	movs	r3, #3
 800d8da:	e04e      	b.n	800d97a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f003 0304 	and.w	r3, r3, #4
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d037      	beq.n	800d95a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	2b80      	cmp	r3, #128	@ 0x80
 800d8ee:	d034      	beq.n	800d95a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	2b40      	cmp	r3, #64	@ 0x40
 800d8f4:	d031      	beq.n	800d95a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	69db      	ldr	r3, [r3, #28]
 800d8fc:	f003 0308 	and.w	r3, r3, #8
 800d900:	2b08      	cmp	r3, #8
 800d902:	d110      	bne.n	800d926 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2208      	movs	r2, #8
 800d90a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f000 f838 	bl	800d982 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2208      	movs	r2, #8
 800d916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2200      	movs	r2, #0
 800d91e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d922:	2301      	movs	r3, #1
 800d924:	e029      	b.n	800d97a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	69db      	ldr	r3, [r3, #28]
 800d92c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d930:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d934:	d111      	bne.n	800d95a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d93e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f000 f81e 	bl	800d982 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2220      	movs	r2, #32
 800d94a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2200      	movs	r2, #0
 800d952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d956:	2303      	movs	r3, #3
 800d958:	e00f      	b.n	800d97a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	69da      	ldr	r2, [r3, #28]
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	4013      	ands	r3, r2
 800d964:	68ba      	ldr	r2, [r7, #8]
 800d966:	429a      	cmp	r2, r3
 800d968:	bf0c      	ite	eq
 800d96a:	2301      	moveq	r3, #1
 800d96c:	2300      	movne	r3, #0
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	461a      	mov	r2, r3
 800d972:	79fb      	ldrb	r3, [r7, #7]
 800d974:	429a      	cmp	r2, r3
 800d976:	d0a0      	beq.n	800d8ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d978:	2300      	movs	r3, #0
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3710      	adds	r7, #16
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}

0800d982 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d982:	b480      	push	{r7}
 800d984:	b095      	sub	sp, #84	@ 0x54
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d992:	e853 3f00 	ldrex	r3, [r3]
 800d996:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d99a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d99e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800d9aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d9ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d9b0:	e841 2300 	strex	r3, r2, [r1]
 800d9b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d9b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d1e6      	bne.n	800d98a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	3308      	adds	r3, #8
 800d9c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9c4:	6a3b      	ldr	r3, [r7, #32]
 800d9c6:	e853 3f00 	ldrex	r3, [r3]
 800d9ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800d9cc:	69fb      	ldr	r3, [r7, #28]
 800d9ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d9d2:	f023 0301 	bic.w	r3, r3, #1
 800d9d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	3308      	adds	r3, #8
 800d9de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d9e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d9e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d9e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9e8:	e841 2300 	strex	r3, r2, [r1]
 800d9ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d1e3      	bne.n	800d9bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d118      	bne.n	800da2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	e853 3f00 	ldrex	r3, [r3]
 800da08:	60bb      	str	r3, [r7, #8]
   return(result);
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	f023 0310 	bic.w	r3, r3, #16
 800da10:	647b      	str	r3, [r7, #68]	@ 0x44
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	461a      	mov	r2, r3
 800da18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da1a:	61bb      	str	r3, [r7, #24]
 800da1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da1e:	6979      	ldr	r1, [r7, #20]
 800da20:	69ba      	ldr	r2, [r7, #24]
 800da22:	e841 2300 	strex	r3, r2, [r1]
 800da26:	613b      	str	r3, [r7, #16]
   return(result);
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d1e6      	bne.n	800d9fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2220      	movs	r2, #32
 800da32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2200      	movs	r2, #0
 800da3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800da42:	bf00      	nop
 800da44:	3754      	adds	r7, #84	@ 0x54
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr

0800da4e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800da4e:	b480      	push	{r7}
 800da50:	b085      	sub	sp, #20
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	d101      	bne.n	800da64 <HAL_UARTEx_DisableFifoMode+0x16>
 800da60:	2302      	movs	r3, #2
 800da62:	e027      	b.n	800dab4 <HAL_UARTEx_DisableFifoMode+0x66>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2201      	movs	r2, #1
 800da68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2224      	movs	r2, #36	@ 0x24
 800da70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f022 0201 	bic.w	r2, r2, #1
 800da8a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800da92:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	68fa      	ldr	r2, [r7, #12]
 800daa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2220      	movs	r2, #32
 800daa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dab2:	2300      	movs	r3, #0
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3714      	adds	r7, #20
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr

0800dac0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d101      	bne.n	800dad8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dad4:	2302      	movs	r3, #2
 800dad6:	e02d      	b.n	800db34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2201      	movs	r2, #1
 800dadc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2224      	movs	r2, #36	@ 0x24
 800dae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	681a      	ldr	r2, [r3, #0]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f022 0201 	bic.w	r2, r2, #1
 800dafe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	689b      	ldr	r3, [r3, #8]
 800db06:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	683a      	ldr	r2, [r7, #0]
 800db10:	430a      	orrs	r2, r1
 800db12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 f84f 	bl	800dbb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2220      	movs	r2, #32
 800db26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db32:	2300      	movs	r3, #0
}
 800db34:	4618      	mov	r0, r3
 800db36:	3710      	adds	r7, #16
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d101      	bne.n	800db54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800db50:	2302      	movs	r3, #2
 800db52:	e02d      	b.n	800dbb0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2201      	movs	r2, #1
 800db58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2224      	movs	r2, #36	@ 0x24
 800db60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	681a      	ldr	r2, [r3, #0]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f022 0201 	bic.w	r2, r2, #1
 800db7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	689b      	ldr	r3, [r3, #8]
 800db82:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	683a      	ldr	r2, [r7, #0]
 800db8c:	430a      	orrs	r2, r1
 800db8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 f811 	bl	800dbb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2220      	movs	r2, #32
 800dba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dbae:	2300      	movs	r3, #0
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3710      	adds	r7, #16
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b085      	sub	sp, #20
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d108      	bne.n	800dbda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dbd8:	e031      	b.n	800dc3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dbda:	2308      	movs	r3, #8
 800dbdc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dbde:	2308      	movs	r3, #8
 800dbe0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	689b      	ldr	r3, [r3, #8]
 800dbe8:	0e5b      	lsrs	r3, r3, #25
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	f003 0307 	and.w	r3, r3, #7
 800dbf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	0f5b      	lsrs	r3, r3, #29
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	f003 0307 	and.w	r3, r3, #7
 800dc00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dc02:	7bbb      	ldrb	r3, [r7, #14]
 800dc04:	7b3a      	ldrb	r2, [r7, #12]
 800dc06:	4911      	ldr	r1, [pc, #68]	@ (800dc4c <UARTEx_SetNbDataToProcess+0x94>)
 800dc08:	5c8a      	ldrb	r2, [r1, r2]
 800dc0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dc0e:	7b3a      	ldrb	r2, [r7, #12]
 800dc10:	490f      	ldr	r1, [pc, #60]	@ (800dc50 <UARTEx_SetNbDataToProcess+0x98>)
 800dc12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dc14:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc18:	b29a      	uxth	r2, r3
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dc20:	7bfb      	ldrb	r3, [r7, #15]
 800dc22:	7b7a      	ldrb	r2, [r7, #13]
 800dc24:	4909      	ldr	r1, [pc, #36]	@ (800dc4c <UARTEx_SetNbDataToProcess+0x94>)
 800dc26:	5c8a      	ldrb	r2, [r1, r2]
 800dc28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dc2c:	7b7a      	ldrb	r2, [r7, #13]
 800dc2e:	4908      	ldr	r1, [pc, #32]	@ (800dc50 <UARTEx_SetNbDataToProcess+0x98>)
 800dc30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dc32:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc36:	b29a      	uxth	r2, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dc3e:	bf00      	nop
 800dc40:	3714      	adds	r7, #20
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr
 800dc4a:	bf00      	nop
 800dc4c:	08014738 	.word	0x08014738
 800dc50:	08014740 	.word	0x08014740

0800dc54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc6c:	f043 0201 	orr.w	r2, r3, #1
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800dc74:	2300      	movs	r3, #0
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	370c      	adds	r7, #12
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr

0800dc82 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800dc82:	b084      	sub	sp, #16
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	f107 001c 	add.w	r0, r7, #28
 800dc90:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d101      	bne.n	800dc9e <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e008      	b.n	800dcb0 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f7ff ffd8 	bl	800dc54 <USB_CoreReset>
 800dca4:	4603      	mov	r3, r0
 800dca6:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800dcae:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dcba:	b004      	add	sp, #16
 800dcbc:	4770      	bx	lr

0800dcbe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800dcbe:	b480      	push	{r7}
 800dcc0:	b085      	sub	sp, #20
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800dccc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800dcd0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	68fa      	ldr	r2, [r7, #12]
 800dcd6:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800dcd8:	2300      	movs	r3, #0
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3714      	adds	r7, #20
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr

0800dce6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800dce6:	b480      	push	{r7}
 800dce8:	b085      	sub	sp, #20
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800dcee:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800dcf2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	43db      	mvns	r3, r3
 800dcfc:	401a      	ands	r2, r3
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3714      	adds	r7, #20
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr

0800dd10 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b083      	sub	sp, #12
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	460b      	mov	r3, r1
 800dd1a:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800dd1c:	78fb      	ldrb	r3, [r7, #3]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d106      	bne.n	800dd30 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	641a      	str	r2, [r3, #64]	@ 0x40
 800dd2e:	e00b      	b.n	800dd48 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800dd30:	78fb      	ldrb	r3, [r7, #3]
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d106      	bne.n	800dd44 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd3a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	641a      	str	r2, [r3, #64]	@ 0x40
 800dd42:	e001      	b.n	800dd48 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800dd44:	2301      	movs	r3, #1
 800dd46:	e000      	b.n	800dd4a <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800dd48:	2300      	movs	r3, #0
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	370c      	adds	r7, #12
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr

0800dd56 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800dd56:	b084      	sub	sp, #16
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b084      	sub	sp, #16
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	f107 001c 	add.w	r0, r7, #28
 800dd64:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd72:	f023 0201 	bic.w	r2, r3, #1
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800dd7a:	2100      	movs	r1, #0
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f7ff ffc7 	bl	800dd10 <USB_SetCurrentMode>
 800dd82:	4603      	mov	r3, r0
 800dd84:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800dd8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3710      	adds	r7, #16
 800dd92:	46bd      	mov	sp, r7
 800dd94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd98:	b004      	add	sp, #16
 800dd9a:	4770      	bx	lr

0800dd9c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b09f      	sub	sp, #124	@ 0x7c
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800dda6:	2300      	movs	r3, #0
 800dda8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	4413      	add	r3, r2
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	4ba0      	ldr	r3, [pc, #640]	@ (800e03c <USB_ActivateEndpoint+0x2a0>)
 800ddba:	4013      	ands	r3, r2
 800ddbc:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	78db      	ldrb	r3, [r3, #3]
 800ddc2:	2b03      	cmp	r3, #3
 800ddc4:	d819      	bhi.n	800ddfa <USB_ActivateEndpoint+0x5e>
 800ddc6:	a201      	add	r2, pc, #4	@ (adr r2, 800ddcc <USB_ActivateEndpoint+0x30>)
 800ddc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddcc:	0800dddd 	.word	0x0800dddd
 800ddd0:	0800ddf1 	.word	0x0800ddf1
 800ddd4:	0800de03 	.word	0x0800de03
 800ddd8:	0800dde7 	.word	0x0800dde7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800dddc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ddde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800dde2:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800dde4:	e00e      	b.n	800de04 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800dde6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dde8:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800ddec:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800ddee:	e009      	b.n	800de04 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ddf0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ddf2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ddf6:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800ddf8:	e004      	b.n	800de04 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800de00:	e000      	b.n	800de04 <USB_ActivateEndpoint+0x68>
      break;
 800de02:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800de04:	687a      	ldr	r2, [r7, #4]
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	441a      	add	r2, r3
 800de0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800de10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de18:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800de1a:	687a      	ldr	r2, [r7, #4]
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	4413      	add	r3, r2
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	4b86      	ldr	r3, [pc, #536]	@ (800e040 <USB_ActivateEndpoint+0x2a4>)
 800de28:	4013      	ands	r3, r2
 800de2a:	683a      	ldr	r2, [r7, #0]
 800de2c:	7812      	ldrb	r2, [r2, #0]
 800de2e:	4313      	orrs	r3, r2
 800de30:	66bb      	str	r3, [r7, #104]	@ 0x68
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	441a      	add	r2, r3
 800de3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de46:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	7b1b      	ldrb	r3, [r3, #12]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	f040 8177 	bne.w	800e140 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	785b      	ldrb	r3, [r3, #1]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d079      	beq.n	800df4e <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	00db      	lsls	r3, r3, #3
 800de60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	00db      	lsls	r3, r3, #3
 800de70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de78:	0c12      	lsrs	r2, r2, #16
 800de7a:	0412      	lsls	r2, r2, #16
 800de7c:	601a      	str	r2, [r3, #0]
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	00db      	lsls	r3, r3, #3
 800de84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de8c:	6819      	ldr	r1, [r3, #0]
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	88db      	ldrh	r3, [r3, #6]
 800de92:	089b      	lsrs	r3, r3, #2
 800de94:	b29b      	uxth	r3, r3
 800de96:	009a      	lsls	r2, r3, #2
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	00db      	lsls	r3, r3, #3
 800de9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dea2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dea6:	430a      	orrs	r2, r1
 800dea8:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	4413      	add	r3, r2
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	61bb      	str	r3, [r7, #24]
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d013      	beq.n	800deea <USB_ActivateEndpoint+0x14e>
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	4413      	add	r3, r2
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	4b5c      	ldr	r3, [pc, #368]	@ (800e040 <USB_ActivateEndpoint+0x2a4>)
 800ded0:	4013      	ands	r3, r2
 800ded2:	617b      	str	r3, [r7, #20]
 800ded4:	687a      	ldr	r2, [r7, #4]
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	009b      	lsls	r3, r3, #2
 800dedc:	441a      	add	r2, r3
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dee4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dee8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	78db      	ldrb	r3, [r3, #3]
 800deee:	2b01      	cmp	r3, #1
 800def0:	d018      	beq.n	800df24 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	009b      	lsls	r3, r3, #2
 800defa:	4413      	add	r3, r2
 800defc:	681a      	ldr	r2, [r3, #0]
 800defe:	4b51      	ldr	r3, [pc, #324]	@ (800e044 <USB_ActivateEndpoint+0x2a8>)
 800df00:	4013      	ands	r3, r2
 800df02:	60fb      	str	r3, [r7, #12]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	f083 0320 	eor.w	r3, r3, #32
 800df0a:	60fb      	str	r3, [r7, #12]
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	009b      	lsls	r3, r3, #2
 800df14:	441a      	add	r2, r3
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df20:	6013      	str	r3, [r2, #0]
 800df22:	e28c      	b.n	800e43e <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800df24:	687a      	ldr	r2, [r7, #4]
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	4413      	add	r3, r2
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	4b44      	ldr	r3, [pc, #272]	@ (800e044 <USB_ActivateEndpoint+0x2a8>)
 800df32:	4013      	ands	r3, r2
 800df34:	613b      	str	r3, [r7, #16]
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	441a      	add	r2, r3
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df4a:	6013      	str	r3, [r2, #0]
 800df4c:	e277      	b.n	800e43e <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	00db      	lsls	r3, r3, #3
 800df54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df5c:	685a      	ldr	r2, [r3, #4]
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	00db      	lsls	r3, r3, #3
 800df64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df6c:	0c12      	lsrs	r2, r2, #16
 800df6e:	0412      	lsls	r2, r2, #16
 800df70:	605a      	str	r2, [r3, #4]
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	00db      	lsls	r3, r3, #3
 800df78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df80:	6859      	ldr	r1, [r3, #4]
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	88db      	ldrh	r3, [r3, #6]
 800df86:	089b      	lsrs	r3, r3, #2
 800df88:	b29b      	uxth	r3, r3
 800df8a:	009a      	lsls	r2, r3, #2
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	00db      	lsls	r3, r3, #3
 800df92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df9a:	430a      	orrs	r2, r1
 800df9c:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	00db      	lsls	r3, r3, #3
 800dfa4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfa8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfac:	685a      	ldr	r2, [r3, #4]
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	00db      	lsls	r3, r3, #3
 800dfb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfbc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800dfc0:	605a      	str	r2, [r3, #4]
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	691b      	ldr	r3, [r3, #16]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d112      	bne.n	800dff0 <USB_ActivateEndpoint+0x254>
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	00db      	lsls	r3, r3, #3
 800dfd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfd4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfd8:	685a      	ldr	r2, [r3, #4]
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	00db      	lsls	r3, r3, #3
 800dfe0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfe4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfe8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dfec:	605a      	str	r2, [r3, #4]
 800dfee:	e04d      	b.n	800e08c <USB_ActivateEndpoint+0x2f0>
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	691b      	ldr	r3, [r3, #16]
 800dff4:	2b3e      	cmp	r3, #62	@ 0x3e
 800dff6:	d827      	bhi.n	800e048 <USB_ActivateEndpoint+0x2ac>
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	691b      	ldr	r3, [r3, #16]
 800dffc:	085b      	lsrs	r3, r3, #1
 800dffe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	691b      	ldr	r3, [r3, #16]
 800e004:	f003 0301 	and.w	r3, r3, #1
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d002      	beq.n	800e012 <USB_ActivateEndpoint+0x276>
 800e00c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e00e:	3301      	adds	r3, #1
 800e010:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	00db      	lsls	r3, r3, #3
 800e018:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e01c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e020:	6859      	ldr	r1, [r3, #4]
 800e022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e024:	069a      	lsls	r2, r3, #26
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	00db      	lsls	r3, r3, #3
 800e02c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e030:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e034:	430a      	orrs	r2, r1
 800e036:	605a      	str	r2, [r3, #4]
 800e038:	e028      	b.n	800e08c <USB_ActivateEndpoint+0x2f0>
 800e03a:	bf00      	nop
 800e03c:	07ff898f 	.word	0x07ff898f
 800e040:	07ff8f8f 	.word	0x07ff8f8f
 800e044:	07ff8fbf 	.word	0x07ff8fbf
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	691b      	ldr	r3, [r3, #16]
 800e04c:	095b      	lsrs	r3, r3, #5
 800e04e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	691b      	ldr	r3, [r3, #16]
 800e054:	f003 031f 	and.w	r3, r3, #31
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d102      	bne.n	800e062 <USB_ActivateEndpoint+0x2c6>
 800e05c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e05e:	3b01      	subs	r3, #1
 800e060:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	00db      	lsls	r3, r3, #3
 800e068:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e06c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e070:	685a      	ldr	r2, [r3, #4]
 800e072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e074:	069b      	lsls	r3, r3, #26
 800e076:	431a      	orrs	r2, r3
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	00db      	lsls	r3, r3, #3
 800e07e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e082:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e086:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e08a:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	4413      	add	r3, r2
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e09c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d013      	beq.n	800e0cc <USB_ActivateEndpoint+0x330>
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	4413      	add	r3, r2
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	4b9c      	ldr	r3, [pc, #624]	@ (800e324 <USB_ActivateEndpoint+0x588>)
 800e0b2:	4013      	ands	r3, r2
 800e0b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0b6:	687a      	ldr	r2, [r7, #4]
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	441a      	add	r2, r3
 800e0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e0c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0ca:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d11c      	bne.n	800e10e <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	4413      	add	r3, r2
 800e0de:	681a      	ldr	r2, [r3, #0]
 800e0e0:	4b91      	ldr	r3, [pc, #580]	@ (800e328 <USB_ActivateEndpoint+0x58c>)
 800e0e2:	4013      	ands	r3, r2
 800e0e4:	61fb      	str	r3, [r7, #28]
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e0ec:	61fb      	str	r3, [r7, #28]
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e0f4:	61fb      	str	r3, [r7, #28]
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	441a      	add	r2, r3
 800e100:	69fb      	ldr	r3, [r7, #28]
 800e102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e10a:	6013      	str	r3, [r2, #0]
 800e10c:	e197      	b.n	800e43e <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	4413      	add	r3, r2
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	4b83      	ldr	r3, [pc, #524]	@ (800e328 <USB_ActivateEndpoint+0x58c>)
 800e11c:	4013      	ands	r3, r2
 800e11e:	623b      	str	r3, [r7, #32]
 800e120:	6a3b      	ldr	r3, [r7, #32]
 800e122:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e126:	623b      	str	r3, [r7, #32]
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	441a      	add	r2, r3
 800e132:	6a3b      	ldr	r3, [r7, #32]
 800e134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e13c:	6013      	str	r3, [r2, #0]
 800e13e:	e17e      	b.n	800e43e <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	78db      	ldrb	r3, [r3, #3]
 800e144:	2b02      	cmp	r3, #2
 800e146:	d114      	bne.n	800e172 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	4413      	add	r3, r2
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	4b73      	ldr	r3, [pc, #460]	@ (800e324 <USB_ActivateEndpoint+0x588>)
 800e156:	4013      	ands	r3, r2
 800e158:	663b      	str	r3, [r7, #96]	@ 0x60
 800e15a:	687a      	ldr	r2, [r7, #4]
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	781b      	ldrb	r3, [r3, #0]
 800e160:	009b      	lsls	r3, r3, #2
 800e162:	441a      	add	r2, r3
 800e164:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e166:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e16a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e16e:	6013      	str	r3, [r2, #0]
 800e170:	e013      	b.n	800e19a <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	009b      	lsls	r3, r3, #2
 800e17a:	4413      	add	r3, r2
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	4b6b      	ldr	r3, [pc, #428]	@ (800e32c <USB_ActivateEndpoint+0x590>)
 800e180:	4013      	ands	r3, r2
 800e182:	667b      	str	r3, [r7, #100]	@ 0x64
 800e184:	687a      	ldr	r2, [r7, #4]
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	441a      	add	r2, r3
 800e18e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e198:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	00db      	lsls	r3, r3, #3
 800e1a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	00db      	lsls	r3, r3, #3
 800e1b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1b8:	0c12      	lsrs	r2, r2, #16
 800e1ba:	0412      	lsls	r2, r2, #16
 800e1bc:	601a      	str	r2, [r3, #0]
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	00db      	lsls	r3, r3, #3
 800e1c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1cc:	6819      	ldr	r1, [r3, #0]
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	891b      	ldrh	r3, [r3, #8]
 800e1d2:	089b      	lsrs	r3, r3, #2
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	009a      	lsls	r2, r3, #2
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	00db      	lsls	r3, r3, #3
 800e1de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1e6:	430a      	orrs	r2, r1
 800e1e8:	601a      	str	r2, [r3, #0]
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	781b      	ldrb	r3, [r3, #0]
 800e1ee:	00db      	lsls	r3, r3, #3
 800e1f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1f8:	685a      	ldr	r2, [r3, #4]
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	00db      	lsls	r3, r3, #3
 800e200:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e204:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e208:	0c12      	lsrs	r2, r2, #16
 800e20a:	0412      	lsls	r2, r2, #16
 800e20c:	605a      	str	r2, [r3, #4]
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	00db      	lsls	r3, r3, #3
 800e214:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e218:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e21c:	6859      	ldr	r1, [r3, #4]
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	895b      	ldrh	r3, [r3, #10]
 800e222:	089b      	lsrs	r3, r3, #2
 800e224:	b29b      	uxth	r3, r3
 800e226:	009a      	lsls	r2, r3, #2
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	00db      	lsls	r3, r3, #3
 800e22e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e232:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e236:	430a      	orrs	r2, r1
 800e238:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	785b      	ldrb	r3, [r3, #1]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d178      	bne.n	800e334 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e242:	687a      	ldr	r2, [r7, #4]
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	4413      	add	r3, r2
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e256:	2b00      	cmp	r3, #0
 800e258:	d013      	beq.n	800e282 <USB_ActivateEndpoint+0x4e6>
 800e25a:	687a      	ldr	r2, [r7, #4]
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	4413      	add	r3, r2
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	4b2f      	ldr	r3, [pc, #188]	@ (800e324 <USB_ActivateEndpoint+0x588>)
 800e268:	4013      	ands	r3, r2
 800e26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	009b      	lsls	r3, r3, #2
 800e274:	441a      	add	r2, r3
 800e276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e278:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e27c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e280:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	009b      	lsls	r3, r3, #2
 800e28a:	4413      	add	r3, r2
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e296:	2b00      	cmp	r3, #0
 800e298:	d013      	beq.n	800e2c2 <USB_ActivateEndpoint+0x526>
 800e29a:	687a      	ldr	r2, [r7, #4]
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	4413      	add	r3, r2
 800e2a4:	681a      	ldr	r2, [r3, #0]
 800e2a6:	4b1f      	ldr	r3, [pc, #124]	@ (800e324 <USB_ActivateEndpoint+0x588>)
 800e2a8:	4013      	ands	r3, r2
 800e2aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2ac:	687a      	ldr	r2, [r7, #4]
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	441a      	add	r2, r3
 800e2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e2c0:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	009b      	lsls	r3, r3, #2
 800e2ca:	4413      	add	r3, r2
 800e2cc:	681a      	ldr	r2, [r3, #0]
 800e2ce:	4b16      	ldr	r3, [pc, #88]	@ (800e328 <USB_ActivateEndpoint+0x58c>)
 800e2d0:	4013      	ands	r3, r2
 800e2d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800e2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e2da:	633b      	str	r3, [r7, #48]	@ 0x30
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e2e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	441a      	add	r2, r3
 800e2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2f8:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	009b      	lsls	r3, r3, #2
 800e302:	4413      	add	r3, r2
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	4b0a      	ldr	r3, [pc, #40]	@ (800e330 <USB_ActivateEndpoint+0x594>)
 800e308:	4013      	ands	r3, r2
 800e30a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e30c:	687a      	ldr	r2, [r7, #4]
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	441a      	add	r2, r3
 800e316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e318:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e31c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e320:	6013      	str	r3, [r2, #0]
 800e322:	e08c      	b.n	800e43e <USB_ActivateEndpoint+0x6a2>
 800e324:	07ff8f8f 	.word	0x07ff8f8f
 800e328:	07ffbf8f 	.word	0x07ffbf8f
 800e32c:	07ff8e8f 	.word	0x07ff8e8f
 800e330:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	4413      	add	r3, r2
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e344:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d013      	beq.n	800e374 <USB_ActivateEndpoint+0x5d8>
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	4413      	add	r3, r2
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	4b3d      	ldr	r3, [pc, #244]	@ (800e450 <USB_ActivateEndpoint+0x6b4>)
 800e35a:	4013      	ands	r3, r2
 800e35c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	441a      	add	r2, r3
 800e368:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e36a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e36e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e372:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	4413      	add	r3, r2
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	657b      	str	r3, [r7, #84]	@ 0x54
 800e382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d013      	beq.n	800e3b4 <USB_ActivateEndpoint+0x618>
 800e38c:	687a      	ldr	r2, [r7, #4]
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	4413      	add	r3, r2
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	4b2d      	ldr	r3, [pc, #180]	@ (800e450 <USB_ActivateEndpoint+0x6b4>)
 800e39a:	4013      	ands	r3, r2
 800e39c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	441a      	add	r2, r3
 800e3a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e3b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	78db      	ldrb	r3, [r3, #3]
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	d018      	beq.n	800e3ee <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	4413      	add	r3, r2
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	4b22      	ldr	r3, [pc, #136]	@ (800e454 <USB_ActivateEndpoint+0x6b8>)
 800e3ca:	4013      	ands	r3, r2
 800e3cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e3ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3d0:	f083 0320 	eor.w	r3, r3, #32
 800e3d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	781b      	ldrb	r3, [r3, #0]
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	441a      	add	r2, r3
 800e3e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3ea:	6013      	str	r3, [r2, #0]
 800e3ec:	e013      	b.n	800e416 <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	4413      	add	r3, r2
 800e3f8:	681a      	ldr	r2, [r3, #0]
 800e3fa:	4b16      	ldr	r3, [pc, #88]	@ (800e454 <USB_ActivateEndpoint+0x6b8>)
 800e3fc:	4013      	ands	r3, r2
 800e3fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	441a      	add	r2, r3
 800e40a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e40c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e414:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	009b      	lsls	r3, r3, #2
 800e41e:	4413      	add	r3, r2
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	4b0d      	ldr	r3, [pc, #52]	@ (800e458 <USB_ActivateEndpoint+0x6bc>)
 800e424:	4013      	ands	r3, r2
 800e426:	647b      	str	r3, [r7, #68]	@ 0x44
 800e428:	687a      	ldr	r2, [r7, #4]
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	441a      	add	r2, r3
 800e432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e434:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e43c:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800e43e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800e442:	4618      	mov	r0, r3
 800e444:	377c      	adds	r7, #124	@ 0x7c
 800e446:	46bd      	mov	sp, r7
 800e448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44c:	4770      	bx	lr
 800e44e:	bf00      	nop
 800e450:	07ff8f8f 	.word	0x07ff8f8f
 800e454:	07ff8fbf 	.word	0x07ff8fbf
 800e458:	07ffbf8f 	.word	0x07ffbf8f

0800e45c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b097      	sub	sp, #92	@ 0x5c
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	7b1b      	ldrb	r3, [r3, #12]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d16d      	bne.n	800e54a <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	785b      	ldrb	r3, [r3, #1]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d034      	beq.n	800e4e0 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	009b      	lsls	r3, r3, #2
 800e47e:	4413      	add	r3, r2
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	613b      	str	r3, [r7, #16]
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d013      	beq.n	800e4b6 <USB_DeactivateEndpoint+0x5a>
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	4413      	add	r3, r2
 800e498:	681a      	ldr	r2, [r3, #0]
 800e49a:	4b6d      	ldr	r3, [pc, #436]	@ (800e650 <USB_DeactivateEndpoint+0x1f4>)
 800e49c:	4013      	ands	r3, r2
 800e49e:	60fb      	str	r3, [r7, #12]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	009b      	lsls	r3, r3, #2
 800e4a8:	441a      	add	r2, r3
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e4b4:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	4413      	add	r3, r2
 800e4c0:	681a      	ldr	r2, [r3, #0]
 800e4c2:	4b64      	ldr	r3, [pc, #400]	@ (800e654 <USB_DeactivateEndpoint+0x1f8>)
 800e4c4:	4013      	ands	r3, r2
 800e4c6:	60bb      	str	r3, [r7, #8]
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	441a      	add	r2, r3
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4dc:	6013      	str	r3, [r2, #0]
 800e4de:	e139      	b.n	800e754 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	009b      	lsls	r3, r3, #2
 800e4e8:	4413      	add	r3, r2
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	61fb      	str	r3, [r7, #28]
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d013      	beq.n	800e520 <USB_DeactivateEndpoint+0xc4>
 800e4f8:	687a      	ldr	r2, [r7, #4]
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	781b      	ldrb	r3, [r3, #0]
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	4413      	add	r3, r2
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	4b52      	ldr	r3, [pc, #328]	@ (800e650 <USB_DeactivateEndpoint+0x1f4>)
 800e506:	4013      	ands	r3, r2
 800e508:	61bb      	str	r3, [r7, #24]
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	441a      	add	r2, r3
 800e514:	69bb      	ldr	r3, [r7, #24]
 800e516:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e51a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e51e:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	4413      	add	r3, r2
 800e52a:	681a      	ldr	r2, [r3, #0]
 800e52c:	4b4a      	ldr	r3, [pc, #296]	@ (800e658 <USB_DeactivateEndpoint+0x1fc>)
 800e52e:	4013      	ands	r3, r2
 800e530:	617b      	str	r3, [r7, #20]
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	441a      	add	r2, r3
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e546:	6013      	str	r3, [r2, #0]
 800e548:	e104      	b.n	800e754 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	785b      	ldrb	r3, [r3, #1]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f040 8084 	bne.w	800e65c <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	009b      	lsls	r3, r3, #2
 800e55c:	4413      	add	r3, r2
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e564:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d013      	beq.n	800e594 <USB_DeactivateEndpoint+0x138>
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	4413      	add	r3, r2
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	4b35      	ldr	r3, [pc, #212]	@ (800e650 <USB_DeactivateEndpoint+0x1f4>)
 800e57a:	4013      	ands	r3, r2
 800e57c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	009b      	lsls	r3, r3, #2
 800e586:	441a      	add	r2, r3
 800e588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e58a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e58e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e592:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	009b      	lsls	r3, r3, #2
 800e59c:	4413      	add	r3, r2
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	633b      	str	r3, [r7, #48]	@ 0x30
 800e5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d013      	beq.n	800e5d4 <USB_DeactivateEndpoint+0x178>
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	009b      	lsls	r3, r3, #2
 800e5b4:	4413      	add	r3, r2
 800e5b6:	681a      	ldr	r2, [r3, #0]
 800e5b8:	4b25      	ldr	r3, [pc, #148]	@ (800e650 <USB_DeactivateEndpoint+0x1f4>)
 800e5ba:	4013      	ands	r3, r2
 800e5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	441a      	add	r2, r3
 800e5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e5ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e5d2:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	009b      	lsls	r3, r3, #2
 800e5dc:	4413      	add	r3, r2
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	4b1b      	ldr	r3, [pc, #108]	@ (800e650 <USB_DeactivateEndpoint+0x1f4>)
 800e5e2:	4013      	ands	r3, r2
 800e5e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	441a      	add	r2, r3
 800e5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e5f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e5fa:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e5fc:	687a      	ldr	r2, [r7, #4]
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	009b      	lsls	r3, r3, #2
 800e604:	4413      	add	r3, r2
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	4b13      	ldr	r3, [pc, #76]	@ (800e658 <USB_DeactivateEndpoint+0x1fc>)
 800e60a:	4013      	ands	r3, r2
 800e60c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	009b      	lsls	r3, r3, #2
 800e616:	441a      	add	r2, r3
 800e618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e61a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e61e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e622:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	009b      	lsls	r3, r3, #2
 800e62c:	4413      	add	r3, r2
 800e62e:	681a      	ldr	r2, [r3, #0]
 800e630:	4b08      	ldr	r3, [pc, #32]	@ (800e654 <USB_DeactivateEndpoint+0x1f8>)
 800e632:	4013      	ands	r3, r2
 800e634:	623b      	str	r3, [r7, #32]
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	441a      	add	r2, r3
 800e640:	6a3b      	ldr	r3, [r7, #32]
 800e642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e64a:	6013      	str	r3, [r2, #0]
 800e64c:	e082      	b.n	800e754 <USB_DeactivateEndpoint+0x2f8>
 800e64e:	bf00      	nop
 800e650:	07ff8f8f 	.word	0x07ff8f8f
 800e654:	07ff8fbf 	.word	0x07ff8fbf
 800e658:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	009b      	lsls	r3, r3, #2
 800e664:	4413      	add	r3, r2
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	657b      	str	r3, [r7, #84]	@ 0x54
 800e66a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e66c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e670:	2b00      	cmp	r3, #0
 800e672:	d013      	beq.n	800e69c <USB_DeactivateEndpoint+0x240>
 800e674:	687a      	ldr	r2, [r7, #4]
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	009b      	lsls	r3, r3, #2
 800e67c:	4413      	add	r3, r2
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	4b38      	ldr	r3, [pc, #224]	@ (800e764 <USB_DeactivateEndpoint+0x308>)
 800e682:	4013      	ands	r3, r2
 800e684:	653b      	str	r3, [r7, #80]	@ 0x50
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	441a      	add	r2, r3
 800e690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e692:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e69a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	4413      	add	r3, r2
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e6aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d013      	beq.n	800e6dc <USB_DeactivateEndpoint+0x280>
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	4413      	add	r3, r2
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	4b28      	ldr	r3, [pc, #160]	@ (800e764 <USB_DeactivateEndpoint+0x308>)
 800e6c2:	4013      	ands	r3, r2
 800e6c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	441a      	add	r2, r3
 800e6d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e6d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e6da:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	4413      	add	r3, r2
 800e6e6:	681a      	ldr	r2, [r3, #0]
 800e6e8:	4b1e      	ldr	r3, [pc, #120]	@ (800e764 <USB_DeactivateEndpoint+0x308>)
 800e6ea:	4013      	ands	r3, r2
 800e6ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	441a      	add	r2, r3
 800e6f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e6fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e702:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	4413      	add	r3, r2
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	4b15      	ldr	r3, [pc, #84]	@ (800e768 <USB_DeactivateEndpoint+0x30c>)
 800e712:	4013      	ands	r3, r2
 800e714:	643b      	str	r3, [r7, #64]	@ 0x40
 800e716:	687a      	ldr	r2, [r7, #4]
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	441a      	add	r2, r3
 800e720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e72a:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	4413      	add	r3, r2
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	4b0c      	ldr	r3, [pc, #48]	@ (800e76c <USB_DeactivateEndpoint+0x310>)
 800e73a:	4013      	ands	r3, r2
 800e73c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	009b      	lsls	r3, r3, #2
 800e746:	441a      	add	r2, r3
 800e748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e74a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e74e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e752:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e754:	2300      	movs	r3, #0
}
 800e756:	4618      	mov	r0, r3
 800e758:	375c      	adds	r7, #92	@ 0x5c
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr
 800e762:	bf00      	nop
 800e764:	07ff8f8f 	.word	0x07ff8f8f
 800e768:	07ff8fbf 	.word	0x07ff8fbf
 800e76c:	07ffbf8f 	.word	0x07ffbf8f

0800e770 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b096      	sub	sp, #88	@ 0x58
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	785b      	ldrb	r3, [r3, #1]
 800e77e:	2b01      	cmp	r3, #1
 800e780:	f040 84ed 	bne.w	800f15e <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	699a      	ldr	r2, [r3, #24]
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	691b      	ldr	r3, [r3, #16]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d903      	bls.n	800e798 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	691b      	ldr	r3, [r3, #16]
 800e794:	657b      	str	r3, [r7, #84]	@ 0x54
 800e796:	e002      	b.n	800e79e <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	699b      	ldr	r3, [r3, #24]
 800e79c:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	7b1b      	ldrb	r3, [r3, #12]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d12e      	bne.n	800e804 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	6959      	ldr	r1, [r3, #20]
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	88da      	ldrh	r2, [r3, #6]
 800e7ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f001 f963 	bl	800fa7e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	00db      	lsls	r3, r3, #3
 800e7be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e7c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e7c6:	681a      	ldr	r2, [r3, #0]
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	00db      	lsls	r3, r3, #3
 800e7ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e7d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e7d6:	b292      	uxth	r2, r2
 800e7d8:	601a      	str	r2, [r3, #0]
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	781b      	ldrb	r3, [r3, #0]
 800e7de:	00db      	lsls	r3, r3, #3
 800e7e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e7e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e7e8:	6819      	ldr	r1, [r3, #0]
 800e7ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7ec:	041a      	lsls	r2, r3, #16
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	00db      	lsls	r3, r3, #3
 800e7f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e7f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e7fc:	430a      	orrs	r2, r1
 800e7fe:	601a      	str	r2, [r3, #0]
 800e800:	f000 bc90 	b.w	800f124 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	78db      	ldrb	r3, [r3, #3]
 800e808:	2b02      	cmp	r3, #2
 800e80a:	f040 8332 	bne.w	800ee72 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	6a1a      	ldr	r2, [r3, #32]
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	691b      	ldr	r3, [r3, #16]
 800e816:	429a      	cmp	r2, r3
 800e818:	f240 82e4 	bls.w	800ede4 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	009b      	lsls	r3, r3, #2
 800e824:	4413      	add	r3, r2
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	4ba4      	ldr	r3, [pc, #656]	@ (800eabc <USB_EPStartXfer+0x34c>)
 800e82a:	4013      	ands	r3, r2
 800e82c:	613b      	str	r3, [r7, #16]
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	441a      	add	r2, r3
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e83e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e842:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	6a1a      	ldr	r2, [r3, #32]
 800e848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e84a:	1ad2      	subs	r2, r2, r3
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	4413      	add	r3, r2
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e860:	2b00      	cmp	r3, #0
 800e862:	f000 8161 	beq.w	800eb28 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	785b      	ldrb	r3, [r3, #1]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d16a      	bne.n	800e944 <USB_EPStartXfer+0x1d4>
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	00db      	lsls	r3, r3, #3
 800e874:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e878:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e87c:	685a      	ldr	r2, [r3, #4]
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	00db      	lsls	r3, r3, #3
 800e884:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e888:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e88c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e890:	605a      	str	r2, [r3, #4]
 800e892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e894:	2b00      	cmp	r3, #0
 800e896:	d112      	bne.n	800e8be <USB_EPStartXfer+0x14e>
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	00db      	lsls	r3, r3, #3
 800e89e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8a6:	685a      	ldr	r2, [r3, #4]
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	00db      	lsls	r3, r3, #3
 800e8ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8b6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e8ba:	605a      	str	r2, [r3, #4]
 800e8bc:	e06a      	b.n	800e994 <USB_EPStartXfer+0x224>
 800e8be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8c0:	2b3e      	cmp	r3, #62	@ 0x3e
 800e8c2:	d81e      	bhi.n	800e902 <USB_EPStartXfer+0x192>
 800e8c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8c6:	085b      	lsrs	r3, r3, #1
 800e8c8:	653b      	str	r3, [r7, #80]	@ 0x50
 800e8ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8cc:	f003 0301 	and.w	r3, r3, #1
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d002      	beq.n	800e8da <USB_EPStartXfer+0x16a>
 800e8d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	653b      	str	r3, [r7, #80]	@ 0x50
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	00db      	lsls	r3, r3, #3
 800e8e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8e8:	6859      	ldr	r1, [r3, #4]
 800e8ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8ec:	069a      	lsls	r2, r3, #26
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	00db      	lsls	r3, r3, #3
 800e8f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8fc:	430a      	orrs	r2, r1
 800e8fe:	605a      	str	r2, [r3, #4]
 800e900:	e048      	b.n	800e994 <USB_EPStartXfer+0x224>
 800e902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e904:	095b      	lsrs	r3, r3, #5
 800e906:	653b      	str	r3, [r7, #80]	@ 0x50
 800e908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e90a:	f003 031f 	and.w	r3, r3, #31
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d102      	bne.n	800e918 <USB_EPStartXfer+0x1a8>
 800e912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e914:	3b01      	subs	r3, #1
 800e916:	653b      	str	r3, [r7, #80]	@ 0x50
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	00db      	lsls	r3, r3, #3
 800e91e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e922:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e926:	685a      	ldr	r2, [r3, #4]
 800e928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e92a:	069b      	lsls	r3, r3, #26
 800e92c:	431a      	orrs	r2, r3
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	00db      	lsls	r3, r3, #3
 800e934:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e938:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e93c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e940:	605a      	str	r2, [r3, #4]
 800e942:	e027      	b.n	800e994 <USB_EPStartXfer+0x224>
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	785b      	ldrb	r3, [r3, #1]
 800e948:	2b01      	cmp	r3, #1
 800e94a:	d123      	bne.n	800e994 <USB_EPStartXfer+0x224>
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	00db      	lsls	r3, r3, #3
 800e952:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e956:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e95a:	685a      	ldr	r2, [r3, #4]
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	781b      	ldrb	r3, [r3, #0]
 800e960:	00db      	lsls	r3, r3, #3
 800e962:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e966:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e96a:	b292      	uxth	r2, r2
 800e96c:	605a      	str	r2, [r3, #4]
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	00db      	lsls	r3, r3, #3
 800e974:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e978:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e97c:	6859      	ldr	r1, [r3, #4]
 800e97e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e980:	041a      	lsls	r2, r3, #16
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	00db      	lsls	r3, r3, #3
 800e988:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e98c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e990:	430a      	orrs	r2, r1
 800e992:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	895b      	ldrh	r3, [r3, #10]
 800e998:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	6959      	ldr	r1, [r3, #20]
 800e99e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	8b7a      	ldrh	r2, [r7, #26]
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f001 f86a 	bl	800fa7e <USB_WritePMA>
            ep->xfer_buff += len;
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	695a      	ldr	r2, [r3, #20]
 800e9ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9b0:	441a      	add	r2, r3
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	6a1a      	ldr	r2, [r3, #32]
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	691b      	ldr	r3, [r3, #16]
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d906      	bls.n	800e9d0 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	6a1a      	ldr	r2, [r3, #32]
 800e9c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9c8:	1ad2      	subs	r2, r2, r3
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	621a      	str	r2, [r3, #32]
 800e9ce:	e005      	b.n	800e9dc <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	6a1b      	ldr	r3, [r3, #32]
 800e9d4:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	785b      	ldrb	r3, [r3, #1]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d16d      	bne.n	800eac0 <USB_EPStartXfer+0x350>
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	00db      	lsls	r3, r3, #3
 800e9ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	781b      	ldrb	r3, [r3, #0]
 800e9f8:	00db      	lsls	r3, r3, #3
 800e9fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea02:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ea06:	601a      	str	r2, [r3, #0]
 800ea08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d112      	bne.n	800ea34 <USB_EPStartXfer+0x2c4>
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	00db      	lsls	r3, r3, #3
 800ea14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea1c:	681a      	ldr	r2, [r3, #0]
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	00db      	lsls	r3, r3, #3
 800ea24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea2c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ea30:	601a      	str	r2, [r3, #0]
 800ea32:	e06d      	b.n	800eb10 <USB_EPStartXfer+0x3a0>
 800ea34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea36:	2b3e      	cmp	r3, #62	@ 0x3e
 800ea38:	d81e      	bhi.n	800ea78 <USB_EPStartXfer+0x308>
 800ea3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea3c:	085b      	lsrs	r3, r3, #1
 800ea3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea42:	f003 0301 	and.w	r3, r3, #1
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d002      	beq.n	800ea50 <USB_EPStartXfer+0x2e0>
 800ea4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	00db      	lsls	r3, r3, #3
 800ea56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea5e:	6819      	ldr	r1, [r3, #0]
 800ea60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea62:	069a      	lsls	r2, r3, #26
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	00db      	lsls	r3, r3, #3
 800ea6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea72:	430a      	orrs	r2, r1
 800ea74:	601a      	str	r2, [r3, #0]
 800ea76:	e04b      	b.n	800eb10 <USB_EPStartXfer+0x3a0>
 800ea78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea7a:	095b      	lsrs	r3, r3, #5
 800ea7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea80:	f003 031f 	and.w	r3, r3, #31
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d102      	bne.n	800ea8e <USB_EPStartXfer+0x31e>
 800ea88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea8a:	3b01      	subs	r3, #1
 800ea8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	00db      	lsls	r3, r3, #3
 800ea94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eaa0:	069b      	lsls	r3, r3, #26
 800eaa2:	431a      	orrs	r2, r3
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	00db      	lsls	r3, r3, #3
 800eaaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eaae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eab2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800eab6:	601a      	str	r2, [r3, #0]
 800eab8:	e02a      	b.n	800eb10 <USB_EPStartXfer+0x3a0>
 800eaba:	bf00      	nop
 800eabc:	07ff8f8f 	.word	0x07ff8f8f
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	785b      	ldrb	r3, [r3, #1]
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d123      	bne.n	800eb10 <USB_EPStartXfer+0x3a0>
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	00db      	lsls	r3, r3, #3
 800eace:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ead2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	00db      	lsls	r3, r3, #3
 800eade:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eae2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eae6:	b292      	uxth	r2, r2
 800eae8:	601a      	str	r2, [r3, #0]
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	00db      	lsls	r3, r3, #3
 800eaf0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eaf4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eaf8:	6819      	ldr	r1, [r3, #0]
 800eafa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eafc:	041a      	lsls	r2, r3, #16
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	781b      	ldrb	r3, [r3, #0]
 800eb02:	00db      	lsls	r3, r3, #3
 800eb04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb0c:	430a      	orrs	r2, r1
 800eb0e:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	891b      	ldrh	r3, [r3, #8]
 800eb14:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	6959      	ldr	r1, [r3, #20]
 800eb1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb1c:	b29b      	uxth	r3, r3
 800eb1e:	8b7a      	ldrh	r2, [r7, #26]
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f000 ffac 	bl	800fa7e <USB_WritePMA>
 800eb26:	e2fd      	b.n	800f124 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	785b      	ldrb	r3, [r3, #1]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d16a      	bne.n	800ec06 <USB_EPStartXfer+0x496>
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	00db      	lsls	r3, r3, #3
 800eb36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb3e:	681a      	ldr	r2, [r3, #0]
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	00db      	lsls	r3, r3, #3
 800eb46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb4e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800eb52:	601a      	str	r2, [r3, #0]
 800eb54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d112      	bne.n	800eb80 <USB_EPStartXfer+0x410>
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	00db      	lsls	r3, r3, #3
 800eb60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	00db      	lsls	r3, r3, #3
 800eb70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb78:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800eb7c:	601a      	str	r2, [r3, #0]
 800eb7e:	e06a      	b.n	800ec56 <USB_EPStartXfer+0x4e6>
 800eb80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb82:	2b3e      	cmp	r3, #62	@ 0x3e
 800eb84:	d81e      	bhi.n	800ebc4 <USB_EPStartXfer+0x454>
 800eb86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb88:	085b      	lsrs	r3, r3, #1
 800eb8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb8e:	f003 0301 	and.w	r3, r3, #1
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d002      	beq.n	800eb9c <USB_EPStartXfer+0x42c>
 800eb96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb98:	3301      	adds	r3, #1
 800eb9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	00db      	lsls	r3, r3, #3
 800eba2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eba6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebaa:	6819      	ldr	r1, [r3, #0]
 800ebac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebae:	069a      	lsls	r2, r3, #26
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	00db      	lsls	r3, r3, #3
 800ebb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebbe:	430a      	orrs	r2, r1
 800ebc0:	601a      	str	r2, [r3, #0]
 800ebc2:	e048      	b.n	800ec56 <USB_EPStartXfer+0x4e6>
 800ebc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebc6:	095b      	lsrs	r3, r3, #5
 800ebc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ebca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebcc:	f003 031f 	and.w	r3, r3, #31
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d102      	bne.n	800ebda <USB_EPStartXfer+0x46a>
 800ebd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebd6:	3b01      	subs	r3, #1
 800ebd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	00db      	lsls	r3, r3, #3
 800ebe0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebe4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebec:	069b      	lsls	r3, r3, #26
 800ebee:	431a      	orrs	r2, r3
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	00db      	lsls	r3, r3, #3
 800ebf6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebfa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebfe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ec02:	601a      	str	r2, [r3, #0]
 800ec04:	e027      	b.n	800ec56 <USB_EPStartXfer+0x4e6>
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	785b      	ldrb	r3, [r3, #1]
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d123      	bne.n	800ec56 <USB_EPStartXfer+0x4e6>
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	781b      	ldrb	r3, [r3, #0]
 800ec12:	00db      	lsls	r3, r3, #3
 800ec14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	00db      	lsls	r3, r3, #3
 800ec24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec2c:	b292      	uxth	r2, r2
 800ec2e:	601a      	str	r2, [r3, #0]
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	00db      	lsls	r3, r3, #3
 800ec36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec3e:	6819      	ldr	r1, [r3, #0]
 800ec40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec42:	041a      	lsls	r2, r3, #16
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	00db      	lsls	r3, r3, #3
 800ec4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec52:	430a      	orrs	r2, r1
 800ec54:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	891b      	ldrh	r3, [r3, #8]
 800ec5a:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	6959      	ldr	r1, [r3, #20]
 800ec60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	8b7a      	ldrh	r2, [r7, #26]
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 ff09 	bl	800fa7e <USB_WritePMA>
            ep->xfer_buff += len;
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	695a      	ldr	r2, [r3, #20]
 800ec70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec72:	441a      	add	r2, r3
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	6a1a      	ldr	r2, [r3, #32]
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	691b      	ldr	r3, [r3, #16]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d906      	bls.n	800ec92 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	6a1a      	ldr	r2, [r3, #32]
 800ec88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec8a:	1ad2      	subs	r2, r2, r3
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	621a      	str	r2, [r3, #32]
 800ec90:	e005      	b.n	800ec9e <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	6a1b      	ldr	r3, [r3, #32]
 800ec96:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	785b      	ldrb	r3, [r3, #1]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d16a      	bne.n	800ed7c <USB_EPStartXfer+0x60c>
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	00db      	lsls	r3, r3, #3
 800ecac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecb4:	685a      	ldr	r2, [r3, #4]
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	00db      	lsls	r3, r3, #3
 800ecbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecc4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ecc8:	605a      	str	r2, [r3, #4]
 800ecca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d112      	bne.n	800ecf6 <USB_EPStartXfer+0x586>
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	00db      	lsls	r3, r3, #3
 800ecd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecda:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecde:	685a      	ldr	r2, [r3, #4]
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	781b      	ldrb	r3, [r3, #0]
 800ece4:	00db      	lsls	r3, r3, #3
 800ece6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ecf2:	605a      	str	r2, [r3, #4]
 800ecf4:	e06a      	b.n	800edcc <USB_EPStartXfer+0x65c>
 800ecf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecf8:	2b3e      	cmp	r3, #62	@ 0x3e
 800ecfa:	d81e      	bhi.n	800ed3a <USB_EPStartXfer+0x5ca>
 800ecfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecfe:	085b      	lsrs	r3, r3, #1
 800ed00:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed04:	f003 0301 	and.w	r3, r3, #1
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d002      	beq.n	800ed12 <USB_EPStartXfer+0x5a2>
 800ed0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed0e:	3301      	adds	r3, #1
 800ed10:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	00db      	lsls	r3, r3, #3
 800ed18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed20:	6859      	ldr	r1, [r3, #4]
 800ed22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed24:	069a      	lsls	r2, r3, #26
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	00db      	lsls	r3, r3, #3
 800ed2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed34:	430a      	orrs	r2, r1
 800ed36:	605a      	str	r2, [r3, #4]
 800ed38:	e048      	b.n	800edcc <USB_EPStartXfer+0x65c>
 800ed3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed3c:	095b      	lsrs	r3, r3, #5
 800ed3e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed42:	f003 031f 	and.w	r3, r3, #31
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d102      	bne.n	800ed50 <USB_EPStartXfer+0x5e0>
 800ed4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed4c:	3b01      	subs	r3, #1
 800ed4e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	00db      	lsls	r3, r3, #3
 800ed56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed5e:	685a      	ldr	r2, [r3, #4]
 800ed60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed62:	069b      	lsls	r3, r3, #26
 800ed64:	431a      	orrs	r2, r3
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	00db      	lsls	r3, r3, #3
 800ed6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed74:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ed78:	605a      	str	r2, [r3, #4]
 800ed7a:	e027      	b.n	800edcc <USB_EPStartXfer+0x65c>
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	785b      	ldrb	r3, [r3, #1]
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d123      	bne.n	800edcc <USB_EPStartXfer+0x65c>
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	00db      	lsls	r3, r3, #3
 800ed8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed92:	685a      	ldr	r2, [r3, #4]
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	00db      	lsls	r3, r3, #3
 800ed9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eda2:	b292      	uxth	r2, r2
 800eda4:	605a      	str	r2, [r3, #4]
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	00db      	lsls	r3, r3, #3
 800edac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800edb4:	6859      	ldr	r1, [r3, #4]
 800edb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edb8:	041a      	lsls	r2, r3, #16
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	00db      	lsls	r3, r3, #3
 800edc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edc4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800edc8:	430a      	orrs	r2, r1
 800edca:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	895b      	ldrh	r3, [r3, #10]
 800edd0:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	6959      	ldr	r1, [r3, #20]
 800edd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edd8:	b29b      	uxth	r3, r3
 800edda:	8b7a      	ldrh	r2, [r7, #26]
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 fe4e 	bl	800fa7e <USB_WritePMA>
 800ede2:	e19f      	b.n	800f124 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	6a1b      	ldr	r3, [r3, #32]
 800ede8:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	009b      	lsls	r3, r3, #2
 800edf2:	4413      	add	r3, r2
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	4ba0      	ldr	r3, [pc, #640]	@ (800f078 <USB_EPStartXfer+0x908>)
 800edf8:	4013      	ands	r3, r2
 800edfa:	617b      	str	r3, [r7, #20]
 800edfc:	687a      	ldr	r2, [r7, #4]
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	009b      	lsls	r3, r3, #2
 800ee04:	441a      	add	r2, r3
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ee0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee10:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	00db      	lsls	r3, r3, #3
 800ee18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	00db      	lsls	r3, r3, #3
 800ee28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee30:	b292      	uxth	r2, r2
 800ee32:	601a      	str	r2, [r3, #0]
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	00db      	lsls	r3, r3, #3
 800ee3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee42:	6819      	ldr	r1, [r3, #0]
 800ee44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee46:	041a      	lsls	r2, r3, #16
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	00db      	lsls	r3, r3, #3
 800ee4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee56:	430a      	orrs	r2, r1
 800ee58:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	891b      	ldrh	r3, [r3, #8]
 800ee5e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	6959      	ldr	r1, [r3, #20]
 800ee64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	8b7a      	ldrh	r2, [r7, #26]
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 fe07 	bl	800fa7e <USB_WritePMA>
 800ee70:	e158      	b.n	800f124 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	6a1a      	ldr	r2, [r3, #32]
 800ee76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee78:	1ad2      	subs	r2, r2, r3
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	009b      	lsls	r3, r3, #2
 800ee86:	4413      	add	r3, r2
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	f000 80a3 	beq.w	800efda <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	785b      	ldrb	r3, [r3, #1]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d16a      	bne.n	800ef72 <USB_EPStartXfer+0x802>
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	00db      	lsls	r3, r3, #3
 800eea2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eea6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eeaa:	685a      	ldr	r2, [r3, #4]
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	00db      	lsls	r3, r3, #3
 800eeb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eeb6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eeba:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800eebe:	605a      	str	r2, [r3, #4]
 800eec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d112      	bne.n	800eeec <USB_EPStartXfer+0x77c>
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	00db      	lsls	r3, r3, #3
 800eecc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eed0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eed4:	685a      	ldr	r2, [r3, #4]
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	00db      	lsls	r3, r3, #3
 800eedc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eee0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eee4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800eee8:	605a      	str	r2, [r3, #4]
 800eeea:	e06a      	b.n	800efc2 <USB_EPStartXfer+0x852>
 800eeec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eeee:	2b3e      	cmp	r3, #62	@ 0x3e
 800eef0:	d81e      	bhi.n	800ef30 <USB_EPStartXfer+0x7c0>
 800eef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eef4:	085b      	lsrs	r3, r3, #1
 800eef6:	643b      	str	r3, [r7, #64]	@ 0x40
 800eef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eefa:	f003 0301 	and.w	r3, r3, #1
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d002      	beq.n	800ef08 <USB_EPStartXfer+0x798>
 800ef02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef04:	3301      	adds	r3, #1
 800ef06:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	00db      	lsls	r3, r3, #3
 800ef0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef16:	6859      	ldr	r1, [r3, #4]
 800ef18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef1a:	069a      	lsls	r2, r3, #26
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	00db      	lsls	r3, r3, #3
 800ef22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef2a:	430a      	orrs	r2, r1
 800ef2c:	605a      	str	r2, [r3, #4]
 800ef2e:	e048      	b.n	800efc2 <USB_EPStartXfer+0x852>
 800ef30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef32:	095b      	lsrs	r3, r3, #5
 800ef34:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef38:	f003 031f 	and.w	r3, r3, #31
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d102      	bne.n	800ef46 <USB_EPStartXfer+0x7d6>
 800ef40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef42:	3b01      	subs	r3, #1
 800ef44:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	00db      	lsls	r3, r3, #3
 800ef4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef54:	685a      	ldr	r2, [r3, #4]
 800ef56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef58:	069b      	lsls	r3, r3, #26
 800ef5a:	431a      	orrs	r2, r3
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	781b      	ldrb	r3, [r3, #0]
 800ef60:	00db      	lsls	r3, r3, #3
 800ef62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef6a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ef6e:	605a      	str	r2, [r3, #4]
 800ef70:	e027      	b.n	800efc2 <USB_EPStartXfer+0x852>
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	785b      	ldrb	r3, [r3, #1]
 800ef76:	2b01      	cmp	r3, #1
 800ef78:	d123      	bne.n	800efc2 <USB_EPStartXfer+0x852>
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	00db      	lsls	r3, r3, #3
 800ef80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef88:	685a      	ldr	r2, [r3, #4]
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	00db      	lsls	r3, r3, #3
 800ef90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef98:	b292      	uxth	r2, r2
 800ef9a:	605a      	str	r2, [r3, #4]
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	00db      	lsls	r3, r3, #3
 800efa2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efa6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efaa:	6859      	ldr	r1, [r3, #4]
 800efac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efae:	041a      	lsls	r2, r3, #16
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	00db      	lsls	r3, r3, #3
 800efb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efbe:	430a      	orrs	r2, r1
 800efc0:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	895b      	ldrh	r3, [r3, #10]
 800efc6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	6959      	ldr	r1, [r3, #20]
 800efcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efce:	b29b      	uxth	r3, r3
 800efd0:	8b7a      	ldrh	r2, [r7, #26]
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f000 fd53 	bl	800fa7e <USB_WritePMA>
 800efd8:	e0a4      	b.n	800f124 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	785b      	ldrb	r3, [r3, #1]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d16d      	bne.n	800f0be <USB_EPStartXfer+0x94e>
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	00db      	lsls	r3, r3, #3
 800efe8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	00db      	lsls	r3, r3, #3
 800eff8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800effc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f000:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f004:	601a      	str	r2, [r3, #0]
 800f006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d112      	bne.n	800f032 <USB_EPStartXfer+0x8c2>
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	00db      	lsls	r3, r3, #3
 800f012:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f016:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	00db      	lsls	r3, r3, #3
 800f022:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f026:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f02a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f02e:	601a      	str	r2, [r3, #0]
 800f030:	e06d      	b.n	800f10e <USB_EPStartXfer+0x99e>
 800f032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f034:	2b3e      	cmp	r3, #62	@ 0x3e
 800f036:	d821      	bhi.n	800f07c <USB_EPStartXfer+0x90c>
 800f038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f03a:	085b      	lsrs	r3, r3, #1
 800f03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f03e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f040:	f003 0301 	and.w	r3, r3, #1
 800f044:	2b00      	cmp	r3, #0
 800f046:	d002      	beq.n	800f04e <USB_EPStartXfer+0x8de>
 800f048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f04a:	3301      	adds	r3, #1
 800f04c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	00db      	lsls	r3, r3, #3
 800f054:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f058:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f05c:	6819      	ldr	r1, [r3, #0]
 800f05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f060:	069a      	lsls	r2, r3, #26
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	00db      	lsls	r3, r3, #3
 800f068:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f06c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f070:	430a      	orrs	r2, r1
 800f072:	601a      	str	r2, [r3, #0]
 800f074:	e04b      	b.n	800f10e <USB_EPStartXfer+0x99e>
 800f076:	bf00      	nop
 800f078:	07ff8e8f 	.word	0x07ff8e8f
 800f07c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f07e:	095b      	lsrs	r3, r3, #5
 800f080:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f084:	f003 031f 	and.w	r3, r3, #31
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d102      	bne.n	800f092 <USB_EPStartXfer+0x922>
 800f08c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f08e:	3b01      	subs	r3, #1
 800f090:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	781b      	ldrb	r3, [r3, #0]
 800f096:	00db      	lsls	r3, r3, #3
 800f098:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f09c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0a4:	069b      	lsls	r3, r3, #26
 800f0a6:	431a      	orrs	r2, r3
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	00db      	lsls	r3, r3, #3
 800f0ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0b6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f0ba:	601a      	str	r2, [r3, #0]
 800f0bc:	e027      	b.n	800f10e <USB_EPStartXfer+0x99e>
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	785b      	ldrb	r3, [r3, #1]
 800f0c2:	2b01      	cmp	r3, #1
 800f0c4:	d123      	bne.n	800f10e <USB_EPStartXfer+0x99e>
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	00db      	lsls	r3, r3, #3
 800f0cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0d4:	681a      	ldr	r2, [r3, #0]
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	00db      	lsls	r3, r3, #3
 800f0dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0e4:	b292      	uxth	r2, r2
 800f0e6:	601a      	str	r2, [r3, #0]
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	00db      	lsls	r3, r3, #3
 800f0ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0f6:	6819      	ldr	r1, [r3, #0]
 800f0f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0fa:	041a      	lsls	r2, r3, #16
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	00db      	lsls	r3, r3, #3
 800f102:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f106:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f10a:	430a      	orrs	r2, r1
 800f10c:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	891b      	ldrh	r3, [r3, #8]
 800f112:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	6959      	ldr	r1, [r3, #20]
 800f118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	8b7a      	ldrh	r2, [r7, #26]
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f000 fcad 	bl	800fa7e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	781b      	ldrb	r3, [r3, #0]
 800f12a:	009b      	lsls	r3, r3, #2
 800f12c:	4413      	add	r3, r2
 800f12e:	681a      	ldr	r2, [r3, #0]
 800f130:	4b8b      	ldr	r3, [pc, #556]	@ (800f360 <USB_EPStartXfer+0xbf0>)
 800f132:	4013      	ands	r3, r2
 800f134:	60fb      	str	r3, [r7, #12]
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f083 0310 	eor.w	r3, r3, #16
 800f13c:	60fb      	str	r3, [r7, #12]
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	f083 0320 	eor.w	r3, r3, #32
 800f144:	60fb      	str	r3, [r7, #12]
 800f146:	687a      	ldr	r2, [r7, #4]
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	441a      	add	r2, r3
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f15a:	6013      	str	r3, [r2, #0]
 800f15c:	e36b      	b.n	800f836 <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	7b1b      	ldrb	r3, [r3, #12]
 800f162:	2b00      	cmp	r3, #0
 800f164:	f040 8081 	bne.w	800f26a <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	699a      	ldr	r2, [r3, #24]
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	691b      	ldr	r3, [r3, #16]
 800f170:	429a      	cmp	r2, r3
 800f172:	d909      	bls.n	800f188 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	691b      	ldr	r3, [r3, #16]
 800f178:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	699a      	ldr	r2, [r3, #24]
 800f17e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f180:	1ad2      	subs	r2, r2, r3
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	619a      	str	r2, [r3, #24]
 800f186:	e005      	b.n	800f194 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	699b      	ldr	r3, [r3, #24]
 800f18c:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	2200      	movs	r2, #0
 800f192:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	00db      	lsls	r3, r3, #3
 800f19a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f19e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1a2:	685a      	ldr	r2, [r3, #4]
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	00db      	lsls	r3, r3, #3
 800f1aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1b2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f1b6:	605a      	str	r2, [r3, #4]
 800f1b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d112      	bne.n	800f1e4 <USB_EPStartXfer+0xa74>
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	00db      	lsls	r3, r3, #3
 800f1c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1cc:	685a      	ldr	r2, [r3, #4]
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	00db      	lsls	r3, r3, #3
 800f1d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f1e0:	605a      	str	r2, [r3, #4]
 800f1e2:	e30c      	b.n	800f7fe <USB_EPStartXfer+0x108e>
 800f1e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800f1e8:	d81e      	bhi.n	800f228 <USB_EPStartXfer+0xab8>
 800f1ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1ec:	085b      	lsrs	r3, r3, #1
 800f1ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f1f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1f2:	f003 0301 	and.w	r3, r3, #1
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d002      	beq.n	800f200 <USB_EPStartXfer+0xa90>
 800f1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	00db      	lsls	r3, r3, #3
 800f206:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f20a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f20e:	6859      	ldr	r1, [r3, #4]
 800f210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f212:	069a      	lsls	r2, r3, #26
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	00db      	lsls	r3, r3, #3
 800f21a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f21e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f222:	430a      	orrs	r2, r1
 800f224:	605a      	str	r2, [r3, #4]
 800f226:	e2ea      	b.n	800f7fe <USB_EPStartXfer+0x108e>
 800f228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f22a:	095b      	lsrs	r3, r3, #5
 800f22c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f22e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f230:	f003 031f 	and.w	r3, r3, #31
 800f234:	2b00      	cmp	r3, #0
 800f236:	d102      	bne.n	800f23e <USB_EPStartXfer+0xace>
 800f238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f23a:	3b01      	subs	r3, #1
 800f23c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	00db      	lsls	r3, r3, #3
 800f244:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f248:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f24c:	685a      	ldr	r2, [r3, #4]
 800f24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f250:	069b      	lsls	r3, r3, #26
 800f252:	431a      	orrs	r2, r3
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	00db      	lsls	r3, r3, #3
 800f25a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f25e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f262:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f266:	605a      	str	r2, [r3, #4]
 800f268:	e2c9      	b.n	800f7fe <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	78db      	ldrb	r3, [r3, #3]
 800f26e:	2b02      	cmp	r3, #2
 800f270:	f040 8176 	bne.w	800f560 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	785b      	ldrb	r3, [r3, #1]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d173      	bne.n	800f364 <USB_EPStartXfer+0xbf4>
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	00db      	lsls	r3, r3, #3
 800f282:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f286:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	00db      	lsls	r3, r3, #3
 800f292:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f296:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f29a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f29e:	601a      	str	r2, [r3, #0]
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	691b      	ldr	r3, [r3, #16]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d112      	bne.n	800f2ce <USB_EPStartXfer+0xb5e>
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	00db      	lsls	r3, r3, #3
 800f2ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	00db      	lsls	r3, r3, #3
 800f2be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2c6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f2ca:	601a      	str	r2, [r3, #0]
 800f2cc:	e073      	b.n	800f3b6 <USB_EPStartXfer+0xc46>
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	691b      	ldr	r3, [r3, #16]
 800f2d2:	2b3e      	cmp	r3, #62	@ 0x3e
 800f2d4:	d820      	bhi.n	800f318 <USB_EPStartXfer+0xba8>
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	691b      	ldr	r3, [r3, #16]
 800f2da:	085b      	lsrs	r3, r3, #1
 800f2dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	691b      	ldr	r3, [r3, #16]
 800f2e2:	f003 0301 	and.w	r3, r3, #1
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d002      	beq.n	800f2f0 <USB_EPStartXfer+0xb80>
 800f2ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	00db      	lsls	r3, r3, #3
 800f2f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2fe:	6819      	ldr	r1, [r3, #0]
 800f300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f302:	069a      	lsls	r2, r3, #26
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	00db      	lsls	r3, r3, #3
 800f30a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f30e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f312:	430a      	orrs	r2, r1
 800f314:	601a      	str	r2, [r3, #0]
 800f316:	e04e      	b.n	800f3b6 <USB_EPStartXfer+0xc46>
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	691b      	ldr	r3, [r3, #16]
 800f31c:	095b      	lsrs	r3, r3, #5
 800f31e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	691b      	ldr	r3, [r3, #16]
 800f324:	f003 031f 	and.w	r3, r3, #31
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d102      	bne.n	800f332 <USB_EPStartXfer+0xbc2>
 800f32c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f32e:	3b01      	subs	r3, #1
 800f330:	637b      	str	r3, [r7, #52]	@ 0x34
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	00db      	lsls	r3, r3, #3
 800f338:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f33c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f340:	681a      	ldr	r2, [r3, #0]
 800f342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f344:	069b      	lsls	r3, r3, #26
 800f346:	431a      	orrs	r2, r3
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	00db      	lsls	r3, r3, #3
 800f34e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f352:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f356:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f35a:	601a      	str	r2, [r3, #0]
 800f35c:	e02b      	b.n	800f3b6 <USB_EPStartXfer+0xc46>
 800f35e:	bf00      	nop
 800f360:	07ff8fbf 	.word	0x07ff8fbf
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	785b      	ldrb	r3, [r3, #1]
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d124      	bne.n	800f3b6 <USB_EPStartXfer+0xc46>
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	00db      	lsls	r3, r3, #3
 800f372:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f376:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	00db      	lsls	r3, r3, #3
 800f382:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f386:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f38a:	b292      	uxth	r2, r2
 800f38c:	601a      	str	r2, [r3, #0]
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	00db      	lsls	r3, r3, #3
 800f394:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f398:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f39c:	6819      	ldr	r1, [r3, #0]
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	691b      	ldr	r3, [r3, #16]
 800f3a2:	041a      	lsls	r2, r3, #16
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	00db      	lsls	r3, r3, #3
 800f3aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3b2:	430a      	orrs	r2, r1
 800f3b4:	601a      	str	r2, [r3, #0]
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	785b      	ldrb	r3, [r3, #1]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d170      	bne.n	800f4a0 <USB_EPStartXfer+0xd30>
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	00db      	lsls	r3, r3, #3
 800f3c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3cc:	685a      	ldr	r2, [r3, #4]
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	00db      	lsls	r3, r3, #3
 800f3d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3dc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f3e0:	605a      	str	r2, [r3, #4]
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	691b      	ldr	r3, [r3, #16]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d112      	bne.n	800f410 <USB_EPStartXfer+0xca0>
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	00db      	lsls	r3, r3, #3
 800f3f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3f8:	685a      	ldr	r2, [r3, #4]
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	00db      	lsls	r3, r3, #3
 800f400:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f404:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f408:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f40c:	605a      	str	r2, [r3, #4]
 800f40e:	e070      	b.n	800f4f2 <USB_EPStartXfer+0xd82>
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	691b      	ldr	r3, [r3, #16]
 800f414:	2b3e      	cmp	r3, #62	@ 0x3e
 800f416:	d820      	bhi.n	800f45a <USB_EPStartXfer+0xcea>
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	691b      	ldr	r3, [r3, #16]
 800f41c:	085b      	lsrs	r3, r3, #1
 800f41e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	691b      	ldr	r3, [r3, #16]
 800f424:	f003 0301 	and.w	r3, r3, #1
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d002      	beq.n	800f432 <USB_EPStartXfer+0xcc2>
 800f42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f42e:	3301      	adds	r3, #1
 800f430:	633b      	str	r3, [r7, #48]	@ 0x30
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	00db      	lsls	r3, r3, #3
 800f438:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f43c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f440:	6859      	ldr	r1, [r3, #4]
 800f442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f444:	069a      	lsls	r2, r3, #26
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	00db      	lsls	r3, r3, #3
 800f44c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f450:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f454:	430a      	orrs	r2, r1
 800f456:	605a      	str	r2, [r3, #4]
 800f458:	e04b      	b.n	800f4f2 <USB_EPStartXfer+0xd82>
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	691b      	ldr	r3, [r3, #16]
 800f45e:	095b      	lsrs	r3, r3, #5
 800f460:	633b      	str	r3, [r7, #48]	@ 0x30
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	691b      	ldr	r3, [r3, #16]
 800f466:	f003 031f 	and.w	r3, r3, #31
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d102      	bne.n	800f474 <USB_EPStartXfer+0xd04>
 800f46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f470:	3b01      	subs	r3, #1
 800f472:	633b      	str	r3, [r7, #48]	@ 0x30
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	00db      	lsls	r3, r3, #3
 800f47a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f47e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f482:	685a      	ldr	r2, [r3, #4]
 800f484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f486:	069b      	lsls	r3, r3, #26
 800f488:	431a      	orrs	r2, r3
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	00db      	lsls	r3, r3, #3
 800f490:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f494:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f498:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f49c:	605a      	str	r2, [r3, #4]
 800f49e:	e028      	b.n	800f4f2 <USB_EPStartXfer+0xd82>
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	785b      	ldrb	r3, [r3, #1]
 800f4a4:	2b01      	cmp	r3, #1
 800f4a6:	d124      	bne.n	800f4f2 <USB_EPStartXfer+0xd82>
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	00db      	lsls	r3, r3, #3
 800f4ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4b6:	685a      	ldr	r2, [r3, #4]
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	00db      	lsls	r3, r3, #3
 800f4be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4c6:	b292      	uxth	r2, r2
 800f4c8:	605a      	str	r2, [r3, #4]
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	00db      	lsls	r3, r3, #3
 800f4d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4d8:	6859      	ldr	r1, [r3, #4]
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	691b      	ldr	r3, [r3, #16]
 800f4de:	041a      	lsls	r2, r3, #16
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	00db      	lsls	r3, r3, #3
 800f4e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4ee:	430a      	orrs	r2, r1
 800f4f0:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	69db      	ldr	r3, [r3, #28]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	f000 8181 	beq.w	800f7fe <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800f4fc:	687a      	ldr	r2, [r7, #4]
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	781b      	ldrb	r3, [r3, #0]
 800f502:	009b      	lsls	r3, r3, #2
 800f504:	4413      	add	r3, r2
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f50a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f50c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f510:	2b00      	cmp	r3, #0
 800f512:	d004      	beq.n	800f51e <USB_EPStartXfer+0xdae>
 800f514:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d10b      	bne.n	800f536 <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f51e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f520:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f524:	2b00      	cmp	r3, #0
 800f526:	f040 816a 	bne.w	800f7fe <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f52a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f52c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f530:	2b00      	cmp	r3, #0
 800f532:	f040 8164 	bne.w	800f7fe <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	009b      	lsls	r3, r3, #2
 800f53e:	4413      	add	r3, r2
 800f540:	681a      	ldr	r2, [r3, #0]
 800f542:	4b98      	ldr	r3, [pc, #608]	@ (800f7a4 <USB_EPStartXfer+0x1034>)
 800f544:	4013      	ands	r3, r2
 800f546:	623b      	str	r3, [r7, #32]
 800f548:	687a      	ldr	r2, [r7, #4]
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	441a      	add	r2, r3
 800f552:	6a3b      	ldr	r3, [r7, #32]
 800f554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f558:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f55c:	6013      	str	r3, [r2, #0]
 800f55e:	e14e      	b.n	800f7fe <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	78db      	ldrb	r3, [r3, #3]
 800f564:	2b01      	cmp	r3, #1
 800f566:	f040 8148 	bne.w	800f7fa <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	699a      	ldr	r2, [r3, #24]
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	691b      	ldr	r3, [r3, #16]
 800f572:	429a      	cmp	r2, r3
 800f574:	d909      	bls.n	800f58a <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	691b      	ldr	r3, [r3, #16]
 800f57a:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	699a      	ldr	r2, [r3, #24]
 800f580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f582:	1ad2      	subs	r2, r2, r3
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	619a      	str	r2, [r3, #24]
 800f588:	e005      	b.n	800f596 <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	699b      	ldr	r3, [r3, #24]
 800f58e:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	2200      	movs	r2, #0
 800f594:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	785b      	ldrb	r3, [r3, #1]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d16a      	bne.n	800f674 <USB_EPStartXfer+0xf04>
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	00db      	lsls	r3, r3, #3
 800f5a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	00db      	lsls	r3, r3, #3
 800f5b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5bc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f5c0:	601a      	str	r2, [r3, #0]
 800f5c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d112      	bne.n	800f5ee <USB_EPStartXfer+0xe7e>
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	00db      	lsls	r3, r3, #3
 800f5ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	00db      	lsls	r3, r3, #3
 800f5de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f5ea:	601a      	str	r2, [r3, #0]
 800f5ec:	e06a      	b.n	800f6c4 <USB_EPStartXfer+0xf54>
 800f5ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5f0:	2b3e      	cmp	r3, #62	@ 0x3e
 800f5f2:	d81e      	bhi.n	800f632 <USB_EPStartXfer+0xec2>
 800f5f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5f6:	085b      	lsrs	r3, r3, #1
 800f5f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f5fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5fc:	f003 0301 	and.w	r3, r3, #1
 800f600:	2b00      	cmp	r3, #0
 800f602:	d002      	beq.n	800f60a <USB_EPStartXfer+0xe9a>
 800f604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f606:	3301      	adds	r3, #1
 800f608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	00db      	lsls	r3, r3, #3
 800f610:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f614:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f618:	6819      	ldr	r1, [r3, #0]
 800f61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f61c:	069a      	lsls	r2, r3, #26
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	00db      	lsls	r3, r3, #3
 800f624:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f628:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f62c:	430a      	orrs	r2, r1
 800f62e:	601a      	str	r2, [r3, #0]
 800f630:	e048      	b.n	800f6c4 <USB_EPStartXfer+0xf54>
 800f632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f634:	095b      	lsrs	r3, r3, #5
 800f636:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f63a:	f003 031f 	and.w	r3, r3, #31
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d102      	bne.n	800f648 <USB_EPStartXfer+0xed8>
 800f642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f644:	3b01      	subs	r3, #1
 800f646:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	00db      	lsls	r3, r3, #3
 800f64e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f652:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f656:	681a      	ldr	r2, [r3, #0]
 800f658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f65a:	069b      	lsls	r3, r3, #26
 800f65c:	431a      	orrs	r2, r3
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	00db      	lsls	r3, r3, #3
 800f664:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f668:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f66c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f670:	601a      	str	r2, [r3, #0]
 800f672:	e027      	b.n	800f6c4 <USB_EPStartXfer+0xf54>
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	785b      	ldrb	r3, [r3, #1]
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d123      	bne.n	800f6c4 <USB_EPStartXfer+0xf54>
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	00db      	lsls	r3, r3, #3
 800f682:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f686:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	781b      	ldrb	r3, [r3, #0]
 800f690:	00db      	lsls	r3, r3, #3
 800f692:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f696:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f69a:	b292      	uxth	r2, r2
 800f69c:	601a      	str	r2, [r3, #0]
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	00db      	lsls	r3, r3, #3
 800f6a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6ac:	6819      	ldr	r1, [r3, #0]
 800f6ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6b0:	041a      	lsls	r2, r3, #16
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	00db      	lsls	r3, r3, #3
 800f6b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6c0:	430a      	orrs	r2, r1
 800f6c2:	601a      	str	r2, [r3, #0]
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	785b      	ldrb	r3, [r3, #1]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d16d      	bne.n	800f7a8 <USB_EPStartXfer+0x1038>
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	00db      	lsls	r3, r3, #3
 800f6d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6da:	685a      	ldr	r2, [r3, #4]
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	00db      	lsls	r3, r3, #3
 800f6e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6ea:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f6ee:	605a      	str	r2, [r3, #4]
 800f6f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d112      	bne.n	800f71c <USB_EPStartXfer+0xfac>
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	00db      	lsls	r3, r3, #3
 800f6fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f700:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f704:	685a      	ldr	r2, [r3, #4]
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	00db      	lsls	r3, r3, #3
 800f70c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f710:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f714:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f718:	605a      	str	r2, [r3, #4]
 800f71a:	e070      	b.n	800f7fe <USB_EPStartXfer+0x108e>
 800f71c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f71e:	2b3e      	cmp	r3, #62	@ 0x3e
 800f720:	d81e      	bhi.n	800f760 <USB_EPStartXfer+0xff0>
 800f722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f724:	085b      	lsrs	r3, r3, #1
 800f726:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f72a:	f003 0301 	and.w	r3, r3, #1
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d002      	beq.n	800f738 <USB_EPStartXfer+0xfc8>
 800f732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f734:	3301      	adds	r3, #1
 800f736:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	00db      	lsls	r3, r3, #3
 800f73e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f742:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f746:	6859      	ldr	r1, [r3, #4]
 800f748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f74a:	069a      	lsls	r2, r3, #26
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	781b      	ldrb	r3, [r3, #0]
 800f750:	00db      	lsls	r3, r3, #3
 800f752:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f756:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f75a:	430a      	orrs	r2, r1
 800f75c:	605a      	str	r2, [r3, #4]
 800f75e:	e04e      	b.n	800f7fe <USB_EPStartXfer+0x108e>
 800f760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f762:	095b      	lsrs	r3, r3, #5
 800f764:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f768:	f003 031f 	and.w	r3, r3, #31
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d102      	bne.n	800f776 <USB_EPStartXfer+0x1006>
 800f770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f772:	3b01      	subs	r3, #1
 800f774:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	00db      	lsls	r3, r3, #3
 800f77c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f780:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f784:	685a      	ldr	r2, [r3, #4]
 800f786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f788:	069b      	lsls	r3, r3, #26
 800f78a:	431a      	orrs	r2, r3
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	00db      	lsls	r3, r3, #3
 800f792:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f796:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f79a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f79e:	605a      	str	r2, [r3, #4]
 800f7a0:	e02d      	b.n	800f7fe <USB_EPStartXfer+0x108e>
 800f7a2:	bf00      	nop
 800f7a4:	07ff8f8f 	.word	0x07ff8f8f
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	785b      	ldrb	r3, [r3, #1]
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	d126      	bne.n	800f7fe <USB_EPStartXfer+0x108e>
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	00db      	lsls	r3, r3, #3
 800f7b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f7ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f7be:	685a      	ldr	r2, [r3, #4]
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	00db      	lsls	r3, r3, #3
 800f7c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f7ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f7ce:	b292      	uxth	r2, r2
 800f7d0:	605a      	str	r2, [r3, #4]
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	00db      	lsls	r3, r3, #3
 800f7d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f7dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f7e0:	6859      	ldr	r1, [r3, #4]
 800f7e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f7e4:	041a      	lsls	r2, r3, #16
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	00db      	lsls	r3, r3, #3
 800f7ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f7f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f7f4:	430a      	orrs	r2, r1
 800f7f6:	605a      	str	r2, [r3, #4]
 800f7f8:	e001      	b.n	800f7fe <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	e01c      	b.n	800f838 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	009b      	lsls	r3, r3, #2
 800f806:	4413      	add	r3, r2
 800f808:	681a      	ldr	r2, [r3, #0]
 800f80a:	4b0d      	ldr	r3, [pc, #52]	@ (800f840 <USB_EPStartXfer+0x10d0>)
 800f80c:	4013      	ands	r3, r2
 800f80e:	61fb      	str	r3, [r7, #28]
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f816:	61fb      	str	r3, [r7, #28]
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f81e:	61fb      	str	r3, [r7, #28]
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	781b      	ldrb	r3, [r3, #0]
 800f826:	009b      	lsls	r3, r3, #2
 800f828:	441a      	add	r2, r3
 800f82a:	69fb      	ldr	r3, [r7, #28]
 800f82c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f834:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f836:	2300      	movs	r3, #0
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3758      	adds	r7, #88	@ 0x58
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}
 800f840:	07ffbf8f 	.word	0x07ffbf8f

0800f844 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800f844:	b480      	push	{r7}
 800f846:	b085      	sub	sp, #20
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	785b      	ldrb	r3, [r3, #1]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d018      	beq.n	800f888 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	009b      	lsls	r3, r3, #2
 800f85e:	4413      	add	r3, r2
 800f860:	681a      	ldr	r2, [r3, #0]
 800f862:	4b19      	ldr	r3, [pc, #100]	@ (800f8c8 <USB_EPSetStall+0x84>)
 800f864:	4013      	ands	r3, r2
 800f866:	60bb      	str	r3, [r7, #8]
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	f083 0310 	eor.w	r3, r3, #16
 800f86e:	60bb      	str	r3, [r7, #8]
 800f870:	687a      	ldr	r2, [r7, #4]
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	441a      	add	r2, r3
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f884:	6013      	str	r3, [r2, #0]
 800f886:	e017      	b.n	800f8b8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	009b      	lsls	r3, r3, #2
 800f890:	4413      	add	r3, r2
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	4b0d      	ldr	r3, [pc, #52]	@ (800f8cc <USB_EPSetStall+0x88>)
 800f896:	4013      	ands	r3, r2
 800f898:	60fb      	str	r3, [r7, #12]
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f8a0:	60fb      	str	r3, [r7, #12]
 800f8a2:	687a      	ldr	r2, [r7, #4]
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	009b      	lsls	r3, r3, #2
 800f8aa:	441a      	add	r2, r3
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f8b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f8b8:	2300      	movs	r3, #0
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3714      	adds	r7, #20
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c4:	4770      	bx	lr
 800f8c6:	bf00      	nop
 800f8c8:	07ff8fbf 	.word	0x07ff8fbf
 800f8cc:	07ffbf8f 	.word	0x07ffbf8f

0800f8d0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b089      	sub	sp, #36	@ 0x24
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	7b1b      	ldrb	r3, [r3, #12]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d17c      	bne.n	800f9dc <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	785b      	ldrb	r3, [r3, #1]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d03c      	beq.n	800f964 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f8ea:	687a      	ldr	r2, [r7, #4]
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	009b      	lsls	r3, r3, #2
 800f8f2:	4413      	add	r3, r2
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	613b      	str	r3, [r7, #16]
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d013      	beq.n	800f92a <USB_EPClearStall+0x5a>
 800f902:	687a      	ldr	r2, [r7, #4]
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	009b      	lsls	r3, r3, #2
 800f90a:	4413      	add	r3, r2
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	4b37      	ldr	r3, [pc, #220]	@ (800f9ec <USB_EPClearStall+0x11c>)
 800f910:	4013      	ands	r3, r2
 800f912:	60fb      	str	r3, [r7, #12]
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	009b      	lsls	r3, r3, #2
 800f91c:	441a      	add	r2, r3
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f924:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f928:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	78db      	ldrb	r3, [r3, #3]
 800f92e:	2b01      	cmp	r3, #1
 800f930:	d054      	beq.n	800f9dc <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f932:	687a      	ldr	r2, [r7, #4]
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	009b      	lsls	r3, r3, #2
 800f93a:	4413      	add	r3, r2
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	4b2c      	ldr	r3, [pc, #176]	@ (800f9f0 <USB_EPClearStall+0x120>)
 800f940:	4013      	ands	r3, r2
 800f942:	60bb      	str	r3, [r7, #8]
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	f083 0320 	eor.w	r3, r3, #32
 800f94a:	60bb      	str	r3, [r7, #8]
 800f94c:	687a      	ldr	r2, [r7, #4]
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	009b      	lsls	r3, r3, #2
 800f954:	441a      	add	r2, r3
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f95c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f960:	6013      	str	r3, [r2, #0]
 800f962:	e03b      	b.n	800f9dc <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	009b      	lsls	r3, r3, #2
 800f96c:	4413      	add	r3, r2
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	61fb      	str	r3, [r7, #28]
 800f972:	69fb      	ldr	r3, [r7, #28]
 800f974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d013      	beq.n	800f9a4 <USB_EPClearStall+0xd4>
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	009b      	lsls	r3, r3, #2
 800f984:	4413      	add	r3, r2
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	4b18      	ldr	r3, [pc, #96]	@ (800f9ec <USB_EPClearStall+0x11c>)
 800f98a:	4013      	ands	r3, r2
 800f98c:	61bb      	str	r3, [r7, #24]
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	009b      	lsls	r3, r3, #2
 800f996:	441a      	add	r2, r3
 800f998:	69bb      	ldr	r3, [r7, #24]
 800f99a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f99e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f9a2:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	4413      	add	r3, r2
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	4b10      	ldr	r3, [pc, #64]	@ (800f9f4 <USB_EPClearStall+0x124>)
 800f9b2:	4013      	ands	r3, r2
 800f9b4:	617b      	str	r3, [r7, #20]
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f9bc:	617b      	str	r3, [r7, #20]
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f9c4:	617b      	str	r3, [r7, #20]
 800f9c6:	687a      	ldr	r2, [r7, #4]
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	009b      	lsls	r3, r3, #2
 800f9ce:	441a      	add	r2, r3
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f9d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f9da:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f9dc:	2300      	movs	r3, #0
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3724      	adds	r7, #36	@ 0x24
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr
 800f9ea:	bf00      	nop
 800f9ec:	07ff8f8f 	.word	0x07ff8f8f
 800f9f0:	07ff8fbf 	.word	0x07ff8fbf
 800f9f4:	07ffbf8f 	.word	0x07ffbf8f

0800f9f8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	460b      	mov	r3, r1
 800fa02:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800fa04:	78fb      	ldrb	r3, [r7, #3]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d102      	bne.n	800fa10 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2280      	movs	r2, #128	@ 0x80
 800fa0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800fa10:	2300      	movs	r3, #0
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	370c      	adds	r7, #12
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr

0800fa1e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800fa1e:	b480      	push	{r7}
 800fa20:	b083      	sub	sp, #12
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa2a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800fa32:	2300      	movs	r3, #0
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	370c      	adds	r7, #12
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr

0800fa40 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b083      	sub	sp, #12
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa4c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800fa54:	2300      	movs	r3, #0
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	370c      	adds	r7, #12
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr

0800fa62 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800fa62:	b480      	push	{r7}
 800fa64:	b085      	sub	sp, #20
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa6e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800fa70:	68fb      	ldr	r3, [r7, #12]
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3714      	adds	r7, #20
 800fa76:	46bd      	mov	sp, r7
 800fa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7c:	4770      	bx	lr

0800fa7e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fa7e:	b480      	push	{r7}
 800fa80:	b08b      	sub	sp, #44	@ 0x2c
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	60f8      	str	r0, [r7, #12]
 800fa86:	60b9      	str	r1, [r7, #8]
 800fa88:	4611      	mov	r1, r2
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	460b      	mov	r3, r1
 800fa8e:	80fb      	strh	r3, [r7, #6]
 800fa90:	4613      	mov	r3, r2
 800fa92:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800fa94:	88bb      	ldrh	r3, [r7, #4]
 800fa96:	3303      	adds	r3, #3
 800fa98:	089b      	lsrs	r3, r3, #2
 800fa9a:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800fa9c:	88bb      	ldrh	r3, [r7, #4]
 800fa9e:	f003 0303 	and.w	r3, r3, #3
 800faa2:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800faa8:	8afb      	ldrh	r3, [r7, #22]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d002      	beq.n	800fab4 <USB_WritePMA+0x36>
  {
    NbWords--;
 800faae:	69bb      	ldr	r3, [r7, #24]
 800fab0:	3b01      	subs	r3, #1
 800fab2:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800fab4:	88fb      	ldrh	r3, [r7, #6]
 800fab6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800faba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fabe:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800fac0:	69bb      	ldr	r3, [r7, #24]
 800fac2:	623b      	str	r3, [r7, #32]
 800fac4:	e015      	b.n	800faf2 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	681a      	ldr	r2, [r3, #0]
 800faca:	69fb      	ldr	r3, [r7, #28]
 800facc:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800face:	69fb      	ldr	r3, [r7, #28]
 800fad0:	3304      	adds	r3, #4
 800fad2:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	3301      	adds	r3, #1
 800fad8:	613b      	str	r3, [r7, #16]
    pBuf++;
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	3301      	adds	r3, #1
 800fade:	613b      	str	r3, [r7, #16]
    pBuf++;
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	3301      	adds	r3, #1
 800fae4:	613b      	str	r3, [r7, #16]
    pBuf++;
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	3301      	adds	r3, #1
 800faea:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800faec:	6a3b      	ldr	r3, [r7, #32]
 800faee:	3b01      	subs	r3, #1
 800faf0:	623b      	str	r3, [r7, #32]
 800faf2:	6a3b      	ldr	r3, [r7, #32]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d1e6      	bne.n	800fac6 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800faf8:	8afb      	ldrh	r3, [r7, #22]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d01a      	beq.n	800fb34 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800fafe:	2300      	movs	r3, #0
 800fb00:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	781b      	ldrb	r3, [r3, #0]
 800fb06:	461a      	mov	r2, r3
 800fb08:	6a3b      	ldr	r3, [r7, #32]
 800fb0a:	00db      	lsls	r3, r3, #3
 800fb0c:	fa02 f303 	lsl.w	r3, r2, r3
 800fb10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb12:	4313      	orrs	r3, r2
 800fb14:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800fb16:	6a3b      	ldr	r3, [r7, #32]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	623b      	str	r3, [r7, #32]
      pBuf++;
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	3301      	adds	r3, #1
 800fb20:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800fb22:	8afb      	ldrh	r3, [r7, #22]
 800fb24:	3b01      	subs	r3, #1
 800fb26:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800fb28:	8afb      	ldrh	r3, [r7, #22]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d1e9      	bne.n	800fb02 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800fb2e:	69fb      	ldr	r3, [r7, #28]
 800fb30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb32:	601a      	str	r2, [r3, #0]
  }
}
 800fb34:	bf00      	nop
 800fb36:	372c      	adds	r7, #44	@ 0x2c
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3e:	4770      	bx	lr

0800fb40 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fb40:	b480      	push	{r7}
 800fb42:	b08b      	sub	sp, #44	@ 0x2c
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	60f8      	str	r0, [r7, #12]
 800fb48:	60b9      	str	r1, [r7, #8]
 800fb4a:	4611      	mov	r1, r2
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	460b      	mov	r3, r1
 800fb50:	80fb      	strh	r3, [r7, #6]
 800fb52:	4613      	mov	r3, r2
 800fb54:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800fb56:	88bb      	ldrh	r3, [r7, #4]
 800fb58:	3303      	adds	r3, #3
 800fb5a:	089b      	lsrs	r3, r3, #2
 800fb5c:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800fb5e:	88bb      	ldrh	r3, [r7, #4]
 800fb60:	f003 0303 	and.w	r3, r3, #3
 800fb64:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800fb6a:	88fb      	ldrh	r3, [r7, #6]
 800fb6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fb70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fb74:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800fb76:	8b7b      	ldrh	r3, [r7, #26]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d002      	beq.n	800fb82 <USB_ReadPMA+0x42>
  {
    NbWords--;
 800fb7c:	69fb      	ldr	r3, [r7, #28]
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800fb82:	69fb      	ldr	r3, [r7, #28]
 800fb84:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb86:	e015      	b.n	800fbb4 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800fb88:	6a3b      	ldr	r3, [r7, #32]
 800fb8a:	681a      	ldr	r2, [r3, #0]
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800fb90:	6a3b      	ldr	r3, [r7, #32]
 800fb92:	3304      	adds	r3, #4
 800fb94:	623b      	str	r3, [r7, #32]
    pBuf++;
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	3301      	adds	r3, #1
 800fb9a:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	3301      	adds	r3, #1
 800fba6:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800fbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbb0:	3b01      	subs	r3, #1
 800fbb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800fbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d1e6      	bne.n	800fb88 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800fbba:	8b7b      	ldrh	r3, [r7, #26]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d017      	beq.n	800fbf0 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800fbc0:	6a3b      	ldr	r3, [r7, #32]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800fbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbc8:	b2db      	uxtb	r3, r3
 800fbca:	00db      	lsls	r3, r3, #3
 800fbcc:	693a      	ldr	r2, [r7, #16]
 800fbce:	fa22 f303 	lsr.w	r3, r2, r3
 800fbd2:	b2da      	uxtb	r2, r3
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	701a      	strb	r2, [r3, #0]
      count++;
 800fbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbda:	3301      	adds	r3, #1
 800fbdc:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	3301      	adds	r3, #1
 800fbe2:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800fbe4:	8b7b      	ldrh	r3, [r7, #26]
 800fbe6:	3b01      	subs	r3, #1
 800fbe8:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800fbea:	8b7b      	ldrh	r3, [r7, #26]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d1ea      	bne.n	800fbc6 <USB_ReadPMA+0x86>
  }
}
 800fbf0:	bf00      	nop
 800fbf2:	372c      	adds	r7, #44	@ 0x2c
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfa:	4770      	bx	lr

0800fbfc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b084      	sub	sp, #16
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	460b      	mov	r3, r1
 800fc06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fc08:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800fc0c:	f001 f8fa 	bl	8010e04 <USBD_static_malloc>
 800fc10:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d109      	bne.n	800fc2c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	32b0      	adds	r2, #176	@ 0xb0
 800fc22:	2100      	movs	r1, #0
 800fc24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800fc28:	2302      	movs	r3, #2
 800fc2a:	e0d4      	b.n	800fdd6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800fc2c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800fc30:	2100      	movs	r1, #0
 800fc32:	68f8      	ldr	r0, [r7, #12]
 800fc34:	f002 fe0c 	bl	8012850 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	32b0      	adds	r2, #176	@ 0xb0
 800fc42:	68f9      	ldr	r1, [r7, #12]
 800fc44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	32b0      	adds	r2, #176	@ 0xb0
 800fc52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	7c1b      	ldrb	r3, [r3, #16]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d138      	bne.n	800fcd6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fc64:	4b5e      	ldr	r3, [pc, #376]	@ (800fde0 <USBD_CDC_Init+0x1e4>)
 800fc66:	7819      	ldrb	r1, [r3, #0]
 800fc68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc6c:	2202      	movs	r2, #2
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 ffcf 	bl	8010c12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fc74:	4b5a      	ldr	r3, [pc, #360]	@ (800fde0 <USBD_CDC_Init+0x1e4>)
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	f003 020f 	and.w	r2, r3, #15
 800fc7c:	6879      	ldr	r1, [r7, #4]
 800fc7e:	4613      	mov	r3, r2
 800fc80:	009b      	lsls	r3, r3, #2
 800fc82:	4413      	add	r3, r2
 800fc84:	009b      	lsls	r3, r3, #2
 800fc86:	440b      	add	r3, r1
 800fc88:	3324      	adds	r3, #36	@ 0x24
 800fc8a:	2201      	movs	r2, #1
 800fc8c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fc8e:	4b55      	ldr	r3, [pc, #340]	@ (800fde4 <USBD_CDC_Init+0x1e8>)
 800fc90:	7819      	ldrb	r1, [r3, #0]
 800fc92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc96:	2202      	movs	r2, #2
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f000 ffba 	bl	8010c12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fc9e:	4b51      	ldr	r3, [pc, #324]	@ (800fde4 <USBD_CDC_Init+0x1e8>)
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	f003 020f 	and.w	r2, r3, #15
 800fca6:	6879      	ldr	r1, [r7, #4]
 800fca8:	4613      	mov	r3, r2
 800fcaa:	009b      	lsls	r3, r3, #2
 800fcac:	4413      	add	r3, r2
 800fcae:	009b      	lsls	r3, r3, #2
 800fcb0:	440b      	add	r3, r1
 800fcb2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fcba:	4b4b      	ldr	r3, [pc, #300]	@ (800fde8 <USBD_CDC_Init+0x1ec>)
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	f003 020f 	and.w	r2, r3, #15
 800fcc2:	6879      	ldr	r1, [r7, #4]
 800fcc4:	4613      	mov	r3, r2
 800fcc6:	009b      	lsls	r3, r3, #2
 800fcc8:	4413      	add	r3, r2
 800fcca:	009b      	lsls	r3, r3, #2
 800fccc:	440b      	add	r3, r1
 800fcce:	3326      	adds	r3, #38	@ 0x26
 800fcd0:	2210      	movs	r2, #16
 800fcd2:	801a      	strh	r2, [r3, #0]
 800fcd4:	e035      	b.n	800fd42 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fcd6:	4b42      	ldr	r3, [pc, #264]	@ (800fde0 <USBD_CDC_Init+0x1e4>)
 800fcd8:	7819      	ldrb	r1, [r3, #0]
 800fcda:	2340      	movs	r3, #64	@ 0x40
 800fcdc:	2202      	movs	r2, #2
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 ff97 	bl	8010c12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fce4:	4b3e      	ldr	r3, [pc, #248]	@ (800fde0 <USBD_CDC_Init+0x1e4>)
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	f003 020f 	and.w	r2, r3, #15
 800fcec:	6879      	ldr	r1, [r7, #4]
 800fcee:	4613      	mov	r3, r2
 800fcf0:	009b      	lsls	r3, r3, #2
 800fcf2:	4413      	add	r3, r2
 800fcf4:	009b      	lsls	r3, r3, #2
 800fcf6:	440b      	add	r3, r1
 800fcf8:	3324      	adds	r3, #36	@ 0x24
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fcfe:	4b39      	ldr	r3, [pc, #228]	@ (800fde4 <USBD_CDC_Init+0x1e8>)
 800fd00:	7819      	ldrb	r1, [r3, #0]
 800fd02:	2340      	movs	r3, #64	@ 0x40
 800fd04:	2202      	movs	r2, #2
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 ff83 	bl	8010c12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fd0c:	4b35      	ldr	r3, [pc, #212]	@ (800fde4 <USBD_CDC_Init+0x1e8>)
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	f003 020f 	and.w	r2, r3, #15
 800fd14:	6879      	ldr	r1, [r7, #4]
 800fd16:	4613      	mov	r3, r2
 800fd18:	009b      	lsls	r3, r3, #2
 800fd1a:	4413      	add	r3, r2
 800fd1c:	009b      	lsls	r3, r3, #2
 800fd1e:	440b      	add	r3, r1
 800fd20:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fd24:	2201      	movs	r2, #1
 800fd26:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fd28:	4b2f      	ldr	r3, [pc, #188]	@ (800fde8 <USBD_CDC_Init+0x1ec>)
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	f003 020f 	and.w	r2, r3, #15
 800fd30:	6879      	ldr	r1, [r7, #4]
 800fd32:	4613      	mov	r3, r2
 800fd34:	009b      	lsls	r3, r3, #2
 800fd36:	4413      	add	r3, r2
 800fd38:	009b      	lsls	r3, r3, #2
 800fd3a:	440b      	add	r3, r1
 800fd3c:	3326      	adds	r3, #38	@ 0x26
 800fd3e:	2210      	movs	r2, #16
 800fd40:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fd42:	4b29      	ldr	r3, [pc, #164]	@ (800fde8 <USBD_CDC_Init+0x1ec>)
 800fd44:	7819      	ldrb	r1, [r3, #0]
 800fd46:	2308      	movs	r3, #8
 800fd48:	2203      	movs	r2, #3
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f000 ff61 	bl	8010c12 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800fd50:	4b25      	ldr	r3, [pc, #148]	@ (800fde8 <USBD_CDC_Init+0x1ec>)
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	f003 020f 	and.w	r2, r3, #15
 800fd58:	6879      	ldr	r1, [r7, #4]
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	009b      	lsls	r3, r3, #2
 800fd5e:	4413      	add	r3, r2
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	440b      	add	r3, r1
 800fd64:	3324      	adds	r3, #36	@ 0x24
 800fd66:	2201      	movs	r2, #1
 800fd68:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	33b0      	adds	r3, #176	@ 0xb0
 800fd7c:	009b      	lsls	r3, r3, #2
 800fd7e:	4413      	add	r3, r2
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2200      	movs	r2, #0
 800fd92:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d101      	bne.n	800fda4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800fda0:	2302      	movs	r3, #2
 800fda2:	e018      	b.n	800fdd6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	7c1b      	ldrb	r3, [r3, #16]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d10a      	bne.n	800fdc2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fdac:	4b0d      	ldr	r3, [pc, #52]	@ (800fde4 <USBD_CDC_Init+0x1e8>)
 800fdae:	7819      	ldrb	r1, [r3, #0]
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fdb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 fff4 	bl	8010da8 <USBD_LL_PrepareReceive>
 800fdc0:	e008      	b.n	800fdd4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fdc2:	4b08      	ldr	r3, [pc, #32]	@ (800fde4 <USBD_CDC_Init+0x1e8>)
 800fdc4:	7819      	ldrb	r1, [r3, #0]
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fdcc:	2340      	movs	r3, #64	@ 0x40
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f000 ffea 	bl	8010da8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fdd4:	2300      	movs	r3, #0
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3710      	adds	r7, #16
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
 800fdde:	bf00      	nop
 800fde0:	200000b3 	.word	0x200000b3
 800fde4:	200000b4 	.word	0x200000b4
 800fde8:	200000b5 	.word	0x200000b5

0800fdec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	460b      	mov	r3, r1
 800fdf6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800fdf8:	4b3a      	ldr	r3, [pc, #232]	@ (800fee4 <USBD_CDC_DeInit+0xf8>)
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f000 ff27 	bl	8010c52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800fe04:	4b37      	ldr	r3, [pc, #220]	@ (800fee4 <USBD_CDC_DeInit+0xf8>)
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	f003 020f 	and.w	r2, r3, #15
 800fe0c:	6879      	ldr	r1, [r7, #4]
 800fe0e:	4613      	mov	r3, r2
 800fe10:	009b      	lsls	r3, r3, #2
 800fe12:	4413      	add	r3, r2
 800fe14:	009b      	lsls	r3, r3, #2
 800fe16:	440b      	add	r3, r1
 800fe18:	3324      	adds	r3, #36	@ 0x24
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fe1e:	4b32      	ldr	r3, [pc, #200]	@ (800fee8 <USBD_CDC_DeInit+0xfc>)
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	4619      	mov	r1, r3
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f000 ff14 	bl	8010c52 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fe2a:	4b2f      	ldr	r3, [pc, #188]	@ (800fee8 <USBD_CDC_DeInit+0xfc>)
 800fe2c:	781b      	ldrb	r3, [r3, #0]
 800fe2e:	f003 020f 	and.w	r2, r3, #15
 800fe32:	6879      	ldr	r1, [r7, #4]
 800fe34:	4613      	mov	r3, r2
 800fe36:	009b      	lsls	r3, r3, #2
 800fe38:	4413      	add	r3, r2
 800fe3a:	009b      	lsls	r3, r3, #2
 800fe3c:	440b      	add	r3, r1
 800fe3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fe42:	2200      	movs	r2, #0
 800fe44:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800fe46:	4b29      	ldr	r3, [pc, #164]	@ (800feec <USBD_CDC_DeInit+0x100>)
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f000 ff00 	bl	8010c52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800fe52:	4b26      	ldr	r3, [pc, #152]	@ (800feec <USBD_CDC_DeInit+0x100>)
 800fe54:	781b      	ldrb	r3, [r3, #0]
 800fe56:	f003 020f 	and.w	r2, r3, #15
 800fe5a:	6879      	ldr	r1, [r7, #4]
 800fe5c:	4613      	mov	r3, r2
 800fe5e:	009b      	lsls	r3, r3, #2
 800fe60:	4413      	add	r3, r2
 800fe62:	009b      	lsls	r3, r3, #2
 800fe64:	440b      	add	r3, r1
 800fe66:	3324      	adds	r3, #36	@ 0x24
 800fe68:	2200      	movs	r2, #0
 800fe6a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800fe6c:	4b1f      	ldr	r3, [pc, #124]	@ (800feec <USBD_CDC_DeInit+0x100>)
 800fe6e:	781b      	ldrb	r3, [r3, #0]
 800fe70:	f003 020f 	and.w	r2, r3, #15
 800fe74:	6879      	ldr	r1, [r7, #4]
 800fe76:	4613      	mov	r3, r2
 800fe78:	009b      	lsls	r3, r3, #2
 800fe7a:	4413      	add	r3, r2
 800fe7c:	009b      	lsls	r3, r3, #2
 800fe7e:	440b      	add	r3, r1
 800fe80:	3326      	adds	r3, #38	@ 0x26
 800fe82:	2200      	movs	r2, #0
 800fe84:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	32b0      	adds	r2, #176	@ 0xb0
 800fe90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d01f      	beq.n	800fed8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	33b0      	adds	r3, #176	@ 0xb0
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	4413      	add	r3, r2
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	685b      	ldr	r3, [r3, #4]
 800feaa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	32b0      	adds	r2, #176	@ 0xb0
 800feb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feba:	4618      	mov	r0, r3
 800febc:	f000 ffb0 	bl	8010e20 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	32b0      	adds	r2, #176	@ 0xb0
 800feca:	2100      	movs	r1, #0
 800fecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2200      	movs	r2, #0
 800fed4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fed8:	2300      	movs	r3, #0
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3708      	adds	r7, #8
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop
 800fee4:	200000b3 	.word	0x200000b3
 800fee8:	200000b4 	.word	0x200000b4
 800feec:	200000b5 	.word	0x200000b5

0800fef0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b086      	sub	sp, #24
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	32b0      	adds	r2, #176	@ 0xb0
 800ff04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff08:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff12:	2300      	movs	r3, #0
 800ff14:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d101      	bne.n	800ff20 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ff1c:	2303      	movs	r3, #3
 800ff1e:	e0bf      	b.n	80100a0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d050      	beq.n	800ffce <USBD_CDC_Setup+0xde>
 800ff2c:	2b20      	cmp	r3, #32
 800ff2e:	f040 80af 	bne.w	8010090 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	88db      	ldrh	r3, [r3, #6]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d03a      	beq.n	800ffb0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	b25b      	sxtb	r3, r3
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	da1b      	bge.n	800ff7c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff4a:	687a      	ldr	r2, [r7, #4]
 800ff4c:	33b0      	adds	r3, #176	@ 0xb0
 800ff4e:	009b      	lsls	r3, r3, #2
 800ff50:	4413      	add	r3, r2
 800ff52:	685b      	ldr	r3, [r3, #4]
 800ff54:	689b      	ldr	r3, [r3, #8]
 800ff56:	683a      	ldr	r2, [r7, #0]
 800ff58:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ff5a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ff5c:	683a      	ldr	r2, [r7, #0]
 800ff5e:	88d2      	ldrh	r2, [r2, #6]
 800ff60:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	88db      	ldrh	r3, [r3, #6]
 800ff66:	2b07      	cmp	r3, #7
 800ff68:	bf28      	it	cs
 800ff6a:	2307      	movcs	r3, #7
 800ff6c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	89fa      	ldrh	r2, [r7, #14]
 800ff72:	4619      	mov	r1, r3
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f002 fa46 	bl	8012406 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ff7a:	e090      	b.n	801009e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	785a      	ldrb	r2, [r3, #1]
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	88db      	ldrh	r3, [r3, #6]
 800ff8a:	2b3f      	cmp	r3, #63	@ 0x3f
 800ff8c:	d803      	bhi.n	800ff96 <USBD_CDC_Setup+0xa6>
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	88db      	ldrh	r3, [r3, #6]
 800ff92:	b2da      	uxtb	r2, r3
 800ff94:	e000      	b.n	800ff98 <USBD_CDC_Setup+0xa8>
 800ff96:	2240      	movs	r2, #64	@ 0x40
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ff9e:	6939      	ldr	r1, [r7, #16]
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f002 fa58 	bl	801245e <USBD_CtlPrepareRx>
      break;
 800ffae:	e076      	b.n	801009e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	33b0      	adds	r3, #176	@ 0xb0
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	4413      	add	r3, r2
 800ffbe:	685b      	ldr	r3, [r3, #4]
 800ffc0:	689b      	ldr	r3, [r3, #8]
 800ffc2:	683a      	ldr	r2, [r7, #0]
 800ffc4:	7850      	ldrb	r0, [r2, #1]
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	6839      	ldr	r1, [r7, #0]
 800ffca:	4798      	blx	r3
      break;
 800ffcc:	e067      	b.n	801009e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	785b      	ldrb	r3, [r3, #1]
 800ffd2:	2b0b      	cmp	r3, #11
 800ffd4:	d851      	bhi.n	801007a <USBD_CDC_Setup+0x18a>
 800ffd6:	a201      	add	r2, pc, #4	@ (adr r2, 800ffdc <USBD_CDC_Setup+0xec>)
 800ffd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffdc:	0801000d 	.word	0x0801000d
 800ffe0:	08010089 	.word	0x08010089
 800ffe4:	0801007b 	.word	0x0801007b
 800ffe8:	0801007b 	.word	0x0801007b
 800ffec:	0801007b 	.word	0x0801007b
 800fff0:	0801007b 	.word	0x0801007b
 800fff4:	0801007b 	.word	0x0801007b
 800fff8:	0801007b 	.word	0x0801007b
 800fffc:	0801007b 	.word	0x0801007b
 8010000:	0801007b 	.word	0x0801007b
 8010004:	08010037 	.word	0x08010037
 8010008:	08010061 	.word	0x08010061
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010012:	b2db      	uxtb	r3, r3
 8010014:	2b03      	cmp	r3, #3
 8010016:	d107      	bne.n	8010028 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010018:	f107 030a 	add.w	r3, r7, #10
 801001c:	2202      	movs	r2, #2
 801001e:	4619      	mov	r1, r3
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f002 f9f0 	bl	8012406 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010026:	e032      	b.n	801008e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010028:	6839      	ldr	r1, [r7, #0]
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f002 f86d 	bl	801210a <USBD_CtlError>
            ret = USBD_FAIL;
 8010030:	2303      	movs	r3, #3
 8010032:	75fb      	strb	r3, [r7, #23]
          break;
 8010034:	e02b      	b.n	801008e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801003c:	b2db      	uxtb	r3, r3
 801003e:	2b03      	cmp	r3, #3
 8010040:	d107      	bne.n	8010052 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010042:	f107 030d 	add.w	r3, r7, #13
 8010046:	2201      	movs	r2, #1
 8010048:	4619      	mov	r1, r3
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f002 f9db 	bl	8012406 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010050:	e01d      	b.n	801008e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010052:	6839      	ldr	r1, [r7, #0]
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f002 f858 	bl	801210a <USBD_CtlError>
            ret = USBD_FAIL;
 801005a:	2303      	movs	r3, #3
 801005c:	75fb      	strb	r3, [r7, #23]
          break;
 801005e:	e016      	b.n	801008e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010066:	b2db      	uxtb	r3, r3
 8010068:	2b03      	cmp	r3, #3
 801006a:	d00f      	beq.n	801008c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801006c:	6839      	ldr	r1, [r7, #0]
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f002 f84b 	bl	801210a <USBD_CtlError>
            ret = USBD_FAIL;
 8010074:	2303      	movs	r3, #3
 8010076:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010078:	e008      	b.n	801008c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801007a:	6839      	ldr	r1, [r7, #0]
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f002 f844 	bl	801210a <USBD_CtlError>
          ret = USBD_FAIL;
 8010082:	2303      	movs	r3, #3
 8010084:	75fb      	strb	r3, [r7, #23]
          break;
 8010086:	e002      	b.n	801008e <USBD_CDC_Setup+0x19e>
          break;
 8010088:	bf00      	nop
 801008a:	e008      	b.n	801009e <USBD_CDC_Setup+0x1ae>
          break;
 801008c:	bf00      	nop
      }
      break;
 801008e:	e006      	b.n	801009e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010090:	6839      	ldr	r1, [r7, #0]
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f002 f839 	bl	801210a <USBD_CtlError>
      ret = USBD_FAIL;
 8010098:	2303      	movs	r3, #3
 801009a:	75fb      	strb	r3, [r7, #23]
      break;
 801009c:	bf00      	nop
  }

  return (uint8_t)ret;
 801009e:	7dfb      	ldrb	r3, [r7, #23]
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3718      	adds	r7, #24
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	460b      	mov	r3, r1
 80100b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80100ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	32b0      	adds	r2, #176	@ 0xb0
 80100c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d101      	bne.n	80100d2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80100ce:	2303      	movs	r3, #3
 80100d0:	e065      	b.n	801019e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	32b0      	adds	r2, #176	@ 0xb0
 80100dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80100e2:	78fb      	ldrb	r3, [r7, #3]
 80100e4:	f003 020f 	and.w	r2, r3, #15
 80100e8:	6879      	ldr	r1, [r7, #4]
 80100ea:	4613      	mov	r3, r2
 80100ec:	009b      	lsls	r3, r3, #2
 80100ee:	4413      	add	r3, r2
 80100f0:	009b      	lsls	r3, r3, #2
 80100f2:	440b      	add	r3, r1
 80100f4:	3318      	adds	r3, #24
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d02f      	beq.n	801015c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80100fc:	78fb      	ldrb	r3, [r7, #3]
 80100fe:	f003 020f 	and.w	r2, r3, #15
 8010102:	6879      	ldr	r1, [r7, #4]
 8010104:	4613      	mov	r3, r2
 8010106:	009b      	lsls	r3, r3, #2
 8010108:	4413      	add	r3, r2
 801010a:	009b      	lsls	r3, r3, #2
 801010c:	440b      	add	r3, r1
 801010e:	3318      	adds	r3, #24
 8010110:	681a      	ldr	r2, [r3, #0]
 8010112:	78fb      	ldrb	r3, [r7, #3]
 8010114:	f003 010f 	and.w	r1, r3, #15
 8010118:	68f8      	ldr	r0, [r7, #12]
 801011a:	460b      	mov	r3, r1
 801011c:	009b      	lsls	r3, r3, #2
 801011e:	440b      	add	r3, r1
 8010120:	00db      	lsls	r3, r3, #3
 8010122:	4403      	add	r3, r0
 8010124:	3324      	adds	r3, #36	@ 0x24
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	fbb2 f1f3 	udiv	r1, r2, r3
 801012c:	fb01 f303 	mul.w	r3, r1, r3
 8010130:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010132:	2b00      	cmp	r3, #0
 8010134:	d112      	bne.n	801015c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010136:	78fb      	ldrb	r3, [r7, #3]
 8010138:	f003 020f 	and.w	r2, r3, #15
 801013c:	6879      	ldr	r1, [r7, #4]
 801013e:	4613      	mov	r3, r2
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	4413      	add	r3, r2
 8010144:	009b      	lsls	r3, r3, #2
 8010146:	440b      	add	r3, r1
 8010148:	3318      	adds	r3, #24
 801014a:	2200      	movs	r2, #0
 801014c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801014e:	78f9      	ldrb	r1, [r7, #3]
 8010150:	2300      	movs	r3, #0
 8010152:	2200      	movs	r2, #0
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 fe0c 	bl	8010d72 <USBD_LL_Transmit>
 801015a:	e01f      	b.n	801019c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	2200      	movs	r2, #0
 8010160:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801016a:	687a      	ldr	r2, [r7, #4]
 801016c:	33b0      	adds	r3, #176	@ 0xb0
 801016e:	009b      	lsls	r3, r3, #2
 8010170:	4413      	add	r3, r2
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	691b      	ldr	r3, [r3, #16]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d010      	beq.n	801019c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010180:	687a      	ldr	r2, [r7, #4]
 8010182:	33b0      	adds	r3, #176	@ 0xb0
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	4413      	add	r3, r2
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	691b      	ldr	r3, [r3, #16]
 801018c:	68ba      	ldr	r2, [r7, #8]
 801018e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8010192:	68ba      	ldr	r2, [r7, #8]
 8010194:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010198:	78fa      	ldrb	r2, [r7, #3]
 801019a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801019c:	2300      	movs	r3, #0
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3710      	adds	r7, #16
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}

080101a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80101a6:	b580      	push	{r7, lr}
 80101a8:	b084      	sub	sp, #16
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	6078      	str	r0, [r7, #4]
 80101ae:	460b      	mov	r3, r1
 80101b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	32b0      	adds	r2, #176	@ 0xb0
 80101bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	32b0      	adds	r2, #176	@ 0xb0
 80101cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d101      	bne.n	80101d8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80101d4:	2303      	movs	r3, #3
 80101d6:	e01a      	b.n	801020e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80101d8:	78fb      	ldrb	r3, [r7, #3]
 80101da:	4619      	mov	r1, r3
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f000 fdfe 	bl	8010dde <USBD_LL_GetRxDataSize>
 80101e2:	4602      	mov	r2, r0
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	33b0      	adds	r3, #176	@ 0xb0
 80101f4:	009b      	lsls	r3, r3, #2
 80101f6:	4413      	add	r3, r2
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	68db      	ldr	r3, [r3, #12]
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8010202:	68fa      	ldr	r2, [r7, #12]
 8010204:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010208:	4611      	mov	r1, r2
 801020a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801020c:	2300      	movs	r3, #0
}
 801020e:	4618      	mov	r0, r3
 8010210:	3710      	adds	r7, #16
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}

08010216 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010216:	b580      	push	{r7, lr}
 8010218:	b084      	sub	sp, #16
 801021a:	af00      	add	r7, sp, #0
 801021c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	32b0      	adds	r2, #176	@ 0xb0
 8010228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801022c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d101      	bne.n	8010238 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010234:	2303      	movs	r3, #3
 8010236:	e024      	b.n	8010282 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	33b0      	adds	r3, #176	@ 0xb0
 8010242:	009b      	lsls	r3, r3, #2
 8010244:	4413      	add	r3, r2
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d019      	beq.n	8010280 <USBD_CDC_EP0_RxReady+0x6a>
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8010252:	2bff      	cmp	r3, #255	@ 0xff
 8010254:	d014      	beq.n	8010280 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801025c:	687a      	ldr	r2, [r7, #4]
 801025e:	33b0      	adds	r3, #176	@ 0xb0
 8010260:	009b      	lsls	r3, r3, #2
 8010262:	4413      	add	r3, r2
 8010264:	685b      	ldr	r3, [r3, #4]
 8010266:	689b      	ldr	r3, [r3, #8]
 8010268:	68fa      	ldr	r2, [r7, #12]
 801026a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801026e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010270:	68fa      	ldr	r2, [r7, #12]
 8010272:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010276:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	22ff      	movs	r2, #255	@ 0xff
 801027c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8010280:	2300      	movs	r3, #0
}
 8010282:	4618      	mov	r0, r3
 8010284:	3710      	adds	r7, #16
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}
	...

0801028c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b086      	sub	sp, #24
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010294:	2182      	movs	r1, #130	@ 0x82
 8010296:	4818      	ldr	r0, [pc, #96]	@ (80102f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010298:	f001 f901 	bl	801149e <USBD_GetEpDesc>
 801029c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801029e:	2101      	movs	r1, #1
 80102a0:	4815      	ldr	r0, [pc, #84]	@ (80102f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80102a2:	f001 f8fc 	bl	801149e <USBD_GetEpDesc>
 80102a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80102a8:	2181      	movs	r1, #129	@ 0x81
 80102aa:	4813      	ldr	r0, [pc, #76]	@ (80102f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80102ac:	f001 f8f7 	bl	801149e <USBD_GetEpDesc>
 80102b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d002      	beq.n	80102be <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	2210      	movs	r2, #16
 80102bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d006      	beq.n	80102d2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	2200      	movs	r2, #0
 80102c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80102cc:	711a      	strb	r2, [r3, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d006      	beq.n	80102e6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	2200      	movs	r2, #0
 80102dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80102e0:	711a      	strb	r2, [r3, #4]
 80102e2:	2200      	movs	r2, #0
 80102e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2243      	movs	r2, #67	@ 0x43
 80102ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80102ec:	4b02      	ldr	r3, [pc, #8]	@ (80102f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3718      	adds	r7, #24
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	bf00      	nop
 80102f8:	20000070 	.word	0x20000070

080102fc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b086      	sub	sp, #24
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010304:	2182      	movs	r1, #130	@ 0x82
 8010306:	4818      	ldr	r0, [pc, #96]	@ (8010368 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010308:	f001 f8c9 	bl	801149e <USBD_GetEpDesc>
 801030c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801030e:	2101      	movs	r1, #1
 8010310:	4815      	ldr	r0, [pc, #84]	@ (8010368 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010312:	f001 f8c4 	bl	801149e <USBD_GetEpDesc>
 8010316:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010318:	2181      	movs	r1, #129	@ 0x81
 801031a:	4813      	ldr	r0, [pc, #76]	@ (8010368 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801031c:	f001 f8bf 	bl	801149e <USBD_GetEpDesc>
 8010320:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d002      	beq.n	801032e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	2210      	movs	r2, #16
 801032c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d006      	beq.n	8010342 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	2200      	movs	r2, #0
 8010338:	711a      	strb	r2, [r3, #4]
 801033a:	2200      	movs	r2, #0
 801033c:	f042 0202 	orr.w	r2, r2, #2
 8010340:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d006      	beq.n	8010356 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	2200      	movs	r2, #0
 801034c:	711a      	strb	r2, [r3, #4]
 801034e:	2200      	movs	r2, #0
 8010350:	f042 0202 	orr.w	r2, r2, #2
 8010354:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2243      	movs	r2, #67	@ 0x43
 801035a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801035c:	4b02      	ldr	r3, [pc, #8]	@ (8010368 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801035e:	4618      	mov	r0, r3
 8010360:	3718      	adds	r7, #24
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	20000070 	.word	0x20000070

0801036c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b086      	sub	sp, #24
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010374:	2182      	movs	r1, #130	@ 0x82
 8010376:	4818      	ldr	r0, [pc, #96]	@ (80103d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010378:	f001 f891 	bl	801149e <USBD_GetEpDesc>
 801037c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801037e:	2101      	movs	r1, #1
 8010380:	4815      	ldr	r0, [pc, #84]	@ (80103d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010382:	f001 f88c 	bl	801149e <USBD_GetEpDesc>
 8010386:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010388:	2181      	movs	r1, #129	@ 0x81
 801038a:	4813      	ldr	r0, [pc, #76]	@ (80103d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801038c:	f001 f887 	bl	801149e <USBD_GetEpDesc>
 8010390:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d002      	beq.n	801039e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	2210      	movs	r2, #16
 801039c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d006      	beq.n	80103b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	2200      	movs	r2, #0
 80103a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80103ac:	711a      	strb	r2, [r3, #4]
 80103ae:	2200      	movs	r2, #0
 80103b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d006      	beq.n	80103c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2200      	movs	r2, #0
 80103bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80103c0:	711a      	strb	r2, [r3, #4]
 80103c2:	2200      	movs	r2, #0
 80103c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2243      	movs	r2, #67	@ 0x43
 80103ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80103cc:	4b02      	ldr	r3, [pc, #8]	@ (80103d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3718      	adds	r7, #24
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	20000070 	.word	0x20000070

080103dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80103dc:	b480      	push	{r7}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	220a      	movs	r2, #10
 80103e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80103ea:	4b03      	ldr	r3, [pc, #12]	@ (80103f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	370c      	adds	r7, #12
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr
 80103f8:	2000002c 	.word	0x2000002c

080103fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80103fc:	b480      	push	{r7}
 80103fe:	b083      	sub	sp, #12
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d101      	bne.n	8010410 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801040c:	2303      	movs	r3, #3
 801040e:	e009      	b.n	8010424 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010416:	687a      	ldr	r2, [r7, #4]
 8010418:	33b0      	adds	r3, #176	@ 0xb0
 801041a:	009b      	lsls	r3, r3, #2
 801041c:	4413      	add	r3, r2
 801041e:	683a      	ldr	r2, [r7, #0]
 8010420:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010422:	2300      	movs	r3, #0
}
 8010424:	4618      	mov	r0, r3
 8010426:	370c      	adds	r7, #12
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr

08010430 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010430:	b480      	push	{r7}
 8010432:	b087      	sub	sp, #28
 8010434:	af00      	add	r7, sp, #0
 8010436:	60f8      	str	r0, [r7, #12]
 8010438:	60b9      	str	r1, [r7, #8]
 801043a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	32b0      	adds	r2, #176	@ 0xb0
 8010446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801044a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d101      	bne.n	8010456 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010452:	2303      	movs	r3, #3
 8010454:	e008      	b.n	8010468 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	68ba      	ldr	r2, [r7, #8]
 801045a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	687a      	ldr	r2, [r7, #4]
 8010462:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8010466:	2300      	movs	r3, #0
}
 8010468:	4618      	mov	r0, r3
 801046a:	371c      	adds	r7, #28
 801046c:	46bd      	mov	sp, r7
 801046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010472:	4770      	bx	lr

08010474 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010474:	b480      	push	{r7}
 8010476:	b085      	sub	sp, #20
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	32b0      	adds	r2, #176	@ 0xb0
 8010488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801048c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d101      	bne.n	8010498 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010494:	2303      	movs	r3, #3
 8010496:	e004      	b.n	80104a2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	683a      	ldr	r2, [r7, #0]
 801049c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80104a0:	2300      	movs	r3, #0
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3714      	adds	r7, #20
 80104a6:	46bd      	mov	sp, r7
 80104a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ac:	4770      	bx	lr
	...

080104b0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b084      	sub	sp, #16
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	32b0      	adds	r2, #176	@ 0xb0
 80104c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104c6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80104c8:	2301      	movs	r3, #1
 80104ca:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d101      	bne.n	80104d6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80104d2:	2303      	movs	r3, #3
 80104d4:	e025      	b.n	8010522 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d11f      	bne.n	8010520 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	2201      	movs	r2, #1
 80104e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80104e8:	4b10      	ldr	r3, [pc, #64]	@ (801052c <USBD_CDC_TransmitPacket+0x7c>)
 80104ea:	781b      	ldrb	r3, [r3, #0]
 80104ec:	f003 020f 	and.w	r2, r3, #15
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	4613      	mov	r3, r2
 80104fa:	009b      	lsls	r3, r3, #2
 80104fc:	4413      	add	r3, r2
 80104fe:	009b      	lsls	r3, r3, #2
 8010500:	4403      	add	r3, r0
 8010502:	3318      	adds	r3, #24
 8010504:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8010506:	4b09      	ldr	r3, [pc, #36]	@ (801052c <USBD_CDC_TransmitPacket+0x7c>)
 8010508:	7819      	ldrb	r1, [r3, #0]
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f000 fc2b 	bl	8010d72 <USBD_LL_Transmit>

    ret = USBD_OK;
 801051c:	2300      	movs	r3, #0
 801051e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010520:	7bfb      	ldrb	r3, [r7, #15]
}
 8010522:	4618      	mov	r0, r3
 8010524:	3710      	adds	r7, #16
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}
 801052a:	bf00      	nop
 801052c:	200000b3 	.word	0x200000b3

08010530 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b084      	sub	sp, #16
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	32b0      	adds	r2, #176	@ 0xb0
 8010542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010546:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	32b0      	adds	r2, #176	@ 0xb0
 8010552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d101      	bne.n	801055e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801055a:	2303      	movs	r3, #3
 801055c:	e018      	b.n	8010590 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	7c1b      	ldrb	r3, [r3, #16]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d10a      	bne.n	801057c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010566:	4b0c      	ldr	r3, [pc, #48]	@ (8010598 <USBD_CDC_ReceivePacket+0x68>)
 8010568:	7819      	ldrb	r1, [r3, #0]
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010570:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f000 fc17 	bl	8010da8 <USBD_LL_PrepareReceive>
 801057a:	e008      	b.n	801058e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801057c:	4b06      	ldr	r3, [pc, #24]	@ (8010598 <USBD_CDC_ReceivePacket+0x68>)
 801057e:	7819      	ldrb	r1, [r3, #0]
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010586:	2340      	movs	r3, #64	@ 0x40
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 fc0d 	bl	8010da8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801058e:	2300      	movs	r3, #0
}
 8010590:	4618      	mov	r0, r3
 8010592:	3710      	adds	r7, #16
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}
 8010598:	200000b4 	.word	0x200000b4

0801059c <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80105a0:	2200      	movs	r2, #0
 80105a2:	4905      	ldr	r1, [pc, #20]	@ (80105b8 <TEMPLATE_Init+0x1c>)
 80105a4:	4805      	ldr	r0, [pc, #20]	@ (80105bc <TEMPLATE_Init+0x20>)
 80105a6:	f7ff ff43 	bl	8010430 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80105aa:	4905      	ldr	r1, [pc, #20]	@ (80105c0 <TEMPLATE_Init+0x24>)
 80105ac:	4803      	ldr	r0, [pc, #12]	@ (80105bc <TEMPLATE_Init+0x20>)
 80105ae:	f7ff ff61 	bl	8010474 <USBD_CDC_SetRxBuffer>
      return (0);
 80105b2:	2300      	movs	r3, #0
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	bd80      	pop	{r7, pc}
 80105b8:	20000ce8 	.word	0x20000ce8
 80105bc:	20000760 	.word	0x20000760
 80105c0:	20000ae8 	.word	0x20000ae8

080105c4 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 80105c4:	b480      	push	{r7}
 80105c6:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 80105c8:	2300      	movs	r3, #0
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr

080105d4 <USB_Transmit>:

uint8_t USB_Transmit(uint8_t *data, uint32_t len)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b0a4      	sub	sp, #144	@ 0x90
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
    uint32_t offset = 0;
 80105de:	2300      	movs	r3, #0
 80105e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    const uint32_t bytesPerLine = 16;
 80105e4:	2310      	movs	r3, #16
 80105e6:	67bb      	str	r3, [r7, #120]	@ 0x78

    while (offset < len)
 80105e8:	e0a4      	b.n	8010734 <USB_Transmit+0x160>
    {
        uint16_t chunk_len = ((len - offset) >= CDC_BLOCK_SIZE) ? CDC_BLOCK_SIZE : (len - offset);
 80105ea:	683a      	ldr	r2, [r7, #0]
 80105ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80105f0:	1ad3      	subs	r3, r2, r3
 80105f2:	2b40      	cmp	r3, #64	@ 0x40
 80105f4:	bf28      	it	cs
 80105f6:	2340      	movcs	r3, #64	@ 0x40
 80105f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
        tx_complete = 0;
 80105fc:	4b53      	ldr	r3, [pc, #332]	@ (801074c <USB_Transmit+0x178>)
 80105fe:	2200      	movs	r2, #0
 8010600:	701a      	strb	r2, [r3, #0]
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &data[offset], chunk_len);
 8010602:	687a      	ldr	r2, [r7, #4]
 8010604:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010608:	4413      	add	r3, r2
 801060a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801060e:	4619      	mov	r1, r3
 8010610:	484f      	ldr	r0, [pc, #316]	@ (8010750 <USB_Transmit+0x17c>)
 8010612:	f7ff ff0d 	bl	8010430 <USBD_CDC_SetTxBuffer>

        // Log in 32-byte lines
        uint32_t printed = 0;
 8010616:	2300      	movs	r3, #0
 8010618:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 801061c:	e056      	b.n	80106cc <USB_Transmit+0xf8>
        {
            uint32_t lineLen = ((chunk_len - printed) > bytesPerLine) ? bytesPerLine : (chunk_len - printed);
 801061e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010622:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010626:	1ad3      	subs	r3, r2, r3
 8010628:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801062a:	4293      	cmp	r3, r2
 801062c:	bf28      	it	cs
 801062e:	4613      	movcs	r3, r2
 8010630:	673b      	str	r3, [r7, #112]	@ 0x70
            char log_line[BYTES_PER_LINE * 3 + 1] = {0};
 8010632:	2300      	movs	r3, #0
 8010634:	60bb      	str	r3, [r7, #8]
 8010636:	f107 030c 	add.w	r3, r7, #12
 801063a:	225d      	movs	r2, #93	@ 0x5d
 801063c:	2100      	movs	r1, #0
 801063e:	4618      	mov	r0, r3
 8010640:	f002 f906 	bl	8012850 <memset>
            char *ptr = log_line;
 8010644:	f107 0308 	add.w	r3, r7, #8
 8010648:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

            for (uint32_t i = 0; i < lineLen; i++)
 801064c:	2300      	movs	r3, #0
 801064e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010652:	e01c      	b.n	801068e <USB_Transmit+0xba>
            {
                ptr += snprintf(ptr, 4, "%02X ", data[offset + printed + i]);
 8010654:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010658:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801065c:	441a      	add	r2, r3
 801065e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010662:	4413      	add	r3, r2
 8010664:	687a      	ldr	r2, [r7, #4]
 8010666:	4413      	add	r3, r2
 8010668:	781b      	ldrb	r3, [r3, #0]
 801066a:	4a3a      	ldr	r2, [pc, #232]	@ (8010754 <USB_Transmit+0x180>)
 801066c:	2104      	movs	r1, #4
 801066e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8010672:	f002 f81d 	bl	80126b0 <sniprintf>
 8010676:	4603      	mov	r3, r0
 8010678:	461a      	mov	r2, r3
 801067a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801067e:	4413      	add	r3, r2
 8010680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            for (uint32_t i = 0; i < lineLen; i++)
 8010684:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010688:	3301      	adds	r3, #1
 801068a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801068e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010692:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010694:	429a      	cmp	r2, r3
 8010696:	d3dd      	bcc.n	8010654 <USB_Transmit+0x80>
            }

            if (printed == 0)
 8010698:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801069c:	2b00      	cmp	r3, #0
 801069e:	d108      	bne.n	80106b2 <USB_Transmit+0xde>
            {
                log_info("USB Tx [%d bytes]: %s", chunk_len, log_line);
 80106a0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80106a4:	f107 0208 	add.w	r2, r7, #8
 80106a8:	4619      	mov	r1, r3
 80106aa:	482b      	ldr	r0, [pc, #172]	@ (8010758 <USB_Transmit+0x184>)
 80106ac:	f7f1 f8e2 	bl	8001874 <log_info>
 80106b0:	e006      	b.n	80106c0 <USB_Transmit+0xec>
            }
            else
            {
                log_info("%19s%s", "", log_line);
 80106b2:	f107 0308 	add.w	r3, r7, #8
 80106b6:	461a      	mov	r2, r3
 80106b8:	4928      	ldr	r1, [pc, #160]	@ (801075c <USB_Transmit+0x188>)
 80106ba:	4829      	ldr	r0, [pc, #164]	@ (8010760 <USB_Transmit+0x18c>)
 80106bc:	f7f1 f8da 	bl	8001874 <log_info>
            }

            printed += lineLen;
 80106c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80106c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80106c6:	4413      	add	r3, r2
 80106c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 80106cc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80106d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d3a2      	bcc.n	801061e <USB_Transmit+0x4a>
        }

        if (USBD_CDC_TransmitPacket(&hUsbDeviceFS) != USBD_OK)
 80106d8:	481d      	ldr	r0, [pc, #116]	@ (8010750 <USB_Transmit+0x17c>)
 80106da:	f7ff fee9 	bl	80104b0 <USBD_CDC_TransmitPacket>
 80106de:	4603      	mov	r3, r0
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d001      	beq.n	80106e8 <USB_Transmit+0x114>
        {
            return USBD_FAIL;
 80106e4:	2303      	movs	r3, #3
 80106e6:	e02c      	b.n	8010742 <USB_Transmit+0x16e>
        }

        uint32_t timeout = 10000;
 80106e8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80106ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (tx_complete == 0 && timeout--);
 80106ee:	bf00      	nop
 80106f0:	4b16      	ldr	r3, [pc, #88]	@ (801074c <USB_Transmit+0x178>)
 80106f2:	781b      	ldrb	r3, [r3, #0]
 80106f4:	b2db      	uxtb	r3, r3
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d104      	bne.n	8010704 <USB_Transmit+0x130>
 80106fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80106fc:	1e5a      	subs	r2, r3, #1
 80106fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010700:	2b00      	cmp	r3, #0
 8010702:	d1f5      	bne.n	80106f0 <USB_Transmit+0x11c>
        if (timeout == 0)
 8010704:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010706:	2b00      	cmp	r3, #0
 8010708:	d104      	bne.n	8010714 <USB_Transmit+0x140>
        {
            log_error("USB TX Timeout");
 801070a:	4816      	ldr	r0, [pc, #88]	@ (8010764 <USB_Transmit+0x190>)
 801070c:	f7f1 f8e6 	bl	80018dc <log_error>
            return USBD_FAIL;
 8010710:	2303      	movs	r3, #3
 8010712:	e016      	b.n	8010742 <USB_Transmit+0x16e>
        }

        offset += chunk_len;
 8010714:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8010718:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801071c:	4413      	add	r3, r2
 801071e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (volatile int i = 0; i < 200; i++);
 8010722:	2300      	movs	r3, #0
 8010724:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010726:	e002      	b.n	801072e <USB_Transmit+0x15a>
 8010728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801072a:	3301      	adds	r3, #1
 801072c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801072e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010730:	2bc7      	cmp	r3, #199	@ 0xc7
 8010732:	ddf9      	ble.n	8010728 <USB_Transmit+0x154>
    while (offset < len)
 8010734:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	429a      	cmp	r2, r3
 801073c:	f4ff af55 	bcc.w	80105ea <USB_Transmit+0x16>
    }

    return USBD_OK;
 8010740:	2300      	movs	r3, #0
}
 8010742:	4618      	mov	r0, r3
 8010744:	3790      	adds	r7, #144	@ 0x90
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	200000b6 	.word	0x200000b6
 8010750:	20000760 	.word	0x20000760
 8010754:	0801464c 	.word	0x0801464c
 8010758:	08014654 	.word	0x08014654
 801075c:	0801466c 	.word	0x0801466c
 8010760:	08014670 	.word	0x08014670
 8010764:	08014678 	.word	0x08014678

08010768 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8010768:	b480      	push	{r7}
 801076a:	b083      	sub	sp, #12
 801076c:	af00      	add	r7, sp, #0
 801076e:	4603      	mov	r3, r0
 8010770:	6039      	str	r1, [r7, #0]
 8010772:	71fb      	strb	r3, [r7, #7]
 8010774:	4613      	mov	r3, r2
 8010776:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 8010778:	79fb      	ldrb	r3, [r7, #7]
 801077a:	2b23      	cmp	r3, #35	@ 0x23
 801077c:	f200 8098 	bhi.w	80108b0 <TEMPLATE_Control+0x148>
 8010780:	a201      	add	r2, pc, #4	@ (adr r2, 8010788 <TEMPLATE_Control+0x20>)
 8010782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010786:	bf00      	nop
 8010788:	080108b1 	.word	0x080108b1
 801078c:	080108b1 	.word	0x080108b1
 8010790:	080108b1 	.word	0x080108b1
 8010794:	080108b1 	.word	0x080108b1
 8010798:	080108b1 	.word	0x080108b1
 801079c:	080108b1 	.word	0x080108b1
 80107a0:	080108b1 	.word	0x080108b1
 80107a4:	080108b1 	.word	0x080108b1
 80107a8:	080108b1 	.word	0x080108b1
 80107ac:	080108b1 	.word	0x080108b1
 80107b0:	080108b1 	.word	0x080108b1
 80107b4:	080108b1 	.word	0x080108b1
 80107b8:	080108b1 	.word	0x080108b1
 80107bc:	080108b1 	.word	0x080108b1
 80107c0:	080108b1 	.word	0x080108b1
 80107c4:	080108b1 	.word	0x080108b1
 80107c8:	080108b1 	.word	0x080108b1
 80107cc:	080108b1 	.word	0x080108b1
 80107d0:	080108b1 	.word	0x080108b1
 80107d4:	080108b1 	.word	0x080108b1
 80107d8:	080108b1 	.word	0x080108b1
 80107dc:	080108b1 	.word	0x080108b1
 80107e0:	080108b1 	.word	0x080108b1
 80107e4:	080108b1 	.word	0x080108b1
 80107e8:	080108b1 	.word	0x080108b1
 80107ec:	080108b1 	.word	0x080108b1
 80107f0:	080108b1 	.word	0x080108b1
 80107f4:	080108b1 	.word	0x080108b1
 80107f8:	080108b1 	.word	0x080108b1
 80107fc:	080108b1 	.word	0x080108b1
 8010800:	080108b1 	.word	0x080108b1
 8010804:	080108b1 	.word	0x080108b1
 8010808:	08010819 	.word	0x08010819
 801080c:	0801085d 	.word	0x0801085d
 8010810:	080108b1 	.word	0x080108b1
 8010814:	080108b1 	.word	0x080108b1
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	461a      	mov	r2, r3
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	3301      	adds	r3, #1
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	021b      	lsls	r3, r3, #8
 8010826:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	3302      	adds	r3, #2
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8010830:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	3303      	adds	r3, #3
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	061b      	lsls	r3, r3, #24
 801083a:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 801083c:	461a      	mov	r2, r3
 801083e:	4b20      	ldr	r3, [pc, #128]	@ (80108c0 <TEMPLATE_Control+0x158>)
 8010840:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	791a      	ldrb	r2, [r3, #4]
 8010846:	4b1e      	ldr	r3, [pc, #120]	@ (80108c0 <TEMPLATE_Control+0x158>)
 8010848:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	795a      	ldrb	r2, [r3, #5]
 801084e:	4b1c      	ldr	r3, [pc, #112]	@ (80108c0 <TEMPLATE_Control+0x158>)
 8010850:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	799a      	ldrb	r2, [r3, #6]
 8010856:	4b1a      	ldr	r3, [pc, #104]	@ (80108c0 <TEMPLATE_Control+0x158>)
 8010858:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 801085a:	e02a      	b.n	80108b2 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 801085c:	4b18      	ldr	r3, [pc, #96]	@ (80108c0 <TEMPLATE_Control+0x158>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	b2da      	uxtb	r2, r3
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 8010866:	4b16      	ldr	r3, [pc, #88]	@ (80108c0 <TEMPLATE_Control+0x158>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	0a1a      	lsrs	r2, r3, #8
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	3301      	adds	r3, #1
 8010870:	b2d2      	uxtb	r2, r2
 8010872:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8010874:	4b12      	ldr	r3, [pc, #72]	@ (80108c0 <TEMPLATE_Control+0x158>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	0c1a      	lsrs	r2, r3, #16
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	3302      	adds	r3, #2
 801087e:	b2d2      	uxtb	r2, r2
 8010880:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8010882:	4b0f      	ldr	r3, [pc, #60]	@ (80108c0 <TEMPLATE_Control+0x158>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	0e1a      	lsrs	r2, r3, #24
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	3303      	adds	r3, #3
 801088c:	b2d2      	uxtb	r2, r2
 801088e:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	3304      	adds	r3, #4
 8010894:	4a0a      	ldr	r2, [pc, #40]	@ (80108c0 <TEMPLATE_Control+0x158>)
 8010896:	7912      	ldrb	r2, [r2, #4]
 8010898:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	3305      	adds	r3, #5
 801089e:	4a08      	ldr	r2, [pc, #32]	@ (80108c0 <TEMPLATE_Control+0x158>)
 80108a0:	7952      	ldrb	r2, [r2, #5]
 80108a2:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	3306      	adds	r3, #6
 80108a8:	4a05      	ldr	r2, [pc, #20]	@ (80108c0 <TEMPLATE_Control+0x158>)
 80108aa:	7992      	ldrb	r2, [r2, #6]
 80108ac:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 80108ae:	e000      	b.n	80108b2 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 80108b0:	bf00      	nop
  }

  return (0);
 80108b2:	2300      	movs	r3, #0
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	370c      	adds	r7, #12
 80108b8:	46bd      	mov	sp, r7
 80108ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108be:	4770      	bx	lr
 80108c0:	200000cc 	.word	0x200000cc

080108c4 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 80108c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108c8:	b08b      	sub	sp, #44	@ 0x2c
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
 80108ce:	6039      	str	r1, [r7, #0]
 80108d0:	466b      	mov	r3, sp
 80108d2:	461e      	mov	r6, r3
    const uint32_t bytesPerLine = 16;
 80108d4:	2310      	movs	r3, #16
 80108d6:	61bb      	str	r3, [r7, #24]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 80108d8:	69ba      	ldr	r2, [r7, #24]
 80108da:	4613      	mov	r3, r2
 80108dc:	005b      	lsls	r3, r3, #1
 80108de:	4413      	add	r3, r2
 80108e0:	617b      	str	r3, [r7, #20]
 80108e2:	69ba      	ldr	r2, [r7, #24]
 80108e4:	4613      	mov	r3, r2
 80108e6:	005b      	lsls	r3, r3, #1
 80108e8:	4413      	add	r3, r2
 80108ea:	3301      	adds	r3, #1
 80108ec:	2200      	movs	r2, #0
 80108ee:	4698      	mov	r8, r3
 80108f0:	4691      	mov	r9, r2
 80108f2:	f04f 0200 	mov.w	r2, #0
 80108f6:	f04f 0300 	mov.w	r3, #0
 80108fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80108fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010902:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010906:	69ba      	ldr	r2, [r7, #24]
 8010908:	4613      	mov	r3, r2
 801090a:	005b      	lsls	r3, r3, #1
 801090c:	4413      	add	r3, r2
 801090e:	3301      	adds	r3, #1
 8010910:	2200      	movs	r2, #0
 8010912:	461c      	mov	r4, r3
 8010914:	4615      	mov	r5, r2
 8010916:	f04f 0200 	mov.w	r2, #0
 801091a:	f04f 0300 	mov.w	r3, #0
 801091e:	00eb      	lsls	r3, r5, #3
 8010920:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010924:	00e2      	lsls	r2, r4, #3
 8010926:	69ba      	ldr	r2, [r7, #24]
 8010928:	4613      	mov	r3, r2
 801092a:	005b      	lsls	r3, r3, #1
 801092c:	4413      	add	r3, r2
 801092e:	3301      	adds	r3, #1
 8010930:	3307      	adds	r3, #7
 8010932:	08db      	lsrs	r3, r3, #3
 8010934:	00db      	lsls	r3, r3, #3
 8010936:	ebad 0d03 	sub.w	sp, sp, r3
 801093a:	466b      	mov	r3, sp
 801093c:	3300      	adds	r3, #0
 801093e:	613b      	str	r3, [r7, #16]
    uint32_t totalLen = *Len;
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	60fb      	str	r3, [r7, #12]
    uint32_t printed = 0;
 8010946:	2300      	movs	r3, #0
 8010948:	627b      	str	r3, [r7, #36]	@ 0x24

    if (*Len > CDC_DATA_FS_MAX_PACKET_SIZE) {
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	2b40      	cmp	r3, #64	@ 0x40
 8010950:	d944      	bls.n	80109dc <TEMPLATE_Receive+0x118>
        *Len = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	2240      	movs	r2, #64	@ 0x40
 8010956:	601a      	str	r2, [r3, #0]
    }

    while (printed < *Len)
 8010958:	e040      	b.n	80109dc <TEMPLATE_Receive+0x118>
    {
        uint32_t lineLen = ((*Len - printed) > bytesPerLine) ? bytesPerLine : (*Len - printed);
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	681a      	ldr	r2, [r3, #0]
 801095e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010960:	1ad3      	subs	r3, r2, r3
 8010962:	69ba      	ldr	r2, [r7, #24]
 8010964:	4293      	cmp	r3, r2
 8010966:	bf28      	it	cs
 8010968:	4613      	movcs	r3, r2
 801096a:	60bb      	str	r3, [r7, #8]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 801096c:	69ba      	ldr	r2, [r7, #24]
 801096e:	4613      	mov	r3, r2
 8010970:	005b      	lsls	r3, r3, #1
 8010972:	4413      	add	r3, r2
        memset(hexLine, 0, sizeof(hexLine));
 8010974:	3301      	adds	r3, #1
 8010976:	461a      	mov	r2, r3
 8010978:	2100      	movs	r1, #0
 801097a:	6938      	ldr	r0, [r7, #16]
 801097c:	f001 ff68 	bl	8012850 <memset>
        char *ptr = hexLine;
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	623b      	str	r3, [r7, #32]

        for (uint32_t i = 0; i < lineLen; ++i)
 8010984:	2300      	movs	r3, #0
 8010986:	61fb      	str	r3, [r7, #28]
 8010988:	e012      	b.n	80109b0 <TEMPLATE_Receive+0xec>
        {
            ptr += snprintf(ptr, 4, "%02X ", Buf[printed + i]);
 801098a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801098c:	69fb      	ldr	r3, [r7, #28]
 801098e:	4413      	add	r3, r2
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	4413      	add	r3, r2
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	4a2d      	ldr	r2, [pc, #180]	@ (8010a4c <TEMPLATE_Receive+0x188>)
 8010998:	2104      	movs	r1, #4
 801099a:	6a38      	ldr	r0, [r7, #32]
 801099c:	f001 fe88 	bl	80126b0 <sniprintf>
 80109a0:	4603      	mov	r3, r0
 80109a2:	461a      	mov	r2, r3
 80109a4:	6a3b      	ldr	r3, [r7, #32]
 80109a6:	4413      	add	r3, r2
 80109a8:	623b      	str	r3, [r7, #32]
        for (uint32_t i = 0; i < lineLen; ++i)
 80109aa:	69fb      	ldr	r3, [r7, #28]
 80109ac:	3301      	adds	r3, #1
 80109ae:	61fb      	str	r3, [r7, #28]
 80109b0:	69fa      	ldr	r2, [r7, #28]
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d3e8      	bcc.n	801098a <TEMPLATE_Receive+0xc6>
        }

        if (printed == 0)
 80109b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d105      	bne.n	80109ca <TEMPLATE_Receive+0x106>
        {
            // First line includes logger message
            log_info("USB Rx [%lu bytes]: %s", totalLen, hexLine);
 80109be:	693a      	ldr	r2, [r7, #16]
 80109c0:	68f9      	ldr	r1, [r7, #12]
 80109c2:	4823      	ldr	r0, [pc, #140]	@ (8010a50 <TEMPLATE_Receive+0x18c>)
 80109c4:	f7f0 ff56 	bl	8001874 <log_info>
 80109c8:	e004      	b.n	80109d4 <TEMPLATE_Receive+0x110>
        }
        else
        {
            // Subsequent lines have 26-space indent
            log_info("%19s%s", "", hexLine);
 80109ca:	693a      	ldr	r2, [r7, #16]
 80109cc:	4921      	ldr	r1, [pc, #132]	@ (8010a54 <TEMPLATE_Receive+0x190>)
 80109ce:	4822      	ldr	r0, [pc, #136]	@ (8010a58 <TEMPLATE_Receive+0x194>)
 80109d0:	f7f0 ff50 	bl	8001874 <log_info>
        }

        printed += lineLen;
 80109d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	4413      	add	r3, r2
 80109da:	627b      	str	r3, [r7, #36]	@ 0x24
    while (printed < *Len)
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d3b9      	bcc.n	801095a <TEMPLATE_Receive+0x96>
    }

    // Copy to usb_rx_buffer if space permits
    if ((usb_rx_index + *Len) < MAX_USB_DATA_SIZE)
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	681a      	ldr	r2, [r3, #0]
 80109ea:	4b1c      	ldr	r3, [pc, #112]	@ (8010a5c <TEMPLATE_Receive+0x198>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	4413      	add	r3, r2
 80109f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80109f4:	d215      	bcs.n	8010a22 <TEMPLATE_Receive+0x15e>
    {
        memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 80109f6:	4b19      	ldr	r3, [pc, #100]	@ (8010a5c <TEMPLATE_Receive+0x198>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	4a19      	ldr	r2, [pc, #100]	@ (8010a60 <TEMPLATE_Receive+0x19c>)
 80109fc:	1898      	adds	r0, r3, r2
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	461a      	mov	r2, r3
 8010a04:	6879      	ldr	r1, [r7, #4]
 8010a06:	f001 ff9e 	bl	8012946 <memcpy>
        usb_rx_index += *Len;
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	681a      	ldr	r2, [r3, #0]
 8010a0e:	4b13      	ldr	r3, [pc, #76]	@ (8010a5c <TEMPLATE_Receive+0x198>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	4413      	add	r3, r2
 8010a14:	4a11      	ldr	r2, [pc, #68]	@ (8010a5c <TEMPLATE_Receive+0x198>)
 8010a16:	6013      	str	r3, [r2, #0]
        log_error("USB buffer overflow");
        return USBD_FAIL;
    }

    // If this was the last packet
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE)
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8010a1e:	d80b      	bhi.n	8010a38 <TEMPLATE_Receive+0x174>
 8010a20:	e007      	b.n	8010a32 <TEMPLATE_Receive+0x16e>
        usb_rx_index = 0;
 8010a22:	4b0e      	ldr	r3, [pc, #56]	@ (8010a5c <TEMPLATE_Receive+0x198>)
 8010a24:	2200      	movs	r2, #0
 8010a26:	601a      	str	r2, [r3, #0]
        log_error("USB buffer overflow");
 8010a28:	480e      	ldr	r0, [pc, #56]	@ (8010a64 <TEMPLATE_Receive+0x1a0>)
 8010a2a:	f7f0 ff57 	bl	80018dc <log_error>
        return USBD_FAIL;
 8010a2e:	2303      	movs	r3, #3
 8010a30:	e006      	b.n	8010a40 <TEMPLATE_Receive+0x17c>
    {
        usb_rx_complete = true;
 8010a32:	4b0d      	ldr	r3, [pc, #52]	@ (8010a68 <TEMPLATE_Receive+0x1a4>)
 8010a34:	2201      	movs	r2, #1
 8010a36:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010a38:	480c      	ldr	r0, [pc, #48]	@ (8010a6c <TEMPLATE_Receive+0x1a8>)
 8010a3a:	f7ff fd79 	bl	8010530 <USBD_CDC_ReceivePacket>
    return USBD_OK;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	46b5      	mov	sp, r6
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	372c      	adds	r7, #44	@ 0x2c
 8010a46:	46bd      	mov	sp, r7
 8010a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a4c:	0801464c 	.word	0x0801464c
 8010a50:	08014688 	.word	0x08014688
 8010a54:	0801466c 	.word	0x0801466c
 8010a58:	08014670 	.word	0x08014670
 8010a5c:	20010ee8 	.word	0x20010ee8
 8010a60:	20000ee8 	.word	0x20000ee8
 8010a64:	080146a0 	.word	0x080146a0
 8010a68:	20010eec 	.word	0x20010eec
 8010a6c:	20000760 	.word	0x20000760

08010a70 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b085      	sub	sp, #20
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	60f8      	str	r0, [r7, #12]
 8010a78:	60b9      	str	r1, [r7, #8]
 8010a7a:	4613      	mov	r3, r2
 8010a7c:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 8010a7e:	2300      	movs	r3, #0

}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3714      	adds	r7, #20
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr

08010a8c <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	4610      	mov	r0, r2
 8010aa4:	f000 faa5 	bl	8010ff2 <USBD_LL_SetupStage>
}
 8010aa8:	bf00      	nop
 8010aaa:	3708      	adds	r7, #8
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	460b      	mov	r3, r1
 8010aba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 8010ac2:	78fa      	ldrb	r2, [r7, #3]
 8010ac4:	6879      	ldr	r1, [r7, #4]
 8010ac6:	4613      	mov	r3, r2
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	4413      	add	r3, r2
 8010acc:	00db      	lsls	r3, r3, #3
 8010ace:	440b      	add	r3, r1
 8010ad0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8010ad4:	681a      	ldr	r2, [r3, #0]
 8010ad6:	78fb      	ldrb	r3, [r7, #3]
 8010ad8:	4619      	mov	r1, r3
 8010ada:	f000 fadf 	bl	801109c <USBD_LL_DataOutStage>
}
 8010ade:	bf00      	nop
 8010ae0:	3708      	adds	r7, #8
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}

08010ae6 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010ae6:	b580      	push	{r7, lr}
 8010ae8:	b082      	sub	sp, #8
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	6078      	str	r0, [r7, #4]
 8010aee:	460b      	mov	r3, r1
 8010af0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 8010af8:	78fa      	ldrb	r2, [r7, #3]
 8010afa:	6879      	ldr	r1, [r7, #4]
 8010afc:	4613      	mov	r3, r2
 8010afe:	009b      	lsls	r3, r3, #2
 8010b00:	4413      	add	r3, r2
 8010b02:	00db      	lsls	r3, r3, #3
 8010b04:	440b      	add	r3, r1
 8010b06:	3328      	adds	r3, #40	@ 0x28
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	78fb      	ldrb	r3, [r7, #3]
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	f000 fb78 	bl	8011202 <USBD_LL_DataInStage>
}
 8010b12:	bf00      	nop
 8010b14:	3708      	adds	r7, #8
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b082      	sub	sp, #8
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f000 fc7e 	bl	801142a <USBD_LL_SOF>
}
 8010b2e:	bf00      	nop
 8010b30:	3708      	adds	r7, #8
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}

08010b36 <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8010b36:	b580      	push	{r7, lr}
 8010b38:	b084      	sub	sp, #16
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010b3e:	2301      	movs	r3, #1
 8010b40:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	79db      	ldrb	r3, [r3, #7]
 8010b46:	2b02      	cmp	r3, #2
 8010b48:	d001      	beq.n	8010b4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010b4a:	f7f1 faf3 	bl	8002134 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8010b54:	7bfa      	ldrb	r2, [r7, #15]
 8010b56:	4611      	mov	r1, r2
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f000 fc56 	bl	801140a <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8010b64:	4618      	mov	r0, r3
 8010b66:	f000 fbfe 	bl	8011366 <USBD_LL_Reset>
}
 8010b6a:	bf00      	nop
 8010b6c:	3710      	adds	r7, #16
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}
	...

08010b74 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b082      	sub	sp, #8
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	4a19      	ldr	r2, [pc, #100]	@ (8010be4 <USBD_LL_Init+0x70>)
 8010b80:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010b8a:	2340      	movs	r3, #64	@ 0x40
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	2100      	movs	r1, #0
 8010b90:	f7f5 fc48 	bl	8006424 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010b9a:	2380      	movs	r3, #128	@ 0x80
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	2180      	movs	r1, #128	@ 0x80
 8010ba0:	f7f5 fc40 	bl	8006424 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010baa:	23c0      	movs	r3, #192	@ 0xc0
 8010bac:	2200      	movs	r2, #0
 8010bae:	2181      	movs	r1, #129	@ 0x81
 8010bb0:	f7f5 fc38 	bl	8006424 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010bba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	2101      	movs	r1, #1
 8010bc2:	f7f5 fc2f 	bl	8006424 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010bcc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	2182      	movs	r1, #130	@ 0x82
 8010bd4:	f7f5 fc26 	bl	8006424 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 8010bd8:	2300      	movs	r3, #0
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3708      	adds	r7, #8
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}
 8010be2:	bf00      	nop
 8010be4:	2000047c 	.word	0x2000047c

08010be8 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f7f4 f8f8 	bl	8004dec <HAL_PCD_Start>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 8010c00:	7bfb      	ldrb	r3, [r7, #15]
 8010c02:	4618      	mov	r0, r3
 8010c04:	f000 f916 	bl	8010e34 <USBD_Get_USB_Status>
 8010c08:	4603      	mov	r3, r0
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	3710      	adds	r7, #16
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}

08010c12 <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b084      	sub	sp, #16
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	6078      	str	r0, [r7, #4]
 8010c1a:	4608      	mov	r0, r1
 8010c1c:	4611      	mov	r1, r2
 8010c1e:	461a      	mov	r2, r3
 8010c20:	4603      	mov	r3, r0
 8010c22:	70fb      	strb	r3, [r7, #3]
 8010c24:	460b      	mov	r3, r1
 8010c26:	70bb      	strb	r3, [r7, #2]
 8010c28:	4613      	mov	r3, r2
 8010c2a:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010c32:	78bb      	ldrb	r3, [r7, #2]
 8010c34:	883a      	ldrh	r2, [r7, #0]
 8010c36:	78f9      	ldrb	r1, [r7, #3]
 8010c38:	f7f4 fa27 	bl	800508a <HAL_PCD_EP_Open>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010c40:	7bfb      	ldrb	r3, [r7, #15]
 8010c42:	4618      	mov	r0, r3
 8010c44:	f000 f8f6 	bl	8010e34 <USBD_Get_USB_Status>
 8010c48:	4603      	mov	r3, r0
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3710      	adds	r7, #16
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}

08010c52 <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c52:	b580      	push	{r7, lr}
 8010c54:	b084      	sub	sp, #16
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	6078      	str	r0, [r7, #4]
 8010c5a:	460b      	mov	r3, r1
 8010c5c:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010c64:	78fa      	ldrb	r2, [r7, #3]
 8010c66:	4611      	mov	r1, r2
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f7f4 fa6f 	bl	800514c <HAL_PCD_EP_Close>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010c72:	7bfb      	ldrb	r3, [r7, #15]
 8010c74:	4618      	mov	r0, r3
 8010c76:	f000 f8dd 	bl	8010e34 <USBD_Get_USB_Status>
 8010c7a:	4603      	mov	r3, r0
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3710      	adds	r7, #16
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b084      	sub	sp, #16
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010c96:	78fa      	ldrb	r2, [r7, #3]
 8010c98:	4611      	mov	r1, r2
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7f4 fb22 	bl	80052e4 <HAL_PCD_EP_SetStall>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010ca4:	7bfb      	ldrb	r3, [r7, #15]
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f000 f8c4 	bl	8010e34 <USBD_Get_USB_Status>
 8010cac:	4603      	mov	r3, r0
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	3710      	adds	r7, #16
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}

08010cb6 <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 8010cb6:	b580      	push	{r7, lr}
 8010cb8:	b084      	sub	sp, #16
 8010cba:	af00      	add	r7, sp, #0
 8010cbc:	6078      	str	r0, [r7, #4]
 8010cbe:	460b      	mov	r3, r1
 8010cc0:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010cc8:	78fa      	ldrb	r2, [r7, #3]
 8010cca:	4611      	mov	r1, r2
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7f4 fb5d 	bl	800538c <HAL_PCD_EP_ClrStall>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010cd6:	7bfb      	ldrb	r3, [r7, #15]
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f000 f8ab 	bl	8010e34 <USBD_Get_USB_Status>
 8010cde:	4603      	mov	r3, r0
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3710      	adds	r7, #16
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}

08010ce8 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b085      	sub	sp, #20
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	460b      	mov	r3, r1
 8010cf2:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010cfa:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 8010cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	da0b      	bge.n	8010d1c <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010d04:	78fb      	ldrb	r3, [r7, #3]
 8010d06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010d0a:	68f9      	ldr	r1, [r7, #12]
 8010d0c:	4613      	mov	r3, r2
 8010d0e:	009b      	lsls	r3, r3, #2
 8010d10:	4413      	add	r3, r2
 8010d12:	00db      	lsls	r3, r3, #3
 8010d14:	440b      	add	r3, r1
 8010d16:	3316      	adds	r3, #22
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	e00b      	b.n	8010d34 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010d1c:	78fb      	ldrb	r3, [r7, #3]
 8010d1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010d22:	68f9      	ldr	r1, [r7, #12]
 8010d24:	4613      	mov	r3, r2
 8010d26:	009b      	lsls	r3, r3, #2
 8010d28:	4413      	add	r3, r2
 8010d2a:	00db      	lsls	r3, r3, #3
 8010d2c:	440b      	add	r3, r1
 8010d2e:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 8010d32:	781b      	ldrb	r3, [r3, #0]
      }
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3714      	adds	r7, #20
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr

08010d40 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b084      	sub	sp, #16
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	460b      	mov	r3, r1
 8010d4a:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010d52:	78fa      	ldrb	r2, [r7, #3]
 8010d54:	4611      	mov	r1, r2
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7f4 f973 	bl	8005042 <HAL_PCD_SetAddress>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010d60:	7bfb      	ldrb	r3, [r7, #15]
 8010d62:	4618      	mov	r0, r3
 8010d64:	f000 f866 	bl	8010e34 <USBD_Get_USB_Status>
 8010d68:	4603      	mov	r3, r0
}
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3710      	adds	r7, #16
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}

08010d72 <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 8010d72:	b580      	push	{r7, lr}
 8010d74:	b086      	sub	sp, #24
 8010d76:	af00      	add	r7, sp, #0
 8010d78:	60f8      	str	r0, [r7, #12]
 8010d7a:	607a      	str	r2, [r7, #4]
 8010d7c:	603b      	str	r3, [r7, #0]
 8010d7e:	460b      	mov	r3, r1
 8010d80:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010d88:	7af9      	ldrb	r1, [r7, #11]
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	687a      	ldr	r2, [r7, #4]
 8010d8e:	f7f4 fa71 	bl	8005274 <HAL_PCD_EP_Transmit>
 8010d92:	4603      	mov	r3, r0
 8010d94:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 8010d96:	7dfb      	ldrb	r3, [r7, #23]
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f000 f84b 	bl	8010e34 <USBD_Get_USB_Status>
 8010d9e:	4603      	mov	r3, r0
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	3718      	adds	r7, #24
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}

08010da8 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b086      	sub	sp, #24
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	60f8      	str	r0, [r7, #12]
 8010db0:	607a      	str	r2, [r7, #4]
 8010db2:	603b      	str	r3, [r7, #0]
 8010db4:	460b      	mov	r3, r1
 8010db6:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010dbe:	7af9      	ldrb	r1, [r7, #11]
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	687a      	ldr	r2, [r7, #4]
 8010dc4:	f7f4 fa0c 	bl	80051e0 <HAL_PCD_EP_Receive>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 8010dcc:	7dfb      	ldrb	r3, [r7, #23]
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f000 f830 	bl	8010e34 <USBD_Get_USB_Status>
 8010dd4:	4603      	mov	r3, r0
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3718      	adds	r7, #24
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}

08010dde <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010dde:	b580      	push	{r7, lr}
 8010de0:	b082      	sub	sp, #8
 8010de2:	af00      	add	r7, sp, #0
 8010de4:	6078      	str	r0, [r7, #4]
 8010de6:	460b      	mov	r3, r1
 8010de8:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010df0:	78fa      	ldrb	r2, [r7, #3]
 8010df2:	4611      	mov	r1, r2
 8010df4:	4618      	mov	r0, r3
 8010df6:	f7f4 fa25 	bl	8005244 <HAL_PCD_EP_GetRxCount>
 8010dfa:	4603      	mov	r3, r0
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3708      	adds	r7, #8
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}

08010e04 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 8010e04:	b480      	push	{r7}
 8010e06:	b083      	sub	sp, #12
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 8010e0c:	4b03      	ldr	r3, [pc, #12]	@ (8010e1c <USBD_static_malloc+0x18>)
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	370c      	adds	r7, #12
 8010e12:	46bd      	mov	sp, r7
 8010e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e18:	4770      	bx	lr
 8010e1a:	bf00      	nop
 8010e1c:	20010ef0 	.word	0x20010ef0

08010e20 <USBD_static_free>:

void USBD_static_free(void *p)
{
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 8010e28:	bf00      	nop
 8010e2a:	370c      	adds	r7, #12
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e32:	4770      	bx	lr

08010e34 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b085      	sub	sp, #20
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 8010e3e:	2300      	movs	r3, #0
 8010e40:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 8010e42:	79fb      	ldrb	r3, [r7, #7]
 8010e44:	2b03      	cmp	r3, #3
 8010e46:	d817      	bhi.n	8010e78 <USBD_Get_USB_Status+0x44>
 8010e48:	a201      	add	r2, pc, #4	@ (adr r2, 8010e50 <USBD_Get_USB_Status+0x1c>)
 8010e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e4e:	bf00      	nop
 8010e50:	08010e61 	.word	0x08010e61
 8010e54:	08010e67 	.word	0x08010e67
 8010e58:	08010e6d 	.word	0x08010e6d
 8010e5c:	08010e73 	.word	0x08010e73
      {
      case HAL_OK :
             usb_status = USBD_OK;
 8010e60:	2300      	movs	r3, #0
 8010e62:	73fb      	strb	r3, [r7, #15]
             break;
 8010e64:	e00b      	b.n	8010e7e <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 8010e66:	2303      	movs	r3, #3
 8010e68:	73fb      	strb	r3, [r7, #15]
             break;
 8010e6a:	e008      	b.n	8010e7e <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	73fb      	strb	r3, [r7, #15]
             break;
 8010e70:	e005      	b.n	8010e7e <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 8010e72:	2303      	movs	r3, #3
 8010e74:	73fb      	strb	r3, [r7, #15]
             break;
 8010e76:	e002      	b.n	8010e7e <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 8010e78:	2303      	movs	r3, #3
 8010e7a:	73fb      	strb	r3, [r7, #15]
             break;
 8010e7c:	bf00      	nop
      }
      return usb_status;
 8010e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3714      	adds	r7, #20
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr

08010e8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b086      	sub	sp, #24
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	60f8      	str	r0, [r7, #12]
 8010e94:	60b9      	str	r1, [r7, #8]
 8010e96:	4613      	mov	r3, r2
 8010e98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d101      	bne.n	8010ea4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010ea0:	2303      	movs	r3, #3
 8010ea2:	e01f      	b.n	8010ee4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	2200      	movs	r2, #0
 8010eb0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d003      	beq.n	8010eca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	68ba      	ldr	r2, [r7, #8]
 8010ec6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	2201      	movs	r2, #1
 8010ece:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	79fa      	ldrb	r2, [r7, #7]
 8010ed6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010ed8:	68f8      	ldr	r0, [r7, #12]
 8010eda:	f7ff fe4b 	bl	8010b74 <USBD_LL_Init>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	3718      	adds	r7, #24
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}

08010eec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b084      	sub	sp, #16
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d101      	bne.n	8010f04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010f00:	2303      	movs	r3, #3
 8010f02:	e025      	b.n	8010f50 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	683a      	ldr	r2, [r7, #0]
 8010f08:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	32ae      	adds	r2, #174	@ 0xae
 8010f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d00f      	beq.n	8010f40 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	32ae      	adds	r2, #174	@ 0xae
 8010f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f30:	f107 020e 	add.w	r2, r7, #14
 8010f34:	4610      	mov	r0, r2
 8010f36:	4798      	blx	r3
 8010f38:	4602      	mov	r2, r0
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010f46:	1c5a      	adds	r2, r3, #1
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8010f4e:	2300      	movs	r3, #0
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3710      	adds	r7, #16
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}

08010f58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f7ff fe41 	bl	8010be8 <USBD_LL_Start>
 8010f66:	4603      	mov	r3, r0
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	3708      	adds	r7, #8
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}

08010f70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010f70:	b480      	push	{r7}
 8010f72:	b083      	sub	sp, #12
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010f78:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	370c      	adds	r7, #12
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr

08010f86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f86:	b580      	push	{r7, lr}
 8010f88:	b084      	sub	sp, #16
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	6078      	str	r0, [r7, #4]
 8010f8e:	460b      	mov	r3, r1
 8010f90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f92:	2300      	movs	r3, #0
 8010f94:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d009      	beq.n	8010fb4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	78fa      	ldrb	r2, [r7, #3]
 8010faa:	4611      	mov	r1, r2
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	4798      	blx	r3
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	3710      	adds	r7, #16
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}

08010fbe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010fbe:	b580      	push	{r7, lr}
 8010fc0:	b084      	sub	sp, #16
 8010fc2:	af00      	add	r7, sp, #0
 8010fc4:	6078      	str	r0, [r7, #4]
 8010fc6:	460b      	mov	r3, r1
 8010fc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010fca:	2300      	movs	r3, #0
 8010fcc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	78fa      	ldrb	r2, [r7, #3]
 8010fd8:	4611      	mov	r1, r2
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	4798      	blx	r3
 8010fde:	4603      	mov	r3, r0
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d001      	beq.n	8010fe8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010fe4:	2303      	movs	r3, #3
 8010fe6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	3710      	adds	r7, #16
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}

08010ff2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010ff2:	b580      	push	{r7, lr}
 8010ff4:	b084      	sub	sp, #16
 8010ff6:	af00      	add	r7, sp, #0
 8010ff8:	6078      	str	r0, [r7, #4]
 8010ffa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011002:	6839      	ldr	r1, [r7, #0]
 8011004:	4618      	mov	r0, r3
 8011006:	f001 f846 	bl	8012096 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2201      	movs	r2, #1
 801100e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011018:	461a      	mov	r2, r3
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011026:	f003 031f 	and.w	r3, r3, #31
 801102a:	2b02      	cmp	r3, #2
 801102c:	d01a      	beq.n	8011064 <USBD_LL_SetupStage+0x72>
 801102e:	2b02      	cmp	r3, #2
 8011030:	d822      	bhi.n	8011078 <USBD_LL_SetupStage+0x86>
 8011032:	2b00      	cmp	r3, #0
 8011034:	d002      	beq.n	801103c <USBD_LL_SetupStage+0x4a>
 8011036:	2b01      	cmp	r3, #1
 8011038:	d00a      	beq.n	8011050 <USBD_LL_SetupStage+0x5e>
 801103a:	e01d      	b.n	8011078 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011042:	4619      	mov	r1, r3
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f000 fa9d 	bl	8011584 <USBD_StdDevReq>
 801104a:	4603      	mov	r3, r0
 801104c:	73fb      	strb	r3, [r7, #15]
      break;
 801104e:	e020      	b.n	8011092 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011056:	4619      	mov	r1, r3
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f000 fb05 	bl	8011668 <USBD_StdItfReq>
 801105e:	4603      	mov	r3, r0
 8011060:	73fb      	strb	r3, [r7, #15]
      break;
 8011062:	e016      	b.n	8011092 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801106a:	4619      	mov	r1, r3
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f000 fb67 	bl	8011740 <USBD_StdEPReq>
 8011072:	4603      	mov	r3, r0
 8011074:	73fb      	strb	r3, [r7, #15]
      break;
 8011076:	e00c      	b.n	8011092 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801107e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011082:	b2db      	uxtb	r3, r3
 8011084:	4619      	mov	r1, r3
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f7ff fdfc 	bl	8010c84 <USBD_LL_StallEP>
 801108c:	4603      	mov	r3, r0
 801108e:	73fb      	strb	r3, [r7, #15]
      break;
 8011090:	bf00      	nop
  }

  return ret;
 8011092:	7bfb      	ldrb	r3, [r7, #15]
}
 8011094:	4618      	mov	r0, r3
 8011096:	3710      	adds	r7, #16
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b086      	sub	sp, #24
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	460b      	mov	r3, r1
 80110a6:	607a      	str	r2, [r7, #4]
 80110a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80110aa:	2300      	movs	r3, #0
 80110ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80110ae:	7afb      	ldrb	r3, [r7, #11]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d16e      	bne.n	8011192 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80110ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80110c2:	2b03      	cmp	r3, #3
 80110c4:	f040 8098 	bne.w	80111f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	689a      	ldr	r2, [r3, #8]
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	68db      	ldr	r3, [r3, #12]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d913      	bls.n	80110fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	689a      	ldr	r2, [r3, #8]
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	68db      	ldr	r3, [r3, #12]
 80110dc:	1ad2      	subs	r2, r2, r3
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	68da      	ldr	r2, [r3, #12]
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	689b      	ldr	r3, [r3, #8]
 80110ea:	4293      	cmp	r3, r2
 80110ec:	bf28      	it	cs
 80110ee:	4613      	movcs	r3, r2
 80110f0:	461a      	mov	r2, r3
 80110f2:	6879      	ldr	r1, [r7, #4]
 80110f4:	68f8      	ldr	r0, [r7, #12]
 80110f6:	f001 f9cf 	bl	8012498 <USBD_CtlContinueRx>
 80110fa:	e07d      	b.n	80111f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011102:	f003 031f 	and.w	r3, r3, #31
 8011106:	2b02      	cmp	r3, #2
 8011108:	d014      	beq.n	8011134 <USBD_LL_DataOutStage+0x98>
 801110a:	2b02      	cmp	r3, #2
 801110c:	d81d      	bhi.n	801114a <USBD_LL_DataOutStage+0xae>
 801110e:	2b00      	cmp	r3, #0
 8011110:	d002      	beq.n	8011118 <USBD_LL_DataOutStage+0x7c>
 8011112:	2b01      	cmp	r3, #1
 8011114:	d003      	beq.n	801111e <USBD_LL_DataOutStage+0x82>
 8011116:	e018      	b.n	801114a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011118:	2300      	movs	r3, #0
 801111a:	75bb      	strb	r3, [r7, #22]
            break;
 801111c:	e018      	b.n	8011150 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011124:	b2db      	uxtb	r3, r3
 8011126:	4619      	mov	r1, r3
 8011128:	68f8      	ldr	r0, [r7, #12]
 801112a:	f000 f99e 	bl	801146a <USBD_CoreFindIF>
 801112e:	4603      	mov	r3, r0
 8011130:	75bb      	strb	r3, [r7, #22]
            break;
 8011132:	e00d      	b.n	8011150 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801113a:	b2db      	uxtb	r3, r3
 801113c:	4619      	mov	r1, r3
 801113e:	68f8      	ldr	r0, [r7, #12]
 8011140:	f000 f9a0 	bl	8011484 <USBD_CoreFindEP>
 8011144:	4603      	mov	r3, r0
 8011146:	75bb      	strb	r3, [r7, #22]
            break;
 8011148:	e002      	b.n	8011150 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801114a:	2300      	movs	r3, #0
 801114c:	75bb      	strb	r3, [r7, #22]
            break;
 801114e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011150:	7dbb      	ldrb	r3, [r7, #22]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d119      	bne.n	801118a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801115c:	b2db      	uxtb	r3, r3
 801115e:	2b03      	cmp	r3, #3
 8011160:	d113      	bne.n	801118a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011162:	7dba      	ldrb	r2, [r7, #22]
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	32ae      	adds	r2, #174	@ 0xae
 8011168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801116c:	691b      	ldr	r3, [r3, #16]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d00b      	beq.n	801118a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011172:	7dba      	ldrb	r2, [r7, #22]
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801117a:	7dba      	ldrb	r2, [r7, #22]
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	32ae      	adds	r2, #174	@ 0xae
 8011180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011184:	691b      	ldr	r3, [r3, #16]
 8011186:	68f8      	ldr	r0, [r7, #12]
 8011188:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801118a:	68f8      	ldr	r0, [r7, #12]
 801118c:	f001 f995 	bl	80124ba <USBD_CtlSendStatus>
 8011190:	e032      	b.n	80111f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011192:	7afb      	ldrb	r3, [r7, #11]
 8011194:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011198:	b2db      	uxtb	r3, r3
 801119a:	4619      	mov	r1, r3
 801119c:	68f8      	ldr	r0, [r7, #12]
 801119e:	f000 f971 	bl	8011484 <USBD_CoreFindEP>
 80111a2:	4603      	mov	r3, r0
 80111a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80111a6:	7dbb      	ldrb	r3, [r7, #22]
 80111a8:	2bff      	cmp	r3, #255	@ 0xff
 80111aa:	d025      	beq.n	80111f8 <USBD_LL_DataOutStage+0x15c>
 80111ac:	7dbb      	ldrb	r3, [r7, #22]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d122      	bne.n	80111f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	2b03      	cmp	r3, #3
 80111bc:	d117      	bne.n	80111ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80111be:	7dba      	ldrb	r2, [r7, #22]
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	32ae      	adds	r2, #174	@ 0xae
 80111c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111c8:	699b      	ldr	r3, [r3, #24]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d00f      	beq.n	80111ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80111ce:	7dba      	ldrb	r2, [r7, #22]
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80111d6:	7dba      	ldrb	r2, [r7, #22]
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	32ae      	adds	r2, #174	@ 0xae
 80111dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111e0:	699b      	ldr	r3, [r3, #24]
 80111e2:	7afa      	ldrb	r2, [r7, #11]
 80111e4:	4611      	mov	r1, r2
 80111e6:	68f8      	ldr	r0, [r7, #12]
 80111e8:	4798      	blx	r3
 80111ea:	4603      	mov	r3, r0
 80111ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80111ee:	7dfb      	ldrb	r3, [r7, #23]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d001      	beq.n	80111f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80111f4:	7dfb      	ldrb	r3, [r7, #23]
 80111f6:	e000      	b.n	80111fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80111f8:	2300      	movs	r3, #0
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3718      	adds	r7, #24
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}

08011202 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011202:	b580      	push	{r7, lr}
 8011204:	b086      	sub	sp, #24
 8011206:	af00      	add	r7, sp, #0
 8011208:	60f8      	str	r0, [r7, #12]
 801120a:	460b      	mov	r3, r1
 801120c:	607a      	str	r2, [r7, #4]
 801120e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011210:	7afb      	ldrb	r3, [r7, #11]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d16f      	bne.n	80112f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	3314      	adds	r3, #20
 801121a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011222:	2b02      	cmp	r3, #2
 8011224:	d15a      	bne.n	80112dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	689a      	ldr	r2, [r3, #8]
 801122a:	693b      	ldr	r3, [r7, #16]
 801122c:	68db      	ldr	r3, [r3, #12]
 801122e:	429a      	cmp	r2, r3
 8011230:	d914      	bls.n	801125c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	689a      	ldr	r2, [r3, #8]
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	68db      	ldr	r3, [r3, #12]
 801123a:	1ad2      	subs	r2, r2, r3
 801123c:	693b      	ldr	r3, [r7, #16]
 801123e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	689b      	ldr	r3, [r3, #8]
 8011244:	461a      	mov	r2, r3
 8011246:	6879      	ldr	r1, [r7, #4]
 8011248:	68f8      	ldr	r0, [r7, #12]
 801124a:	f001 f8f7 	bl	801243c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801124e:	2300      	movs	r3, #0
 8011250:	2200      	movs	r2, #0
 8011252:	2100      	movs	r1, #0
 8011254:	68f8      	ldr	r0, [r7, #12]
 8011256:	f7ff fda7 	bl	8010da8 <USBD_LL_PrepareReceive>
 801125a:	e03f      	b.n	80112dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	68da      	ldr	r2, [r3, #12]
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	689b      	ldr	r3, [r3, #8]
 8011264:	429a      	cmp	r2, r3
 8011266:	d11c      	bne.n	80112a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	685a      	ldr	r2, [r3, #4]
 801126c:	693b      	ldr	r3, [r7, #16]
 801126e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011270:	429a      	cmp	r2, r3
 8011272:	d316      	bcc.n	80112a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	685a      	ldr	r2, [r3, #4]
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801127e:	429a      	cmp	r2, r3
 8011280:	d20f      	bcs.n	80112a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011282:	2200      	movs	r2, #0
 8011284:	2100      	movs	r1, #0
 8011286:	68f8      	ldr	r0, [r7, #12]
 8011288:	f001 f8d8 	bl	801243c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	2200      	movs	r2, #0
 8011290:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011294:	2300      	movs	r3, #0
 8011296:	2200      	movs	r2, #0
 8011298:	2100      	movs	r1, #0
 801129a:	68f8      	ldr	r0, [r7, #12]
 801129c:	f7ff fd84 	bl	8010da8 <USBD_LL_PrepareReceive>
 80112a0:	e01c      	b.n	80112dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80112a8:	b2db      	uxtb	r3, r3
 80112aa:	2b03      	cmp	r3, #3
 80112ac:	d10f      	bne.n	80112ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112b4:	68db      	ldr	r3, [r3, #12]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d009      	beq.n	80112ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	2200      	movs	r2, #0
 80112be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112c8:	68db      	ldr	r3, [r3, #12]
 80112ca:	68f8      	ldr	r0, [r7, #12]
 80112cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80112ce:	2180      	movs	r1, #128	@ 0x80
 80112d0:	68f8      	ldr	r0, [r7, #12]
 80112d2:	f7ff fcd7 	bl	8010c84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80112d6:	68f8      	ldr	r0, [r7, #12]
 80112d8:	f001 f902 	bl	80124e0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d03a      	beq.n	801135c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80112e6:	68f8      	ldr	r0, [r7, #12]
 80112e8:	f7ff fe42 	bl	8010f70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	2200      	movs	r2, #0
 80112f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80112f4:	e032      	b.n	801135c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80112f6:	7afb      	ldrb	r3, [r7, #11]
 80112f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80112fc:	b2db      	uxtb	r3, r3
 80112fe:	4619      	mov	r1, r3
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f000 f8bf 	bl	8011484 <USBD_CoreFindEP>
 8011306:	4603      	mov	r3, r0
 8011308:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801130a:	7dfb      	ldrb	r3, [r7, #23]
 801130c:	2bff      	cmp	r3, #255	@ 0xff
 801130e:	d025      	beq.n	801135c <USBD_LL_DataInStage+0x15a>
 8011310:	7dfb      	ldrb	r3, [r7, #23]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d122      	bne.n	801135c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801131c:	b2db      	uxtb	r3, r3
 801131e:	2b03      	cmp	r3, #3
 8011320:	d11c      	bne.n	801135c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011322:	7dfa      	ldrb	r2, [r7, #23]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	32ae      	adds	r2, #174	@ 0xae
 8011328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801132c:	695b      	ldr	r3, [r3, #20]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d014      	beq.n	801135c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011332:	7dfa      	ldrb	r2, [r7, #23]
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801133a:	7dfa      	ldrb	r2, [r7, #23]
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	32ae      	adds	r2, #174	@ 0xae
 8011340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011344:	695b      	ldr	r3, [r3, #20]
 8011346:	7afa      	ldrb	r2, [r7, #11]
 8011348:	4611      	mov	r1, r2
 801134a:	68f8      	ldr	r0, [r7, #12]
 801134c:	4798      	blx	r3
 801134e:	4603      	mov	r3, r0
 8011350:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011352:	7dbb      	ldrb	r3, [r7, #22]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d001      	beq.n	801135c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011358:	7dbb      	ldrb	r3, [r7, #22]
 801135a:	e000      	b.n	801135e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801135c:	2300      	movs	r3, #0
}
 801135e:	4618      	mov	r0, r3
 8011360:	3718      	adds	r7, #24
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}

08011366 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011366:	b580      	push	{r7, lr}
 8011368:	b084      	sub	sp, #16
 801136a:	af00      	add	r7, sp, #0
 801136c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801136e:	2300      	movs	r3, #0
 8011370:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2201      	movs	r2, #1
 8011376:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	2200      	movs	r2, #0
 801137e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	2200      	movs	r2, #0
 8011386:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2200      	movs	r2, #0
 801138c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2200      	movs	r2, #0
 8011394:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d014      	beq.n	80113cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d00e      	beq.n	80113cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	687a      	ldr	r2, [r7, #4]
 80113b8:	6852      	ldr	r2, [r2, #4]
 80113ba:	b2d2      	uxtb	r2, r2
 80113bc:	4611      	mov	r1, r2
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	4798      	blx	r3
 80113c2:	4603      	mov	r3, r0
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d001      	beq.n	80113cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80113c8:	2303      	movs	r3, #3
 80113ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80113cc:	2340      	movs	r3, #64	@ 0x40
 80113ce:	2200      	movs	r2, #0
 80113d0:	2100      	movs	r1, #0
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f7ff fc1d 	bl	8010c12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	2201      	movs	r2, #1
 80113dc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2240      	movs	r2, #64	@ 0x40
 80113e4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80113e8:	2340      	movs	r3, #64	@ 0x40
 80113ea:	2200      	movs	r2, #0
 80113ec:	2180      	movs	r1, #128	@ 0x80
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f7ff fc0f 	bl	8010c12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2201      	movs	r2, #1
 80113f8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2240      	movs	r2, #64	@ 0x40
 80113fe:	621a      	str	r2, [r3, #32]

  return ret;
 8011400:	7bfb      	ldrb	r3, [r7, #15]
}
 8011402:	4618      	mov	r0, r3
 8011404:	3710      	adds	r7, #16
 8011406:	46bd      	mov	sp, r7
 8011408:	bd80      	pop	{r7, pc}

0801140a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801140a:	b480      	push	{r7}
 801140c:	b083      	sub	sp, #12
 801140e:	af00      	add	r7, sp, #0
 8011410:	6078      	str	r0, [r7, #4]
 8011412:	460b      	mov	r3, r1
 8011414:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	78fa      	ldrb	r2, [r7, #3]
 801141a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801141c:	2300      	movs	r3, #0
}
 801141e:	4618      	mov	r0, r3
 8011420:	370c      	adds	r7, #12
 8011422:	46bd      	mov	sp, r7
 8011424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011428:	4770      	bx	lr

0801142a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801142a:	b580      	push	{r7, lr}
 801142c:	b082      	sub	sp, #8
 801142e:	af00      	add	r7, sp, #0
 8011430:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011438:	b2db      	uxtb	r3, r3
 801143a:	2b03      	cmp	r3, #3
 801143c:	d110      	bne.n	8011460 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011444:	2b00      	cmp	r3, #0
 8011446:	d00b      	beq.n	8011460 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801144e:	69db      	ldr	r3, [r3, #28]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d005      	beq.n	8011460 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801145a:	69db      	ldr	r3, [r3, #28]
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011460:	2300      	movs	r3, #0
}
 8011462:	4618      	mov	r0, r3
 8011464:	3708      	adds	r7, #8
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}

0801146a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801146a:	b480      	push	{r7}
 801146c:	b083      	sub	sp, #12
 801146e:	af00      	add	r7, sp, #0
 8011470:	6078      	str	r0, [r7, #4]
 8011472:	460b      	mov	r3, r1
 8011474:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011476:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011478:	4618      	mov	r0, r3
 801147a:	370c      	adds	r7, #12
 801147c:	46bd      	mov	sp, r7
 801147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011482:	4770      	bx	lr

08011484 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011484:	b480      	push	{r7}
 8011486:	b083      	sub	sp, #12
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	460b      	mov	r3, r1
 801148e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011490:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011492:	4618      	mov	r0, r3
 8011494:	370c      	adds	r7, #12
 8011496:	46bd      	mov	sp, r7
 8011498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149c:	4770      	bx	lr

0801149e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801149e:	b580      	push	{r7, lr}
 80114a0:	b086      	sub	sp, #24
 80114a2:	af00      	add	r7, sp, #0
 80114a4:	6078      	str	r0, [r7, #4]
 80114a6:	460b      	mov	r3, r1
 80114a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80114b2:	2300      	movs	r3, #0
 80114b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	885b      	ldrh	r3, [r3, #2]
 80114ba:	b29b      	uxth	r3, r3
 80114bc:	68fa      	ldr	r2, [r7, #12]
 80114be:	7812      	ldrb	r2, [r2, #0]
 80114c0:	4293      	cmp	r3, r2
 80114c2:	d91f      	bls.n	8011504 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80114ca:	e013      	b.n	80114f4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80114cc:	f107 030a 	add.w	r3, r7, #10
 80114d0:	4619      	mov	r1, r3
 80114d2:	6978      	ldr	r0, [r7, #20]
 80114d4:	f000 f81b 	bl	801150e <USBD_GetNextDesc>
 80114d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	785b      	ldrb	r3, [r3, #1]
 80114de:	2b05      	cmp	r3, #5
 80114e0:	d108      	bne.n	80114f4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80114e6:	693b      	ldr	r3, [r7, #16]
 80114e8:	789b      	ldrb	r3, [r3, #2]
 80114ea:	78fa      	ldrb	r2, [r7, #3]
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d008      	beq.n	8011502 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80114f0:	2300      	movs	r3, #0
 80114f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	885b      	ldrh	r3, [r3, #2]
 80114f8:	b29a      	uxth	r2, r3
 80114fa:	897b      	ldrh	r3, [r7, #10]
 80114fc:	429a      	cmp	r2, r3
 80114fe:	d8e5      	bhi.n	80114cc <USBD_GetEpDesc+0x2e>
 8011500:	e000      	b.n	8011504 <USBD_GetEpDesc+0x66>
          break;
 8011502:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011504:	693b      	ldr	r3, [r7, #16]
}
 8011506:	4618      	mov	r0, r3
 8011508:	3718      	adds	r7, #24
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}

0801150e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801150e:	b480      	push	{r7}
 8011510:	b085      	sub	sp, #20
 8011512:	af00      	add	r7, sp, #0
 8011514:	6078      	str	r0, [r7, #4]
 8011516:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	881b      	ldrh	r3, [r3, #0]
 8011520:	68fa      	ldr	r2, [r7, #12]
 8011522:	7812      	ldrb	r2, [r2, #0]
 8011524:	4413      	add	r3, r2
 8011526:	b29a      	uxth	r2, r3
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	781b      	ldrb	r3, [r3, #0]
 8011530:	461a      	mov	r2, r3
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	4413      	add	r3, r2
 8011536:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011538:	68fb      	ldr	r3, [r7, #12]
}
 801153a:	4618      	mov	r0, r3
 801153c:	3714      	adds	r7, #20
 801153e:	46bd      	mov	sp, r7
 8011540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011544:	4770      	bx	lr

08011546 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011546:	b480      	push	{r7}
 8011548:	b087      	sub	sp, #28
 801154a:	af00      	add	r7, sp, #0
 801154c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	3301      	adds	r3, #1
 801155c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011564:	8a3b      	ldrh	r3, [r7, #16]
 8011566:	021b      	lsls	r3, r3, #8
 8011568:	b21a      	sxth	r2, r3
 801156a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801156e:	4313      	orrs	r3, r2
 8011570:	b21b      	sxth	r3, r3
 8011572:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011574:	89fb      	ldrh	r3, [r7, #14]
}
 8011576:	4618      	mov	r0, r3
 8011578:	371c      	adds	r7, #28
 801157a:	46bd      	mov	sp, r7
 801157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011580:	4770      	bx	lr
	...

08011584 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b084      	sub	sp, #16
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
 801158c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801158e:	2300      	movs	r3, #0
 8011590:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	781b      	ldrb	r3, [r3, #0]
 8011596:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801159a:	2b40      	cmp	r3, #64	@ 0x40
 801159c:	d005      	beq.n	80115aa <USBD_StdDevReq+0x26>
 801159e:	2b40      	cmp	r3, #64	@ 0x40
 80115a0:	d857      	bhi.n	8011652 <USBD_StdDevReq+0xce>
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d00f      	beq.n	80115c6 <USBD_StdDevReq+0x42>
 80115a6:	2b20      	cmp	r3, #32
 80115a8:	d153      	bne.n	8011652 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	32ae      	adds	r2, #174	@ 0xae
 80115b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115b8:	689b      	ldr	r3, [r3, #8]
 80115ba:	6839      	ldr	r1, [r7, #0]
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	4798      	blx	r3
 80115c0:	4603      	mov	r3, r0
 80115c2:	73fb      	strb	r3, [r7, #15]
      break;
 80115c4:	e04a      	b.n	801165c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	785b      	ldrb	r3, [r3, #1]
 80115ca:	2b09      	cmp	r3, #9
 80115cc:	d83b      	bhi.n	8011646 <USBD_StdDevReq+0xc2>
 80115ce:	a201      	add	r2, pc, #4	@ (adr r2, 80115d4 <USBD_StdDevReq+0x50>)
 80115d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115d4:	08011629 	.word	0x08011629
 80115d8:	0801163d 	.word	0x0801163d
 80115dc:	08011647 	.word	0x08011647
 80115e0:	08011633 	.word	0x08011633
 80115e4:	08011647 	.word	0x08011647
 80115e8:	08011607 	.word	0x08011607
 80115ec:	080115fd 	.word	0x080115fd
 80115f0:	08011647 	.word	0x08011647
 80115f4:	0801161f 	.word	0x0801161f
 80115f8:	08011611 	.word	0x08011611
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80115fc:	6839      	ldr	r1, [r7, #0]
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f000 fa3c 	bl	8011a7c <USBD_GetDescriptor>
          break;
 8011604:	e024      	b.n	8011650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011606:	6839      	ldr	r1, [r7, #0]
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f000 fba1 	bl	8011d50 <USBD_SetAddress>
          break;
 801160e:	e01f      	b.n	8011650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011610:	6839      	ldr	r1, [r7, #0]
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f000 fbe0 	bl	8011dd8 <USBD_SetConfig>
 8011618:	4603      	mov	r3, r0
 801161a:	73fb      	strb	r3, [r7, #15]
          break;
 801161c:	e018      	b.n	8011650 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801161e:	6839      	ldr	r1, [r7, #0]
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f000 fc83 	bl	8011f2c <USBD_GetConfig>
          break;
 8011626:	e013      	b.n	8011650 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011628:	6839      	ldr	r1, [r7, #0]
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f000 fcb4 	bl	8011f98 <USBD_GetStatus>
          break;
 8011630:	e00e      	b.n	8011650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011632:	6839      	ldr	r1, [r7, #0]
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f000 fce3 	bl	8012000 <USBD_SetFeature>
          break;
 801163a:	e009      	b.n	8011650 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801163c:	6839      	ldr	r1, [r7, #0]
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	f000 fd07 	bl	8012052 <USBD_ClrFeature>
          break;
 8011644:	e004      	b.n	8011650 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011646:	6839      	ldr	r1, [r7, #0]
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f000 fd5e 	bl	801210a <USBD_CtlError>
          break;
 801164e:	bf00      	nop
      }
      break;
 8011650:	e004      	b.n	801165c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011652:	6839      	ldr	r1, [r7, #0]
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f000 fd58 	bl	801210a <USBD_CtlError>
      break;
 801165a:	bf00      	nop
  }

  return ret;
 801165c:	7bfb      	ldrb	r3, [r7, #15]
}
 801165e:	4618      	mov	r0, r3
 8011660:	3710      	adds	r7, #16
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}
 8011666:	bf00      	nop

08011668 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b084      	sub	sp, #16
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011672:	2300      	movs	r3, #0
 8011674:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	781b      	ldrb	r3, [r3, #0]
 801167a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801167e:	2b40      	cmp	r3, #64	@ 0x40
 8011680:	d005      	beq.n	801168e <USBD_StdItfReq+0x26>
 8011682:	2b40      	cmp	r3, #64	@ 0x40
 8011684:	d852      	bhi.n	801172c <USBD_StdItfReq+0xc4>
 8011686:	2b00      	cmp	r3, #0
 8011688:	d001      	beq.n	801168e <USBD_StdItfReq+0x26>
 801168a:	2b20      	cmp	r3, #32
 801168c:	d14e      	bne.n	801172c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011694:	b2db      	uxtb	r3, r3
 8011696:	3b01      	subs	r3, #1
 8011698:	2b02      	cmp	r3, #2
 801169a:	d840      	bhi.n	801171e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	889b      	ldrh	r3, [r3, #4]
 80116a0:	b2db      	uxtb	r3, r3
 80116a2:	2b01      	cmp	r3, #1
 80116a4:	d836      	bhi.n	8011714 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	889b      	ldrh	r3, [r3, #4]
 80116aa:	b2db      	uxtb	r3, r3
 80116ac:	4619      	mov	r1, r3
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f7ff fedb 	bl	801146a <USBD_CoreFindIF>
 80116b4:	4603      	mov	r3, r0
 80116b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80116b8:	7bbb      	ldrb	r3, [r7, #14]
 80116ba:	2bff      	cmp	r3, #255	@ 0xff
 80116bc:	d01d      	beq.n	80116fa <USBD_StdItfReq+0x92>
 80116be:	7bbb      	ldrb	r3, [r7, #14]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d11a      	bne.n	80116fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80116c4:	7bba      	ldrb	r2, [r7, #14]
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	32ae      	adds	r2, #174	@ 0xae
 80116ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116ce:	689b      	ldr	r3, [r3, #8]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d00f      	beq.n	80116f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80116d4:	7bba      	ldrb	r2, [r7, #14]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80116dc:	7bba      	ldrb	r2, [r7, #14]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	32ae      	adds	r2, #174	@ 0xae
 80116e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116e6:	689b      	ldr	r3, [r3, #8]
 80116e8:	6839      	ldr	r1, [r7, #0]
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	4798      	blx	r3
 80116ee:	4603      	mov	r3, r0
 80116f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80116f2:	e004      	b.n	80116fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80116f4:	2303      	movs	r3, #3
 80116f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80116f8:	e001      	b.n	80116fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80116fa:	2303      	movs	r3, #3
 80116fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	88db      	ldrh	r3, [r3, #6]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d110      	bne.n	8011728 <USBD_StdItfReq+0xc0>
 8011706:	7bfb      	ldrb	r3, [r7, #15]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d10d      	bne.n	8011728 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f000 fed4 	bl	80124ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011712:	e009      	b.n	8011728 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011714:	6839      	ldr	r1, [r7, #0]
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f000 fcf7 	bl	801210a <USBD_CtlError>
          break;
 801171c:	e004      	b.n	8011728 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801171e:	6839      	ldr	r1, [r7, #0]
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f000 fcf2 	bl	801210a <USBD_CtlError>
          break;
 8011726:	e000      	b.n	801172a <USBD_StdItfReq+0xc2>
          break;
 8011728:	bf00      	nop
      }
      break;
 801172a:	e004      	b.n	8011736 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801172c:	6839      	ldr	r1, [r7, #0]
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f000 fceb 	bl	801210a <USBD_CtlError>
      break;
 8011734:	bf00      	nop
  }

  return ret;
 8011736:	7bfb      	ldrb	r3, [r7, #15]
}
 8011738:	4618      	mov	r0, r3
 801173a:	3710      	adds	r7, #16
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}

08011740 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b084      	sub	sp, #16
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801174a:	2300      	movs	r3, #0
 801174c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	889b      	ldrh	r3, [r3, #4]
 8011752:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	781b      	ldrb	r3, [r3, #0]
 8011758:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801175c:	2b40      	cmp	r3, #64	@ 0x40
 801175e:	d007      	beq.n	8011770 <USBD_StdEPReq+0x30>
 8011760:	2b40      	cmp	r3, #64	@ 0x40
 8011762:	f200 817f 	bhi.w	8011a64 <USBD_StdEPReq+0x324>
 8011766:	2b00      	cmp	r3, #0
 8011768:	d02a      	beq.n	80117c0 <USBD_StdEPReq+0x80>
 801176a:	2b20      	cmp	r3, #32
 801176c:	f040 817a 	bne.w	8011a64 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011770:	7bbb      	ldrb	r3, [r7, #14]
 8011772:	4619      	mov	r1, r3
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f7ff fe85 	bl	8011484 <USBD_CoreFindEP>
 801177a:	4603      	mov	r3, r0
 801177c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801177e:	7b7b      	ldrb	r3, [r7, #13]
 8011780:	2bff      	cmp	r3, #255	@ 0xff
 8011782:	f000 8174 	beq.w	8011a6e <USBD_StdEPReq+0x32e>
 8011786:	7b7b      	ldrb	r3, [r7, #13]
 8011788:	2b00      	cmp	r3, #0
 801178a:	f040 8170 	bne.w	8011a6e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801178e:	7b7a      	ldrb	r2, [r7, #13]
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011796:	7b7a      	ldrb	r2, [r7, #13]
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	32ae      	adds	r2, #174	@ 0xae
 801179c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117a0:	689b      	ldr	r3, [r3, #8]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	f000 8163 	beq.w	8011a6e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80117a8:	7b7a      	ldrb	r2, [r7, #13]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	32ae      	adds	r2, #174	@ 0xae
 80117ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117b2:	689b      	ldr	r3, [r3, #8]
 80117b4:	6839      	ldr	r1, [r7, #0]
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	4798      	blx	r3
 80117ba:	4603      	mov	r3, r0
 80117bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80117be:	e156      	b.n	8011a6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	785b      	ldrb	r3, [r3, #1]
 80117c4:	2b03      	cmp	r3, #3
 80117c6:	d008      	beq.n	80117da <USBD_StdEPReq+0x9a>
 80117c8:	2b03      	cmp	r3, #3
 80117ca:	f300 8145 	bgt.w	8011a58 <USBD_StdEPReq+0x318>
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	f000 809b 	beq.w	801190a <USBD_StdEPReq+0x1ca>
 80117d4:	2b01      	cmp	r3, #1
 80117d6:	d03c      	beq.n	8011852 <USBD_StdEPReq+0x112>
 80117d8:	e13e      	b.n	8011a58 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117e0:	b2db      	uxtb	r3, r3
 80117e2:	2b02      	cmp	r3, #2
 80117e4:	d002      	beq.n	80117ec <USBD_StdEPReq+0xac>
 80117e6:	2b03      	cmp	r3, #3
 80117e8:	d016      	beq.n	8011818 <USBD_StdEPReq+0xd8>
 80117ea:	e02c      	b.n	8011846 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80117ec:	7bbb      	ldrb	r3, [r7, #14]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d00d      	beq.n	801180e <USBD_StdEPReq+0xce>
 80117f2:	7bbb      	ldrb	r3, [r7, #14]
 80117f4:	2b80      	cmp	r3, #128	@ 0x80
 80117f6:	d00a      	beq.n	801180e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80117f8:	7bbb      	ldrb	r3, [r7, #14]
 80117fa:	4619      	mov	r1, r3
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f7ff fa41 	bl	8010c84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011802:	2180      	movs	r1, #128	@ 0x80
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f7ff fa3d 	bl	8010c84 <USBD_LL_StallEP>
 801180a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801180c:	e020      	b.n	8011850 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801180e:	6839      	ldr	r1, [r7, #0]
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f000 fc7a 	bl	801210a <USBD_CtlError>
              break;
 8011816:	e01b      	b.n	8011850 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	885b      	ldrh	r3, [r3, #2]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d10e      	bne.n	801183e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011820:	7bbb      	ldrb	r3, [r7, #14]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d00b      	beq.n	801183e <USBD_StdEPReq+0xfe>
 8011826:	7bbb      	ldrb	r3, [r7, #14]
 8011828:	2b80      	cmp	r3, #128	@ 0x80
 801182a:	d008      	beq.n	801183e <USBD_StdEPReq+0xfe>
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	88db      	ldrh	r3, [r3, #6]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d104      	bne.n	801183e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011834:	7bbb      	ldrb	r3, [r7, #14]
 8011836:	4619      	mov	r1, r3
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f7ff fa23 	bl	8010c84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f000 fe3b 	bl	80124ba <USBD_CtlSendStatus>

              break;
 8011844:	e004      	b.n	8011850 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011846:	6839      	ldr	r1, [r7, #0]
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f000 fc5e 	bl	801210a <USBD_CtlError>
              break;
 801184e:	bf00      	nop
          }
          break;
 8011850:	e107      	b.n	8011a62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011858:	b2db      	uxtb	r3, r3
 801185a:	2b02      	cmp	r3, #2
 801185c:	d002      	beq.n	8011864 <USBD_StdEPReq+0x124>
 801185e:	2b03      	cmp	r3, #3
 8011860:	d016      	beq.n	8011890 <USBD_StdEPReq+0x150>
 8011862:	e04b      	b.n	80118fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011864:	7bbb      	ldrb	r3, [r7, #14]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d00d      	beq.n	8011886 <USBD_StdEPReq+0x146>
 801186a:	7bbb      	ldrb	r3, [r7, #14]
 801186c:	2b80      	cmp	r3, #128	@ 0x80
 801186e:	d00a      	beq.n	8011886 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011870:	7bbb      	ldrb	r3, [r7, #14]
 8011872:	4619      	mov	r1, r3
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f7ff fa05 	bl	8010c84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801187a:	2180      	movs	r1, #128	@ 0x80
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f7ff fa01 	bl	8010c84 <USBD_LL_StallEP>
 8011882:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011884:	e040      	b.n	8011908 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011886:	6839      	ldr	r1, [r7, #0]
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f000 fc3e 	bl	801210a <USBD_CtlError>
              break;
 801188e:	e03b      	b.n	8011908 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	885b      	ldrh	r3, [r3, #2]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d136      	bne.n	8011906 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011898:	7bbb      	ldrb	r3, [r7, #14]
 801189a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d004      	beq.n	80118ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80118a2:	7bbb      	ldrb	r3, [r7, #14]
 80118a4:	4619      	mov	r1, r3
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f7ff fa05 	bl	8010cb6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f000 fe04 	bl	80124ba <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80118b2:	7bbb      	ldrb	r3, [r7, #14]
 80118b4:	4619      	mov	r1, r3
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	f7ff fde4 	bl	8011484 <USBD_CoreFindEP>
 80118bc:	4603      	mov	r3, r0
 80118be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80118c0:	7b7b      	ldrb	r3, [r7, #13]
 80118c2:	2bff      	cmp	r3, #255	@ 0xff
 80118c4:	d01f      	beq.n	8011906 <USBD_StdEPReq+0x1c6>
 80118c6:	7b7b      	ldrb	r3, [r7, #13]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d11c      	bne.n	8011906 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80118cc:	7b7a      	ldrb	r2, [r7, #13]
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80118d4:	7b7a      	ldrb	r2, [r7, #13]
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	32ae      	adds	r2, #174	@ 0xae
 80118da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118de:	689b      	ldr	r3, [r3, #8]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d010      	beq.n	8011906 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80118e4:	7b7a      	ldrb	r2, [r7, #13]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	32ae      	adds	r2, #174	@ 0xae
 80118ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118ee:	689b      	ldr	r3, [r3, #8]
 80118f0:	6839      	ldr	r1, [r7, #0]
 80118f2:	6878      	ldr	r0, [r7, #4]
 80118f4:	4798      	blx	r3
 80118f6:	4603      	mov	r3, r0
 80118f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80118fa:	e004      	b.n	8011906 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80118fc:	6839      	ldr	r1, [r7, #0]
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f000 fc03 	bl	801210a <USBD_CtlError>
              break;
 8011904:	e000      	b.n	8011908 <USBD_StdEPReq+0x1c8>
              break;
 8011906:	bf00      	nop
          }
          break;
 8011908:	e0ab      	b.n	8011a62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011910:	b2db      	uxtb	r3, r3
 8011912:	2b02      	cmp	r3, #2
 8011914:	d002      	beq.n	801191c <USBD_StdEPReq+0x1dc>
 8011916:	2b03      	cmp	r3, #3
 8011918:	d032      	beq.n	8011980 <USBD_StdEPReq+0x240>
 801191a:	e097      	b.n	8011a4c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801191c:	7bbb      	ldrb	r3, [r7, #14]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d007      	beq.n	8011932 <USBD_StdEPReq+0x1f2>
 8011922:	7bbb      	ldrb	r3, [r7, #14]
 8011924:	2b80      	cmp	r3, #128	@ 0x80
 8011926:	d004      	beq.n	8011932 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011928:	6839      	ldr	r1, [r7, #0]
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f000 fbed 	bl	801210a <USBD_CtlError>
                break;
 8011930:	e091      	b.n	8011a56 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011932:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011936:	2b00      	cmp	r3, #0
 8011938:	da0b      	bge.n	8011952 <USBD_StdEPReq+0x212>
 801193a:	7bbb      	ldrb	r3, [r7, #14]
 801193c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011940:	4613      	mov	r3, r2
 8011942:	009b      	lsls	r3, r3, #2
 8011944:	4413      	add	r3, r2
 8011946:	009b      	lsls	r3, r3, #2
 8011948:	3310      	adds	r3, #16
 801194a:	687a      	ldr	r2, [r7, #4]
 801194c:	4413      	add	r3, r2
 801194e:	3304      	adds	r3, #4
 8011950:	e00b      	b.n	801196a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011952:	7bbb      	ldrb	r3, [r7, #14]
 8011954:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011958:	4613      	mov	r3, r2
 801195a:	009b      	lsls	r3, r3, #2
 801195c:	4413      	add	r3, r2
 801195e:	009b      	lsls	r3, r3, #2
 8011960:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011964:	687a      	ldr	r2, [r7, #4]
 8011966:	4413      	add	r3, r2
 8011968:	3304      	adds	r3, #4
 801196a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801196c:	68bb      	ldr	r3, [r7, #8]
 801196e:	2200      	movs	r2, #0
 8011970:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	2202      	movs	r2, #2
 8011976:	4619      	mov	r1, r3
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f000 fd44 	bl	8012406 <USBD_CtlSendData>
              break;
 801197e:	e06a      	b.n	8011a56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011984:	2b00      	cmp	r3, #0
 8011986:	da11      	bge.n	80119ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011988:	7bbb      	ldrb	r3, [r7, #14]
 801198a:	f003 020f 	and.w	r2, r3, #15
 801198e:	6879      	ldr	r1, [r7, #4]
 8011990:	4613      	mov	r3, r2
 8011992:	009b      	lsls	r3, r3, #2
 8011994:	4413      	add	r3, r2
 8011996:	009b      	lsls	r3, r3, #2
 8011998:	440b      	add	r3, r1
 801199a:	3324      	adds	r3, #36	@ 0x24
 801199c:	881b      	ldrh	r3, [r3, #0]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d117      	bne.n	80119d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80119a2:	6839      	ldr	r1, [r7, #0]
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f000 fbb0 	bl	801210a <USBD_CtlError>
                  break;
 80119aa:	e054      	b.n	8011a56 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80119ac:	7bbb      	ldrb	r3, [r7, #14]
 80119ae:	f003 020f 	and.w	r2, r3, #15
 80119b2:	6879      	ldr	r1, [r7, #4]
 80119b4:	4613      	mov	r3, r2
 80119b6:	009b      	lsls	r3, r3, #2
 80119b8:	4413      	add	r3, r2
 80119ba:	009b      	lsls	r3, r3, #2
 80119bc:	440b      	add	r3, r1
 80119be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80119c2:	881b      	ldrh	r3, [r3, #0]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d104      	bne.n	80119d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80119c8:	6839      	ldr	r1, [r7, #0]
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f000 fb9d 	bl	801210a <USBD_CtlError>
                  break;
 80119d0:	e041      	b.n	8011a56 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80119d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	da0b      	bge.n	80119f2 <USBD_StdEPReq+0x2b2>
 80119da:	7bbb      	ldrb	r3, [r7, #14]
 80119dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80119e0:	4613      	mov	r3, r2
 80119e2:	009b      	lsls	r3, r3, #2
 80119e4:	4413      	add	r3, r2
 80119e6:	009b      	lsls	r3, r3, #2
 80119e8:	3310      	adds	r3, #16
 80119ea:	687a      	ldr	r2, [r7, #4]
 80119ec:	4413      	add	r3, r2
 80119ee:	3304      	adds	r3, #4
 80119f0:	e00b      	b.n	8011a0a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80119f2:	7bbb      	ldrb	r3, [r7, #14]
 80119f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80119f8:	4613      	mov	r3, r2
 80119fa:	009b      	lsls	r3, r3, #2
 80119fc:	4413      	add	r3, r2
 80119fe:	009b      	lsls	r3, r3, #2
 8011a00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011a04:	687a      	ldr	r2, [r7, #4]
 8011a06:	4413      	add	r3, r2
 8011a08:	3304      	adds	r3, #4
 8011a0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011a0c:	7bbb      	ldrb	r3, [r7, #14]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d002      	beq.n	8011a18 <USBD_StdEPReq+0x2d8>
 8011a12:	7bbb      	ldrb	r3, [r7, #14]
 8011a14:	2b80      	cmp	r3, #128	@ 0x80
 8011a16:	d103      	bne.n	8011a20 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	601a      	str	r2, [r3, #0]
 8011a1e:	e00e      	b.n	8011a3e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011a20:	7bbb      	ldrb	r3, [r7, #14]
 8011a22:	4619      	mov	r1, r3
 8011a24:	6878      	ldr	r0, [r7, #4]
 8011a26:	f7ff f95f 	bl	8010ce8 <USBD_LL_IsStallEP>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d003      	beq.n	8011a38 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	2201      	movs	r2, #1
 8011a34:	601a      	str	r2, [r3, #0]
 8011a36:	e002      	b.n	8011a3e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	2202      	movs	r2, #2
 8011a42:	4619      	mov	r1, r3
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f000 fcde 	bl	8012406 <USBD_CtlSendData>
              break;
 8011a4a:	e004      	b.n	8011a56 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011a4c:	6839      	ldr	r1, [r7, #0]
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f000 fb5b 	bl	801210a <USBD_CtlError>
              break;
 8011a54:	bf00      	nop
          }
          break;
 8011a56:	e004      	b.n	8011a62 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011a58:	6839      	ldr	r1, [r7, #0]
 8011a5a:	6878      	ldr	r0, [r7, #4]
 8011a5c:	f000 fb55 	bl	801210a <USBD_CtlError>
          break;
 8011a60:	bf00      	nop
      }
      break;
 8011a62:	e005      	b.n	8011a70 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011a64:	6839      	ldr	r1, [r7, #0]
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f000 fb4f 	bl	801210a <USBD_CtlError>
      break;
 8011a6c:	e000      	b.n	8011a70 <USBD_StdEPReq+0x330>
      break;
 8011a6e:	bf00      	nop
  }

  return ret;
 8011a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a72:	4618      	mov	r0, r3
 8011a74:	3710      	adds	r7, #16
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}
	...

08011a7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b084      	sub	sp, #16
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011a86:	2300      	movs	r3, #0
 8011a88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011a92:	683b      	ldr	r3, [r7, #0]
 8011a94:	885b      	ldrh	r3, [r3, #2]
 8011a96:	0a1b      	lsrs	r3, r3, #8
 8011a98:	b29b      	uxth	r3, r3
 8011a9a:	3b01      	subs	r3, #1
 8011a9c:	2b06      	cmp	r3, #6
 8011a9e:	f200 8128 	bhi.w	8011cf2 <USBD_GetDescriptor+0x276>
 8011aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8011aa8 <USBD_GetDescriptor+0x2c>)
 8011aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aa8:	08011ac5 	.word	0x08011ac5
 8011aac:	08011add 	.word	0x08011add
 8011ab0:	08011b1d 	.word	0x08011b1d
 8011ab4:	08011cf3 	.word	0x08011cf3
 8011ab8:	08011cf3 	.word	0x08011cf3
 8011abc:	08011c93 	.word	0x08011c93
 8011ac0:	08011cbf 	.word	0x08011cbf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	687a      	ldr	r2, [r7, #4]
 8011ace:	7c12      	ldrb	r2, [r2, #16]
 8011ad0:	f107 0108 	add.w	r1, r7, #8
 8011ad4:	4610      	mov	r0, r2
 8011ad6:	4798      	blx	r3
 8011ad8:	60f8      	str	r0, [r7, #12]
      break;
 8011ada:	e112      	b.n	8011d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	7c1b      	ldrb	r3, [r3, #16]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d10d      	bne.n	8011b00 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011aec:	f107 0208 	add.w	r2, r7, #8
 8011af0:	4610      	mov	r0, r2
 8011af2:	4798      	blx	r3
 8011af4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	3301      	adds	r3, #1
 8011afa:	2202      	movs	r2, #2
 8011afc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011afe:	e100      	b.n	8011d02 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b08:	f107 0208 	add.w	r2, r7, #8
 8011b0c:	4610      	mov	r0, r2
 8011b0e:	4798      	blx	r3
 8011b10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	3301      	adds	r3, #1
 8011b16:	2202      	movs	r2, #2
 8011b18:	701a      	strb	r2, [r3, #0]
      break;
 8011b1a:	e0f2      	b.n	8011d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	885b      	ldrh	r3, [r3, #2]
 8011b20:	b2db      	uxtb	r3, r3
 8011b22:	2b05      	cmp	r3, #5
 8011b24:	f200 80ac 	bhi.w	8011c80 <USBD_GetDescriptor+0x204>
 8011b28:	a201      	add	r2, pc, #4	@ (adr r2, 8011b30 <USBD_GetDescriptor+0xb4>)
 8011b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b2e:	bf00      	nop
 8011b30:	08011b49 	.word	0x08011b49
 8011b34:	08011b7d 	.word	0x08011b7d
 8011b38:	08011bb1 	.word	0x08011bb1
 8011b3c:	08011be5 	.word	0x08011be5
 8011b40:	08011c19 	.word	0x08011c19
 8011b44:	08011c4d 	.word	0x08011c4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b4e:	685b      	ldr	r3, [r3, #4]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d00b      	beq.n	8011b6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	687a      	ldr	r2, [r7, #4]
 8011b5e:	7c12      	ldrb	r2, [r2, #16]
 8011b60:	f107 0108 	add.w	r1, r7, #8
 8011b64:	4610      	mov	r0, r2
 8011b66:	4798      	blx	r3
 8011b68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011b6a:	e091      	b.n	8011c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011b6c:	6839      	ldr	r1, [r7, #0]
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f000 facb 	bl	801210a <USBD_CtlError>
            err++;
 8011b74:	7afb      	ldrb	r3, [r7, #11]
 8011b76:	3301      	adds	r3, #1
 8011b78:	72fb      	strb	r3, [r7, #11]
          break;
 8011b7a:	e089      	b.n	8011c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b82:	689b      	ldr	r3, [r3, #8]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d00b      	beq.n	8011ba0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b8e:	689b      	ldr	r3, [r3, #8]
 8011b90:	687a      	ldr	r2, [r7, #4]
 8011b92:	7c12      	ldrb	r2, [r2, #16]
 8011b94:	f107 0108 	add.w	r1, r7, #8
 8011b98:	4610      	mov	r0, r2
 8011b9a:	4798      	blx	r3
 8011b9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011b9e:	e077      	b.n	8011c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011ba0:	6839      	ldr	r1, [r7, #0]
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	f000 fab1 	bl	801210a <USBD_CtlError>
            err++;
 8011ba8:	7afb      	ldrb	r3, [r7, #11]
 8011baa:	3301      	adds	r3, #1
 8011bac:	72fb      	strb	r3, [r7, #11]
          break;
 8011bae:	e06f      	b.n	8011c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011bb6:	68db      	ldr	r3, [r3, #12]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d00b      	beq.n	8011bd4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011bc2:	68db      	ldr	r3, [r3, #12]
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	7c12      	ldrb	r2, [r2, #16]
 8011bc8:	f107 0108 	add.w	r1, r7, #8
 8011bcc:	4610      	mov	r0, r2
 8011bce:	4798      	blx	r3
 8011bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011bd2:	e05d      	b.n	8011c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011bd4:	6839      	ldr	r1, [r7, #0]
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f000 fa97 	bl	801210a <USBD_CtlError>
            err++;
 8011bdc:	7afb      	ldrb	r3, [r7, #11]
 8011bde:	3301      	adds	r3, #1
 8011be0:	72fb      	strb	r3, [r7, #11]
          break;
 8011be2:	e055      	b.n	8011c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011bea:	691b      	ldr	r3, [r3, #16]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d00b      	beq.n	8011c08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011bf6:	691b      	ldr	r3, [r3, #16]
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	7c12      	ldrb	r2, [r2, #16]
 8011bfc:	f107 0108 	add.w	r1, r7, #8
 8011c00:	4610      	mov	r0, r2
 8011c02:	4798      	blx	r3
 8011c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c06:	e043      	b.n	8011c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011c08:	6839      	ldr	r1, [r7, #0]
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f000 fa7d 	bl	801210a <USBD_CtlError>
            err++;
 8011c10:	7afb      	ldrb	r3, [r7, #11]
 8011c12:	3301      	adds	r3, #1
 8011c14:	72fb      	strb	r3, [r7, #11]
          break;
 8011c16:	e03b      	b.n	8011c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c1e:	695b      	ldr	r3, [r3, #20]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d00b      	beq.n	8011c3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c2a:	695b      	ldr	r3, [r3, #20]
 8011c2c:	687a      	ldr	r2, [r7, #4]
 8011c2e:	7c12      	ldrb	r2, [r2, #16]
 8011c30:	f107 0108 	add.w	r1, r7, #8
 8011c34:	4610      	mov	r0, r2
 8011c36:	4798      	blx	r3
 8011c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c3a:	e029      	b.n	8011c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011c3c:	6839      	ldr	r1, [r7, #0]
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f000 fa63 	bl	801210a <USBD_CtlError>
            err++;
 8011c44:	7afb      	ldrb	r3, [r7, #11]
 8011c46:	3301      	adds	r3, #1
 8011c48:	72fb      	strb	r3, [r7, #11]
          break;
 8011c4a:	e021      	b.n	8011c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c52:	699b      	ldr	r3, [r3, #24]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d00b      	beq.n	8011c70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c5e:	699b      	ldr	r3, [r3, #24]
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	7c12      	ldrb	r2, [r2, #16]
 8011c64:	f107 0108 	add.w	r1, r7, #8
 8011c68:	4610      	mov	r0, r2
 8011c6a:	4798      	blx	r3
 8011c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c6e:	e00f      	b.n	8011c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011c70:	6839      	ldr	r1, [r7, #0]
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f000 fa49 	bl	801210a <USBD_CtlError>
            err++;
 8011c78:	7afb      	ldrb	r3, [r7, #11]
 8011c7a:	3301      	adds	r3, #1
 8011c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8011c7e:	e007      	b.n	8011c90 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011c80:	6839      	ldr	r1, [r7, #0]
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	f000 fa41 	bl	801210a <USBD_CtlError>
          err++;
 8011c88:	7afb      	ldrb	r3, [r7, #11]
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011c8e:	bf00      	nop
      }
      break;
 8011c90:	e037      	b.n	8011d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	7c1b      	ldrb	r3, [r3, #16]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d109      	bne.n	8011cae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ca2:	f107 0208 	add.w	r2, r7, #8
 8011ca6:	4610      	mov	r0, r2
 8011ca8:	4798      	blx	r3
 8011caa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011cac:	e029      	b.n	8011d02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011cae:	6839      	ldr	r1, [r7, #0]
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f000 fa2a 	bl	801210a <USBD_CtlError>
        err++;
 8011cb6:	7afb      	ldrb	r3, [r7, #11]
 8011cb8:	3301      	adds	r3, #1
 8011cba:	72fb      	strb	r3, [r7, #11]
      break;
 8011cbc:	e021      	b.n	8011d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	7c1b      	ldrb	r3, [r3, #16]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d10d      	bne.n	8011ce2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cce:	f107 0208 	add.w	r2, r7, #8
 8011cd2:	4610      	mov	r0, r2
 8011cd4:	4798      	blx	r3
 8011cd6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	3301      	adds	r3, #1
 8011cdc:	2207      	movs	r2, #7
 8011cde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011ce0:	e00f      	b.n	8011d02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011ce2:	6839      	ldr	r1, [r7, #0]
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f000 fa10 	bl	801210a <USBD_CtlError>
        err++;
 8011cea:	7afb      	ldrb	r3, [r7, #11]
 8011cec:	3301      	adds	r3, #1
 8011cee:	72fb      	strb	r3, [r7, #11]
      break;
 8011cf0:	e007      	b.n	8011d02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011cf2:	6839      	ldr	r1, [r7, #0]
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f000 fa08 	bl	801210a <USBD_CtlError>
      err++;
 8011cfa:	7afb      	ldrb	r3, [r7, #11]
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	72fb      	strb	r3, [r7, #11]
      break;
 8011d00:	bf00      	nop
  }

  if (err != 0U)
 8011d02:	7afb      	ldrb	r3, [r7, #11]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d11e      	bne.n	8011d46 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	88db      	ldrh	r3, [r3, #6]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d016      	beq.n	8011d3e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8011d10:	893b      	ldrh	r3, [r7, #8]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d00e      	beq.n	8011d34 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	88da      	ldrh	r2, [r3, #6]
 8011d1a:	893b      	ldrh	r3, [r7, #8]
 8011d1c:	4293      	cmp	r3, r2
 8011d1e:	bf28      	it	cs
 8011d20:	4613      	movcs	r3, r2
 8011d22:	b29b      	uxth	r3, r3
 8011d24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011d26:	893b      	ldrh	r3, [r7, #8]
 8011d28:	461a      	mov	r2, r3
 8011d2a:	68f9      	ldr	r1, [r7, #12]
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	f000 fb6a 	bl	8012406 <USBD_CtlSendData>
 8011d32:	e009      	b.n	8011d48 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011d34:	6839      	ldr	r1, [r7, #0]
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f000 f9e7 	bl	801210a <USBD_CtlError>
 8011d3c:	e004      	b.n	8011d48 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f000 fbbb 	bl	80124ba <USBD_CtlSendStatus>
 8011d44:	e000      	b.n	8011d48 <USBD_GetDescriptor+0x2cc>
    return;
 8011d46:	bf00      	nop
  }
}
 8011d48:	3710      	adds	r7, #16
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
 8011d4e:	bf00      	nop

08011d50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b084      	sub	sp, #16
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
 8011d58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	889b      	ldrh	r3, [r3, #4]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d131      	bne.n	8011dc6 <USBD_SetAddress+0x76>
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	88db      	ldrh	r3, [r3, #6]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d12d      	bne.n	8011dc6 <USBD_SetAddress+0x76>
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	885b      	ldrh	r3, [r3, #2]
 8011d6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8011d70:	d829      	bhi.n	8011dc6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	885b      	ldrh	r3, [r3, #2]
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011d7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d84:	b2db      	uxtb	r3, r3
 8011d86:	2b03      	cmp	r3, #3
 8011d88:	d104      	bne.n	8011d94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011d8a:	6839      	ldr	r1, [r7, #0]
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	f000 f9bc 	bl	801210a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d92:	e01d      	b.n	8011dd0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	7bfa      	ldrb	r2, [r7, #15]
 8011d98:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011d9c:	7bfb      	ldrb	r3, [r7, #15]
 8011d9e:	4619      	mov	r1, r3
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f7fe ffcd 	bl	8010d40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f000 fb87 	bl	80124ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011dac:	7bfb      	ldrb	r3, [r7, #15]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d004      	beq.n	8011dbc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2202      	movs	r2, #2
 8011db6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dba:	e009      	b.n	8011dd0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dc4:	e004      	b.n	8011dd0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011dc6:	6839      	ldr	r1, [r7, #0]
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f000 f99e 	bl	801210a <USBD_CtlError>
  }
}
 8011dce:	bf00      	nop
 8011dd0:	bf00      	nop
 8011dd2:	3710      	adds	r7, #16
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}

08011dd8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b084      	sub	sp, #16
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011de2:	2300      	movs	r3, #0
 8011de4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	885b      	ldrh	r3, [r3, #2]
 8011dea:	b2da      	uxtb	r2, r3
 8011dec:	4b4e      	ldr	r3, [pc, #312]	@ (8011f28 <USBD_SetConfig+0x150>)
 8011dee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011df0:	4b4d      	ldr	r3, [pc, #308]	@ (8011f28 <USBD_SetConfig+0x150>)
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	2b01      	cmp	r3, #1
 8011df6:	d905      	bls.n	8011e04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011df8:	6839      	ldr	r1, [r7, #0]
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f000 f985 	bl	801210a <USBD_CtlError>
    return USBD_FAIL;
 8011e00:	2303      	movs	r3, #3
 8011e02:	e08c      	b.n	8011f1e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011e0a:	b2db      	uxtb	r3, r3
 8011e0c:	2b02      	cmp	r3, #2
 8011e0e:	d002      	beq.n	8011e16 <USBD_SetConfig+0x3e>
 8011e10:	2b03      	cmp	r3, #3
 8011e12:	d029      	beq.n	8011e68 <USBD_SetConfig+0x90>
 8011e14:	e075      	b.n	8011f02 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011e16:	4b44      	ldr	r3, [pc, #272]	@ (8011f28 <USBD_SetConfig+0x150>)
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d020      	beq.n	8011e60 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011e1e:	4b42      	ldr	r3, [pc, #264]	@ (8011f28 <USBD_SetConfig+0x150>)
 8011e20:	781b      	ldrb	r3, [r3, #0]
 8011e22:	461a      	mov	r2, r3
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011e28:	4b3f      	ldr	r3, [pc, #252]	@ (8011f28 <USBD_SetConfig+0x150>)
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	4619      	mov	r1, r3
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f7ff f8a9 	bl	8010f86 <USBD_SetClassConfig>
 8011e34:	4603      	mov	r3, r0
 8011e36:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011e38:	7bfb      	ldrb	r3, [r7, #15]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d008      	beq.n	8011e50 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011e3e:	6839      	ldr	r1, [r7, #0]
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	f000 f962 	bl	801210a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2202      	movs	r2, #2
 8011e4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011e4e:	e065      	b.n	8011f1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f000 fb32 	bl	80124ba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2203      	movs	r2, #3
 8011e5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011e5e:	e05d      	b.n	8011f1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f000 fb2a 	bl	80124ba <USBD_CtlSendStatus>
      break;
 8011e66:	e059      	b.n	8011f1c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011e68:	4b2f      	ldr	r3, [pc, #188]	@ (8011f28 <USBD_SetConfig+0x150>)
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d112      	bne.n	8011e96 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2202      	movs	r2, #2
 8011e74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011e78:	4b2b      	ldr	r3, [pc, #172]	@ (8011f28 <USBD_SetConfig+0x150>)
 8011e7a:	781b      	ldrb	r3, [r3, #0]
 8011e7c:	461a      	mov	r2, r3
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011e82:	4b29      	ldr	r3, [pc, #164]	@ (8011f28 <USBD_SetConfig+0x150>)
 8011e84:	781b      	ldrb	r3, [r3, #0]
 8011e86:	4619      	mov	r1, r3
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f7ff f898 	bl	8010fbe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f000 fb13 	bl	80124ba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011e94:	e042      	b.n	8011f1c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011e96:	4b24      	ldr	r3, [pc, #144]	@ (8011f28 <USBD_SetConfig+0x150>)
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	461a      	mov	r2, r3
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	685b      	ldr	r3, [r3, #4]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d02a      	beq.n	8011efa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	b2db      	uxtb	r3, r3
 8011eaa:	4619      	mov	r1, r3
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f7ff f886 	bl	8010fbe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8011f28 <USBD_SetConfig+0x150>)
 8011eb4:	781b      	ldrb	r3, [r3, #0]
 8011eb6:	461a      	mov	r2, r3
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8011f28 <USBD_SetConfig+0x150>)
 8011ebe:	781b      	ldrb	r3, [r3, #0]
 8011ec0:	4619      	mov	r1, r3
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f7ff f85f 	bl	8010f86 <USBD_SetClassConfig>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011ecc:	7bfb      	ldrb	r3, [r7, #15]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d00f      	beq.n	8011ef2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011ed2:	6839      	ldr	r1, [r7, #0]
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f000 f918 	bl	801210a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	b2db      	uxtb	r3, r3
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f7ff f86b 	bl	8010fbe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2202      	movs	r2, #2
 8011eec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011ef0:	e014      	b.n	8011f1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011ef2:	6878      	ldr	r0, [r7, #4]
 8011ef4:	f000 fae1 	bl	80124ba <USBD_CtlSendStatus>
      break;
 8011ef8:	e010      	b.n	8011f1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f000 fadd 	bl	80124ba <USBD_CtlSendStatus>
      break;
 8011f00:	e00c      	b.n	8011f1c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011f02:	6839      	ldr	r1, [r7, #0]
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f000 f900 	bl	801210a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011f0a:	4b07      	ldr	r3, [pc, #28]	@ (8011f28 <USBD_SetConfig+0x150>)
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	4619      	mov	r1, r3
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f7ff f854 	bl	8010fbe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011f16:	2303      	movs	r3, #3
 8011f18:	73fb      	strb	r3, [r7, #15]
      break;
 8011f1a:	bf00      	nop
  }

  return ret;
 8011f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3710      	adds	r7, #16
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	bf00      	nop
 8011f28:	20011110 	.word	0x20011110

08011f2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b082      	sub	sp, #8
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	88db      	ldrh	r3, [r3, #6]
 8011f3a:	2b01      	cmp	r3, #1
 8011f3c:	d004      	beq.n	8011f48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011f3e:	6839      	ldr	r1, [r7, #0]
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f000 f8e2 	bl	801210a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011f46:	e023      	b.n	8011f90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f4e:	b2db      	uxtb	r3, r3
 8011f50:	2b02      	cmp	r3, #2
 8011f52:	dc02      	bgt.n	8011f5a <USBD_GetConfig+0x2e>
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	dc03      	bgt.n	8011f60 <USBD_GetConfig+0x34>
 8011f58:	e015      	b.n	8011f86 <USBD_GetConfig+0x5a>
 8011f5a:	2b03      	cmp	r3, #3
 8011f5c:	d00b      	beq.n	8011f76 <USBD_GetConfig+0x4a>
 8011f5e:	e012      	b.n	8011f86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2200      	movs	r2, #0
 8011f64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	3308      	adds	r3, #8
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f000 fa49 	bl	8012406 <USBD_CtlSendData>
        break;
 8011f74:	e00c      	b.n	8011f90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	3304      	adds	r3, #4
 8011f7a:	2201      	movs	r2, #1
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f000 fa41 	bl	8012406 <USBD_CtlSendData>
        break;
 8011f84:	e004      	b.n	8011f90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011f86:	6839      	ldr	r1, [r7, #0]
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f000 f8be 	bl	801210a <USBD_CtlError>
        break;
 8011f8e:	bf00      	nop
}
 8011f90:	bf00      	nop
 8011f92:	3708      	adds	r7, #8
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b082      	sub	sp, #8
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011fa8:	b2db      	uxtb	r3, r3
 8011faa:	3b01      	subs	r3, #1
 8011fac:	2b02      	cmp	r3, #2
 8011fae:	d81e      	bhi.n	8011fee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	88db      	ldrh	r3, [r3, #6]
 8011fb4:	2b02      	cmp	r3, #2
 8011fb6:	d004      	beq.n	8011fc2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011fb8:	6839      	ldr	r1, [r7, #0]
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f000 f8a5 	bl	801210a <USBD_CtlError>
        break;
 8011fc0:	e01a      	b.n	8011ff8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2201      	movs	r2, #1
 8011fc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d005      	beq.n	8011fde <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	68db      	ldr	r3, [r3, #12]
 8011fd6:	f043 0202 	orr.w	r2, r3, #2
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	330c      	adds	r3, #12
 8011fe2:	2202      	movs	r2, #2
 8011fe4:	4619      	mov	r1, r3
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f000 fa0d 	bl	8012406 <USBD_CtlSendData>
      break;
 8011fec:	e004      	b.n	8011ff8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011fee:	6839      	ldr	r1, [r7, #0]
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f000 f88a 	bl	801210a <USBD_CtlError>
      break;
 8011ff6:	bf00      	nop
  }
}
 8011ff8:	bf00      	nop
 8011ffa:	3708      	adds	r7, #8
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}

08012000 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b082      	sub	sp, #8
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	885b      	ldrh	r3, [r3, #2]
 801200e:	2b01      	cmp	r3, #1
 8012010:	d107      	bne.n	8012022 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2201      	movs	r2, #1
 8012016:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801201a:	6878      	ldr	r0, [r7, #4]
 801201c:	f000 fa4d 	bl	80124ba <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012020:	e013      	b.n	801204a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	885b      	ldrh	r3, [r3, #2]
 8012026:	2b02      	cmp	r3, #2
 8012028:	d10b      	bne.n	8012042 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	889b      	ldrh	r3, [r3, #4]
 801202e:	0a1b      	lsrs	r3, r3, #8
 8012030:	b29b      	uxth	r3, r3
 8012032:	b2da      	uxtb	r2, r3
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f000 fa3d 	bl	80124ba <USBD_CtlSendStatus>
}
 8012040:	e003      	b.n	801204a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012042:	6839      	ldr	r1, [r7, #0]
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f000 f860 	bl	801210a <USBD_CtlError>
}
 801204a:	bf00      	nop
 801204c:	3708      	adds	r7, #8
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}

08012052 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012052:	b580      	push	{r7, lr}
 8012054:	b082      	sub	sp, #8
 8012056:	af00      	add	r7, sp, #0
 8012058:	6078      	str	r0, [r7, #4]
 801205a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012062:	b2db      	uxtb	r3, r3
 8012064:	3b01      	subs	r3, #1
 8012066:	2b02      	cmp	r3, #2
 8012068:	d80b      	bhi.n	8012082 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	885b      	ldrh	r3, [r3, #2]
 801206e:	2b01      	cmp	r3, #1
 8012070:	d10c      	bne.n	801208c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2200      	movs	r2, #0
 8012076:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f000 fa1d 	bl	80124ba <USBD_CtlSendStatus>
      }
      break;
 8012080:	e004      	b.n	801208c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012082:	6839      	ldr	r1, [r7, #0]
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f000 f840 	bl	801210a <USBD_CtlError>
      break;
 801208a:	e000      	b.n	801208e <USBD_ClrFeature+0x3c>
      break;
 801208c:	bf00      	nop
  }
}
 801208e:	bf00      	nop
 8012090:	3708      	adds	r7, #8
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}

08012096 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012096:	b580      	push	{r7, lr}
 8012098:	b084      	sub	sp, #16
 801209a:	af00      	add	r7, sp, #0
 801209c:	6078      	str	r0, [r7, #4]
 801209e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	781a      	ldrb	r2, [r3, #0]
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	3301      	adds	r3, #1
 80120b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	781a      	ldrb	r2, [r3, #0]
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	3301      	adds	r3, #1
 80120be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80120c0:	68f8      	ldr	r0, [r7, #12]
 80120c2:	f7ff fa40 	bl	8011546 <SWAPBYTE>
 80120c6:	4603      	mov	r3, r0
 80120c8:	461a      	mov	r2, r3
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	3301      	adds	r3, #1
 80120d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	3301      	adds	r3, #1
 80120d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80120da:	68f8      	ldr	r0, [r7, #12]
 80120dc:	f7ff fa33 	bl	8011546 <SWAPBYTE>
 80120e0:	4603      	mov	r3, r0
 80120e2:	461a      	mov	r2, r3
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	3301      	adds	r3, #1
 80120ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	3301      	adds	r3, #1
 80120f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80120f4:	68f8      	ldr	r0, [r7, #12]
 80120f6:	f7ff fa26 	bl	8011546 <SWAPBYTE>
 80120fa:	4603      	mov	r3, r0
 80120fc:	461a      	mov	r2, r3
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	80da      	strh	r2, [r3, #6]
}
 8012102:	bf00      	nop
 8012104:	3710      	adds	r7, #16
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}

0801210a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801210a:	b580      	push	{r7, lr}
 801210c:	b082      	sub	sp, #8
 801210e:	af00      	add	r7, sp, #0
 8012110:	6078      	str	r0, [r7, #4]
 8012112:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012114:	2180      	movs	r1, #128	@ 0x80
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f7fe fdb4 	bl	8010c84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801211c:	2100      	movs	r1, #0
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f7fe fdb0 	bl	8010c84 <USBD_LL_StallEP>
}
 8012124:	bf00      	nop
 8012126:	3708      	adds	r7, #8
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}

0801212c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b086      	sub	sp, #24
 8012130:	af00      	add	r7, sp, #0
 8012132:	60f8      	str	r0, [r7, #12]
 8012134:	60b9      	str	r1, [r7, #8]
 8012136:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012138:	2300      	movs	r3, #0
 801213a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d036      	beq.n	80121b0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012146:	6938      	ldr	r0, [r7, #16]
 8012148:	f000 f836 	bl	80121b8 <USBD_GetLen>
 801214c:	4603      	mov	r3, r0
 801214e:	3301      	adds	r3, #1
 8012150:	b29b      	uxth	r3, r3
 8012152:	005b      	lsls	r3, r3, #1
 8012154:	b29a      	uxth	r2, r3
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801215a:	7dfb      	ldrb	r3, [r7, #23]
 801215c:	68ba      	ldr	r2, [r7, #8]
 801215e:	4413      	add	r3, r2
 8012160:	687a      	ldr	r2, [r7, #4]
 8012162:	7812      	ldrb	r2, [r2, #0]
 8012164:	701a      	strb	r2, [r3, #0]
  idx++;
 8012166:	7dfb      	ldrb	r3, [r7, #23]
 8012168:	3301      	adds	r3, #1
 801216a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801216c:	7dfb      	ldrb	r3, [r7, #23]
 801216e:	68ba      	ldr	r2, [r7, #8]
 8012170:	4413      	add	r3, r2
 8012172:	2203      	movs	r2, #3
 8012174:	701a      	strb	r2, [r3, #0]
  idx++;
 8012176:	7dfb      	ldrb	r3, [r7, #23]
 8012178:	3301      	adds	r3, #1
 801217a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801217c:	e013      	b.n	80121a6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801217e:	7dfb      	ldrb	r3, [r7, #23]
 8012180:	68ba      	ldr	r2, [r7, #8]
 8012182:	4413      	add	r3, r2
 8012184:	693a      	ldr	r2, [r7, #16]
 8012186:	7812      	ldrb	r2, [r2, #0]
 8012188:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801218a:	693b      	ldr	r3, [r7, #16]
 801218c:	3301      	adds	r3, #1
 801218e:	613b      	str	r3, [r7, #16]
    idx++;
 8012190:	7dfb      	ldrb	r3, [r7, #23]
 8012192:	3301      	adds	r3, #1
 8012194:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012196:	7dfb      	ldrb	r3, [r7, #23]
 8012198:	68ba      	ldr	r2, [r7, #8]
 801219a:	4413      	add	r3, r2
 801219c:	2200      	movs	r2, #0
 801219e:	701a      	strb	r2, [r3, #0]
    idx++;
 80121a0:	7dfb      	ldrb	r3, [r7, #23]
 80121a2:	3301      	adds	r3, #1
 80121a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80121a6:	693b      	ldr	r3, [r7, #16]
 80121a8:	781b      	ldrb	r3, [r3, #0]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d1e7      	bne.n	801217e <USBD_GetString+0x52>
 80121ae:	e000      	b.n	80121b2 <USBD_GetString+0x86>
    return;
 80121b0:	bf00      	nop
  }
}
 80121b2:	3718      	adds	r7, #24
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80121b8:	b480      	push	{r7}
 80121ba:	b085      	sub	sp, #20
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80121c0:	2300      	movs	r3, #0
 80121c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80121c8:	e005      	b.n	80121d6 <USBD_GetLen+0x1e>
  {
    len++;
 80121ca:	7bfb      	ldrb	r3, [r7, #15]
 80121cc:	3301      	adds	r3, #1
 80121ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	3301      	adds	r3, #1
 80121d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	781b      	ldrb	r3, [r3, #0]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d1f5      	bne.n	80121ca <USBD_GetLen+0x12>
  }

  return len;
 80121de:	7bfb      	ldrb	r3, [r7, #15]
}
 80121e0:	4618      	mov	r0, r3
 80121e2:	3714      	adds	r7, #20
 80121e4:	46bd      	mov	sp, r7
 80121e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ea:	4770      	bx	lr

080121ec <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80121ec:	b480      	push	{r7}
 80121ee:	b083      	sub	sp, #12
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	4603      	mov	r3, r0
 80121f4:	6039      	str	r1, [r7, #0]
 80121f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 80121f8:	683b      	ldr	r3, [r7, #0]
 80121fa:	2212      	movs	r2, #18
 80121fc:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 80121fe:	4b03      	ldr	r3, [pc, #12]	@ (801220c <USBD_Class_DeviceDescriptor+0x20>)
}
 8012200:	4618      	mov	r0, r3
 8012202:	370c      	adds	r7, #12
 8012204:	46bd      	mov	sp, r7
 8012206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220a:	4770      	bx	lr
 801220c:	200000f0 	.word	0x200000f0

08012210 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012210:	b480      	push	{r7}
 8012212:	b083      	sub	sp, #12
 8012214:	af00      	add	r7, sp, #0
 8012216:	4603      	mov	r3, r0
 8012218:	6039      	str	r1, [r7, #0]
 801221a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	2204      	movs	r2, #4
 8012220:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 8012222:	4b03      	ldr	r3, [pc, #12]	@ (8012230 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 8012224:	4618      	mov	r0, r3
 8012226:	370c      	adds	r7, #12
 8012228:	46bd      	mov	sp, r7
 801222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222e:	4770      	bx	lr
 8012230:	20000104 	.word	0x20000104

08012234 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b082      	sub	sp, #8
 8012238:	af00      	add	r7, sp, #0
 801223a:	4603      	mov	r3, r0
 801223c:	6039      	str	r1, [r7, #0]
 801223e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8012240:	79fb      	ldrb	r3, [r7, #7]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d105      	bne.n	8012252 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8012246:	683a      	ldr	r2, [r7, #0]
 8012248:	4907      	ldr	r1, [pc, #28]	@ (8012268 <USBD_Class_ProductStrDescriptor+0x34>)
 801224a:	4808      	ldr	r0, [pc, #32]	@ (801226c <USBD_Class_ProductStrDescriptor+0x38>)
 801224c:	f7ff ff6e 	bl	801212c <USBD_GetString>
 8012250:	e004      	b.n	801225c <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8012252:	683a      	ldr	r2, [r7, #0]
 8012254:	4904      	ldr	r1, [pc, #16]	@ (8012268 <USBD_Class_ProductStrDescriptor+0x34>)
 8012256:	4805      	ldr	r0, [pc, #20]	@ (801226c <USBD_Class_ProductStrDescriptor+0x38>)
 8012258:	f7ff ff68 	bl	801212c <USBD_GetString>
  }
  return USBD_StrDesc;
 801225c:	4b02      	ldr	r3, [pc, #8]	@ (8012268 <USBD_Class_ProductStrDescriptor+0x34>)
}
 801225e:	4618      	mov	r0, r3
 8012260:	3708      	adds	r7, #8
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	20011114 	.word	0x20011114
 801226c:	080146b4 	.word	0x080146b4

08012270 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b082      	sub	sp, #8
 8012274:	af00      	add	r7, sp, #0
 8012276:	4603      	mov	r3, r0
 8012278:	6039      	str	r1, [r7, #0]
 801227a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801227c:	683a      	ldr	r2, [r7, #0]
 801227e:	4904      	ldr	r1, [pc, #16]	@ (8012290 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 8012280:	4804      	ldr	r0, [pc, #16]	@ (8012294 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 8012282:	f7ff ff53 	bl	801212c <USBD_GetString>
  return USBD_StrDesc;
 8012286:	4b02      	ldr	r3, [pc, #8]	@ (8012290 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 8012288:	4618      	mov	r0, r3
 801228a:	3708      	adds	r7, #8
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}
 8012290:	20011114 	.word	0x20011114
 8012294:	080146cc 	.word	0x080146cc

08012298 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b082      	sub	sp, #8
 801229c:	af00      	add	r7, sp, #0
 801229e:	4603      	mov	r3, r0
 80122a0:	6039      	str	r1, [r7, #0]
 80122a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	221a      	movs	r2, #26
 80122a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 80122aa:	f000 f843 	bl	8012334 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 80122ae:	4b02      	ldr	r3, [pc, #8]	@ (80122b8 <USBD_Class_SerialStrDescriptor+0x20>)
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3708      	adds	r7, #8
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	20000108 	.word	0x20000108

080122bc <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b082      	sub	sp, #8
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	4603      	mov	r3, r0
 80122c4:	6039      	str	r1, [r7, #0]
 80122c6:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80122c8:	79fb      	ldrb	r3, [r7, #7]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d105      	bne.n	80122da <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80122ce:	683a      	ldr	r2, [r7, #0]
 80122d0:	4907      	ldr	r1, [pc, #28]	@ (80122f0 <USBD_Class_ConfigStrDescriptor+0x34>)
 80122d2:	4808      	ldr	r0, [pc, #32]	@ (80122f4 <USBD_Class_ConfigStrDescriptor+0x38>)
 80122d4:	f7ff ff2a 	bl	801212c <USBD_GetString>
 80122d8:	e004      	b.n	80122e4 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 80122da:	683a      	ldr	r2, [r7, #0]
 80122dc:	4904      	ldr	r1, [pc, #16]	@ (80122f0 <USBD_Class_ConfigStrDescriptor+0x34>)
 80122de:	4805      	ldr	r0, [pc, #20]	@ (80122f4 <USBD_Class_ConfigStrDescriptor+0x38>)
 80122e0:	f7ff ff24 	bl	801212c <USBD_GetString>
  }
  return USBD_StrDesc;
 80122e4:	4b02      	ldr	r3, [pc, #8]	@ (80122f0 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3708      	adds	r7, #8
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	bf00      	nop
 80122f0:	20011114 	.word	0x20011114
 80122f4:	080146e0 	.word	0x080146e0

080122f8 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b082      	sub	sp, #8
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	4603      	mov	r3, r0
 8012300:	6039      	str	r1, [r7, #0]
 8012302:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8012304:	79fb      	ldrb	r3, [r7, #7]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d105      	bne.n	8012316 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 801230a:	683a      	ldr	r2, [r7, #0]
 801230c:	4907      	ldr	r1, [pc, #28]	@ (801232c <USBD_Class_InterfaceStrDescriptor+0x34>)
 801230e:	4808      	ldr	r0, [pc, #32]	@ (8012330 <USBD_Class_InterfaceStrDescriptor+0x38>)
 8012310:	f7ff ff0c 	bl	801212c <USBD_GetString>
 8012314:	e004      	b.n	8012320 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8012316:	683a      	ldr	r2, [r7, #0]
 8012318:	4904      	ldr	r1, [pc, #16]	@ (801232c <USBD_Class_InterfaceStrDescriptor+0x34>)
 801231a:	4805      	ldr	r0, [pc, #20]	@ (8012330 <USBD_Class_InterfaceStrDescriptor+0x38>)
 801231c:	f7ff ff06 	bl	801212c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012320:	4b02      	ldr	r3, [pc, #8]	@ (801232c <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 8012322:	4618      	mov	r0, r3
 8012324:	3708      	adds	r7, #8
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	20011114 	.word	0x20011114
 8012330:	080146ec 	.word	0x080146ec

08012334 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 801233a:	4b0f      	ldr	r3, [pc, #60]	@ (8012378 <Get_SerialNum+0x44>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 8012340:	4b0e      	ldr	r3, [pc, #56]	@ (801237c <Get_SerialNum+0x48>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 8012346:	4b0e      	ldr	r3, [pc, #56]	@ (8012380 <Get_SerialNum+0x4c>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801234c:	68fa      	ldr	r2, [r7, #12]
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	4413      	add	r3, r2
 8012352:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d009      	beq.n	801236e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 801235a:	2208      	movs	r2, #8
 801235c:	4909      	ldr	r1, [pc, #36]	@ (8012384 <Get_SerialNum+0x50>)
 801235e:	68f8      	ldr	r0, [r7, #12]
 8012360:	f000 f814 	bl	801238c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 8012364:	2204      	movs	r2, #4
 8012366:	4908      	ldr	r1, [pc, #32]	@ (8012388 <Get_SerialNum+0x54>)
 8012368:	68b8      	ldr	r0, [r7, #8]
 801236a:	f000 f80f 	bl	801238c <IntToUnicode>
  }
}
 801236e:	bf00      	nop
 8012370:	3710      	adds	r7, #16
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}
 8012376:	bf00      	nop
 8012378:	08fff800 	.word	0x08fff800
 801237c:	08fff804 	.word	0x08fff804
 8012380:	08fff808 	.word	0x08fff808
 8012384:	2000010a 	.word	0x2000010a
 8012388:	2000011a 	.word	0x2000011a

0801238c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 801238c:	b480      	push	{r7}
 801238e:	b087      	sub	sp, #28
 8012390:	af00      	add	r7, sp, #0
 8012392:	60f8      	str	r0, [r7, #12]
 8012394:	60b9      	str	r1, [r7, #8]
 8012396:	4613      	mov	r3, r2
 8012398:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 801239a:	2300      	movs	r3, #0
 801239c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 801239e:	2300      	movs	r3, #0
 80123a0:	75fb      	strb	r3, [r7, #23]
 80123a2:	e025      	b.n	80123f0 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	0f1b      	lsrs	r3, r3, #28
 80123a8:	2b09      	cmp	r3, #9
 80123aa:	d80a      	bhi.n	80123c2 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	0f1b      	lsrs	r3, r3, #28
 80123b0:	b2da      	uxtb	r2, r3
 80123b2:	7dfb      	ldrb	r3, [r7, #23]
 80123b4:	005b      	lsls	r3, r3, #1
 80123b6:	68b9      	ldr	r1, [r7, #8]
 80123b8:	440b      	add	r3, r1
 80123ba:	3230      	adds	r2, #48	@ 0x30
 80123bc:	b2d2      	uxtb	r2, r2
 80123be:	701a      	strb	r2, [r3, #0]
 80123c0:	e009      	b.n	80123d6 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	0f1b      	lsrs	r3, r3, #28
 80123c6:	b2da      	uxtb	r2, r3
 80123c8:	7dfb      	ldrb	r3, [r7, #23]
 80123ca:	005b      	lsls	r3, r3, #1
 80123cc:	68b9      	ldr	r1, [r7, #8]
 80123ce:	440b      	add	r3, r1
 80123d0:	3237      	adds	r2, #55	@ 0x37
 80123d2:	b2d2      	uxtb	r2, r2
 80123d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	011b      	lsls	r3, r3, #4
 80123da:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 80123dc:	7dfb      	ldrb	r3, [r7, #23]
 80123de:	005b      	lsls	r3, r3, #1
 80123e0:	3301      	adds	r3, #1
 80123e2:	68ba      	ldr	r2, [r7, #8]
 80123e4:	4413      	add	r3, r2
 80123e6:	2200      	movs	r2, #0
 80123e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 80123ea:	7dfb      	ldrb	r3, [r7, #23]
 80123ec:	3301      	adds	r3, #1
 80123ee:	75fb      	strb	r3, [r7, #23]
 80123f0:	7dfa      	ldrb	r2, [r7, #23]
 80123f2:	79fb      	ldrb	r3, [r7, #7]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d3d5      	bcc.n	80123a4 <IntToUnicode+0x18>
  }
}
 80123f8:	bf00      	nop
 80123fa:	bf00      	nop
 80123fc:	371c      	adds	r7, #28
 80123fe:	46bd      	mov	sp, r7
 8012400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012404:	4770      	bx	lr

08012406 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012406:	b580      	push	{r7, lr}
 8012408:	b084      	sub	sp, #16
 801240a:	af00      	add	r7, sp, #0
 801240c:	60f8      	str	r0, [r7, #12]
 801240e:	60b9      	str	r1, [r7, #8]
 8012410:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	2202      	movs	r2, #2
 8012416:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	687a      	ldr	r2, [r7, #4]
 801241e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	68ba      	ldr	r2, [r7, #8]
 801242a:	2100      	movs	r1, #0
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	f7fe fca0 	bl	8010d72 <USBD_LL_Transmit>

  return USBD_OK;
 8012432:	2300      	movs	r3, #0
}
 8012434:	4618      	mov	r0, r3
 8012436:	3710      	adds	r7, #16
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}

0801243c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b084      	sub	sp, #16
 8012440:	af00      	add	r7, sp, #0
 8012442:	60f8      	str	r0, [r7, #12]
 8012444:	60b9      	str	r1, [r7, #8]
 8012446:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	68ba      	ldr	r2, [r7, #8]
 801244c:	2100      	movs	r1, #0
 801244e:	68f8      	ldr	r0, [r7, #12]
 8012450:	f7fe fc8f 	bl	8010d72 <USBD_LL_Transmit>

  return USBD_OK;
 8012454:	2300      	movs	r3, #0
}
 8012456:	4618      	mov	r0, r3
 8012458:	3710      	adds	r7, #16
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}

0801245e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801245e:	b580      	push	{r7, lr}
 8012460:	b084      	sub	sp, #16
 8012462:	af00      	add	r7, sp, #0
 8012464:	60f8      	str	r0, [r7, #12]
 8012466:	60b9      	str	r1, [r7, #8]
 8012468:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	2203      	movs	r2, #3
 801246e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	687a      	ldr	r2, [r7, #4]
 8012476:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	687a      	ldr	r2, [r7, #4]
 801247e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	68ba      	ldr	r2, [r7, #8]
 8012486:	2100      	movs	r1, #0
 8012488:	68f8      	ldr	r0, [r7, #12]
 801248a:	f7fe fc8d 	bl	8010da8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801248e:	2300      	movs	r3, #0
}
 8012490:	4618      	mov	r0, r3
 8012492:	3710      	adds	r7, #16
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b084      	sub	sp, #16
 801249c:	af00      	add	r7, sp, #0
 801249e:	60f8      	str	r0, [r7, #12]
 80124a0:	60b9      	str	r1, [r7, #8]
 80124a2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	68ba      	ldr	r2, [r7, #8]
 80124a8:	2100      	movs	r1, #0
 80124aa:	68f8      	ldr	r0, [r7, #12]
 80124ac:	f7fe fc7c 	bl	8010da8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80124b0:	2300      	movs	r3, #0
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3710      	adds	r7, #16
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}

080124ba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80124ba:	b580      	push	{r7, lr}
 80124bc:	b082      	sub	sp, #8
 80124be:	af00      	add	r7, sp, #0
 80124c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	2204      	movs	r2, #4
 80124c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80124ca:	2300      	movs	r3, #0
 80124cc:	2200      	movs	r2, #0
 80124ce:	2100      	movs	r1, #0
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f7fe fc4e 	bl	8010d72 <USBD_LL_Transmit>

  return USBD_OK;
 80124d6:	2300      	movs	r3, #0
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}

080124e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b082      	sub	sp, #8
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	2205      	movs	r2, #5
 80124ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80124f0:	2300      	movs	r3, #0
 80124f2:	2200      	movs	r2, #0
 80124f4:	2100      	movs	r1, #0
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f7fe fc56 	bl	8010da8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80124fc:	2300      	movs	r3, #0
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3708      	adds	r7, #8
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}
	...

08012508 <std>:
 8012508:	2300      	movs	r3, #0
 801250a:	b510      	push	{r4, lr}
 801250c:	4604      	mov	r4, r0
 801250e:	6083      	str	r3, [r0, #8]
 8012510:	8181      	strh	r1, [r0, #12]
 8012512:	4619      	mov	r1, r3
 8012514:	6643      	str	r3, [r0, #100]	@ 0x64
 8012516:	81c2      	strh	r2, [r0, #14]
 8012518:	2208      	movs	r2, #8
 801251a:	6183      	str	r3, [r0, #24]
 801251c:	e9c0 3300 	strd	r3, r3, [r0]
 8012520:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012524:	305c      	adds	r0, #92	@ 0x5c
 8012526:	f000 f993 	bl	8012850 <memset>
 801252a:	4b0d      	ldr	r3, [pc, #52]	@ (8012560 <std+0x58>)
 801252c:	6224      	str	r4, [r4, #32]
 801252e:	6263      	str	r3, [r4, #36]	@ 0x24
 8012530:	4b0c      	ldr	r3, [pc, #48]	@ (8012564 <std+0x5c>)
 8012532:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012534:	4b0c      	ldr	r3, [pc, #48]	@ (8012568 <std+0x60>)
 8012536:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012538:	4b0c      	ldr	r3, [pc, #48]	@ (801256c <std+0x64>)
 801253a:	6323      	str	r3, [r4, #48]	@ 0x30
 801253c:	4b0c      	ldr	r3, [pc, #48]	@ (8012570 <std+0x68>)
 801253e:	429c      	cmp	r4, r3
 8012540:	d006      	beq.n	8012550 <std+0x48>
 8012542:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012546:	4294      	cmp	r4, r2
 8012548:	d002      	beq.n	8012550 <std+0x48>
 801254a:	33d0      	adds	r3, #208	@ 0xd0
 801254c:	429c      	cmp	r4, r3
 801254e:	d105      	bne.n	801255c <std+0x54>
 8012550:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012558:	f000 b9f2 	b.w	8012940 <__retarget_lock_init_recursive>
 801255c:	bd10      	pop	{r4, pc}
 801255e:	bf00      	nop
 8012560:	08012759 	.word	0x08012759
 8012564:	0801277b 	.word	0x0801277b
 8012568:	080127b3 	.word	0x080127b3
 801256c:	080127d7 	.word	0x080127d7
 8012570:	20011214 	.word	0x20011214

08012574 <stdio_exit_handler>:
 8012574:	4a02      	ldr	r2, [pc, #8]	@ (8012580 <stdio_exit_handler+0xc>)
 8012576:	4903      	ldr	r1, [pc, #12]	@ (8012584 <stdio_exit_handler+0x10>)
 8012578:	4803      	ldr	r0, [pc, #12]	@ (8012588 <stdio_exit_handler+0x14>)
 801257a:	f000 b869 	b.w	8012650 <_fwalk_sglue>
 801257e:	bf00      	nop
 8012580:	20000124 	.word	0x20000124
 8012584:	080134b1 	.word	0x080134b1
 8012588:	20000134 	.word	0x20000134

0801258c <cleanup_stdio>:
 801258c:	6841      	ldr	r1, [r0, #4]
 801258e:	4b0c      	ldr	r3, [pc, #48]	@ (80125c0 <cleanup_stdio+0x34>)
 8012590:	4299      	cmp	r1, r3
 8012592:	b510      	push	{r4, lr}
 8012594:	4604      	mov	r4, r0
 8012596:	d001      	beq.n	801259c <cleanup_stdio+0x10>
 8012598:	f000 ff8a 	bl	80134b0 <_fflush_r>
 801259c:	68a1      	ldr	r1, [r4, #8]
 801259e:	4b09      	ldr	r3, [pc, #36]	@ (80125c4 <cleanup_stdio+0x38>)
 80125a0:	4299      	cmp	r1, r3
 80125a2:	d002      	beq.n	80125aa <cleanup_stdio+0x1e>
 80125a4:	4620      	mov	r0, r4
 80125a6:	f000 ff83 	bl	80134b0 <_fflush_r>
 80125aa:	68e1      	ldr	r1, [r4, #12]
 80125ac:	4b06      	ldr	r3, [pc, #24]	@ (80125c8 <cleanup_stdio+0x3c>)
 80125ae:	4299      	cmp	r1, r3
 80125b0:	d004      	beq.n	80125bc <cleanup_stdio+0x30>
 80125b2:	4620      	mov	r0, r4
 80125b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125b8:	f000 bf7a 	b.w	80134b0 <_fflush_r>
 80125bc:	bd10      	pop	{r4, pc}
 80125be:	bf00      	nop
 80125c0:	20011214 	.word	0x20011214
 80125c4:	2001127c 	.word	0x2001127c
 80125c8:	200112e4 	.word	0x200112e4

080125cc <global_stdio_init.part.0>:
 80125cc:	b510      	push	{r4, lr}
 80125ce:	4b0b      	ldr	r3, [pc, #44]	@ (80125fc <global_stdio_init.part.0+0x30>)
 80125d0:	2104      	movs	r1, #4
 80125d2:	4c0b      	ldr	r4, [pc, #44]	@ (8012600 <global_stdio_init.part.0+0x34>)
 80125d4:	4a0b      	ldr	r2, [pc, #44]	@ (8012604 <global_stdio_init.part.0+0x38>)
 80125d6:	4620      	mov	r0, r4
 80125d8:	601a      	str	r2, [r3, #0]
 80125da:	2200      	movs	r2, #0
 80125dc:	f7ff ff94 	bl	8012508 <std>
 80125e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80125e4:	2201      	movs	r2, #1
 80125e6:	2109      	movs	r1, #9
 80125e8:	f7ff ff8e 	bl	8012508 <std>
 80125ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80125f0:	2202      	movs	r2, #2
 80125f2:	2112      	movs	r1, #18
 80125f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125f8:	f7ff bf86 	b.w	8012508 <std>
 80125fc:	2001134c 	.word	0x2001134c
 8012600:	20011214 	.word	0x20011214
 8012604:	08012575 	.word	0x08012575

08012608 <__sfp_lock_acquire>:
 8012608:	4801      	ldr	r0, [pc, #4]	@ (8012610 <__sfp_lock_acquire+0x8>)
 801260a:	f000 b99a 	b.w	8012942 <__retarget_lock_acquire_recursive>
 801260e:	bf00      	nop
 8012610:	20011355 	.word	0x20011355

08012614 <__sfp_lock_release>:
 8012614:	4801      	ldr	r0, [pc, #4]	@ (801261c <__sfp_lock_release+0x8>)
 8012616:	f000 b995 	b.w	8012944 <__retarget_lock_release_recursive>
 801261a:	bf00      	nop
 801261c:	20011355 	.word	0x20011355

08012620 <__sinit>:
 8012620:	b510      	push	{r4, lr}
 8012622:	4604      	mov	r4, r0
 8012624:	f7ff fff0 	bl	8012608 <__sfp_lock_acquire>
 8012628:	6a23      	ldr	r3, [r4, #32]
 801262a:	b11b      	cbz	r3, 8012634 <__sinit+0x14>
 801262c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012630:	f7ff bff0 	b.w	8012614 <__sfp_lock_release>
 8012634:	4b04      	ldr	r3, [pc, #16]	@ (8012648 <__sinit+0x28>)
 8012636:	6223      	str	r3, [r4, #32]
 8012638:	4b04      	ldr	r3, [pc, #16]	@ (801264c <__sinit+0x2c>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d1f5      	bne.n	801262c <__sinit+0xc>
 8012640:	f7ff ffc4 	bl	80125cc <global_stdio_init.part.0>
 8012644:	e7f2      	b.n	801262c <__sinit+0xc>
 8012646:	bf00      	nop
 8012648:	0801258d 	.word	0x0801258d
 801264c:	2001134c 	.word	0x2001134c

08012650 <_fwalk_sglue>:
 8012650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012654:	4607      	mov	r7, r0
 8012656:	4688      	mov	r8, r1
 8012658:	4614      	mov	r4, r2
 801265a:	2600      	movs	r6, #0
 801265c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012660:	f1b9 0901 	subs.w	r9, r9, #1
 8012664:	d505      	bpl.n	8012672 <_fwalk_sglue+0x22>
 8012666:	6824      	ldr	r4, [r4, #0]
 8012668:	2c00      	cmp	r4, #0
 801266a:	d1f7      	bne.n	801265c <_fwalk_sglue+0xc>
 801266c:	4630      	mov	r0, r6
 801266e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012672:	89ab      	ldrh	r3, [r5, #12]
 8012674:	2b01      	cmp	r3, #1
 8012676:	d907      	bls.n	8012688 <_fwalk_sglue+0x38>
 8012678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801267c:	3301      	adds	r3, #1
 801267e:	d003      	beq.n	8012688 <_fwalk_sglue+0x38>
 8012680:	4629      	mov	r1, r5
 8012682:	4638      	mov	r0, r7
 8012684:	47c0      	blx	r8
 8012686:	4306      	orrs	r6, r0
 8012688:	3568      	adds	r5, #104	@ 0x68
 801268a:	e7e9      	b.n	8012660 <_fwalk_sglue+0x10>

0801268c <iprintf>:
 801268c:	b40f      	push	{r0, r1, r2, r3}
 801268e:	b507      	push	{r0, r1, r2, lr}
 8012690:	4906      	ldr	r1, [pc, #24]	@ (80126ac <iprintf+0x20>)
 8012692:	ab04      	add	r3, sp, #16
 8012694:	6808      	ldr	r0, [r1, #0]
 8012696:	f853 2b04 	ldr.w	r2, [r3], #4
 801269a:	6881      	ldr	r1, [r0, #8]
 801269c:	9301      	str	r3, [sp, #4]
 801269e:	f000 fbd9 	bl	8012e54 <_vfiprintf_r>
 80126a2:	b003      	add	sp, #12
 80126a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80126a8:	b004      	add	sp, #16
 80126aa:	4770      	bx	lr
 80126ac:	20000130 	.word	0x20000130

080126b0 <sniprintf>:
 80126b0:	b40c      	push	{r2, r3}
 80126b2:	4b18      	ldr	r3, [pc, #96]	@ (8012714 <sniprintf+0x64>)
 80126b4:	b530      	push	{r4, r5, lr}
 80126b6:	1e0c      	subs	r4, r1, #0
 80126b8:	b09d      	sub	sp, #116	@ 0x74
 80126ba:	681d      	ldr	r5, [r3, #0]
 80126bc:	da08      	bge.n	80126d0 <sniprintf+0x20>
 80126be:	238b      	movs	r3, #139	@ 0x8b
 80126c0:	f04f 30ff 	mov.w	r0, #4294967295
 80126c4:	602b      	str	r3, [r5, #0]
 80126c6:	b01d      	add	sp, #116	@ 0x74
 80126c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126cc:	b002      	add	sp, #8
 80126ce:	4770      	bx	lr
 80126d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80126d4:	9002      	str	r0, [sp, #8]
 80126d6:	9006      	str	r0, [sp, #24]
 80126d8:	a902      	add	r1, sp, #8
 80126da:	f8ad 3014 	strh.w	r3, [sp, #20]
 80126de:	bf14      	ite	ne
 80126e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80126e4:	4623      	moveq	r3, r4
 80126e6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80126e8:	4628      	mov	r0, r5
 80126ea:	9304      	str	r3, [sp, #16]
 80126ec:	9307      	str	r3, [sp, #28]
 80126ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80126f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80126f6:	ab21      	add	r3, sp, #132	@ 0x84
 80126f8:	9301      	str	r3, [sp, #4]
 80126fa:	f000 fa85 	bl	8012c08 <_svfiprintf_r>
 80126fe:	1c43      	adds	r3, r0, #1
 8012700:	bfbc      	itt	lt
 8012702:	238b      	movlt	r3, #139	@ 0x8b
 8012704:	602b      	strlt	r3, [r5, #0]
 8012706:	2c00      	cmp	r4, #0
 8012708:	d0dd      	beq.n	80126c6 <sniprintf+0x16>
 801270a:	9b02      	ldr	r3, [sp, #8]
 801270c:	2200      	movs	r2, #0
 801270e:	701a      	strb	r2, [r3, #0]
 8012710:	e7d9      	b.n	80126c6 <sniprintf+0x16>
 8012712:	bf00      	nop
 8012714:	20000130 	.word	0x20000130

08012718 <siprintf>:
 8012718:	b40e      	push	{r1, r2, r3}
 801271a:	b500      	push	{lr}
 801271c:	b09c      	sub	sp, #112	@ 0x70
 801271e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012722:	ab1d      	add	r3, sp, #116	@ 0x74
 8012724:	9002      	str	r0, [sp, #8]
 8012726:	9006      	str	r0, [sp, #24]
 8012728:	9107      	str	r1, [sp, #28]
 801272a:	9104      	str	r1, [sp, #16]
 801272c:	4808      	ldr	r0, [pc, #32]	@ (8012750 <siprintf+0x38>)
 801272e:	4909      	ldr	r1, [pc, #36]	@ (8012754 <siprintf+0x3c>)
 8012730:	f853 2b04 	ldr.w	r2, [r3], #4
 8012734:	9105      	str	r1, [sp, #20]
 8012736:	a902      	add	r1, sp, #8
 8012738:	6800      	ldr	r0, [r0, #0]
 801273a:	9301      	str	r3, [sp, #4]
 801273c:	f000 fa64 	bl	8012c08 <_svfiprintf_r>
 8012740:	9b02      	ldr	r3, [sp, #8]
 8012742:	2200      	movs	r2, #0
 8012744:	701a      	strb	r2, [r3, #0]
 8012746:	b01c      	add	sp, #112	@ 0x70
 8012748:	f85d eb04 	ldr.w	lr, [sp], #4
 801274c:	b003      	add	sp, #12
 801274e:	4770      	bx	lr
 8012750:	20000130 	.word	0x20000130
 8012754:	ffff0208 	.word	0xffff0208

08012758 <__sread>:
 8012758:	b510      	push	{r4, lr}
 801275a:	460c      	mov	r4, r1
 801275c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012760:	f000 f8a0 	bl	80128a4 <_read_r>
 8012764:	2800      	cmp	r0, #0
 8012766:	bfab      	itete	ge
 8012768:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801276a:	89a3      	ldrhlt	r3, [r4, #12]
 801276c:	181b      	addge	r3, r3, r0
 801276e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012772:	bfac      	ite	ge
 8012774:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012776:	81a3      	strhlt	r3, [r4, #12]
 8012778:	bd10      	pop	{r4, pc}

0801277a <__swrite>:
 801277a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801277e:	461f      	mov	r7, r3
 8012780:	898b      	ldrh	r3, [r1, #12]
 8012782:	4605      	mov	r5, r0
 8012784:	460c      	mov	r4, r1
 8012786:	05db      	lsls	r3, r3, #23
 8012788:	4616      	mov	r6, r2
 801278a:	d505      	bpl.n	8012798 <__swrite+0x1e>
 801278c:	2302      	movs	r3, #2
 801278e:	2200      	movs	r2, #0
 8012790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012794:	f000 f874 	bl	8012880 <_lseek_r>
 8012798:	89a3      	ldrh	r3, [r4, #12]
 801279a:	4632      	mov	r2, r6
 801279c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127a0:	4628      	mov	r0, r5
 80127a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80127a6:	81a3      	strh	r3, [r4, #12]
 80127a8:	463b      	mov	r3, r7
 80127aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127ae:	f000 b88b 	b.w	80128c8 <_write_r>

080127b2 <__sseek>:
 80127b2:	b510      	push	{r4, lr}
 80127b4:	460c      	mov	r4, r1
 80127b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127ba:	f000 f861 	bl	8012880 <_lseek_r>
 80127be:	1c43      	adds	r3, r0, #1
 80127c0:	89a3      	ldrh	r3, [r4, #12]
 80127c2:	bf15      	itete	ne
 80127c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80127c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80127ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80127ce:	81a3      	strheq	r3, [r4, #12]
 80127d0:	bf18      	it	ne
 80127d2:	81a3      	strhne	r3, [r4, #12]
 80127d4:	bd10      	pop	{r4, pc}

080127d6 <__sclose>:
 80127d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127da:	f000 b841 	b.w	8012860 <_close_r>

080127de <_vsniprintf_r>:
 80127de:	b530      	push	{r4, r5, lr}
 80127e0:	4614      	mov	r4, r2
 80127e2:	b09b      	sub	sp, #108	@ 0x6c
 80127e4:	4605      	mov	r5, r0
 80127e6:	461a      	mov	r2, r3
 80127e8:	2c00      	cmp	r4, #0
 80127ea:	da05      	bge.n	80127f8 <_vsniprintf_r+0x1a>
 80127ec:	238b      	movs	r3, #139	@ 0x8b
 80127ee:	6003      	str	r3, [r0, #0]
 80127f0:	f04f 30ff 	mov.w	r0, #4294967295
 80127f4:	b01b      	add	sp, #108	@ 0x6c
 80127f6:	bd30      	pop	{r4, r5, pc}
 80127f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80127fc:	9100      	str	r1, [sp, #0]
 80127fe:	9104      	str	r1, [sp, #16]
 8012800:	4669      	mov	r1, sp
 8012802:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012806:	bf14      	ite	ne
 8012808:	f104 33ff 	addne.w	r3, r4, #4294967295
 801280c:	4623      	moveq	r3, r4
 801280e:	9302      	str	r3, [sp, #8]
 8012810:	9305      	str	r3, [sp, #20]
 8012812:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012816:	f8ad 300e 	strh.w	r3, [sp, #14]
 801281a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801281c:	f000 f9f4 	bl	8012c08 <_svfiprintf_r>
 8012820:	1c43      	adds	r3, r0, #1
 8012822:	bfbc      	itt	lt
 8012824:	238b      	movlt	r3, #139	@ 0x8b
 8012826:	602b      	strlt	r3, [r5, #0]
 8012828:	2c00      	cmp	r4, #0
 801282a:	d0e3      	beq.n	80127f4 <_vsniprintf_r+0x16>
 801282c:	9b00      	ldr	r3, [sp, #0]
 801282e:	2200      	movs	r2, #0
 8012830:	701a      	strb	r2, [r3, #0]
 8012832:	e7df      	b.n	80127f4 <_vsniprintf_r+0x16>

08012834 <vsniprintf>:
 8012834:	b507      	push	{r0, r1, r2, lr}
 8012836:	9300      	str	r3, [sp, #0]
 8012838:	4613      	mov	r3, r2
 801283a:	460a      	mov	r2, r1
 801283c:	4601      	mov	r1, r0
 801283e:	4803      	ldr	r0, [pc, #12]	@ (801284c <vsniprintf+0x18>)
 8012840:	6800      	ldr	r0, [r0, #0]
 8012842:	f7ff ffcc 	bl	80127de <_vsniprintf_r>
 8012846:	b003      	add	sp, #12
 8012848:	f85d fb04 	ldr.w	pc, [sp], #4
 801284c:	20000130 	.word	0x20000130

08012850 <memset>:
 8012850:	4402      	add	r2, r0
 8012852:	4603      	mov	r3, r0
 8012854:	4293      	cmp	r3, r2
 8012856:	d100      	bne.n	801285a <memset+0xa>
 8012858:	4770      	bx	lr
 801285a:	f803 1b01 	strb.w	r1, [r3], #1
 801285e:	e7f9      	b.n	8012854 <memset+0x4>

08012860 <_close_r>:
 8012860:	b538      	push	{r3, r4, r5, lr}
 8012862:	2300      	movs	r3, #0
 8012864:	4d05      	ldr	r5, [pc, #20]	@ (801287c <_close_r+0x1c>)
 8012866:	4604      	mov	r4, r0
 8012868:	4608      	mov	r0, r1
 801286a:	602b      	str	r3, [r5, #0]
 801286c:	f7f0 f8b5 	bl	80029da <_close>
 8012870:	1c43      	adds	r3, r0, #1
 8012872:	d102      	bne.n	801287a <_close_r+0x1a>
 8012874:	682b      	ldr	r3, [r5, #0]
 8012876:	b103      	cbz	r3, 801287a <_close_r+0x1a>
 8012878:	6023      	str	r3, [r4, #0]
 801287a:	bd38      	pop	{r3, r4, r5, pc}
 801287c:	20011350 	.word	0x20011350

08012880 <_lseek_r>:
 8012880:	b538      	push	{r3, r4, r5, lr}
 8012882:	4604      	mov	r4, r0
 8012884:	4d06      	ldr	r5, [pc, #24]	@ (80128a0 <_lseek_r+0x20>)
 8012886:	4608      	mov	r0, r1
 8012888:	4611      	mov	r1, r2
 801288a:	2200      	movs	r2, #0
 801288c:	602a      	str	r2, [r5, #0]
 801288e:	461a      	mov	r2, r3
 8012890:	f7f0 f8ca 	bl	8002a28 <_lseek>
 8012894:	1c43      	adds	r3, r0, #1
 8012896:	d102      	bne.n	801289e <_lseek_r+0x1e>
 8012898:	682b      	ldr	r3, [r5, #0]
 801289a:	b103      	cbz	r3, 801289e <_lseek_r+0x1e>
 801289c:	6023      	str	r3, [r4, #0]
 801289e:	bd38      	pop	{r3, r4, r5, pc}
 80128a0:	20011350 	.word	0x20011350

080128a4 <_read_r>:
 80128a4:	b538      	push	{r3, r4, r5, lr}
 80128a6:	4604      	mov	r4, r0
 80128a8:	4d06      	ldr	r5, [pc, #24]	@ (80128c4 <_read_r+0x20>)
 80128aa:	4608      	mov	r0, r1
 80128ac:	4611      	mov	r1, r2
 80128ae:	2200      	movs	r2, #0
 80128b0:	602a      	str	r2, [r5, #0]
 80128b2:	461a      	mov	r2, r3
 80128b4:	f7f0 f858 	bl	8002968 <_read>
 80128b8:	1c43      	adds	r3, r0, #1
 80128ba:	d102      	bne.n	80128c2 <_read_r+0x1e>
 80128bc:	682b      	ldr	r3, [r5, #0]
 80128be:	b103      	cbz	r3, 80128c2 <_read_r+0x1e>
 80128c0:	6023      	str	r3, [r4, #0]
 80128c2:	bd38      	pop	{r3, r4, r5, pc}
 80128c4:	20011350 	.word	0x20011350

080128c8 <_write_r>:
 80128c8:	b538      	push	{r3, r4, r5, lr}
 80128ca:	4604      	mov	r4, r0
 80128cc:	4d06      	ldr	r5, [pc, #24]	@ (80128e8 <_write_r+0x20>)
 80128ce:	4608      	mov	r0, r1
 80128d0:	4611      	mov	r1, r2
 80128d2:	2200      	movs	r2, #0
 80128d4:	602a      	str	r2, [r5, #0]
 80128d6:	461a      	mov	r2, r3
 80128d8:	f7f0 f863 	bl	80029a2 <_write>
 80128dc:	1c43      	adds	r3, r0, #1
 80128de:	d102      	bne.n	80128e6 <_write_r+0x1e>
 80128e0:	682b      	ldr	r3, [r5, #0]
 80128e2:	b103      	cbz	r3, 80128e6 <_write_r+0x1e>
 80128e4:	6023      	str	r3, [r4, #0]
 80128e6:	bd38      	pop	{r3, r4, r5, pc}
 80128e8:	20011350 	.word	0x20011350

080128ec <__errno>:
 80128ec:	4b01      	ldr	r3, [pc, #4]	@ (80128f4 <__errno+0x8>)
 80128ee:	6818      	ldr	r0, [r3, #0]
 80128f0:	4770      	bx	lr
 80128f2:	bf00      	nop
 80128f4:	20000130 	.word	0x20000130

080128f8 <__libc_init_array>:
 80128f8:	b570      	push	{r4, r5, r6, lr}
 80128fa:	4d0d      	ldr	r5, [pc, #52]	@ (8012930 <__libc_init_array+0x38>)
 80128fc:	2600      	movs	r6, #0
 80128fe:	4c0d      	ldr	r4, [pc, #52]	@ (8012934 <__libc_init_array+0x3c>)
 8012900:	1b64      	subs	r4, r4, r5
 8012902:	10a4      	asrs	r4, r4, #2
 8012904:	42a6      	cmp	r6, r4
 8012906:	d109      	bne.n	801291c <__libc_init_array+0x24>
 8012908:	4d0b      	ldr	r5, [pc, #44]	@ (8012938 <__libc_init_array+0x40>)
 801290a:	2600      	movs	r6, #0
 801290c:	4c0b      	ldr	r4, [pc, #44]	@ (801293c <__libc_init_array+0x44>)
 801290e:	f000 ff7d 	bl	801380c <_init>
 8012912:	1b64      	subs	r4, r4, r5
 8012914:	10a4      	asrs	r4, r4, #2
 8012916:	42a6      	cmp	r6, r4
 8012918:	d105      	bne.n	8012926 <__libc_init_array+0x2e>
 801291a:	bd70      	pop	{r4, r5, r6, pc}
 801291c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012920:	3601      	adds	r6, #1
 8012922:	4798      	blx	r3
 8012924:	e7ee      	b.n	8012904 <__libc_init_array+0xc>
 8012926:	f855 3b04 	ldr.w	r3, [r5], #4
 801292a:	3601      	adds	r6, #1
 801292c:	4798      	blx	r3
 801292e:	e7f2      	b.n	8012916 <__libc_init_array+0x1e>
 8012930:	08014784 	.word	0x08014784
 8012934:	08014784 	.word	0x08014784
 8012938:	08014784 	.word	0x08014784
 801293c:	08014788 	.word	0x08014788

08012940 <__retarget_lock_init_recursive>:
 8012940:	4770      	bx	lr

08012942 <__retarget_lock_acquire_recursive>:
 8012942:	4770      	bx	lr

08012944 <__retarget_lock_release_recursive>:
 8012944:	4770      	bx	lr

08012946 <memcpy>:
 8012946:	440a      	add	r2, r1
 8012948:	1e43      	subs	r3, r0, #1
 801294a:	4291      	cmp	r1, r2
 801294c:	d100      	bne.n	8012950 <memcpy+0xa>
 801294e:	4770      	bx	lr
 8012950:	b510      	push	{r4, lr}
 8012952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012956:	4291      	cmp	r1, r2
 8012958:	f803 4f01 	strb.w	r4, [r3, #1]!
 801295c:	d1f9      	bne.n	8012952 <memcpy+0xc>
 801295e:	bd10      	pop	{r4, pc}

08012960 <_free_r>:
 8012960:	b538      	push	{r3, r4, r5, lr}
 8012962:	4605      	mov	r5, r0
 8012964:	2900      	cmp	r1, #0
 8012966:	d041      	beq.n	80129ec <_free_r+0x8c>
 8012968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801296c:	1f0c      	subs	r4, r1, #4
 801296e:	2b00      	cmp	r3, #0
 8012970:	bfb8      	it	lt
 8012972:	18e4      	addlt	r4, r4, r3
 8012974:	f000 f8e0 	bl	8012b38 <__malloc_lock>
 8012978:	4a1d      	ldr	r2, [pc, #116]	@ (80129f0 <_free_r+0x90>)
 801297a:	6813      	ldr	r3, [r2, #0]
 801297c:	b933      	cbnz	r3, 801298c <_free_r+0x2c>
 801297e:	6063      	str	r3, [r4, #4]
 8012980:	6014      	str	r4, [r2, #0]
 8012982:	4628      	mov	r0, r5
 8012984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012988:	f000 b8dc 	b.w	8012b44 <__malloc_unlock>
 801298c:	42a3      	cmp	r3, r4
 801298e:	d908      	bls.n	80129a2 <_free_r+0x42>
 8012990:	6820      	ldr	r0, [r4, #0]
 8012992:	1821      	adds	r1, r4, r0
 8012994:	428b      	cmp	r3, r1
 8012996:	bf01      	itttt	eq
 8012998:	6819      	ldreq	r1, [r3, #0]
 801299a:	685b      	ldreq	r3, [r3, #4]
 801299c:	1809      	addeq	r1, r1, r0
 801299e:	6021      	streq	r1, [r4, #0]
 80129a0:	e7ed      	b.n	801297e <_free_r+0x1e>
 80129a2:	461a      	mov	r2, r3
 80129a4:	685b      	ldr	r3, [r3, #4]
 80129a6:	b10b      	cbz	r3, 80129ac <_free_r+0x4c>
 80129a8:	42a3      	cmp	r3, r4
 80129aa:	d9fa      	bls.n	80129a2 <_free_r+0x42>
 80129ac:	6811      	ldr	r1, [r2, #0]
 80129ae:	1850      	adds	r0, r2, r1
 80129b0:	42a0      	cmp	r0, r4
 80129b2:	d10b      	bne.n	80129cc <_free_r+0x6c>
 80129b4:	6820      	ldr	r0, [r4, #0]
 80129b6:	4401      	add	r1, r0
 80129b8:	1850      	adds	r0, r2, r1
 80129ba:	6011      	str	r1, [r2, #0]
 80129bc:	4283      	cmp	r3, r0
 80129be:	d1e0      	bne.n	8012982 <_free_r+0x22>
 80129c0:	6818      	ldr	r0, [r3, #0]
 80129c2:	685b      	ldr	r3, [r3, #4]
 80129c4:	4408      	add	r0, r1
 80129c6:	6053      	str	r3, [r2, #4]
 80129c8:	6010      	str	r0, [r2, #0]
 80129ca:	e7da      	b.n	8012982 <_free_r+0x22>
 80129cc:	d902      	bls.n	80129d4 <_free_r+0x74>
 80129ce:	230c      	movs	r3, #12
 80129d0:	602b      	str	r3, [r5, #0]
 80129d2:	e7d6      	b.n	8012982 <_free_r+0x22>
 80129d4:	6820      	ldr	r0, [r4, #0]
 80129d6:	1821      	adds	r1, r4, r0
 80129d8:	428b      	cmp	r3, r1
 80129da:	bf02      	ittt	eq
 80129dc:	6819      	ldreq	r1, [r3, #0]
 80129de:	685b      	ldreq	r3, [r3, #4]
 80129e0:	1809      	addeq	r1, r1, r0
 80129e2:	6063      	str	r3, [r4, #4]
 80129e4:	bf08      	it	eq
 80129e6:	6021      	streq	r1, [r4, #0]
 80129e8:	6054      	str	r4, [r2, #4]
 80129ea:	e7ca      	b.n	8012982 <_free_r+0x22>
 80129ec:	bd38      	pop	{r3, r4, r5, pc}
 80129ee:	bf00      	nop
 80129f0:	2001135c 	.word	0x2001135c

080129f4 <sbrk_aligned>:
 80129f4:	b570      	push	{r4, r5, r6, lr}
 80129f6:	4e0f      	ldr	r6, [pc, #60]	@ (8012a34 <sbrk_aligned+0x40>)
 80129f8:	460c      	mov	r4, r1
 80129fa:	4605      	mov	r5, r0
 80129fc:	6831      	ldr	r1, [r6, #0]
 80129fe:	b911      	cbnz	r1, 8012a06 <sbrk_aligned+0x12>
 8012a00:	f000 fe2c 	bl	801365c <_sbrk_r>
 8012a04:	6030      	str	r0, [r6, #0]
 8012a06:	4621      	mov	r1, r4
 8012a08:	4628      	mov	r0, r5
 8012a0a:	f000 fe27 	bl	801365c <_sbrk_r>
 8012a0e:	1c43      	adds	r3, r0, #1
 8012a10:	d103      	bne.n	8012a1a <sbrk_aligned+0x26>
 8012a12:	f04f 34ff 	mov.w	r4, #4294967295
 8012a16:	4620      	mov	r0, r4
 8012a18:	bd70      	pop	{r4, r5, r6, pc}
 8012a1a:	1cc4      	adds	r4, r0, #3
 8012a1c:	f024 0403 	bic.w	r4, r4, #3
 8012a20:	42a0      	cmp	r0, r4
 8012a22:	d0f8      	beq.n	8012a16 <sbrk_aligned+0x22>
 8012a24:	1a21      	subs	r1, r4, r0
 8012a26:	4628      	mov	r0, r5
 8012a28:	f000 fe18 	bl	801365c <_sbrk_r>
 8012a2c:	3001      	adds	r0, #1
 8012a2e:	d1f2      	bne.n	8012a16 <sbrk_aligned+0x22>
 8012a30:	e7ef      	b.n	8012a12 <sbrk_aligned+0x1e>
 8012a32:	bf00      	nop
 8012a34:	20011358 	.word	0x20011358

08012a38 <_malloc_r>:
 8012a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a3c:	1ccd      	adds	r5, r1, #3
 8012a3e:	4606      	mov	r6, r0
 8012a40:	f025 0503 	bic.w	r5, r5, #3
 8012a44:	3508      	adds	r5, #8
 8012a46:	2d0c      	cmp	r5, #12
 8012a48:	bf38      	it	cc
 8012a4a:	250c      	movcc	r5, #12
 8012a4c:	2d00      	cmp	r5, #0
 8012a4e:	db01      	blt.n	8012a54 <_malloc_r+0x1c>
 8012a50:	42a9      	cmp	r1, r5
 8012a52:	d904      	bls.n	8012a5e <_malloc_r+0x26>
 8012a54:	230c      	movs	r3, #12
 8012a56:	6033      	str	r3, [r6, #0]
 8012a58:	2000      	movs	r0, #0
 8012a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012b34 <_malloc_r+0xfc>
 8012a62:	f000 f869 	bl	8012b38 <__malloc_lock>
 8012a66:	f8d8 3000 	ldr.w	r3, [r8]
 8012a6a:	461c      	mov	r4, r3
 8012a6c:	bb44      	cbnz	r4, 8012ac0 <_malloc_r+0x88>
 8012a6e:	4629      	mov	r1, r5
 8012a70:	4630      	mov	r0, r6
 8012a72:	f7ff ffbf 	bl	80129f4 <sbrk_aligned>
 8012a76:	1c43      	adds	r3, r0, #1
 8012a78:	4604      	mov	r4, r0
 8012a7a:	d158      	bne.n	8012b2e <_malloc_r+0xf6>
 8012a7c:	f8d8 4000 	ldr.w	r4, [r8]
 8012a80:	4627      	mov	r7, r4
 8012a82:	2f00      	cmp	r7, #0
 8012a84:	d143      	bne.n	8012b0e <_malloc_r+0xd6>
 8012a86:	2c00      	cmp	r4, #0
 8012a88:	d04b      	beq.n	8012b22 <_malloc_r+0xea>
 8012a8a:	6823      	ldr	r3, [r4, #0]
 8012a8c:	4639      	mov	r1, r7
 8012a8e:	4630      	mov	r0, r6
 8012a90:	eb04 0903 	add.w	r9, r4, r3
 8012a94:	f000 fde2 	bl	801365c <_sbrk_r>
 8012a98:	4581      	cmp	r9, r0
 8012a9a:	d142      	bne.n	8012b22 <_malloc_r+0xea>
 8012a9c:	6821      	ldr	r1, [r4, #0]
 8012a9e:	4630      	mov	r0, r6
 8012aa0:	1a6d      	subs	r5, r5, r1
 8012aa2:	4629      	mov	r1, r5
 8012aa4:	f7ff ffa6 	bl	80129f4 <sbrk_aligned>
 8012aa8:	3001      	adds	r0, #1
 8012aaa:	d03a      	beq.n	8012b22 <_malloc_r+0xea>
 8012aac:	6823      	ldr	r3, [r4, #0]
 8012aae:	442b      	add	r3, r5
 8012ab0:	6023      	str	r3, [r4, #0]
 8012ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8012ab6:	685a      	ldr	r2, [r3, #4]
 8012ab8:	bb62      	cbnz	r2, 8012b14 <_malloc_r+0xdc>
 8012aba:	f8c8 7000 	str.w	r7, [r8]
 8012abe:	e00f      	b.n	8012ae0 <_malloc_r+0xa8>
 8012ac0:	6822      	ldr	r2, [r4, #0]
 8012ac2:	1b52      	subs	r2, r2, r5
 8012ac4:	d420      	bmi.n	8012b08 <_malloc_r+0xd0>
 8012ac6:	2a0b      	cmp	r2, #11
 8012ac8:	d917      	bls.n	8012afa <_malloc_r+0xc2>
 8012aca:	1961      	adds	r1, r4, r5
 8012acc:	42a3      	cmp	r3, r4
 8012ace:	6025      	str	r5, [r4, #0]
 8012ad0:	bf18      	it	ne
 8012ad2:	6059      	strne	r1, [r3, #4]
 8012ad4:	6863      	ldr	r3, [r4, #4]
 8012ad6:	bf08      	it	eq
 8012ad8:	f8c8 1000 	streq.w	r1, [r8]
 8012adc:	5162      	str	r2, [r4, r5]
 8012ade:	604b      	str	r3, [r1, #4]
 8012ae0:	4630      	mov	r0, r6
 8012ae2:	f000 f82f 	bl	8012b44 <__malloc_unlock>
 8012ae6:	f104 000b 	add.w	r0, r4, #11
 8012aea:	1d23      	adds	r3, r4, #4
 8012aec:	f020 0007 	bic.w	r0, r0, #7
 8012af0:	1ac2      	subs	r2, r0, r3
 8012af2:	bf1c      	itt	ne
 8012af4:	1a1b      	subne	r3, r3, r0
 8012af6:	50a3      	strne	r3, [r4, r2]
 8012af8:	e7af      	b.n	8012a5a <_malloc_r+0x22>
 8012afa:	6862      	ldr	r2, [r4, #4]
 8012afc:	42a3      	cmp	r3, r4
 8012afe:	bf0c      	ite	eq
 8012b00:	f8c8 2000 	streq.w	r2, [r8]
 8012b04:	605a      	strne	r2, [r3, #4]
 8012b06:	e7eb      	b.n	8012ae0 <_malloc_r+0xa8>
 8012b08:	4623      	mov	r3, r4
 8012b0a:	6864      	ldr	r4, [r4, #4]
 8012b0c:	e7ae      	b.n	8012a6c <_malloc_r+0x34>
 8012b0e:	463c      	mov	r4, r7
 8012b10:	687f      	ldr	r7, [r7, #4]
 8012b12:	e7b6      	b.n	8012a82 <_malloc_r+0x4a>
 8012b14:	461a      	mov	r2, r3
 8012b16:	685b      	ldr	r3, [r3, #4]
 8012b18:	42a3      	cmp	r3, r4
 8012b1a:	d1fb      	bne.n	8012b14 <_malloc_r+0xdc>
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	6053      	str	r3, [r2, #4]
 8012b20:	e7de      	b.n	8012ae0 <_malloc_r+0xa8>
 8012b22:	230c      	movs	r3, #12
 8012b24:	4630      	mov	r0, r6
 8012b26:	6033      	str	r3, [r6, #0]
 8012b28:	f000 f80c 	bl	8012b44 <__malloc_unlock>
 8012b2c:	e794      	b.n	8012a58 <_malloc_r+0x20>
 8012b2e:	6005      	str	r5, [r0, #0]
 8012b30:	e7d6      	b.n	8012ae0 <_malloc_r+0xa8>
 8012b32:	bf00      	nop
 8012b34:	2001135c 	.word	0x2001135c

08012b38 <__malloc_lock>:
 8012b38:	4801      	ldr	r0, [pc, #4]	@ (8012b40 <__malloc_lock+0x8>)
 8012b3a:	f7ff bf02 	b.w	8012942 <__retarget_lock_acquire_recursive>
 8012b3e:	bf00      	nop
 8012b40:	20011354 	.word	0x20011354

08012b44 <__malloc_unlock>:
 8012b44:	4801      	ldr	r0, [pc, #4]	@ (8012b4c <__malloc_unlock+0x8>)
 8012b46:	f7ff befd 	b.w	8012944 <__retarget_lock_release_recursive>
 8012b4a:	bf00      	nop
 8012b4c:	20011354 	.word	0x20011354

08012b50 <__ssputs_r>:
 8012b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b54:	461f      	mov	r7, r3
 8012b56:	688e      	ldr	r6, [r1, #8]
 8012b58:	4682      	mov	sl, r0
 8012b5a:	460c      	mov	r4, r1
 8012b5c:	42be      	cmp	r6, r7
 8012b5e:	4690      	mov	r8, r2
 8012b60:	680b      	ldr	r3, [r1, #0]
 8012b62:	d82d      	bhi.n	8012bc0 <__ssputs_r+0x70>
 8012b64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012b68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012b6c:	d026      	beq.n	8012bbc <__ssputs_r+0x6c>
 8012b6e:	6965      	ldr	r5, [r4, #20]
 8012b70:	6909      	ldr	r1, [r1, #16]
 8012b72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b76:	eba3 0901 	sub.w	r9, r3, r1
 8012b7a:	1c7b      	adds	r3, r7, #1
 8012b7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012b80:	444b      	add	r3, r9
 8012b82:	106d      	asrs	r5, r5, #1
 8012b84:	429d      	cmp	r5, r3
 8012b86:	bf38      	it	cc
 8012b88:	461d      	movcc	r5, r3
 8012b8a:	0553      	lsls	r3, r2, #21
 8012b8c:	d527      	bpl.n	8012bde <__ssputs_r+0x8e>
 8012b8e:	4629      	mov	r1, r5
 8012b90:	f7ff ff52 	bl	8012a38 <_malloc_r>
 8012b94:	4606      	mov	r6, r0
 8012b96:	b360      	cbz	r0, 8012bf2 <__ssputs_r+0xa2>
 8012b98:	464a      	mov	r2, r9
 8012b9a:	6921      	ldr	r1, [r4, #16]
 8012b9c:	f7ff fed3 	bl	8012946 <memcpy>
 8012ba0:	89a3      	ldrh	r3, [r4, #12]
 8012ba2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012baa:	81a3      	strh	r3, [r4, #12]
 8012bac:	6126      	str	r6, [r4, #16]
 8012bae:	444e      	add	r6, r9
 8012bb0:	6165      	str	r5, [r4, #20]
 8012bb2:	eba5 0509 	sub.w	r5, r5, r9
 8012bb6:	6026      	str	r6, [r4, #0]
 8012bb8:	463e      	mov	r6, r7
 8012bba:	60a5      	str	r5, [r4, #8]
 8012bbc:	42be      	cmp	r6, r7
 8012bbe:	d900      	bls.n	8012bc2 <__ssputs_r+0x72>
 8012bc0:	463e      	mov	r6, r7
 8012bc2:	4632      	mov	r2, r6
 8012bc4:	4641      	mov	r1, r8
 8012bc6:	6820      	ldr	r0, [r4, #0]
 8012bc8:	f000 fd2e 	bl	8013628 <memmove>
 8012bcc:	68a3      	ldr	r3, [r4, #8]
 8012bce:	2000      	movs	r0, #0
 8012bd0:	1b9b      	subs	r3, r3, r6
 8012bd2:	60a3      	str	r3, [r4, #8]
 8012bd4:	6823      	ldr	r3, [r4, #0]
 8012bd6:	4433      	add	r3, r6
 8012bd8:	6023      	str	r3, [r4, #0]
 8012bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bde:	462a      	mov	r2, r5
 8012be0:	f000 fd5a 	bl	8013698 <_realloc_r>
 8012be4:	4606      	mov	r6, r0
 8012be6:	2800      	cmp	r0, #0
 8012be8:	d1e0      	bne.n	8012bac <__ssputs_r+0x5c>
 8012bea:	6921      	ldr	r1, [r4, #16]
 8012bec:	4650      	mov	r0, sl
 8012bee:	f7ff feb7 	bl	8012960 <_free_r>
 8012bf2:	230c      	movs	r3, #12
 8012bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8012bf8:	f8ca 3000 	str.w	r3, [sl]
 8012bfc:	89a3      	ldrh	r3, [r4, #12]
 8012bfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c02:	81a3      	strh	r3, [r4, #12]
 8012c04:	e7e9      	b.n	8012bda <__ssputs_r+0x8a>
	...

08012c08 <_svfiprintf_r>:
 8012c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c0c:	4698      	mov	r8, r3
 8012c0e:	898b      	ldrh	r3, [r1, #12]
 8012c10:	b09d      	sub	sp, #116	@ 0x74
 8012c12:	4607      	mov	r7, r0
 8012c14:	061b      	lsls	r3, r3, #24
 8012c16:	460d      	mov	r5, r1
 8012c18:	4614      	mov	r4, r2
 8012c1a:	d510      	bpl.n	8012c3e <_svfiprintf_r+0x36>
 8012c1c:	690b      	ldr	r3, [r1, #16]
 8012c1e:	b973      	cbnz	r3, 8012c3e <_svfiprintf_r+0x36>
 8012c20:	2140      	movs	r1, #64	@ 0x40
 8012c22:	f7ff ff09 	bl	8012a38 <_malloc_r>
 8012c26:	6028      	str	r0, [r5, #0]
 8012c28:	6128      	str	r0, [r5, #16]
 8012c2a:	b930      	cbnz	r0, 8012c3a <_svfiprintf_r+0x32>
 8012c2c:	230c      	movs	r3, #12
 8012c2e:	603b      	str	r3, [r7, #0]
 8012c30:	f04f 30ff 	mov.w	r0, #4294967295
 8012c34:	b01d      	add	sp, #116	@ 0x74
 8012c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c3a:	2340      	movs	r3, #64	@ 0x40
 8012c3c:	616b      	str	r3, [r5, #20]
 8012c3e:	2300      	movs	r3, #0
 8012c40:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c44:	f04f 0901 	mov.w	r9, #1
 8012c48:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8012dec <_svfiprintf_r+0x1e4>
 8012c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c4e:	2320      	movs	r3, #32
 8012c50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012c54:	2330      	movs	r3, #48	@ 0x30
 8012c56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c5a:	4623      	mov	r3, r4
 8012c5c:	469a      	mov	sl, r3
 8012c5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c62:	b10a      	cbz	r2, 8012c68 <_svfiprintf_r+0x60>
 8012c64:	2a25      	cmp	r2, #37	@ 0x25
 8012c66:	d1f9      	bne.n	8012c5c <_svfiprintf_r+0x54>
 8012c68:	ebba 0b04 	subs.w	fp, sl, r4
 8012c6c:	d00b      	beq.n	8012c86 <_svfiprintf_r+0x7e>
 8012c6e:	465b      	mov	r3, fp
 8012c70:	4622      	mov	r2, r4
 8012c72:	4629      	mov	r1, r5
 8012c74:	4638      	mov	r0, r7
 8012c76:	f7ff ff6b 	bl	8012b50 <__ssputs_r>
 8012c7a:	3001      	adds	r0, #1
 8012c7c:	f000 80a7 	beq.w	8012dce <_svfiprintf_r+0x1c6>
 8012c80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c82:	445a      	add	r2, fp
 8012c84:	9209      	str	r2, [sp, #36]	@ 0x24
 8012c86:	f89a 3000 	ldrb.w	r3, [sl]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	f000 809f 	beq.w	8012dce <_svfiprintf_r+0x1c6>
 8012c90:	2300      	movs	r3, #0
 8012c92:	f04f 32ff 	mov.w	r2, #4294967295
 8012c96:	f10a 0a01 	add.w	sl, sl, #1
 8012c9a:	9304      	str	r3, [sp, #16]
 8012c9c:	9307      	str	r3, [sp, #28]
 8012c9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012ca2:	931a      	str	r3, [sp, #104]	@ 0x68
 8012ca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ca8:	4654      	mov	r4, sl
 8012caa:	2205      	movs	r2, #5
 8012cac:	484f      	ldr	r0, [pc, #316]	@ (8012dec <_svfiprintf_r+0x1e4>)
 8012cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cb2:	f000 fce3 	bl	801367c <memchr>
 8012cb6:	9a04      	ldr	r2, [sp, #16]
 8012cb8:	b9d8      	cbnz	r0, 8012cf2 <_svfiprintf_r+0xea>
 8012cba:	06d0      	lsls	r0, r2, #27
 8012cbc:	bf44      	itt	mi
 8012cbe:	2320      	movmi	r3, #32
 8012cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cc4:	0711      	lsls	r1, r2, #28
 8012cc6:	bf44      	itt	mi
 8012cc8:	232b      	movmi	r3, #43	@ 0x2b
 8012cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cce:	f89a 3000 	ldrb.w	r3, [sl]
 8012cd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8012cd4:	d015      	beq.n	8012d02 <_svfiprintf_r+0xfa>
 8012cd6:	9a07      	ldr	r2, [sp, #28]
 8012cd8:	4654      	mov	r4, sl
 8012cda:	2000      	movs	r0, #0
 8012cdc:	f04f 0c0a 	mov.w	ip, #10
 8012ce0:	4621      	mov	r1, r4
 8012ce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ce6:	3b30      	subs	r3, #48	@ 0x30
 8012ce8:	2b09      	cmp	r3, #9
 8012cea:	d94b      	bls.n	8012d84 <_svfiprintf_r+0x17c>
 8012cec:	b1b0      	cbz	r0, 8012d1c <_svfiprintf_r+0x114>
 8012cee:	9207      	str	r2, [sp, #28]
 8012cf0:	e014      	b.n	8012d1c <_svfiprintf_r+0x114>
 8012cf2:	eba0 0308 	sub.w	r3, r0, r8
 8012cf6:	46a2      	mov	sl, r4
 8012cf8:	fa09 f303 	lsl.w	r3, r9, r3
 8012cfc:	4313      	orrs	r3, r2
 8012cfe:	9304      	str	r3, [sp, #16]
 8012d00:	e7d2      	b.n	8012ca8 <_svfiprintf_r+0xa0>
 8012d02:	9b03      	ldr	r3, [sp, #12]
 8012d04:	1d19      	adds	r1, r3, #4
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	9103      	str	r1, [sp, #12]
 8012d0c:	bfbb      	ittet	lt
 8012d0e:	425b      	neglt	r3, r3
 8012d10:	f042 0202 	orrlt.w	r2, r2, #2
 8012d14:	9307      	strge	r3, [sp, #28]
 8012d16:	9307      	strlt	r3, [sp, #28]
 8012d18:	bfb8      	it	lt
 8012d1a:	9204      	strlt	r2, [sp, #16]
 8012d1c:	7823      	ldrb	r3, [r4, #0]
 8012d1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d20:	d10a      	bne.n	8012d38 <_svfiprintf_r+0x130>
 8012d22:	7863      	ldrb	r3, [r4, #1]
 8012d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d26:	d132      	bne.n	8012d8e <_svfiprintf_r+0x186>
 8012d28:	9b03      	ldr	r3, [sp, #12]
 8012d2a:	3402      	adds	r4, #2
 8012d2c:	1d1a      	adds	r2, r3, #4
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012d34:	9203      	str	r2, [sp, #12]
 8012d36:	9305      	str	r3, [sp, #20]
 8012d38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012dfc <_svfiprintf_r+0x1f4>
 8012d3c:	2203      	movs	r2, #3
 8012d3e:	7821      	ldrb	r1, [r4, #0]
 8012d40:	4650      	mov	r0, sl
 8012d42:	f000 fc9b 	bl	801367c <memchr>
 8012d46:	b138      	cbz	r0, 8012d58 <_svfiprintf_r+0x150>
 8012d48:	eba0 000a 	sub.w	r0, r0, sl
 8012d4c:	2240      	movs	r2, #64	@ 0x40
 8012d4e:	9b04      	ldr	r3, [sp, #16]
 8012d50:	3401      	adds	r4, #1
 8012d52:	4082      	lsls	r2, r0
 8012d54:	4313      	orrs	r3, r2
 8012d56:	9304      	str	r3, [sp, #16]
 8012d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d5c:	2206      	movs	r2, #6
 8012d5e:	4824      	ldr	r0, [pc, #144]	@ (8012df0 <_svfiprintf_r+0x1e8>)
 8012d60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012d64:	f000 fc8a 	bl	801367c <memchr>
 8012d68:	2800      	cmp	r0, #0
 8012d6a:	d036      	beq.n	8012dda <_svfiprintf_r+0x1d2>
 8012d6c:	4b21      	ldr	r3, [pc, #132]	@ (8012df4 <_svfiprintf_r+0x1ec>)
 8012d6e:	bb1b      	cbnz	r3, 8012db8 <_svfiprintf_r+0x1b0>
 8012d70:	9b03      	ldr	r3, [sp, #12]
 8012d72:	3307      	adds	r3, #7
 8012d74:	f023 0307 	bic.w	r3, r3, #7
 8012d78:	3308      	adds	r3, #8
 8012d7a:	9303      	str	r3, [sp, #12]
 8012d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d7e:	4433      	add	r3, r6
 8012d80:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d82:	e76a      	b.n	8012c5a <_svfiprintf_r+0x52>
 8012d84:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d88:	460c      	mov	r4, r1
 8012d8a:	2001      	movs	r0, #1
 8012d8c:	e7a8      	b.n	8012ce0 <_svfiprintf_r+0xd8>
 8012d8e:	2300      	movs	r3, #0
 8012d90:	3401      	adds	r4, #1
 8012d92:	f04f 0c0a 	mov.w	ip, #10
 8012d96:	4619      	mov	r1, r3
 8012d98:	9305      	str	r3, [sp, #20]
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012da0:	3a30      	subs	r2, #48	@ 0x30
 8012da2:	2a09      	cmp	r2, #9
 8012da4:	d903      	bls.n	8012dae <_svfiprintf_r+0x1a6>
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d0c6      	beq.n	8012d38 <_svfiprintf_r+0x130>
 8012daa:	9105      	str	r1, [sp, #20]
 8012dac:	e7c4      	b.n	8012d38 <_svfiprintf_r+0x130>
 8012dae:	fb0c 2101 	mla	r1, ip, r1, r2
 8012db2:	4604      	mov	r4, r0
 8012db4:	2301      	movs	r3, #1
 8012db6:	e7f0      	b.n	8012d9a <_svfiprintf_r+0x192>
 8012db8:	ab03      	add	r3, sp, #12
 8012dba:	462a      	mov	r2, r5
 8012dbc:	a904      	add	r1, sp, #16
 8012dbe:	4638      	mov	r0, r7
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8012df8 <_svfiprintf_r+0x1f0>)
 8012dc4:	f3af 8000 	nop.w
 8012dc8:	1c42      	adds	r2, r0, #1
 8012dca:	4606      	mov	r6, r0
 8012dcc:	d1d6      	bne.n	8012d7c <_svfiprintf_r+0x174>
 8012dce:	89ab      	ldrh	r3, [r5, #12]
 8012dd0:	065b      	lsls	r3, r3, #25
 8012dd2:	f53f af2d 	bmi.w	8012c30 <_svfiprintf_r+0x28>
 8012dd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012dd8:	e72c      	b.n	8012c34 <_svfiprintf_r+0x2c>
 8012dda:	ab03      	add	r3, sp, #12
 8012ddc:	462a      	mov	r2, r5
 8012dde:	a904      	add	r1, sp, #16
 8012de0:	4638      	mov	r0, r7
 8012de2:	9300      	str	r3, [sp, #0]
 8012de4:	4b04      	ldr	r3, [pc, #16]	@ (8012df8 <_svfiprintf_r+0x1f0>)
 8012de6:	f000 f9bf 	bl	8013168 <_printf_i>
 8012dea:	e7ed      	b.n	8012dc8 <_svfiprintf_r+0x1c0>
 8012dec:	08014748 	.word	0x08014748
 8012df0:	08014752 	.word	0x08014752
 8012df4:	00000000 	.word	0x00000000
 8012df8:	08012b51 	.word	0x08012b51
 8012dfc:	0801474e 	.word	0x0801474e

08012e00 <__sfputc_r>:
 8012e00:	6893      	ldr	r3, [r2, #8]
 8012e02:	3b01      	subs	r3, #1
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	6093      	str	r3, [r2, #8]
 8012e08:	b410      	push	{r4}
 8012e0a:	da08      	bge.n	8012e1e <__sfputc_r+0x1e>
 8012e0c:	6994      	ldr	r4, [r2, #24]
 8012e0e:	42a3      	cmp	r3, r4
 8012e10:	db01      	blt.n	8012e16 <__sfputc_r+0x16>
 8012e12:	290a      	cmp	r1, #10
 8012e14:	d103      	bne.n	8012e1e <__sfputc_r+0x1e>
 8012e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e1a:	f000 bb71 	b.w	8013500 <__swbuf_r>
 8012e1e:	6813      	ldr	r3, [r2, #0]
 8012e20:	1c58      	adds	r0, r3, #1
 8012e22:	6010      	str	r0, [r2, #0]
 8012e24:	4608      	mov	r0, r1
 8012e26:	7019      	strb	r1, [r3, #0]
 8012e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e2c:	4770      	bx	lr

08012e2e <__sfputs_r>:
 8012e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e30:	4606      	mov	r6, r0
 8012e32:	460f      	mov	r7, r1
 8012e34:	4614      	mov	r4, r2
 8012e36:	18d5      	adds	r5, r2, r3
 8012e38:	42ac      	cmp	r4, r5
 8012e3a:	d101      	bne.n	8012e40 <__sfputs_r+0x12>
 8012e3c:	2000      	movs	r0, #0
 8012e3e:	e007      	b.n	8012e50 <__sfputs_r+0x22>
 8012e40:	463a      	mov	r2, r7
 8012e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e46:	4630      	mov	r0, r6
 8012e48:	f7ff ffda 	bl	8012e00 <__sfputc_r>
 8012e4c:	1c43      	adds	r3, r0, #1
 8012e4e:	d1f3      	bne.n	8012e38 <__sfputs_r+0xa>
 8012e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012e54 <_vfiprintf_r>:
 8012e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e58:	460d      	mov	r5, r1
 8012e5a:	b09d      	sub	sp, #116	@ 0x74
 8012e5c:	4614      	mov	r4, r2
 8012e5e:	4698      	mov	r8, r3
 8012e60:	4606      	mov	r6, r0
 8012e62:	b118      	cbz	r0, 8012e6c <_vfiprintf_r+0x18>
 8012e64:	6a03      	ldr	r3, [r0, #32]
 8012e66:	b90b      	cbnz	r3, 8012e6c <_vfiprintf_r+0x18>
 8012e68:	f7ff fbda 	bl	8012620 <__sinit>
 8012e6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e6e:	07d9      	lsls	r1, r3, #31
 8012e70:	d405      	bmi.n	8012e7e <_vfiprintf_r+0x2a>
 8012e72:	89ab      	ldrh	r3, [r5, #12]
 8012e74:	059a      	lsls	r2, r3, #22
 8012e76:	d402      	bmi.n	8012e7e <_vfiprintf_r+0x2a>
 8012e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e7a:	f7ff fd62 	bl	8012942 <__retarget_lock_acquire_recursive>
 8012e7e:	89ab      	ldrh	r3, [r5, #12]
 8012e80:	071b      	lsls	r3, r3, #28
 8012e82:	d501      	bpl.n	8012e88 <_vfiprintf_r+0x34>
 8012e84:	692b      	ldr	r3, [r5, #16]
 8012e86:	b99b      	cbnz	r3, 8012eb0 <_vfiprintf_r+0x5c>
 8012e88:	4629      	mov	r1, r5
 8012e8a:	4630      	mov	r0, r6
 8012e8c:	f000 fb76 	bl	801357c <__swsetup_r>
 8012e90:	b170      	cbz	r0, 8012eb0 <_vfiprintf_r+0x5c>
 8012e92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e94:	07dc      	lsls	r4, r3, #31
 8012e96:	d504      	bpl.n	8012ea2 <_vfiprintf_r+0x4e>
 8012e98:	f04f 30ff 	mov.w	r0, #4294967295
 8012e9c:	b01d      	add	sp, #116	@ 0x74
 8012e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ea2:	89ab      	ldrh	r3, [r5, #12]
 8012ea4:	0598      	lsls	r0, r3, #22
 8012ea6:	d4f7      	bmi.n	8012e98 <_vfiprintf_r+0x44>
 8012ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012eaa:	f7ff fd4b 	bl	8012944 <__retarget_lock_release_recursive>
 8012eae:	e7f3      	b.n	8012e98 <_vfiprintf_r+0x44>
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8012eb6:	f04f 0901 	mov.w	r9, #1
 8012eba:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8013070 <_vfiprintf_r+0x21c>
 8012ebe:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ec0:	2320      	movs	r3, #32
 8012ec2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012ec6:	2330      	movs	r3, #48	@ 0x30
 8012ec8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012ecc:	4623      	mov	r3, r4
 8012ece:	469a      	mov	sl, r3
 8012ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ed4:	b10a      	cbz	r2, 8012eda <_vfiprintf_r+0x86>
 8012ed6:	2a25      	cmp	r2, #37	@ 0x25
 8012ed8:	d1f9      	bne.n	8012ece <_vfiprintf_r+0x7a>
 8012eda:	ebba 0b04 	subs.w	fp, sl, r4
 8012ede:	d00b      	beq.n	8012ef8 <_vfiprintf_r+0xa4>
 8012ee0:	465b      	mov	r3, fp
 8012ee2:	4622      	mov	r2, r4
 8012ee4:	4629      	mov	r1, r5
 8012ee6:	4630      	mov	r0, r6
 8012ee8:	f7ff ffa1 	bl	8012e2e <__sfputs_r>
 8012eec:	3001      	adds	r0, #1
 8012eee:	f000 80a7 	beq.w	8013040 <_vfiprintf_r+0x1ec>
 8012ef2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ef4:	445a      	add	r2, fp
 8012ef6:	9209      	str	r2, [sp, #36]	@ 0x24
 8012ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	f000 809f 	beq.w	8013040 <_vfiprintf_r+0x1ec>
 8012f02:	2300      	movs	r3, #0
 8012f04:	f04f 32ff 	mov.w	r2, #4294967295
 8012f08:	f10a 0a01 	add.w	sl, sl, #1
 8012f0c:	9304      	str	r3, [sp, #16]
 8012f0e:	9307      	str	r3, [sp, #28]
 8012f10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012f14:	931a      	str	r3, [sp, #104]	@ 0x68
 8012f16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f1a:	4654      	mov	r4, sl
 8012f1c:	2205      	movs	r2, #5
 8012f1e:	4854      	ldr	r0, [pc, #336]	@ (8013070 <_vfiprintf_r+0x21c>)
 8012f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f24:	f000 fbaa 	bl	801367c <memchr>
 8012f28:	9a04      	ldr	r2, [sp, #16]
 8012f2a:	b9d8      	cbnz	r0, 8012f64 <_vfiprintf_r+0x110>
 8012f2c:	06d1      	lsls	r1, r2, #27
 8012f2e:	bf44      	itt	mi
 8012f30:	2320      	movmi	r3, #32
 8012f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f36:	0713      	lsls	r3, r2, #28
 8012f38:	bf44      	itt	mi
 8012f3a:	232b      	movmi	r3, #43	@ 0x2b
 8012f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f40:	f89a 3000 	ldrb.w	r3, [sl]
 8012f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f46:	d015      	beq.n	8012f74 <_vfiprintf_r+0x120>
 8012f48:	9a07      	ldr	r2, [sp, #28]
 8012f4a:	4654      	mov	r4, sl
 8012f4c:	2000      	movs	r0, #0
 8012f4e:	f04f 0c0a 	mov.w	ip, #10
 8012f52:	4621      	mov	r1, r4
 8012f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f58:	3b30      	subs	r3, #48	@ 0x30
 8012f5a:	2b09      	cmp	r3, #9
 8012f5c:	d94b      	bls.n	8012ff6 <_vfiprintf_r+0x1a2>
 8012f5e:	b1b0      	cbz	r0, 8012f8e <_vfiprintf_r+0x13a>
 8012f60:	9207      	str	r2, [sp, #28]
 8012f62:	e014      	b.n	8012f8e <_vfiprintf_r+0x13a>
 8012f64:	eba0 0308 	sub.w	r3, r0, r8
 8012f68:	46a2      	mov	sl, r4
 8012f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8012f6e:	4313      	orrs	r3, r2
 8012f70:	9304      	str	r3, [sp, #16]
 8012f72:	e7d2      	b.n	8012f1a <_vfiprintf_r+0xc6>
 8012f74:	9b03      	ldr	r3, [sp, #12]
 8012f76:	1d19      	adds	r1, r3, #4
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	9103      	str	r1, [sp, #12]
 8012f7e:	bfbb      	ittet	lt
 8012f80:	425b      	neglt	r3, r3
 8012f82:	f042 0202 	orrlt.w	r2, r2, #2
 8012f86:	9307      	strge	r3, [sp, #28]
 8012f88:	9307      	strlt	r3, [sp, #28]
 8012f8a:	bfb8      	it	lt
 8012f8c:	9204      	strlt	r2, [sp, #16]
 8012f8e:	7823      	ldrb	r3, [r4, #0]
 8012f90:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f92:	d10a      	bne.n	8012faa <_vfiprintf_r+0x156>
 8012f94:	7863      	ldrb	r3, [r4, #1]
 8012f96:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f98:	d132      	bne.n	8013000 <_vfiprintf_r+0x1ac>
 8012f9a:	9b03      	ldr	r3, [sp, #12]
 8012f9c:	3402      	adds	r4, #2
 8012f9e:	1d1a      	adds	r2, r3, #4
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012fa6:	9203      	str	r2, [sp, #12]
 8012fa8:	9305      	str	r3, [sp, #20]
 8012faa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013080 <_vfiprintf_r+0x22c>
 8012fae:	2203      	movs	r2, #3
 8012fb0:	7821      	ldrb	r1, [r4, #0]
 8012fb2:	4650      	mov	r0, sl
 8012fb4:	f000 fb62 	bl	801367c <memchr>
 8012fb8:	b138      	cbz	r0, 8012fca <_vfiprintf_r+0x176>
 8012fba:	eba0 000a 	sub.w	r0, r0, sl
 8012fbe:	2240      	movs	r2, #64	@ 0x40
 8012fc0:	9b04      	ldr	r3, [sp, #16]
 8012fc2:	3401      	adds	r4, #1
 8012fc4:	4082      	lsls	r2, r0
 8012fc6:	4313      	orrs	r3, r2
 8012fc8:	9304      	str	r3, [sp, #16]
 8012fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fce:	2206      	movs	r2, #6
 8012fd0:	4828      	ldr	r0, [pc, #160]	@ (8013074 <_vfiprintf_r+0x220>)
 8012fd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012fd6:	f000 fb51 	bl	801367c <memchr>
 8012fda:	2800      	cmp	r0, #0
 8012fdc:	d03f      	beq.n	801305e <_vfiprintf_r+0x20a>
 8012fde:	4b26      	ldr	r3, [pc, #152]	@ (8013078 <_vfiprintf_r+0x224>)
 8012fe0:	bb1b      	cbnz	r3, 801302a <_vfiprintf_r+0x1d6>
 8012fe2:	9b03      	ldr	r3, [sp, #12]
 8012fe4:	3307      	adds	r3, #7
 8012fe6:	f023 0307 	bic.w	r3, r3, #7
 8012fea:	3308      	adds	r3, #8
 8012fec:	9303      	str	r3, [sp, #12]
 8012fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ff0:	443b      	add	r3, r7
 8012ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ff4:	e76a      	b.n	8012ecc <_vfiprintf_r+0x78>
 8012ff6:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ffa:	460c      	mov	r4, r1
 8012ffc:	2001      	movs	r0, #1
 8012ffe:	e7a8      	b.n	8012f52 <_vfiprintf_r+0xfe>
 8013000:	2300      	movs	r3, #0
 8013002:	3401      	adds	r4, #1
 8013004:	f04f 0c0a 	mov.w	ip, #10
 8013008:	4619      	mov	r1, r3
 801300a:	9305      	str	r3, [sp, #20]
 801300c:	4620      	mov	r0, r4
 801300e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013012:	3a30      	subs	r2, #48	@ 0x30
 8013014:	2a09      	cmp	r2, #9
 8013016:	d903      	bls.n	8013020 <_vfiprintf_r+0x1cc>
 8013018:	2b00      	cmp	r3, #0
 801301a:	d0c6      	beq.n	8012faa <_vfiprintf_r+0x156>
 801301c:	9105      	str	r1, [sp, #20]
 801301e:	e7c4      	b.n	8012faa <_vfiprintf_r+0x156>
 8013020:	fb0c 2101 	mla	r1, ip, r1, r2
 8013024:	4604      	mov	r4, r0
 8013026:	2301      	movs	r3, #1
 8013028:	e7f0      	b.n	801300c <_vfiprintf_r+0x1b8>
 801302a:	ab03      	add	r3, sp, #12
 801302c:	462a      	mov	r2, r5
 801302e:	a904      	add	r1, sp, #16
 8013030:	4630      	mov	r0, r6
 8013032:	9300      	str	r3, [sp, #0]
 8013034:	4b11      	ldr	r3, [pc, #68]	@ (801307c <_vfiprintf_r+0x228>)
 8013036:	f3af 8000 	nop.w
 801303a:	4607      	mov	r7, r0
 801303c:	1c78      	adds	r0, r7, #1
 801303e:	d1d6      	bne.n	8012fee <_vfiprintf_r+0x19a>
 8013040:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013042:	07d9      	lsls	r1, r3, #31
 8013044:	d405      	bmi.n	8013052 <_vfiprintf_r+0x1fe>
 8013046:	89ab      	ldrh	r3, [r5, #12]
 8013048:	059a      	lsls	r2, r3, #22
 801304a:	d402      	bmi.n	8013052 <_vfiprintf_r+0x1fe>
 801304c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801304e:	f7ff fc79 	bl	8012944 <__retarget_lock_release_recursive>
 8013052:	89ab      	ldrh	r3, [r5, #12]
 8013054:	065b      	lsls	r3, r3, #25
 8013056:	f53f af1f 	bmi.w	8012e98 <_vfiprintf_r+0x44>
 801305a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801305c:	e71e      	b.n	8012e9c <_vfiprintf_r+0x48>
 801305e:	ab03      	add	r3, sp, #12
 8013060:	462a      	mov	r2, r5
 8013062:	a904      	add	r1, sp, #16
 8013064:	4630      	mov	r0, r6
 8013066:	9300      	str	r3, [sp, #0]
 8013068:	4b04      	ldr	r3, [pc, #16]	@ (801307c <_vfiprintf_r+0x228>)
 801306a:	f000 f87d 	bl	8013168 <_printf_i>
 801306e:	e7e4      	b.n	801303a <_vfiprintf_r+0x1e6>
 8013070:	08014748 	.word	0x08014748
 8013074:	08014752 	.word	0x08014752
 8013078:	00000000 	.word	0x00000000
 801307c:	08012e2f 	.word	0x08012e2f
 8013080:	0801474e 	.word	0x0801474e

08013084 <_printf_common>:
 8013084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013088:	4616      	mov	r6, r2
 801308a:	4698      	mov	r8, r3
 801308c:	688a      	ldr	r2, [r1, #8]
 801308e:	4607      	mov	r7, r0
 8013090:	690b      	ldr	r3, [r1, #16]
 8013092:	460c      	mov	r4, r1
 8013094:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013098:	4293      	cmp	r3, r2
 801309a:	bfb8      	it	lt
 801309c:	4613      	movlt	r3, r2
 801309e:	6033      	str	r3, [r6, #0]
 80130a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80130a4:	b10a      	cbz	r2, 80130aa <_printf_common+0x26>
 80130a6:	3301      	adds	r3, #1
 80130a8:	6033      	str	r3, [r6, #0]
 80130aa:	6823      	ldr	r3, [r4, #0]
 80130ac:	0699      	lsls	r1, r3, #26
 80130ae:	bf42      	ittt	mi
 80130b0:	6833      	ldrmi	r3, [r6, #0]
 80130b2:	3302      	addmi	r3, #2
 80130b4:	6033      	strmi	r3, [r6, #0]
 80130b6:	6825      	ldr	r5, [r4, #0]
 80130b8:	f015 0506 	ands.w	r5, r5, #6
 80130bc:	d106      	bne.n	80130cc <_printf_common+0x48>
 80130be:	f104 0a19 	add.w	sl, r4, #25
 80130c2:	68e3      	ldr	r3, [r4, #12]
 80130c4:	6832      	ldr	r2, [r6, #0]
 80130c6:	1a9b      	subs	r3, r3, r2
 80130c8:	42ab      	cmp	r3, r5
 80130ca:	dc2b      	bgt.n	8013124 <_printf_common+0xa0>
 80130cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80130d0:	6822      	ldr	r2, [r4, #0]
 80130d2:	3b00      	subs	r3, #0
 80130d4:	bf18      	it	ne
 80130d6:	2301      	movne	r3, #1
 80130d8:	0692      	lsls	r2, r2, #26
 80130da:	d430      	bmi.n	801313e <_printf_common+0xba>
 80130dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80130e0:	4641      	mov	r1, r8
 80130e2:	4638      	mov	r0, r7
 80130e4:	47c8      	blx	r9
 80130e6:	3001      	adds	r0, #1
 80130e8:	d023      	beq.n	8013132 <_printf_common+0xae>
 80130ea:	6823      	ldr	r3, [r4, #0]
 80130ec:	341a      	adds	r4, #26
 80130ee:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80130f2:	f003 0306 	and.w	r3, r3, #6
 80130f6:	2b04      	cmp	r3, #4
 80130f8:	bf0a      	itet	eq
 80130fa:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80130fe:	2500      	movne	r5, #0
 8013100:	6833      	ldreq	r3, [r6, #0]
 8013102:	f04f 0600 	mov.w	r6, #0
 8013106:	bf08      	it	eq
 8013108:	1aed      	subeq	r5, r5, r3
 801310a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801310e:	bf08      	it	eq
 8013110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013114:	4293      	cmp	r3, r2
 8013116:	bfc4      	itt	gt
 8013118:	1a9b      	subgt	r3, r3, r2
 801311a:	18ed      	addgt	r5, r5, r3
 801311c:	42b5      	cmp	r5, r6
 801311e:	d11a      	bne.n	8013156 <_printf_common+0xd2>
 8013120:	2000      	movs	r0, #0
 8013122:	e008      	b.n	8013136 <_printf_common+0xb2>
 8013124:	2301      	movs	r3, #1
 8013126:	4652      	mov	r2, sl
 8013128:	4641      	mov	r1, r8
 801312a:	4638      	mov	r0, r7
 801312c:	47c8      	blx	r9
 801312e:	3001      	adds	r0, #1
 8013130:	d103      	bne.n	801313a <_printf_common+0xb6>
 8013132:	f04f 30ff 	mov.w	r0, #4294967295
 8013136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801313a:	3501      	adds	r5, #1
 801313c:	e7c1      	b.n	80130c2 <_printf_common+0x3e>
 801313e:	18e1      	adds	r1, r4, r3
 8013140:	1c5a      	adds	r2, r3, #1
 8013142:	2030      	movs	r0, #48	@ 0x30
 8013144:	3302      	adds	r3, #2
 8013146:	4422      	add	r2, r4
 8013148:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801314c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013150:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013154:	e7c2      	b.n	80130dc <_printf_common+0x58>
 8013156:	2301      	movs	r3, #1
 8013158:	4622      	mov	r2, r4
 801315a:	4641      	mov	r1, r8
 801315c:	4638      	mov	r0, r7
 801315e:	47c8      	blx	r9
 8013160:	3001      	adds	r0, #1
 8013162:	d0e6      	beq.n	8013132 <_printf_common+0xae>
 8013164:	3601      	adds	r6, #1
 8013166:	e7d9      	b.n	801311c <_printf_common+0x98>

08013168 <_printf_i>:
 8013168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801316c:	7e0f      	ldrb	r7, [r1, #24]
 801316e:	4691      	mov	r9, r2
 8013170:	4680      	mov	r8, r0
 8013172:	460c      	mov	r4, r1
 8013174:	2f78      	cmp	r7, #120	@ 0x78
 8013176:	469a      	mov	sl, r3
 8013178:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801317a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801317e:	d807      	bhi.n	8013190 <_printf_i+0x28>
 8013180:	2f62      	cmp	r7, #98	@ 0x62
 8013182:	d80a      	bhi.n	801319a <_printf_i+0x32>
 8013184:	2f00      	cmp	r7, #0
 8013186:	f000 80d2 	beq.w	801332e <_printf_i+0x1c6>
 801318a:	2f58      	cmp	r7, #88	@ 0x58
 801318c:	f000 80b9 	beq.w	8013302 <_printf_i+0x19a>
 8013190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013194:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013198:	e03a      	b.n	8013210 <_printf_i+0xa8>
 801319a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801319e:	2b15      	cmp	r3, #21
 80131a0:	d8f6      	bhi.n	8013190 <_printf_i+0x28>
 80131a2:	a101      	add	r1, pc, #4	@ (adr r1, 80131a8 <_printf_i+0x40>)
 80131a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80131a8:	08013201 	.word	0x08013201
 80131ac:	08013215 	.word	0x08013215
 80131b0:	08013191 	.word	0x08013191
 80131b4:	08013191 	.word	0x08013191
 80131b8:	08013191 	.word	0x08013191
 80131bc:	08013191 	.word	0x08013191
 80131c0:	08013215 	.word	0x08013215
 80131c4:	08013191 	.word	0x08013191
 80131c8:	08013191 	.word	0x08013191
 80131cc:	08013191 	.word	0x08013191
 80131d0:	08013191 	.word	0x08013191
 80131d4:	08013315 	.word	0x08013315
 80131d8:	0801323f 	.word	0x0801323f
 80131dc:	080132cf 	.word	0x080132cf
 80131e0:	08013191 	.word	0x08013191
 80131e4:	08013191 	.word	0x08013191
 80131e8:	08013337 	.word	0x08013337
 80131ec:	08013191 	.word	0x08013191
 80131f0:	0801323f 	.word	0x0801323f
 80131f4:	08013191 	.word	0x08013191
 80131f8:	08013191 	.word	0x08013191
 80131fc:	080132d7 	.word	0x080132d7
 8013200:	6833      	ldr	r3, [r6, #0]
 8013202:	1d1a      	adds	r2, r3, #4
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	6032      	str	r2, [r6, #0]
 8013208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801320c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013210:	2301      	movs	r3, #1
 8013212:	e09d      	b.n	8013350 <_printf_i+0x1e8>
 8013214:	6833      	ldr	r3, [r6, #0]
 8013216:	6820      	ldr	r0, [r4, #0]
 8013218:	1d19      	adds	r1, r3, #4
 801321a:	6031      	str	r1, [r6, #0]
 801321c:	0606      	lsls	r6, r0, #24
 801321e:	d501      	bpl.n	8013224 <_printf_i+0xbc>
 8013220:	681d      	ldr	r5, [r3, #0]
 8013222:	e003      	b.n	801322c <_printf_i+0xc4>
 8013224:	0645      	lsls	r5, r0, #25
 8013226:	d5fb      	bpl.n	8013220 <_printf_i+0xb8>
 8013228:	f9b3 5000 	ldrsh.w	r5, [r3]
 801322c:	2d00      	cmp	r5, #0
 801322e:	da03      	bge.n	8013238 <_printf_i+0xd0>
 8013230:	232d      	movs	r3, #45	@ 0x2d
 8013232:	426d      	negs	r5, r5
 8013234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013238:	4859      	ldr	r0, [pc, #356]	@ (80133a0 <_printf_i+0x238>)
 801323a:	230a      	movs	r3, #10
 801323c:	e011      	b.n	8013262 <_printf_i+0xfa>
 801323e:	6821      	ldr	r1, [r4, #0]
 8013240:	6833      	ldr	r3, [r6, #0]
 8013242:	0608      	lsls	r0, r1, #24
 8013244:	f853 5b04 	ldr.w	r5, [r3], #4
 8013248:	d402      	bmi.n	8013250 <_printf_i+0xe8>
 801324a:	0649      	lsls	r1, r1, #25
 801324c:	bf48      	it	mi
 801324e:	b2ad      	uxthmi	r5, r5
 8013250:	2f6f      	cmp	r7, #111	@ 0x6f
 8013252:	6033      	str	r3, [r6, #0]
 8013254:	4852      	ldr	r0, [pc, #328]	@ (80133a0 <_printf_i+0x238>)
 8013256:	bf14      	ite	ne
 8013258:	230a      	movne	r3, #10
 801325a:	2308      	moveq	r3, #8
 801325c:	2100      	movs	r1, #0
 801325e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013262:	6866      	ldr	r6, [r4, #4]
 8013264:	2e00      	cmp	r6, #0
 8013266:	60a6      	str	r6, [r4, #8]
 8013268:	bfa2      	ittt	ge
 801326a:	6821      	ldrge	r1, [r4, #0]
 801326c:	f021 0104 	bicge.w	r1, r1, #4
 8013270:	6021      	strge	r1, [r4, #0]
 8013272:	b90d      	cbnz	r5, 8013278 <_printf_i+0x110>
 8013274:	2e00      	cmp	r6, #0
 8013276:	d04b      	beq.n	8013310 <_printf_i+0x1a8>
 8013278:	4616      	mov	r6, r2
 801327a:	fbb5 f1f3 	udiv	r1, r5, r3
 801327e:	fb03 5711 	mls	r7, r3, r1, r5
 8013282:	5dc7      	ldrb	r7, [r0, r7]
 8013284:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013288:	462f      	mov	r7, r5
 801328a:	460d      	mov	r5, r1
 801328c:	42bb      	cmp	r3, r7
 801328e:	d9f4      	bls.n	801327a <_printf_i+0x112>
 8013290:	2b08      	cmp	r3, #8
 8013292:	d10b      	bne.n	80132ac <_printf_i+0x144>
 8013294:	6823      	ldr	r3, [r4, #0]
 8013296:	07df      	lsls	r7, r3, #31
 8013298:	d508      	bpl.n	80132ac <_printf_i+0x144>
 801329a:	6923      	ldr	r3, [r4, #16]
 801329c:	6861      	ldr	r1, [r4, #4]
 801329e:	4299      	cmp	r1, r3
 80132a0:	bfde      	ittt	le
 80132a2:	2330      	movle	r3, #48	@ 0x30
 80132a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80132a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80132ac:	1b92      	subs	r2, r2, r6
 80132ae:	6122      	str	r2, [r4, #16]
 80132b0:	464b      	mov	r3, r9
 80132b2:	aa03      	add	r2, sp, #12
 80132b4:	4621      	mov	r1, r4
 80132b6:	4640      	mov	r0, r8
 80132b8:	f8cd a000 	str.w	sl, [sp]
 80132bc:	f7ff fee2 	bl	8013084 <_printf_common>
 80132c0:	3001      	adds	r0, #1
 80132c2:	d14a      	bne.n	801335a <_printf_i+0x1f2>
 80132c4:	f04f 30ff 	mov.w	r0, #4294967295
 80132c8:	b004      	add	sp, #16
 80132ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132ce:	6823      	ldr	r3, [r4, #0]
 80132d0:	f043 0320 	orr.w	r3, r3, #32
 80132d4:	6023      	str	r3, [r4, #0]
 80132d6:	2778      	movs	r7, #120	@ 0x78
 80132d8:	4832      	ldr	r0, [pc, #200]	@ (80133a4 <_printf_i+0x23c>)
 80132da:	6823      	ldr	r3, [r4, #0]
 80132dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80132e0:	061f      	lsls	r7, r3, #24
 80132e2:	6831      	ldr	r1, [r6, #0]
 80132e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80132e8:	d402      	bmi.n	80132f0 <_printf_i+0x188>
 80132ea:	065f      	lsls	r7, r3, #25
 80132ec:	bf48      	it	mi
 80132ee:	b2ad      	uxthmi	r5, r5
 80132f0:	6031      	str	r1, [r6, #0]
 80132f2:	07d9      	lsls	r1, r3, #31
 80132f4:	bf44      	itt	mi
 80132f6:	f043 0320 	orrmi.w	r3, r3, #32
 80132fa:	6023      	strmi	r3, [r4, #0]
 80132fc:	b11d      	cbz	r5, 8013306 <_printf_i+0x19e>
 80132fe:	2310      	movs	r3, #16
 8013300:	e7ac      	b.n	801325c <_printf_i+0xf4>
 8013302:	4827      	ldr	r0, [pc, #156]	@ (80133a0 <_printf_i+0x238>)
 8013304:	e7e9      	b.n	80132da <_printf_i+0x172>
 8013306:	6823      	ldr	r3, [r4, #0]
 8013308:	f023 0320 	bic.w	r3, r3, #32
 801330c:	6023      	str	r3, [r4, #0]
 801330e:	e7f6      	b.n	80132fe <_printf_i+0x196>
 8013310:	4616      	mov	r6, r2
 8013312:	e7bd      	b.n	8013290 <_printf_i+0x128>
 8013314:	6833      	ldr	r3, [r6, #0]
 8013316:	6825      	ldr	r5, [r4, #0]
 8013318:	1d18      	adds	r0, r3, #4
 801331a:	6961      	ldr	r1, [r4, #20]
 801331c:	6030      	str	r0, [r6, #0]
 801331e:	062e      	lsls	r6, r5, #24
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	d501      	bpl.n	8013328 <_printf_i+0x1c0>
 8013324:	6019      	str	r1, [r3, #0]
 8013326:	e002      	b.n	801332e <_printf_i+0x1c6>
 8013328:	0668      	lsls	r0, r5, #25
 801332a:	d5fb      	bpl.n	8013324 <_printf_i+0x1bc>
 801332c:	8019      	strh	r1, [r3, #0]
 801332e:	2300      	movs	r3, #0
 8013330:	4616      	mov	r6, r2
 8013332:	6123      	str	r3, [r4, #16]
 8013334:	e7bc      	b.n	80132b0 <_printf_i+0x148>
 8013336:	6833      	ldr	r3, [r6, #0]
 8013338:	2100      	movs	r1, #0
 801333a:	1d1a      	adds	r2, r3, #4
 801333c:	6032      	str	r2, [r6, #0]
 801333e:	681e      	ldr	r6, [r3, #0]
 8013340:	6862      	ldr	r2, [r4, #4]
 8013342:	4630      	mov	r0, r6
 8013344:	f000 f99a 	bl	801367c <memchr>
 8013348:	b108      	cbz	r0, 801334e <_printf_i+0x1e6>
 801334a:	1b80      	subs	r0, r0, r6
 801334c:	6060      	str	r0, [r4, #4]
 801334e:	6863      	ldr	r3, [r4, #4]
 8013350:	6123      	str	r3, [r4, #16]
 8013352:	2300      	movs	r3, #0
 8013354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013358:	e7aa      	b.n	80132b0 <_printf_i+0x148>
 801335a:	6923      	ldr	r3, [r4, #16]
 801335c:	4632      	mov	r2, r6
 801335e:	4649      	mov	r1, r9
 8013360:	4640      	mov	r0, r8
 8013362:	47d0      	blx	sl
 8013364:	3001      	adds	r0, #1
 8013366:	d0ad      	beq.n	80132c4 <_printf_i+0x15c>
 8013368:	6823      	ldr	r3, [r4, #0]
 801336a:	079b      	lsls	r3, r3, #30
 801336c:	d413      	bmi.n	8013396 <_printf_i+0x22e>
 801336e:	68e0      	ldr	r0, [r4, #12]
 8013370:	9b03      	ldr	r3, [sp, #12]
 8013372:	4298      	cmp	r0, r3
 8013374:	bfb8      	it	lt
 8013376:	4618      	movlt	r0, r3
 8013378:	e7a6      	b.n	80132c8 <_printf_i+0x160>
 801337a:	2301      	movs	r3, #1
 801337c:	4632      	mov	r2, r6
 801337e:	4649      	mov	r1, r9
 8013380:	4640      	mov	r0, r8
 8013382:	47d0      	blx	sl
 8013384:	3001      	adds	r0, #1
 8013386:	d09d      	beq.n	80132c4 <_printf_i+0x15c>
 8013388:	3501      	adds	r5, #1
 801338a:	68e3      	ldr	r3, [r4, #12]
 801338c:	9903      	ldr	r1, [sp, #12]
 801338e:	1a5b      	subs	r3, r3, r1
 8013390:	42ab      	cmp	r3, r5
 8013392:	dcf2      	bgt.n	801337a <_printf_i+0x212>
 8013394:	e7eb      	b.n	801336e <_printf_i+0x206>
 8013396:	2500      	movs	r5, #0
 8013398:	f104 0619 	add.w	r6, r4, #25
 801339c:	e7f5      	b.n	801338a <_printf_i+0x222>
 801339e:	bf00      	nop
 80133a0:	08014759 	.word	0x08014759
 80133a4:	0801476a 	.word	0x0801476a

080133a8 <__sflush_r>:
 80133a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80133ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133b0:	0716      	lsls	r6, r2, #28
 80133b2:	4605      	mov	r5, r0
 80133b4:	460c      	mov	r4, r1
 80133b6:	d454      	bmi.n	8013462 <__sflush_r+0xba>
 80133b8:	684b      	ldr	r3, [r1, #4]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	dc02      	bgt.n	80133c4 <__sflush_r+0x1c>
 80133be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	dd48      	ble.n	8013456 <__sflush_r+0xae>
 80133c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80133c6:	2e00      	cmp	r6, #0
 80133c8:	d045      	beq.n	8013456 <__sflush_r+0xae>
 80133ca:	2300      	movs	r3, #0
 80133cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80133d0:	682f      	ldr	r7, [r5, #0]
 80133d2:	6a21      	ldr	r1, [r4, #32]
 80133d4:	602b      	str	r3, [r5, #0]
 80133d6:	d030      	beq.n	801343a <__sflush_r+0x92>
 80133d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80133da:	89a3      	ldrh	r3, [r4, #12]
 80133dc:	0759      	lsls	r1, r3, #29
 80133de:	d505      	bpl.n	80133ec <__sflush_r+0x44>
 80133e0:	6863      	ldr	r3, [r4, #4]
 80133e2:	1ad2      	subs	r2, r2, r3
 80133e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80133e6:	b10b      	cbz	r3, 80133ec <__sflush_r+0x44>
 80133e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80133ea:	1ad2      	subs	r2, r2, r3
 80133ec:	2300      	movs	r3, #0
 80133ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80133f0:	6a21      	ldr	r1, [r4, #32]
 80133f2:	4628      	mov	r0, r5
 80133f4:	47b0      	blx	r6
 80133f6:	1c43      	adds	r3, r0, #1
 80133f8:	89a3      	ldrh	r3, [r4, #12]
 80133fa:	d106      	bne.n	801340a <__sflush_r+0x62>
 80133fc:	6829      	ldr	r1, [r5, #0]
 80133fe:	291d      	cmp	r1, #29
 8013400:	d82b      	bhi.n	801345a <__sflush_r+0xb2>
 8013402:	4a2a      	ldr	r2, [pc, #168]	@ (80134ac <__sflush_r+0x104>)
 8013404:	410a      	asrs	r2, r1
 8013406:	07d6      	lsls	r6, r2, #31
 8013408:	d427      	bmi.n	801345a <__sflush_r+0xb2>
 801340a:	2200      	movs	r2, #0
 801340c:	04d9      	lsls	r1, r3, #19
 801340e:	6062      	str	r2, [r4, #4]
 8013410:	6922      	ldr	r2, [r4, #16]
 8013412:	6022      	str	r2, [r4, #0]
 8013414:	d504      	bpl.n	8013420 <__sflush_r+0x78>
 8013416:	1c42      	adds	r2, r0, #1
 8013418:	d101      	bne.n	801341e <__sflush_r+0x76>
 801341a:	682b      	ldr	r3, [r5, #0]
 801341c:	b903      	cbnz	r3, 8013420 <__sflush_r+0x78>
 801341e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013420:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013422:	602f      	str	r7, [r5, #0]
 8013424:	b1b9      	cbz	r1, 8013456 <__sflush_r+0xae>
 8013426:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801342a:	4299      	cmp	r1, r3
 801342c:	d002      	beq.n	8013434 <__sflush_r+0x8c>
 801342e:	4628      	mov	r0, r5
 8013430:	f7ff fa96 	bl	8012960 <_free_r>
 8013434:	2300      	movs	r3, #0
 8013436:	6363      	str	r3, [r4, #52]	@ 0x34
 8013438:	e00d      	b.n	8013456 <__sflush_r+0xae>
 801343a:	2301      	movs	r3, #1
 801343c:	4628      	mov	r0, r5
 801343e:	47b0      	blx	r6
 8013440:	4602      	mov	r2, r0
 8013442:	1c50      	adds	r0, r2, #1
 8013444:	d1c9      	bne.n	80133da <__sflush_r+0x32>
 8013446:	682b      	ldr	r3, [r5, #0]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d0c6      	beq.n	80133da <__sflush_r+0x32>
 801344c:	2b1d      	cmp	r3, #29
 801344e:	d001      	beq.n	8013454 <__sflush_r+0xac>
 8013450:	2b16      	cmp	r3, #22
 8013452:	d11d      	bne.n	8013490 <__sflush_r+0xe8>
 8013454:	602f      	str	r7, [r5, #0]
 8013456:	2000      	movs	r0, #0
 8013458:	e021      	b.n	801349e <__sflush_r+0xf6>
 801345a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801345e:	b21b      	sxth	r3, r3
 8013460:	e01a      	b.n	8013498 <__sflush_r+0xf0>
 8013462:	690f      	ldr	r7, [r1, #16]
 8013464:	2f00      	cmp	r7, #0
 8013466:	d0f6      	beq.n	8013456 <__sflush_r+0xae>
 8013468:	0793      	lsls	r3, r2, #30
 801346a:	680e      	ldr	r6, [r1, #0]
 801346c:	600f      	str	r7, [r1, #0]
 801346e:	bf0c      	ite	eq
 8013470:	694b      	ldreq	r3, [r1, #20]
 8013472:	2300      	movne	r3, #0
 8013474:	eba6 0807 	sub.w	r8, r6, r7
 8013478:	608b      	str	r3, [r1, #8]
 801347a:	f1b8 0f00 	cmp.w	r8, #0
 801347e:	ddea      	ble.n	8013456 <__sflush_r+0xae>
 8013480:	4643      	mov	r3, r8
 8013482:	463a      	mov	r2, r7
 8013484:	6a21      	ldr	r1, [r4, #32]
 8013486:	4628      	mov	r0, r5
 8013488:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801348a:	47b0      	blx	r6
 801348c:	2800      	cmp	r0, #0
 801348e:	dc08      	bgt.n	80134a2 <__sflush_r+0xfa>
 8013490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013494:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013498:	f04f 30ff 	mov.w	r0, #4294967295
 801349c:	81a3      	strh	r3, [r4, #12]
 801349e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134a2:	4407      	add	r7, r0
 80134a4:	eba8 0800 	sub.w	r8, r8, r0
 80134a8:	e7e7      	b.n	801347a <__sflush_r+0xd2>
 80134aa:	bf00      	nop
 80134ac:	dfbffffe 	.word	0xdfbffffe

080134b0 <_fflush_r>:
 80134b0:	b538      	push	{r3, r4, r5, lr}
 80134b2:	690b      	ldr	r3, [r1, #16]
 80134b4:	4605      	mov	r5, r0
 80134b6:	460c      	mov	r4, r1
 80134b8:	b913      	cbnz	r3, 80134c0 <_fflush_r+0x10>
 80134ba:	2500      	movs	r5, #0
 80134bc:	4628      	mov	r0, r5
 80134be:	bd38      	pop	{r3, r4, r5, pc}
 80134c0:	b118      	cbz	r0, 80134ca <_fflush_r+0x1a>
 80134c2:	6a03      	ldr	r3, [r0, #32]
 80134c4:	b90b      	cbnz	r3, 80134ca <_fflush_r+0x1a>
 80134c6:	f7ff f8ab 	bl	8012620 <__sinit>
 80134ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d0f3      	beq.n	80134ba <_fflush_r+0xa>
 80134d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80134d4:	07d0      	lsls	r0, r2, #31
 80134d6:	d404      	bmi.n	80134e2 <_fflush_r+0x32>
 80134d8:	0599      	lsls	r1, r3, #22
 80134da:	d402      	bmi.n	80134e2 <_fflush_r+0x32>
 80134dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80134de:	f7ff fa30 	bl	8012942 <__retarget_lock_acquire_recursive>
 80134e2:	4628      	mov	r0, r5
 80134e4:	4621      	mov	r1, r4
 80134e6:	f7ff ff5f 	bl	80133a8 <__sflush_r>
 80134ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80134ec:	4605      	mov	r5, r0
 80134ee:	07da      	lsls	r2, r3, #31
 80134f0:	d4e4      	bmi.n	80134bc <_fflush_r+0xc>
 80134f2:	89a3      	ldrh	r3, [r4, #12]
 80134f4:	059b      	lsls	r3, r3, #22
 80134f6:	d4e1      	bmi.n	80134bc <_fflush_r+0xc>
 80134f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80134fa:	f7ff fa23 	bl	8012944 <__retarget_lock_release_recursive>
 80134fe:	e7dd      	b.n	80134bc <_fflush_r+0xc>

08013500 <__swbuf_r>:
 8013500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013502:	460e      	mov	r6, r1
 8013504:	4614      	mov	r4, r2
 8013506:	4605      	mov	r5, r0
 8013508:	b118      	cbz	r0, 8013512 <__swbuf_r+0x12>
 801350a:	6a03      	ldr	r3, [r0, #32]
 801350c:	b90b      	cbnz	r3, 8013512 <__swbuf_r+0x12>
 801350e:	f7ff f887 	bl	8012620 <__sinit>
 8013512:	69a3      	ldr	r3, [r4, #24]
 8013514:	60a3      	str	r3, [r4, #8]
 8013516:	89a3      	ldrh	r3, [r4, #12]
 8013518:	071a      	lsls	r2, r3, #28
 801351a:	d501      	bpl.n	8013520 <__swbuf_r+0x20>
 801351c:	6923      	ldr	r3, [r4, #16]
 801351e:	b943      	cbnz	r3, 8013532 <__swbuf_r+0x32>
 8013520:	4621      	mov	r1, r4
 8013522:	4628      	mov	r0, r5
 8013524:	f000 f82a 	bl	801357c <__swsetup_r>
 8013528:	b118      	cbz	r0, 8013532 <__swbuf_r+0x32>
 801352a:	f04f 37ff 	mov.w	r7, #4294967295
 801352e:	4638      	mov	r0, r7
 8013530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013532:	6823      	ldr	r3, [r4, #0]
 8013534:	b2f6      	uxtb	r6, r6
 8013536:	6922      	ldr	r2, [r4, #16]
 8013538:	4637      	mov	r7, r6
 801353a:	1a98      	subs	r0, r3, r2
 801353c:	6963      	ldr	r3, [r4, #20]
 801353e:	4283      	cmp	r3, r0
 8013540:	dc05      	bgt.n	801354e <__swbuf_r+0x4e>
 8013542:	4621      	mov	r1, r4
 8013544:	4628      	mov	r0, r5
 8013546:	f7ff ffb3 	bl	80134b0 <_fflush_r>
 801354a:	2800      	cmp	r0, #0
 801354c:	d1ed      	bne.n	801352a <__swbuf_r+0x2a>
 801354e:	68a3      	ldr	r3, [r4, #8]
 8013550:	3b01      	subs	r3, #1
 8013552:	60a3      	str	r3, [r4, #8]
 8013554:	6823      	ldr	r3, [r4, #0]
 8013556:	1c5a      	adds	r2, r3, #1
 8013558:	6022      	str	r2, [r4, #0]
 801355a:	701e      	strb	r6, [r3, #0]
 801355c:	1c43      	adds	r3, r0, #1
 801355e:	6962      	ldr	r2, [r4, #20]
 8013560:	429a      	cmp	r2, r3
 8013562:	d004      	beq.n	801356e <__swbuf_r+0x6e>
 8013564:	89a3      	ldrh	r3, [r4, #12]
 8013566:	07db      	lsls	r3, r3, #31
 8013568:	d5e1      	bpl.n	801352e <__swbuf_r+0x2e>
 801356a:	2e0a      	cmp	r6, #10
 801356c:	d1df      	bne.n	801352e <__swbuf_r+0x2e>
 801356e:	4621      	mov	r1, r4
 8013570:	4628      	mov	r0, r5
 8013572:	f7ff ff9d 	bl	80134b0 <_fflush_r>
 8013576:	2800      	cmp	r0, #0
 8013578:	d0d9      	beq.n	801352e <__swbuf_r+0x2e>
 801357a:	e7d6      	b.n	801352a <__swbuf_r+0x2a>

0801357c <__swsetup_r>:
 801357c:	b538      	push	{r3, r4, r5, lr}
 801357e:	4b29      	ldr	r3, [pc, #164]	@ (8013624 <__swsetup_r+0xa8>)
 8013580:	4605      	mov	r5, r0
 8013582:	460c      	mov	r4, r1
 8013584:	6818      	ldr	r0, [r3, #0]
 8013586:	b118      	cbz	r0, 8013590 <__swsetup_r+0x14>
 8013588:	6a03      	ldr	r3, [r0, #32]
 801358a:	b90b      	cbnz	r3, 8013590 <__swsetup_r+0x14>
 801358c:	f7ff f848 	bl	8012620 <__sinit>
 8013590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013594:	0719      	lsls	r1, r3, #28
 8013596:	d422      	bmi.n	80135de <__swsetup_r+0x62>
 8013598:	06da      	lsls	r2, r3, #27
 801359a:	d407      	bmi.n	80135ac <__swsetup_r+0x30>
 801359c:	2209      	movs	r2, #9
 801359e:	602a      	str	r2, [r5, #0]
 80135a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80135a4:	f04f 30ff 	mov.w	r0, #4294967295
 80135a8:	81a3      	strh	r3, [r4, #12]
 80135aa:	e033      	b.n	8013614 <__swsetup_r+0x98>
 80135ac:	0758      	lsls	r0, r3, #29
 80135ae:	d512      	bpl.n	80135d6 <__swsetup_r+0x5a>
 80135b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80135b2:	b141      	cbz	r1, 80135c6 <__swsetup_r+0x4a>
 80135b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80135b8:	4299      	cmp	r1, r3
 80135ba:	d002      	beq.n	80135c2 <__swsetup_r+0x46>
 80135bc:	4628      	mov	r0, r5
 80135be:	f7ff f9cf 	bl	8012960 <_free_r>
 80135c2:	2300      	movs	r3, #0
 80135c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80135c6:	89a3      	ldrh	r3, [r4, #12]
 80135c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80135cc:	81a3      	strh	r3, [r4, #12]
 80135ce:	2300      	movs	r3, #0
 80135d0:	6063      	str	r3, [r4, #4]
 80135d2:	6923      	ldr	r3, [r4, #16]
 80135d4:	6023      	str	r3, [r4, #0]
 80135d6:	89a3      	ldrh	r3, [r4, #12]
 80135d8:	f043 0308 	orr.w	r3, r3, #8
 80135dc:	81a3      	strh	r3, [r4, #12]
 80135de:	6923      	ldr	r3, [r4, #16]
 80135e0:	b94b      	cbnz	r3, 80135f6 <__swsetup_r+0x7a>
 80135e2:	89a3      	ldrh	r3, [r4, #12]
 80135e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80135e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80135ec:	d003      	beq.n	80135f6 <__swsetup_r+0x7a>
 80135ee:	4621      	mov	r1, r4
 80135f0:	4628      	mov	r0, r5
 80135f2:	f000 f8a4 	bl	801373e <__smakebuf_r>
 80135f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135fa:	f013 0201 	ands.w	r2, r3, #1
 80135fe:	d00a      	beq.n	8013616 <__swsetup_r+0x9a>
 8013600:	2200      	movs	r2, #0
 8013602:	60a2      	str	r2, [r4, #8]
 8013604:	6962      	ldr	r2, [r4, #20]
 8013606:	4252      	negs	r2, r2
 8013608:	61a2      	str	r2, [r4, #24]
 801360a:	6922      	ldr	r2, [r4, #16]
 801360c:	b942      	cbnz	r2, 8013620 <__swsetup_r+0xa4>
 801360e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013612:	d1c5      	bne.n	80135a0 <__swsetup_r+0x24>
 8013614:	bd38      	pop	{r3, r4, r5, pc}
 8013616:	0799      	lsls	r1, r3, #30
 8013618:	bf58      	it	pl
 801361a:	6962      	ldrpl	r2, [r4, #20]
 801361c:	60a2      	str	r2, [r4, #8]
 801361e:	e7f4      	b.n	801360a <__swsetup_r+0x8e>
 8013620:	2000      	movs	r0, #0
 8013622:	e7f7      	b.n	8013614 <__swsetup_r+0x98>
 8013624:	20000130 	.word	0x20000130

08013628 <memmove>:
 8013628:	4288      	cmp	r0, r1
 801362a:	b510      	push	{r4, lr}
 801362c:	eb01 0402 	add.w	r4, r1, r2
 8013630:	d902      	bls.n	8013638 <memmove+0x10>
 8013632:	4284      	cmp	r4, r0
 8013634:	4623      	mov	r3, r4
 8013636:	d807      	bhi.n	8013648 <memmove+0x20>
 8013638:	1e43      	subs	r3, r0, #1
 801363a:	42a1      	cmp	r1, r4
 801363c:	d008      	beq.n	8013650 <memmove+0x28>
 801363e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013646:	e7f8      	b.n	801363a <memmove+0x12>
 8013648:	4402      	add	r2, r0
 801364a:	4601      	mov	r1, r0
 801364c:	428a      	cmp	r2, r1
 801364e:	d100      	bne.n	8013652 <memmove+0x2a>
 8013650:	bd10      	pop	{r4, pc}
 8013652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801365a:	e7f7      	b.n	801364c <memmove+0x24>

0801365c <_sbrk_r>:
 801365c:	b538      	push	{r3, r4, r5, lr}
 801365e:	2300      	movs	r3, #0
 8013660:	4d05      	ldr	r5, [pc, #20]	@ (8013678 <_sbrk_r+0x1c>)
 8013662:	4604      	mov	r4, r0
 8013664:	4608      	mov	r0, r1
 8013666:	602b      	str	r3, [r5, #0]
 8013668:	f7ef f9ec 	bl	8002a44 <_sbrk>
 801366c:	1c43      	adds	r3, r0, #1
 801366e:	d102      	bne.n	8013676 <_sbrk_r+0x1a>
 8013670:	682b      	ldr	r3, [r5, #0]
 8013672:	b103      	cbz	r3, 8013676 <_sbrk_r+0x1a>
 8013674:	6023      	str	r3, [r4, #0]
 8013676:	bd38      	pop	{r3, r4, r5, pc}
 8013678:	20011350 	.word	0x20011350

0801367c <memchr>:
 801367c:	b2c9      	uxtb	r1, r1
 801367e:	4603      	mov	r3, r0
 8013680:	4402      	add	r2, r0
 8013682:	b510      	push	{r4, lr}
 8013684:	4293      	cmp	r3, r2
 8013686:	4618      	mov	r0, r3
 8013688:	d101      	bne.n	801368e <memchr+0x12>
 801368a:	2000      	movs	r0, #0
 801368c:	e003      	b.n	8013696 <memchr+0x1a>
 801368e:	7804      	ldrb	r4, [r0, #0]
 8013690:	3301      	adds	r3, #1
 8013692:	428c      	cmp	r4, r1
 8013694:	d1f6      	bne.n	8013684 <memchr+0x8>
 8013696:	bd10      	pop	{r4, pc}

08013698 <_realloc_r>:
 8013698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801369c:	4680      	mov	r8, r0
 801369e:	4615      	mov	r5, r2
 80136a0:	460c      	mov	r4, r1
 80136a2:	b921      	cbnz	r1, 80136ae <_realloc_r+0x16>
 80136a4:	4611      	mov	r1, r2
 80136a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136aa:	f7ff b9c5 	b.w	8012a38 <_malloc_r>
 80136ae:	b92a      	cbnz	r2, 80136bc <_realloc_r+0x24>
 80136b0:	f7ff f956 	bl	8012960 <_free_r>
 80136b4:	2400      	movs	r4, #0
 80136b6:	4620      	mov	r0, r4
 80136b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136bc:	f000 f89e 	bl	80137fc <_malloc_usable_size_r>
 80136c0:	4285      	cmp	r5, r0
 80136c2:	4606      	mov	r6, r0
 80136c4:	d802      	bhi.n	80136cc <_realloc_r+0x34>
 80136c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80136ca:	d8f4      	bhi.n	80136b6 <_realloc_r+0x1e>
 80136cc:	4629      	mov	r1, r5
 80136ce:	4640      	mov	r0, r8
 80136d0:	f7ff f9b2 	bl	8012a38 <_malloc_r>
 80136d4:	4607      	mov	r7, r0
 80136d6:	2800      	cmp	r0, #0
 80136d8:	d0ec      	beq.n	80136b4 <_realloc_r+0x1c>
 80136da:	42b5      	cmp	r5, r6
 80136dc:	462a      	mov	r2, r5
 80136de:	4621      	mov	r1, r4
 80136e0:	bf28      	it	cs
 80136e2:	4632      	movcs	r2, r6
 80136e4:	f7ff f92f 	bl	8012946 <memcpy>
 80136e8:	4621      	mov	r1, r4
 80136ea:	4640      	mov	r0, r8
 80136ec:	463c      	mov	r4, r7
 80136ee:	f7ff f937 	bl	8012960 <_free_r>
 80136f2:	e7e0      	b.n	80136b6 <_realloc_r+0x1e>

080136f4 <__swhatbuf_r>:
 80136f4:	b570      	push	{r4, r5, r6, lr}
 80136f6:	460c      	mov	r4, r1
 80136f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136fc:	b096      	sub	sp, #88	@ 0x58
 80136fe:	4615      	mov	r5, r2
 8013700:	2900      	cmp	r1, #0
 8013702:	461e      	mov	r6, r3
 8013704:	da0c      	bge.n	8013720 <__swhatbuf_r+0x2c>
 8013706:	89a3      	ldrh	r3, [r4, #12]
 8013708:	2100      	movs	r1, #0
 801370a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801370e:	bf14      	ite	ne
 8013710:	2340      	movne	r3, #64	@ 0x40
 8013712:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013716:	2000      	movs	r0, #0
 8013718:	6031      	str	r1, [r6, #0]
 801371a:	602b      	str	r3, [r5, #0]
 801371c:	b016      	add	sp, #88	@ 0x58
 801371e:	bd70      	pop	{r4, r5, r6, pc}
 8013720:	466a      	mov	r2, sp
 8013722:	f000 f849 	bl	80137b8 <_fstat_r>
 8013726:	2800      	cmp	r0, #0
 8013728:	dbed      	blt.n	8013706 <__swhatbuf_r+0x12>
 801372a:	9901      	ldr	r1, [sp, #4]
 801372c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013730:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013734:	4259      	negs	r1, r3
 8013736:	4159      	adcs	r1, r3
 8013738:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801373c:	e7eb      	b.n	8013716 <__swhatbuf_r+0x22>

0801373e <__smakebuf_r>:
 801373e:	898b      	ldrh	r3, [r1, #12]
 8013740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013742:	079d      	lsls	r5, r3, #30
 8013744:	4606      	mov	r6, r0
 8013746:	460c      	mov	r4, r1
 8013748:	d507      	bpl.n	801375a <__smakebuf_r+0x1c>
 801374a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801374e:	6023      	str	r3, [r4, #0]
 8013750:	6123      	str	r3, [r4, #16]
 8013752:	2301      	movs	r3, #1
 8013754:	6163      	str	r3, [r4, #20]
 8013756:	b003      	add	sp, #12
 8013758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801375a:	ab01      	add	r3, sp, #4
 801375c:	466a      	mov	r2, sp
 801375e:	f7ff ffc9 	bl	80136f4 <__swhatbuf_r>
 8013762:	9f00      	ldr	r7, [sp, #0]
 8013764:	4605      	mov	r5, r0
 8013766:	4630      	mov	r0, r6
 8013768:	4639      	mov	r1, r7
 801376a:	f7ff f965 	bl	8012a38 <_malloc_r>
 801376e:	b948      	cbnz	r0, 8013784 <__smakebuf_r+0x46>
 8013770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013774:	059a      	lsls	r2, r3, #22
 8013776:	d4ee      	bmi.n	8013756 <__smakebuf_r+0x18>
 8013778:	f023 0303 	bic.w	r3, r3, #3
 801377c:	f043 0302 	orr.w	r3, r3, #2
 8013780:	81a3      	strh	r3, [r4, #12]
 8013782:	e7e2      	b.n	801374a <__smakebuf_r+0xc>
 8013784:	89a3      	ldrh	r3, [r4, #12]
 8013786:	6020      	str	r0, [r4, #0]
 8013788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801378c:	81a3      	strh	r3, [r4, #12]
 801378e:	9b01      	ldr	r3, [sp, #4]
 8013790:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013794:	b15b      	cbz	r3, 80137ae <__smakebuf_r+0x70>
 8013796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801379a:	4630      	mov	r0, r6
 801379c:	f000 f81e 	bl	80137dc <_isatty_r>
 80137a0:	b128      	cbz	r0, 80137ae <__smakebuf_r+0x70>
 80137a2:	89a3      	ldrh	r3, [r4, #12]
 80137a4:	f023 0303 	bic.w	r3, r3, #3
 80137a8:	f043 0301 	orr.w	r3, r3, #1
 80137ac:	81a3      	strh	r3, [r4, #12]
 80137ae:	89a3      	ldrh	r3, [r4, #12]
 80137b0:	431d      	orrs	r5, r3
 80137b2:	81a5      	strh	r5, [r4, #12]
 80137b4:	e7cf      	b.n	8013756 <__smakebuf_r+0x18>
	...

080137b8 <_fstat_r>:
 80137b8:	b538      	push	{r3, r4, r5, lr}
 80137ba:	2300      	movs	r3, #0
 80137bc:	4d06      	ldr	r5, [pc, #24]	@ (80137d8 <_fstat_r+0x20>)
 80137be:	4604      	mov	r4, r0
 80137c0:	4608      	mov	r0, r1
 80137c2:	4611      	mov	r1, r2
 80137c4:	602b      	str	r3, [r5, #0]
 80137c6:	f7ef f914 	bl	80029f2 <_fstat>
 80137ca:	1c43      	adds	r3, r0, #1
 80137cc:	d102      	bne.n	80137d4 <_fstat_r+0x1c>
 80137ce:	682b      	ldr	r3, [r5, #0]
 80137d0:	b103      	cbz	r3, 80137d4 <_fstat_r+0x1c>
 80137d2:	6023      	str	r3, [r4, #0]
 80137d4:	bd38      	pop	{r3, r4, r5, pc}
 80137d6:	bf00      	nop
 80137d8:	20011350 	.word	0x20011350

080137dc <_isatty_r>:
 80137dc:	b538      	push	{r3, r4, r5, lr}
 80137de:	2300      	movs	r3, #0
 80137e0:	4d05      	ldr	r5, [pc, #20]	@ (80137f8 <_isatty_r+0x1c>)
 80137e2:	4604      	mov	r4, r0
 80137e4:	4608      	mov	r0, r1
 80137e6:	602b      	str	r3, [r5, #0]
 80137e8:	f7ef f913 	bl	8002a12 <_isatty>
 80137ec:	1c43      	adds	r3, r0, #1
 80137ee:	d102      	bne.n	80137f6 <_isatty_r+0x1a>
 80137f0:	682b      	ldr	r3, [r5, #0]
 80137f2:	b103      	cbz	r3, 80137f6 <_isatty_r+0x1a>
 80137f4:	6023      	str	r3, [r4, #0]
 80137f6:	bd38      	pop	{r3, r4, r5, pc}
 80137f8:	20011350 	.word	0x20011350

080137fc <_malloc_usable_size_r>:
 80137fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013800:	1f18      	subs	r0, r3, #4
 8013802:	2b00      	cmp	r3, #0
 8013804:	bfbc      	itt	lt
 8013806:	580b      	ldrlt	r3, [r1, r0]
 8013808:	18c0      	addlt	r0, r0, r3
 801380a:	4770      	bx	lr

0801380c <_init>:
 801380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801380e:	bf00      	nop
 8013810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013812:	bc08      	pop	{r3}
 8013814:	469e      	mov	lr, r3
 8013816:	4770      	bx	lr

08013818 <_fini>:
 8013818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801381a:	bf00      	nop
 801381c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801381e:	bc08      	pop	{r3}
 8013820:	469e      	mov	lr, r3
 8013822:	4770      	bx	lr
