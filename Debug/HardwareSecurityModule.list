
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001331c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08013568  08013568  00014568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801377c  0801377c  00015180  2**0
                  CONTENTS
  4 .ARM          00000008  0801377c  0801377c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013784  08013784  00015180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013784  08013784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013788  08013788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  0801378c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000111a0  20000180  0801390c  00015180  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20011320  0801390c  00015320  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00015180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000286e4  00000000  00000000  000151b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054a9  00000000  00000000  0003d89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  00042d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017e1  00000000  00000000  00044c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008204  00000000  00000000  00046461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c1b2  00000000  00000000  0004e665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014c23c  00000000  00000000  0007a817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c6a53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e1c  00000000  00000000  001c6a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001cf8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	08013550 	.word	0x08013550

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	08013550 	.word	0x08013550

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <W25Q_Delay>:
#define W25Q_SPI hspi1

#define numBLOCK 32

void W25Q_Delay(uint32_t time)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f002 f999 	bl	80028e4 <HAL_Delay>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <csLOW>:

void csLOW (void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005c6:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <csLOW+0x14>)
 80005c8:	f002 fd5c 	bl	8003084 <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	42020c00 	.word	0x42020c00

080005d4 <csHIGH>:

void csHIGH (void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005de:	4802      	ldr	r0, [pc, #8]	@ (80005e8 <csHIGH+0x14>)
 80005e0:	f002 fd50 	bl	8003084 <HAL_GPIO_WritePin>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	42020c00 	.word	0x42020c00

080005ec <SPI_Write>:

void SPI_Write(uint8_t *data, uint8_t len)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 80005f8:	78fb      	ldrb	r3, [r7, #3]
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	4803      	ldr	r0, [pc, #12]	@ (8000610 <SPI_Write+0x24>)
 8000604:	f00b ff14 	bl	800c430 <HAL_SPI_Transmit>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000284 	.word	0x20000284

08000614 <SPI_Read>:

void SPI_Read(uint8_t *data, uint32_t len)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b29a      	uxth	r2, r3
 8000622:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	4803      	ldr	r0, [pc, #12]	@ (8000638 <SPI_Read+0x24>)
 800062a:	f00c f939 	bl	800c8a0 <HAL_SPI_Receive>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000284 	.word	0x20000284

0800063c <W25Q_Reset>:


void W25Q_Reset (void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	uint8_t tData[2];
	tData[0] = 0x66;
 8000642:	2366      	movs	r3, #102	@ 0x66
 8000644:	713b      	strb	r3, [r7, #4]
	tData[1] = 0x99;
 8000646:	2399      	movs	r3, #153	@ 0x99
 8000648:	717b      	strb	r3, [r7, #5]
	csLOW();
 800064a:	f7ff ffb7 	bl	80005bc <csLOW>
	SPI_Write(tData, 2);
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffca 	bl	80005ec <SPI_Write>
	csHIGH();
 8000658:	f7ff ffbc 	bl	80005d4 <csHIGH>
	W25Q_Delay(100);
 800065c:	2064      	movs	r0, #100	@ 0x64
 800065e:	f7ff ffa1 	bl	80005a4 <W25Q_Delay>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <W25Q_Read>:
	csHIGH();
	return ((rData[0]<<16)|(rData[1]<<8)|rData[2]);
}

void W25Q_Read (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b088      	sub	sp, #32
 800066e:	af00      	add	r7, sp, #0
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	607a      	str	r2, [r7, #4]
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	460b      	mov	r3, r1
 8000678:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[5];
	uint32_t memAddr = (startPage*256) + offset;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	021a      	lsls	r2, r3, #8
 800067e:	7afb      	ldrb	r3, [r7, #11]
 8000680:	4413      	add	r3, r2
 8000682:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x03;  // enable Read
 8000684:	2303      	movs	r3, #3
 8000686:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	0c1b      	lsrs	r3, r3, #16
 800068c:	b2db      	uxtb	r3, r3
 800068e:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	b2db      	uxtb	r3, r3
 8000696:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	75fb      	strb	r3, [r7, #23]
		tData[2] = (memAddr>>16)&0xFF;
		tData[3] = (memAddr>>8)&0xFF;
		tData[4] = (memAddr)&0xFF; // LSB of the memory Address
	}

	csLOW();  // pull the CS Low
 800069e:	f7ff ff8d 	bl	80005bc <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 4);  // send read instruction along with the 24 bit memory address
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2104      	movs	r1, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff9f 	bl	80005ec <SPI_Write>
	else
	{
		SPI_Write(tData, 5);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(rData, size);  // Read the data
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	6838      	ldr	r0, [r7, #0]
 80006b2:	f7ff ffaf 	bl	8000614 <SPI_Read>
	csHIGH();  // pull the CS High
 80006b6:	f7ff ff8d 	bl	80005d4 <csHIGH>
}
 80006ba:	bf00      	nop
 80006bc:	3720      	adds	r7, #32
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <W25Q_FastRead>:

void W25Q_FastRead (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b088      	sub	sp, #32
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	460b      	mov	r3, r1
 80006d0:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[6];
	uint32_t memAddr = (startPage*256) + offset;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	021a      	lsls	r2, r3, #8
 80006d6:	7afb      	ldrb	r3, [r7, #11]
 80006d8:	4413      	add	r3, r2
 80006da:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x0B;  // enable Fast Read
 80006dc:	230b      	movs	r3, #11
 80006de:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	0c1b      	lsrs	r3, r3, #16
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	0a1b      	lsrs	r3, r3, #8
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	75fb      	strb	r3, [r7, #23]
		tData[4] = 0;  // Dummy clock
 80006f6:	2300      	movs	r3, #0
 80006f8:	763b      	strb	r3, [r7, #24]
		tData[3] = (memAddr>>8)&0xFF;
		tData[4] = (memAddr)&0xFF; // LSB of the memory Address
		tData[5] = 0;  // Dummy clock
	}

	csLOW();  // pull the CS Low
 80006fa:	f7ff ff5f 	bl	80005bc <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 5);  // send read instruction along with the 24 bit memory address
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2105      	movs	r1, #5
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff71 	bl	80005ec <SPI_Write>
	else
	{
		SPI_Write(tData, 6);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(rData, size);  // Read the data
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	6838      	ldr	r0, [r7, #0]
 800070e:	f7ff ff81 	bl	8000614 <SPI_Read>
	csHIGH();  // pull the CS High
 8000712:	f7ff ff5f 	bl	80005d4 <csHIGH>
}
 8000716:	bf00      	nop
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <write_enable>:

void write_enable (void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
	uint8_t tData = 0x06;  // enable write
 8000724:	2306      	movs	r3, #6
 8000726:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8000728:	f7ff ff48 	bl	80005bc <csLOW>
	SPI_Write(&tData, 1);
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	2101      	movs	r1, #1
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff5b 	bl	80005ec <SPI_Write>
	csHIGH();
 8000736:	f7ff ff4d 	bl	80005d4 <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 800073a:	2005      	movs	r0, #5
 800073c:	f7ff ff32 	bl	80005a4 <W25Q_Delay>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <write_disable>:

void write_disable(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	uint8_t tData = 0x04;  // disable write
 800074e:	2304      	movs	r3, #4
 8000750:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8000752:	f7ff ff33 	bl	80005bc <csLOW>
	SPI_Write(&tData, 1);
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff46 	bl	80005ec <SPI_Write>
	csHIGH();
 8000760:	f7ff ff38 	bl	80005d4 <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 8000764:	2005      	movs	r0, #5
 8000766:	f7ff ff1d 	bl	80005a4 <W25Q_Delay>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <bytestowriteFLASH>:

uint32_t bytestowriteFLASH (uint32_t size, uint16_t offset)
{
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	460b      	mov	r3, r1
 800077c:	807b      	strh	r3, [r7, #2]
	if ((size+offset)<256) return size;
 800077e:	887a      	ldrh	r2, [r7, #2]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4413      	add	r3, r2
 8000784:	2bff      	cmp	r3, #255	@ 0xff
 8000786:	d801      	bhi.n	800078c <bytestowriteFLASH+0x1a>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	e002      	b.n	8000792 <bytestowriteFLASH+0x20>
	else return 256-offset;
 800078c:	887b      	ldrh	r3, [r7, #2]
 800078e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <bytestomodify>:

uint32_t bytestomodify (uint32_t size, uint16_t offset)
{
 800079e:	b480      	push	{r7}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	460b      	mov	r3, r1
 80007a8:	807b      	strh	r3, [r7, #2]
	if ((size+offset)<4096) return size;
 80007aa:	887a      	ldrh	r2, [r7, #2]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4413      	add	r3, r2
 80007b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80007b4:	d201      	bcs.n	80007ba <bytestomodify+0x1c>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	e002      	b.n	80007c0 <bytestomodify+0x22>
	else return 4096-offset;
 80007ba:	887b      	ldrh	r3, [r7, #2]
 80007bc:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <W25Q_Erase_Sector>:

void W25Q_Erase_Sector (uint16_t numsector)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]
	uint8_t tData[6];
	uint32_t memAddr = numsector*16*256;   // Each sector contains 16 pages * 256 bytes
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	031b      	lsls	r3, r3, #12
 80007da:	617b      	str	r3, [r7, #20]

	write_enable();
 80007dc:	f7ff ff9f 	bl	800071e <write_enable>

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x20;  // Erase sector
 80007e0:	2320      	movs	r3, #32
 80007e2:	733b      	strb	r3, [r7, #12]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	737b      	strb	r3, [r7, #13]
		tData[2] = (memAddr>>8)&0xFF;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	0a1b      	lsrs	r3, r3, #8
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	73bb      	strb	r3, [r7, #14]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	73fb      	strb	r3, [r7, #15]

		csLOW();
 80007fa:	f7ff fedf 	bl	80005bc <csLOW>
		SPI_Write(tData, 4);
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2104      	movs	r1, #4
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fef1 	bl	80005ec <SPI_Write>
		csHIGH();
 800080a:	f7ff fee3 	bl	80005d4 <csHIGH>
		csLOW();  // pull the CS LOW
		SPI_Write(tData, 5);
		csHIGH();  // pull the HIGH
	}

	W25Q_Delay(450);  // 450ms delay for sector erase
 800080e:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000812:	f7ff fec7 	bl	80005a4 <W25Q_Delay>

	write_disable();
 8000816:	f7ff ff97 	bl	8000748 <write_disable>

}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <W25Q_Write_Clean>:


void W25Q_Write_Clean (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)
{
 8000822:	b590      	push	{r4, r7, lr}
 8000824:	b0d3      	sub	sp, #332	@ 0x14c
 8000826:	af00      	add	r7, sp, #0
 8000828:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 800082c:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 8000830:	6020      	str	r0, [r4, #0]
 8000832:	4608      	mov	r0, r1
 8000834:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8000838:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 800083c:	600a      	str	r2, [r1, #0]
 800083e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8000842:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800084c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8000850:	4602      	mov	r2, r0
 8000852:	801a      	strh	r2, [r3, #0]
	uint8_t tData[266];
	uint32_t startPage = page;
 8000854:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000858:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	uint32_t endPage  = startPage + ((size+offset-1)/256);
 8000862:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000866:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800086a:	881a      	ldrh	r2, [r3, #0]
 800086c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000870:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4413      	add	r3, r2
 8000878:	3b01      	subs	r3, #1
 800087a:	0a1b      	lsrs	r3, r3, #8
 800087c:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8000880:	4413      	add	r3, r2
 8000882:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	uint32_t numPages = endPage-startPage+1;
 8000886:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800088a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	3301      	adds	r3, #1
 8000892:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	uint16_t startSector  = startPage/16;
 8000896:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800089a:	091b      	lsrs	r3, r3, #4
 800089c:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
	uint16_t endSector  = endPage/16;
 80008a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80008a4:	091b      	lsrs	r3, r3, #4
 80008a6:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
	uint16_t numSectors = endSector-startSector+1;
 80008aa:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 80008ae:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	3301      	adds	r3, #1
 80008b8:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
	for (uint16_t i=0; i<numSectors; i++)
 80008bc:	2300      	movs	r3, #0
 80008be:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
 80008c2:	e00c      	b.n	80008de <W25Q_Write_Clean+0xbc>
	{
		W25Q_Erase_Sector(startSector++);
 80008c4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	f8a7 2142 	strh.w	r2, [r7, #322]	@ 0x142
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff7c 	bl	80007cc <W25Q_Erase_Sector>
	for (uint16_t i=0; i<numSectors; i++)
 80008d4:	f8b7 3140 	ldrh.w	r3, [r7, #320]	@ 0x140
 80008d8:	3301      	adds	r3, #1
 80008da:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
 80008de:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 80008e2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d3ec      	bcc.n	80008c4 <W25Q_Write_Clean+0xa2>
	}

	uint32_t dataPosition = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

	// write the data
	for (uint32_t i=0; i<numPages; i++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80008f6:	e0c0      	b.n	8000a7a <W25Q_Write_Clean+0x258>
	{
		uint32_t memAddr = (startPage*256)+offset;
 80008f8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80008fc:	021a      	lsls	r2, r3, #8
 80008fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000902:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	4413      	add	r3, r2
 800090a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		uint16_t bytesremaining  = bytestowriteFLASH(size, offset);
 800090e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000912:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8000916:	881a      	ldrh	r2, [r3, #0]
 8000918:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800091c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000920:	4611      	mov	r1, r2
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	f7ff ff25 	bl	8000772 <bytestowriteFLASH>
 8000928:	4603      	mov	r3, r0
 800092a:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
		uint32_t indx = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

		write_enable();
 8000934:	f7ff fef3 	bl	800071e <write_enable>

		if (numBLOCK<512)   // Chip Size<256Mb
		{
			tData[0] = 0x02;  // page program
 8000938:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800093c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000940:	2202      	movs	r2, #2
 8000942:	701a      	strb	r2, [r3, #0]
			tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8000944:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000948:	0c1b      	lsrs	r3, r3, #16
 800094a:	b2da      	uxtb	r2, r3
 800094c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000950:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000954:	705a      	strb	r2, [r3, #1]
			tData[2] = (memAddr>>8)&0xFF;
 8000956:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800095a:	0a1b      	lsrs	r3, r3, #8
 800095c:	b2da      	uxtb	r2, r3
 800095e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000962:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000966:	709a      	strb	r2, [r3, #2]
			tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8000968:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800096c:	b2da      	uxtb	r2, r3
 800096e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000972:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000976:	70da      	strb	r2, [r3, #3]

			indx = 4;
 8000978:	2304      	movs	r3, #4
 800097a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			tData[4] = (memAddr)&0xFF; // LSB of the memory Address

			indx = 5;
		}

		uint16_t bytestosend  = bytesremaining + indx;
 800097e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000982:	b29a      	uxth	r2, r3
 8000984:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8000988:	4413      	add	r3, r2
 800098a:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

		for (uint16_t i=0; i<bytesremaining; i++)
 800098e:	2300      	movs	r3, #0
 8000990:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 8000994:	e01a      	b.n	80009cc <W25Q_Write_Clean+0x1aa>
		{
			tData[indx++] = data[i+dataPosition];
 8000996:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 800099a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800099e:	4413      	add	r3, r2
 80009a0:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80009a4:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 80009a8:	6812      	ldr	r2, [r2, #0]
 80009aa:	441a      	add	r2, r3
 80009ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80009b0:	1c59      	adds	r1, r3, #1
 80009b2:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80009b6:	7811      	ldrb	r1, [r2, #0]
 80009b8:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80009bc:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80009c0:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i=0; i<bytesremaining; i++)
 80009c2:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 80009c6:	3301      	adds	r3, #1
 80009c8:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 80009cc:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 80009d0:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d3de      	bcc.n	8000996 <W25Q_Write_Clean+0x174>
		}

		if (bytestosend > 250)
 80009d8:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80009dc:	2bfa      	cmp	r3, #250	@ 0xfa
 80009de:	d916      	bls.n	8000a0e <W25Q_Write_Clean+0x1ec>
		{
			csLOW();
 80009e0:	f7ff fdec 	bl	80005bc <csLOW>
			SPI_Write(tData, 100);
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	2164      	movs	r1, #100	@ 0x64
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fdfe 	bl	80005ec <SPI_Write>
			SPI_Write(tData+100, bytestosend-100);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	3364      	adds	r3, #100	@ 0x64
 80009f6:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	3a64      	subs	r2, #100	@ 0x64
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fdf2 	bl	80005ec <SPI_Write>
			csHIGH();
 8000a08:	f7ff fde4 	bl	80005d4 <csHIGH>
 8000a0c:	e00c      	b.n	8000a28 <W25Q_Write_Clean+0x206>

		}

		else
		{
			csLOW();
 8000a0e:	f7ff fdd5 	bl	80005bc <csLOW>
			SPI_Write(tData, bytestosend);
 8000a12:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fde4 	bl	80005ec <SPI_Write>
			csHIGH();
 8000a24:	f7ff fdd6 	bl	80005d4 <csHIGH>
		}


		startPage++;
 8000a28:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
		offset = 0;
 8000a32:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000a36:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 8000a3e:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 8000a42:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000a46:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000a4a:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8000a4e:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8000a52:	6809      	ldr	r1, [r1, #0]
 8000a54:	1a8a      	subs	r2, r1, r2
 8000a56:	601a      	str	r2, [r3, #0]
		dataPosition = dataPosition+bytesremaining;
 8000a58:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8000a5c:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000a60:	4413      	add	r3, r2
 8000a62:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

		W25Q_Delay(5);
 8000a66:	2005      	movs	r0, #5
 8000a68:	f7ff fd9c 	bl	80005a4 <W25Q_Delay>
		write_disable();
 8000a6c:	f7ff fe6c 	bl	8000748 <write_disable>
	for (uint32_t i=0; i<numPages; i++)
 8000a70:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000a74:	3301      	adds	r3, #1
 8000a76:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8000a7a:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8000a7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000a82:	429a      	cmp	r2, r3
 8000a84:	f4ff af38 	bcc.w	80008f8 <W25Q_Write_Clean+0xd6>

	}
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd90      	pop	{r4, r7, pc}

08000a94 <W25Q_Write>:

void W25Q_Write (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000aa2:	f844 0c24 	str.w	r0, [r4, #-36]
 8000aa6:	4608      	mov	r0, r1
 8000aa8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000aac:	f841 2c2c 	str.w	r2, [r1, #-44]
 8000ab0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000ab4:	f842 3c30 	str.w	r3, [r2, #-48]
 8000ab8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000abc:	4602      	mov	r2, r0
 8000abe:	f823 2c26 	strh.w	r2, [r3, #-38]
	uint16_t startSector  = page/16;
 8000ac2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ac6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000aca:	091b      	lsrs	r3, r3, #4
 8000acc:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000ad0:	f102 020e 	add.w	r2, r2, #14
 8000ad4:	8013      	strh	r3, [r2, #0]
	uint16_t endSector  = (page + ((size+offset-1)/256))/16;
 8000ad6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ada:	f833 2c26 	ldrh.w	r2, [r3, #-38]
 8000ade:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ae2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	0a1a      	lsrs	r2, r3, #8
 8000aec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000af0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000af4:	4413      	add	r3, r2
 8000af6:	091b      	lsrs	r3, r3, #4
 8000af8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000afc:	f102 021e 	add.w	r2, r2, #30
 8000b00:	8013      	strh	r3, [r2, #0]
	uint16_t numSectors = endSector-startSector+1;
 8000b02:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000b06:	f103 031e 	add.w	r3, r3, #30
 8000b0a:	881a      	ldrh	r2, [r3, #0]
 8000b0c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000b10:	f103 030e 	add.w	r3, r3, #14
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000b20:	f102 021c 	add.w	r2, r2, #28
 8000b24:	8013      	strh	r3, [r2, #0]

	uint8_t previousData[4096];
	uint32_t sectorOffset = ((page%16)*256)+offset;
 8000b26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b2a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	021a      	lsls	r2, r3, #8
 8000b34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b38:	f833 3c26 	ldrh.w	r3, [r3, #-38]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000b42:	f102 0208 	add.w	r2, r2, #8
 8000b46:	6013      	str	r3, [r2, #0]
	uint32_t dataindx = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000b4e:	f102 0204 	add.w	r2, r2, #4
 8000b52:	6013      	str	r3, [r2, #0]

	for (uint16_t i=0; i<numSectors; i++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000b5a:	f102 0202 	add.w	r2, r2, #2
 8000b5e:	8013      	strh	r3, [r2, #0]
 8000b60:	e0a5      	b.n	8000cae <W25Q_Write+0x21a>
	{
		uint32_t startPage = startSector*16;
 8000b62:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000b66:	f103 030e 	add.w	r3, r3, #14
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	011b      	lsls	r3, r3, #4
 8000b6e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000b72:	f102 0218 	add.w	r2, r2, #24
 8000b76:	6013      	str	r3, [r2, #0]
		W25Q_FastRead(startPage, 0, 4096, previousData);
 8000b78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b7c:	3b1c      	subs	r3, #28
 8000b7e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b82:	2100      	movs	r1, #0
 8000b84:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8000b88:	f100 0018 	add.w	r0, r0, #24
 8000b8c:	6800      	ldr	r0, [r0, #0]
 8000b8e:	f7ff fd98 	bl	80006c2 <W25Q_FastRead>

		uint16_t bytesRemaining = bytestomodify(size, sectorOffset);
 8000b92:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000b96:	f103 0308 	add.w	r3, r3, #8
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f852 0c2c 	ldr.w	r0, [r2, #-44]
 8000ba8:	f7ff fdf9 	bl	800079e <bytestomodify>
 8000bac:	4603      	mov	r3, r0
 8000bae:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000bb2:	f102 0216 	add.w	r2, r2, #22
 8000bb6:	8013      	strh	r3, [r2, #0]
		for (uint16_t i=0; i<bytesRemaining; i++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000bbe:	8013      	strh	r3, [r2, #0]
 8000bc0:	e023      	b.n	8000c0a <W25Q_Write+0x176>
		{
			previousData[i+sectorOffset] = data[i+dataindx];
 8000bc2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000bc6:	881a      	ldrh	r2, [r3, #0]
 8000bc8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000bcc:	f103 0304 	add.w	r3, r3, #4
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000bd8:	f852 2c30 	ldr.w	r2, [r2, #-48]
 8000bdc:	441a      	add	r2, r3
 8000bde:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000be2:	8819      	ldrh	r1, [r3, #0]
 8000be4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000be8:	f103 0308 	add.w	r3, r3, #8
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	440b      	add	r3, r1
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for (uint16_t i=0; i<bytesRemaining; i++)
 8000bfc:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000c08:	8013      	strh	r3, [r2, #0]
 8000c0a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000c0e:	881a      	ldrh	r2, [r3, #0]
 8000c10:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c14:	f103 0316 	add.w	r3, r3, #22
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d3d1      	bcc.n	8000bc2 <W25Q_Write+0x12e>
		}

		W25Q_Write_Clean(startPage, 0, 4096, previousData);
 8000c1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c22:	3b1c      	subs	r3, #28
 8000c24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c28:	2100      	movs	r1, #0
 8000c2a:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8000c2e:	f100 0018 	add.w	r0, r0, #24
 8000c32:	6800      	ldr	r0, [r0, #0]
 8000c34:	f7ff fdf5 	bl	8000822 <W25Q_Write_Clean>

		startSector++;
 8000c38:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000c3c:	f103 030e 	add.w	r3, r3, #14
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	3301      	adds	r3, #1
 8000c44:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000c48:	f102 020e 	add.w	r2, r2, #14
 8000c4c:	8013      	strh	r3, [r2, #0]
		sectorOffset = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000c54:	f102 0208 	add.w	r2, r2, #8
 8000c58:	6013      	str	r3, [r2, #0]
		dataindx = dataindx+bytesRemaining;
 8000c5a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c5e:	f103 0316 	add.w	r3, r3, #22
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000c68:	f102 0204 	add.w	r2, r2, #4
 8000c6c:	6812      	ldr	r2, [r2, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000c74:	f102 0204 	add.w	r2, r2, #4
 8000c78:	6013      	str	r3, [r2, #0]
		size = size-bytesRemaining;
 8000c7a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c7e:	f103 0316 	add.w	r3, r3, #22
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000c88:	4611      	mov	r1, r2
 8000c8a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000c8e:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	f841 3c2c 	str.w	r3, [r1, #-44]
	for (uint16_t i=0; i<numSectors; i++)
 8000c98:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000c9c:	f103 0302 	add.w	r3, r3, #2
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000ca8:	f102 0202 	add.w	r2, r2, #2
 8000cac:	8013      	strh	r3, [r2, #0]
 8000cae:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000cb2:	f103 0302 	add.w	r3, r3, #2
 8000cb6:	881a      	ldrh	r2, [r3, #0]
 8000cb8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cbc:	f103 031c 	add.w	r3, r3, #28
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	f4ff af4d 	bcc.w	8000b62 <W25Q_Write+0xce>
	}
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd90      	pop	{r4, r7, pc}
	...

08000cd8 <log_generic>:
    // Move cursor up and clear the entire line
    printf("\033[A\033[2K\r");
}

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b0c7      	sub	sp, #284	@ 0x11c
 8000cdc:	af02      	add	r7, sp, #8
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000ce4:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8000ce8:	6001      	str	r1, [r0, #0]
 8000cea:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000cee:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000cf2:	600a      	str	r2, [r1, #0]
 8000cf4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000cf8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d02:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000d06:	4622      	mov	r2, r4
 8000d08:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 8000d0a:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <log_generic+0x8c>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000d12:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 8000d16:	7812      	ldrb	r2, [r2, #0]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d31e      	bcc.n	8000d5a <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000d1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d20:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8000d24:	f107 0010 	add.w	r0, r7, #16
 8000d28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d2c:	6812      	ldr	r2, [r2, #0]
 8000d2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d32:	f011 fccf 	bl	80126d4 <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 8000d36:	f107 0310 	add.w	r3, r7, #16
 8000d3a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000d3e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000d42:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000d46:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000d4a:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <log_generic+0x90>)
 8000d4c:	9000      	str	r0, [sp, #0]
 8000d4e:	6812      	ldr	r2, [r2, #0]
 8000d50:	6809      	ldr	r1, [r1, #0]
 8000d52:	4806      	ldr	r0, [pc, #24]	@ (8000d6c <log_generic+0x94>)
 8000d54:	f011 fc0a 	bl	801256c <iprintf>
 8000d58:	e000      	b.n	8000d5c <log_generic+0x84>
        return;
 8000d5a:	bf00      	nop
}
 8000d5c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd90      	pop	{r4, r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	08013584 	.word	0x08013584
 8000d6c:	08013574 	.word	0x08013574

08000d70 <log_info>:
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
    va_end(args);
}

void log_info(const char *fmt, ...)
{
 8000d70:	b40f      	push	{r0, r1, r2, r3}
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <log_info+0x2c>)
 8000d86:	4906      	ldr	r1, [pc, #24]	@ (8000da0 <log_info+0x30>)
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff ffa5 	bl	8000cd8 <log_generic>
    va_end(args);
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr
 8000d9c:	0801359c 	.word	0x0801359c
 8000da0:	080135a4 	.word	0x080135a4

08000da4 <log_error>:
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
    va_end(args);
}

void log_error(const char *fmt, ...)
{
 8000da4:	b40f      	push	{r0, r1, r2, r3}
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <log_error+0x2c>)
 8000dba:	4906      	ldr	r1, [pc, #24]	@ (8000dd4 <log_error+0x30>)
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f7ff ff8b 	bl	8000cd8 <log_generic>
    va_end(args);
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dcc:	b004      	add	sp, #16
 8000dce:	4770      	bx	lr
 8000dd0:	080135bc 	.word	0x080135bc
 8000dd4:	080135c4 	.word	0x080135c4

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0ae      	sub	sp, #184	@ 0xb8
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t data[100] = {0};
 8000dde:	2300      	movs	r3, #0
 8000de0:	657b      	str	r3, [r7, #84]	@ 0x54
 8000de2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000de6:	2260      	movs	r2, #96	@ 0x60
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f011 fc80 	bl	80126f0 <memset>
  uint8_t msg[] = "WELL, IT JUST SO HAPPENS THAT WE ARE EXPERTS AT EXTERMINATING SHITBAG SUPES.";
 8000df0:	4a90      	ldr	r2, [pc, #576]	@ (8001034 <main+0x25c>)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4611      	mov	r1, r2
 8000df6:	224d      	movs	r2, #77	@ 0x4d
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f011 fd04 	bl	8012806 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfe:	f001 fcb3 	bl	8002768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e02:	f000 f923 	bl	800104c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e06:	f000 fbf3 	bl	80015f0 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000e0a:	f000 fb8f 	bl	800152c <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8000e0e:	f000 faf5 	bl	80013fc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e12:	f000 f9c5 	bl	80011a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e16:	f000 fa9b 	bl	8001350 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000e1a:	f000 fb3b 	bl	8001494 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000e1e:	f000 fa15 	bl	800124c <MX_RTC_Init>
  MX_RNG_Init();
 8000e22:	f000 f9fd 	bl	8001220 <MX_RNG_Init>
  MX_HASH_Init();
 8000e26:	f000 f999 	bl	800115c <MX_HASH_Init>
  MX_FLASH_Init();
 8000e2a:	f000 f985 	bl	8001138 <MX_FLASH_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 8000e2e:	bf00      	nop
 8000e30:	4b81      	ldr	r3, [pc, #516]	@ (8001038 <main+0x260>)
 8000e32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0fa      	beq.n	8000e30 <main+0x58>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f001 fa7a 	bl	8002334 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f001 fa77 	bl	8002334 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000e46:	2002      	movs	r0, #2
 8000e48:	f001 fa74 	bl	8002334 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f001 fb10 	bl	8002474 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000e54:	4b79      	ldr	r3, [pc, #484]	@ (800103c <main+0x264>)
 8000e56:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e5a:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000e5c:	4b77      	ldr	r3, [pc, #476]	@ (800103c <main+0x264>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000e62:	4b76      	ldr	r3, [pc, #472]	@ (800103c <main+0x264>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000e68:	4b74      	ldr	r3, [pc, #464]	@ (800103c <main+0x264>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000e6e:	4b73      	ldr	r3, [pc, #460]	@ (800103c <main+0x264>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000e74:	4971      	ldr	r1, [pc, #452]	@ (800103c <main+0x264>)
 8000e76:	2000      	movs	r0, #0
 8000e78:	f001 fb96 	bl	80025a8 <BSP_COM_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <main+0xae>
  {
    Error_Handler();
 8000e82:	f000 fcd9 	bl	8001838 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // HSMManager_Init();

  // HSMManager_ProcessCommand();
  W25Q_Reset();
 8000e86:	f7ff fbd9 	bl	800063c <W25Q_Reset>
  W25Q_Write(0, 0, sizeof(msg), msg);
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	224d      	movs	r2, #77	@ 0x4d
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff fdff 	bl	8000a94 <W25Q_Write>
  log_info("Turning LED ON.");
 8000e96:	486a      	ldr	r0, [pc, #424]	@ (8001040 <main+0x268>)
 8000e98:	f7ff ff6a 	bl	8000d70 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f001 fabf 	bl	8002420 <BSP_LED_Toggle>
 8000ea2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ea6:	f001 fd1d 	bl	80028e4 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f001 fab8 	bl	8002420 <BSP_LED_Toggle>
 8000eb0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eb4:	f001 fd16 	bl	80028e4 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f001 fab1 	bl	8002420 <BSP_LED_Toggle>
 8000ebe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ec2:	f001 fd0f 	bl	80028e4 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000ec6:	485f      	ldr	r0, [pc, #380]	@ (8001044 <main+0x26c>)
 8000ec8:	f7ff ff52 	bl	8000d70 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f001 faa7 	bl	8002420 <BSP_LED_Toggle>
 8000ed2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ed6:	f001 fd05 	bl	80028e4 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000eda:	2002      	movs	r0, #2
 8000edc:	f001 faa0 	bl	8002420 <BSP_LED_Toggle>
 8000ee0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ee4:	f001 fcfe 	bl	80028e4 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f001 fa99 	bl	8002420 <BSP_LED_Toggle>
 8000eee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ef2:	f001 fcf7 	bl	80028e4 <HAL_Delay>
  log_info("Turning LED ON.");
 8000ef6:	4852      	ldr	r0, [pc, #328]	@ (8001040 <main+0x268>)
 8000ef8:	f7ff ff3a 	bl	8000d70 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f001 fa8f 	bl	8002420 <BSP_LED_Toggle>
 8000f02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f06:	f001 fced 	bl	80028e4 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	f001 fa88 	bl	8002420 <BSP_LED_Toggle>
 8000f10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f14:	f001 fce6 	bl	80028e4 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f001 fa81 	bl	8002420 <BSP_LED_Toggle>
 8000f1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f22:	f001 fcdf 	bl	80028e4 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000f26:	4847      	ldr	r0, [pc, #284]	@ (8001044 <main+0x26c>)
 8000f28:	f7ff ff22 	bl	8000d70 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f001 fa77 	bl	8002420 <BSP_LED_Toggle>
 8000f32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f36:	f001 fcd5 	bl	80028e4 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f001 fa70 	bl	8002420 <BSP_LED_Toggle>
 8000f40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f44:	f001 fcce 	bl	80028e4 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f001 fa69 	bl	8002420 <BSP_LED_Toggle>
 8000f4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f52:	f001 fcc7 	bl	80028e4 <HAL_Delay>
  W25Q_Read(0, 0, sizeof(msg), data);
 8000f56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f5a:	224d      	movs	r2, #77	@ 0x4d
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff fb83 	bl	800066a <W25Q_Read>
  log_info("Turning LED ON.");
 8000f64:	4836      	ldr	r0, [pc, #216]	@ (8001040 <main+0x268>)
 8000f66:	f7ff ff03 	bl	8000d70 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f001 fa58 	bl	8002420 <BSP_LED_Toggle>
 8000f70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f74:	f001 fcb6 	bl	80028e4 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f001 fa51 	bl	8002420 <BSP_LED_Toggle>
 8000f7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f82:	f001 fcaf 	bl	80028e4 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f001 fa4a 	bl	8002420 <BSP_LED_Toggle>
 8000f8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f90:	f001 fca8 	bl	80028e4 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000f94:	482b      	ldr	r0, [pc, #172]	@ (8001044 <main+0x26c>)
 8000f96:	f7ff feeb 	bl	8000d70 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f001 fa40 	bl	8002420 <BSP_LED_Toggle>
 8000fa0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa4:	f001 fc9e 	bl	80028e4 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000fa8:	2002      	movs	r0, #2
 8000faa:	f001 fa39 	bl	8002420 <BSP_LED_Toggle>
 8000fae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fb2:	f001 fc97 	bl	80028e4 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f001 fa32 	bl	8002420 <BSP_LED_Toggle>
 8000fbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fc0:	f001 fc90 	bl	80028e4 <HAL_Delay>
  log_info("Turning LED ON.");
 8000fc4:	481e      	ldr	r0, [pc, #120]	@ (8001040 <main+0x268>)
 8000fc6:	f7ff fed3 	bl	8000d70 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f001 fa28 	bl	8002420 <BSP_LED_Toggle>
 8000fd0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fd4:	f001 fc86 	bl	80028e4 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f001 fa21 	bl	8002420 <BSP_LED_Toggle>
 8000fde:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fe2:	f001 fc7f 	bl	80028e4 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f001 fa1a 	bl	8002420 <BSP_LED_Toggle>
 8000fec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ff0:	f001 fc78 	bl	80028e4 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000ff4:	4813      	ldr	r0, [pc, #76]	@ (8001044 <main+0x26c>)
 8000ff6:	f7ff febb 	bl	8000d70 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f001 fa10 	bl	8002420 <BSP_LED_Toggle>
 8001000:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001004:	f001 fc6e 	bl	80028e4 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8001008:	2002      	movs	r0, #2
 800100a:	f001 fa09 	bl	8002420 <BSP_LED_Toggle>
 800100e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001012:	f001 fc67 	bl	80028e4 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8001016:	2001      	movs	r0, #1
 8001018:	f001 fa02 	bl	8002420 <BSP_LED_Toggle>
 800101c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001020:	f001 fc60 	bl	80028e4 <HAL_Delay>
  printf("\n\n\r%s", data);
 8001024:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001028:	4619      	mov	r1, r3
 800102a:	4807      	ldr	r0, [pc, #28]	@ (8001048 <main+0x270>)
 800102c:	f011 fa9e 	bl	801256c <iprintf>

  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <main+0x258>
 8001034:	080135f8 	.word	0x080135f8
 8001038:	20000720 	.word	0x20000720
 800103c:	2000019c 	.word	0x2000019c
 8001040:	080135cc 	.word	0x080135cc
 8001044:	080135dc 	.word	0x080135dc
 8001048:	080135f0 	.word	0x080135f0

0800104c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b09c      	sub	sp, #112	@ 0x70
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 0320 	add.w	r3, r7, #32
 8001056:	2250      	movs	r2, #80	@ 0x50
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f011 fb48 	bl	80126f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001072:	4b2f      	ldr	r3, [pc, #188]	@ (8001130 <SystemClock_Config+0xe4>)
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	4a2e      	ldr	r2, [pc, #184]	@ (8001130 <SystemClock_Config+0xe4>)
 8001078:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800107c:	6113      	str	r3, [r2, #16]
 800107e:	4b2c      	ldr	r3, [pc, #176]	@ (8001130 <SystemClock_Config+0xe4>)
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800108a:	bf00      	nop
 800108c:	4b28      	ldr	r3, [pc, #160]	@ (8001130 <SystemClock_Config+0xe4>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	2b08      	cmp	r3, #8
 8001096:	d1f9      	bne.n	800108c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8001098:	2329      	movs	r3, #41	@ 0x29
 800109a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800109c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010a2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80010a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ae:	2302      	movs	r3, #2
 80010b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80010b2:	2303      	movs	r3, #3
 80010b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010b6:	2304      	movs	r3, #4
 80010b8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80010ba:	23fa      	movs	r3, #250	@ 0xfa
 80010bc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010be:	2302      	movs	r3, #2
 80010c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80010ca:	2304      	movs	r3, #4
 80010cc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d6:	f107 0320 	add.w	r3, r7, #32
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 fd34 	bl	8005b48 <HAL_RCC_OscConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010e6:	f000 fba7 	bl	8001838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ea:	231f      	movs	r3, #31
 80010ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ee:	2303      	movs	r3, #3
 80010f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	2105      	movs	r1, #5
 8001108:	4618      	mov	r0, r3
 800110a:	f005 f955 	bl	80063b8 <HAL_RCC_ClockConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001114:	f000 fb90 	bl	8001838 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <SystemClock_Config+0xe8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001120:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <SystemClock_Config+0xe8>)
 8001122:	f043 0320 	orr.w	r3, r3, #32
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	3770      	adds	r7, #112	@ 0x70
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	44020800 	.word	0x44020800
 8001134:	40022000 	.word	0x40022000

08001138 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 800113c:	f001 fe0e 	bl	8002d5c <HAL_FLASH_Unlock>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 8001146:	f000 fb77 	bl	8001838 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 800114a:	f001 fe2d 	bl	8002da8 <HAL_FLASH_Lock>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 8001154:	f000 fb70 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <MX_HASH_Init+0x38>)
 8001162:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <MX_HASH_Init+0x3c>)
 8001164:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_BYTE_SWAP;
 8001166:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <MX_HASH_Init+0x38>)
 8001168:	2220      	movs	r2, #32
 800116a:	605a      	str	r2, [r3, #4]
  hhash.Init.KeySize = 1;
 800116c:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <MX_HASH_Init+0x38>)
 800116e:	2201      	movs	r2, #1
 8001170:	609a      	str	r2, [r3, #8]
  hhash.Init.pKey = (uint8_t *)pKeyHASH;
 8001172:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <MX_HASH_Init+0x38>)
 8001174:	4a09      	ldr	r2, [pc, #36]	@ (800119c <MX_HASH_Init+0x40>)
 8001176:	60da      	str	r2, [r3, #12]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA256;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <MX_HASH_Init+0x38>)
 800117a:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 800117e:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <MX_HASH_Init+0x38>)
 8001182:	f001 ffb1 	bl	80030e8 <HAL_HASH_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_HASH_Init+0x34>
  {
    Error_Handler();
 800118c:	f000 fb54 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200001ac 	.word	0x200001ac
 8001198:	420c0400 	.word	0x420c0400
 800119c:	080136f8 	.word	0x080136f8

080011a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001218 <MX_I2C1_Init+0x78>)
 80011a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011ac:	4a1b      	ldr	r2, [pc, #108]	@ (800121c <MX_I2C1_Init+0x7c>)
 80011ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011b0:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011bc:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011c2:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011c8:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ce:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011da:	480e      	ldr	r0, [pc, #56]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011dc:	f002 fe7e 	bl	8003edc <HAL_I2C_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011e6:	f000 fb27 	bl	8001838 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ea:	2100      	movs	r1, #0
 80011ec:	4809      	ldr	r0, [pc, #36]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011ee:	f002 ff10 	bl	8004012 <HAL_I2CEx_ConfigAnalogFilter>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011f8:	f000 fb1e 	bl	8001838 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011fc:	2100      	movs	r1, #0
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <MX_I2C1_Init+0x74>)
 8001200:	f002 ff52 	bl	80040a8 <HAL_I2CEx_ConfigDigitalFilter>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800120a:	f000 fb15 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200001ec 	.word	0x200001ec
 8001218:	40005400 	.word	0x40005400
 800121c:	10c043e5 	.word	0x10c043e5

08001220 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001224:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <MX_RNG_Init+0x24>)
 8001226:	4a08      	ldr	r2, [pc, #32]	@ (8001248 <MX_RNG_Init+0x28>)
 8001228:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <MX_RNG_Init+0x24>)
 800122c:	2200      	movs	r2, #0
 800122e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001230:	4804      	ldr	r0, [pc, #16]	@ (8001244 <MX_RNG_Init+0x24>)
 8001232:	f00a fc5b 	bl	800baec <HAL_RNG_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800123c:	f000 fafc 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000240 	.word	0x20000240
 8001248:	420c0800 	.word	0x420c0800

0800124c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	@ 0x38
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800127a:	4b33      	ldr	r3, [pc, #204]	@ (8001348 <MX_RTC_Init+0xfc>)
 800127c:	4a33      	ldr	r2, [pc, #204]	@ (800134c <MX_RTC_Init+0x100>)
 800127e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001280:	4b31      	ldr	r3, [pc, #196]	@ (8001348 <MX_RTC_Init+0xfc>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001286:	4b30      	ldr	r3, [pc, #192]	@ (8001348 <MX_RTC_Init+0xfc>)
 8001288:	227f      	movs	r2, #127	@ 0x7f
 800128a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800128c:	4b2e      	ldr	r3, [pc, #184]	@ (8001348 <MX_RTC_Init+0xfc>)
 800128e:	22ff      	movs	r2, #255	@ 0xff
 8001290:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001292:	4b2d      	ldr	r3, [pc, #180]	@ (8001348 <MX_RTC_Init+0xfc>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001298:	4b2b      	ldr	r3, [pc, #172]	@ (8001348 <MX_RTC_Init+0xfc>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800129e:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <MX_RTC_Init+0xfc>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012a4:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <MX_RTC_Init+0xfc>)
 80012a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012aa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80012ac:	4b26      	ldr	r3, [pc, #152]	@ (8001348 <MX_RTC_Init+0xfc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80012b2:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <MX_RTC_Init+0xfc>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012b8:	4823      	ldr	r0, [pc, #140]	@ (8001348 <MX_RTC_Init+0xfc>)
 80012ba:	f00a fcb5 	bl	800bc28 <HAL_RTC_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80012c4:	f000 fab8 	bl	8001838 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	481a      	ldr	r0, [pc, #104]	@ (8001348 <MX_RTC_Init+0xfc>)
 80012e0:	f00a ff08 	bl	800c0f4 <HAL_RTCEx_PrivilegeModeSet>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80012ea:	f000 faa5 	bl	8001838 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	2201      	movs	r2, #1
 8001308:	4619      	mov	r1, r3
 800130a:	480f      	ldr	r0, [pc, #60]	@ (8001348 <MX_RTC_Init+0xfc>)
 800130c:	f00a fd0e 	bl	800bd2c <HAL_RTC_SetTime>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001316:	f000 fa8f 	bl	8001838 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800131a:	2301      	movs	r3, #1
 800131c:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 800131e:	2301      	movs	r3, #1
 8001320:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8001322:	2301      	movs	r3, #1
 8001324:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001326:	2300      	movs	r3, #0
 8001328:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2201      	movs	r2, #1
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_RTC_Init+0xfc>)
 8001332:	f00a fd8d 	bl	800be50 <HAL_RTC_SetDate>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 800133c:	f000 fa7c 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3738      	adds	r7, #56	@ 0x38
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000254 	.word	0x20000254
 800134c:	44007800 	.word	0x44007800

08001350 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001354:	4b27      	ldr	r3, [pc, #156]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 8001356:	4a28      	ldr	r2, [pc, #160]	@ (80013f8 <MX_SPI1_Init+0xa8>)
 8001358:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800135a:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 800135c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001360:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001362:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001368:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 800136a:	2207      	movs	r2, #7
 800136c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800136e:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001374:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800137a:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 800137c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001380:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001382:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 8001384:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001388:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800138a:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001390:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001396:	4b17      	ldr	r3, [pc, #92]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 8001398:	2200      	movs	r2, #0
 800139a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800139c:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 800139e:	2207      	movs	r2, #7
 80013a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013a2:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013aa:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013b0:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013b6:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013bc:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013c2:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013c8:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80013d4:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013e0:	4804      	ldr	r0, [pc, #16]	@ (80013f4 <MX_SPI1_Init+0xa4>)
 80013e2:	f00a feb5 	bl	800c150 <HAL_SPI_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80013ec:	f000 fa24 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000284 	.word	0x20000284
 80013f8:	40013000 	.word	0x40013000

080013fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001400:	4b22      	ldr	r3, [pc, #136]	@ (800148c <MX_USART2_UART_Init+0x90>)
 8001402:	4a23      	ldr	r2, [pc, #140]	@ (8001490 <MX_USART2_UART_Init+0x94>)
 8001404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001406:	4b21      	ldr	r3, [pc, #132]	@ (800148c <MX_USART2_UART_Init+0x90>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800140c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b1f      	ldr	r3, [pc, #124]	@ (800148c <MX_USART2_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <MX_USART2_UART_Init+0x90>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141a:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <MX_USART2_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <MX_USART2_UART_Init+0x90>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b19      	ldr	r3, [pc, #100]	@ (800148c <MX_USART2_UART_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b17      	ldr	r3, [pc, #92]	@ (800148c <MX_USART2_UART_Init+0x90>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001432:	4b16      	ldr	r3, [pc, #88]	@ (800148c <MX_USART2_UART_Init+0x90>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <MX_USART2_UART_Init+0x90>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800143e:	4b13      	ldr	r3, [pc, #76]	@ (800148c <MX_USART2_UART_Init+0x90>)
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001444:	4811      	ldr	r0, [pc, #68]	@ (800148c <MX_USART2_UART_Init+0x90>)
 8001446:	f00b fdd2 	bl	800cfee <HAL_UART_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001450:	f000 f9f2 	bl	8001838 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001454:	2100      	movs	r1, #0
 8001456:	480d      	ldr	r0, [pc, #52]	@ (800148c <MX_USART2_UART_Init+0x90>)
 8001458:	f00c fafe 	bl	800da58 <HAL_UARTEx_SetTxFifoThreshold>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001462:	f000 f9e9 	bl	8001838 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001466:	2100      	movs	r1, #0
 8001468:	4808      	ldr	r0, [pc, #32]	@ (800148c <MX_USART2_UART_Init+0x90>)
 800146a:	f00c fb33 	bl	800dad4 <HAL_UARTEx_SetRxFifoThreshold>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001474:	f000 f9e0 	bl	8001838 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	@ (800148c <MX_USART2_UART_Init+0x90>)
 800147a:	f00c fab4 	bl	800d9e6 <HAL_UARTEx_DisableFifoMode>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001484:	f000 f9d8 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000314 	.word	0x20000314
 8001490:	40004400 	.word	0x40004400

08001494 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001498:	4b22      	ldr	r3, [pc, #136]	@ (8001524 <MX_USART6_UART_Init+0x90>)
 800149a:	4a23      	ldr	r2, [pc, #140]	@ (8001528 <MX_USART6_UART_Init+0x94>)
 800149c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800149e:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <MX_USART6_UART_Init+0x90>)
 80014a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <MX_USART6_UART_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001524 <MX_USART6_UART_Init+0x90>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <MX_USART6_UART_Init+0x90>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <MX_USART6_UART_Init+0x90>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <MX_USART6_UART_Init+0x90>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <MX_USART6_UART_Init+0x90>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ca:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <MX_USART6_UART_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014d0:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <MX_USART6_UART_Init+0x90>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d6:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <MX_USART6_UART_Init+0x90>)
 80014d8:	2200      	movs	r2, #0
 80014da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014dc:	4811      	ldr	r0, [pc, #68]	@ (8001524 <MX_USART6_UART_Init+0x90>)
 80014de:	f00b fd86 	bl	800cfee <HAL_UART_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80014e8:	f000 f9a6 	bl	8001838 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ec:	2100      	movs	r1, #0
 80014ee:	480d      	ldr	r0, [pc, #52]	@ (8001524 <MX_USART6_UART_Init+0x90>)
 80014f0:	f00c fab2 	bl	800da58 <HAL_UARTEx_SetTxFifoThreshold>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80014fa:	f000 f99d 	bl	8001838 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fe:	2100      	movs	r1, #0
 8001500:	4808      	ldr	r0, [pc, #32]	@ (8001524 <MX_USART6_UART_Init+0x90>)
 8001502:	f00c fae7 	bl	800dad4 <HAL_UARTEx_SetRxFifoThreshold>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800150c:	f000 f994 	bl	8001838 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001510:	4804      	ldr	r0, [pc, #16]	@ (8001524 <MX_USART6_UART_Init+0x90>)
 8001512:	f00c fa68 	bl	800d9e6 <HAL_UARTEx_DisableFifoMode>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800151c:	f000 f98c 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	200003a8 	.word	0x200003a8
 8001528:	40006400 	.word	0x40006400

0800152c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8001530:	4b29      	ldr	r3, [pc, #164]	@ (80015d8 <MX_USB_PCD_Init+0xac>)
 8001532:	4a2a      	ldr	r2, [pc, #168]	@ (80015dc <MX_USB_PCD_Init+0xb0>)
 8001534:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001538:	4b27      	ldr	r3, [pc, #156]	@ (80015d8 <MX_USB_PCD_Init+0xac>)
 800153a:	4a29      	ldr	r2, [pc, #164]	@ (80015e0 <MX_USB_PCD_Init+0xb4>)
 800153c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800153e:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <MX_USB_PCD_Init+0xac>)
 8001540:	2208      	movs	r2, #8
 8001542:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8001544:	4b24      	ldr	r3, [pc, #144]	@ (80015d8 <MX_USB_PCD_Init+0xac>)
 8001546:	2202      	movs	r2, #2
 8001548:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800154a:	4b23      	ldr	r3, [pc, #140]	@ (80015d8 <MX_USB_PCD_Init+0xac>)
 800154c:	2202      	movs	r2, #2
 800154e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8001550:	4b21      	ldr	r3, [pc, #132]	@ (80015d8 <MX_USB_PCD_Init+0xac>)
 8001552:	2200      	movs	r2, #0
 8001554:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8001556:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <MX_USB_PCD_Init+0xac>)
 8001558:	2200      	movs	r2, #0
 800155a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800155c:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <MX_USB_PCD_Init+0xac>)
 800155e:	2200      	movs	r2, #0
 8001560:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8001562:	4b1d      	ldr	r3, [pc, #116]	@ (80015d8 <MX_USB_PCD_Init+0xac>)
 8001564:	2200      	movs	r2, #0
 8001566:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <MX_USB_PCD_Init+0xac>)
 800156a:	2200      	movs	r2, #0
 800156c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800156e:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <MX_USB_PCD_Init+0xac>)
 8001570:	2200      	movs	r2, #0
 8001572:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8001574:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <MX_USB_PCD_Init+0xac>)
 8001576:	2200      	movs	r2, #0
 8001578:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800157a:	4817      	ldr	r0, [pc, #92]	@ (80015d8 <MX_USB_PCD_Init+0xac>)
 800157c:	f002 fe43 	bl	8004206 <HAL_PCD_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8001586:	f000 f957 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 800158a:	2200      	movs	r2, #0
 800158c:	4915      	ldr	r1, [pc, #84]	@ (80015e4 <MX_USB_PCD_Init+0xb8>)
 800158e:	4813      	ldr	r0, [pc, #76]	@ (80015dc <MX_USB_PCD_Init+0xb0>)
 8001590:	f00f fb3e 	bl	8010c10 <USBD_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USB_PCD_Init+0x72>
        Error_Handler();
 800159a:	f000 f94d 	bl	8001838 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800159e:	4912      	ldr	r1, [pc, #72]	@ (80015e8 <MX_USB_PCD_Init+0xbc>)
 80015a0:	480e      	ldr	r0, [pc, #56]	@ (80015dc <MX_USB_PCD_Init+0xb0>)
 80015a2:	f00f fb65 	bl	8010c70 <USBD_RegisterClass>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 80015ac:	f000 f944 	bl	8001838 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 80015b0:	490e      	ldr	r1, [pc, #56]	@ (80015ec <MX_USB_PCD_Init+0xc0>)
 80015b2:	480a      	ldr	r0, [pc, #40]	@ (80015dc <MX_USB_PCD_Init+0xb0>)
 80015b4:	f00e feee 	bl	8010394 <USBD_CDC_RegisterInterface>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USB_PCD_Init+0x96>
        Error_Handler();
 80015be:	f000 f93b 	bl	8001838 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80015c2:	4806      	ldr	r0, [pc, #24]	@ (80015dc <MX_USB_PCD_Init+0xb0>)
 80015c4:	f00f fb8a 	bl	8010cdc <USBD_Start>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 80015ce:	f000 f933 	bl	8001838 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000043c 	.word	0x2000043c
 80015dc:	20000720 	.word	0x20000720
 80015e0:	40016000 	.word	0x40016000
 80015e4:	200000d4 	.word	0x200000d4
 80015e8:	20000038 	.word	0x20000038
 80015ec:	200000b8 	.word	0x200000b8

080015f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	@ 0x30
 80015f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001606:	4b85      	ldr	r3, [pc, #532]	@ (800181c <MX_GPIO_Init+0x22c>)
 8001608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800160c:	4a83      	ldr	r2, [pc, #524]	@ (800181c <MX_GPIO_Init+0x22c>)
 800160e:	f043 0310 	orr.w	r3, r3, #16
 8001612:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001616:	4b81      	ldr	r3, [pc, #516]	@ (800181c <MX_GPIO_Init+0x22c>)
 8001618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001624:	4b7d      	ldr	r3, [pc, #500]	@ (800181c <MX_GPIO_Init+0x22c>)
 8001626:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800162a:	4a7c      	ldr	r2, [pc, #496]	@ (800181c <MX_GPIO_Init+0x22c>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001634:	4b79      	ldr	r3, [pc, #484]	@ (800181c <MX_GPIO_Init+0x22c>)
 8001636:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001642:	4b76      	ldr	r3, [pc, #472]	@ (800181c <MX_GPIO_Init+0x22c>)
 8001644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001648:	4a74      	ldr	r2, [pc, #464]	@ (800181c <MX_GPIO_Init+0x22c>)
 800164a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800164e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001652:	4b72      	ldr	r3, [pc, #456]	@ (800181c <MX_GPIO_Init+0x22c>)
 8001654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	4b6e      	ldr	r3, [pc, #440]	@ (800181c <MX_GPIO_Init+0x22c>)
 8001662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001666:	4a6d      	ldr	r2, [pc, #436]	@ (800181c <MX_GPIO_Init+0x22c>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001670:	4b6a      	ldr	r3, [pc, #424]	@ (800181c <MX_GPIO_Init+0x22c>)
 8001672:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	4b67      	ldr	r3, [pc, #412]	@ (800181c <MX_GPIO_Init+0x22c>)
 8001680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001684:	4a65      	ldr	r2, [pc, #404]	@ (800181c <MX_GPIO_Init+0x22c>)
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800168e:	4b63      	ldr	r3, [pc, #396]	@ (800181c <MX_GPIO_Init+0x22c>)
 8001690:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169c:	4b5f      	ldr	r3, [pc, #380]	@ (800181c <MX_GPIO_Init+0x22c>)
 800169e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016a2:	4a5e      	ldr	r2, [pc, #376]	@ (800181c <MX_GPIO_Init+0x22c>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016ac:	4b5b      	ldr	r3, [pc, #364]	@ (800181c <MX_GPIO_Init+0x22c>)
 80016ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ba:	4b58      	ldr	r3, [pc, #352]	@ (800181c <MX_GPIO_Init+0x22c>)
 80016bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016c0:	4a56      	ldr	r2, [pc, #344]	@ (800181c <MX_GPIO_Init+0x22c>)
 80016c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016ca:	4b54      	ldr	r3, [pc, #336]	@ (800181c <MX_GPIO_Init+0x22c>)
 80016cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016de:	4850      	ldr	r0, [pc, #320]	@ (8001820 <MX_GPIO_Init+0x230>)
 80016e0:	f001 fcd0 	bl	8003084 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016e4:	2332      	movs	r3, #50	@ 0x32
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f0:	2302      	movs	r3, #2
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016f4:	230b      	movs	r3, #11
 80016f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	4849      	ldr	r0, [pc, #292]	@ (8001824 <MX_GPIO_Init+0x234>)
 8001700:	f001 fb6e 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001704:	2384      	movs	r3, #132	@ 0x84
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001710:	2302      	movs	r3, #2
 8001712:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001714:	230b      	movs	r3, #11
 8001716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	4619      	mov	r1, r3
 800171e:	4842      	ldr	r0, [pc, #264]	@ (8001828 <MX_GPIO_Init+0x238>)
 8001720:	f001 fb5e 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001724:	2310      	movs	r3, #16
 8001726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001728:	2303      	movs	r3, #3
 800172a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	483c      	ldr	r0, [pc, #240]	@ (8001828 <MX_GPIO_Init+0x238>)
 8001738:	f001 fb52 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800173c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800174e:	2307      	movs	r3, #7
 8001750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	4619      	mov	r1, r3
 8001758:	4834      	ldr	r0, [pc, #208]	@ (800182c <MX_GPIO_Init+0x23c>)
 800175a:	f001 fb41 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 800175e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001764:	2303      	movs	r3, #3
 8001766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	482e      	ldr	r0, [pc, #184]	@ (800182c <MX_GPIO_Init+0x23c>)
 8001774:	f001 fb34 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001778:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001786:	2302      	movs	r3, #2
 8001788:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800178a:	230b      	movs	r3, #11
 800178c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	4619      	mov	r1, r3
 8001794:	4825      	ldr	r0, [pc, #148]	@ (800182c <MX_GPIO_Init+0x23c>)
 8001796:	f001 fb23 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800179a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800179e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	4619      	mov	r1, r3
 80017b2:	481b      	ldr	r0, [pc, #108]	@ (8001820 <MX_GPIO_Init+0x230>)
 80017b4:	f001 fb14 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80017b8:	2380      	movs	r3, #128	@ 0x80
 80017ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <MX_GPIO_Init+0x240>)
 80017be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	4619      	mov	r1, r3
 80017ca:	481a      	ldr	r0, [pc, #104]	@ (8001834 <MX_GPIO_Init+0x244>)
 80017cc:	f001 fb08 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 80017d0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017de:	2302      	movs	r3, #2
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017e2:	230b      	movs	r3, #11
 80017e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	4619      	mov	r1, r3
 80017ec:	4811      	ldr	r0, [pc, #68]	@ (8001834 <MX_GPIO_Init+0x244>)
 80017ee:	f001 faf7 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 80017f2:	23c0      	movs	r3, #192	@ 0xc0
 80017f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001802:	2308      	movs	r3, #8
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	4807      	ldr	r0, [pc, #28]	@ (800182c <MX_GPIO_Init+0x23c>)
 800180e:	f001 fae7 	bl	8002de0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001812:	bf00      	nop
 8001814:	3730      	adds	r7, #48	@ 0x30
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	44020c00 	.word	0x44020c00
 8001820:	42020c00 	.word	0x42020c00
 8001824:	42020800 	.word	0x42020800
 8001828:	42020000 	.word	0x42020000
 800182c:	42020400 	.word	0x42020400
 8001830:	10110000 	.word	0x10110000
 8001834:	42021800 	.word	0x42021800

08001838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
}
 800183e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <Error_Handler+0x8>

08001844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 800185c:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <HAL_HASH_MspInit+0x40>)
 800185e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001862:	4a0c      	ldr	r2, [pc, #48]	@ (8001894 <HAL_HASH_MspInit+0x40>)
 8001864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001868:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_HASH_MspInit+0x40>)
 800186e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /* HASH interrupt Init */
    HAL_NVIC_SetPriority(HASH_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	2075      	movs	r0, #117	@ 0x75
 8001880:	f001 f90c 	bl	8002a9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_IRQn);
 8001884:	2075      	movs	r0, #117	@ 0x75
 8001886:	f001 f923 	bl	8002ad0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	44020c00 	.word	0x44020c00

08001898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b0cc      	sub	sp, #304	@ 0x130
 800189c:	af00      	add	r7, sp, #0
 800189e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018a6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018bc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018c0:	4618      	mov	r0, r3
 80018c2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80018c6:	461a      	mov	r2, r3
 80018c8:	2100      	movs	r1, #0
 80018ca:	f010 ff11 	bl	80126f0 <memset>
  if(hi2c->Instance==I2C1)
 80018ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a33      	ldr	r2, [pc, #204]	@ (80019a8 <HAL_I2C_MspInit+0x110>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d15e      	bne.n	800199e <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018e4:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80018e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018f8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018fc:	2200      	movs	r2, #0
 80018fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	4618      	mov	r0, r3
 8001908:	f005 f898 	bl	8006a3c <HAL_RCCEx_PeriphCLKConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8001912:	f7ff ff91 	bl	8001838 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	4b25      	ldr	r3, [pc, #148]	@ (80019ac <HAL_I2C_MspInit+0x114>)
 8001918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800191c:	4a23      	ldr	r2, [pc, #140]	@ (80019ac <HAL_I2C_MspInit+0x114>)
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001926:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <HAL_I2C_MspInit+0x114>)
 8001928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800192c:	f003 0202 	and.w	r2, r3, #2
 8001930:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001934:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800193e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001942:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001944:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001948:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800194c:	2312      	movs	r3, #18
 800194e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800195e:	2304      	movs	r3, #4
 8001960:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001964:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001968:	4619      	mov	r1, r3
 800196a:	4811      	ldr	r0, [pc, #68]	@ (80019b0 <HAL_I2C_MspInit+0x118>)
 800196c:	f001 fa38 	bl	8002de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001970:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <HAL_I2C_MspInit+0x114>)
 8001972:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001976:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <HAL_I2C_MspInit+0x114>)
 8001978:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800197c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001980:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <HAL_I2C_MspInit+0x114>)
 8001982:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001986:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800198a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800198e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001998:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800199c:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800199e:	bf00      	nop
 80019a0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40005400 	.word	0x40005400
 80019ac:	44020c00 	.word	0x44020c00
 80019b0:	42020400 	.word	0x42020400

080019b4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b0c6      	sub	sp, #280	@ 0x118
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80019be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019c2:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80019c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80019cc:	4618      	mov	r0, r3
 80019ce:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80019d2:	461a      	mov	r2, r3
 80019d4:	2100      	movs	r1, #0
 80019d6:	f010 fe8b 	bl	80126f0 <memset>
  if(hrng->Instance==RNG)
 80019da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80019de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a5c <HAL_RNG_MspInit+0xa8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d131      	bne.n	8001a50 <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80019ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80019f0:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80019f4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001a00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	4618      	mov	r0, r3
 8001a14:	f005 f812 	bl	8006a3c <HAL_RCCEx_PeriphCLKConfig>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 8001a1e:	f7ff ff0b 	bl	8001838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001a22:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <HAL_RNG_MspInit+0xac>)
 8001a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a28:	4a0d      	ldr	r2, [pc, #52]	@ (8001a60 <HAL_RNG_MspInit+0xac>)
 8001a2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a32:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_RNG_MspInit+0xac>)
 8001a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a38:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001a3c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a40:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a4e:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001a50:	bf00      	nop
 8001a52:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	420c0800 	.word	0x420c0800
 8001a60:	44020c00 	.word	0x44020c00

08001a64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b0c6      	sub	sp, #280	@ 0x118
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a6e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a72:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a74:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001a82:	461a      	mov	r2, r3
 8001a84:	2100      	movs	r1, #0
 8001a86:	f010 fe33 	bl	80126f0 <memset>
  if(hrtc->Instance==RTC)
 8001a8a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a8e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a21      	ldr	r2, [pc, #132]	@ (8001b1c <HAL_RTC_MspInit+0xb8>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d13a      	bne.n	8001b12 <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a9c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001aa0:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001aa4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ab0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001abc:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 ffb9 	bl	8006a3c <HAL_RCCEx_PeriphCLKConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8001ad0:	f7ff feb2 	bl	8001838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ad4:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <HAL_RTC_MspInit+0xbc>)
 8001ad6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ada:	4a11      	ldr	r2, [pc, #68]	@ (8001b20 <HAL_RTC_MspInit+0xbc>)
 8001adc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ae0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <HAL_RTC_MspInit+0xbc>)
 8001ae6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001aea:	4a0d      	ldr	r2, [pc, #52]	@ (8001b20 <HAL_RTC_MspInit+0xbc>)
 8001aec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001af0:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001af4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <HAL_RTC_MspInit+0xbc>)
 8001af6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001afa:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001afe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b10:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001b12:	bf00      	nop
 8001b14:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	44007800 	.word	0x44007800
 8001b20:	44020c00 	.word	0x44020c00

08001b24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b0ce      	sub	sp, #312	@ 0x138
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b2e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b32:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b48:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001b52:	461a      	mov	r2, r3
 8001b54:	2100      	movs	r1, #0
 8001b56:	f010 fdcb 	bl	80126f0 <memset>
  if(hspi->Instance==SPI1)
 8001b5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b5e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a60      	ldr	r2, [pc, #384]	@ (8001ce8 <HAL_SPI_MspInit+0x1c4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	f040 80b7 	bne.w	8001cdc <HAL_SPI_MspInit+0x1b8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001b6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b72:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001b76:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001b82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b86:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b90:	f107 0318 	add.w	r3, r7, #24
 8001b94:	4618      	mov	r0, r3
 8001b96:	f004 ff51 	bl	8006a3c <HAL_RCCEx_PeriphCLKConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8001ba0:	f7ff fe4a 	bl	8001838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ba4:	4b51      	ldr	r3, [pc, #324]	@ (8001cec <HAL_SPI_MspInit+0x1c8>)
 8001ba6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001baa:	4a50      	ldr	r2, [pc, #320]	@ (8001cec <HAL_SPI_MspInit+0x1c8>)
 8001bac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bb0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8001cec <HAL_SPI_MspInit+0x1c8>)
 8001bb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001bba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001bbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001bc2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001bcc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001bd0:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	4b46      	ldr	r3, [pc, #280]	@ (8001cec <HAL_SPI_MspInit+0x1c8>)
 8001bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bd8:	4a44      	ldr	r2, [pc, #272]	@ (8001cec <HAL_SPI_MspInit+0x1c8>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001be2:	4b42      	ldr	r3, [pc, #264]	@ (8001cec <HAL_SPI_MspInit+0x1c8>)
 8001be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001be8:	f003 0201 	and.w	r2, r3, #1
 8001bec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001bf0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001bfa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001bfe:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c00:	4b3a      	ldr	r3, [pc, #232]	@ (8001cec <HAL_SPI_MspInit+0x1c8>)
 8001c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c06:	4a39      	ldr	r2, [pc, #228]	@ (8001cec <HAL_SPI_MspInit+0x1c8>)
 8001c08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c10:	4b36      	ldr	r3, [pc, #216]	@ (8001cec <HAL_SPI_MspInit+0x1c8>)
 8001c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c16:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001c1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001c1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001c28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c2c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001cec <HAL_SPI_MspInit+0x1c8>)
 8001c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c34:	4a2d      	ldr	r2, [pc, #180]	@ (8001cec <HAL_SPI_MspInit+0x1c8>)
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cec <HAL_SPI_MspInit+0x1c8>)
 8001c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c44:	f003 0202 	and.w	r2, r3, #2
 8001c48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001c4c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001c56:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c5a:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c5c:	2320      	movs	r3, #32
 8001c5e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c74:	2305      	movs	r3, #5
 8001c76:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001c7e:	4619      	mov	r1, r3
 8001c80:	481b      	ldr	r0, [pc, #108]	@ (8001cf0 <HAL_SPI_MspInit+0x1cc>)
 8001c82:	f001 f8ad 	bl	8002de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c8a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ca0:	2305      	movs	r3, #5
 8001ca2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ca6:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001caa:	4619      	mov	r1, r3
 8001cac:	4811      	ldr	r0, [pc, #68]	@ (8001cf4 <HAL_SPI_MspInit+0x1d0>)
 8001cae:	f001 f897 	bl	8002de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cb2:	2320      	movs	r3, #32
 8001cb4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cca:	2305      	movs	r3, #5
 8001ccc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4808      	ldr	r0, [pc, #32]	@ (8001cf8 <HAL_SPI_MspInit+0x1d4>)
 8001cd8:	f001 f882 	bl	8002de0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001cdc:	bf00      	nop
 8001cde:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40013000 	.word	0x40013000
 8001cec:	44020c00 	.word	0x44020c00
 8001cf0:	42020000 	.word	0x42020000
 8001cf4:	42021800 	.word	0x42021800
 8001cf8:	42020400 	.word	0x42020400

08001cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b0d0      	sub	sp, #320	@ 0x140
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d06:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d0a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d1c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d20:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d24:	4618      	mov	r0, r3
 8001d26:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	f010 fcdf 	bl	80126f0 <memset>
  if(huart->Instance==USART2)
 8001d32:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d36:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a7c      	ldr	r2, [pc, #496]	@ (8001f30 <HAL_UART_MspInit+0x234>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	f040 808a 	bne.w	8001e5a <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d46:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d4a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001d4e:	f04f 0202 	mov.w	r2, #2
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d5e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d62:	2200      	movs	r2, #0
 8001d64:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d66:	f107 0320 	add.w	r3, r7, #32
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f004 fe66 	bl	8006a3c <HAL_RCCEx_PeriphCLKConfig>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8001d76:	f7ff fd5f 	bl	8001838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d7a:	4b6e      	ldr	r3, [pc, #440]	@ (8001f34 <HAL_UART_MspInit+0x238>)
 8001d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d80:	4a6c      	ldr	r2, [pc, #432]	@ (8001f34 <HAL_UART_MspInit+0x238>)
 8001d82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d86:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8001f34 <HAL_UART_MspInit+0x238>)
 8001d8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d90:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8001d94:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d98:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001da2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001da6:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da8:	4b62      	ldr	r3, [pc, #392]	@ (8001f34 <HAL_UART_MspInit+0x238>)
 8001daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dae:	4a61      	ldr	r2, [pc, #388]	@ (8001f34 <HAL_UART_MspInit+0x238>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001db8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f34 <HAL_UART_MspInit+0x238>)
 8001dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dbe:	f003 0201 	and.w	r2, r3, #1
 8001dc2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001dc6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001dd0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001dd4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd6:	4b57      	ldr	r3, [pc, #348]	@ (8001f34 <HAL_UART_MspInit+0x238>)
 8001dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ddc:	4a55      	ldr	r2, [pc, #340]	@ (8001f34 <HAL_UART_MspInit+0x238>)
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001de6:	4b53      	ldr	r3, [pc, #332]	@ (8001f34 <HAL_UART_MspInit+0x238>)
 8001de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dec:	f003 0208 	and.w	r2, r3, #8
 8001df0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001df4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001dfe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e02:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e04:	2308      	movs	r3, #8
 8001e06:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e1c:	2307      	movs	r3, #7
 8001e1e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001e26:	4619      	mov	r1, r3
 8001e28:	4843      	ldr	r0, [pc, #268]	@ (8001f38 <HAL_UART_MspInit+0x23c>)
 8001e2a:	f000 ffd9 	bl	8002de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e2e:	2320      	movs	r3, #32
 8001e30:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e46:	2307      	movs	r3, #7
 8001e48:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e4c:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001e50:	4619      	mov	r1, r3
 8001e52:	483a      	ldr	r0, [pc, #232]	@ (8001f3c <HAL_UART_MspInit+0x240>)
 8001e54:	f000 ffc4 	bl	8002de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e58:	e065      	b.n	8001f26 <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART6)
 8001e5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e5e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a36      	ldr	r2, [pc, #216]	@ (8001f40 <HAL_UART_MspInit+0x244>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d15c      	bne.n	8001f26 <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001e6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e70:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001e74:	f04f 0220 	mov.w	r2, #32
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8001e80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e84:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e88:	2200      	movs	r2, #0
 8001e8a:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e8c:	f107 0320 	add.w	r3, r7, #32
 8001e90:	4618      	mov	r0, r3
 8001e92:	f004 fdd3 	bl	8006a3c <HAL_RCCEx_PeriphCLKConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8001e9c:	f7ff fccc 	bl	8001838 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ea0:	4b24      	ldr	r3, [pc, #144]	@ (8001f34 <HAL_UART_MspInit+0x238>)
 8001ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ea6:	4a23      	ldr	r2, [pc, #140]	@ (8001f34 <HAL_UART_MspInit+0x238>)
 8001ea8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001eac:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001eb0:	4b20      	ldr	r3, [pc, #128]	@ (8001f34 <HAL_UART_MspInit+0x238>)
 8001eb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001eb6:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8001eba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001ebe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001ec8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ecc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ece:	4b19      	ldr	r3, [pc, #100]	@ (8001f34 <HAL_UART_MspInit+0x238>)
 8001ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ed4:	4a17      	ldr	r2, [pc, #92]	@ (8001f34 <HAL_UART_MspInit+0x238>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ede:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <HAL_UART_MspInit+0x238>)
 8001ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ee4:	f003 0204 	and.w	r2, r3, #4
 8001ee8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001eec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001ef6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001efa:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001efc:	23c0      	movs	r3, #192	@ 0xc0
 8001efe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001f14:	2307      	movs	r3, #7
 8001f16:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4808      	ldr	r0, [pc, #32]	@ (8001f44 <HAL_UART_MspInit+0x248>)
 8001f22:	f000 ff5d 	bl	8002de0 <HAL_GPIO_Init>
}
 8001f26:	bf00      	nop
 8001f28:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40004400 	.word	0x40004400
 8001f34:	44020c00 	.word	0x44020c00
 8001f38:	42020000 	.word	0x42020000
 8001f3c:	42020c00 	.word	0x42020c00
 8001f40:	40006400 	.word	0x40006400
 8001f44:	42020800 	.word	0x42020800

08001f48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0c6      	sub	sp, #280	@ 0x118
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f52:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f56:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f58:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f60:	4618      	mov	r0, r3
 8001f62:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001f66:	461a      	mov	r2, r3
 8001f68:	2100      	movs	r1, #0
 8001f6a:	f010 fbc1 	bl	80126f0 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001f6e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f72:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a22      	ldr	r2, [pc, #136]	@ (8002004 <HAL_PCD_MspInit+0xbc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d13b      	bne.n	8001ff8 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f84:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0310 	mov.w	r3, #16
 8001f90:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001f94:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f9c:	2230      	movs	r2, #48	@ 0x30
 8001f9e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa2:	f107 0310 	add.w	r3, r7, #16
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 fd48 	bl	8006a3c <HAL_RCCEx_PeriphCLKConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 8001fb2:	f7ff fc41 	bl	8001838 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8001fb6:	f003 fdb7 	bl	8005b28 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001fba:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <HAL_PCD_MspInit+0xc0>)
 8001fbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fc0:	4a11      	ldr	r2, [pc, #68]	@ (8002008 <HAL_PCD_MspInit+0xc0>)
 8001fc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fc6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001fca:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <HAL_PCD_MspInit+0xc0>)
 8001fcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fd0:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8001fd4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fd8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fe2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fe6:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	204a      	movs	r0, #74	@ 0x4a
 8001fee:	f000 fd55 	bl	8002a9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 8001ff2:	204a      	movs	r0, #74	@ 0x4a
 8001ff4:	f000 fd6c 	bl	8002ad0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8001ff8:	bf00      	nop
 8001ffa:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40016000 	.word	0x40016000
 8002008:	44020c00 	.word	0x44020c00

0800200c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <NMI_Handler+0x4>

08002014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <HardFault_Handler+0x4>

0800201c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <MemManage_Handler+0x4>

08002024 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <BusFault_Handler+0x4>

0800202c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <UsageFault_Handler+0x4>

08002034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002062:	f000 fc1f 	bl	80028a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}

0800206a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800206e:	2000      	movs	r0, #0
 8002070:	f000 fa78 	bl	8002564 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <USB_DRD_FS_IRQHandler+0x10>)
 800207e:	f002 f9e5 	bl	800444c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000043c 	.word	0x2000043c

0800208c <HASH_IRQHandler>:

/**
  * @brief This function handles HASH global interrupt.
  */
void HASH_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_IRQn 0 */

  /* USER CODE END HASH_IRQn 0 */
  HAL_HASH_IRQHandler(&hhash);
 8002090:	4802      	ldr	r0, [pc, #8]	@ (800209c <HASH_IRQHandler+0x10>)
 8002092:	f001 f861 	bl	8003158 <HAL_HASH_IRQHandler>
  /* USER CODE BEGIN HASH_IRQn 1 */

  /* USER CODE END HASH_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200001ac 	.word	0x200001ac

080020a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	e00a      	b.n	80020c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020b2:	f3af 8000 	nop.w
 80020b6:	4601      	mov	r1, r0
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	60ba      	str	r2, [r7, #8]
 80020be:	b2ca      	uxtb	r2, r1
 80020c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	3301      	adds	r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	dbf0      	blt.n	80020b2 <_read+0x12>
  }

  return len;
 80020d0:	687b      	ldr	r3, [r7, #4]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	e009      	b.n	8002100 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	60ba      	str	r2, [r7, #8]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fabb 	bl	8002670 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	dbf1      	blt.n	80020ec <_write+0x12>
  }
  return len;
 8002108:	687b      	ldr	r3, [r7, #4]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <_close>:

int _close(int file)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800213a:	605a      	str	r2, [r3, #4]
  return 0;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <_isatty>:

int _isatty(int file)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002152:	2301      	movs	r3, #1
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002184:	4a14      	ldr	r2, [pc, #80]	@ (80021d8 <_sbrk+0x5c>)
 8002186:	4b15      	ldr	r3, [pc, #84]	@ (80021dc <_sbrk+0x60>)
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002190:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002198:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <_sbrk+0x64>)
 800219a:	4a12      	ldr	r2, [pc, #72]	@ (80021e4 <_sbrk+0x68>)
 800219c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219e:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <_sbrk+0x64>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d207      	bcs.n	80021bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021ac:	f010 fafe 	bl	80127ac <__errno>
 80021b0:	4603      	mov	r3, r0
 80021b2:	220c      	movs	r2, #12
 80021b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ba:	e009      	b.n	80021d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021bc:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <_sbrk+0x64>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021c2:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	4a05      	ldr	r2, [pc, #20]	@ (80021e0 <_sbrk+0x64>)
 80021cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ce:	68fb      	ldr	r3, [r7, #12]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	200a0000 	.word	0x200a0000
 80021dc:	00000500 	.word	0x00000500
 80021e0:	200009fc 	.word	0x200009fc
 80021e4:	20011320 	.word	0x20011320

080021e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021ee:	4b35      	ldr	r3, [pc, #212]	@ (80022c4 <SystemInit+0xdc>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f4:	4a33      	ldr	r2, [pc, #204]	@ (80022c4 <SystemInit+0xdc>)
 80021f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021fa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80021fe:	4b32      	ldr	r3, [pc, #200]	@ (80022c8 <SystemInit+0xe0>)
 8002200:	2201      	movs	r2, #1
 8002202:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002204:	4b30      	ldr	r3, [pc, #192]	@ (80022c8 <SystemInit+0xe0>)
 8002206:	2200      	movs	r2, #0
 8002208:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800220a:	4b2f      	ldr	r3, [pc, #188]	@ (80022c8 <SystemInit+0xe0>)
 800220c:	2200      	movs	r2, #0
 800220e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8002210:	4b2d      	ldr	r3, [pc, #180]	@ (80022c8 <SystemInit+0xe0>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	492c      	ldr	r1, [pc, #176]	@ (80022c8 <SystemInit+0xe0>)
 8002216:	4b2d      	ldr	r3, [pc, #180]	@ (80022cc <SystemInit+0xe4>)
 8002218:	4013      	ands	r3, r2
 800221a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800221c:	4b2a      	ldr	r3, [pc, #168]	@ (80022c8 <SystemInit+0xe0>)
 800221e:	2200      	movs	r2, #0
 8002220:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8002222:	4b29      	ldr	r3, [pc, #164]	@ (80022c8 <SystemInit+0xe0>)
 8002224:	2200      	movs	r2, #0
 8002226:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8002228:	4b27      	ldr	r3, [pc, #156]	@ (80022c8 <SystemInit+0xe0>)
 800222a:	2200      	movs	r2, #0
 800222c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800222e:	4b26      	ldr	r3, [pc, #152]	@ (80022c8 <SystemInit+0xe0>)
 8002230:	4a27      	ldr	r2, [pc, #156]	@ (80022d0 <SystemInit+0xe8>)
 8002232:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002234:	4b24      	ldr	r3, [pc, #144]	@ (80022c8 <SystemInit+0xe0>)
 8002236:	2200      	movs	r2, #0
 8002238:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800223a:	4b23      	ldr	r3, [pc, #140]	@ (80022c8 <SystemInit+0xe0>)
 800223c:	4a24      	ldr	r2, [pc, #144]	@ (80022d0 <SystemInit+0xe8>)
 800223e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8002240:	4b21      	ldr	r3, [pc, #132]	@ (80022c8 <SystemInit+0xe0>)
 8002242:	2200      	movs	r2, #0
 8002244:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8002246:	4b20      	ldr	r3, [pc, #128]	@ (80022c8 <SystemInit+0xe0>)
 8002248:	4a21      	ldr	r2, [pc, #132]	@ (80022d0 <SystemInit+0xe8>)
 800224a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800224c:	4b1e      	ldr	r3, [pc, #120]	@ (80022c8 <SystemInit+0xe0>)
 800224e:	2200      	movs	r2, #0
 8002250:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002252:	4b1d      	ldr	r3, [pc, #116]	@ (80022c8 <SystemInit+0xe0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1c      	ldr	r2, [pc, #112]	@ (80022c8 <SystemInit+0xe0>)
 8002258:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800225c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800225e:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <SystemInit+0xe0>)
 8002260:	2200      	movs	r2, #0
 8002262:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002264:	4b17      	ldr	r3, [pc, #92]	@ (80022c4 <SystemInit+0xdc>)
 8002266:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800226a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800226c:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <SystemInit+0xec>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002274:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800227c:	d003      	beq.n	8002286 <SystemInit+0x9e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002284:	d117      	bne.n	80022b6 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8002286:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <SystemInit+0xec>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002292:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <SystemInit+0xec>)
 8002294:	4a10      	ldr	r2, [pc, #64]	@ (80022d8 <SystemInit+0xf0>)
 8002296:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8002298:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <SystemInit+0xec>)
 800229a:	4a10      	ldr	r2, [pc, #64]	@ (80022dc <SystemInit+0xf4>)
 800229c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800229e:	4b0d      	ldr	r3, [pc, #52]	@ (80022d4 <SystemInit+0xec>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4a0c      	ldr	r2, [pc, #48]	@ (80022d4 <SystemInit+0xec>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80022aa:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <SystemInit+0xec>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a09      	ldr	r2, [pc, #36]	@ (80022d4 <SystemInit+0xec>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	61d3      	str	r3, [r2, #28]
  }
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00
 80022c8:	44020c00 	.word	0x44020c00
 80022cc:	eae2eae3 	.word	0xeae2eae3
 80022d0:	01010280 	.word	0x01010280
 80022d4:	40022000 	.word	0x40022000
 80022d8:	08192a3b 	.word	0x08192a3b
 80022dc:	4c5d6e7f 	.word	0x4c5d6e7f

080022e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022e0:	480d      	ldr	r0, [pc, #52]	@ (8002318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80022e4:	f7ff ff80 	bl	80021e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e8:	480c      	ldr	r0, [pc, #48]	@ (800231c <LoopForever+0x6>)
  ldr r1, =_edata
 80022ea:	490d      	ldr	r1, [pc, #52]	@ (8002320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002324 <LoopForever+0xe>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f0:	e002      	b.n	80022f8 <LoopCopyDataInit>

080022f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f6:	3304      	adds	r3, #4

080022f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022fc:	d3f9      	bcc.n	80022f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002300:	4c0a      	ldr	r4, [pc, #40]	@ (800232c <LoopForever+0x16>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002304:	e001      	b.n	800230a <LoopFillZerobss>

08002306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002308:	3204      	adds	r2, #4

0800230a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800230c:	d3fb      	bcc.n	8002306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800230e:	f010 fa53 	bl	80127b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002312:	f7fe fd61 	bl	8000dd8 <main>

08002316 <LoopForever>:

LoopForever:
    b LoopForever
 8002316:	e7fe      	b.n	8002316 <LoopForever>
  ldr   r0, =_estack
 8002318:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800231c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002320:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8002324:	0801378c 	.word	0x0801378c
  ldr r2, =_sbss
 8002328:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800232c:	20011320 	.word	0x20011320

08002330 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002330:	e7fe      	b.n	8002330 <ADC1_IRQHandler>
	...

08002334 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08c      	sub	sp, #48	@ 0x30
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800233e:	2300      	movs	r3, #0
 8002340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d009      	beq.n	800235c <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d006      	beq.n	800235c <BSP_LED_Init+0x28>
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d003      	beq.n	800235c <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002354:	f06f 0301 	mvn.w	r3, #1
 8002358:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800235a:	e055      	b.n	8002408 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d10f      	bne.n	8002382 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8002362:	4b2c      	ldr	r3, [pc, #176]	@ (8002414 <BSP_LED_Init+0xe0>)
 8002364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002368:	4a2a      	ldr	r2, [pc, #168]	@ (8002414 <BSP_LED_Init+0xe0>)
 800236a:	f043 0320 	orr.w	r3, r3, #32
 800236e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002372:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <BSP_LED_Init+0xe0>)
 8002374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	e021      	b.n	80023c6 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10f      	bne.n	80023a8 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8002388:	4b22      	ldr	r3, [pc, #136]	@ (8002414 <BSP_LED_Init+0xe0>)
 800238a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800238e:	4a21      	ldr	r2, [pc, #132]	@ (8002414 <BSP_LED_Init+0xe0>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002398:	4b1e      	ldr	r3, [pc, #120]	@ (8002414 <BSP_LED_Init+0xe0>)
 800239a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	e00e      	b.n	80023c6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80023a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002414 <BSP_LED_Init+0xe0>)
 80023aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023ae:	4a19      	ldr	r2, [pc, #100]	@ (8002414 <BSP_LED_Init+0xe0>)
 80023b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023b8:	4b16      	ldr	r3, [pc, #88]	@ (8002414 <BSP_LED_Init+0xe0>)
 80023ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	4a13      	ldr	r2, [pc, #76]	@ (8002418 <BSP_LED_Init+0xe4>)
 80023ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023ce:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80023d0:	2301      	movs	r3, #1
 80023d2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d8:	2303      	movs	r3, #3
 80023da:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	4a0f      	ldr	r2, [pc, #60]	@ (800241c <BSP_LED_Init+0xe8>)
 80023e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e4:	f107 0218 	add.w	r2, r7, #24
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fcf8 	bl	8002de0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <BSP_LED_Init+0xe8>)
 80023f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	4a07      	ldr	r2, [pc, #28]	@ (8002418 <BSP_LED_Init+0xe4>)
 80023fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002400:	2200      	movs	r2, #0
 8002402:	4619      	mov	r1, r3
 8002404:	f000 fe3e 	bl	8003084 <HAL_GPIO_WritePin>
  }

  return ret;
 8002408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800240a:	4618      	mov	r0, r3
 800240c:	3730      	adds	r7, #48	@ 0x30
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	44020c00 	.word	0x44020c00
 8002418:	08013714 	.word	0x08013714
 800241c:	2000000c 	.word	0x2000000c

08002420 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d009      	beq.n	8002448 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d006      	beq.n	8002448 <BSP_LED_Toggle+0x28>
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d003      	beq.n	8002448 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002440:	f06f 0301 	mvn.w	r3, #1
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	e00b      	b.n	8002460 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	4a08      	ldr	r2, [pc, #32]	@ (800246c <BSP_LED_Toggle+0x4c>)
 800244c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	4907      	ldr	r1, [pc, #28]	@ (8002470 <BSP_LED_Toggle+0x50>)
 8002454:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f000 fe2a 	bl	80030b4 <HAL_GPIO_TogglePin>
  }

  return ret;
 8002460:	68fb      	ldr	r3, [r7, #12]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000000c 	.word	0x2000000c
 8002470:	08013714 	.word	0x08013714

08002474 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	460a      	mov	r2, r1
 800247e:	71fb      	strb	r3, [r7, #7]
 8002480:	4613      	mov	r3, r2
 8002482:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002484:	4b30      	ldr	r3, [pc, #192]	@ (8002548 <BSP_PB_Init+0xd4>)
 8002486:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800248a:	4a2f      	ldr	r2, [pc, #188]	@ (8002548 <BSP_PB_Init+0xd4>)
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002494:	4b2c      	ldr	r3, [pc, #176]	@ (8002548 <BSP_PB_Init+0xd4>)
 8002496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80024a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024a6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80024a8:	2302      	movs	r3, #2
 80024aa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ac:	2302      	movs	r3, #2
 80024ae:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80024b0:	79bb      	ldrb	r3, [r7, #6]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10c      	bne.n	80024d0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	4a23      	ldr	r2, [pc, #140]	@ (800254c <BSP_PB_Init+0xd8>)
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	f107 020c 	add.w	r2, r7, #12
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fc89 	bl	8002de0 <HAL_GPIO_Init>
 80024ce:	e036      	b.n	800253e <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80024d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002550 <BSP_PB_Init+0xdc>)
 80024d2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	4a1d      	ldr	r2, [pc, #116]	@ (800254c <BSP_PB_Init+0xd8>)
 80024d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024dc:	f107 020c 	add.w	r2, r7, #12
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fc7c 	bl	8002de0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80024e8:	79fa      	ldrb	r2, [r7, #7]
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4a18      	ldr	r2, [pc, #96]	@ (8002554 <BSP_PB_Init+0xe0>)
 80024f4:	441a      	add	r2, r3
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	4917      	ldr	r1, [pc, #92]	@ (8002558 <BSP_PB_Init+0xe4>)
 80024fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024fe:	4619      	mov	r1, r3
 8002500:	4610      	mov	r0, r2
 8002502:	f000 fbcf 	bl	8002ca4 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002506:	79fa      	ldrb	r2, [r7, #7]
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4a10      	ldr	r2, [pc, #64]	@ (8002554 <BSP_PB_Init+0xe0>)
 8002512:	1898      	adds	r0, r3, r2
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	4a11      	ldr	r2, [pc, #68]	@ (800255c <BSP_PB_Init+0xe8>)
 8002518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251c:	461a      	mov	r2, r3
 800251e:	2100      	movs	r1, #0
 8002520:	f000 fb94 	bl	8002c4c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002524:	2018      	movs	r0, #24
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	4a0d      	ldr	r2, [pc, #52]	@ (8002560 <BSP_PB_Init+0xec>)
 800252a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252e:	2200      	movs	r2, #0
 8002530:	4619      	mov	r1, r3
 8002532:	f000 fab3 	bl	8002a9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002536:	2318      	movs	r3, #24
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fac9 	bl	8002ad0 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	44020c00 	.word	0x44020c00
 800254c:	20000018 	.word	0x20000018
 8002550:	10110000 	.word	0x10110000
 8002554:	20000a00 	.word	0x20000a00
 8002558:	0801371c 	.word	0x0801371c
 800255c:	2000001c 	.word	0x2000001c
 8002560:	20000020 	.word	0x20000020

08002564 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800256e:	79fa      	ldrb	r2, [r7, #7]
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4a04      	ldr	r2, [pc, #16]	@ (800258c <BSP_PB_IRQHandler+0x28>)
 800257a:	4413      	add	r3, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fba5 	bl	8002ccc <HAL_EXTI_IRQHandler>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000a00 	.word	0x20000a00

08002590 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80025be:	f06f 0301 	mvn.w	r3, #1
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	e018      	b.n	80025f8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	2294      	movs	r2, #148	@ 0x94
 80025ca:	fb02 f303 	mul.w	r3, r2, r3
 80025ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002604 <BSP_COM_Init+0x5c>)
 80025d0:	4413      	add	r3, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f870 	bl	80026b8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	2294      	movs	r2, #148	@ 0x94
 80025dc:	fb02 f303 	mul.w	r3, r2, r3
 80025e0:	4a08      	ldr	r2, [pc, #32]	@ (8002604 <BSP_COM_Init+0x5c>)
 80025e2:	4413      	add	r3, r2
 80025e4:	6839      	ldr	r1, [r7, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f80e 	bl	8002608 <MX_USART_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80025f2:	f06f 0303 	mvn.w	r3, #3
 80025f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80025f8:	68fb      	ldr	r3, [r7, #12]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000a0c 	.word	0x20000a0c

08002608 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8002612:	4b16      	ldr	r3, [pc, #88]	@ (800266c <MX_USART_Init+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	220c      	movs	r2, #12
 8002626:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	895b      	ldrh	r3, [r3, #10]
 800262c:	461a      	mov	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	891b      	ldrh	r3, [r3, #8]
 800263e:	461a      	mov	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	899b      	ldrh	r3, [r3, #12]
 8002648:	461a      	mov	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002654:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f00a fcc6 	bl	800cfee <HAL_UART_Init>
 8002662:	4603      	mov	r3, r0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000008 	.word	0x20000008

08002670 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002678:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <__io_putchar+0x30>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	2394      	movs	r3, #148	@ 0x94
 8002680:	fb02 f303 	mul.w	r3, r2, r3
 8002684:	4a07      	ldr	r2, [pc, #28]	@ (80026a4 <__io_putchar+0x34>)
 8002686:	1898      	adds	r0, r3, r2
 8002688:	1d39      	adds	r1, r7, #4
 800268a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800268e:	2201      	movs	r2, #1
 8002690:	f00a fcfd 	bl	800d08e <HAL_UART_Transmit>
  return ch;
 8002694:	687b      	ldr	r3, [r7, #4]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000aa0 	.word	0x20000aa0
 80026a4:	20000a0c 	.word	0x20000a0c

080026a8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7ff ff6f 	bl	8002590 <BSP_PB_Callback>
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	@ 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80026c0:	4b27      	ldr	r3, [pc, #156]	@ (8002760 <COM1_MspInit+0xa8>)
 80026c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026c6:	4a26      	ldr	r2, [pc, #152]	@ (8002760 <COM1_MspInit+0xa8>)
 80026c8:	f043 0308 	orr.w	r3, r3, #8
 80026cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026d0:	4b23      	ldr	r3, [pc, #140]	@ (8002760 <COM1_MspInit+0xa8>)
 80026d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80026de:	4b20      	ldr	r3, [pc, #128]	@ (8002760 <COM1_MspInit+0xa8>)
 80026e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002760 <COM1_MspInit+0xa8>)
 80026e6:	f043 0308 	orr.w	r3, r3, #8
 80026ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002760 <COM1_MspInit+0xa8>)
 80026f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80026fc:	4b18      	ldr	r3, [pc, #96]	@ (8002760 <COM1_MspInit+0xa8>)
 80026fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002702:	4a17      	ldr	r2, [pc, #92]	@ (8002760 <COM1_MspInit+0xa8>)
 8002704:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002708:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800270c:	4b14      	ldr	r3, [pc, #80]	@ (8002760 <COM1_MspInit+0xa8>)
 800270e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800271a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800271e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002724:	2302      	movs	r3, #2
 8002726:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002728:	2301      	movs	r3, #1
 800272a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800272c:	2307      	movs	r3, #7
 800272e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4619      	mov	r1, r3
 8002736:	480b      	ldr	r0, [pc, #44]	@ (8002764 <COM1_MspInit+0xac>)
 8002738:	f000 fb52 	bl	8002de0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 800273c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002740:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002746:	2307      	movs	r3, #7
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4619      	mov	r1, r3
 8002750:	4804      	ldr	r0, [pc, #16]	@ (8002764 <COM1_MspInit+0xac>)
 8002752:	f000 fb45 	bl	8002de0 <HAL_GPIO_Init>
}
 8002756:	bf00      	nop
 8002758:	3728      	adds	r7, #40	@ 0x28
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	44020c00 	.word	0x44020c00
 8002764:	42020c00 	.word	0x42020c00

08002768 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800276c:	2003      	movs	r0, #3
 800276e:	f000 f98a 	bl	8002a86 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002772:	f003 ffd9 	bl	8006728 <HAL_RCC_GetSysClockFreq>
 8002776:	4602      	mov	r2, r0
 8002778:	4b0c      	ldr	r3, [pc, #48]	@ (80027ac <HAL_Init+0x44>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	490b      	ldr	r1, [pc, #44]	@ (80027b0 <HAL_Init+0x48>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
 8002788:	4a0a      	ldr	r2, [pc, #40]	@ (80027b4 <HAL_Init+0x4c>)
 800278a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800278c:	2004      	movs	r0, #4
 800278e:	f000 f9cf 	bl	8002b30 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002792:	200f      	movs	r0, #15
 8002794:	f000 f810 	bl	80027b8 <HAL_InitTick>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e002      	b.n	80027a8 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027a2:	f7ff f84f 	bl	8001844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	44020c00 	.word	0x44020c00
 80027b0:	080136fc 	.word	0x080136fc
 80027b4:	20000004 	.word	0x20000004

080027b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80027c4:	4b33      	ldr	r3, [pc, #204]	@ (8002894 <HAL_InitTick+0xdc>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e05c      	b.n	800288a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80027d0:	4b31      	ldr	r3, [pc, #196]	@ (8002898 <HAL_InitTick+0xe0>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d10c      	bne.n	80027f6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80027dc:	4b2f      	ldr	r3, [pc, #188]	@ (800289c <HAL_InitTick+0xe4>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002894 <HAL_InitTick+0xdc>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	4619      	mov	r1, r3
 80027e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	e037      	b.n	8002866 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80027f6:	f000 f9f3 	bl	8002be0 <HAL_SYSTICK_GetCLKSourceConfig>
 80027fa:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d023      	beq.n	800284a <HAL_InitTick+0x92>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d82d      	bhi.n	8002864 <HAL_InitTick+0xac>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_InitTick+0x5e>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d00d      	beq.n	8002830 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002814:	e026      	b.n	8002864 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002816:	4b21      	ldr	r3, [pc, #132]	@ (800289c <HAL_InitTick+0xe4>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4b1e      	ldr	r3, [pc, #120]	@ (8002894 <HAL_InitTick+0xdc>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	4619      	mov	r1, r3
 8002820:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002824:	fbb3 f3f1 	udiv	r3, r3, r1
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	60fb      	str	r3, [r7, #12]
        break;
 800282e:	e01a      	b.n	8002866 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002830:	4b18      	ldr	r3, [pc, #96]	@ (8002894 <HAL_InitTick+0xdc>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800283a:	fbb3 f3f2 	udiv	r3, r3, r2
 800283e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002842:	fbb2 f3f3 	udiv	r3, r2, r3
 8002846:	60fb      	str	r3, [r7, #12]
        break;
 8002848:	e00d      	b.n	8002866 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800284a:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <HAL_InitTick+0xdc>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002854:	fbb3 f3f2 	udiv	r3, r3, r2
 8002858:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	60fb      	str	r3, [r7, #12]
        break;
 8002862:	e000      	b.n	8002866 <HAL_InitTick+0xae>
        break;
 8002864:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f940 	bl	8002aec <HAL_SYSTICK_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e009      	b.n	800288a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002876:	2200      	movs	r2, #0
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	f04f 30ff 	mov.w	r0, #4294967295
 800287e:	f000 f90d 	bl	8002a9c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002882:	4a07      	ldr	r2, [pc, #28]	@ (80028a0 <HAL_InitTick+0xe8>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000028 	.word	0x20000028
 8002898:	e000e010 	.word	0xe000e010
 800289c:	20000004 	.word	0x20000004
 80028a0:	20000024 	.word	0x20000024

080028a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028a8:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_IncTick+0x20>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_IncTick+0x24>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	4a04      	ldr	r2, [pc, #16]	@ (80028c8 <HAL_IncTick+0x24>)
 80028b6:	6013      	str	r3, [r2, #0]
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000028 	.word	0x20000028
 80028c8:	20000aa4 	.word	0x20000aa4

080028cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return uwTick;
 80028d0:	4b03      	ldr	r3, [pc, #12]	@ (80028e0 <HAL_GetTick+0x14>)
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000aa4 	.word	0x20000aa4

080028e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f7ff ffee 	bl	80028cc <HAL_GetTick>
 80028f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d005      	beq.n	800290a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <HAL_Delay+0x44>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800290a:	bf00      	nop
 800290c:	f7ff ffde 	bl	80028cc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	429a      	cmp	r2, r3
 800291a:	d8f7      	bhi.n	800290c <HAL_Delay+0x28>
  {
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000028 	.word	0x20000028

0800292c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002948:	4013      	ands	r3, r2
 800294a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002954:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800295c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295e:	4a04      	ldr	r2, [pc, #16]	@ (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	60d3      	str	r3, [r2, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002978:	4b04      	ldr	r3, [pc, #16]	@ (800298c <__NVIC_GetPriorityGrouping+0x18>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	f003 0307 	and.w	r3, r3, #7
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800299a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	db0b      	blt.n	80029ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4907      	ldr	r1, [pc, #28]	@ (80029c8 <__NVIC_EnableIRQ+0x38>)
 80029aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2001      	movs	r0, #1
 80029b2:	fa00 f202 	lsl.w	r2, r0, r2
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	@ (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	@ (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	@ 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f1c3 0307 	rsb	r3, r3, #7
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf28      	it	cs
 8002a3e:	2304      	movcs	r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d902      	bls.n	8002a50 <NVIC_EncodePriority+0x30>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3b03      	subs	r3, #3
 8002a4e:	e000      	b.n	8002a52 <NVIC_EncodePriority+0x32>
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43d9      	mvns	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	4313      	orrs	r3, r2
         );
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	@ 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff ff4c 	bl	800292c <__NVIC_SetPriorityGrouping>
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002aaa:	f7ff ff63 	bl	8002974 <__NVIC_GetPriorityGrouping>
 8002aae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	6978      	ldr	r0, [r7, #20]
 8002ab6:	f7ff ffb3 	bl	8002a20 <NVIC_EncodePriority>
 8002aba:	4602      	mov	r2, r0
 8002abc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff ff82 	bl	80029cc <__NVIC_SetPriority>
}
 8002ac8:	bf00      	nop
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ff56 	bl	8002990 <__NVIC_EnableIRQ>
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002afc:	d301      	bcc.n	8002b02 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002afe:	2301      	movs	r3, #1
 8002b00:	e00d      	b.n	8002b1e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002b02:	4a0a      	ldr	r2, [pc, #40]	@ (8002b2c <HAL_SYSTICK_Config+0x40>)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002b0a:	4b08      	ldr	r3, [pc, #32]	@ (8002b2c <HAL_SYSTICK_Config+0x40>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002b10:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <HAL_SYSTICK_Config+0x40>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a05      	ldr	r2, [pc, #20]	@ (8002b2c <HAL_SYSTICK_Config+0x40>)
 8002b16:	f043 0303 	orr.w	r3, r3, #3
 8002b1a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000e010 	.word	0xe000e010

08002b30 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d844      	bhi.n	8002bc8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b44 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b44:	08002b67 	.word	0x08002b67
 8002b48:	08002b85 	.word	0x08002b85
 8002b4c:	08002ba7 	.word	0x08002ba7
 8002b50:	08002bc9 	.word	0x08002bc9
 8002b54:	08002b59 	.word	0x08002b59
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b58:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b5e:	f043 0304 	orr.w	r3, r3, #4
 8002b62:	6013      	str	r3, [r2, #0]
      break;
 8002b64:	e031      	b.n	8002bca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b66:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b6c:	f023 0304 	bic.w	r3, r3, #4
 8002b70:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002b72:	4b1a      	ldr	r3, [pc, #104]	@ (8002bdc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002b78:	4a18      	ldr	r2, [pc, #96]	@ (8002bdc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b7a:	f023 030c 	bic.w	r3, r3, #12
 8002b7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002b82:	e022      	b.n	8002bca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b84:	4b14      	ldr	r3, [pc, #80]	@ (8002bd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a13      	ldr	r2, [pc, #76]	@ (8002bd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b8a:	f023 0304 	bic.w	r3, r3, #4
 8002b8e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002b90:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002b96:	f023 030c 	bic.w	r3, r3, #12
 8002b9a:	4a10      	ldr	r2, [pc, #64]	@ (8002bdc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b9c:	f043 0304 	orr.w	r3, r3, #4
 8002ba0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002ba4:	e011      	b.n	8002bca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a0b      	ldr	r2, [pc, #44]	@ (8002bd8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002bac:	f023 0304 	bic.w	r3, r3, #4
 8002bb0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002bb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002bb8:	f023 030c 	bic.w	r3, r3, #12
 8002bbc:	4a07      	ldr	r2, [pc, #28]	@ (8002bdc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002bbe:	f043 0308 	orr.w	r3, r3, #8
 8002bc2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002bc6:	e000      	b.n	8002bca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002bc8:	bf00      	nop
  }
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000e010 	.word	0xe000e010
 8002bdc:	44020c00 	.word	0x44020c00

08002be0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002be6:	4b17      	ldr	r3, [pc, #92]	@ (8002c44 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	e01e      	b.n	8002c36 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002bf8:	4b13      	ldr	r3, [pc, #76]	@ (8002c48 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002bfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d00f      	beq.n	8002c2a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d80f      	bhi.n	8002c30 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d003      	beq.n	8002c24 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002c1c:	e008      	b.n	8002c30 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
        break;
 8002c22:	e008      	b.n	8002c36 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002c24:	2301      	movs	r3, #1
 8002c26:	607b      	str	r3, [r7, #4]
        break;
 8002c28:	e005      	b.n	8002c36 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	607b      	str	r3, [r7, #4]
        break;
 8002c2e:	e002      	b.n	8002c36 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002c30:	2300      	movs	r3, #0
 8002c32:	607b      	str	r3, [r7, #4]
        break;
 8002c34:	bf00      	nop
    }
  }
  return systick_source;
 8002c36:	687b      	ldr	r3, [r7, #4]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000e010 	.word	0xe000e010
 8002c48:	44020c00 	.word	0x44020c00

08002c4c <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	460b      	mov	r3, r1
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002c5e:	7afb      	ldrb	r3, [r7, #11]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d011      	beq.n	8002c88 <HAL_EXTI_RegisterCallback+0x3c>
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	dc13      	bgt.n	8002c90 <HAL_EXTI_RegisterCallback+0x44>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <HAL_EXTI_RegisterCallback+0x26>
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d007      	beq.n	8002c80 <HAL_EXTI_RegisterCallback+0x34>
 8002c70:	e00e      	b.n	8002c90 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	609a      	str	r2, [r3, #8]
      break;
 8002c7e:	e00a      	b.n	8002c96 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	605a      	str	r2, [r3, #4]
      break;
 8002c86:	e006      	b.n	8002c96 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
      break;
 8002c8e:	e002      	b.n	8002c96 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	75fb      	strb	r3, [r7, #23]
      break;
 8002c94:	bf00      	nop
  }

  return status;
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e003      	b.n	8002cc0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
  }
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	2201      	movs	r2, #1
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	4b17      	ldr	r3, [pc, #92]	@ (8002d54 <HAL_EXTI_IRQHandler+0x88>)
 8002cf6:	4413      	add	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4013      	ands	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <HAL_EXTI_IRQHandler+0x8c>)
 8002d24:	4413      	add	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d009      	beq.n	8002d4c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	4798      	blx	r3
    }
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	4402200c 	.word	0x4402200c
 8002d58:	44022010 	.word	0x44022010

08002d5c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8002d66:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <HAL_FLASH_Unlock+0x40>)
 8002d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00d      	beq.n	8002d8e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8002d72:	4b0a      	ldr	r3, [pc, #40]	@ (8002d9c <HAL_FLASH_Unlock+0x40>)
 8002d74:	4a0a      	ldr	r2, [pc, #40]	@ (8002da0 <HAL_FLASH_Unlock+0x44>)
 8002d76:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8002d78:	4b08      	ldr	r3, [pc, #32]	@ (8002d9c <HAL_FLASH_Unlock+0x40>)
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002da4 <HAL_FLASH_Unlock+0x48>)
 8002d7c:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8002d7e:	4b07      	ldr	r3, [pc, #28]	@ (8002d9c <HAL_FLASH_Unlock+0x40>)
 8002d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	45670123 	.word	0x45670123
 8002da4:	cdef89ab 	.word	0xcdef89ab

08002da8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 8002db2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <HAL_FLASH_Lock+0x34>)
 8002db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db6:	4a09      	ldr	r2, [pc, #36]	@ (8002ddc <HAL_FLASH_Lock+0x34>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 8002dbe:	4b07      	ldr	r3, [pc, #28]	@ (8002ddc <HAL_FLASH_Lock+0x34>)
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8002dce:	79fb      	ldrb	r3, [r7, #7]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	40022000 	.word	0x40022000

08002de0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002dee:	e136      	b.n	800305e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2101      	movs	r1, #1
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8128 	beq.w	8003058 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_Init+0x38>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b12      	cmp	r3, #18
 8002e16:	d125      	bne.n	8002e64 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	08da      	lsrs	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3208      	adds	r2, #8
 8002e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e24:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	220f      	movs	r2, #15
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f003 020f 	and.w	r2, r3, #15
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	08da      	lsrs	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3208      	adds	r2, #8
 8002e5e:	6979      	ldr	r1, [r7, #20]
 8002e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	2203      	movs	r2, #3
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0203 	and.w	r2, r3, #3
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d00b      	beq.n	8002eb8 <HAL_GPIO_Init+0xd8>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d007      	beq.n	8002eb8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eac:	2b11      	cmp	r3, #17
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b12      	cmp	r3, #18
 8002eb6:	d130      	bne.n	8002f1a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eee:	2201      	movs	r2, #1
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4013      	ands	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	f003 0201 	and.w	r2, r3, #1
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d017      	beq.n	8002f52 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4013      	ands	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d07c      	beq.n	8003058 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002f5e:	4a47      	ldr	r2, [pc, #284]	@ (800307c <HAL_GPIO_Init+0x29c>)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	089b      	lsrs	r3, r3, #2
 8002f64:	3318      	adds	r3, #24
 8002f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	220f      	movs	r2, #15
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	0a9a      	lsrs	r2, r3, #10
 8002f86:	4b3e      	ldr	r3, [pc, #248]	@ (8003080 <HAL_GPIO_Init+0x2a0>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	f002 0203 	and.w	r2, r2, #3
 8002f90:	00d2      	lsls	r2, r2, #3
 8002f92:	4093      	lsls	r3, r2
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002f9a:	4938      	ldr	r1, [pc, #224]	@ (800307c <HAL_GPIO_Init+0x29c>)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	3318      	adds	r3, #24
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002fa8:	4b34      	ldr	r3, [pc, #208]	@ (800307c <HAL_GPIO_Init+0x29c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002fcc:	4a2b      	ldr	r2, [pc, #172]	@ (800307c <HAL_GPIO_Init+0x29c>)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800307c <HAL_GPIO_Init+0x29c>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002ff6:	4a21      	ldr	r2, [pc, #132]	@ (800307c <HAL_GPIO_Init+0x29c>)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800307c <HAL_GPIO_Init+0x29c>)
 8002ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003002:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	43db      	mvns	r3, r3
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	4013      	ands	r3, r2
 800300c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003022:	4a16      	ldr	r2, [pc, #88]	@ (800307c <HAL_GPIO_Init+0x29c>)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800302a:	4b14      	ldr	r3, [pc, #80]	@ (800307c <HAL_GPIO_Init+0x29c>)
 800302c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003030:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	43db      	mvns	r3, r3
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4013      	ands	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003050:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <HAL_GPIO_Init+0x29c>)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	3301      	adds	r3, #1
 800305c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	f47f aec1 	bne.w	8002df0 <HAL_GPIO_Init+0x10>
  }
}
 800306e:	bf00      	nop
 8003070:	bf00      	nop
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	44022000 	.word	0x44022000
 8003080:	002f7f7f 	.word	0x002f7f7f

08003084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	807b      	strh	r3, [r7, #2]
 8003090:	4613      	mov	r3, r2
 8003092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003094:	787b      	ldrb	r3, [r7, #1]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030a0:	e002      	b.n	80030a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030a2:	887a      	ldrh	r2, [r7, #2]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030c6:	887a      	ldrh	r2, [r7, #2]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4013      	ands	r3, r2
 80030cc:	041a      	lsls	r2, r3, #16
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	43d9      	mvns	r1, r3
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	400b      	ands	r3, r1
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	619a      	str	r2, [r3, #24]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e02a      	b.n	8003150 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fe fba0 	bl	8001854 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 800312a:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	68f9      	ldr	r1, [r7, #12]
 8003134:	430b      	orrs	r3, r1
 8003136:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_HASH_IRQHandler>:
  * @param hhash HASH handle.
  * @note  HAL_HASH_IRQHandler() handles interrupts in HMAC processing as well.
  * @retval None
  */
void HAL_HASH_IRQHandler(HASH_HandleTypeDef *hhash)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t itsource = hhash->Instance->IMR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	617b      	str	r3, [r7, #20]
  uint32_t itflag   = hhash->Instance->SR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	613b      	str	r3, [r7, #16]

  /* If digest is ready */
  if ((itflag & HASH_FLAG_DCIS) == HASH_FLAG_DCIS)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d062      	beq.n	8003240 <HAL_HASH_IRQHandler+0xe8>
  {
    /* Read the digest */
    HASH_GetDigest(hhash, hhash->pHashOutBuffPtr, HASH_DIGEST_LENGTH(hhash));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6999      	ldr	r1, [r3, #24]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d03d      	beq.n	8003208 <HAL_HASH_IRQHandler+0xb0>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003196:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800319a:	d033      	beq.n	8003204 <HAL_HASH_IRQHandler+0xac>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80031a6:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80031aa:	d029      	beq.n	8003200 <HAL_HASH_IRQHandler+0xa8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80031b6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80031ba:	d01f      	beq.n	80031fc <HAL_HASH_IRQHandler+0xa4>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80031c6:	f5b3 1fd0 	cmp.w	r3, #1703936	@ 0x1a0000
 80031ca:	d015      	beq.n	80031f8 <HAL_HASH_IRQHandler+0xa0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80031d6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80031da:	d00b      	beq.n	80031f4 <HAL_HASH_IRQHandler+0x9c>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80031e6:	f5b3 1ff0 	cmp.w	r3, #1966080	@ 0x1e0000
 80031ea:	d101      	bne.n	80031f0 <HAL_HASH_IRQHandler+0x98>
 80031ec:	2340      	movs	r3, #64	@ 0x40
 80031ee:	e00c      	b.n	800320a <HAL_HASH_IRQHandler+0xb2>
 80031f0:	2314      	movs	r3, #20
 80031f2:	e00a      	b.n	800320a <HAL_HASH_IRQHandler+0xb2>
 80031f4:	2320      	movs	r3, #32
 80031f6:	e008      	b.n	800320a <HAL_HASH_IRQHandler+0xb2>
 80031f8:	231c      	movs	r3, #28
 80031fa:	e006      	b.n	800320a <HAL_HASH_IRQHandler+0xb2>
 80031fc:	2330      	movs	r3, #48	@ 0x30
 80031fe:	e004      	b.n	800320a <HAL_HASH_IRQHandler+0xb2>
 8003200:	2320      	movs	r3, #32
 8003202:	e002      	b.n	800320a <HAL_HASH_IRQHandler+0xb2>
 8003204:	231c      	movs	r3, #28
 8003206:	e000      	b.n	800320a <HAL_HASH_IRQHandler+0xb2>
 8003208:	2314      	movs	r3, #20
 800320a:	461a      	mov	r2, r3
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fb65 	bl	80038dc <HASH_GetDigest>

    /* Disable Interrupts */
    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6a1a      	ldr	r2, [r3, #32]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0203 	bic.w	r2, r2, #3
 8003220:	621a      	str	r2, [r3, #32]
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Reset HASH state machine */
    hhash->Phase = HAL_HASH_PHASE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    /* Process Unlocked */
    __HAL_UNLOCK(hhash);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    /* Call digest computation complete call back */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
    hhash->DgstCpltCallback(hhash);
#else
    HAL_HASH_DgstCpltCallback(hhash);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f823 	bl	8003286 <HAL_HASH_DgstCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

  }
  /* If Peripheral ready to accept new data */
  if ((itflag & HASH_FLAG_DINIS) == HASH_FLAG_DINIS)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00f      	beq.n	800326a <HAL_HASH_IRQHandler+0x112>
  {
    if ((itsource & HASH_IT_DINI) == HASH_IT_DINI)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_HASH_IRQHandler+0x112>
    {
      status = HASH_WriteData_IT(hhash);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f82a 	bl	80032ae <HASH_WriteData_IT>
 800325a:	4603      	mov	r3, r0
 800325c:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_HASH_IRQHandler+0x112>
      {
        /* Call error callback */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
        hhash->ErrorCallback(hhash);
#else
        HAL_HASH_ErrorCallback(hhash);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f818 	bl	800329a <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
      }
    }
  }
}
 800326a:	bf00      	nop
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_HASH_InCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_InCpltCallback(HASH_HandleTypeDef *hhash)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_InCpltCallback() can be implemented in the user file.
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_HASH_DgstCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_DgstCpltCallback(HASH_HandleTypeDef *hhash)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_DgstCpltCallback() can be implemented in the user file.
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_HASH_ErrorCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_ErrorCallback(HASH_HandleTypeDef *hhash)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_ErrorCallback() can be implemented in the user file.
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HASH_WriteData_IT>:
  * @brief  Feed the input buffer to the HASH peripheral in interruption mode.
  * @param  hhash HASH handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WriteData_IT(HASH_HandleTypeDef *hhash)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b088      	sub	sp, #32
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  uint32_t buffercounter;
  uint32_t count;
  __IO uint32_t keyaddr = (uint32_t)(hhash->pHashKeyBuffPtr);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	613b      	str	r3, [r7, #16]
  __IO uint32_t inputaddr = (uint32_t)(hhash->pHashInBuffPtr);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	60fb      	str	r3, [r7, #12]
  uint32_t nbbytePartialHash  = (((hhash->Instance->SR) >> 16U) * 4U); /* Nb byte  to enter in HASH fifo to trig
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	0c1b      	lsrs	r3, r3, #16
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	617b      	str	r3, [r7, #20]
                                                                      a partial HASH computation*/

  if (hhash->State == HAL_HASH_STATE_BUSY)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	f040 82ea 	bne.w	80038b0 <HASH_WriteData_IT+0x602>
  {
    if ((hhash->Instance->CR & HASH_CR_MODE) == 0U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f040 80b3 	bne.w	8003452 <HASH_WriteData_IT+0x1a4>
      }
      else
      {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69da      	ldr	r2, [r3, #28]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	441a      	add	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d258      	bcs.n	80033ae <HASH_WriteData_IT+0x100>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80032fc:	2300      	movs	r3, #0
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	e015      	b.n	800332e <HASH_WriteData_IT+0x80>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	461a      	mov	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3304      	adds	r3, #4
 8003312:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	1d1a      	adds	r2, r3, #4
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	1d1a      	adds	r2, r3, #4
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	615a      	str	r2, [r3, #20]
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	3304      	adds	r3, #4
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	429a      	cmp	r2, r3
 8003334:	d3e5      	bcc.n	8003302 <HASH_WriteData_IT+0x54>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 8003336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800333a:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	3b01      	subs	r3, #1
 8003340:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d117      	bne.n	8003378 <HASH_WriteData_IT+0xca>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6a1a      	ldr	r2, [r3, #32]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0203 	bic.w	r2, r2, #3
 8003356:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800335c:	f043 0204 	orr.w	r2, r3, #4
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e2ad      	b.n	80038d4 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0da      	beq.n	800333c <HASH_WriteData_IT+0x8e>
 8003386:	e2a4      	b.n	80038d2 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < hhash->Size)
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	461a      	mov	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3304      	adds	r3, #4
 8003398:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	1d1a      	adds	r2, r3, #4
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	1d1a      	adds	r2, r3, #4
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	615a      	str	r2, [r3, #20]
          while ((hhash->HashInCount) < hhash->Size)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d3e6      	bcc.n	8003388 <HASH_WriteData_IT+0xda>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
          /*Call registered Input complete callback*/
          hhash->InCpltCallback(hhash);
#else
          /*Call legacy weak Input complete callback*/
          HAL_HASH_InCpltCallback(hhash);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff ff59 	bl	8003272 <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
          if (hhash->Accumulation == 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d138      	bne.n	800343a <HASH_WriteData_IT+0x18c>
          {
            if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	f040 827d 	bne.w	80038d2 <HASH_WriteData_IT+0x624>
            {
              /* Start the message padding then the Digest calculation */
              SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033e6:	609a      	str	r2, [r3, #8]

              /* Wait for HASH_FLAG_DCIS flag to be set */
              count = HASH_TIMEOUTVALUE;
 80033e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033ec:	61bb      	str	r3, [r7, #24]
              do
              {
                count--;
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	61bb      	str	r3, [r7, #24]
                if (count == 0U)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d117      	bne.n	800342a <HASH_WriteData_IT+0x17c>
                {
                  /* Disable Interrupts */
                  __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6a1a      	ldr	r2, [r3, #32]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0203 	bic.w	r2, r2, #3
 8003408:	621a      	str	r2, [r3, #32]

                  /* Change state */
                  hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340e:	f043 0204 	orr.w	r2, r3, #4
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	635a      	str	r2, [r3, #52]	@ 0x34
                  hhash->State = HAL_HASH_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                  __HAL_UNLOCK(hhash);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                  return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e254      	b.n	80038d4 <HASH_WriteData_IT+0x626>
                }
              } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0da      	beq.n	80033ee <HASH_WriteData_IT+0x140>
 8003438:	e24b      	b.n	80038d2 <HASH_WriteData_IT+0x624>
            }
          }
          else
          {
            /* Reset multi buffers accumulation flag */
            hhash->Accumulation = 0U;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	63da      	str	r2, [r3, #60]	@ 0x3c
            /* Disable Interrupts */
            __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6a1a      	ldr	r2, [r3, #32]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	621a      	str	r2, [r3, #32]
 8003450:	e23f      	b.n	80038d2 <HASH_WriteData_IT+0x624>
      }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
    }
    else /*HMAC */
    {
      if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2) /* loading input*/
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003458:	2b04      	cmp	r3, #4
 800345a:	f040 80df 	bne.w	800361c <HASH_WriteData_IT+0x36e>
          __HAL_UNLOCK(hhash);
        }
        else
        {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
          if (hhash->Accumulation == 1U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d108      	bne.n	8003478 <HASH_WriteData_IT+0x1ca>
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 0U);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 021f 	bic.w	r2, r2, #31
 8003474:	609a      	str	r2, [r3, #8]
 8003476:	e00d      	b.n	8003494 <HASH_WriteData_IT+0x1e6>
          }
          else
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (hhash->Size % 4U));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f023 011f 	bic.w	r1, r3, #31
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	00da      	lsls	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	609a      	str	r2, [r3, #8]
          }
          if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	441a      	add	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d258      	bcs.n	8003556 <HASH_WriteData_IT+0x2a8>
          {
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	e015      	b.n	80034d6 <HASH_WriteData_IT+0x228>
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	461a      	mov	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3304      	adds	r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	1d1a      	adds	r2, r3, #4
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	1d1a      	adds	r2, r3, #4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	615a      	str	r2, [r3, #20]
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	3304      	adds	r3, #4
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d3e5      	bcc.n	80034aa <HASH_WriteData_IT+0x1fc>
            }
            /* Wait for HASH_IT_DINI flag to be set */
            count = HASH_TIMEOUTVALUE;
 80034de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034e2:	61bb      	str	r3, [r7, #24]
            do
            {
              count--;
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	61bb      	str	r3, [r7, #24]
              if (count == 0U)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d117      	bne.n	8003520 <HASH_WriteData_IT+0x272>
              {
                /* Disable Interrupts */
                __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6a1a      	ldr	r2, [r3, #32]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0203 	bic.w	r2, r2, #3
 80034fe:	621a      	str	r2, [r3, #32]

                /* Change state */
                hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003504:	f043 0204 	orr.w	r2, r3, #4
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	635a      	str	r2, [r3, #52]	@ 0x34
                hhash->State = HAL_HASH_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                __HAL_UNLOCK(hhash);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e1d9      	b.n	80038d4 <HASH_WriteData_IT+0x626>
              }
            } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0da      	beq.n	80034e4 <HASH_WriteData_IT+0x236>
 800352e:	e1d0      	b.n	80038d2 <HASH_WriteData_IT+0x624>
          else
          {
            while ((hhash->HashInCount) < hhash->Size)
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	461a      	mov	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3304      	adds	r3, #4
 8003540:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	1d1a      	adds	r2, r3, #4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	1d1a      	adds	r2, r3, #4
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	615a      	str	r2, [r3, #20]
            while ((hhash->HashInCount) < hhash->Size)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	429a      	cmp	r2, r3
 8003560:	d3e6      	bcc.n	8003530 <HASH_WriteData_IT+0x282>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
            /*Call registered Input complete callback*/
            hhash->InCpltCallback(hhash);
#else
            /*Call legacy weak Input complete callback*/
            HAL_HASH_InCpltCallback(hhash);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff fe85 	bl	8003272 <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

            if (hhash->Accumulation == 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d143      	bne.n	80035f8 <HASH_WriteData_IT+0x34a>
            {
              if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b01      	cmp	r3, #1
 800357c:	f040 81a9 	bne.w	80038d2 <HASH_WriteData_IT+0x624>
              {
                /* Start the message padding then the Digest calculation */
                SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800358e:	609a      	str	r2, [r3, #8]

                /* Wait for HASH_FLAG_BUSY flag to be set */
                count = HASH_TIMEOUTVALUE;
 8003590:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003594:	61bb      	str	r3, [r7, #24]
                do
                {
                  count--;
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	3b01      	subs	r3, #1
 800359a:	61bb      	str	r3, [r7, #24]
                  if (count == 0U)
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d117      	bne.n	80035d2 <HASH_WriteData_IT+0x324>
                  {
                    /* Disable Interrupts */
                    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6a1a      	ldr	r2, [r3, #32]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0203 	bic.w	r2, r2, #3
 80035b0:	621a      	str	r2, [r3, #32]

                    /* Change state */
                    hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b6:	f043 0204 	orr.w	r2, r3, #4
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	635a      	str	r2, [r3, #52]	@ 0x34
                    hhash->State = HAL_HASH_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    __HAL_UNLOCK(hhash);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e180      	b.n	80038d4 <HASH_WriteData_IT+0x626>
                  }
                } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d0da      	beq.n	8003596 <HASH_WriteData_IT+0x2e8>

                hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_3;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2205      	movs	r2, #5
 80035e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                hhash->HashInCount = 0U;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	61da      	str	r2, [r3, #28]
                hhash->pHashKeyBuffPtr = hhash->Init.pKey;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80035f6:	e16c      	b.n	80038d2 <HASH_WriteData_IT+0x624>
            }

            else
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6a1a      	ldr	r2, [r3, #32]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0203 	bic.w	r2, r2, #3
 8003606:	621a      	str	r2, [r3, #32]
              hhash->State = HAL_HASH_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e15b      	b.n	80038d4 <HASH_WriteData_IT+0x626>
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
        }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
      }

      else if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3)/* loading Key*/
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003622:	2b05      	cmp	r3, #5
 8003624:	f040 80a1 	bne.w	800376a <HASH_WriteData_IT+0x4bc>
      {

        /* Configure the number of valid bits in last word of the Key */
        MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * ((hhash->Init.KeySize) % 4U));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f023 011f 	bic.w	r1, r3, #31
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	00da      	lsls	r2, r3, #3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	441a      	add	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	429a      	cmp	r2, r3
 8003652:	d253      	bcs.n	80036fc <HASH_WriteData_IT+0x44e>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003654:	2300      	movs	r3, #0
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	e015      	b.n	8003686 <HASH_WriteData_IT+0x3d8>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	461a      	mov	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	3304      	adds	r3, #4
 800366a:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	1d1a      	adds	r2, r3, #4
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	1d1a      	adds	r2, r3, #4
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	3304      	adds	r3, #4
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	429a      	cmp	r2, r3
 800368c:	d3e5      	bcc.n	800365a <HASH_WriteData_IT+0x3ac>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 800368e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003692:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	3b01      	subs	r3, #1
 8003698:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d117      	bne.n	80036d0 <HASH_WriteData_IT+0x422>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6a1a      	ldr	r2, [r3, #32]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0203 	bic.w	r2, r2, #3
 80036ae:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b4:	f043 0204 	orr.w	r2, r3, #4
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e101      	b.n	80038d4 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0da      	beq.n	8003694 <HASH_WriteData_IT+0x3e6>
 80036de:	e0f8      	b.n	80038d2 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	461a      	mov	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	3304      	adds	r3, #4
 80036f0:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	1d1a      	adds	r2, r3, #4
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	61da      	str	r2, [r3, #28]
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	429a      	cmp	r2, r3
 8003706:	d3eb      	bcc.n	80036e0 <HASH_WriteData_IT+0x432>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003716:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_DCIS flag to be set */
          count = HASH_TIMEOUTVALUE;
 8003718:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800371c:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	3b01      	subs	r3, #1
 8003722:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d117      	bne.n	800375a <HASH_WriteData_IT+0x4ac>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6a1a      	ldr	r2, [r3, #32]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0203 	bic.w	r2, r2, #3
 8003738:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800373e:	f043 0204 	orr.w	r2, r3, #4
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e0bc      	b.n	80038d4 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0da      	beq.n	800371e <HASH_WriteData_IT+0x470>
 8003768:	e0b3      	b.n	80038d2 <HASH_WriteData_IT+0x624>
        }
      }
      else  /*first step , loading key*/
      {

        hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2203      	movs	r2, #3
 800376e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69da      	ldr	r2, [r3, #28]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	441a      	add	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	429a      	cmp	r2, r3
 8003780:	d258      	bcs.n	8003834 <HASH_WriteData_IT+0x586>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	e015      	b.n	80037b4 <HASH_WriteData_IT+0x506>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	461a      	mov	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	3304      	adds	r3, #4
 8003798:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	1d1a      	adds	r2, r3, #4
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	1d1a      	adds	r2, r3, #4
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3304      	adds	r3, #4
 80037b2:	61fb      	str	r3, [r7, #28]
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d3e5      	bcc.n	8003788 <HASH_WriteData_IT+0x4da>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 80037bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037c0:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d117      	bne.n	80037fe <HASH_WriteData_IT+0x550>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6a1a      	ldr	r2, [r3, #32]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0203 	bic.w	r2, r2, #3
 80037dc:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e2:	f043 0204 	orr.w	r2, r3, #4
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e06a      	b.n	80038d4 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0da      	beq.n	80037c2 <HASH_WriteData_IT+0x514>
 800380c:	e061      	b.n	80038d2 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	461a      	mov	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	3304      	adds	r3, #4
 800381e:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	1d1a      	adds	r2, r3, #4
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382e:	1d1a      	adds	r2, r3, #4
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	625a      	str	r2, [r3, #36]	@ 0x24
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	429a      	cmp	r2, r3
 800383e:	d3e6      	bcc.n	800380e <HASH_WriteData_IT+0x560>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800384e:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_BUSY flag to be set */
          count = HASH_TIMEOUTVALUE;
 8003850:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003854:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	3b01      	subs	r3, #1
 800385a:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d117      	bne.n	8003892 <HASH_WriteData_IT+0x5e4>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6a1a      	ldr	r2, [r3, #32]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0203 	bic.w	r2, r2, #3
 8003870:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003876:	f043 0204 	orr.w	r2, r3, #4
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e020      	b.n	80038d4 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b08      	cmp	r3, #8
 800389e:	d0da      	beq.n	8003856 <HASH_WriteData_IT+0x5a8>
          /*change Phase to step 2*/
          hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2204      	movs	r2, #4
 80038a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
          hhash->HashInCount = 0U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	61da      	str	r2, [r3, #28]
 80038ae:	e010      	b.n	80038d2 <HASH_WriteData_IT+0x624>
        }
      }
    }
  }
  else if ((hhash->State == HAL_HASH_STATE_SUSPENDED))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d101      	bne.n	80038c0 <HASH_WriteData_IT+0x612>
  {
    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e009      	b.n	80038d4 <HASH_WriteData_IT+0x626>
  }
  else
  {
    /* Busy error code field */
    hhash->ErrorCode |= HAL_HASH_ERROR_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c4:	f043 0201 	orr.w	r2, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
    /*Call registered error callback*/
    hhash->ErrorCallback(hhash);
#else
    /*Call legacy weak error callback*/
    HAL_HASH_ErrorCallback(hhash);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff fce4 	bl	800329a <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3720      	adds	r7, #32
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HASH_GetDigest>:
  * @param  pMsgDigest pointer to the computed digest.
  * @param  Size message digest size in bytes.
  * @retval None
  */
static void HASH_GetDigest(const HASH_HandleTypeDef *hhash, const uint8_t *pMsgDigest, uint8_t Size)
{
 80038dc:	b480      	push	{r7}
 80038de:	b0b7      	sub	sp, #220	@ 0xdc
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	4613      	mov	r3, r2
 80038e8:	71fb      	strb	r3, [r7, #7]
  uint32_t msgdigest = (uint32_t)pMsgDigest;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  switch (Size)
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	2b30      	cmp	r3, #48	@ 0x30
 80038f4:	dc44      	bgt.n	8003980 <HASH_GetDigest+0xa4>
 80038f6:	2b14      	cmp	r3, #20
 80038f8:	f2c0 82e7 	blt.w	8003eca <HASH_GetDigest+0x5ee>
 80038fc:	3b14      	subs	r3, #20
 80038fe:	2b1c      	cmp	r3, #28
 8003900:	f200 82e3 	bhi.w	8003eca <HASH_GetDigest+0x5ee>
 8003904:	a201      	add	r2, pc, #4	@ (adr r2, 800390c <HASH_GetDigest+0x30>)
 8003906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390a:	bf00      	nop
 800390c:	08003989 	.word	0x08003989
 8003910:	08003ecb 	.word	0x08003ecb
 8003914:	08003ecb 	.word	0x08003ecb
 8003918:	08003ecb 	.word	0x08003ecb
 800391c:	08003ecb 	.word	0x08003ecb
 8003920:	08003ecb 	.word	0x08003ecb
 8003924:	08003ecb 	.word	0x08003ecb
 8003928:	08003ecb 	.word	0x08003ecb
 800392c:	08003a21 	.word	0x08003a21
 8003930:	08003ecb 	.word	0x08003ecb
 8003934:	08003ecb 	.word	0x08003ecb
 8003938:	08003ecb 	.word	0x08003ecb
 800393c:	08003af5 	.word	0x08003af5
 8003940:	08003ecb 	.word	0x08003ecb
 8003944:	08003ecb 	.word	0x08003ecb
 8003948:	08003ecb 	.word	0x08003ecb
 800394c:	08003ecb 	.word	0x08003ecb
 8003950:	08003ecb 	.word	0x08003ecb
 8003954:	08003ecb 	.word	0x08003ecb
 8003958:	08003ecb 	.word	0x08003ecb
 800395c:	08003ecb 	.word	0x08003ecb
 8003960:	08003ecb 	.word	0x08003ecb
 8003964:	08003ecb 	.word	0x08003ecb
 8003968:	08003ecb 	.word	0x08003ecb
 800396c:	08003ecb 	.word	0x08003ecb
 8003970:	08003ecb 	.word	0x08003ecb
 8003974:	08003ecb 	.word	0x08003ecb
 8003978:	08003ecb 	.word	0x08003ecb
 800397c:	08003be7 	.word	0x08003be7
 8003980:	2b40      	cmp	r3, #64	@ 0x40
 8003982:	f000 81d1 	beq.w	8003d28 <HASH_GetDigest+0x44c>
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);

      break;
#endif /* defined(HASH_ALGOSELECTION_SHA512)*/
    default:
      break;
 8003986:	e2a0      	b.n	8003eca <HASH_GetDigest+0x5ee>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003992:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
  return __builtin_bswap32(value);
 8003996:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800399a:	ba12      	rev	r2, r2
 800399c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800399e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039a2:	3304      	adds	r3, #4
 80039a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039b2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80039ba:	ba12      	rev	r2, r2
 80039bc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80039be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039c2:	3304      	adds	r3, #4
 80039c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039d2:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80039d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80039da:	ba12      	rev	r2, r2
 80039dc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80039de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039e2:	3304      	adds	r3, #4
 80039e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699a      	ldr	r2, [r3, #24]
 80039ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039f2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80039f6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80039fa:	ba12      	rev	r2, r2
 80039fc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80039fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a02:	3304      	adds	r3, #4
 8003a04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69da      	ldr	r2, [r3, #28]
 8003a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a12:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8003a16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a1a:	ba12      	rev	r2, r2
 8003a1c:	601a      	str	r2, [r3, #0]
      break;
 8003a1e:	e255      	b.n	8003ecc <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a2e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003a32:	ba12      	rev	r2, r2
 8003a34:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a52:	ba12      	rev	r2, r2
 8003a54:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a6a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a72:	ba12      	rev	r2, r2
 8003a74:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a8a:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8003a8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a92:	ba12      	rev	r2, r2
 8003a94:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aaa:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003aae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ab2:	ba12      	rev	r2, r2
 8003ab4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aba:	3304      	adds	r3, #4
 8003abc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8003ac0:	4b98      	ldr	r3, [pc, #608]	@ (8003d24 <HASH_GetDigest+0x448>)
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ac8:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8003acc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ad0:	ba12      	rev	r2, r2
 8003ad2:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003ad4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ad8:	3304      	adds	r3, #4
 8003ada:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8003ade:	4b91      	ldr	r3, [pc, #580]	@ (8003d24 <HASH_GetDigest+0x448>)
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ae6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003aea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003aee:	ba12      	rev	r2, r2
 8003af0:	601a      	str	r2, [r3, #0]
      break;
 8003af2:	e1eb      	b.n	8003ecc <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003afe:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003b02:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003b06:	ba12      	rev	r2, r2
 8003b08:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b0e:	3304      	adds	r3, #4
 8003b10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b1e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003b22:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003b26:	ba12      	rev	r2, r2
 8003b28:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b2e:	3304      	adds	r3, #4
 8003b30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b3e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b42:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003b46:	ba12      	rev	r2, r2
 8003b48:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b4e:	3304      	adds	r3, #4
 8003b50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b5e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003b62:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003b66:	ba12      	rev	r2, r2
 8003b68:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b6e:	3304      	adds	r3, #4
 8003b70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69da      	ldr	r2, [r3, #28]
 8003b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b86:	ba12      	rev	r2, r2
 8003b88:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b8e:	3304      	adds	r3, #4
 8003b90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8003b94:	4b63      	ldr	r3, [pc, #396]	@ (8003d24 <HASH_GetDigest+0x448>)
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b9c:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8003ba0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003ba4:	ba12      	rev	r2, r2
 8003ba6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003ba8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bac:	3304      	adds	r3, #4
 8003bae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8003bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8003d24 <HASH_GetDigest+0x448>)
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bba:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003bbe:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8003bc2:	ba12      	rev	r2, r2
 8003bc4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bca:	3304      	adds	r3, #4
 8003bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8003bd0:	4b54      	ldr	r3, [pc, #336]	@ (8003d24 <HASH_GetDigest+0x448>)
 8003bd2:	69da      	ldr	r2, [r3, #28]
 8003bd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bd8:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8003bdc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003be0:	ba12      	rev	r2, r2
 8003be2:	601a      	str	r2, [r3, #0]
      break;
 8003be4:	e172      	b.n	8003ecc <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bf0:	657a      	str	r2, [r7, #84]	@ 0x54
 8003bf2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003bf4:	ba12      	rev	r2, r2
 8003bf6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003bf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c10:	ba12      	rev	r2, r2
 8003c12:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c18:	3304      	adds	r3, #4
 8003c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c28:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003c2a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003c2c:	ba12      	rev	r2, r2
 8003c2e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003c30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c34:	3304      	adds	r3, #4
 8003c36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699a      	ldr	r2, [r3, #24]
 8003c40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c44:	663a      	str	r2, [r7, #96]	@ 0x60
 8003c46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c48:	ba12      	rev	r2, r2
 8003c4a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003c4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c50:	3304      	adds	r3, #4
 8003c52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c60:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c62:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003c64:	ba12      	rev	r2, r2
 8003c66:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003c68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8003c72:	4b2c      	ldr	r3, [pc, #176]	@ (8003d24 <HASH_GetDigest+0x448>)
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c7a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003c7c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003c7e:	ba12      	rev	r2, r2
 8003c80:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c86:	3304      	adds	r3, #4
 8003c88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8003c8c:	4b25      	ldr	r3, [pc, #148]	@ (8003d24 <HASH_GetDigest+0x448>)
 8003c8e:	699a      	ldr	r2, [r3, #24]
 8003c90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c94:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c96:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c98:	ba12      	rev	r2, r2
 8003c9a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003c9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d24 <HASH_GetDigest+0x448>)
 8003ca8:	69da      	ldr	r2, [r3, #28]
 8003caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cae:	673a      	str	r2, [r7, #112]	@ 0x70
 8003cb0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003cb2:	ba12      	rev	r2, r2
 8003cb4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cba:	3304      	adds	r3, #4
 8003cbc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 8003cc0:	4b18      	ldr	r3, [pc, #96]	@ (8003d24 <HASH_GetDigest+0x448>)
 8003cc2:	6a1a      	ldr	r2, [r3, #32]
 8003cc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cc8:	677a      	str	r2, [r7, #116]	@ 0x74
 8003cca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003ccc:	ba12      	rev	r2, r2
 8003cce:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003cd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 8003cda:	4b12      	ldr	r3, [pc, #72]	@ (8003d24 <HASH_GetDigest+0x448>)
 8003cdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ce2:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003ce4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003ce6:	ba12      	rev	r2, r2
 8003ce8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003cea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cee:	3304      	adds	r3, #4
 8003cf0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d24 <HASH_GetDigest+0x448>)
 8003cf6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cfc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cfe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003d00:	ba12      	rev	r2, r2
 8003d02:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003d04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d08:	3304      	adds	r3, #4
 8003d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 8003d0e:	4b05      	ldr	r3, [pc, #20]	@ (8003d24 <HASH_GetDigest+0x448>)
 8003d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d16:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d1e:	ba12      	rev	r2, r2
 8003d20:	601a      	str	r2, [r3, #0]
      break;
 8003d22:	e0d3      	b.n	8003ecc <HASH_GetDigest+0x5f0>
 8003d24:	420c0710 	.word	0x420c0710
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d32:	617a      	str	r2, [r7, #20]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	ba12      	rev	r2, r2
 8003d38:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d3e:	3304      	adds	r3, #4
 8003d40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d4e:	61ba      	str	r2, [r7, #24]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	ba12      	rev	r2, r2
 8003d54:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695a      	ldr	r2, [r3, #20]
 8003d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d6a:	61fa      	str	r2, [r7, #28]
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	ba12      	rev	r2, r2
 8003d70:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d76:	3304      	adds	r3, #4
 8003d78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d86:	623a      	str	r2, [r7, #32]
 8003d88:	6a3a      	ldr	r2, [r7, #32]
 8003d8a:	ba12      	rev	r2, r2
 8003d8c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d92:	3304      	adds	r3, #4
 8003d94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69da      	ldr	r2, [r3, #28]
 8003d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003da2:	627a      	str	r2, [r7, #36]	@ 0x24
 8003da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da6:	ba12      	rev	r2, r2
 8003da8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dae:	3304      	adds	r3, #4
 8003db0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8003db4:	4b48      	ldr	r3, [pc, #288]	@ (8003ed8 <HASH_GetDigest+0x5fc>)
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dbc:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003dbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dc0:	ba12      	rev	r2, r2
 8003dc2:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003dc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dc8:	3304      	adds	r3, #4
 8003dca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8003dce:	4b42      	ldr	r3, [pc, #264]	@ (8003ed8 <HASH_GetDigest+0x5fc>)
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dda:	ba12      	rev	r2, r2
 8003ddc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003de2:	3304      	adds	r3, #4
 8003de4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8003de8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed8 <HASH_GetDigest+0x5fc>)
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003df0:	633a      	str	r2, [r7, #48]	@ 0x30
 8003df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003df4:	ba12      	rev	r2, r2
 8003df6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003df8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 8003e02:	4b35      	ldr	r3, [pc, #212]	@ (8003ed8 <HASH_GetDigest+0x5fc>)
 8003e04:	6a1a      	ldr	r2, [r3, #32]
 8003e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e0a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003e0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e0e:	ba12      	rev	r2, r2
 8003e10:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e16:	3304      	adds	r3, #4
 8003e18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 8003e1c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ed8 <HASH_GetDigest+0x5fc>)
 8003e1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e24:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003e26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e28:	ba12      	rev	r2, r2
 8003e2a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e30:	3304      	adds	r3, #4
 8003e32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 8003e36:	4b28      	ldr	r3, [pc, #160]	@ (8003ed8 <HASH_GetDigest+0x5fc>)
 8003e38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e42:	ba12      	rev	r2, r2
 8003e44:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 8003e50:	4b21      	ldr	r3, [pc, #132]	@ (8003ed8 <HASH_GetDigest+0x5fc>)
 8003e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e58:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e5c:	ba12      	rev	r2, r2
 8003e5e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003e60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e64:	3304      	adds	r3, #4
 8003e66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[12]);
 8003e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed8 <HASH_GetDigest+0x5fc>)
 8003e6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e72:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e76:	ba12      	rev	r2, r2
 8003e78:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e7e:	3304      	adds	r3, #4
 8003e80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[13]);
 8003e84:	4b14      	ldr	r3, [pc, #80]	@ (8003ed8 <HASH_GetDigest+0x5fc>)
 8003e86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e8c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003e8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e90:	ba12      	rev	r2, r2
 8003e92:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003e94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e98:	3304      	adds	r3, #4
 8003e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[14]);
 8003e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ed8 <HASH_GetDigest+0x5fc>)
 8003ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ea6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003ea8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003eaa:	ba12      	rev	r2, r2
 8003eac:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);
 8003eb8:	4b07      	ldr	r3, [pc, #28]	@ (8003ed8 <HASH_GetDigest+0x5fc>)
 8003eba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ebc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ec0:	653a      	str	r2, [r7, #80]	@ 0x50
 8003ec2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ec4:	ba12      	rev	r2, r2
 8003ec6:	601a      	str	r2, [r3, #0]
      break;
 8003ec8:	e000      	b.n	8003ecc <HASH_GetDigest+0x5f0>
      break;
 8003eca:	bf00      	nop
  }
}
 8003ecc:	bf00      	nop
 8003ece:	37dc      	adds	r7, #220	@ 0xdc
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	420c0710 	.word	0x420c0710

08003edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e08d      	b.n	800400a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fd fcc8 	bl	8001898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2224      	movs	r2, #36	@ 0x24
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0201 	bic.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d107      	bne.n	8003f56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	e006      	b.n	8003f64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d108      	bne.n	8003f7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	e007      	b.n	8003f8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fa0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69d9      	ldr	r1, [r3, #28]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1a      	ldr	r2, [r3, #32]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b20      	cmp	r3, #32
 8004026:	d138      	bne.n	800409a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004032:	2302      	movs	r3, #2
 8004034:	e032      	b.n	800409c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2224      	movs	r2, #36	@ 0x24
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004064:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6819      	ldr	r1, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0201 	orr.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	e000      	b.n	800409c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800409a:	2302      	movs	r3, #2
  }
}
 800409c:	4618      	mov	r0, r3
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	d139      	bne.n	8004132 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e033      	b.n	8004134 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2224      	movs	r2, #36	@ 0x24
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0201 	bic.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e000      	b.n	8004134 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004132:	2302      	movs	r3, #2
  }
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800414c:	230a      	movs	r3, #10
 800414e:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004150:	e002      	b.n	8004158 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3b01      	subs	r3, #1
 8004156:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f9      	bne.n	8004152 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800415e:	887b      	ldrh	r3, [r7, #2]
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004166:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	0c1b      	lsrs	r3, r3, #16
 800416e:	b29b      	uxth	r3, r3
 8004170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004174:	b29b      	uxth	r3, r3
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004182:	b480      	push	{r7}
 8004184:	b085      	sub	sp, #20
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800418e:	230a      	movs	r3, #10
 8004190:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004192:	e002      	b.n	800419a <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3b01      	subs	r3, #1
 8004198:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f9      	bne.n	8004194 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80041a0:	887b      	ldrh	r3, [r7, #2]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	0c1b      	lsrs	r3, r3, #16
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041b6:	b29b      	uxth	r3, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80041d0:	230a      	movs	r3, #10
 80041d2:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80041d4:	e002      	b.n	80041dc <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3b01      	subs	r3, #1
 80041da:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f9      	bne.n	80041d6 <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80041e2:	887b      	ldrh	r3, [r7, #2]
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041f8:	b29b      	uxth	r3, r3
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b086      	sub	sp, #24
 800420a:	af02      	add	r7, sp, #8
 800420c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0f3      	b.n	8004400 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fd fe8b 	bl	8001f48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2203      	movs	r2, #3
 8004236:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f009 fd1d 	bl	800dc7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7c1a      	ldrb	r2, [r3, #16]
 800424c:	f88d 2000 	strb.w	r2, [sp]
 8004250:	3304      	adds	r3, #4
 8004252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004254:	f009 fce1 	bl	800dc1a <USB_CoreInit>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2202      	movs	r2, #2
 8004262:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e0ca      	b.n	8004400 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f009 fd19 	bl	800dca8 <USB_SetCurrentMode>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0bb      	b.n	8004400 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004288:	2300      	movs	r3, #0
 800428a:	73fb      	strb	r3, [r7, #15]
 800428c:	e03f      	b.n	800430e <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800428e:	7bfa      	ldrb	r2, [r7, #15]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	440b      	add	r3, r1
 800429c:	3315      	adds	r3, #21
 800429e:	2201      	movs	r2, #1
 80042a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042a2:	7bfa      	ldrb	r2, [r7, #15]
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	440b      	add	r3, r1
 80042b0:	3314      	adds	r3, #20
 80042b2:	7bfa      	ldrb	r2, [r7, #15]
 80042b4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042b6:	7bfa      	ldrb	r2, [r7, #15]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	440b      	add	r3, r1
 80042c4:	3317      	adds	r3, #23
 80042c6:	2200      	movs	r2, #0
 80042c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	440b      	add	r3, r1
 80042d8:	3324      	adds	r3, #36	@ 0x24
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	440b      	add	r3, r1
 80042ec:	3328      	adds	r3, #40	@ 0x28
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	440b      	add	r3, r1
 8004302:	3304      	adds	r3, #4
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	3301      	adds	r3, #1
 800430c:	73fb      	strb	r3, [r7, #15]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	791b      	ldrb	r3, [r3, #4]
 8004312:	7bfa      	ldrb	r2, [r7, #15]
 8004314:	429a      	cmp	r2, r3
 8004316:	d3ba      	bcc.n	800428e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004318:	2300      	movs	r3, #0
 800431a:	73fb      	strb	r3, [r7, #15]
 800431c:	e044      	b.n	80043a8 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800431e:	7bfa      	ldrb	r2, [r7, #15]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	440b      	add	r3, r1
 800432c:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8004330:	2200      	movs	r2, #0
 8004332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004334:	7bfa      	ldrb	r2, [r7, #15]
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	440b      	add	r3, r1
 8004342:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004346:	7bfa      	ldrb	r2, [r7, #15]
 8004348:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800434a:	7bfa      	ldrb	r2, [r7, #15]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	440b      	add	r3, r1
 8004358:	f203 1357 	addw	r3, r3, #343	@ 0x157
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004360:	7bfa      	ldrb	r2, [r7, #15]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	440b      	add	r3, r1
 800436e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004376:	7bfa      	ldrb	r2, [r7, #15]
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	440b      	add	r3, r1
 8004384:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800438c:	7bfa      	ldrb	r2, [r7, #15]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	440b      	add	r3, r1
 800439a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
 80043a4:	3301      	adds	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	791b      	ldrb	r3, [r3, #4]
 80043ac:	7bfa      	ldrb	r2, [r7, #15]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d3b5      	bcc.n	800431e <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	7c1a      	ldrb	r2, [r3, #16]
 80043ba:	f88d 2000 	strb.w	r2, [sp]
 80043be:	3304      	adds	r3, #4
 80043c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043c2:	f009 fc94 	bl	800dcee <USB_DevInit>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e013      	b.n	8004400 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	7b1b      	ldrb	r3, [r3, #12]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d102      	bne.n	80043f4 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f001 fb6b 	bl	8005aca <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f00b faed 	bl	800f9d8 <USB_DevDisconnect>

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_PCD_Start+0x16>
 800441a:	2302      	movs	r3, #2
 800441c:	e012      	b.n	8004444 <HAL_PCD_Start+0x3c>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f009 fc13 	bl	800dc56 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f00b fabe 	bl	800f9b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f00b face 	bl	800f9fa <USB_ReadInterrupts>
 800445e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 faf2 	bl	8004a54 <PCD_EP_ISR_Handler>

    return;
 8004470:	e0de      	b.n	8004630 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004478:	2b00      	cmp	r3, #0
 800447a:	d010      	beq.n	800449e <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 800448a:	400b      	ands	r3, r1
 800448c:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f00c fa13 	bl	80108ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004494:	2100      	movs	r1, #0
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f8e1 	bl	800465e <HAL_PCD_SetAddress>

    return;
 800449c:	e0c8      	b.n	8004630 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d009      	beq.n	80044bc <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 80044b6:	400b      	ands	r3, r1
 80044b8:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80044ba:	e0b9      	b.n	8004630 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d009      	beq.n	80044da <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 80044d4:	400b      	ands	r3, r1
 80044d6:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80044d8:	e0aa      	b.n	8004630 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d029      	beq.n	8004538 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0204 	bic.w	r2, r2, #4
 80044f2:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0208 	bic.w	r2, r2, #8
 8004502:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 800450a:	2b01      	cmp	r3, #1
 800450c:	d107      	bne.n	800451e <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004516:	2100      	movs	r1, #0
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f001 faf8 	bl	8005b0e <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f893 	bl	800464a <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004532:	400b      	ands	r3, r1
 8004534:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004536:	e07b      	b.n	8004630 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800453e:	2b00      	cmp	r3, #0
 8004540:	d01c      	beq.n	800457c <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0208 	orr.w	r2, r2, #8
 8004550:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8004560:	400b      	ands	r3, r1
 8004562:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0204 	orr.w	r2, r2, #4
 8004572:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f85e 	bl	8004636 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800457a:	e059      	b.n	8004630 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004582:	2b00      	cmp	r3, #0
 8004584:	d033      	beq.n	80045ee <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8004594:	400b      	ands	r3, r1
 8004596:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d121      	bne.n	80045e6 <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0204 	orr.w	r2, r2, #4
 80045b0:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0208 	orr.w	r2, r2, #8
 80045c0:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d0:	089b      	lsrs	r3, r3, #2
 80045d2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80045dc:	2101      	movs	r1, #1
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f001 fa95 	bl	8005b0e <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80045e4:	e024      	b.n	8004630 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f825 	bl	8004636 <HAL_PCD_SuspendCallback>
    return;
 80045ec:	e020      	b.n	8004630 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00c      	beq.n	8004612 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8004606:	400b      	ands	r3, r1
 8004608:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f00c f947 	bl	801089e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004610:	e00e      	b.n	8004630 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d009      	beq.n	8004630 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800462a:	400b      	ands	r3, r1
 800462c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800462e:	bf00      	nop
  }
}
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	460b      	mov	r3, r1
 8004668:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_PCD_SetAddress+0x1a>
 8004674:	2302      	movs	r3, #2
 8004676:	e012      	b.n	800469e <HAL_PCD_SetAddress+0x40>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	78fa      	ldrb	r2, [r7, #3]
 800468c:	4611      	mov	r1, r2
 800468e:	4618      	mov	r0, r3
 8004690:	f00b f97e 	bl	800f990 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	4608      	mov	r0, r1
 80046b0:	4611      	mov	r1, r2
 80046b2:	461a      	mov	r2, r3
 80046b4:	4603      	mov	r3, r0
 80046b6:	70fb      	strb	r3, [r7, #3]
 80046b8:	460b      	mov	r3, r1
 80046ba:	803b      	strh	r3, [r7, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	da0f      	bge.n	80046ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	f003 0207 	and.w	r2, r3, #7
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	3310      	adds	r3, #16
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	4413      	add	r3, r2
 80046e0:	3304      	adds	r3, #4
 80046e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	705a      	strb	r2, [r3, #1]
 80046ea:	e00f      	b.n	800470c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	f003 0207 	and.w	r2, r3, #7
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	4413      	add	r3, r2
 8004702:	3304      	adds	r3, #4
 8004704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800470c:	78fb      	ldrb	r3, [r7, #3]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	b2da      	uxtb	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004718:	883b      	ldrh	r3, [r7, #0]
 800471a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	78ba      	ldrb	r2, [r7, #2]
 8004726:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004728:	78bb      	ldrb	r3, [r7, #2]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d102      	bne.n	8004734 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_PCD_EP_Open+0x9c>
 800473e:	2302      	movs	r3, #2
 8004740:	e00e      	b.n	8004760 <HAL_PCD_EP_Open+0xba>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68f9      	ldr	r1, [r7, #12]
 8004750:	4618      	mov	r0, r3
 8004752:	f009 faef 	bl	800dd34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 800475e:	7afb      	ldrb	r3, [r7, #11]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004778:	2b00      	cmp	r3, #0
 800477a:	da0f      	bge.n	800479c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	f003 0207 	and.w	r2, r3, #7
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	3310      	adds	r3, #16
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	4413      	add	r3, r2
 8004790:	3304      	adds	r3, #4
 8004792:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	705a      	strb	r2, [r3, #1]
 800479a:	e00f      	b.n	80047bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800479c:	78fb      	ldrb	r3, [r7, #3]
 800479e:	f003 0207 	and.w	r2, r3, #7
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	4413      	add	r3, r2
 80047b2:	3304      	adds	r3, #4
 80047b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_PCD_EP_Close+0x6e>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e00e      	b.n	80047f4 <HAL_PCD_EP_Close+0x8c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68f9      	ldr	r1, [r7, #12]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f009 fe05 	bl	800e3f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	460b      	mov	r3, r1
 800480a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800480c:	7afb      	ldrb	r3, [r7, #11]
 800480e:	f003 0207 	and.w	r2, r3, #7
 8004812:	4613      	mov	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	3304      	adds	r3, #4
 8004824:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2200      	movs	r2, #0
 8004836:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2200      	movs	r2, #0
 800483c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800483e:	7afb      	ldrb	r3, [r7, #11]
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	b2da      	uxtb	r2, r3
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6979      	ldr	r1, [r7, #20]
 8004850:	4618      	mov	r0, r3
 8004852:	f009 ff59 	bl	800e708 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800486c:	78fb      	ldrb	r3, [r7, #3]
 800486e:	f003 0207 	and.w	r2, r3, #7
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	440b      	add	r3, r1
 800487e:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8004882:	681b      	ldr	r3, [r3, #0]
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	460b      	mov	r3, r1
 800489e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048a0:	7afb      	ldrb	r3, [r7, #11]
 80048a2:	f003 0207 	and.w	r2, r3, #7
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	3310      	adds	r3, #16
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	3304      	adds	r3, #4
 80048b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2200      	movs	r2, #0
 80048d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2201      	movs	r2, #1
 80048dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048de:	7afb      	ldrb	r3, [r7, #11]
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6979      	ldr	r1, [r7, #20]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f009 ff09 	bl	800e708 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	7912      	ldrb	r2, [r2, #4]
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e040      	b.n	80049a0 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800491e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004922:	2b00      	cmp	r3, #0
 8004924:	da0f      	bge.n	8004946 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	f003 0207 	and.w	r2, r3, #7
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	3310      	adds	r3, #16
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	4413      	add	r3, r2
 800493a:	3304      	adds	r3, #4
 800493c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	705a      	strb	r2, [r3, #1]
 8004944:	e00d      	b.n	8004962 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004946:	78fa      	ldrb	r2, [r7, #3]
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	4413      	add	r3, r2
 8004958:	3304      	adds	r3, #4
 800495a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	b2da      	uxtb	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_PCD_EP_SetStall+0x82>
 800497e:	2302      	movs	r3, #2
 8004980:	e00e      	b.n	80049a0 <HAL_PCD_EP_SetStall+0xa0>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68f9      	ldr	r1, [r7, #12]
 8004990:	4618      	mov	r0, r3
 8004992:	f00a ff23 	bl	800f7dc <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	7912      	ldrb	r2, [r2, #4]
 80049be:	4293      	cmp	r3, r2
 80049c0:	d901      	bls.n	80049c6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e042      	b.n	8004a4c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	da0f      	bge.n	80049ee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	f003 0207 	and.w	r2, r3, #7
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	3310      	adds	r3, #16
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	3304      	adds	r3, #4
 80049e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	705a      	strb	r2, [r3, #1]
 80049ec:	e00f      	b.n	8004a0e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	f003 0207 	and.w	r2, r3, #7
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	4413      	add	r3, r2
 8004a04:	3304      	adds	r3, #4
 8004a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d101      	bne.n	8004a2e <HAL_PCD_EP_ClrStall+0x86>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	e00e      	b.n	8004a4c <HAL_PCD_EP_ClrStall+0xa4>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68f9      	ldr	r1, [r7, #12]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f00a ff13 	bl	800f868 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08e      	sub	sp, #56	@ 0x38
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004a5c:	e326      	b.n	80050ac <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a64:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8004a66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8004a72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f040 8124 	bne.w	8004cc4 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004a7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d13e      	bne.n	8004b04 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b89      	ldr	r3, [pc, #548]	@ (8004cb4 <PCD_EP_ISR_Handler+0x260>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	60bb      	str	r3, [r7, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a9c:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3314      	adds	r3, #20
 8004aa2:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004aae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	0c1b      	lsrs	r3, r3, #16
 8004ab6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004abc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac0:	695a      	ldr	r2, [r3, #20]
 8004ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	441a      	add	r2, r3
 8004ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004acc:	2100      	movs	r1, #0
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f00b fecb 	bl	801086a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	7c5b      	ldrb	r3, [r3, #17]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 82e6 	beq.w	80050ac <PCD_EP_ISR_Handler+0x658>
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f040 82e1 	bne.w	80050ac <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	7c5b      	ldrb	r3, [r3, #17]
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	745a      	strb	r2, [r3, #17]
 8004b02:	e2d3      	b.n	80050ac <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004b0a:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004b14:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004b16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d027      	beq.n	8004b6e <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	4619      	mov	r1, r3
 8004b28:	4610      	mov	r0, r2
 8004b2a:	f7ff fb09 	bl	8004140 <PCD_GET_EP_RX_CNT>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	461a      	mov	r2, r3
 8004b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b34:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8004b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b42:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b46:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f00a ffc5 	bl	800fad8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	4b58      	ldr	r3, [pc, #352]	@ (8004cb8 <PCD_EP_ISR_Handler+0x264>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b64:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f00b fe52 	bl	8010810 <HAL_PCD_SetupStageCallback>
 8004b6c:	e29e      	b.n	80050ac <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8004b6e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f280 829a 	bge.w	80050ac <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8004cb8 <PCD_EP_ISR_Handler+0x264>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b8e:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f7ff fad0 	bl	8004140 <PCD_GET_EP_RX_CNT>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d019      	beq.n	8004be4 <PCD_EP_ISR_Handler+0x190>
 8004bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d015      	beq.n	8004be4 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bbe:	6959      	ldr	r1, [r3, #20]
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	f00a ff85 	bl	800fad8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd0:	695a      	ldr	r2, [r3, #20]
 8004bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	441a      	add	r2, r3
 8004bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bda:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004bdc:	2100      	movs	r1, #0
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f00b fe28 	bl	8010834 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004bec:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004bee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 825a 	bne.w	80050ac <PCD_EP_ISR_Handler+0x658>
 8004bf8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004bfa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004bfe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c02:	f000 8253 	beq.w	80050ac <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004c06:	4b2d      	ldr	r3, [pc, #180]	@ (8004cbc <PCD_EP_ISR_Handler+0x268>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8004cbc <PCD_EP_ISR_Handler+0x268>)
 8004c0c:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8004c10:	6053      	str	r3, [r2, #4]
 8004c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <PCD_EP_ISR_Handler+0x1d4>
 8004c1a:	4b28      	ldr	r3, [pc, #160]	@ (8004cbc <PCD_EP_ISR_Handler+0x268>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	4a27      	ldr	r2, [pc, #156]	@ (8004cbc <PCD_EP_ISR_Handler+0x268>)
 8004c20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c24:	6053      	str	r3, [r2, #4]
 8004c26:	e02e      	b.n	8004c86 <PCD_EP_ISR_Handler+0x232>
 8004c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c2e:	d814      	bhi.n	8004c5a <PCD_EP_ISR_Handler+0x206>
 8004c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <PCD_EP_ISR_Handler+0x1f6>
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	3301      	adds	r3, #1
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004cbc <PCD_EP_ISR_Handler+0x268>)
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	069b      	lsls	r3, r3, #26
 8004c52:	491a      	ldr	r1, [pc, #104]	@ (8004cbc <PCD_EP_ISR_Handler+0x268>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	604b      	str	r3, [r1, #4]
 8004c58:	e015      	b.n	8004c86 <PCD_EP_ISR_Handler+0x232>
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 031f 	and.w	r3, r3, #31
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <PCD_EP_ISR_Handler+0x220>
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	4b11      	ldr	r3, [pc, #68]	@ (8004cbc <PCD_EP_ISR_Handler+0x268>)
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	069b      	lsls	r3, r3, #26
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	4a0f      	ldr	r2, [pc, #60]	@ (8004cbc <PCD_EP_ISR_Handler+0x268>)
 8004c80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c84:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc0 <PCD_EP_ISR_Handler+0x26c>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	e1fb      	b.n	80050ac <PCD_EP_ISR_Handler+0x658>
 8004cb4:	07ff8f0f 	.word	0x07ff8f0f
 8004cb8:	07ff0f8f 	.word	0x07ff0f8f
 8004cbc:	40016400 	.word	0x40016400
 8004cc0:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8004cd6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f280 80bd 	bge.w	8004e5a <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4b9e      	ldr	r3, [pc, #632]	@ (8004f6c <PCD_EP_ISR_Handler+0x518>)
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d0a:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004d0c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	4413      	add	r3, r2
 8004d20:	3304      	adds	r3, #4
 8004d22:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d26:	7b1b      	ldrb	r3, [r3, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d116      	bne.n	8004d5a <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	4619      	mov	r1, r3
 8004d36:	4610      	mov	r0, r2
 8004d38:	f7ff fa02 	bl	8004140 <PCD_GET_EP_RX_CNT>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8004d40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d067      	beq.n	8004e16 <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6818      	ldr	r0, [r3, #0]
 8004d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d4c:	6959      	ldr	r1, [r3, #20]
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d50:	88da      	ldrh	r2, [r3, #6]
 8004d52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d54:	f00a fec0 	bl	800fad8 <USB_ReadPMA>
 8004d58:	e05d      	b.n	8004e16 <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5c:	78db      	ldrb	r3, [r3, #3]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d108      	bne.n	8004d74 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004d62:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004d64:	461a      	mov	r2, r3
 8004d66:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f9ad 	bl	80050c8 <HAL_PCD_EP_DB_Receive>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004d72:	e050      	b.n	8004e16 <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4b7a      	ldr	r3, [pc, #488]	@ (8004f70 <PCD_EP_ISR_Handler+0x51c>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	441a      	add	r2, r3
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004da2:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d016      	beq.n	8004dea <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f7ff f9db 	bl	8004182 <PCD_GET_EP_DBUF0_CNT>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8004dd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01f      	beq.n	8004e16 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ddc:	6959      	ldr	r1, [r3, #20]
 8004dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004de0:	891a      	ldrh	r2, [r3, #8]
 8004de2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004de4:	f00a fe78 	bl	800fad8 <USB_ReadPMA>
 8004de8:	e015      	b.n	8004e16 <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	4619      	mov	r1, r3
 8004df4:	4610      	mov	r0, r2
 8004df6:	f7ff f9e5 	bl	80041c4 <PCD_GET_EP_DBUF1_CNT>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8004dfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0a:	6959      	ldr	r1, [r3, #20]
 8004e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0e:	895a      	ldrh	r2, [r3, #10]
 8004e10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e12:	f00a fe61 	bl	800fad8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e18:	69da      	ldr	r2, [r3, #28]
 8004e1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e1c:	441a      	add	r2, r3
 8004e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e24:	695a      	ldr	r2, [r3, #20]
 8004e26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e28:	441a      	add	r2, r3
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e2c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d004      	beq.n	8004e40 <PCD_EP_ISR_Handler+0x3ec>
 8004e36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d206      	bcs.n	8004e4e <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	4619      	mov	r1, r3
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f00b fcf4 	bl	8010834 <HAL_PCD_DataOutStageCallback>
 8004e4c:	e005      	b.n	8004e5a <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004e54:	4618      	mov	r0, r3
 8004e56:	f009 fc57 	bl	800e708 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8004e5a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 8123 	beq.w	80050ac <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8004e66:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	3310      	adds	r3, #16
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	4413      	add	r3, r2
 8004e78:	3304      	adds	r3, #4
 8004e7a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	461a      	mov	r2, r3
 8004e82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	4b39      	ldr	r3, [pc, #228]	@ (8004f74 <PCD_EP_ISR_Handler+0x520>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ea2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ea6:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eaa:	78db      	ldrb	r3, [r3, #3]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	f040 80b8 	bne.w	8005022 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eba:	7b1b      	ldrb	r3, [r3, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80a9 	beq.w	8005014 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ec2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d055      	beq.n	8004f78 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ece:	785b      	ldrb	r3, [r3, #1]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d124      	bne.n	8004f1e <PCD_EP_ISR_Handler+0x4ca>
 8004ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ede:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004eee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ef2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f16:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	e07a      	b.n	8005014 <PCD_EP_ISR_Handler+0x5c0>
 8004f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f20:	785b      	ldrb	r3, [r3, #1]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d176      	bne.n	8005014 <PCD_EP_ISR_Handler+0x5c0>
 8004f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f44:	b292      	uxth	r2, r2
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004f52:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	e054      	b.n	8005014 <PCD_EP_ISR_Handler+0x5c0>
 8004f6a:	bf00      	nop
 8004f6c:	07ff0f8f 	.word	0x07ff0f8f
 8004f70:	07ff8f8f 	.word	0x07ff8f8f
 8004f74:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f7a:	785b      	ldrb	r3, [r3, #1]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d124      	bne.n	8004fca <PCD_EP_ISR_Handler+0x576>
 8004f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f9e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004fa2:	605a      	str	r2, [r3, #4]
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004fae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004fbe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004fc2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004fc6:	605a      	str	r2, [r3, #4]
 8004fc8:	e024      	b.n	8005014 <PCD_EP_ISR_Handler+0x5c0>
 8004fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fcc:	785b      	ldrb	r3, [r3, #1]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d120      	bne.n	8005014 <PCD_EP_ISR_Handler+0x5c0>
 8004fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004fdc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004fec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ff0:	b292      	uxth	r2, r2
 8004ff2:	605a      	str	r2, [r3, #4]
 8004ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004ffe:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800500c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005010:	6852      	ldr	r2, [r2, #4]
 8005012:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	4619      	mov	r1, r3
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f00b fc25 	bl	801086a <HAL_PCD_DataInStageCallback>
 8005020:	e044      	b.n	80050ac <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005022:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005028:	2b00      	cmp	r3, #0
 800502a:	d139      	bne.n	80050a0 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800502c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005036:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	0c1b      	lsrs	r3, r3, #16
 800503e:	b29b      	uxth	r3, r3
 8005040:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005044:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8005046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800504c:	429a      	cmp	r2, r3
 800504e:	d906      	bls.n	800505e <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8005050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005052:	699a      	ldr	r2, [r3, #24]
 8005054:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005056:	1ad2      	subs	r2, r2, r3
 8005058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505a:	619a      	str	r2, [r3, #24]
 800505c:	e002      	b.n	8005064 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 800505e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005060:	2200      	movs	r2, #0
 8005062:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d106      	bne.n	800507a <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800506c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	4619      	mov	r1, r3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f00b fbf9 	bl	801086a <HAL_PCD_DataInStageCallback>
 8005078:	e018      	b.n	80050ac <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800507a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507c:	695a      	ldr	r2, [r3, #20]
 800507e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005080:	441a      	add	r2, r3
 8005082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005084:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005088:	69da      	ldr	r2, [r3, #28]
 800508a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800508c:	441a      	add	r2, r3
 800508e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005090:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005098:	4618      	mov	r0, r3
 800509a:	f009 fb35 	bl	800e708 <USB_EPStartXfer>
 800509e:	e005      	b.n	80050ac <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80050a0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80050a2:	461a      	mov	r2, r3
 80050a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f8e8 	bl	800527c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f47f acd1 	bne.w	8004a5e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3738      	adds	r7, #56	@ 0x38
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop

080050c8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	@ 0x28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	4613      	mov	r3, r2
 80050d4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d062      	beq.n	80051a6 <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f7ff f849 	bl	8004182 <PCD_GET_EP_DBUF0_CNT>
 80050f0:	4603      	mov	r3, r0
 80050f2:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	699a      	ldr	r2, [r3, #24]
 80050f8:	8bfb      	ldrh	r3, [r7, #30]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d306      	bcc.n	800510c <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	8bfb      	ldrh	r3, [r7, #30]
 8005104:	1ad2      	subs	r2, r2, r3
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	619a      	str	r2, [r3, #24]
 800510a:	e002      	b.n	8005112 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2200      	movs	r2, #0
 8005110:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d11b      	bne.n	8005152 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	4b52      	ldr	r3, [pc, #328]	@ (8005274 <HAL_PCD_EP_DB_Receive+0x1ac>)
 800512c:	4013      	ands	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005136:	61bb      	str	r3, [r7, #24]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	441a      	add	r2, r3
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800514c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005150:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005158:	2b00      	cmp	r3, #0
 800515a:	d017      	beq.n	800518c <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	4b42      	ldr	r3, [pc, #264]	@ (8005278 <HAL_PCD_EP_DB_Receive+0x1b0>)
 800516e:	4013      	ands	r3, r2
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	441a      	add	r2, r3
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005186:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800518a:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 800518c:	8bfb      	ldrh	r3, [r7, #30]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d06b      	beq.n	800526a <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	6959      	ldr	r1, [r3, #20]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	891a      	ldrh	r2, [r3, #8]
 800519e:	8bfb      	ldrh	r3, [r7, #30]
 80051a0:	f00a fc9a 	bl	800fad8 <USB_ReadPMA>
 80051a4:	e061      	b.n	800526a <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f7ff f807 	bl	80041c4 <PCD_GET_EP_DBUF1_CNT>
 80051b6:	4603      	mov	r3, r0
 80051b8:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	8bfb      	ldrh	r3, [r7, #30]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d306      	bcc.n	80051d2 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	699a      	ldr	r2, [r3, #24]
 80051c8:	8bfb      	ldrh	r3, [r7, #30]
 80051ca:	1ad2      	subs	r2, r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	619a      	str	r2, [r3, #24]
 80051d0:	e002      	b.n	80051d8 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2200      	movs	r2, #0
 80051d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d11b      	bne.n	8005218 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	4b20      	ldr	r3, [pc, #128]	@ (8005274 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80051fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	441a      	add	r2, r3
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005216:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d117      	bne.n	8005252 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4b11      	ldr	r3, [pc, #68]	@ (8005278 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8005234:	4013      	ands	r3, r2
 8005236:	623b      	str	r3, [r7, #32]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	441a      	add	r2, r3
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800524c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005250:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8005252:	8bfb      	ldrh	r3, [r7, #30]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d008      	beq.n	800526a <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	6959      	ldr	r1, [r3, #20]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	895a      	ldrh	r2, [r3, #10]
 8005264:	8bfb      	ldrh	r3, [r7, #30]
 8005266:	f00a fc37 	bl	800fad8 <USB_ReadPMA>
    }
  }

  return count;
 800526a:	8bfb      	ldrh	r3, [r7, #30]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3728      	adds	r7, #40	@ 0x28
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	07ffbf8f 	.word	0x07ffbf8f
 8005278:	07ff8f8f 	.word	0x07ff8f8f

0800527c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08e      	sub	sp, #56	@ 0x38
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	4613      	mov	r3, r2
 8005288:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800528a:	88fb      	ldrh	r3, [r7, #6]
 800528c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 81d5 	beq.w	8005640 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	4619      	mov	r1, r3
 80052a0:	4610      	mov	r0, r2
 80052a2:	f7fe ff6e 	bl	8004182 <PCD_GET_EP_DBUF0_CNT>
 80052a6:	4603      	mov	r3, r0
 80052a8:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	8bfb      	ldrh	r3, [r7, #30]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d906      	bls.n	80052c2 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	699a      	ldr	r2, [r3, #24]
 80052b8:	8bfb      	ldrh	r3, [r7, #30]
 80052ba:	1ad2      	subs	r2, r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	619a      	str	r2, [r3, #24]
 80052c0:	e002      	b.n	80052c8 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2200      	movs	r2, #0
 80052c6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f040 80c1 	bne.w	8005454 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	785b      	ldrb	r3, [r3, #1]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d124      	bne.n	8005324 <HAL_PCD_EP_DB_Transmit+0xa8>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80052f8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005308:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005318:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800531c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	e024      	b.n	800536e <HAL_PCD_EP_DB_Transmit+0xf2>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	785b      	ldrb	r3, [r3, #1]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d120      	bne.n	800536e <HAL_PCD_EP_DB_Transmit+0xf2>
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005336:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005346:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800534a:	b292      	uxth	r2, r2
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005358:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005366:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	785b      	ldrb	r3, [r3, #1]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d124      	bne.n	80053c0 <HAL_PCD_EP_DB_Transmit+0x144>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005380:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005390:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005394:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005398:	605a      	str	r2, [r3, #4]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80053b8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80053bc:	605a      	str	r2, [r3, #4]
 80053be:	e024      	b.n	800540a <HAL_PCD_EP_DB_Transmit+0x18e>
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	785b      	ldrb	r3, [r3, #1]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d120      	bne.n	800540a <HAL_PCD_EP_DB_Transmit+0x18e>
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80053e6:	b292      	uxth	r2, r2
 80053e8:	605a      	str	r2, [r3, #4]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80053f4:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005402:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005406:	6852      	ldr	r2, [r2, #4]
 8005408:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	4619      	mov	r1, r3
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f00b fa2a 	bl	801086a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 82e5 	beq.w	80059ec <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b8e      	ldr	r3, [pc, #568]	@ (800566c <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8005434:	4013      	ands	r3, r2
 8005436:	637b      	str	r3, [r7, #52]	@ 0x34
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	441a      	add	r2, r3
 8005446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005448:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800544c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e2cb      	b.n	80059ec <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d017      	beq.n	800548e <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4b7f      	ldr	r3, [pc, #508]	@ (800566c <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8005470:	4013      	ands	r3, r2
 8005472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	441a      	add	r2, r3
 8005482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005484:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800548c:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005494:	2b01      	cmp	r3, #1
 8005496:	f040 82a9 	bne.w	80059ec <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	8bfb      	ldrh	r3, [r7, #30]
 80054a0:	441a      	add	r2, r3
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	69da      	ldr	r2, [r3, #28]
 80054aa:	8bfb      	ldrh	r3, [r7, #30]
 80054ac:	441a      	add	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	6a1a      	ldr	r2, [r3, #32]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d309      	bcc.n	80054d2 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	6a1a      	ldr	r2, [r3, #32]
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	1ad2      	subs	r2, r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	621a      	str	r2, [r3, #32]
 80054d0:	e014      	b.n	80054fc <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 80054da:	8bfb      	ldrh	r3, [r7, #30]
 80054dc:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80054e6:	e009      	b.n	80054fc <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2200      	movs	r2, #0
 80054fa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	785b      	ldrb	r3, [r3, #1]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d16a      	bne.n	80055da <HAL_PCD_EP_DB_Transmit+0x35e>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800550e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800551e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005522:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552a:	2b00      	cmp	r3, #0
 800552c:	d112      	bne.n	8005554 <HAL_PCD_EP_DB_Transmit+0x2d8>
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005538:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005548:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800554c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	e06a      	b.n	800562a <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005556:	2b3e      	cmp	r3, #62	@ 0x3e
 8005558:	d81e      	bhi.n	8005598 <HAL_PCD_EP_DB_Transmit+0x31c>
 800555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555c:	085b      	lsrs	r3, r3, #1
 800555e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <HAL_PCD_EP_DB_Transmit+0x2f4>
 800556a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556c:	3301      	adds	r3, #1
 800556e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800557a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800557e:	6819      	ldr	r1, [r3, #0]
 8005580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005582:	069a      	lsls	r2, r3, #26
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800558e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005592:	430a      	orrs	r2, r1
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	e048      	b.n	800562a <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	f003 031f 	and.w	r3, r3, #31
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d102      	bne.n	80055ae <HAL_PCD_EP_DB_Transmit+0x332>
 80055a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055aa:	3b01      	subs	r3, #1
 80055ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c0:	069b      	lsls	r3, r3, #26
 80055c2:	431a      	orrs	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055d2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	e027      	b.n	800562a <HAL_PCD_EP_DB_Transmit+0x3ae>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	785b      	ldrb	r3, [r3, #1]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d123      	bne.n	800562a <HAL_PCD_EP_DB_Transmit+0x3ae>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005600:	b292      	uxth	r2, r2
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800560e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005616:	041a      	lsls	r2, r3, #16
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005622:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005626:	430a      	orrs	r2, r1
 8005628:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	6959      	ldr	r1, [r3, #20]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	891a      	ldrh	r2, [r3, #8]
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	b29b      	uxth	r3, r3
 800563a:	f00a f9ec 	bl	800fa16 <USB_WritePMA>
 800563e:	e1d5      	b.n	80059ec <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f7fe fdba 	bl	80041c4 <PCD_GET_EP_DBUF1_CNT>
 8005650:	4603      	mov	r3, r0
 8005652:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	8bfb      	ldrh	r3, [r7, #30]
 800565a:	429a      	cmp	r2, r3
 800565c:	d308      	bcc.n	8005670 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	8bfb      	ldrh	r3, [r7, #30]
 8005664:	1ad2      	subs	r2, r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	619a      	str	r2, [r3, #24]
 800566a:	e004      	b.n	8005676 <HAL_PCD_EP_DB_Transmit+0x3fa>
 800566c:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2200      	movs	r2, #0
 8005674:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f040 80c1 	bne.w	8005802 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d124      	bne.n	80056d2 <HAL_PCD_EP_DB_Transmit+0x456>
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005692:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056a6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056ca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	e024      	b.n	800571c <HAL_PCD_EP_DB_Transmit+0x4a0>
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	785b      	ldrb	r3, [r3, #1]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d120      	bne.n	800571c <HAL_PCD_EP_DB_Transmit+0x4a0>
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056f8:	b292      	uxth	r2, r2
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005706:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005714:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005718:	6812      	ldr	r2, [r2, #0]
 800571a:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	785b      	ldrb	r3, [r3, #1]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d124      	bne.n	800576e <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800572e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800573e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005742:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005746:	605a      	str	r2, [r3, #4]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005752:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005762:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005766:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800576a:	605a      	str	r2, [r3, #4]
 800576c:	e024      	b.n	80057b8 <HAL_PCD_EP_DB_Transmit+0x53c>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	785b      	ldrb	r3, [r3, #1]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d120      	bne.n	80057b8 <HAL_PCD_EP_DB_Transmit+0x53c>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005780:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005790:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005794:	b292      	uxth	r2, r2
 8005796:	605a      	str	r2, [r3, #4]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80057a2:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80057b4:	6852      	ldr	r2, [r2, #4]
 80057b6:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	4619      	mov	r1, r3
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f00b f853 	bl	801086a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f040 810e 	bne.w	80059ec <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	4b95      	ldr	r3, [pc, #596]	@ (8005a38 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80057e2:	4013      	ands	r3, r2
 80057e4:	623b      	str	r3, [r7, #32]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	441a      	add	r2, r3
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	e0f4      	b.n	80059ec <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005802:	88fb      	ldrh	r3, [r7, #6]
 8005804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d117      	bne.n	800583c <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	4b86      	ldr	r3, [pc, #536]	@ (8005a38 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 800581e:	4013      	ands	r3, r2
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	441a      	add	r2, r3
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583a:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005842:	2b01      	cmp	r3, #1
 8005844:	f040 80d2 	bne.w	80059ec <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	695a      	ldr	r2, [r3, #20]
 800584c:	8bfb      	ldrh	r3, [r7, #30]
 800584e:	441a      	add	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	69da      	ldr	r2, [r3, #28]
 8005858:	8bfb      	ldrh	r3, [r7, #30]
 800585a:	441a      	add	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	6a1a      	ldr	r2, [r3, #32]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	429a      	cmp	r2, r3
 800586a:	d309      	bcc.n	8005880 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6a1a      	ldr	r2, [r3, #32]
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	1ad2      	subs	r2, r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	621a      	str	r2, [r3, #32]
 800587e:	e014      	b.n	80058aa <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d106      	bne.n	8005896 <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8005888:	8bfb      	ldrh	r3, [r7, #30]
 800588a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005894:	e009      	b.n	80058aa <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2200      	movs	r2, #0
 80058a0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	785b      	ldrb	r3, [r3, #1]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d16a      	bne.n	8005988 <HAL_PCD_EP_DB_Transmit+0x70c>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058d0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80058d4:	605a      	str	r2, [r3, #4]
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d112      	bne.n	8005902 <HAL_PCD_EP_DB_Transmit+0x686>
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80058fe:	605a      	str	r2, [r3, #4]
 8005900:	e06a      	b.n	80059d8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	2b3e      	cmp	r3, #62	@ 0x3e
 8005906:	d81e      	bhi.n	8005946 <HAL_PCD_EP_DB_Transmit+0x6ca>
 8005908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590a:	085b      	lsrs	r3, r3, #1
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <HAL_PCD_EP_DB_Transmit+0x6a2>
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	3301      	adds	r3, #1
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005928:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800592c:	6859      	ldr	r1, [r3, #4]
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	069a      	lsls	r2, r3, #26
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800593c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005940:	430a      	orrs	r2, r1
 8005942:	605a      	str	r2, [r3, #4]
 8005944:	e048      	b.n	80059d8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	61bb      	str	r3, [r7, #24]
 800594c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594e:	f003 031f 	and.w	r3, r3, #31
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <HAL_PCD_EP_DB_Transmit+0x6e0>
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	3b01      	subs	r3, #1
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005966:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	069b      	lsls	r3, r3, #26
 8005970:	431a      	orrs	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800597c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005980:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	e027      	b.n	80059d8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	785b      	ldrb	r3, [r3, #1]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d123      	bne.n	80059d8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800599a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059ae:	b292      	uxth	r2, r2
 80059b0:	605a      	str	r2, [r3, #4]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059c0:	6859      	ldr	r1, [r3, #4]
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	041a      	lsls	r2, r3, #16
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059d4:	430a      	orrs	r2, r1
 80059d6:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6818      	ldr	r0, [r3, #0]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	6959      	ldr	r1, [r3, #20]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	895a      	ldrh	r2, [r3, #10]
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f00a f815 	bl	800fa16 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	461a      	mov	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	4b0f      	ldr	r3, [pc, #60]	@ (8005a3c <HAL_PCD_EP_DB_Transmit+0x7c0>)
 80059fe:	4013      	ands	r3, r2
 8005a00:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a04:	f083 0310 	eor.w	r3, r3, #16
 8005a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0c:	f083 0320 	eor.w	r3, r3, #32
 8005a10:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	441a      	add	r2, r3
 8005a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a2a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3738      	adds	r7, #56	@ 0x38
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	07ff8f8f 	.word	0x07ff8f8f
 8005a3c:	07ff8fbf 	.word	0x07ff8fbf

08005a40 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	607b      	str	r3, [r7, #4]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	817b      	strh	r3, [r7, #10]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005a52:	897b      	ldrh	r3, [r7, #10]
 8005a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00c      	beq.n	8005a78 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a5e:	897b      	ldrh	r3, [r7, #10]
 8005a60:	f003 0207 	and.w	r2, r3, #7
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	3310      	adds	r3, #16
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4413      	add	r3, r2
 8005a72:	3304      	adds	r3, #4
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	e00a      	b.n	8005a8e <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a78:	897a      	ldrh	r2, [r7, #10]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005a8e:	893b      	ldrh	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d107      	bne.n	8005aa4 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2200      	movs	r2, #0
 8005a98:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	80da      	strh	r2, [r3, #6]
 8005aa2:	e00b      	b.n	8005abc <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	0c1b      	lsrs	r3, r3, #16
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b085      	sub	sp, #20
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aec:	f043 0201 	orr.w	r2, r3, #1
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af8:	f043 0202 	orr.w	r2, r3, #2
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	460b      	mov	r3, r1
 8005b18:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
	...

08005b28 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8005b2c:	4b05      	ldr	r3, [pc, #20]	@ (8005b44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b30:	4a04      	ldr	r2, [pc, #16]	@ (8005b44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005b32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005b36:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005b38:	bf00      	nop
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	44020800 	.word	0x44020800

08005b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b088      	sub	sp, #32
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d102      	bne.n	8005b5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	f000 bc28 	b.w	80063ac <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b5c:	4b94      	ldr	r3, [pc, #592]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	f003 0318 	and.w	r3, r3, #24
 8005b64:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005b66:	4b92      	ldr	r3, [pc, #584]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0310 	and.w	r3, r3, #16
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d05b      	beq.n	8005c34 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d005      	beq.n	8005b8e <HAL_RCC_OscConfig+0x46>
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	2b18      	cmp	r3, #24
 8005b86:	d114      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d111      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d102      	bne.n	8005b9c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	f000 bc08 	b.w	80063ac <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005b9c:	4b84      	ldr	r3, [pc, #528]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	041b      	lsls	r3, r3, #16
 8005baa:	4981      	ldr	r1, [pc, #516]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005bb0:	e040      	b.n	8005c34 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d023      	beq.n	8005c02 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005bba:	4b7d      	ldr	r3, [pc, #500]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a7c      	ldr	r2, [pc, #496]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc6:	f7fc fe81 	bl	80028cc <HAL_GetTick>
 8005bca:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005bce:	f7fc fe7d 	bl	80028cc <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e3e5      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005be0:	4b73      	ldr	r3, [pc, #460]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0f0      	beq.n	8005bce <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005bec:	4b70      	ldr	r3, [pc, #448]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	041b      	lsls	r3, r3, #16
 8005bfa:	496d      	ldr	r1, [pc, #436]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	618b      	str	r3, [r1, #24]
 8005c00:	e018      	b.n	8005c34 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005c02:	4b6b      	ldr	r3, [pc, #428]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a6a      	ldr	r2, [pc, #424]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0e:	f7fc fe5d 	bl	80028cc <HAL_GetTick>
 8005c12:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005c14:	e008      	b.n	8005c28 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005c16:	f7fc fe59 	bl	80028cc <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e3c1      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005c28:	4b61      	ldr	r3, [pc, #388]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1f0      	bne.n	8005c16 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 80a0 	beq.w	8005d82 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	2b10      	cmp	r3, #16
 8005c46:	d005      	beq.n	8005c54 <HAL_RCC_OscConfig+0x10c>
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	2b18      	cmp	r3, #24
 8005c4c:	d109      	bne.n	8005c62 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d106      	bne.n	8005c62 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f040 8092 	bne.w	8005d82 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e3a4      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c6a:	d106      	bne.n	8005c7a <HAL_RCC_OscConfig+0x132>
 8005c6c:	4b50      	ldr	r3, [pc, #320]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a4f      	ldr	r2, [pc, #316]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	e058      	b.n	8005d2c <HAL_RCC_OscConfig+0x1e4>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d112      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x160>
 8005c82:	4b4b      	ldr	r3, [pc, #300]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a4a      	ldr	r2, [pc, #296]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005c88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	4b48      	ldr	r3, [pc, #288]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a47      	ldr	r2, [pc, #284]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005c94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	4b45      	ldr	r3, [pc, #276]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a44      	ldr	r2, [pc, #272]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005ca0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	e041      	b.n	8005d2c <HAL_RCC_OscConfig+0x1e4>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cb0:	d112      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x190>
 8005cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a3e      	ldr	r2, [pc, #248]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a3b      	ldr	r2, [pc, #236]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005cc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	4b39      	ldr	r3, [pc, #228]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a38      	ldr	r2, [pc, #224]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	e029      	b.n	8005d2c <HAL_RCC_OscConfig+0x1e4>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005ce0:	d112      	bne.n	8005d08 <HAL_RCC_OscConfig+0x1c0>
 8005ce2:	4b33      	ldr	r3, [pc, #204]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a32      	ldr	r2, [pc, #200]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005ce8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	4b30      	ldr	r3, [pc, #192]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a2f      	ldr	r2, [pc, #188]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005cf4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	e011      	b.n	8005d2c <HAL_RCC_OscConfig+0x1e4>
 8005d08:	4b29      	ldr	r3, [pc, #164]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a28      	ldr	r2, [pc, #160]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	4b26      	ldr	r3, [pc, #152]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a25      	ldr	r2, [pc, #148]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	4b23      	ldr	r3, [pc, #140]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a22      	ldr	r2, [pc, #136]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005d26:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d013      	beq.n	8005d5c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d34:	f7fc fdca 	bl	80028cc <HAL_GetTick>
 8005d38:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d3a:	e008      	b.n	8005d4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005d3c:	f7fc fdc6 	bl	80028cc <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b64      	cmp	r3, #100	@ 0x64
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e32e      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d4e:	4b18      	ldr	r3, [pc, #96]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0f0      	beq.n	8005d3c <HAL_RCC_OscConfig+0x1f4>
 8005d5a:	e012      	b.n	8005d82 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5c:	f7fc fdb6 	bl	80028cc <HAL_GetTick>
 8005d60:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005d64:	f7fc fdb2 	bl	80028cc <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b64      	cmp	r3, #100	@ 0x64
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e31a      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d76:	4b0e      	ldr	r3, [pc, #56]	@ (8005db0 <HAL_RCC_OscConfig+0x268>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f0      	bne.n	8005d64 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 809a 	beq.w	8005ec4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <HAL_RCC_OscConfig+0x25a>
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	2b18      	cmp	r3, #24
 8005d9a:	d149      	bne.n	8005e30 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d146      	bne.n	8005e30 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d104      	bne.n	8005db4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e2fe      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
 8005dae:	bf00      	nop
 8005db0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d11c      	bne.n	8005df4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8005dba:	4b9a      	ldr	r3, [pc, #616]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0218 	and.w	r2, r3, #24
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d014      	beq.n	8005df4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005dca:	4b96      	ldr	r3, [pc, #600]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f023 0218 	bic.w	r2, r3, #24
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	4993      	ldr	r1, [pc, #588]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8005ddc:	f000 fdd0 	bl	8006980 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005de0:	4b91      	ldr	r3, [pc, #580]	@ (8006028 <HAL_RCC_OscConfig+0x4e0>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fc fce7 	bl	80027b8 <HAL_InitTick>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e2db      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df4:	f7fc fd6a 	bl	80028cc <HAL_GetTick>
 8005df8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005dfc:	f7fc fd66 	bl	80028cc <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e2ce      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e0e:	4b85      	ldr	r3, [pc, #532]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0f0      	beq.n	8005dfc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005e1a:	4b82      	ldr	r3, [pc, #520]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	041b      	lsls	r3, r3, #16
 8005e28:	497e      	ldr	r1, [pc, #504]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005e2e:	e049      	b.n	8005ec4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d02c      	beq.n	8005e92 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005e38:	4b7a      	ldr	r3, [pc, #488]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f023 0218 	bic.w	r2, r3, #24
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	4977      	ldr	r1, [pc, #476]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8005e4a:	4b76      	ldr	r3, [pc, #472]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a75      	ldr	r2, [pc, #468]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005e50:	f043 0301 	orr.w	r3, r3, #1
 8005e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e56:	f7fc fd39 	bl	80028cc <HAL_GetTick>
 8005e5a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005e5e:	f7fc fd35 	bl	80028cc <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e29d      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e70:	4b6c      	ldr	r3, [pc, #432]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0f0      	beq.n	8005e5e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005e7c:	4b69      	ldr	r3, [pc, #420]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	041b      	lsls	r3, r3, #16
 8005e8a:	4966      	ldr	r1, [pc, #408]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	610b      	str	r3, [r1, #16]
 8005e90:	e018      	b.n	8005ec4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e92:	4b64      	ldr	r3, [pc, #400]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a63      	ldr	r2, [pc, #396]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005e98:	f023 0301 	bic.w	r3, r3, #1
 8005e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9e:	f7fc fd15 	bl	80028cc <HAL_GetTick>
 8005ea2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005ea6:	f7fc fd11 	bl	80028cc <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e279      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005eb8:	4b5a      	ldr	r3, [pc, #360]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1f0      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0308 	and.w	r3, r3, #8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d03c      	beq.n	8005f4a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01c      	beq.n	8005f12 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ed8:	4b52      	ldr	r3, [pc, #328]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005eda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ede:	4a51      	ldr	r2, [pc, #324]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005ee0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ee4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee8:	f7fc fcf0 	bl	80028cc <HAL_GetTick>
 8005eec:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005ef0:	f7fc fcec 	bl	80028cc <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e254      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005f02:	4b48      	ldr	r3, [pc, #288]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d0ef      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x3a8>
 8005f10:	e01b      	b.n	8005f4a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f12:	4b44      	ldr	r3, [pc, #272]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f18:	4a42      	ldr	r2, [pc, #264]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005f1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f22:	f7fc fcd3 	bl	80028cc <HAL_GetTick>
 8005f26:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005f2a:	f7fc fccf 	bl	80028cc <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e237      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005f3c:	4b39      	ldr	r3, [pc, #228]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005f3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1ef      	bne.n	8005f2a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 80d2 	beq.w	80060fc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005f58:	4b34      	ldr	r3, [pc, #208]	@ (800602c <HAL_RCC_OscConfig+0x4e4>)
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d118      	bne.n	8005f96 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005f64:	4b31      	ldr	r3, [pc, #196]	@ (800602c <HAL_RCC_OscConfig+0x4e4>)
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	4a30      	ldr	r2, [pc, #192]	@ (800602c <HAL_RCC_OscConfig+0x4e4>)
 8005f6a:	f043 0301 	orr.w	r3, r3, #1
 8005f6e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f70:	f7fc fcac 	bl	80028cc <HAL_GetTick>
 8005f74:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f78:	f7fc fca8 	bl	80028cc <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e210      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005f8a:	4b28      	ldr	r3, [pc, #160]	@ (800602c <HAL_RCC_OscConfig+0x4e4>)
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0f0      	beq.n	8005f78 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d108      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x468>
 8005f9e:	4b21      	ldr	r3, [pc, #132]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005fa6:	f043 0301 	orr.w	r3, r3, #1
 8005faa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005fae:	e074      	b.n	800609a <HAL_RCC_OscConfig+0x552>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d118      	bne.n	8005fea <HAL_RCC_OscConfig+0x4a2>
 8005fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fbe:	4a19      	ldr	r2, [pc, #100]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005fc0:	f023 0301 	bic.w	r3, r3, #1
 8005fc4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005fc8:	4b16      	ldr	r3, [pc, #88]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fce:	4a15      	ldr	r2, [pc, #84]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005fd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fd4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005fd8:	4b12      	ldr	r3, [pc, #72]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005fda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fde:	4a11      	ldr	r2, [pc, #68]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005fe0:	f023 0304 	bic.w	r3, r3, #4
 8005fe4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005fe8:	e057      	b.n	800609a <HAL_RCC_OscConfig+0x552>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b05      	cmp	r3, #5
 8005ff0:	d11e      	bne.n	8006030 <HAL_RCC_OscConfig+0x4e8>
 8005ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8005ffa:	f043 0304 	orr.w	r3, r3, #4
 8005ffe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006002:	4b08      	ldr	r3, [pc, #32]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8006004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006008:	4a06      	ldr	r2, [pc, #24]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 800600a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800600e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006012:	4b04      	ldr	r3, [pc, #16]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 8006014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006018:	4a02      	ldr	r2, [pc, #8]	@ (8006024 <HAL_RCC_OscConfig+0x4dc>)
 800601a:	f043 0301 	orr.w	r3, r3, #1
 800601e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006022:	e03a      	b.n	800609a <HAL_RCC_OscConfig+0x552>
 8006024:	44020c00 	.word	0x44020c00
 8006028:	20000024 	.word	0x20000024
 800602c:	44020800 	.word	0x44020800
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2b85      	cmp	r3, #133	@ 0x85
 8006036:	d118      	bne.n	800606a <HAL_RCC_OscConfig+0x522>
 8006038:	4ba2      	ldr	r3, [pc, #648]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 800603a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800603e:	4aa1      	ldr	r2, [pc, #644]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006040:	f043 0304 	orr.w	r3, r3, #4
 8006044:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006048:	4b9e      	ldr	r3, [pc, #632]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 800604a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800604e:	4a9d      	ldr	r2, [pc, #628]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006054:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006058:	4b9a      	ldr	r3, [pc, #616]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 800605a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800605e:	4a99      	ldr	r2, [pc, #612]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006060:	f043 0301 	orr.w	r3, r3, #1
 8006064:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006068:	e017      	b.n	800609a <HAL_RCC_OscConfig+0x552>
 800606a:	4b96      	ldr	r3, [pc, #600]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 800606c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006070:	4a94      	ldr	r2, [pc, #592]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800607a:	4b92      	ldr	r3, [pc, #584]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 800607c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006080:	4a90      	ldr	r2, [pc, #576]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006082:	f023 0304 	bic.w	r3, r3, #4
 8006086:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800608a:	4b8e      	ldr	r3, [pc, #568]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 800608c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006090:	4a8c      	ldr	r2, [pc, #560]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006096:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d016      	beq.n	80060d0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a2:	f7fc fc13 	bl	80028cc <HAL_GetTick>
 80060a6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060a8:	e00a      	b.n	80060c0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060aa:	f7fc fc0f 	bl	80028cc <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e175      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060c0:	4b80      	ldr	r3, [pc, #512]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 80060c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0ed      	beq.n	80060aa <HAL_RCC_OscConfig+0x562>
 80060ce:	e015      	b.n	80060fc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d0:	f7fc fbfc 	bl	80028cc <HAL_GetTick>
 80060d4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060d6:	e00a      	b.n	80060ee <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d8:	f7fc fbf8 	bl	80028cc <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e15e      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060ee:	4b75      	ldr	r3, [pc, #468]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 80060f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1ed      	bne.n	80060d8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d036      	beq.n	8006176 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610c:	2b00      	cmp	r3, #0
 800610e:	d019      	beq.n	8006144 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006110:	4b6c      	ldr	r3, [pc, #432]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a6b      	ldr	r2, [pc, #428]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006116:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800611a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611c:	f7fc fbd6 	bl	80028cc <HAL_GetTick>
 8006120:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006124:	f7fc fbd2 	bl	80028cc <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e13a      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006136:	4b63      	ldr	r3, [pc, #396]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0f0      	beq.n	8006124 <HAL_RCC_OscConfig+0x5dc>
 8006142:	e018      	b.n	8006176 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006144:	4b5f      	ldr	r3, [pc, #380]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a5e      	ldr	r2, [pc, #376]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 800614a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800614e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006150:	f7fc fbbc 	bl	80028cc <HAL_GetTick>
 8006154:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006158:	f7fc fbb8 	bl	80028cc <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e120      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800616a:	4b56      	ldr	r3, [pc, #344]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1f0      	bne.n	8006158 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8115 	beq.w	80063aa <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	2b18      	cmp	r3, #24
 8006184:	f000 80af 	beq.w	80062e6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800618c:	2b02      	cmp	r3, #2
 800618e:	f040 8086 	bne.w	800629e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006192:	4b4c      	ldr	r3, [pc, #304]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a4b      	ldr	r2, [pc, #300]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006198:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800619c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619e:	f7fc fb95 	bl	80028cc <HAL_GetTick>
 80061a2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80061a6:	f7fc fb91 	bl	80028cc <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e0f9      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80061b8:	4b42      	ldr	r3, [pc, #264]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1f0      	bne.n	80061a6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80061c4:	4b3f      	ldr	r3, [pc, #252]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 80061c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80061cc:	f023 0303 	bic.w	r3, r3, #3
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80061d8:	0212      	lsls	r2, r2, #8
 80061da:	430a      	orrs	r2, r1
 80061dc:	4939      	ldr	r1, [pc, #228]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	628b      	str	r3, [r1, #40]	@ 0x28
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e6:	3b01      	subs	r3, #1
 80061e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f0:	3b01      	subs	r3, #1
 80061f2:	025b      	lsls	r3, r3, #9
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	431a      	orrs	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fc:	3b01      	subs	r3, #1
 80061fe:	041b      	lsls	r3, r3, #16
 8006200:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006204:	431a      	orrs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620a:	3b01      	subs	r3, #1
 800620c:	061b      	lsls	r3, r3, #24
 800620e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006212:	492c      	ldr	r1, [pc, #176]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006214:	4313      	orrs	r3, r2
 8006216:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006218:	4b2a      	ldr	r3, [pc, #168]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 800621a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621c:	4a29      	ldr	r2, [pc, #164]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 800621e:	f023 0310 	bic.w	r3, r3, #16
 8006222:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006228:	4a26      	ldr	r2, [pc, #152]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800622e:	4b25      	ldr	r3, [pc, #148]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006232:	4a24      	ldr	r2, [pc, #144]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006234:	f043 0310 	orr.w	r3, r3, #16
 8006238:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800623a:	4b22      	ldr	r3, [pc, #136]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 800623c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623e:	f023 020c 	bic.w	r2, r3, #12
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006246:	491f      	ldr	r1, [pc, #124]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006248:	4313      	orrs	r3, r2
 800624a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800624c:	4b1d      	ldr	r3, [pc, #116]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 800624e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006250:	f023 0220 	bic.w	r2, r3, #32
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006258:	491a      	ldr	r1, [pc, #104]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 800625a:	4313      	orrs	r3, r2
 800625c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800625e:	4b19      	ldr	r3, [pc, #100]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006262:	4a18      	ldr	r2, [pc, #96]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006268:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800626a:	4b16      	ldr	r3, [pc, #88]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a15      	ldr	r2, [pc, #84]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006270:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006276:	f7fc fb29 	bl	80028cc <HAL_GetTick>
 800627a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800627c:	e008      	b.n	8006290 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800627e:	f7fc fb25 	bl	80028cc <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e08d      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006290:	4b0c      	ldr	r3, [pc, #48]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0f0      	beq.n	800627e <HAL_RCC_OscConfig+0x736>
 800629c:	e085      	b.n	80063aa <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800629e:	4b09      	ldr	r3, [pc, #36]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a08      	ldr	r2, [pc, #32]	@ (80062c4 <HAL_RCC_OscConfig+0x77c>)
 80062a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062aa:	f7fc fb0f 	bl	80028cc <HAL_GetTick>
 80062ae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80062b0:	e00a      	b.n	80062c8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80062b2:	f7fc fb0b 	bl	80028cc <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d903      	bls.n	80062c8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e073      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
 80062c4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80062c8:	4b3a      	ldr	r3, [pc, #232]	@ (80063b4 <HAL_RCC_OscConfig+0x86c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1ee      	bne.n	80062b2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80062d4:	4b37      	ldr	r3, [pc, #220]	@ (80063b4 <HAL_RCC_OscConfig+0x86c>)
 80062d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d8:	4a36      	ldr	r2, [pc, #216]	@ (80063b4 <HAL_RCC_OscConfig+0x86c>)
 80062da:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	6293      	str	r3, [r2, #40]	@ 0x28
 80062e4:	e061      	b.n	80063aa <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80062e6:	4b33      	ldr	r3, [pc, #204]	@ (80063b4 <HAL_RCC_OscConfig+0x86c>)
 80062e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ea:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80062ec:	4b31      	ldr	r3, [pc, #196]	@ (80063b4 <HAL_RCC_OscConfig+0x86c>)
 80062ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062f0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d031      	beq.n	800635e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f003 0203 	and.w	r2, r3, #3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006304:	429a      	cmp	r2, r3
 8006306:	d12a      	bne.n	800635e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006314:	429a      	cmp	r2, r3
 8006316:	d122      	bne.n	800635e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006322:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006324:	429a      	cmp	r2, r3
 8006326:	d11a      	bne.n	800635e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	0a5b      	lsrs	r3, r3, #9
 800632c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006334:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006336:	429a      	cmp	r2, r3
 8006338:	d111      	bne.n	800635e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	0c1b      	lsrs	r3, r3, #16
 800633e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006346:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006348:	429a      	cmp	r2, r3
 800634a:	d108      	bne.n	800635e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	0e1b      	lsrs	r3, r3, #24
 8006350:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006358:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800635a:	429a      	cmp	r2, r3
 800635c:	d001      	beq.n	8006362 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e024      	b.n	80063ac <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006362:	4b14      	ldr	r3, [pc, #80]	@ (80063b4 <HAL_RCC_OscConfig+0x86c>)
 8006364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006366:	08db      	lsrs	r3, r3, #3
 8006368:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006370:	429a      	cmp	r2, r3
 8006372:	d01a      	beq.n	80063aa <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006374:	4b0f      	ldr	r3, [pc, #60]	@ (80063b4 <HAL_RCC_OscConfig+0x86c>)
 8006376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006378:	4a0e      	ldr	r2, [pc, #56]	@ (80063b4 <HAL_RCC_OscConfig+0x86c>)
 800637a:	f023 0310 	bic.w	r3, r3, #16
 800637e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006380:	f7fc faa4 	bl	80028cc <HAL_GetTick>
 8006384:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8006386:	bf00      	nop
 8006388:	f7fc faa0 	bl	80028cc <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	4293      	cmp	r3, r2
 8006392:	d0f9      	beq.n	8006388 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006398:	4a06      	ldr	r2, [pc, #24]	@ (80063b4 <HAL_RCC_OscConfig+0x86c>)
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800639e:	4b05      	ldr	r3, [pc, #20]	@ (80063b4 <HAL_RCC_OscConfig+0x86c>)
 80063a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a2:	4a04      	ldr	r2, [pc, #16]	@ (80063b4 <HAL_RCC_OscConfig+0x86c>)
 80063a4:	f043 0310 	orr.w	r3, r3, #16
 80063a8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3720      	adds	r7, #32
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	44020c00 	.word	0x44020c00

080063b8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e19e      	b.n	800670a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063cc:	4b83      	ldr	r3, [pc, #524]	@ (80065dc <HAL_RCC_ClockConfig+0x224>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d910      	bls.n	80063fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063da:	4b80      	ldr	r3, [pc, #512]	@ (80065dc <HAL_RCC_ClockConfig+0x224>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f023 020f 	bic.w	r2, r3, #15
 80063e2:	497e      	ldr	r1, [pc, #504]	@ (80065dc <HAL_RCC_ClockConfig+0x224>)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ea:	4b7c      	ldr	r3, [pc, #496]	@ (80065dc <HAL_RCC_ClockConfig+0x224>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d001      	beq.n	80063fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e186      	b.n	800670a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	2b00      	cmp	r3, #0
 8006406:	d012      	beq.n	800642e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	695a      	ldr	r2, [r3, #20]
 800640c:	4b74      	ldr	r3, [pc, #464]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	0a1b      	lsrs	r3, r3, #8
 8006412:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006416:	429a      	cmp	r2, r3
 8006418:	d909      	bls.n	800642e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800641a:	4b71      	ldr	r3, [pc, #452]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	496d      	ldr	r1, [pc, #436]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 800642a:	4313      	orrs	r3, r2
 800642c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d012      	beq.n	8006460 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691a      	ldr	r2, [r3, #16]
 800643e:	4b68      	ldr	r3, [pc, #416]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	091b      	lsrs	r3, r3, #4
 8006444:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006448:	429a      	cmp	r2, r3
 800644a:	d909      	bls.n	8006460 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800644c:	4b64      	ldr	r3, [pc, #400]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	4961      	ldr	r1, [pc, #388]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 800645c:	4313      	orrs	r3, r2
 800645e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	d010      	beq.n	800648e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	4b5b      	ldr	r3, [pc, #364]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006478:	429a      	cmp	r2, r3
 800647a:	d908      	bls.n	800648e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800647c:	4b58      	ldr	r3, [pc, #352]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	4955      	ldr	r1, [pc, #340]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 800648a:	4313      	orrs	r3, r2
 800648c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d010      	beq.n	80064bc <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	4b50      	ldr	r3, [pc, #320]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f003 030f 	and.w	r3, r3, #15
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d908      	bls.n	80064bc <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80064aa:	4b4d      	ldr	r3, [pc, #308]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	f023 020f 	bic.w	r2, r3, #15
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	494a      	ldr	r1, [pc, #296]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 8093 	beq.w	80065f0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d107      	bne.n	80064e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80064d2:	4b43      	ldr	r3, [pc, #268]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d121      	bne.n	8006522 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e113      	b.n	800670a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d107      	bne.n	80064fa <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064ea:	4b3d      	ldr	r3, [pc, #244]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d115      	bne.n	8006522 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e107      	b.n	800670a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d107      	bne.n	8006512 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006502:	4b37      	ldr	r3, [pc, #220]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800650a:	2b00      	cmp	r3, #0
 800650c:	d109      	bne.n	8006522 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e0fb      	b.n	800670a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006512:	4b33      	ldr	r3, [pc, #204]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e0f3      	b.n	800670a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8006522:	4b2f      	ldr	r3, [pc, #188]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	f023 0203 	bic.w	r2, r3, #3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	492c      	ldr	r1, [pc, #176]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 8006530:	4313      	orrs	r3, r2
 8006532:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006534:	f7fc f9ca 	bl	80028cc <HAL_GetTick>
 8006538:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2b03      	cmp	r3, #3
 8006540:	d112      	bne.n	8006568 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006542:	e00a      	b.n	800655a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006544:	f7fc f9c2 	bl	80028cc <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006552:	4293      	cmp	r3, r2
 8006554:	d901      	bls.n	800655a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e0d7      	b.n	800670a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800655a:	4b21      	ldr	r3, [pc, #132]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	f003 0318 	and.w	r3, r3, #24
 8006562:	2b18      	cmp	r3, #24
 8006564:	d1ee      	bne.n	8006544 <HAL_RCC_ClockConfig+0x18c>
 8006566:	e043      	b.n	80065f0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d112      	bne.n	8006596 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006570:	e00a      	b.n	8006588 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006572:	f7fc f9ab 	bl	80028cc <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006580:	4293      	cmp	r3, r2
 8006582:	d901      	bls.n	8006588 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e0c0      	b.n	800670a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006588:	4b15      	ldr	r3, [pc, #84]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	f003 0318 	and.w	r3, r3, #24
 8006590:	2b10      	cmp	r3, #16
 8006592:	d1ee      	bne.n	8006572 <HAL_RCC_ClockConfig+0x1ba>
 8006594:	e02c      	b.n	80065f0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d122      	bne.n	80065e4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800659e:	e00a      	b.n	80065b6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80065a0:	f7fc f994 	bl	80028cc <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e0a9      	b.n	800670a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80065b6:	4b0a      	ldr	r3, [pc, #40]	@ (80065e0 <HAL_RCC_ClockConfig+0x228>)
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	f003 0318 	and.w	r3, r3, #24
 80065be:	2b08      	cmp	r3, #8
 80065c0:	d1ee      	bne.n	80065a0 <HAL_RCC_ClockConfig+0x1e8>
 80065c2:	e015      	b.n	80065f0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80065c4:	f7fc f982 	bl	80028cc <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d906      	bls.n	80065e4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e097      	b.n	800670a <HAL_RCC_ClockConfig+0x352>
 80065da:	bf00      	nop
 80065dc:	40022000 	.word	0x40022000
 80065e0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80065e4:	4b4b      	ldr	r3, [pc, #300]	@ (8006714 <HAL_RCC_ClockConfig+0x35c>)
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	f003 0318 	and.w	r3, r3, #24
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e9      	bne.n	80065c4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d010      	beq.n	800661e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	4b44      	ldr	r3, [pc, #272]	@ (8006714 <HAL_RCC_ClockConfig+0x35c>)
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	f003 030f 	and.w	r3, r3, #15
 8006608:	429a      	cmp	r2, r3
 800660a:	d208      	bcs.n	800661e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800660c:	4b41      	ldr	r3, [pc, #260]	@ (8006714 <HAL_RCC_ClockConfig+0x35c>)
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	f023 020f 	bic.w	r2, r3, #15
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	493e      	ldr	r1, [pc, #248]	@ (8006714 <HAL_RCC_ClockConfig+0x35c>)
 800661a:	4313      	orrs	r3, r2
 800661c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800661e:	4b3e      	ldr	r3, [pc, #248]	@ (8006718 <HAL_RCC_ClockConfig+0x360>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 030f 	and.w	r3, r3, #15
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d210      	bcs.n	800664e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800662c:	4b3a      	ldr	r3, [pc, #232]	@ (8006718 <HAL_RCC_ClockConfig+0x360>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f023 020f 	bic.w	r2, r3, #15
 8006634:	4938      	ldr	r1, [pc, #224]	@ (8006718 <HAL_RCC_ClockConfig+0x360>)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	4313      	orrs	r3, r2
 800663a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800663c:	4b36      	ldr	r3, [pc, #216]	@ (8006718 <HAL_RCC_ClockConfig+0x360>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 030f 	and.w	r3, r3, #15
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	d001      	beq.n	800664e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e05d      	b.n	800670a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d010      	beq.n	800667c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	4b2d      	ldr	r3, [pc, #180]	@ (8006714 <HAL_RCC_ClockConfig+0x35c>)
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006666:	429a      	cmp	r2, r3
 8006668:	d208      	bcs.n	800667c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800666a:	4b2a      	ldr	r3, [pc, #168]	@ (8006714 <HAL_RCC_ClockConfig+0x35c>)
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	4927      	ldr	r1, [pc, #156]	@ (8006714 <HAL_RCC_ClockConfig+0x35c>)
 8006678:	4313      	orrs	r3, r2
 800667a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0308 	and.w	r3, r3, #8
 8006684:	2b00      	cmp	r3, #0
 8006686:	d012      	beq.n	80066ae <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691a      	ldr	r2, [r3, #16]
 800668c:	4b21      	ldr	r3, [pc, #132]	@ (8006714 <HAL_RCC_ClockConfig+0x35c>)
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	091b      	lsrs	r3, r3, #4
 8006692:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006696:	429a      	cmp	r2, r3
 8006698:	d209      	bcs.n	80066ae <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800669a:	4b1e      	ldr	r3, [pc, #120]	@ (8006714 <HAL_RCC_ClockConfig+0x35c>)
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	491a      	ldr	r1, [pc, #104]	@ (8006714 <HAL_RCC_ClockConfig+0x35c>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0310 	and.w	r3, r3, #16
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d012      	beq.n	80066e0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	695a      	ldr	r2, [r3, #20]
 80066be:	4b15      	ldr	r3, [pc, #84]	@ (8006714 <HAL_RCC_ClockConfig+0x35c>)
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d209      	bcs.n	80066e0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80066cc:	4b11      	ldr	r3, [pc, #68]	@ (8006714 <HAL_RCC_ClockConfig+0x35c>)
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	021b      	lsls	r3, r3, #8
 80066da:	490e      	ldr	r1, [pc, #56]	@ (8006714 <HAL_RCC_ClockConfig+0x35c>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80066e0:	f000 f822 	bl	8006728 <HAL_RCC_GetSysClockFreq>
 80066e4:	4602      	mov	r2, r0
 80066e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006714 <HAL_RCC_ClockConfig+0x35c>)
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	f003 030f 	and.w	r3, r3, #15
 80066ee:	490b      	ldr	r1, [pc, #44]	@ (800671c <HAL_RCC_ClockConfig+0x364>)
 80066f0:	5ccb      	ldrb	r3, [r1, r3]
 80066f2:	fa22 f303 	lsr.w	r3, r2, r3
 80066f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006720 <HAL_RCC_ClockConfig+0x368>)
 80066f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80066fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006724 <HAL_RCC_ClockConfig+0x36c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fc f85a 	bl	80027b8 <HAL_InitTick>
 8006704:	4603      	mov	r3, r0
 8006706:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006708:	7afb      	ldrb	r3, [r7, #11]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	44020c00 	.word	0x44020c00
 8006718:	40022000 	.word	0x40022000
 800671c:	080136fc 	.word	0x080136fc
 8006720:	20000004 	.word	0x20000004
 8006724:	20000024 	.word	0x20000024

08006728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006728:	b480      	push	{r7}
 800672a:	b089      	sub	sp, #36	@ 0x24
 800672c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800672e:	4b8c      	ldr	r3, [pc, #560]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	f003 0318 	and.w	r3, r3, #24
 8006736:	2b08      	cmp	r3, #8
 8006738:	d102      	bne.n	8006740 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800673a:	4b8a      	ldr	r3, [pc, #552]	@ (8006964 <HAL_RCC_GetSysClockFreq+0x23c>)
 800673c:	61fb      	str	r3, [r7, #28]
 800673e:	e107      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006740:	4b87      	ldr	r3, [pc, #540]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	f003 0318 	and.w	r3, r3, #24
 8006748:	2b00      	cmp	r3, #0
 800674a:	d112      	bne.n	8006772 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800674c:	4b84      	ldr	r3, [pc, #528]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b00      	cmp	r3, #0
 8006756:	d009      	beq.n	800676c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006758:	4b81      	ldr	r3, [pc, #516]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	08db      	lsrs	r3, r3, #3
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	4a81      	ldr	r2, [pc, #516]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x240>)
 8006764:	fa22 f303 	lsr.w	r3, r2, r3
 8006768:	61fb      	str	r3, [r7, #28]
 800676a:	e0f1      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800676c:	4b7e      	ldr	r3, [pc, #504]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x240>)
 800676e:	61fb      	str	r3, [r7, #28]
 8006770:	e0ee      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006772:	4b7b      	ldr	r3, [pc, #492]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f003 0318 	and.w	r3, r3, #24
 800677a:	2b10      	cmp	r3, #16
 800677c:	d102      	bne.n	8006784 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800677e:	4b7b      	ldr	r3, [pc, #492]	@ (800696c <HAL_RCC_GetSysClockFreq+0x244>)
 8006780:	61fb      	str	r3, [r7, #28]
 8006782:	e0e5      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006784:	4b76      	ldr	r3, [pc, #472]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	f003 0318 	and.w	r3, r3, #24
 800678c:	2b18      	cmp	r3, #24
 800678e:	f040 80dd 	bne.w	800694c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006792:	4b73      	ldr	r3, [pc, #460]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 8006794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800679c:	4b70      	ldr	r3, [pc, #448]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 800679e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a0:	0a1b      	lsrs	r3, r3, #8
 80067a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80067a8:	4b6d      	ldr	r3, [pc, #436]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 80067aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ac:	091b      	lsrs	r3, r3, #4
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80067b4:	4b6a      	ldr	r3, [pc, #424]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 80067b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80067b8:	08db      	lsrs	r3, r3, #3
 80067ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	fb02 f303 	mul.w	r3, r2, r3
 80067c4:	ee07 3a90 	vmov	s15, r3
 80067c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067cc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 80b7 	beq.w	8006946 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d003      	beq.n	80067e6 <HAL_RCC_GetSysClockFreq+0xbe>
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d056      	beq.n	8006892 <HAL_RCC_GetSysClockFreq+0x16a>
 80067e4:	e077      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80067e6:	4b5e      	ldr	r3, [pc, #376]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d02d      	beq.n	800684e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067f2:	4b5b      	ldr	r3, [pc, #364]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	08db      	lsrs	r3, r3, #3
 80067f8:	f003 0303 	and.w	r3, r3, #3
 80067fc:	4a5a      	ldr	r2, [pc, #360]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x240>)
 80067fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006802:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	ee07 3a90 	vmov	s15, r3
 8006814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681c:	4b50      	ldr	r3, [pc, #320]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 800681e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006824:	ee07 3a90 	vmov	s15, r3
 8006828:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800682c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006830:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8006970 <HAL_RCC_GetSysClockFreq+0x248>
 8006834:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006838:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800683c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006840:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006848:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800684c:	e065      	b.n	800691a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	ee07 3a90 	vmov	s15, r3
 8006854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006858:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8006974 <HAL_RCC_GetSysClockFreq+0x24c>
 800685c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006860:	4b3f      	ldr	r3, [pc, #252]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 8006862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006868:	ee07 3a90 	vmov	s15, r3
 800686c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006870:	ed97 6a02 	vldr	s12, [r7, #8]
 8006874:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006970 <HAL_RCC_GetSysClockFreq+0x248>
 8006878:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800687c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006880:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006884:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006890:	e043      	b.n	800691a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	ee07 3a90 	vmov	s15, r3
 8006898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8006978 <HAL_RCC_GetSysClockFreq+0x250>
 80068a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068a4:	4b2e      	ldr	r3, [pc, #184]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 80068a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ac:	ee07 3a90 	vmov	s15, r3
 80068b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80068b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80068b8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006970 <HAL_RCC_GetSysClockFreq+0x248>
 80068bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80068c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80068c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80068cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80068d4:	e021      	b.n	800691a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	ee07 3a90 	vmov	s15, r3
 80068dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800697c <HAL_RCC_GetSysClockFreq+0x254>
 80068e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 80068ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f0:	ee07 3a90 	vmov	s15, r3
 80068f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80068f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80068fc:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8006970 <HAL_RCC_GetSysClockFreq+0x248>
 8006900:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006904:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006908:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800690c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006914:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006918:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800691a:	4b11      	ldr	r3, [pc, #68]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x238>)
 800691c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800691e:	0a5b      	lsrs	r3, r3, #9
 8006920:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006924:	3301      	adds	r3, #1
 8006926:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	ee07 3a90 	vmov	s15, r3
 800692e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006932:	edd7 6a06 	vldr	s13, [r7, #24]
 8006936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800693a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800693e:	ee17 3a90 	vmov	r3, s15
 8006942:	61fb      	str	r3, [r7, #28]
 8006944:	e004      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	61fb      	str	r3, [r7, #28]
 800694a:	e001      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800694c:	4b06      	ldr	r3, [pc, #24]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x240>)
 800694e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8006950:	69fb      	ldr	r3, [r7, #28]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3724      	adds	r7, #36	@ 0x24
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	44020c00 	.word	0x44020c00
 8006964:	003d0900 	.word	0x003d0900
 8006968:	03d09000 	.word	0x03d09000
 800696c:	007a1200 	.word	0x007a1200
 8006970:	46000000 	.word	0x46000000
 8006974:	4c742400 	.word	0x4c742400
 8006978:	4af42400 	.word	0x4af42400
 800697c:	4a742400 	.word	0x4a742400

08006980 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006984:	f7ff fed0 	bl	8006728 <HAL_RCC_GetSysClockFreq>
 8006988:	4602      	mov	r2, r0
 800698a:	4b08      	ldr	r3, [pc, #32]	@ (80069ac <HAL_RCC_GetHCLKFreq+0x2c>)
 800698c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800698e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006992:	4907      	ldr	r1, [pc, #28]	@ (80069b0 <HAL_RCC_GetHCLKFreq+0x30>)
 8006994:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006996:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800699a:	fa22 f303 	lsr.w	r3, r2, r3
 800699e:	4a05      	ldr	r2, [pc, #20]	@ (80069b4 <HAL_RCC_GetHCLKFreq+0x34>)
 80069a0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80069a2:	4b04      	ldr	r3, [pc, #16]	@ (80069b4 <HAL_RCC_GetHCLKFreq+0x34>)
 80069a4:	681b      	ldr	r3, [r3, #0]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	44020c00 	.word	0x44020c00
 80069b0:	080136fc 	.word	0x080136fc
 80069b4:	20000004 	.word	0x20000004

080069b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80069bc:	f7ff ffe0 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 80069c0:	4602      	mov	r2, r0
 80069c2:	4b06      	ldr	r3, [pc, #24]	@ (80069dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	091b      	lsrs	r3, r3, #4
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	4904      	ldr	r1, [pc, #16]	@ (80069e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80069ce:	5ccb      	ldrb	r3, [r1, r3]
 80069d0:	f003 031f 	and.w	r3, r3, #31
 80069d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069d8:	4618      	mov	r0, r3
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	44020c00 	.word	0x44020c00
 80069e0:	0801370c 	.word	0x0801370c

080069e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80069e8:	f7ff ffca 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 80069ec:	4602      	mov	r2, r0
 80069ee:	4b06      	ldr	r3, [pc, #24]	@ (8006a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	0a1b      	lsrs	r3, r3, #8
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	4904      	ldr	r1, [pc, #16]	@ (8006a0c <HAL_RCC_GetPCLK2Freq+0x28>)
 80069fa:	5ccb      	ldrb	r3, [r1, r3]
 80069fc:	f003 031f 	and.w	r3, r3, #31
 8006a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	44020c00 	.word	0x44020c00
 8006a0c:	0801370c 	.word	0x0801370c

08006a10 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006a14:	f7ff ffb4 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	4b06      	ldr	r3, [pc, #24]	@ (8006a34 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	0b1b      	lsrs	r3, r3, #12
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	4904      	ldr	r1, [pc, #16]	@ (8006a38 <HAL_RCC_GetPCLK3Freq+0x28>)
 8006a26:	5ccb      	ldrb	r3, [r1, r3]
 8006a28:	f003 031f 	and.w	r3, r3, #31
 8006a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	44020c00 	.word	0x44020c00
 8006a38:	0801370c 	.word	0x0801370c

08006a3c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a40:	b0d8      	sub	sp, #352	@ 0x160
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006a54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8006a60:	2500      	movs	r5, #0
 8006a62:	ea54 0305 	orrs.w	r3, r4, r5
 8006a66:	d00b      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006a68:	4bcd      	ldr	r3, [pc, #820]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006a6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a6e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8006a72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a78:	4ac9      	ldr	r2, [pc, #804]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006a7a:	430b      	orrs	r3, r1
 8006a7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	f002 0801 	and.w	r8, r2, #1
 8006a8c:	f04f 0900 	mov.w	r9, #0
 8006a90:	ea58 0309 	orrs.w	r3, r8, r9
 8006a94:	d042      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8006a96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a9c:	2b05      	cmp	r3, #5
 8006a9e:	d823      	bhi.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8006aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8006aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa6:	bf00      	nop
 8006aa8:	08006af1 	.word	0x08006af1
 8006aac:	08006ac1 	.word	0x08006ac1
 8006ab0:	08006ad5 	.word	0x08006ad5
 8006ab4:	08006af1 	.word	0x08006af1
 8006ab8:	08006af1 	.word	0x08006af1
 8006abc:	08006af1 	.word	0x08006af1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f004 fee0 	bl	800b88c <RCCEx_PLL2_Config>
 8006acc:	4603      	mov	r3, r0
 8006ace:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8006ad2:	e00e      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ad8:	3330      	adds	r3, #48	@ 0x30
 8006ada:	4618      	mov	r0, r3
 8006adc:	f004 ff6e 	bl	800b9bc <RCCEx_PLL3_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8006ae6:	e004      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006aee:	e000      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10c      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006afa:	4ba9      	ldr	r3, [pc, #676]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006afc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006b00:	f023 0107 	bic.w	r1, r3, #7
 8006b04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b0a:	4aa5      	ldr	r2, [pc, #660]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006b0c:	430b      	orrs	r3, r1
 8006b0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006b12:	e003      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b14:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b18:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f002 0a02 	and.w	sl, r2, #2
 8006b28:	f04f 0b00 	mov.w	fp, #0
 8006b2c:	ea5a 030b 	orrs.w	r3, sl, fp
 8006b30:	f000 8088 	beq.w	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8006b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b3a:	2b28      	cmp	r3, #40	@ 0x28
 8006b3c:	d868      	bhi.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b44 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b44:	08006c19 	.word	0x08006c19
 8006b48:	08006c11 	.word	0x08006c11
 8006b4c:	08006c11 	.word	0x08006c11
 8006b50:	08006c11 	.word	0x08006c11
 8006b54:	08006c11 	.word	0x08006c11
 8006b58:	08006c11 	.word	0x08006c11
 8006b5c:	08006c11 	.word	0x08006c11
 8006b60:	08006c11 	.word	0x08006c11
 8006b64:	08006be9 	.word	0x08006be9
 8006b68:	08006c11 	.word	0x08006c11
 8006b6c:	08006c11 	.word	0x08006c11
 8006b70:	08006c11 	.word	0x08006c11
 8006b74:	08006c11 	.word	0x08006c11
 8006b78:	08006c11 	.word	0x08006c11
 8006b7c:	08006c11 	.word	0x08006c11
 8006b80:	08006c11 	.word	0x08006c11
 8006b84:	08006bfd 	.word	0x08006bfd
 8006b88:	08006c11 	.word	0x08006c11
 8006b8c:	08006c11 	.word	0x08006c11
 8006b90:	08006c11 	.word	0x08006c11
 8006b94:	08006c11 	.word	0x08006c11
 8006b98:	08006c11 	.word	0x08006c11
 8006b9c:	08006c11 	.word	0x08006c11
 8006ba0:	08006c11 	.word	0x08006c11
 8006ba4:	08006c19 	.word	0x08006c19
 8006ba8:	08006c11 	.word	0x08006c11
 8006bac:	08006c11 	.word	0x08006c11
 8006bb0:	08006c11 	.word	0x08006c11
 8006bb4:	08006c11 	.word	0x08006c11
 8006bb8:	08006c11 	.word	0x08006c11
 8006bbc:	08006c11 	.word	0x08006c11
 8006bc0:	08006c11 	.word	0x08006c11
 8006bc4:	08006c19 	.word	0x08006c19
 8006bc8:	08006c11 	.word	0x08006c11
 8006bcc:	08006c11 	.word	0x08006c11
 8006bd0:	08006c11 	.word	0x08006c11
 8006bd4:	08006c11 	.word	0x08006c11
 8006bd8:	08006c11 	.word	0x08006c11
 8006bdc:	08006c11 	.word	0x08006c11
 8006be0:	08006c11 	.word	0x08006c11
 8006be4:	08006c19 	.word	0x08006c19
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006be8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bec:	3308      	adds	r3, #8
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f004 fe4c 	bl	800b88c <RCCEx_PLL2_Config>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8006bfa:	e00e      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006bfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c00:	3330      	adds	r3, #48	@ 0x30
 8006c02:	4618      	mov	r0, r3
 8006c04:	f004 feda 	bl	800b9bc <RCCEx_PLL3_Config>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8006c0e:	e004      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c16:	e000      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10c      	bne.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006c22:	4b5f      	ldr	r3, [pc, #380]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006c24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006c28:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c32:	4a5b      	ldr	r2, [pc, #364]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006c34:	430b      	orrs	r3, r1
 8006c36:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006c3a:	e003      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c3c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c40:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	f002 0304 	and.w	r3, r2, #4
 8006c50:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8006c54:	2300      	movs	r3, #0
 8006c56:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8006c5a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4313      	orrs	r3, r2
 8006c62:	d04e      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8006c64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c6a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006c6e:	d02c      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8006c70:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006c74:	d825      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c7a:	d028      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006c7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c80:	d81f      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006c82:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c84:	d025      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006c86:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c88:	d81b      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006c8a:	2b80      	cmp	r3, #128	@ 0x80
 8006c8c:	d00f      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x272>
 8006c8e:	2b80      	cmp	r3, #128	@ 0x80
 8006c90:	d817      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d01f      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8006c96:	2b40      	cmp	r3, #64	@ 0x40
 8006c98:	d113      	bne.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c9e:	3308      	adds	r3, #8
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f004 fdf3 	bl	800b88c <RCCEx_PLL2_Config>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8006cac:	e014      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006cae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cb2:	3330      	adds	r3, #48	@ 0x30
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f004 fe81 	bl	800b9bc <RCCEx_PLL3_Config>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8006cc0:	e00a      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006cc8:	e006      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006cca:	bf00      	nop
 8006ccc:	e004      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006cce:	bf00      	nop
 8006cd0:	e002      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006cd2:	bf00      	nop
 8006cd4:	e000      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10c      	bne.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006ce2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006ce6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006cf2:	430b      	orrs	r3, r1
 8006cf4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006cf8:	e003      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cfe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	f002 0308 	and.w	r3, r2, #8
 8006d0e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8006d12:	2300      	movs	r3, #0
 8006d14:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8006d18:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	d056      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8006d22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d28:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006d2c:	d031      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006d2e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006d32:	d82a      	bhi.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006d34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d38:	d02d      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006d3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d3e:	d824      	bhi.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006d40:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006d44:	d029      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006d46:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006d4a:	d81e      	bhi.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d50:	d011      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d56:	d818      	bhi.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d023      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006d5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d60:	d113      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d66:	3308      	adds	r3, #8
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f004 fd8f 	bl	800b88c <RCCEx_PLL2_Config>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8006d74:	e017      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d7a:	3330      	adds	r3, #48	@ 0x30
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f004 fe1d 	bl	800b9bc <RCCEx_PLL3_Config>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8006d88:	e00d      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d90:	e009      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006d92:	bf00      	nop
 8006d94:	e007      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006d96:	bf00      	nop
 8006d98:	e005      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006d9a:	bf00      	nop
 8006d9c:	e003      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006d9e:	bf00      	nop
 8006da0:	44020c00 	.word	0x44020c00
        break;
 8006da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006da6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10c      	bne.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006dae:	4bbb      	ldr	r3, [pc, #748]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006db4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006db8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dbe:	4ab7      	ldr	r2, [pc, #732]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006dc6:	e003      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006dcc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006dd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	f002 0310 	and.w	r3, r2, #16
 8006ddc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006de0:	2300      	movs	r3, #0
 8006de2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006de6:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8006dea:	460b      	mov	r3, r1
 8006dec:	4313      	orrs	r3, r2
 8006dee:	d053      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8006df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006df6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006dfa:	d031      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006dfc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006e00:	d82a      	bhi.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006e02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e06:	d02d      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006e08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e0c:	d824      	bhi.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006e0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e12:	d029      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006e14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e18:	d81e      	bhi.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e1e:	d011      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006e20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e24:	d818      	bhi.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d020      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x430>
 8006e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e2e:	d113      	bne.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e34:	3308      	adds	r3, #8
 8006e36:	4618      	mov	r0, r3
 8006e38:	f004 fd28 	bl	800b88c <RCCEx_PLL2_Config>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8006e42:	e014      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e48:	3330      	adds	r3, #48	@ 0x30
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f004 fdb6 	bl	800b9bc <RCCEx_PLL3_Config>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8006e56:	e00a      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006e5e:	e006      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006e60:	bf00      	nop
 8006e62:	e004      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006e64:	bf00      	nop
 8006e66:	e002      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006e68:	bf00      	nop
 8006e6a:	e000      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10c      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006e76:	4b89      	ldr	r3, [pc, #548]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006e78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e7c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006e80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e86:	4a85      	ldr	r2, [pc, #532]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006e88:	430b      	orrs	r3, r1
 8006e8a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006e8e:	e003      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e90:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e94:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	f002 0320 	and.w	r3, r2, #32
 8006ea4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006eae:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	d053      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8006eb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ebe:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006ec2:	d031      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8006ec4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006ec8:	d82a      	bhi.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006eca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ece:	d02d      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006ed0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ed4:	d824      	bhi.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006ed6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006eda:	d029      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8006edc:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006ee0:	d81e      	bhi.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ee6:	d011      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eec:	d818      	bhi.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d020      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8006ef2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ef6:	d113      	bne.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006efc:	3308      	adds	r3, #8
 8006efe:	4618      	mov	r0, r3
 8006f00:	f004 fcc4 	bl	800b88c <RCCEx_PLL2_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8006f0a:	e014      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f10:	3330      	adds	r3, #48	@ 0x30
 8006f12:	4618      	mov	r0, r3
 8006f14:	f004 fd52 	bl	800b9bc <RCCEx_PLL3_Config>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8006f1e:	e00a      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006f26:	e006      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006f28:	bf00      	nop
 8006f2a:	e004      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006f2c:	bf00      	nop
 8006f2e:	e002      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006f30:	bf00      	nop
 8006f32:	e000      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10c      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8006f3e:	4b57      	ldr	r3, [pc, #348]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006f40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f44:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8006f48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f4e:	4a53      	ldr	r2, [pc, #332]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006f50:	430b      	orrs	r3, r1
 8006f52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006f56:	e003      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f5c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006f60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006f6c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006f70:	2300      	movs	r3, #0
 8006f72:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006f76:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	d053      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8006f80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f86:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006f8a:	d031      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8006f8c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006f90:	d82a      	bhi.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006f92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f96:	d02d      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8006f98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f9c:	d824      	bhi.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006f9e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006fa2:	d029      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006fa4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006fa8:	d81e      	bhi.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006faa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006fae:	d011      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006fb0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006fb4:	d818      	bhi.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d020      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fbe:	d113      	bne.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f004 fc60 	bl	800b88c <RCCEx_PLL2_Config>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8006fd2:	e014      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006fd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fd8:	3330      	adds	r3, #48	@ 0x30
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f004 fcee 	bl	800b9bc <RCCEx_PLL3_Config>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8006fe6:	e00a      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006fee:	e006      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006ff0:	bf00      	nop
 8006ff2:	e004      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006ff4:	bf00      	nop
 8006ff6:	e002      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006ff8:	bf00      	nop
 8006ffa:	e000      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ffe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10c      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8007006:	4b25      	ldr	r3, [pc, #148]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007008:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800700c:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8007010:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007016:	4a21      	ldr	r2, [pc, #132]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007018:	430b      	orrs	r3, r1
 800701a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800701e:	e003      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007020:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007024:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007028:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007034:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8007038:	2300      	movs	r3, #0
 800703a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800703e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8007042:	460b      	mov	r3, r1
 8007044:	4313      	orrs	r3, r2
 8007046:	d055      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8007048:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800704c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800704e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007052:	d033      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x680>
 8007054:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007058:	d82c      	bhi.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800705a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800705e:	d02f      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8007060:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007064:	d826      	bhi.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007066:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800706a:	d02b      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800706c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007070:	d820      	bhi.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007072:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007076:	d013      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007078:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800707c:	d81a      	bhi.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800707e:	2b00      	cmp	r3, #0
 8007080:	d022      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8007082:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007086:	d115      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007088:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800708c:	3308      	adds	r3, #8
 800708e:	4618      	mov	r0, r3
 8007090:	f004 fbfc 	bl	800b88c <RCCEx_PLL2_Config>
 8007094:	4603      	mov	r3, r0
 8007096:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800709a:	e016      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800709c:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80070a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070a4:	3330      	adds	r3, #48	@ 0x30
 80070a6:	4618      	mov	r0, r3
 80070a8:	f004 fc88 	bl	800b9bc <RCCEx_PLL3_Config>
 80070ac:	4603      	mov	r3, r0
 80070ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80070b2:	e00a      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80070ba:	e006      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80070bc:	bf00      	nop
 80070be:	e004      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80070c0:	bf00      	nop
 80070c2:	e002      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80070c4:	bf00      	nop
 80070c6:	e000      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80070c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10c      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80070d2:	4bbb      	ldr	r3, [pc, #748]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80070d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80070d8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80070dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070e2:	4ab7      	ldr	r2, [pc, #732]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80070e4:	430b      	orrs	r3, r1
 80070e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80070ea:	e003      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80070f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007100:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007104:	2300      	movs	r3, #0
 8007106:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800710a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800710e:	460b      	mov	r3, r1
 8007110:	4313      	orrs	r3, r2
 8007112:	d053      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8007114:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007118:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800711a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800711e:	d031      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8007120:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007124:	d82a      	bhi.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007126:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800712a:	d02d      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800712c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007130:	d824      	bhi.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007132:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007136:	d029      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x750>
 8007138:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800713c:	d81e      	bhi.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800713e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007142:	d011      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007144:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007148:	d818      	bhi.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800714a:	2b00      	cmp	r3, #0
 800714c:	d020      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800714e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007152:	d113      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007154:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007158:	3308      	adds	r3, #8
 800715a:	4618      	mov	r0, r3
 800715c:	f004 fb96 	bl	800b88c <RCCEx_PLL2_Config>
 8007160:	4603      	mov	r3, r0
 8007162:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8007166:	e014      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007168:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800716c:	3330      	adds	r3, #48	@ 0x30
 800716e:	4618      	mov	r0, r3
 8007170:	f004 fc24 	bl	800b9bc <RCCEx_PLL3_Config>
 8007174:	4603      	mov	r3, r0
 8007176:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800717a:	e00a      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007182:	e006      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007184:	bf00      	nop
 8007186:	e004      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007188:	bf00      	nop
 800718a:	e002      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800718c:	bf00      	nop
 800718e:	e000      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007192:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10c      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800719a:	4b89      	ldr	r3, [pc, #548]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800719c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80071a0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80071a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071aa:	4a85      	ldr	r2, [pc, #532]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80071ac:	430b      	orrs	r3, r1
 80071ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80071b2:	e003      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071b8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80071bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80071c8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80071cc:	2300      	movs	r3, #0
 80071ce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80071d2:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80071d6:	460b      	mov	r3, r1
 80071d8:	4313      	orrs	r3, r2
 80071da:	d055      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80071dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071e4:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80071e8:	d031      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x812>
 80071ea:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80071ee:	d82a      	bhi.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80071f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071f4:	d02d      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80071f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071fa:	d824      	bhi.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80071fc:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007200:	d029      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8007202:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007206:	d81e      	bhi.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007208:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800720c:	d011      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800720e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007212:	d818      	bhi.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007214:	2b00      	cmp	r3, #0
 8007216:	d020      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8007218:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800721c:	d113      	bne.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800721e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007222:	3308      	adds	r3, #8
 8007224:	4618      	mov	r0, r3
 8007226:	f004 fb31 	bl	800b88c <RCCEx_PLL2_Config>
 800722a:	4603      	mov	r3, r0
 800722c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007230:	e014      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007232:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007236:	3330      	adds	r3, #48	@ 0x30
 8007238:	4618      	mov	r0, r3
 800723a:	f004 fbbf 	bl	800b9bc <RCCEx_PLL3_Config>
 800723e:	4603      	mov	r3, r0
 8007240:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007244:	e00a      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800724c:	e006      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800724e:	bf00      	nop
 8007250:	e004      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007252:	bf00      	nop
 8007254:	e002      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007256:	bf00      	nop
 8007258:	e000      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800725a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800725c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10d      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8007264:	4b56      	ldr	r3, [pc, #344]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007266:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800726a:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800726e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007276:	4a52      	ldr	r2, [pc, #328]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007278:	430b      	orrs	r3, r1
 800727a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800727e:	e003      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007280:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007284:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8007288:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007294:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007298:	2300      	movs	r3, #0
 800729a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800729e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80072a2:	460b      	mov	r3, r1
 80072a4:	4313      	orrs	r3, r2
 80072a6:	d044      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80072a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072b0:	2b05      	cmp	r3, #5
 80072b2:	d823      	bhi.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80072b4:	a201      	add	r2, pc, #4	@ (adr r2, 80072bc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80072b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ba:	bf00      	nop
 80072bc:	08007305 	.word	0x08007305
 80072c0:	080072d5 	.word	0x080072d5
 80072c4:	080072e9 	.word	0x080072e9
 80072c8:	08007305 	.word	0x08007305
 80072cc:	08007305 	.word	0x08007305
 80072d0:	08007305 	.word	0x08007305
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072d8:	3308      	adds	r3, #8
 80072da:	4618      	mov	r0, r3
 80072dc:	f004 fad6 	bl	800b88c <RCCEx_PLL2_Config>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80072e6:	e00e      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072ec:	3330      	adds	r3, #48	@ 0x30
 80072ee:	4618      	mov	r0, r3
 80072f0:	f004 fb64 	bl	800b9bc <RCCEx_PLL3_Config>
 80072f4:	4603      	mov	r3, r0
 80072f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80072fa:	e004      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007302:	e000      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8007304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007306:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10d      	bne.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800730e:	4b2c      	ldr	r3, [pc, #176]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007310:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007314:	f023 0107 	bic.w	r1, r3, #7
 8007318:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800731c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007320:	4a27      	ldr	r2, [pc, #156]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007322:	430b      	orrs	r3, r1
 8007324:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007328:	e003      	b.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800732a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800732e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8007332:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800733e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007342:	2300      	movs	r3, #0
 8007344:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007348:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800734c:	460b      	mov	r3, r1
 800734e:	4313      	orrs	r3, r2
 8007350:	d04f      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8007352:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800735a:	2b50      	cmp	r3, #80	@ 0x50
 800735c:	d029      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800735e:	2b50      	cmp	r3, #80	@ 0x50
 8007360:	d823      	bhi.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007362:	2b40      	cmp	r3, #64	@ 0x40
 8007364:	d027      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8007366:	2b40      	cmp	r3, #64	@ 0x40
 8007368:	d81f      	bhi.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800736a:	2b30      	cmp	r3, #48	@ 0x30
 800736c:	d025      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800736e:	2b30      	cmp	r3, #48	@ 0x30
 8007370:	d81b      	bhi.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007372:	2b20      	cmp	r3, #32
 8007374:	d00f      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007376:	2b20      	cmp	r3, #32
 8007378:	d817      	bhi.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d022      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800737e:	2b10      	cmp	r3, #16
 8007380:	d113      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007382:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007386:	3308      	adds	r3, #8
 8007388:	4618      	mov	r0, r3
 800738a:	f004 fa7f 	bl	800b88c <RCCEx_PLL2_Config>
 800738e:	4603      	mov	r3, r0
 8007390:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8007394:	e017      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007396:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800739a:	3330      	adds	r3, #48	@ 0x30
 800739c:	4618      	mov	r0, r3
 800739e:	f004 fb0d 	bl	800b9bc <RCCEx_PLL3_Config>
 80073a2:	4603      	mov	r3, r0
 80073a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80073a8:	e00d      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80073b0:	e009      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80073b2:	bf00      	nop
 80073b4:	e007      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80073b6:	bf00      	nop
 80073b8:	e005      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80073ba:	bf00      	nop
 80073bc:	e003      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80073be:	bf00      	nop
 80073c0:	44020c00 	.word	0x44020c00
        break;
 80073c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10d      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80073ce:	4baf      	ldr	r3, [pc, #700]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80073d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80073d4:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80073d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e0:	4aaa      	ldr	r2, [pc, #680]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80073e2:	430b      	orrs	r3, r1
 80073e4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80073e8:	e003      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073ee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80073fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007402:	2300      	movs	r3, #0
 8007404:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007408:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800740c:	460b      	mov	r3, r1
 800740e:	4313      	orrs	r3, r2
 8007410:	d055      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8007412:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800741a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800741e:	d031      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8007420:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007424:	d82a      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007426:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800742a:	d02d      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800742c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007430:	d824      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007432:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007436:	d029      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8007438:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800743c:	d81e      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800743e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007442:	d011      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8007444:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007448:	d818      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800744a:	2b00      	cmp	r3, #0
 800744c:	d020      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800744e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007452:	d113      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007454:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007458:	3308      	adds	r3, #8
 800745a:	4618      	mov	r0, r3
 800745c:	f004 fa16 	bl	800b88c <RCCEx_PLL2_Config>
 8007460:	4603      	mov	r3, r0
 8007462:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007466:	e014      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007468:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800746c:	3330      	adds	r3, #48	@ 0x30
 800746e:	4618      	mov	r0, r3
 8007470:	f004 faa4 	bl	800b9bc <RCCEx_PLL3_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800747a:	e00a      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007482:	e006      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007484:	bf00      	nop
 8007486:	e004      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007488:	bf00      	nop
 800748a:	e002      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800748c:	bf00      	nop
 800748e:	e000      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007492:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10d      	bne.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800749a:	4b7c      	ldr	r3, [pc, #496]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800749c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074a0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80074a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074ac:	4a77      	ldr	r2, [pc, #476]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80074ae:	430b      	orrs	r3, r1
 80074b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80074b4:	e003      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80074ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074ce:	2300      	movs	r3, #0
 80074d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80074d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80074d8:	460b      	mov	r3, r1
 80074da:	4313      	orrs	r3, r2
 80074dc:	d03d      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80074de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074ea:	d01b      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80074ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074f0:	d814      	bhi.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80074f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074f6:	d017      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80074f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074fc:	d80e      	bhi.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d014      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8007502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007506:	d109      	bne.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007508:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800750c:	3330      	adds	r3, #48	@ 0x30
 800750e:	4618      	mov	r0, r3
 8007510:	f004 fa54 	bl	800b9bc <RCCEx_PLL3_Config>
 8007514:	4603      	mov	r3, r0
 8007516:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800751a:	e008      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007522:	e004      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007524:	bf00      	nop
 8007526:	e002      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007528:	bf00      	nop
 800752a:	e000      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800752c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800752e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10d      	bne.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007536:	4b55      	ldr	r3, [pc, #340]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007538:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800753c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007540:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007548:	4a50      	ldr	r2, [pc, #320]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800754a:	430b      	orrs	r3, r1
 800754c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007550:	e003      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007552:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007556:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800755a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007562:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007566:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800756a:	2300      	movs	r3, #0
 800756c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007570:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007574:	460b      	mov	r3, r1
 8007576:	4313      	orrs	r3, r2
 8007578:	d03d      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800757a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800757e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007582:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007586:	d01b      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8007588:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800758c:	d814      	bhi.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800758e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007592:	d017      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8007594:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007598:	d80e      	bhi.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d014      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800759e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075a2:	d109      	bne.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80075a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075a8:	3330      	adds	r3, #48	@ 0x30
 80075aa:	4618      	mov	r0, r3
 80075ac:	f004 fa06 	bl	800b9bc <RCCEx_PLL3_Config>
 80075b0:	4603      	mov	r3, r0
 80075b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80075b6:	e008      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80075be:	e004      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80075c0:	bf00      	nop
 80075c2:	e002      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80075c4:	bf00      	nop
 80075c6:	e000      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80075c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10d      	bne.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80075d2:	4b2e      	ldr	r3, [pc, #184]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80075d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075d8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80075dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075e4:	4a29      	ldr	r2, [pc, #164]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80075e6:	430b      	orrs	r3, r1
 80075e8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80075ec:	e003      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007602:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007606:	2300      	movs	r3, #0
 8007608:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800760c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007610:	460b      	mov	r3, r1
 8007612:	4313      	orrs	r3, r2
 8007614:	d040      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8007616:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800761a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800761e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007622:	d01b      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8007624:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007628:	d814      	bhi.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800762a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800762e:	d017      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007630:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007634:	d80e      	bhi.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8007636:	2b00      	cmp	r3, #0
 8007638:	d014      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800763a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800763e:	d109      	bne.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007640:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007644:	3330      	adds	r3, #48	@ 0x30
 8007646:	4618      	mov	r0, r3
 8007648:	f004 f9b8 	bl	800b9bc <RCCEx_PLL3_Config>
 800764c:	4603      	mov	r3, r0
 800764e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8007652:	e008      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800765a:	e004      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800765c:	bf00      	nop
 800765e:	e002      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007660:	bf00      	nop
 8007662:	e000      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007666:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800766a:	2b00      	cmp	r3, #0
 800766c:	d110      	bne.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800766e:	4b07      	ldr	r3, [pc, #28]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007670:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007674:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007678:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800767c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007680:	4a02      	ldr	r2, [pc, #8]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007682:	430b      	orrs	r3, r1
 8007684:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007688:	e006      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800768a:	bf00      	nop
 800768c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007690:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007694:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007698:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	2100      	movs	r1, #0
 80076a2:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80076a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80076ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4313      	orrs	r3, r2
 80076b6:	d03d      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80076b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80076c4:	d01b      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80076c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80076ca:	d814      	bhi.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80076cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076d0:	d017      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80076d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076d6:	d80e      	bhi.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d014      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80076dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076e0:	d109      	bne.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80076e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076e6:	3330      	adds	r3, #48	@ 0x30
 80076e8:	4618      	mov	r0, r3
 80076ea:	f004 f967 	bl	800b9bc <RCCEx_PLL3_Config>
 80076ee:	4603      	mov	r3, r0
 80076f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80076f4:	e008      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80076fc:	e004      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80076fe:	bf00      	nop
 8007700:	e002      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007702:	bf00      	nop
 8007704:	e000      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007708:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10d      	bne.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007710:	4bbe      	ldr	r3, [pc, #760]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007712:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007716:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800771a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800771e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007722:	4aba      	ldr	r2, [pc, #744]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007724:	430b      	orrs	r3, r1
 8007726:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800772a:	e003      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007730:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007734:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007740:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007744:	2300      	movs	r3, #0
 8007746:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800774a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800774e:	460b      	mov	r3, r1
 8007750:	4313      	orrs	r3, r2
 8007752:	d035      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8007754:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007758:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800775c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007760:	d015      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8007762:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007766:	d80e      	bhi.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007768:	2b00      	cmp	r3, #0
 800776a:	d012      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800776c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007770:	d109      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007772:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007776:	3330      	adds	r3, #48	@ 0x30
 8007778:	4618      	mov	r0, r3
 800777a:	f004 f91f 	bl	800b9bc <RCCEx_PLL3_Config>
 800777e:	4603      	mov	r3, r0
 8007780:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8007784:	e006      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800778c:	e002      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800778e:	bf00      	nop
 8007790:	e000      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8007792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007794:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10d      	bne.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800779c:	4b9b      	ldr	r3, [pc, #620]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800779e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077a2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80077a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80077ae:	4a97      	ldr	r2, [pc, #604]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80077b0:	430b      	orrs	r3, r1
 80077b2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80077b6:	e003      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077bc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80077c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	2100      	movs	r1, #0
 80077ca:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80077ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80077da:	460b      	mov	r3, r1
 80077dc:	4313      	orrs	r3, r2
 80077de:	d00e      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80077e0:	4b8a      	ldr	r3, [pc, #552]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	4a89      	ldr	r2, [pc, #548]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80077e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077ea:	61d3      	str	r3, [r2, #28]
 80077ec:	4b87      	ldr	r3, [pc, #540]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80077ee:	69d9      	ldr	r1, [r3, #28]
 80077f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077f4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80077f8:	4a84      	ldr	r2, [pc, #528]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80077fa:	430b      	orrs	r3, r1
 80077fc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800780a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800780e:	2300      	movs	r3, #0
 8007810:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007814:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007818:	460b      	mov	r3, r1
 800781a:	4313      	orrs	r3, r2
 800781c:	d055      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800781e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007822:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007826:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800782a:	d031      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800782c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007830:	d82a      	bhi.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007836:	d02d      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8007838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800783c:	d824      	bhi.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800783e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007842:	d029      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8007844:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007848:	d81e      	bhi.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800784a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800784e:	d011      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8007850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007854:	d818      	bhi.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007856:	2b00      	cmp	r3, #0
 8007858:	d020      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800785a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800785e:	d113      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007860:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007864:	3308      	adds	r3, #8
 8007866:	4618      	mov	r0, r3
 8007868:	f004 f810 	bl	800b88c <RCCEx_PLL2_Config>
 800786c:	4603      	mov	r3, r0
 800786e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007872:	e014      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007874:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007878:	3330      	adds	r3, #48	@ 0x30
 800787a:	4618      	mov	r0, r3
 800787c:	f004 f89e 	bl	800b9bc <RCCEx_PLL3_Config>
 8007880:	4603      	mov	r3, r0
 8007882:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007886:	e00a      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800788e:	e006      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007890:	bf00      	nop
 8007892:	e004      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007894:	bf00      	nop
 8007896:	e002      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007898:	bf00      	nop
 800789a:	e000      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800789c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10d      	bne.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80078a6:	4b59      	ldr	r3, [pc, #356]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80078a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80078ac:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80078b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078b8:	4a54      	ldr	r2, [pc, #336]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80078ba:	430b      	orrs	r3, r1
 80078bc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80078c0:	e003      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078c6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80078ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80078d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078da:	2300      	movs	r3, #0
 80078dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078e0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4313      	orrs	r3, r2
 80078e8:	d055      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80078ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80078f2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80078f6:	d031      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80078f8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80078fc:	d82a      	bhi.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80078fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007902:	d02d      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8007904:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007908:	d824      	bhi.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800790a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800790e:	d029      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8007910:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007914:	d81e      	bhi.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800791a:	d011      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800791c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007920:	d818      	bhi.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d020      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800792a:	d113      	bne.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800792c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007930:	3308      	adds	r3, #8
 8007932:	4618      	mov	r0, r3
 8007934:	f003 ffaa 	bl	800b88c <RCCEx_PLL2_Config>
 8007938:	4603      	mov	r3, r0
 800793a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800793e:	e014      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007940:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007944:	3330      	adds	r3, #48	@ 0x30
 8007946:	4618      	mov	r0, r3
 8007948:	f004 f838 	bl	800b9bc <RCCEx_PLL3_Config>
 800794c:	4603      	mov	r3, r0
 800794e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007952:	e00a      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800795a:	e006      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800795c:	bf00      	nop
 800795e:	e004      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007960:	bf00      	nop
 8007962:	e002      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007964:	bf00      	nop
 8007966:	e000      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800796a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10d      	bne.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007972:	4b26      	ldr	r3, [pc, #152]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007974:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007978:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800797c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007980:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007984:	4a21      	ldr	r2, [pc, #132]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007986:	430b      	orrs	r3, r1
 8007988:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800798c:	e003      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007992:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8007996:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	2100      	movs	r1, #0
 80079a0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80079a4:	f003 0320 	and.w	r3, r3, #32
 80079a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80079b0:	460b      	mov	r3, r1
 80079b2:	4313      	orrs	r3, r2
 80079b4:	d057      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80079b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80079be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079c2:	d033      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80079c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079c8:	d82c      	bhi.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80079ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079ce:	d02f      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80079d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079d4:	d826      	bhi.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80079d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079da:	d02b      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80079dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079e0:	d820      	bhi.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80079e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079e6:	d013      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80079e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079ec:	d81a      	bhi.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d022      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80079f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f6:	d115      	bne.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80079f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079fc:	3308      	adds	r3, #8
 80079fe:	4618      	mov	r0, r3
 8007a00:	f003 ff44 	bl	800b88c <RCCEx_PLL2_Config>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8007a0a:	e016      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8007a0c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a14:	3330      	adds	r3, #48	@ 0x30
 8007a16:	4618      	mov	r0, r3
 8007a18:	f003 ffd0 	bl	800b9bc <RCCEx_PLL3_Config>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8007a22:	e00a      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007a2a:	e006      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007a2c:	bf00      	nop
 8007a2e:	e004      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007a30:	bf00      	nop
 8007a32:	e002      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007a34:	bf00      	nop
 8007a36:	e000      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10d      	bne.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8007a42:	4bbb      	ldr	r3, [pc, #748]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007a44:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007a48:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007a4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007a54:	4ab6      	ldr	r2, [pc, #728]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007a56:	430b      	orrs	r3, r1
 8007a58:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007a5c:	e003      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a62:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8007a66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	2100      	movs	r1, #0
 8007a70:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8007a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a7c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007a80:	460b      	mov	r3, r1
 8007a82:	4313      	orrs	r3, r2
 8007a84:	d055      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8007a86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a8e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007a92:	d031      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8007a94:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007a98:	d82a      	bhi.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007a9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a9e:	d02d      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8007aa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007aa4:	d824      	bhi.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007aa6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007aaa:	d029      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8007aac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ab0:	d81e      	bhi.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007ab2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ab6:	d011      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8007ab8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007abc:	d818      	bhi.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d020      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8007ac2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ac6:	d113      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007acc:	3308      	adds	r3, #8
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f003 fedc 	bl	800b88c <RCCEx_PLL2_Config>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8007ada:	e014      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007adc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ae0:	3330      	adds	r3, #48	@ 0x30
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f003 ff6a 	bl	800b9bc <RCCEx_PLL3_Config>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8007aee:	e00a      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007af6:	e006      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007af8:	bf00      	nop
 8007afa:	e004      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007afc:	bf00      	nop
 8007afe:	e002      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007b00:	bf00      	nop
 8007b02:	e000      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10d      	bne.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8007b0e:	4b88      	ldr	r3, [pc, #544]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007b10:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007b14:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8007b18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b20:	4a83      	ldr	r2, [pc, #524]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007b22:	430b      	orrs	r3, r1
 8007b24:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007b28:	e003      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b2e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8007b32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8007b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b48:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	d055      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8007b52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b5a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007b5e:	d031      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8007b60:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007b64:	d82a      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b6a:	d02d      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8007b6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b70:	d824      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007b72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b76:	d029      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8007b78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b7c:	d81e      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007b7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b82:	d011      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8007b84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b88:	d818      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d020      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8007b8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b92:	d113      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b98:	3308      	adds	r3, #8
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f003 fe76 	bl	800b88c <RCCEx_PLL2_Config>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8007ba6:	e014      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ba8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bac:	3330      	adds	r3, #48	@ 0x30
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f003 ff04 	bl	800b9bc <RCCEx_PLL3_Config>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8007bba:	e00a      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007bc2:	e006      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007bc4:	bf00      	nop
 8007bc6:	e004      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007bc8:	bf00      	nop
 8007bca:	e002      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007bcc:	bf00      	nop
 8007bce:	e000      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bd2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10d      	bne.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8007bda:	4b55      	ldr	r3, [pc, #340]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007bdc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007be0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007be4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007be8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bec:	4a50      	ldr	r2, [pc, #320]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007bee:	430b      	orrs	r3, r1
 8007bf0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007bf4:	e003      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007bfa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8007bfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c06:	2100      	movs	r1, #0
 8007c08:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8007c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c14:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	d055      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8007c1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c2a:	d031      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8007c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c30:	d82a      	bhi.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c36:	d02d      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8007c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c3c:	d824      	bhi.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007c3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c42:	d029      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8007c44:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c48:	d81e      	bhi.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007c4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c4e:	d011      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8007c50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c54:	d818      	bhi.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d020      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8007c5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c5e:	d113      	bne.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c64:	3308      	adds	r3, #8
 8007c66:	4618      	mov	r0, r3
 8007c68:	f003 fe10 	bl	800b88c <RCCEx_PLL2_Config>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8007c72:	e014      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c78:	3330      	adds	r3, #48	@ 0x30
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f003 fe9e 	bl	800b9bc <RCCEx_PLL3_Config>
 8007c80:	4603      	mov	r3, r0
 8007c82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8007c86:	e00a      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007c8e:	e006      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007c90:	bf00      	nop
 8007c92:	e004      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007c94:	bf00      	nop
 8007c96:	e002      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007c98:	bf00      	nop
 8007c9a:	e000      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10d      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8007ca6:	4b22      	ldr	r3, [pc, #136]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007ca8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007cac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cb4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007cba:	430b      	orrs	r3, r1
 8007cbc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007cc0:	e003      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007cc6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007cd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ce0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	d055      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007cf2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007cf6:	d035      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8007cf8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007cfc:	d82e      	bhi.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8007cfe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d02:	d031      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8007d04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d08:	d828      	bhi.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8007d0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d0e:	d01b      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8007d10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d14:	d822      	bhi.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8007d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d1e:	d009      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8007d20:	e01c      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d22:	4b03      	ldr	r3, [pc, #12]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d26:	4a02      	ldr	r2, [pc, #8]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d2c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007d2e:	e01c      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8007d30:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d38:	3308      	adds	r3, #8
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f003 fda6 	bl	800b88c <RCCEx_PLL2_Config>
 8007d40:	4603      	mov	r3, r0
 8007d42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007d46:	e010      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d4c:	3330      	adds	r3, #48	@ 0x30
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f003 fe34 	bl	800b9bc <RCCEx_PLL3_Config>
 8007d54:	4603      	mov	r3, r0
 8007d56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007d5a:	e006      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d62:	e002      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8007d64:	bf00      	nop
 8007d66:	e000      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8007d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10d      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007d72:	4bc3      	ldr	r3, [pc, #780]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007d74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d78:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007d7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d84:	4abe      	ldr	r2, [pc, #760]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007d86:	430b      	orrs	r3, r1
 8007d88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007d8c:	e003      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d92:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8007d96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007da2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007da6:	2300      	movs	r3, #0
 8007da8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007dac:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007db0:	460b      	mov	r3, r1
 8007db2:	4313      	orrs	r3, r2
 8007db4:	d051      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007db6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007dbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dc2:	d033      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8007dc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dc8:	d82c      	bhi.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007dca:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007dce:	d02d      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8007dd0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007dd4:	d826      	bhi.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007dd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dda:	d019      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8007ddc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007de0:	d820      	bhi.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8007de6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007dea:	d007      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8007dec:	e01a      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dee:	4ba4      	ldr	r3, [pc, #656]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df2:	4aa3      	ldr	r2, [pc, #652]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007df8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007dfa:	e018      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e00:	3308      	adds	r3, #8
 8007e02:	4618      	mov	r0, r3
 8007e04:	f003 fd42 	bl	800b88c <RCCEx_PLL2_Config>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007e0e:	e00e      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e14:	3330      	adds	r3, #48	@ 0x30
 8007e16:	4618      	mov	r0, r3
 8007e18:	f003 fdd0 	bl	800b9bc <RCCEx_PLL3_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007e22:	e004      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007e2a:	e000      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8007e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10d      	bne.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007e36:	4b92      	ldr	r3, [pc, #584]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e3c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8007e40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e44:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007e48:	4a8d      	ldr	r2, [pc, #564]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007e4a:	430b      	orrs	r3, r1
 8007e4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007e50:	e003      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e56:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007e5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007e66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e68:	2300      	movs	r3, #0
 8007e6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007e70:	460b      	mov	r3, r1
 8007e72:	4313      	orrs	r3, r2
 8007e74:	d032      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007e76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007e7e:	2b05      	cmp	r3, #5
 8007e80:	d80f      	bhi.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d211      	bcs.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d911      	bls.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d109      	bne.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e92:	3308      	adds	r3, #8
 8007e94:	4618      	mov	r0, r3
 8007e96:	f003 fcf9 	bl	800b88c <RCCEx_PLL2_Config>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007ea0:	e006      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007ea8:	e002      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8007eaa:	bf00      	nop
 8007eac:	e000      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8007eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10d      	bne.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007eb8:	4b71      	ldr	r3, [pc, #452]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007eba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ebe:	f023 0107 	bic.w	r1, r3, #7
 8007ec2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ec6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007eca:	4a6d      	ldr	r2, [pc, #436]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007ecc:	430b      	orrs	r3, r1
 8007ece:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007ed2:	e003      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ed8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8007edc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	6739      	str	r1, [r7, #112]	@ 0x70
 8007ee8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007eec:	677b      	str	r3, [r7, #116]	@ 0x74
 8007eee:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	d024      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8007ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007efc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d005      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8007f04:	2b08      	cmp	r3, #8
 8007f06:	d005      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007f0e:	e002      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8007f10:	bf00      	nop
 8007f12:	e000      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8007f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10d      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8007f1e:	4b58      	ldr	r3, [pc, #352]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f24:	f023 0108 	bic.w	r1, r3, #8
 8007f28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007f30:	4a53      	ldr	r2, [pc, #332]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007f32:	430b      	orrs	r3, r1
 8007f34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007f38:	e003      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f3e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007f4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f50:	2300      	movs	r3, #0
 8007f52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f54:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	f000 80b9 	beq.w	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007f60:	4b48      	ldr	r3, [pc, #288]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8007f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f64:	4a47      	ldr	r2, [pc, #284]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8007f66:	f043 0301 	orr.w	r3, r3, #1
 8007f6a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f6c:	f7fa fcae 	bl	80028cc <HAL_GetTick>
 8007f70:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007f74:	e00b      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f76:	f7fa fca9 	bl	80028cc <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d903      	bls.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007f8c:	e005      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8008084 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8007f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d0ed      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8007f9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f040 8093 	bne.w	80080ca <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007fa4:	4b36      	ldr	r3, [pc, #216]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007fa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fae:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007fb2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d023      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8007fba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fbe:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8007fc2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d01b      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007fca:	4b2d      	ldr	r3, [pc, #180]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fd4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007fd8:	4b29      	ldr	r3, [pc, #164]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007fda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fde:	4a28      	ldr	r2, [pc, #160]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fe4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007fe8:	4b25      	ldr	r3, [pc, #148]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fee:	4a24      	ldr	r2, [pc, #144]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007ff0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ff4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ff8:	4a21      	ldr	r2, [pc, #132]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007ffa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007ffe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008002:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d019      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800800e:	f7fa fc5d 	bl	80028cc <HAL_GetTick>
 8008012:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008016:	e00d      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008018:	f7fa fc58 	bl	80028cc <HAL_GetTick>
 800801c:	4602      	mov	r2, r0
 800801e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008022:	1ad2      	subs	r2, r2, r3
 8008024:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008028:	429a      	cmp	r2, r3
 800802a:	d903      	bls.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8008032:	e006      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008034:	4b12      	ldr	r3, [pc, #72]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008036:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0ea      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8008042:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008046:	2b00      	cmp	r3, #0
 8008048:	d13a      	bne.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800804a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800804e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008056:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800805a:	d115      	bne.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800805c:	4b08      	ldr	r3, [pc, #32]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008064:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008068:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800806c:	091b      	lsrs	r3, r3, #4
 800806e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008072:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8008076:	4a02      	ldr	r2, [pc, #8]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008078:	430b      	orrs	r3, r1
 800807a:	61d3      	str	r3, [r2, #28]
 800807c:	e00a      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800807e:	bf00      	nop
 8008080:	44020c00 	.word	0x44020c00
 8008084:	44020800 	.word	0x44020800
 8008088:	4b9f      	ldr	r3, [pc, #636]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	4a9e      	ldr	r2, [pc, #632]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800808e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008092:	61d3      	str	r3, [r2, #28]
 8008094:	4b9c      	ldr	r3, [pc, #624]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008096:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800809a:	4a9b      	ldr	r2, [pc, #620]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800809c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80080a4:	4b98      	ldr	r3, [pc, #608]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80080a6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80080aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080ae:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80080b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080b6:	4a94      	ldr	r2, [pc, #592]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80080b8:	430b      	orrs	r3, r1
 80080ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80080be:	e008      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80080c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80080c8:	e003      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80080d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080da:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80080de:	663b      	str	r3, [r7, #96]	@ 0x60
 80080e0:	2300      	movs	r3, #0
 80080e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80080e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80080e8:	460b      	mov	r3, r1
 80080ea:	4313      	orrs	r3, r2
 80080ec:	d035      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80080ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80080f6:	2b30      	cmp	r3, #48	@ 0x30
 80080f8:	d014      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80080fa:	2b30      	cmp	r3, #48	@ 0x30
 80080fc:	d80e      	bhi.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80080fe:	2b20      	cmp	r3, #32
 8008100:	d012      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8008102:	2b20      	cmp	r3, #32
 8008104:	d80a      	bhi.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8008106:	2b00      	cmp	r3, #0
 8008108:	d010      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800810a:	2b10      	cmp	r3, #16
 800810c:	d106      	bne.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800810e:	4b7e      	ldr	r3, [pc, #504]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008112:	4a7d      	ldr	r2, [pc, #500]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008118:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800811a:	e008      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008122:	e004      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008124:	bf00      	nop
 8008126:	e002      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008128:	bf00      	nop
 800812a:	e000      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800812c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800812e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10d      	bne.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008136:	4b74      	ldr	r3, [pc, #464]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800813c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008140:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008144:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008148:	4a6f      	ldr	r2, [pc, #444]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800814a:	430b      	orrs	r3, r1
 800814c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008150:	e003      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008152:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008156:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800815a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008166:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008168:	2300      	movs	r3, #0
 800816a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800816c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008170:	460b      	mov	r3, r1
 8008172:	4313      	orrs	r3, r2
 8008174:	d033      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8008176:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800817a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800817e:	2b00      	cmp	r3, #0
 8008180:	d002      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8008182:	2b40      	cmp	r3, #64	@ 0x40
 8008184:	d007      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8008186:	e010      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008188:	4b5f      	ldr	r3, [pc, #380]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800818a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818c:	4a5e      	ldr	r2, [pc, #376]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800818e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008192:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8008194:	e00d      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008196:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800819a:	3308      	adds	r3, #8
 800819c:	4618      	mov	r0, r3
 800819e:	f003 fb75 	bl	800b88c <RCCEx_PLL2_Config>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80081a8:	e003      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80081b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10d      	bne.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80081ba:	4b53      	ldr	r3, [pc, #332]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80081bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80081c0:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80081c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081c8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80081cc:	4a4e      	ldr	r2, [pc, #312]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80081ce:	430b      	orrs	r3, r1
 80081d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80081d4:	e003      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80081da:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80081de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80081ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80081ec:	2300      	movs	r3, #0
 80081ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80081f0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80081f4:	460b      	mov	r3, r1
 80081f6:	4313      	orrs	r3, r2
 80081f8:	d033      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80081fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d002      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8008206:	2b80      	cmp	r3, #128	@ 0x80
 8008208:	d007      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800820a:	e010      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800820c:	4b3e      	ldr	r3, [pc, #248]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800820e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008210:	4a3d      	ldr	r2, [pc, #244]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008212:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008216:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8008218:	e00d      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800821a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800821e:	3308      	adds	r3, #8
 8008220:	4618      	mov	r0, r3
 8008222:	f003 fb33 	bl	800b88c <RCCEx_PLL2_Config>
 8008226:	4603      	mov	r3, r0
 8008228:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800822c:	e003      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008236:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10d      	bne.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800823e:	4b32      	ldr	r3, [pc, #200]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008240:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008244:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8008248:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800824c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008250:	4a2d      	ldr	r2, [pc, #180]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008252:	430b      	orrs	r3, r1
 8008254:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008258:	e003      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800825e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008262:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800826e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008270:	2300      	movs	r3, #0
 8008272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008274:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008278:	460b      	mov	r3, r1
 800827a:	4313      	orrs	r3, r2
 800827c:	d04a      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800827e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008286:	2b04      	cmp	r3, #4
 8008288:	d827      	bhi.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800828a:	a201      	add	r2, pc, #4	@ (adr r2, 8008290 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082a5 	.word	0x080082a5
 8008294:	080082b3 	.word	0x080082b3
 8008298:	080082c7 	.word	0x080082c7
 800829c:	080082e3 	.word	0x080082e3
 80082a0:	080082e3 	.word	0x080082e3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082a4:	4b18      	ldr	r3, [pc, #96]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80082a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a8:	4a17      	ldr	r2, [pc, #92]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80082aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082ae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80082b0:	e018      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80082b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082b6:	3308      	adds	r3, #8
 80082b8:	4618      	mov	r0, r3
 80082ba:	f003 fae7 	bl	800b88c <RCCEx_PLL2_Config>
 80082be:	4603      	mov	r3, r0
 80082c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80082c4:	e00e      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80082c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082ca:	3330      	adds	r3, #48	@ 0x30
 80082cc:	4618      	mov	r0, r3
 80082ce:	f003 fb75 	bl	800b9bc <RCCEx_PLL3_Config>
 80082d2:	4603      	mov	r3, r0
 80082d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80082d8:	e004      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80082e0:	e000      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80082e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10f      	bne.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80082ec:	4b06      	ldr	r3, [pc, #24]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80082ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082f2:	f023 0107 	bic.w	r1, r3, #7
 80082f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082fe:	4a02      	ldr	r2, [pc, #8]	@ (8008308 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008300:	430b      	orrs	r3, r1
 8008302:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008306:	e005      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8008308:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800830c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008310:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008314:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008320:	643b      	str	r3, [r7, #64]	@ 0x40
 8008322:	2300      	movs	r3, #0
 8008324:	647b      	str	r3, [r7, #68]	@ 0x44
 8008326:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800832a:	460b      	mov	r3, r1
 800832c:	4313      	orrs	r3, r2
 800832e:	f000 8081 	beq.w	8008434 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8008332:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008336:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800833a:	2b20      	cmp	r3, #32
 800833c:	d85f      	bhi.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800833e:	a201      	add	r2, pc, #4	@ (adr r2, 8008344 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8008340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008344:	080083c9 	.word	0x080083c9
 8008348:	080083ff 	.word	0x080083ff
 800834c:	080083ff 	.word	0x080083ff
 8008350:	080083ff 	.word	0x080083ff
 8008354:	080083ff 	.word	0x080083ff
 8008358:	080083ff 	.word	0x080083ff
 800835c:	080083ff 	.word	0x080083ff
 8008360:	080083ff 	.word	0x080083ff
 8008364:	080083d7 	.word	0x080083d7
 8008368:	080083ff 	.word	0x080083ff
 800836c:	080083ff 	.word	0x080083ff
 8008370:	080083ff 	.word	0x080083ff
 8008374:	080083ff 	.word	0x080083ff
 8008378:	080083ff 	.word	0x080083ff
 800837c:	080083ff 	.word	0x080083ff
 8008380:	080083ff 	.word	0x080083ff
 8008384:	080083eb 	.word	0x080083eb
 8008388:	080083ff 	.word	0x080083ff
 800838c:	080083ff 	.word	0x080083ff
 8008390:	080083ff 	.word	0x080083ff
 8008394:	080083ff 	.word	0x080083ff
 8008398:	080083ff 	.word	0x080083ff
 800839c:	080083ff 	.word	0x080083ff
 80083a0:	080083ff 	.word	0x080083ff
 80083a4:	08008407 	.word	0x08008407
 80083a8:	080083ff 	.word	0x080083ff
 80083ac:	080083ff 	.word	0x080083ff
 80083b0:	080083ff 	.word	0x080083ff
 80083b4:	080083ff 	.word	0x080083ff
 80083b8:	080083ff 	.word	0x080083ff
 80083bc:	080083ff 	.word	0x080083ff
 80083c0:	080083ff 	.word	0x080083ff
 80083c4:	08008407 	.word	0x08008407
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083c8:	4bab      	ldr	r3, [pc, #684]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80083ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083cc:	4aaa      	ldr	r2, [pc, #680]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80083ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083d2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80083d4:	e018      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80083d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083da:	3308      	adds	r3, #8
 80083dc:	4618      	mov	r0, r3
 80083de:	f003 fa55 	bl	800b88c <RCCEx_PLL2_Config>
 80083e2:	4603      	mov	r3, r0
 80083e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80083e8:	e00e      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80083ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083ee:	3330      	adds	r3, #48	@ 0x30
 80083f0:	4618      	mov	r0, r3
 80083f2:	f003 fae3 	bl	800b9bc <RCCEx_PLL3_Config>
 80083f6:	4603      	mov	r3, r0
 80083f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80083fc:	e004      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008404:	e000      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8008406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008408:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10d      	bne.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008410:	4b99      	ldr	r3, [pc, #612]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008416:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800841a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800841e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008422:	4a95      	ldr	r2, [pc, #596]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008424:	430b      	orrs	r3, r1
 8008426:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800842a:	e003      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800842c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008430:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008434:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008440:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008442:	2300      	movs	r3, #0
 8008444:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008446:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800844a:	460b      	mov	r3, r1
 800844c:	4313      	orrs	r3, r2
 800844e:	d04e      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8008450:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008454:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008458:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800845c:	d02e      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800845e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008462:	d827      	bhi.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008464:	2bc0      	cmp	r3, #192	@ 0xc0
 8008466:	d02b      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8008468:	2bc0      	cmp	r3, #192	@ 0xc0
 800846a:	d823      	bhi.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800846c:	2b80      	cmp	r3, #128	@ 0x80
 800846e:	d017      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8008470:	2b80      	cmp	r3, #128	@ 0x80
 8008472:	d81f      	bhi.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8008478:	2b40      	cmp	r3, #64	@ 0x40
 800847a:	d007      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800847c:	e01a      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800847e:	4b7e      	ldr	r3, [pc, #504]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008482:	4a7d      	ldr	r2, [pc, #500]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008488:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800848a:	e01a      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800848c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008490:	3308      	adds	r3, #8
 8008492:	4618      	mov	r0, r3
 8008494:	f003 f9fa 	bl	800b88c <RCCEx_PLL2_Config>
 8008498:	4603      	mov	r3, r0
 800849a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800849e:	e010      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80084a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084a4:	3330      	adds	r3, #48	@ 0x30
 80084a6:	4618      	mov	r0, r3
 80084a8:	f003 fa88 	bl	800b9bc <RCCEx_PLL3_Config>
 80084ac:	4603      	mov	r3, r0
 80084ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80084b2:	e006      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80084ba:	e002      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80084bc:	bf00      	nop
 80084be:	e000      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80084c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10d      	bne.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80084ca:	4b6b      	ldr	r3, [pc, #428]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80084cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084d0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80084d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80084dc:	4a66      	ldr	r2, [pc, #408]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80084de:	430b      	orrs	r3, r1
 80084e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80084e4:	e003      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80084ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80084fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80084fc:	2300      	movs	r3, #0
 80084fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008500:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008504:	460b      	mov	r3, r1
 8008506:	4313      	orrs	r3, r2
 8008508:	d055      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800850a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800850e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008512:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008516:	d031      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8008518:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800851c:	d82a      	bhi.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800851e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008522:	d02d      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8008524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008528:	d824      	bhi.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800852a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800852e:	d029      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8008530:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008534:	d81e      	bhi.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800853a:	d011      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800853c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008540:	d818      	bhi.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d020      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8008546:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800854a:	d113      	bne.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800854c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008550:	3308      	adds	r3, #8
 8008552:	4618      	mov	r0, r3
 8008554:	f003 f99a 	bl	800b88c <RCCEx_PLL2_Config>
 8008558:	4603      	mov	r3, r0
 800855a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800855e:	e014      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008560:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008564:	3330      	adds	r3, #48	@ 0x30
 8008566:	4618      	mov	r0, r3
 8008568:	f003 fa28 	bl	800b9bc <RCCEx_PLL3_Config>
 800856c:	4603      	mov	r3, r0
 800856e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008572:	e00a      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800857a:	e006      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800857c:	bf00      	nop
 800857e:	e004      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008580:	bf00      	nop
 8008582:	e002      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008584:	bf00      	nop
 8008586:	e000      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800858a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10d      	bne.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8008592:	4b39      	ldr	r3, [pc, #228]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008598:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800859c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085a0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80085a4:	4a34      	ldr	r2, [pc, #208]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80085a6:	430b      	orrs	r3, r1
 80085a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80085ac:	e003      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80085b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80085c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085c4:	2300      	movs	r3, #0
 80085c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80085cc:	460b      	mov	r3, r1
 80085ce:	4313      	orrs	r3, r2
 80085d0:	d058      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80085d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80085de:	d031      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80085e0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80085e4:	d82a      	bhi.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80085e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085ea:	d02d      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80085ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085f0:	d824      	bhi.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80085f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085f6:	d029      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80085f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085fc:	d81e      	bhi.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80085fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008602:	d011      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8008604:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008608:	d818      	bhi.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800860a:	2b00      	cmp	r3, #0
 800860c:	d020      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800860e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008612:	d113      	bne.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008614:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008618:	3308      	adds	r3, #8
 800861a:	4618      	mov	r0, r3
 800861c:	f003 f936 	bl	800b88c <RCCEx_PLL2_Config>
 8008620:	4603      	mov	r3, r0
 8008622:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8008626:	e014      	b.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008628:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800862c:	3330      	adds	r3, #48	@ 0x30
 800862e:	4618      	mov	r0, r3
 8008630:	f003 f9c4 	bl	800b9bc <RCCEx_PLL3_Config>
 8008634:	4603      	mov	r3, r0
 8008636:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800863a:	e00a      	b.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008642:	e006      	b.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008644:	bf00      	nop
 8008646:	e004      	b.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008648:	bf00      	nop
 800864a:	e002      	b.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800864c:	bf00      	nop
 800864e:	e000      	b.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008652:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008656:	2b00      	cmp	r3, #0
 8008658:	d110      	bne.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800865a:	4b07      	ldr	r3, [pc, #28]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800865c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008660:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8008664:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800866c:	4902      	ldr	r1, [pc, #8]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800866e:	4313      	orrs	r3, r2
 8008670:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008674:	e006      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8008676:	bf00      	nop
 8008678:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800867c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008680:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008684:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	2100      	movs	r1, #0
 800868e:	6239      	str	r1, [r7, #32]
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	627b      	str	r3, [r7, #36]	@ 0x24
 8008696:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800869a:	460b      	mov	r3, r1
 800869c:	4313      	orrs	r3, r2
 800869e:	d055      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80086a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80086a8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80086ac:	d031      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80086ae:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80086b2:	d82a      	bhi.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80086b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086b8:	d02d      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80086ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086be:	d824      	bhi.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80086c0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80086c4:	d029      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80086c6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80086ca:	d81e      	bhi.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80086cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086d0:	d011      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80086d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086d6:	d818      	bhi.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d020      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80086dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086e0:	d113      	bne.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80086e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086e6:	3308      	adds	r3, #8
 80086e8:	4618      	mov	r0, r3
 80086ea:	f003 f8cf 	bl	800b88c <RCCEx_PLL2_Config>
 80086ee:	4603      	mov	r3, r0
 80086f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80086f4:	e014      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80086f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086fa:	3330      	adds	r3, #48	@ 0x30
 80086fc:	4618      	mov	r0, r3
 80086fe:	f003 f95d 	bl	800b9bc <RCCEx_PLL3_Config>
 8008702:	4603      	mov	r3, r0
 8008704:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008708:	e00a      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008710:	e006      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008712:	bf00      	nop
 8008714:	e004      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008716:	bf00      	nop
 8008718:	e002      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800871a:	bf00      	nop
 800871c:	e000      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800871e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008720:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10d      	bne.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8008728:	4b88      	ldr	r3, [pc, #544]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800872a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800872e:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8008732:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800873a:	4984      	ldr	r1, [pc, #528]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800873c:	4313      	orrs	r3, r2
 800873e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008742:	e003      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008744:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008748:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800874c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008754:	2100      	movs	r1, #0
 8008756:	61b9      	str	r1, [r7, #24]
 8008758:	f003 0302 	and.w	r3, r3, #2
 800875c:	61fb      	str	r3, [r7, #28]
 800875e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008762:	460b      	mov	r3, r1
 8008764:	4313      	orrs	r3, r2
 8008766:	d03d      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8008768:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800876c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008770:	2b03      	cmp	r3, #3
 8008772:	d81c      	bhi.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8008774:	a201      	add	r2, pc, #4	@ (adr r2, 800877c <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8008776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877a:	bf00      	nop
 800877c:	080087b7 	.word	0x080087b7
 8008780:	0800878d 	.word	0x0800878d
 8008784:	0800879b 	.word	0x0800879b
 8008788:	080087b7 	.word	0x080087b7
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800878c:	4b6f      	ldr	r3, [pc, #444]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800878e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008790:	4a6e      	ldr	r2, [pc, #440]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008796:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008798:	e00e      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800879a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800879e:	3308      	adds	r3, #8
 80087a0:	4618      	mov	r0, r3
 80087a2:	f003 f873 	bl	800b88c <RCCEx_PLL2_Config>
 80087a6:	4603      	mov	r3, r0
 80087a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80087ac:	e004      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80087b4:	e000      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80087b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10d      	bne.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80087c0:	4b62      	ldr	r3, [pc, #392]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80087c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80087c6:	f023 0203 	bic.w	r2, r3, #3
 80087ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80087d2:	495e      	ldr	r1, [pc, #376]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80087da:	e003      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80087e0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80087e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ec:	2100      	movs	r1, #0
 80087ee:	6139      	str	r1, [r7, #16]
 80087f0:	f003 0304 	and.w	r3, r3, #4
 80087f4:	617b      	str	r3, [r7, #20]
 80087f6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80087fa:	460b      	mov	r3, r1
 80087fc:	4313      	orrs	r3, r2
 80087fe:	d03a      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8008800:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008804:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800880c:	d00e      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800880e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008812:	d815      	bhi.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8008814:	2b00      	cmp	r3, #0
 8008816:	d017      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8008818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800881c:	d110      	bne.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800881e:	4b4b      	ldr	r3, [pc, #300]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008822:	4a4a      	ldr	r2, [pc, #296]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008828:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800882a:	e00e      	b.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800882c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008830:	3308      	adds	r3, #8
 8008832:	4618      	mov	r0, r3
 8008834:	f003 f82a 	bl	800b88c <RCCEx_PLL2_Config>
 8008838:	4603      	mov	r3, r0
 800883a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800883e:	e004      	b.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008846:	e000      	b.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8008848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800884a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10d      	bne.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8008852:	4b3e      	ldr	r3, [pc, #248]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008858:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800885c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008860:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008864:	4939      	ldr	r1, [pc, #228]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008866:	4313      	orrs	r3, r2
 8008868:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800886c:	e003      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800886e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008872:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008876:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	2100      	movs	r1, #0
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	f003 0310 	and.w	r3, r3, #16
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800888c:	460b      	mov	r3, r1
 800888e:	4313      	orrs	r3, r2
 8008890:	d038      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8008892:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008896:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800889a:	2b30      	cmp	r3, #48	@ 0x30
 800889c:	d01b      	beq.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800889e:	2b30      	cmp	r3, #48	@ 0x30
 80088a0:	d815      	bhi.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80088a2:	2b10      	cmp	r3, #16
 80088a4:	d002      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80088a6:	2b20      	cmp	r3, #32
 80088a8:	d007      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80088aa:	e010      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088ac:	4b27      	ldr	r3, [pc, #156]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80088ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b0:	4a26      	ldr	r2, [pc, #152]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80088b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088b6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80088b8:	e00e      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80088ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088be:	3330      	adds	r3, #48	@ 0x30
 80088c0:	4618      	mov	r0, r3
 80088c2:	f003 f87b 	bl	800b9bc <RCCEx_PLL3_Config>
 80088c6:	4603      	mov	r3, r0
 80088c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80088cc:	e004      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80088d4:	e000      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80088d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10d      	bne.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80088e0:	4b1a      	ldr	r3, [pc, #104]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80088e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80088e6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80088ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80088f2:	4916      	ldr	r1, [pc, #88]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80088f4:	4313      	orrs	r3, r2
 80088f6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80088fa:	e003      	b.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008900:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008904:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890c:	2100      	movs	r1, #0
 800890e:	6039      	str	r1, [r7, #0]
 8008910:	f003 0308 	and.w	r3, r3, #8
 8008914:	607b      	str	r3, [r7, #4]
 8008916:	e9d7 1200 	ldrd	r1, r2, [r7]
 800891a:	460b      	mov	r3, r1
 800891c:	4313      	orrs	r3, r2
 800891e:	d00c      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8008920:	4b0a      	ldr	r3, [pc, #40]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008922:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008926:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800892a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800892e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8008932:	4906      	ldr	r1, [pc, #24]	@ (800894c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008934:	4313      	orrs	r3, r2
 8008936:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800893a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800893e:	4618      	mov	r0, r3
 8008940:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8008944:	46bd      	mov	sp, r7
 8008946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800894a:	bf00      	nop
 800894c:	44020c00 	.word	0x44020c00

08008950 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8008950:	b480      	push	{r7}
 8008952:	b08b      	sub	sp, #44	@ 0x2c
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008958:	4bae      	ldr	r3, [pc, #696]	@ (8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800895a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800895c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008960:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008962:	4bac      	ldr	r3, [pc, #688]	@ (8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800896c:	4ba9      	ldr	r3, [pc, #676]	@ (8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800896e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008970:	0a1b      	lsrs	r3, r3, #8
 8008972:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008976:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008978:	4ba6      	ldr	r3, [pc, #664]	@ (8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800897a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800897c:	091b      	lsrs	r3, r3, #4
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008984:	4ba3      	ldr	r3, [pc, #652]	@ (8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008988:	08db      	lsrs	r3, r3, #3
 800898a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	fb02 f303 	mul.w	r3, r2, r3
 8008994:	ee07 3a90 	vmov	s15, r3
 8008998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 8126 	beq.w	8008bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	2b03      	cmp	r3, #3
 80089ac:	d053      	beq.n	8008a56 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d86f      	bhi.n	8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d003      	beq.n	80089c2 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d02b      	beq.n	8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80089c0:	e068      	b.n	8008a94 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089c2:	4b94      	ldr	r3, [pc, #592]	@ (8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	08db      	lsrs	r3, r3, #3
 80089c8:	f003 0303 	and.w	r3, r3, #3
 80089cc:	4a92      	ldr	r2, [pc, #584]	@ (8008c18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80089ce:	fa22 f303 	lsr.w	r3, r2, r3
 80089d2:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	ee07 3a90 	vmov	s15, r3
 80089da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	ee07 3a90 	vmov	s15, r3
 80089e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ec:	6a3b      	ldr	r3, [r7, #32]
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f6:	ed97 6a04 	vldr	s12, [r7, #16]
 80089fa:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8008c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80089fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a12:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008a16:	e068      	b.n	8008aea <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	ee07 3a90 	vmov	s15, r3
 8008a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a22:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008c20 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8008a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	ee07 3a90 	vmov	s15, r3
 8008a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a34:	ed97 6a04 	vldr	s12, [r7, #16]
 8008a38:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a50:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008a54:	e049      	b.n	8008aea <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	ee07 3a90 	vmov	s15, r3
 8008a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a60:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008c24 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8008a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	ee07 3a90 	vmov	s15, r3
 8008a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a72:	ed97 6a04 	vldr	s12, [r7, #16]
 8008a76:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8008c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a8e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008a92:	e02a      	b.n	8008aea <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a94:	4b5f      	ldr	r3, [pc, #380]	@ (8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	08db      	lsrs	r3, r3, #3
 8008a9a:	f003 0303 	and.w	r3, r3, #3
 8008a9e:	4a5e      	ldr	r2, [pc, #376]	@ (8008c18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8008aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	ee07 3a90 	vmov	s15, r3
 8008aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	ee07 3a90 	vmov	s15, r3
 8008ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	ee07 3a90 	vmov	s15, r3
 8008ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ac8:	ed97 6a04 	vldr	s12, [r7, #16]
 8008acc:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008ad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ad8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008adc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008ae8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008aea:	4b4a      	ldr	r3, [pc, #296]	@ (8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008af2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008af6:	d121      	bne.n	8008b3c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008af8:	4b46      	ldr	r3, [pc, #280]	@ (8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d017      	beq.n	8008b34 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008b04:	4b43      	ldr	r3, [pc, #268]	@ (8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b08:	0a5b      	lsrs	r3, r3, #9
 8008b0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8008b16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b1a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008b1e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b2a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	601a      	str	r2, [r3, #0]
 8008b32:	e006      	b.n	8008b42 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	601a      	str	r2, [r3, #0]
 8008b3a:	e002      	b.n	8008b42 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b42:	4b34      	ldr	r3, [pc, #208]	@ (8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b4e:	d121      	bne.n	8008b94 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008b50:	4b30      	ldr	r3, [pc, #192]	@ (8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d017      	beq.n	8008b8c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b60:	0c1b      	lsrs	r3, r3, #16
 8008b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b66:	ee07 3a90 	vmov	s15, r3
 8008b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008b6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b72:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008b76:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b82:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	605a      	str	r2, [r3, #4]
 8008b8a:	e006      	b.n	8008b9a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	605a      	str	r2, [r3, #4]
 8008b92:	e002      	b.n	8008b9a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ba2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ba6:	d121      	bne.n	8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d017      	beq.n	8008be4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008bb4:	4b17      	ldr	r3, [pc, #92]	@ (8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bb8:	0e1b      	lsrs	r3, r3, #24
 8008bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8008bc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bca:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008bce:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bda:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008be2:	e010      	b.n	8008c06 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	609a      	str	r2, [r3, #8]
}
 8008bea:	e00c      	b.n	8008c06 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	609a      	str	r2, [r3, #8]
}
 8008bf2:	e008      	b.n	8008c06 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	609a      	str	r2, [r3, #8]
}
 8008c06:	bf00      	nop
 8008c08:	372c      	adds	r7, #44	@ 0x2c
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	44020c00 	.word	0x44020c00
 8008c18:	03d09000 	.word	0x03d09000
 8008c1c:	46000000 	.word	0x46000000
 8008c20:	4a742400 	.word	0x4a742400
 8008c24:	4af42400 	.word	0x4af42400

08008c28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b08b      	sub	sp, #44	@ 0x2c
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008c30:	4bae      	ldr	r3, [pc, #696]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c38:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008c3a:	4bac      	ldr	r3, [pc, #688]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c3e:	f003 0303 	and.w	r3, r3, #3
 8008c42:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8008c44:	4ba9      	ldr	r3, [pc, #676]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c48:	0a1b      	lsrs	r3, r3, #8
 8008c4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c4e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008c50:	4ba6      	ldr	r3, [pc, #664]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c54:	091b      	lsrs	r3, r3, #4
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008c5c:	4ba3      	ldr	r3, [pc, #652]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c60:	08db      	lsrs	r3, r3, #3
 8008c62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	fb02 f303 	mul.w	r3, r2, r3
 8008c6c:	ee07 3a90 	vmov	s15, r3
 8008c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c74:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 8126 	beq.w	8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	d053      	beq.n	8008d2e <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	2b03      	cmp	r3, #3
 8008c8a:	d86f      	bhi.n	8008d6c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d003      	beq.n	8008c9a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d02b      	beq.n	8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008c98:	e068      	b.n	8008d6c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c9a:	4b94      	ldr	r3, [pc, #592]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	08db      	lsrs	r3, r3, #3
 8008ca0:	f003 0303 	and.w	r3, r3, #3
 8008ca4:	4a92      	ldr	r2, [pc, #584]	@ (8008ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8008caa:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	ee07 3a90 	vmov	s15, r3
 8008cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	ee07 3a90 	vmov	s15, r3
 8008cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cce:	ed97 6a04 	vldr	s12, [r7, #16]
 8008cd2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8008ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008cee:	e068      	b.n	8008dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfa:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8008cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	ee07 3a90 	vmov	s15, r3
 8008d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d0c:	ed97 6a04 	vldr	s12, [r7, #16]
 8008d10:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008d14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d28:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008d2c:	e049      	b.n	8008dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	ee07 3a90 	vmov	s15, r3
 8008d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d38:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008efc <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8008d3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d40:	6a3b      	ldr	r3, [r7, #32]
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d4a:	ed97 6a04 	vldr	s12, [r7, #16]
 8008d4e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8008ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d66:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008d6a:	e02a      	b.n	8008dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d6c:	4b5f      	ldr	r3, [pc, #380]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	08db      	lsrs	r3, r3, #3
 8008d72:	f003 0303 	and.w	r3, r3, #3
 8008d76:	4a5e      	ldr	r2, [pc, #376]	@ (8008ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008d78:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	ee07 3a90 	vmov	s15, r3
 8008d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	ee07 3a90 	vmov	s15, r3
 8008d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d96:	6a3b      	ldr	r3, [r7, #32]
 8008d98:	ee07 3a90 	vmov	s15, r3
 8008d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da0:	ed97 6a04 	vldr	s12, [r7, #16]
 8008da4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008da8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008db4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dbc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008dc0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dce:	d121      	bne.n	8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008dd0:	4b46      	ldr	r3, [pc, #280]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d017      	beq.n	8008e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008ddc:	4b43      	ldr	r3, [pc, #268]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008de0:	0a5b      	lsrs	r3, r3, #9
 8008de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008de6:	ee07 3a90 	vmov	s15, r3
 8008dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8008dee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008df2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008df6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e02:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	601a      	str	r2, [r3, #0]
 8008e0a:	e006      	b.n	8008e1a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	e002      	b.n	8008e1a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e1a:	4b34      	ldr	r3, [pc, #208]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e26:	d121      	bne.n	8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008e28:	4b30      	ldr	r3, [pc, #192]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d017      	beq.n	8008e64 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008e34:	4b2d      	ldr	r3, [pc, #180]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e38:	0c1b      	lsrs	r3, r3, #16
 8008e3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e3e:	ee07 3a90 	vmov	s15, r3
 8008e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008e46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e4a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008e4e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e5a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	605a      	str	r2, [r3, #4]
 8008e62:	e006      	b.n	8008e72 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	605a      	str	r2, [r3, #4]
 8008e6a:	e002      	b.n	8008e72 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e72:	4b1e      	ldr	r3, [pc, #120]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e7e:	d121      	bne.n	8008ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008e80:	4b1a      	ldr	r3, [pc, #104]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d017      	beq.n	8008ebc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008e8c:	4b17      	ldr	r3, [pc, #92]	@ (8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e90:	0e1b      	lsrs	r3, r3, #24
 8008e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e96:	ee07 3a90 	vmov	s15, r3
 8008e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8008e9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ea2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008ea6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eb2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008eba:	e010      	b.n	8008ede <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	609a      	str	r2, [r3, #8]
}
 8008ec2:	e00c      	b.n	8008ede <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	609a      	str	r2, [r3, #8]
}
 8008eca:	e008      	b.n	8008ede <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	609a      	str	r2, [r3, #8]
}
 8008ede:	bf00      	nop
 8008ee0:	372c      	adds	r7, #44	@ 0x2c
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	44020c00 	.word	0x44020c00
 8008ef0:	03d09000 	.word	0x03d09000
 8008ef4:	46000000 	.word	0x46000000
 8008ef8:	4a742400 	.word	0x4a742400
 8008efc:	4af42400 	.word	0x4af42400

08008f00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b08b      	sub	sp, #44	@ 0x2c
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008f08:	4bae      	ldr	r3, [pc, #696]	@ (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f10:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008f12:	4bac      	ldr	r3, [pc, #688]	@ (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8008f1c:	4ba9      	ldr	r3, [pc, #676]	@ (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f20:	0a1b      	lsrs	r3, r3, #8
 8008f22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f26:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008f28:	4ba6      	ldr	r3, [pc, #664]	@ (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f2c:	091b      	lsrs	r3, r3, #4
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008f34:	4ba3      	ldr	r3, [pc, #652]	@ (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f38:	08db      	lsrs	r3, r3, #3
 8008f3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	fb02 f303 	mul.w	r3, r2, r3
 8008f44:	ee07 3a90 	vmov	s15, r3
 8008f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f4c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 8126 	beq.w	80091a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	d053      	beq.n	8009006 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	2b03      	cmp	r3, #3
 8008f62:	d86f      	bhi.n	8009044 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d003      	beq.n	8008f72 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d02b      	beq.n	8008fc8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008f70:	e068      	b.n	8009044 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f72:	4b94      	ldr	r3, [pc, #592]	@ (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	08db      	lsrs	r3, r3, #3
 8008f78:	f003 0303 	and.w	r3, r3, #3
 8008f7c:	4a92      	ldr	r2, [pc, #584]	@ (80091c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f82:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	ee07 3a90 	vmov	s15, r3
 8008f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	ee07 3a90 	vmov	s15, r3
 8008f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	ee07 3a90 	vmov	s15, r3
 8008fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fa6:	ed97 6a04 	vldr	s12, [r7, #16]
 8008faa:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fc2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008fc6:	e068      	b.n	800909a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	ee07 3a90 	vmov	s15, r3
 8008fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80091d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8008fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	ee07 3a90 	vmov	s15, r3
 8008fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fe4:	ed97 6a04 	vldr	s12, [r7, #16]
 8008fe8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008fec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ff4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009000:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009004:	e049      	b.n	800909a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	ee07 3a90 	vmov	s15, r3
 800900c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009010:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80091d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8009014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009018:	6a3b      	ldr	r3, [r7, #32]
 800901a:	ee07 3a90 	vmov	s15, r3
 800901e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009022:	ed97 6a04 	vldr	s12, [r7, #16]
 8009026:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800902a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800902e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800903a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800903e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009042:	e02a      	b.n	800909a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009044:	4b5f      	ldr	r3, [pc, #380]	@ (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	08db      	lsrs	r3, r3, #3
 800904a:	f003 0303 	and.w	r3, r3, #3
 800904e:	4a5e      	ldr	r2, [pc, #376]	@ (80091c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8009050:	fa22 f303 	lsr.w	r3, r2, r3
 8009054:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	ee07 3a90 	vmov	s15, r3
 800905c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	ee07 3a90 	vmov	s15, r3
 8009066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800906e:	6a3b      	ldr	r3, [r7, #32]
 8009070:	ee07 3a90 	vmov	s15, r3
 8009074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009078:	ed97 6a04 	vldr	s12, [r7, #16]
 800907c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8009080:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009088:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800908c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009094:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009098:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800909a:	4b4a      	ldr	r3, [pc, #296]	@ (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090a6:	d121      	bne.n	80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80090a8:	4b46      	ldr	r3, [pc, #280]	@ (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80090aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d017      	beq.n	80090e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80090b4:	4b43      	ldr	r3, [pc, #268]	@ (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80090b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090b8:	0a5b      	lsrs	r3, r3, #9
 80090ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090be:	ee07 3a90 	vmov	s15, r3
 80090c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80090c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090ca:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80090ce:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80090d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090da:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	e006      	b.n	80090f2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	e002      	b.n	80090f2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090f2:	4b34      	ldr	r3, [pc, #208]	@ (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090fe:	d121      	bne.n	8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009100:	4b30      	ldr	r3, [pc, #192]	@ (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d017      	beq.n	800913c <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800910c:	4b2d      	ldr	r3, [pc, #180]	@ (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800910e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009110:	0c1b      	lsrs	r3, r3, #16
 8009112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009116:	ee07 3a90 	vmov	s15, r3
 800911a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800911e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009122:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009126:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800912a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800912e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009132:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	605a      	str	r2, [r3, #4]
 800913a:	e006      	b.n	800914a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	605a      	str	r2, [r3, #4]
 8009142:	e002      	b.n	800914a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800914a:	4b1e      	ldr	r3, [pc, #120]	@ (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009152:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009156:	d121      	bne.n	800919c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8009158:	4b1a      	ldr	r3, [pc, #104]	@ (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800915a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800915c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009160:	2b00      	cmp	r3, #0
 8009162:	d017      	beq.n	8009194 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009164:	4b17      	ldr	r3, [pc, #92]	@ (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009168:	0e1b      	lsrs	r3, r3, #24
 800916a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800916e:	ee07 3a90 	vmov	s15, r3
 8009172:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8009176:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800917a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800917e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800918a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8009192:	e010      	b.n	80091b6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	609a      	str	r2, [r3, #8]
}
 800919a:	e00c      	b.n	80091b6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	609a      	str	r2, [r3, #8]
}
 80091a2:	e008      	b.n	80091b6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	609a      	str	r2, [r3, #8]
}
 80091b6:	bf00      	nop
 80091b8:	372c      	adds	r7, #44	@ 0x2c
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	44020c00 	.word	0x44020c00
 80091c8:	03d09000 	.word	0x03d09000
 80091cc:	46000000 	.word	0x46000000
 80091d0:	4a742400 	.word	0x4a742400
 80091d4:	4af42400 	.word	0x4af42400

080091d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80091d8:	b590      	push	{r4, r7, lr}
 80091da:	b08f      	sub	sp, #60	@ 0x3c
 80091dc:	af00      	add	r7, sp, #0
 80091de:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80091e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091e6:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80091ea:	4321      	orrs	r1, r4
 80091ec:	d150      	bne.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80091ee:	4b26      	ldr	r3, [pc, #152]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80091f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091f8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80091fa:	4b23      	ldr	r3, [pc, #140]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80091fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009200:	f003 0302 	and.w	r3, r3, #2
 8009204:	2b02      	cmp	r3, #2
 8009206:	d108      	bne.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800920e:	d104      	bne.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009210:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009214:	637b      	str	r3, [r7, #52]	@ 0x34
 8009216:	f002 bb2a 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800921a:	4b1b      	ldr	r3, [pc, #108]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800921c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009228:	d108      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800922a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009230:	d104      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8009232:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009236:	637b      	str	r3, [r7, #52]	@ 0x34
 8009238:	f002 bb19 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800923c:	4b12      	ldr	r3, [pc, #72]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009244:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009248:	d119      	bne.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800924a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009250:	d115      	bne.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009252:	4b0d      	ldr	r3, [pc, #52]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009254:	69db      	ldr	r3, [r3, #28]
 8009256:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800925a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800925e:	d30a      	bcc.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8009260:	4b09      	ldr	r3, [pc, #36]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009262:	69db      	ldr	r3, [r3, #28]
 8009264:	0a1b      	lsrs	r3, r3, #8
 8009266:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800926a:	4a08      	ldr	r2, [pc, #32]	@ (800928c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800926c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009270:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009272:	f002 bafc 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800927a:	f002 baf8 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	637b      	str	r3, [r7, #52]	@ 0x34
 8009282:	f002 baf4 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009286:	bf00      	nop
 8009288:	44020c00 	.word	0x44020c00
 800928c:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8009290:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009294:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8009298:	ea50 0104 	orrs.w	r1, r0, r4
 800929c:	f001 8275 	beq.w	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80092a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092a4:	2801      	cmp	r0, #1
 80092a6:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80092aa:	f082 82dd 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80092ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092b2:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80092b6:	ea50 0104 	orrs.w	r1, r0, r4
 80092ba:	f001 816c 	beq.w	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80092be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092c2:	2801      	cmp	r0, #1
 80092c4:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80092c8:	f082 82ce 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80092cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092d0:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80092d4:	ea50 0104 	orrs.w	r1, r0, r4
 80092d8:	f001 8602 	beq.w	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80092dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092e0:	2801      	cmp	r0, #1
 80092e2:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80092e6:	f082 82bf 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80092ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092ee:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80092f2:	ea50 0104 	orrs.w	r1, r0, r4
 80092f6:	f001 854c 	beq.w	800ad92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80092fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092fe:	2801      	cmp	r0, #1
 8009300:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8009304:	f082 82b0 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009308:	e9d7 0100 	ldrd	r0, r1, [r7]
 800930c:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8009310:	ea50 0104 	orrs.w	r1, r0, r4
 8009314:	f001 849e 	beq.w	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8009318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800931c:	2801      	cmp	r0, #1
 800931e:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8009322:	f082 82a1 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009326:	e9d7 0100 	ldrd	r0, r1, [r7]
 800932a:	f1a1 0420 	sub.w	r4, r1, #32
 800932e:	ea50 0104 	orrs.w	r1, r0, r4
 8009332:	f001 83e8 	beq.w	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8009336:	e9d7 0100 	ldrd	r0, r1, [r7]
 800933a:	2801      	cmp	r0, #1
 800933c:	f171 0120 	sbcs.w	r1, r1, #32
 8009340:	f082 8292 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009344:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009348:	f1a1 0410 	sub.w	r4, r1, #16
 800934c:	ea50 0104 	orrs.w	r1, r0, r4
 8009350:	f002 8256 	beq.w	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8009354:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009358:	2801      	cmp	r0, #1
 800935a:	f171 0110 	sbcs.w	r1, r1, #16
 800935e:	f082 8283 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009362:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009366:	f1a1 0408 	sub.w	r4, r1, #8
 800936a:	ea50 0104 	orrs.w	r1, r0, r4
 800936e:	f002 81cc 	beq.w	800b70a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8009372:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009376:	2801      	cmp	r0, #1
 8009378:	f171 0108 	sbcs.w	r1, r1, #8
 800937c:	f082 8274 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009380:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009384:	1f0c      	subs	r4, r1, #4
 8009386:	ea50 0104 	orrs.w	r1, r0, r4
 800938a:	f001 8648 	beq.w	800b01e <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800938e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009392:	2801      	cmp	r0, #1
 8009394:	f171 0104 	sbcs.w	r1, r1, #4
 8009398:	f082 8266 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800939c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093a0:	1e8c      	subs	r4, r1, #2
 80093a2:	ea50 0104 	orrs.w	r1, r0, r4
 80093a6:	f002 8143 	beq.w	800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80093aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093ae:	2801      	cmp	r0, #1
 80093b0:	f171 0102 	sbcs.w	r1, r1, #2
 80093b4:	f082 8258 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80093b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093bc:	1e4c      	subs	r4, r1, #1
 80093be:	ea50 0104 	orrs.w	r1, r0, r4
 80093c2:	f002 80ce 	beq.w	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80093c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093ca:	2801      	cmp	r0, #1
 80093cc:	f171 0101 	sbcs.w	r1, r1, #1
 80093d0:	f082 824a 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80093d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093d8:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80093dc:	4321      	orrs	r1, r4
 80093de:	f002 8059 	beq.w	800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80093e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093e6:	4cd9      	ldr	r4, [pc, #868]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80093e8:	42a0      	cmp	r0, r4
 80093ea:	f171 0100 	sbcs.w	r1, r1, #0
 80093ee:	f082 823b 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80093f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093f6:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80093fa:	4321      	orrs	r1, r4
 80093fc:	f001 87d9 	beq.w	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8009400:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009404:	4cd2      	ldr	r4, [pc, #840]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8009406:	42a0      	cmp	r0, r4
 8009408:	f171 0100 	sbcs.w	r1, r1, #0
 800940c:	f082 822c 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009410:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009414:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8009418:	4321      	orrs	r1, r4
 800941a:	f001 8751 	beq.w	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800941e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009422:	4ccc      	ldr	r4, [pc, #816]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009424:	42a0      	cmp	r0, r4
 8009426:	f171 0100 	sbcs.w	r1, r1, #0
 800942a:	f082 821d 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800942e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009432:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8009436:	4321      	orrs	r1, r4
 8009438:	f001 869a 	beq.w	800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800943c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009440:	4cc5      	ldr	r4, [pc, #788]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8009442:	42a0      	cmp	r0, r4
 8009444:	f171 0100 	sbcs.w	r1, r1, #0
 8009448:	f082 820e 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800944c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009450:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8009454:	4321      	orrs	r1, r4
 8009456:	f001 8612 	beq.w	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800945a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800945e:	4cbf      	ldr	r4, [pc, #764]	@ (800975c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009460:	42a0      	cmp	r0, r4
 8009462:	f171 0100 	sbcs.w	r1, r1, #0
 8009466:	f082 81ff 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800946a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800946e:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8009472:	4321      	orrs	r1, r4
 8009474:	f002 817e 	beq.w	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8009478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800947c:	4cb8      	ldr	r4, [pc, #736]	@ (8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800947e:	42a0      	cmp	r0, r4
 8009480:	f171 0100 	sbcs.w	r1, r1, #0
 8009484:	f082 81f0 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800948c:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8009490:	4321      	orrs	r1, r4
 8009492:	f000 829e 	beq.w	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8009496:	e9d7 0100 	ldrd	r0, r1, [r7]
 800949a:	4cb2      	ldr	r4, [pc, #712]	@ (8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800949c:	42a0      	cmp	r0, r4
 800949e:	f171 0100 	sbcs.w	r1, r1, #0
 80094a2:	f082 81e1 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80094a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094aa:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80094ae:	4321      	orrs	r1, r4
 80094b0:	f000 826d 	beq.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80094b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094b8:	4cab      	ldr	r4, [pc, #684]	@ (8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80094ba:	42a0      	cmp	r0, r4
 80094bc:	f171 0100 	sbcs.w	r1, r1, #0
 80094c0:	f082 81d2 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80094c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094c8:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80094cc:	4321      	orrs	r1, r4
 80094ce:	f001 800d 	beq.w	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80094d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094d6:	4ca5      	ldr	r4, [pc, #660]	@ (800976c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80094d8:	42a0      	cmp	r0, r4
 80094da:	f171 0100 	sbcs.w	r1, r1, #0
 80094de:	f082 81c3 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80094e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094e6:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80094ea:	4321      	orrs	r1, r4
 80094ec:	f000 81d0 	beq.w	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80094f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094f4:	4c9e      	ldr	r4, [pc, #632]	@ (8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80094f6:	42a0      	cmp	r0, r4
 80094f8:	f171 0100 	sbcs.w	r1, r1, #0
 80094fc:	f082 81b4 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009504:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8009508:	4321      	orrs	r1, r4
 800950a:	f000 8142 	beq.w	8009792 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800950e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009512:	4c98      	ldr	r4, [pc, #608]	@ (8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009514:	42a0      	cmp	r0, r4
 8009516:	f171 0100 	sbcs.w	r1, r1, #0
 800951a:	f082 81a5 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800951e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009522:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8009526:	4321      	orrs	r1, r4
 8009528:	f001 824e 	beq.w	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800952c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009530:	4c91      	ldr	r4, [pc, #580]	@ (8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8009532:	42a0      	cmp	r0, r4
 8009534:	f171 0100 	sbcs.w	r1, r1, #0
 8009538:	f082 8196 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800953c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009540:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8009544:	4321      	orrs	r1, r4
 8009546:	f001 8197 	beq.w	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800954a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800954e:	4c8b      	ldr	r4, [pc, #556]	@ (800977c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009550:	42a0      	cmp	r0, r4
 8009552:	f171 0100 	sbcs.w	r1, r1, #0
 8009556:	f082 8187 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800955a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800955e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8009562:	4321      	orrs	r1, r4
 8009564:	f001 8154 	beq.w	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8009568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800956c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8009570:	f171 0100 	sbcs.w	r1, r1, #0
 8009574:	f082 8178 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800957c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8009580:	4321      	orrs	r1, r4
 8009582:	f001 80b7 	beq.w	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009586:	e9d7 0100 	ldrd	r0, r1, [r7]
 800958a:	f248 0401 	movw	r4, #32769	@ 0x8001
 800958e:	42a0      	cmp	r0, r4
 8009590:	f171 0100 	sbcs.w	r1, r1, #0
 8009594:	f082 8168 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009598:	e9d7 0100 	ldrd	r0, r1, [r7]
 800959c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 80095a0:	4321      	orrs	r1, r4
 80095a2:	f001 8064 	beq.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80095a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095aa:	f244 0401 	movw	r4, #16385	@ 0x4001
 80095ae:	42a0      	cmp	r0, r4
 80095b0:	f171 0100 	sbcs.w	r1, r1, #0
 80095b4:	f082 8158 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095bc:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80095c0:	4321      	orrs	r1, r4
 80095c2:	f001 8011 	beq.w	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80095c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095ca:	f242 0401 	movw	r4, #8193	@ 0x2001
 80095ce:	42a0      	cmp	r0, r4
 80095d0:	f171 0100 	sbcs.w	r1, r1, #0
 80095d4:	f082 8148 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095dc:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80095e0:	4321      	orrs	r1, r4
 80095e2:	f000 871e 	beq.w	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80095e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095ea:	f241 0401 	movw	r4, #4097	@ 0x1001
 80095ee:	42a0      	cmp	r0, r4
 80095f0:	f171 0100 	sbcs.w	r1, r1, #0
 80095f4:	f082 8138 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095fc:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8009600:	4321      	orrs	r1, r4
 8009602:	f000 86a8 	beq.w	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8009606:	e9d7 0100 	ldrd	r0, r1, [r7]
 800960a:	f640 0401 	movw	r4, #2049	@ 0x801
 800960e:	42a0      	cmp	r0, r4
 8009610:	f171 0100 	sbcs.w	r1, r1, #0
 8009614:	f082 8128 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800961c:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8009620:	4321      	orrs	r1, r4
 8009622:	f000 8632 	beq.w	800a28a <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8009626:	e9d7 0100 	ldrd	r0, r1, [r7]
 800962a:	f240 4401 	movw	r4, #1025	@ 0x401
 800962e:	42a0      	cmp	r0, r4
 8009630:	f171 0100 	sbcs.w	r1, r1, #0
 8009634:	f082 8118 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800963c:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8009640:	4321      	orrs	r1, r4
 8009642:	f000 85b0 	beq.w	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8009646:	e9d7 0100 	ldrd	r0, r1, [r7]
 800964a:	f240 2401 	movw	r4, #513	@ 0x201
 800964e:	42a0      	cmp	r0, r4
 8009650:	f171 0100 	sbcs.w	r1, r1, #0
 8009654:	f082 8108 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009658:	e9d7 0100 	ldrd	r0, r1, [r7]
 800965c:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8009660:	4321      	orrs	r1, r4
 8009662:	f000 8535 	beq.w	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8009666:	e9d7 0100 	ldrd	r0, r1, [r7]
 800966a:	f240 1401 	movw	r4, #257	@ 0x101
 800966e:	42a0      	cmp	r0, r4
 8009670:	f171 0100 	sbcs.w	r1, r1, #0
 8009674:	f082 80f8 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009678:	e9d7 0100 	ldrd	r0, r1, [r7]
 800967c:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8009680:	4321      	orrs	r1, r4
 8009682:	f000 84ba 	beq.w	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8009686:	e9d7 0100 	ldrd	r0, r1, [r7]
 800968a:	2881      	cmp	r0, #129	@ 0x81
 800968c:	f171 0100 	sbcs.w	r1, r1, #0
 8009690:	f082 80ea 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009694:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009698:	2821      	cmp	r0, #33	@ 0x21
 800969a:	f171 0100 	sbcs.w	r1, r1, #0
 800969e:	d26f      	bcs.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80096a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096a4:	4301      	orrs	r1, r0
 80096a6:	f002 80df 	beq.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80096aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096ae:	1e42      	subs	r2, r0, #1
 80096b0:	f141 33ff 	adc.w	r3, r1, #4294967295
 80096b4:	2a20      	cmp	r2, #32
 80096b6:	f173 0100 	sbcs.w	r1, r3, #0
 80096ba:	f082 80d5 	bcs.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80096be:	2a1f      	cmp	r2, #31
 80096c0:	f202 80d2 	bhi.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80096c4:	a101      	add	r1, pc, #4	@ (adr r1, 80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80096c6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80096ca:	bf00      	nop
 80096cc:	08009a2d 	.word	0x08009a2d
 80096d0:	08009af9 	.word	0x08009af9
 80096d4:	0800b869 	.word	0x0800b869
 80096d8:	08009bb9 	.word	0x08009bb9
 80096dc:	0800b869 	.word	0x0800b869
 80096e0:	0800b869 	.word	0x0800b869
 80096e4:	0800b869 	.word	0x0800b869
 80096e8:	08009c89 	.word	0x08009c89
 80096ec:	0800b869 	.word	0x0800b869
 80096f0:	0800b869 	.word	0x0800b869
 80096f4:	0800b869 	.word	0x0800b869
 80096f8:	0800b869 	.word	0x0800b869
 80096fc:	0800b869 	.word	0x0800b869
 8009700:	0800b869 	.word	0x0800b869
 8009704:	0800b869 	.word	0x0800b869
 8009708:	08009d6b 	.word	0x08009d6b
 800970c:	0800b869 	.word	0x0800b869
 8009710:	0800b869 	.word	0x0800b869
 8009714:	0800b869 	.word	0x0800b869
 8009718:	0800b869 	.word	0x0800b869
 800971c:	0800b869 	.word	0x0800b869
 8009720:	0800b869 	.word	0x0800b869
 8009724:	0800b869 	.word	0x0800b869
 8009728:	0800b869 	.word	0x0800b869
 800972c:	0800b869 	.word	0x0800b869
 8009730:	0800b869 	.word	0x0800b869
 8009734:	0800b869 	.word	0x0800b869
 8009738:	0800b869 	.word	0x0800b869
 800973c:	0800b869 	.word	0x0800b869
 8009740:	0800b869 	.word	0x0800b869
 8009744:	0800b869 	.word	0x0800b869
 8009748:	08009e41 	.word	0x08009e41
 800974c:	80000001 	.word	0x80000001
 8009750:	40000001 	.word	0x40000001
 8009754:	20000001 	.word	0x20000001
 8009758:	10000001 	.word	0x10000001
 800975c:	08000001 	.word	0x08000001
 8009760:	04000001 	.word	0x04000001
 8009764:	00800001 	.word	0x00800001
 8009768:	00400001 	.word	0x00400001
 800976c:	00200001 	.word	0x00200001
 8009770:	00100001 	.word	0x00100001
 8009774:	00080001 	.word	0x00080001
 8009778:	00040001 	.word	0x00040001
 800977c:	00020001 	.word	0x00020001
 8009780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009784:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009788:	430b      	orrs	r3, r1
 800978a:	f000 83c4 	beq.w	8009f16 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800978e:	f002 b86b 	b.w	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009792:	4ba1      	ldr	r3, [pc, #644]	@ (8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009798:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800979c:	633b      	str	r3, [r7, #48]	@ 0x30
 800979e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097a4:	d036      	beq.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80097a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097ac:	d86b      	bhi.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80097ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097b4:	d02b      	beq.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80097b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097bc:	d863      	bhi.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80097be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097c4:	d01b      	beq.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80097c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097cc:	d85b      	bhi.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80097ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d004      	beq.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80097d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097da:	d008      	beq.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80097dc:	e053      	b.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097de:	f107 0320 	add.w	r3, r7, #32
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff f8b4 	bl	8008950 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80097e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097ec:	e04e      	b.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097ee:	f107 0314 	add.w	r3, r7, #20
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7ff fa18 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097fc:	e046      	b.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097fe:	f107 0308 	add.w	r3, r7, #8
 8009802:	4618      	mov	r0, r3
 8009804:	f7ff fb7c 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800980c:	e03e      	b.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800980e:	4b83      	ldr	r3, [pc, #524]	@ (8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009810:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009812:	e03b      	b.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009814:	4b80      	ldr	r3, [pc, #512]	@ (8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009816:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800981a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800981e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009820:	4b7d      	ldr	r3, [pc, #500]	@ (8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 0302 	and.w	r3, r3, #2
 8009828:	2b02      	cmp	r3, #2
 800982a:	d10c      	bne.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800982c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800982e:	2b00      	cmp	r3, #0
 8009830:	d109      	bne.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009832:	4b79      	ldr	r3, [pc, #484]	@ (8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	08db      	lsrs	r3, r3, #3
 8009838:	f003 0303 	and.w	r3, r3, #3
 800983c:	4a78      	ldr	r2, [pc, #480]	@ (8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800983e:	fa22 f303 	lsr.w	r3, r2, r3
 8009842:	637b      	str	r3, [r7, #52]	@ 0x34
 8009844:	e01e      	b.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009846:	4b74      	ldr	r3, [pc, #464]	@ (8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800984e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009852:	d106      	bne.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800985a:	d102      	bne.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800985c:	4b71      	ldr	r3, [pc, #452]	@ (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800985e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009860:	e010      	b.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009862:	4b6d      	ldr	r3, [pc, #436]	@ (8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800986a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800986e:	d106      	bne.n	800987e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8009870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009872:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009876:	d102      	bne.n	800987e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009878:	4b6b      	ldr	r3, [pc, #428]	@ (8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800987a:	637b      	str	r3, [r7, #52]	@ 0x34
 800987c:	e002      	b.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800987e:	2300      	movs	r3, #0
 8009880:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009882:	e003      	b.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8009884:	e002      	b.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8009886:	2300      	movs	r3, #0
 8009888:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800988a:	bf00      	nop
          }
        }
        break;
 800988c:	f001 bfef 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009890:	4b61      	ldr	r3, [pc, #388]	@ (8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009896:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800989a:	633b      	str	r3, [r7, #48]	@ 0x30
 800989c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098a2:	d036      	beq.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80098a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098aa:	d86b      	bhi.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80098ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ae:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80098b2:	d02b      	beq.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80098b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80098ba:	d863      	bhi.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80098bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098c2:	d01b      	beq.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80098c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098ca:	d85b      	bhi.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80098cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d004      	beq.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80098d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80098d8:	d008      	beq.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80098da:	e053      	b.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098dc:	f107 0320 	add.w	r3, r7, #32
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7ff f835 	bl	8008950 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80098e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098ea:	e04e      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ec:	f107 0314 	add.w	r3, r7, #20
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7ff f999 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098fa:	e046      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098fc:	f107 0308 	add.w	r3, r7, #8
 8009900:	4618      	mov	r0, r3
 8009902:	f7ff fafd 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800990a:	e03e      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800990c:	4b43      	ldr	r3, [pc, #268]	@ (8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800990e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009910:	e03b      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009912:	4b41      	ldr	r3, [pc, #260]	@ (8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009918:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800991c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800991e:	4b3e      	ldr	r3, [pc, #248]	@ (8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 0302 	and.w	r3, r3, #2
 8009926:	2b02      	cmp	r3, #2
 8009928:	d10c      	bne.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800992a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800992c:	2b00      	cmp	r3, #0
 800992e:	d109      	bne.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009930:	4b39      	ldr	r3, [pc, #228]	@ (8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	08db      	lsrs	r3, r3, #3
 8009936:	f003 0303 	and.w	r3, r3, #3
 800993a:	4a39      	ldr	r2, [pc, #228]	@ (8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800993c:	fa22 f303 	lsr.w	r3, r2, r3
 8009940:	637b      	str	r3, [r7, #52]	@ 0x34
 8009942:	e01e      	b.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009944:	4b34      	ldr	r3, [pc, #208]	@ (8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800994c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009950:	d106      	bne.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009958:	d102      	bne.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800995a:	4b32      	ldr	r3, [pc, #200]	@ (8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800995c:	637b      	str	r3, [r7, #52]	@ 0x34
 800995e:	e010      	b.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009960:	4b2d      	ldr	r3, [pc, #180]	@ (8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009968:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800996c:	d106      	bne.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800996e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009970:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009974:	d102      	bne.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009976:	4b2c      	ldr	r3, [pc, #176]	@ (8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009978:	637b      	str	r3, [r7, #52]	@ 0x34
 800997a:	e002      	b.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800997c:	2300      	movs	r3, #0
 800997e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009980:	e003      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8009982:	e002      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8009984:	2300      	movs	r3, #0
 8009986:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009988:	bf00      	nop
          }
        }
        break;
 800998a:	f001 bf70 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800998e:	4b22      	ldr	r3, [pc, #136]	@ (8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009990:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009998:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800999a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999c:	2b00      	cmp	r3, #0
 800999e:	d108      	bne.n	80099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099a0:	f107 0320 	add.w	r3, r7, #32
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fe ffd3 	bl	8008950 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80099ae:	f001 bf5e 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80099b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b4:	2b40      	cmp	r3, #64	@ 0x40
 80099b6:	d108      	bne.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099b8:	f107 0314 	add.w	r3, r7, #20
 80099bc:	4618      	mov	r0, r3
 80099be:	f7ff f933 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099c6:	f001 bf52 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80099ca:	2300      	movs	r3, #0
 80099cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099ce:	f001 bf4e 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 80099d2:	4b11      	ldr	r3, [pc, #68]	@ (8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80099d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80099d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099dc:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 80099de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d108      	bne.n	80099f6 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099e4:	f107 0320 	add.w	r3, r7, #32
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7fe ffb1 	bl	8008950 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80099f2:	f001 bf3c 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80099f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f8:	2b80      	cmp	r3, #128	@ 0x80
 80099fa:	d108      	bne.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099fc:	f107 0314 	add.w	r3, r7, #20
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7ff f911 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a0a:	f001 bf30 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a12:	f001 bf2c 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a16:	bf00      	nop
 8009a18:	44020c00 	.word	0x44020c00
 8009a1c:	00bb8000 	.word	0x00bb8000
 8009a20:	03d09000 	.word	0x03d09000
 8009a24:	003d0900 	.word	0x003d0900
 8009a28:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009a2c:	4b9d      	ldr	r3, [pc, #628]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009a2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009a32:	f003 0307 	and.w	r3, r3, #7
 8009a36:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d104      	bne.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009a3e:	f7fc ffd1 	bl	80069e4 <HAL_RCC_GetPCLK2Freq>
 8009a42:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009a44:	f001 bf13 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8009a48:	4b96      	ldr	r3, [pc, #600]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a54:	d10a      	bne.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8009a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d107      	bne.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a5c:	f107 0314 	add.w	r3, r7, #20
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff f8e1 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a6a:	e043      	b.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8009a6c:	4b8d      	ldr	r3, [pc, #564]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a78:	d10a      	bne.n	8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d107      	bne.n	8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a80:	f107 0308 	add.w	r3, r7, #8
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7ff fa3b 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a8e:	e031      	b.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009a90:	4b84      	ldr	r3, [pc, #528]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 0302 	and.w	r3, r3, #2
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d10c      	bne.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	d109      	bne.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009aa2:	4b80      	ldr	r3, [pc, #512]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	08db      	lsrs	r3, r3, #3
 8009aa8:	f003 0303 	and.w	r3, r3, #3
 8009aac:	4a7e      	ldr	r2, [pc, #504]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009aae:	fa22 f303 	lsr.w	r3, r2, r3
 8009ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ab4:	e01e      	b.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8009ab6:	4b7b      	ldr	r3, [pc, #492]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ac2:	d105      	bne.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac6:	2b04      	cmp	r3, #4
 8009ac8:	d102      	bne.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8009aca:	4b78      	ldr	r3, [pc, #480]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ace:	e011      	b.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009ad0:	4b74      	ldr	r3, [pc, #464]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009ad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ad6:	f003 0302 	and.w	r3, r3, #2
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d106      	bne.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8009ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae0:	2b05      	cmp	r3, #5
 8009ae2:	d103      	bne.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8009ae4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aea:	e003      	b.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8009aec:	2300      	movs	r3, #0
 8009aee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009af0:	f001 bebd 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009af4:	f001 bebb 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009af8:	4b6a      	ldr	r3, [pc, #424]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009afa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009afe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b02:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d104      	bne.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009b0a:	f7fc ff55 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8009b0e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009b10:	f001 bead 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8009b14:	4b63      	ldr	r3, [pc, #396]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b20:	d10a      	bne.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8009b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b24:	2b08      	cmp	r3, #8
 8009b26:	d107      	bne.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b28:	f107 0314 	add.w	r3, r7, #20
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7ff f87b 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b36:	e03d      	b.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8009b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3a:	2b10      	cmp	r3, #16
 8009b3c:	d108      	bne.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b3e:	f107 0308 	add.w	r3, r7, #8
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7ff f9dc 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b4c:	f001 be8f 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009b50:	4b54      	ldr	r3, [pc, #336]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0302 	and.w	r3, r3, #2
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d10c      	bne.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5e:	2b18      	cmp	r3, #24
 8009b60:	d109      	bne.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b62:	4b50      	ldr	r3, [pc, #320]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	08db      	lsrs	r3, r3, #3
 8009b68:	f003 0303 	and.w	r3, r3, #3
 8009b6c:	4a4e      	ldr	r2, [pc, #312]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b74:	e01e      	b.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8009b76:	4b4b      	ldr	r3, [pc, #300]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b82:	d105      	bne.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b86:	2b20      	cmp	r3, #32
 8009b88:	d102      	bne.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8009b8a:	4b48      	ldr	r3, [pc, #288]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b8e:	e011      	b.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009b90:	4b44      	ldr	r3, [pc, #272]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b96:	f003 0302 	and.w	r3, r3, #2
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d106      	bne.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba0:	2b28      	cmp	r3, #40	@ 0x28
 8009ba2:	d103      	bne.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8009ba4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009baa:	e003      	b.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8009bac:	2300      	movs	r3, #0
 8009bae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bb0:	f001 be5d 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009bb4:	f001 be5b 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009bba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009bbe:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009bc2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d104      	bne.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009bca:	f7fc fef5 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8009bce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009bd0:	f001 be4d 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8009bd4:	4b33      	ldr	r3, [pc, #204]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009be0:	d10a      	bne.n	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8009be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be4:	2b40      	cmp	r3, #64	@ 0x40
 8009be6:	d107      	bne.n	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009be8:	f107 0314 	add.w	r3, r7, #20
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7ff f81b 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bf6:	e045      	b.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8009bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c04:	d10a      	bne.n	8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8009c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c08:	2b80      	cmp	r3, #128	@ 0x80
 8009c0a:	d107      	bne.n	8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c0c:	f107 0308 	add.w	r3, r7, #8
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff f975 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c1a:	e033      	b.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009c1c:	4b21      	ldr	r3, [pc, #132]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0302 	and.w	r3, r3, #2
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d10c      	bne.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8009c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c2c:	d109      	bne.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	08db      	lsrs	r3, r3, #3
 8009c34:	f003 0303 	and.w	r3, r3, #3
 8009c38:	4a1b      	ldr	r2, [pc, #108]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c40:	e020      	b.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8009c42:	4b18      	ldr	r3, [pc, #96]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c4e:	d106      	bne.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8009c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c56:	d102      	bne.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8009c58:	4b14      	ldr	r3, [pc, #80]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c5c:	e012      	b.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009c5e:	4b11      	ldr	r3, [pc, #68]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c64:	f003 0302 	and.w	r3, r3, #2
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d107      	bne.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009c72:	d103      	bne.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8009c74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c7a:	e003      	b.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c80:	f001 bdf5 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c84:	f001 bdf3 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009c88:	4b06      	ldr	r3, [pc, #24]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009c8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009c8e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009c92:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d10a      	bne.n	8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009c9a:	f7fc fe8d 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8009c9e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8009ca0:	f001 bde5 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009ca4:	44020c00 	.word	0x44020c00
 8009ca8:	03d09000 	.word	0x03d09000
 8009cac:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8009cb0:	4ba0      	ldr	r3, [pc, #640]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cbc:	d10b      	bne.n	8009cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cc4:	d107      	bne.n	8009cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cc6:	f107 0314 	add.w	r3, r7, #20
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fe ffac 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cd4:	e047      	b.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8009cd6:	4b97      	ldr	r3, [pc, #604]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ce2:	d10b      	bne.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cea:	d107      	bne.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cec:	f107 0308 	add.w	r3, r7, #8
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7ff f905 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cfa:	e034      	b.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009cfc:	4b8d      	ldr	r3, [pc, #564]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 0302 	and.w	r3, r3, #2
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d10d      	bne.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8009d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009d0e:	d109      	bne.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d10:	4b88      	ldr	r3, [pc, #544]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	08db      	lsrs	r3, r3, #3
 8009d16:	f003 0303 	and.w	r3, r3, #3
 8009d1a:	4a87      	ldr	r2, [pc, #540]	@ (8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d22:	e020      	b.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8009d24:	4b83      	ldr	r3, [pc, #524]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d30:	d106      	bne.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8009d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d38:	d102      	bne.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8009d3a:	4b80      	ldr	r3, [pc, #512]	@ (8009f3c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d3e:	e012      	b.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009d40:	4b7c      	ldr	r3, [pc, #496]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d46:	f003 0302 	and.w	r3, r3, #2
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d107      	bne.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d50:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009d54:	d103      	bne.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8009d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d5c:	e003      	b.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d62:	f001 bd84 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d66:	f001 bd82 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009d6a:	4b72      	ldr	r3, [pc, #456]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009d70:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009d74:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d104      	bne.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009d7c:	f7fc fe1c 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8009d80:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8009d82:	f001 bd74 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8009d86:	4b6b      	ldr	r3, [pc, #428]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d92:	d10b      	bne.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8009d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d9a:	d107      	bne.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d9c:	f107 0314 	add.w	r3, r7, #20
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fe ff41 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009daa:	e047      	b.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8009dac:	4b61      	ldr	r3, [pc, #388]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009db4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009db8:	d10b      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8009dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009dc0:	d107      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dc2:	f107 0308 	add.w	r3, r7, #8
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7ff f89a 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dd0:	e034      	b.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009dd2:	4b58      	ldr	r3, [pc, #352]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f003 0302 	and.w	r3, r3, #2
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d10d      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8009dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009de4:	d109      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009de6:	4b53      	ldr	r3, [pc, #332]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	08db      	lsrs	r3, r3, #3
 8009dec:	f003 0303 	and.w	r3, r3, #3
 8009df0:	4a51      	ldr	r2, [pc, #324]	@ (8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009df2:	fa22 f303 	lsr.w	r3, r2, r3
 8009df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009df8:	e020      	b.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8009dfa:	4b4e      	ldr	r3, [pc, #312]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e06:	d106      	bne.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8009e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e0e:	d102      	bne.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8009e10:	4b4a      	ldr	r3, [pc, #296]	@ (8009f3c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e14:	e012      	b.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8009e16:	4b47      	ldr	r3, [pc, #284]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e1c:	f003 0302 	and.w	r3, r3, #2
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d107      	bne.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8009e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e26:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009e2a:	d103      	bne.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8009e2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e32:	e003      	b.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8009e34:	2300      	movs	r3, #0
 8009e36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e38:	f001 bd19 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009e3c:	f001 bd17 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8009e40:	4b3c      	ldr	r3, [pc, #240]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009e46:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009e4a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8009e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d104      	bne.n	8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009e52:	f7fc fdb1 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8009e56:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8009e58:	f001 bd09 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8009e5c:	4b35      	ldr	r3, [pc, #212]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e68:	d10b      	bne.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e70:	d107      	bne.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e72:	f107 0314 	add.w	r3, r7, #20
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7fe fed6 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e80:	e047      	b.n	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8009e82:	4b2c      	ldr	r3, [pc, #176]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e8e:	d10b      	bne.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8009e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e96:	d107      	bne.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e98:	f107 0308 	add.w	r3, r7, #8
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7ff f82f 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ea6:	e034      	b.n	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8009ea8:	4b22      	ldr	r3, [pc, #136]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 0302 	and.w	r3, r3, #2
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d10d      	bne.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009eba:	d109      	bne.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	08db      	lsrs	r3, r3, #3
 8009ec2:	f003 0303 	and.w	r3, r3, #3
 8009ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8009ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ece:	e020      	b.n	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8009ed0:	4b18      	ldr	r3, [pc, #96]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009edc:	d106      	bne.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8009ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ee4:	d102      	bne.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8009ee6:	4b15      	ldr	r3, [pc, #84]	@ (8009f3c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eea:	e012      	b.n	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8009eec:	4b11      	ldr	r3, [pc, #68]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009eee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ef2:	f003 0302 	and.w	r3, r3, #2
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	d107      	bne.n	8009f0a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8009efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009f00:	d103      	bne.n	8009f0a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8009f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f08:	e003      	b.n	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f0e:	f001 bcae 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f12:	f001 bcac 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8009f16:	4b07      	ldr	r3, [pc, #28]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009f18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009f1c:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8009f20:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8009f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10b      	bne.n	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009f28:	f7fc fd46 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8009f2c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8009f2e:	f001 bc9e 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f32:	bf00      	nop
 8009f34:	44020c00 	.word	0x44020c00
 8009f38:	03d09000 	.word	0x03d09000
 8009f3c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8009f40:	4ba0      	ldr	r3, [pc, #640]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f4c:	d10b      	bne.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8009f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009f54:	d107      	bne.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f56:	f107 0314 	add.w	r3, r7, #20
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fe fe64 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f64:	e047      	b.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8009f66:	4b97      	ldr	r3, [pc, #604]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f72:	d10b      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8009f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f76:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009f7a:	d107      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f7c:	f107 0308 	add.w	r3, r7, #8
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fe ffbd 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f8a:	e034      	b.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8009f8c:	4b8d      	ldr	r3, [pc, #564]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 0302 	and.w	r3, r3, #2
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d10d      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8009f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f9a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009f9e:	d109      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009fa0:	4b88      	ldr	r3, [pc, #544]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	08db      	lsrs	r3, r3, #3
 8009fa6:	f003 0303 	and.w	r3, r3, #3
 8009faa:	4a87      	ldr	r2, [pc, #540]	@ (800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8009fac:	fa22 f303 	lsr.w	r3, r2, r3
 8009fb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fb2:	e020      	b.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8009fb4:	4b83      	ldr	r3, [pc, #524]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fc0:	d106      	bne.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fc8:	d102      	bne.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8009fca:	4b80      	ldr	r3, [pc, #512]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8009fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fce:	e012      	b.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8009fd0:	4b7c      	ldr	r3, [pc, #496]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fd6:	f003 0302 	and.w	r3, r3, #2
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	d107      	bne.n	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8009fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8009fe4:	d103      	bne.n	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8009fe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fec:	e003      	b.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ff2:	f001 bc3c 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009ff6:	f001 bc3a 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8009ffa:	4b72      	ldr	r3, [pc, #456]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009ffc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a000:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a004:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800a006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d104      	bne.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a00c:	f7fc fcd4 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 800a010:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800a012:	f001 bc2c 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800a016:	4b6b      	ldr	r3, [pc, #428]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a01e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a022:	d10b      	bne.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800a024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a026:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a02a:	d107      	bne.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a02c:	f107 0314 	add.w	r3, r7, #20
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe fdf9 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	637b      	str	r3, [r7, #52]	@ 0x34
 800a03a:	e047      	b.n	800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800a03c:	4b61      	ldr	r3, [pc, #388]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a048:	d10b      	bne.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800a04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a050:	d107      	bne.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a052:	f107 0308 	add.w	r3, r7, #8
 800a056:	4618      	mov	r0, r3
 800a058:	f7fe ff52 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a060:	e034      	b.n	800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800a062:	4b58      	ldr	r3, [pc, #352]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 0302 	and.w	r3, r3, #2
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d10d      	bne.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800a06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a070:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a074:	d109      	bne.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a076:	4b53      	ldr	r3, [pc, #332]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	08db      	lsrs	r3, r3, #3
 800a07c:	f003 0303 	and.w	r3, r3, #3
 800a080:	4a51      	ldr	r2, [pc, #324]	@ (800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a082:	fa22 f303 	lsr.w	r3, r2, r3
 800a086:	637b      	str	r3, [r7, #52]	@ 0x34
 800a088:	e020      	b.n	800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800a08a:	4b4e      	ldr	r3, [pc, #312]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a096:	d106      	bne.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800a098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a09e:	d102      	bne.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800a0a0:	4b4a      	ldr	r3, [pc, #296]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a0a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0a4:	e012      	b.n	800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800a0a6:	4b47      	ldr	r3, [pc, #284]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a0a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0ac:	f003 0302 	and.w	r3, r3, #2
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d107      	bne.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a0ba:	d103      	bne.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800a0bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0c2:	e003      	b.n	800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0c8:	f001 bbd1 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a0cc:	f001 bbcf 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800a0d0:	4b3c      	ldr	r3, [pc, #240]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a0d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a0d6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a0da:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800a0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d104      	bne.n	800a0ec <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a0e2:	f7fc fc69 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 800a0e6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800a0e8:	f001 bbc1 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800a0ec:	4b35      	ldr	r3, [pc, #212]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0f8:	d10b      	bne.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a100:	d107      	bne.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a102:	f107 0314 	add.w	r3, r7, #20
 800a106:	4618      	mov	r0, r3
 800a108:	f7fe fd8e 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a110:	e047      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800a112:	4b2c      	ldr	r3, [pc, #176]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a11a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a11e:	d10b      	bne.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800a120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a122:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a126:	d107      	bne.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a128:	f107 0308 	add.w	r3, r7, #8
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fe fee7 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	637b      	str	r3, [r7, #52]	@ 0x34
 800a136:	e034      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800a138:	4b22      	ldr	r3, [pc, #136]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0302 	and.w	r3, r3, #2
 800a140:	2b02      	cmp	r3, #2
 800a142:	d10d      	bne.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800a144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a146:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a14a:	d109      	bne.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a14c:	4b1d      	ldr	r3, [pc, #116]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	08db      	lsrs	r3, r3, #3
 800a152:	f003 0303 	and.w	r3, r3, #3
 800a156:	4a1c      	ldr	r2, [pc, #112]	@ (800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a158:	fa22 f303 	lsr.w	r3, r2, r3
 800a15c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a15e:	e020      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800a160:	4b18      	ldr	r3, [pc, #96]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a16c:	d106      	bne.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800a16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a170:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a174:	d102      	bne.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800a176:	4b15      	ldr	r3, [pc, #84]	@ (800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a178:	637b      	str	r3, [r7, #52]	@ 0x34
 800a17a:	e012      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800a17c:	4b11      	ldr	r3, [pc, #68]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a17e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a182:	f003 0302 	and.w	r3, r3, #2
 800a186:	2b02      	cmp	r3, #2
 800a188:	d107      	bne.n	800a19a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800a18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a190:	d103      	bne.n	800a19a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800a192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a196:	637b      	str	r3, [r7, #52]	@ 0x34
 800a198:	e003      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800a19a:	2300      	movs	r3, #0
 800a19c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a19e:	f001 bb66 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a1a2:	f001 bb64 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800a1a6:	4b07      	ldr	r3, [pc, #28]	@ (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a1a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a1ac:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800a1b0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10b      	bne.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a1b8:	f7fc fbfe 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 800a1bc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800a1be:	f001 bb56 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a1c2:	bf00      	nop
 800a1c4:	44020c00 	.word	0x44020c00
 800a1c8:	03d09000 	.word	0x03d09000
 800a1cc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800a1d0:	4ba1      	ldr	r3, [pc, #644]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1dc:	d10b      	bne.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800a1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1e4:	d107      	bne.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1e6:	f107 0314 	add.w	r3, r7, #20
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fe fd1c 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1f4:	e047      	b.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800a1f6:	4b98      	ldr	r3, [pc, #608]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a202:	d10b      	bne.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800a204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a206:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a20a:	d107      	bne.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a20c:	f107 0308 	add.w	r3, r7, #8
 800a210:	4618      	mov	r0, r3
 800a212:	f7fe fe75 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	637b      	str	r3, [r7, #52]	@ 0x34
 800a21a:	e034      	b.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800a21c:	4b8e      	ldr	r3, [pc, #568]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 0302 	and.w	r3, r3, #2
 800a224:	2b02      	cmp	r3, #2
 800a226:	d10d      	bne.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800a228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a22e:	d109      	bne.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a230:	4b89      	ldr	r3, [pc, #548]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	08db      	lsrs	r3, r3, #3
 800a236:	f003 0303 	and.w	r3, r3, #3
 800a23a:	4a88      	ldr	r2, [pc, #544]	@ (800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a23c:	fa22 f303 	lsr.w	r3, r2, r3
 800a240:	637b      	str	r3, [r7, #52]	@ 0x34
 800a242:	e020      	b.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800a244:	4b84      	ldr	r3, [pc, #528]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a24c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a250:	d106      	bne.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800a252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a254:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a258:	d102      	bne.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800a25a:	4b81      	ldr	r3, [pc, #516]	@ (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a25c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a25e:	e012      	b.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800a260:	4b7d      	ldr	r3, [pc, #500]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a266:	f003 0302 	and.w	r3, r3, #2
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d107      	bne.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800a26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a270:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800a274:	d103      	bne.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800a276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a27a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a27c:	e003      	b.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800a27e:	2300      	movs	r3, #0
 800a280:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a282:	f001 baf4 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a286:	f001 baf2 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800a28a:	4b73      	ldr	r3, [pc, #460]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a28c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a290:	f003 0307 	and.w	r3, r3, #7
 800a294:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800a296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d104      	bne.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a29c:	f7fc fb8c 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 800a2a0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800a2a2:	f001 bae4 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800a2a6:	4b6c      	ldr	r3, [pc, #432]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2b2:	d10a      	bne.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800a2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d107      	bne.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2ba:	f107 0314 	add.w	r3, r7, #20
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fe fcb2 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2c8:	e043      	b.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800a2ca:	4b63      	ldr	r3, [pc, #396]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2d6:	d10a      	bne.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	d107      	bne.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2de:	f107 0308 	add.w	r3, r7, #8
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fe fe0c 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2ec:	e031      	b.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800a2ee:	4b5a      	ldr	r3, [pc, #360]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 0302 	and.w	r3, r3, #2
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d10c      	bne.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fc:	2b03      	cmp	r3, #3
 800a2fe:	d109      	bne.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a300:	4b55      	ldr	r3, [pc, #340]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	08db      	lsrs	r3, r3, #3
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	4a54      	ldr	r2, [pc, #336]	@ (800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a30c:	fa22 f303 	lsr.w	r3, r2, r3
 800a310:	637b      	str	r3, [r7, #52]	@ 0x34
 800a312:	e01e      	b.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800a314:	4b50      	ldr	r3, [pc, #320]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a31c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a320:	d105      	bne.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800a322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a324:	2b04      	cmp	r3, #4
 800a326:	d102      	bne.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800a328:	4b4d      	ldr	r3, [pc, #308]	@ (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a32a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a32c:	e011      	b.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800a32e:	4b4a      	ldr	r3, [pc, #296]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a334:	f003 0302 	and.w	r3, r3, #2
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d106      	bne.n	800a34a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800a33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33e:	2b05      	cmp	r3, #5
 800a340:	d103      	bne.n	800a34a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800a342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a346:	637b      	str	r3, [r7, #52]	@ 0x34
 800a348:	e003      	b.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800a34a:	2300      	movs	r3, #0
 800a34c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a34e:	f001 ba8e 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a352:	f001 ba8c 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800a356:	4b40      	ldr	r3, [pc, #256]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a358:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a35c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a360:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800a362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a364:	2b00      	cmp	r3, #0
 800a366:	d104      	bne.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a368:	f7fc fb26 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 800a36c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800a36e:	f001 ba7e 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800a372:	4b39      	ldr	r3, [pc, #228]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a37a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a37e:	d10a      	bne.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800a380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a382:	2b10      	cmp	r3, #16
 800a384:	d107      	bne.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a386:	f107 0314 	add.w	r3, r7, #20
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fe fc4c 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	637b      	str	r3, [r7, #52]	@ 0x34
 800a394:	e043      	b.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800a396:	4b30      	ldr	r3, [pc, #192]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a39e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3a2:	d10a      	bne.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a6:	2b20      	cmp	r3, #32
 800a3a8:	d107      	bne.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3aa:	f107 0308 	add.w	r3, r7, #8
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe fda6 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3b8:	e031      	b.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800a3ba:	4b27      	ldr	r3, [pc, #156]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 0302 	and.w	r3, r3, #2
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d10c      	bne.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c8:	2b30      	cmp	r3, #48	@ 0x30
 800a3ca:	d109      	bne.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a3cc:	4b22      	ldr	r3, [pc, #136]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	08db      	lsrs	r3, r3, #3
 800a3d2:	f003 0303 	and.w	r3, r3, #3
 800a3d6:	4a21      	ldr	r2, [pc, #132]	@ (800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a3d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3de:	e01e      	b.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800a3e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a3e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3ec:	d105      	bne.n	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f0:	2b40      	cmp	r3, #64	@ 0x40
 800a3f2:	d102      	bne.n	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800a3f4:	4b1a      	ldr	r3, [pc, #104]	@ (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a3f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3f8:	e011      	b.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800a3fa:	4b17      	ldr	r3, [pc, #92]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a3fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a400:	f003 0302 	and.w	r3, r3, #2
 800a404:	2b02      	cmp	r3, #2
 800a406:	d106      	bne.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800a408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40a:	2b50      	cmp	r3, #80	@ 0x50
 800a40c:	d103      	bne.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800a40e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a412:	637b      	str	r3, [r7, #52]	@ 0x34
 800a414:	e003      	b.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800a416:	2300      	movs	r3, #0
 800a418:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a41a:	f001 ba28 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a41e:	f001 ba26 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a422:	4b0d      	ldr	r3, [pc, #52]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a428:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a42c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a430:	2b00      	cmp	r3, #0
 800a432:	d104      	bne.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a434:	f7fc faec 	bl	8006a10 <HAL_RCC_GetPCLK3Freq>
 800a438:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a43a:	f001 ba18 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800a43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a440:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a444:	d10e      	bne.n	800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a446:	f107 0314 	add.w	r3, r7, #20
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fbec 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a454:	f001 ba0b 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a458:	44020c00 	.word	0x44020c00
 800a45c:	03d09000 	.word	0x03d09000
 800a460:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800a464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a466:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a46a:	d108      	bne.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a46c:	f107 0308 	add.w	r3, r7, #8
 800a470:	4618      	mov	r0, r3
 800a472:	f7fe fd45 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a47a:	f001 b9f8 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a47e:	4ba4      	ldr	r3, [pc, #656]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0302 	and.w	r3, r3, #2
 800a486:	2b02      	cmp	r3, #2
 800a488:	d10d      	bne.n	800a4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800a48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a48c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a490:	d109      	bne.n	800a4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a492:	4b9f      	ldr	r3, [pc, #636]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	08db      	lsrs	r3, r3, #3
 800a498:	f003 0303 	and.w	r3, r3, #3
 800a49c:	4a9d      	ldr	r2, [pc, #628]	@ (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a49e:	fa22 f303 	lsr.w	r3, r2, r3
 800a4a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4a4:	e020      	b.n	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800a4a6:	4b9a      	ldr	r3, [pc, #616]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4b2:	d106      	bne.n	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800a4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4ba:	d102      	bne.n	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800a4bc:	4b96      	ldr	r3, [pc, #600]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a4be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4c0:	e012      	b.n	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a4c2:	4b93      	ldr	r3, [pc, #588]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a4c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a4c8:	f003 0302 	and.w	r3, r3, #2
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d107      	bne.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800a4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a4d6:	d103      	bne.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800a4d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4de:	e003      	b.n	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a4e4:	f001 b9c3 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a4e8:	f001 b9c1 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a4ec:	4b88      	ldr	r3, [pc, #544]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a4ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a4f2:	f003 0307 	and.w	r3, r3, #7
 800a4f6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d104      	bne.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800a4fe:	f7fc fa3f 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 800a502:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800a504:	f001 b9b3 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d104      	bne.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800a50e:	f7fc f90b 	bl	8006728 <HAL_RCC_GetSysClockFreq>
 800a512:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a514:	f001 b9ab 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800a518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d108      	bne.n	800a530 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a51e:	f107 0314 	add.w	r3, r7, #20
 800a522:	4618      	mov	r0, r3
 800a524:	f7fe fb80 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a52c:	f001 b99f 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a530:	4b77      	ldr	r3, [pc, #476]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a538:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a53c:	d105      	bne.n	800a54a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800a53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a540:	2b03      	cmp	r3, #3
 800a542:	d102      	bne.n	800a54a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800a544:	4b75      	ldr	r3, [pc, #468]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800a546:	637b      	str	r3, [r7, #52]	@ 0x34
 800a548:	e023      	b.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a54a:	4b71      	ldr	r3, [pc, #452]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f003 0302 	and.w	r3, r3, #2
 800a552:	2b02      	cmp	r3, #2
 800a554:	d10c      	bne.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800a556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a558:	2b04      	cmp	r3, #4
 800a55a:	d109      	bne.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a55c:	4b6c      	ldr	r3, [pc, #432]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	08db      	lsrs	r3, r3, #3
 800a562:	f003 0303 	and.w	r3, r3, #3
 800a566:	4a6b      	ldr	r2, [pc, #428]	@ (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a568:	fa22 f303 	lsr.w	r3, r2, r3
 800a56c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a56e:	e010      	b.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800a570:	4b67      	ldr	r3, [pc, #412]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a57c:	d105      	bne.n	800a58a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800a57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a580:	2b05      	cmp	r3, #5
 800a582:	d102      	bne.n	800a58a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800a584:	4b64      	ldr	r3, [pc, #400]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a586:	637b      	str	r3, [r7, #52]	@ 0x34
 800a588:	e003      	b.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800a58a:	2300      	movs	r3, #0
 800a58c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a58e:	f001 b96e 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a592:	f001 b96c 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800a596:	4b5e      	ldr	r3, [pc, #376]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a598:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a59c:	f003 0308 	and.w	r3, r3, #8
 800a5a0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800a5a2:	4b5b      	ldr	r3, [pc, #364]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a5a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5a8:	f003 0302 	and.w	r3, r3, #2
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	d106      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d103      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800a5b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5bc:	e012      	b.n	800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800a5be:	4b54      	ldr	r3, [pc, #336]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a5c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5cc:	d106      	bne.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d0:	2b08      	cmp	r3, #8
 800a5d2:	d103      	bne.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800a5d4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a5d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5da:	e003      	b.n	800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a5e0:	f001 b945 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a5e4:	f001 b943 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a5e8:	4b49      	ldr	r3, [pc, #292]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a5ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a5ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a5f2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d104      	bne.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a5fa:	f7fc f9dd 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 800a5fe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a600:	f001 b935 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800a604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a60a:	d108      	bne.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a60c:	f107 0308 	add.w	r3, r7, #8
 800a610:	4618      	mov	r0, r3
 800a612:	f7fe fc75 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a61a:	f001 b928 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800a61e:	4b3c      	ldr	r3, [pc, #240]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 0302 	and.w	r3, r3, #2
 800a626:	2b02      	cmp	r3, #2
 800a628:	d10d      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800a62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a630:	d109      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a632:	4b37      	ldr	r3, [pc, #220]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	08db      	lsrs	r3, r3, #3
 800a638:	f003 0303 	and.w	r3, r3, #3
 800a63c:	4a35      	ldr	r2, [pc, #212]	@ (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a63e:	fa22 f303 	lsr.w	r3, r2, r3
 800a642:	637b      	str	r3, [r7, #52]	@ 0x34
 800a644:	e011      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800a646:	4b32      	ldr	r3, [pc, #200]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a64e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a652:	d106      	bne.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800a654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a656:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a65a:	d102      	bne.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800a65c:	4b2e      	ldr	r3, [pc, #184]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a65e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a660:	e003      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800a662:	2300      	movs	r3, #0
 800a664:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a666:	f001 b902 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a66a:	f001 b900 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a66e:	4b28      	ldr	r3, [pc, #160]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a670:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a674:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800a678:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800a67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d104      	bne.n	800a68a <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a680:	f7fc f99a 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 800a684:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800a686:	f001 b8f2 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800a68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a690:	d108      	bne.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a692:	f107 0308 	add.w	r3, r7, #8
 800a696:	4618      	mov	r0, r3
 800a698:	f7fe fc32 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a6a0:	f001 b8e5 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800a6a4:	4b1a      	ldr	r3, [pc, #104]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d10d      	bne.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a6b6:	d109      	bne.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a6b8:	4b15      	ldr	r3, [pc, #84]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	08db      	lsrs	r3, r3, #3
 800a6be:	f003 0303 	and.w	r3, r3, #3
 800a6c2:	4a14      	ldr	r2, [pc, #80]	@ (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a6c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ca:	e011      	b.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800a6cc:	4b10      	ldr	r3, [pc, #64]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6d8:	d106      	bne.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800a6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a6e0:	d102      	bne.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800a6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a6e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6e6:	e003      	b.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a6ec:	f001 b8bf 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a6f0:	f001 b8bd 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a6f4:	4b06      	ldr	r3, [pc, #24]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a6f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a6fa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a6fe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800a700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10c      	bne.n	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a706:	f7fc f983 	bl	8006a10 <HAL_RCC_GetPCLK3Freq>
 800a70a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800a70c:	f001 b8af 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a710:	44020c00 	.word	0x44020c00
 800a714:	03d09000 	.word	0x03d09000
 800a718:	003d0900 	.word	0x003d0900
 800a71c:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800a720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a726:	d108      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a728:	f107 0308 	add.w	r3, r7, #8
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fe fbe7 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a736:	f001 b89a 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800a73a:	4b9f      	ldr	r3, [pc, #636]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 0302 	and.w	r3, r3, #2
 800a742:	2b02      	cmp	r3, #2
 800a744:	d10d      	bne.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800a746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a748:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a74c:	d109      	bne.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a74e:	4b9a      	ldr	r3, [pc, #616]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	08db      	lsrs	r3, r3, #3
 800a754:	f003 0303 	and.w	r3, r3, #3
 800a758:	4a98      	ldr	r2, [pc, #608]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a75a:	fa22 f303 	lsr.w	r3, r2, r3
 800a75e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a760:	e011      	b.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800a762:	4b95      	ldr	r3, [pc, #596]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a76a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a76e:	d106      	bne.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800a770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a772:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a776:	d102      	bne.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800a778:	4b91      	ldr	r3, [pc, #580]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a77a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a77c:	e003      	b.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800a77e:	2300      	movs	r3, #0
 800a780:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a782:	f001 b874 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a786:	f001 b872 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a78a:	4b8b      	ldr	r3, [pc, #556]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a78c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a790:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800a794:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800a796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d104      	bne.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a79c:	f7fc f938 	bl	8006a10 <HAL_RCC_GetPCLK3Freq>
 800a7a0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800a7a2:	f001 b864 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a7ac:	d108      	bne.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7ae:	f107 0308 	add.w	r3, r7, #8
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fe fba4 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7bc:	f001 b857 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800a7c0:	4b7d      	ldr	r3, [pc, #500]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 0302 	and.w	r3, r3, #2
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d10d      	bne.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a7d2:	d109      	bne.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a7d4:	4b78      	ldr	r3, [pc, #480]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	08db      	lsrs	r3, r3, #3
 800a7da:	f003 0303 	and.w	r3, r3, #3
 800a7de:	4a77      	ldr	r2, [pc, #476]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a7e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7e6:	e011      	b.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800a7e8:	4b73      	ldr	r3, [pc, #460]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7f4:	d106      	bne.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a7fc:	d102      	bne.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800a7fe:	4b70      	ldr	r3, [pc, #448]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a800:	637b      	str	r3, [r7, #52]	@ 0x34
 800a802:	e003      	b.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800a804:	2300      	movs	r3, #0
 800a806:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a808:	f001 b831 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a80c:	f001 b82f 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800a810:	4b69      	ldr	r3, [pc, #420]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a812:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a816:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800a81a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800a81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d104      	bne.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a822:	f7fc f8c9 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 800a826:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a828:	f001 b821 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800a82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a832:	d108      	bne.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a834:	f107 0308 	add.w	r3, r7, #8
 800a838:	4618      	mov	r0, r3
 800a83a:	f7fe fb61 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a842:	f001 b814 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800a846:	4b5c      	ldr	r3, [pc, #368]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 0302 	and.w	r3, r3, #2
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d10e      	bne.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800a852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a854:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a858:	d10a      	bne.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a85a:	4b57      	ldr	r3, [pc, #348]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	08db      	lsrs	r3, r3, #3
 800a860:	f003 0303 	and.w	r3, r3, #3
 800a864:	4a55      	ldr	r2, [pc, #340]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a866:	fa22 f303 	lsr.w	r3, r2, r3
 800a86a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a86c:	f000 bfff 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a870:	2300      	movs	r3, #0
 800a872:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a874:	f000 bffb 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a878:	4b4f      	ldr	r3, [pc, #316]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a87a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a87e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a882:	633b      	str	r3, [r7, #48]	@ 0x30
 800a884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a886:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a88a:	d056      	beq.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800a88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a892:	f200 808b 	bhi.w	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a89c:	d03e      	beq.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800a89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8a4:	f200 8082 	bhi.w	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8ae:	d027      	beq.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8b6:	d879      	bhi.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8be:	d017      	beq.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8c6:	d871      	bhi.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d004      	beq.n	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8d4:	d004      	beq.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800a8d6:	e069      	b.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a8d8:	f7fc f89a 	bl	8006a10 <HAL_RCC_GetPCLK3Freq>
 800a8dc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a8de:	e068      	b.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8e0:	f107 0314 	add.w	r3, r7, #20
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7fe f99f 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a8ee:	e060      	b.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8f0:	f107 0308 	add.w	r3, r7, #8
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7fe fb03 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a8fe:	e058      	b.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a900:	4b2d      	ldr	r3, [pc, #180]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a906:	f003 0302 	and.w	r3, r3, #2
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d103      	bne.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800a90e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a912:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a914:	e04d      	b.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a91a:	e04a      	b.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a91c:	4b26      	ldr	r3, [pc, #152]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a91e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a922:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a926:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a92a:	d103      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800a92c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a930:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a932:	e03e      	b.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a938:	e03b      	b.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a93a:	4b1f      	ldr	r3, [pc, #124]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a93c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a940:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a944:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a946:	4b1c      	ldr	r3, [pc, #112]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 0302 	and.w	r3, r3, #2
 800a94e:	2b02      	cmp	r3, #2
 800a950:	d10c      	bne.n	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800a952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a954:	2b00      	cmp	r3, #0
 800a956:	d109      	bne.n	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a958:	4b17      	ldr	r3, [pc, #92]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	08db      	lsrs	r3, r3, #3
 800a95e:	f003 0303 	and.w	r3, r3, #3
 800a962:	4a16      	ldr	r2, [pc, #88]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a964:	fa22 f303 	lsr.w	r3, r2, r3
 800a968:	637b      	str	r3, [r7, #52]	@ 0x34
 800a96a:	e01e      	b.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a96c:	4b12      	ldr	r3, [pc, #72]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a978:	d106      	bne.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800a97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a97c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a980:	d102      	bne.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a982:	4b0f      	ldr	r3, [pc, #60]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a984:	637b      	str	r3, [r7, #52]	@ 0x34
 800a986:	e010      	b.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a988:	4b0b      	ldr	r3, [pc, #44]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a994:	d106      	bne.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800a996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a998:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a99c:	d102      	bne.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a99e:	4b09      	ldr	r3, [pc, #36]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800a9a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9a2:	e002      	b.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a9a8:	e003      	b.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800a9aa:	e002      	b.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a9b0:	bf00      	nop
          }
        }
        break;
 800a9b2:	f000 bf5c 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a9b6:	bf00      	nop
 800a9b8:	44020c00 	.word	0x44020c00
 800a9bc:	03d09000 	.word	0x03d09000
 800a9c0:	003d0900 	.word	0x003d0900
 800a9c4:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a9c8:	4b9e      	ldr	r3, [pc, #632]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a9ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a9ce:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a9d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a9da:	d056      	beq.n	800aa8a <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9de:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a9e2:	f200 808b 	bhi.w	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9ec:	d03e      	beq.n	800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9f4:	f200 8082 	bhi.w	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a9fe:	d027      	beq.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800aa00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa06:	d879      	bhi.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800aa08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa0e:	d017      	beq.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800aa10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa16:	d871      	bhi.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800aa18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d004      	beq.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800aa1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa24:	d004      	beq.n	800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800aa26:	e069      	b.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800aa28:	f7fb ffc6 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 800aa2c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800aa2e:	e068      	b.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa30:	f107 0314 	add.w	r3, r7, #20
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe f8f7 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aa3e:	e060      	b.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa40:	f107 0308 	add.w	r3, r7, #8
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7fe fa5b 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aa4e:	e058      	b.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800aa50:	4b7c      	ldr	r3, [pc, #496]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aa52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa56:	f003 0302 	and.w	r3, r3, #2
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d103      	bne.n	800aa66 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800aa5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa62:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aa64:	e04d      	b.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800aa66:	2300      	movs	r3, #0
 800aa68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aa6a:	e04a      	b.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800aa6c:	4b75      	ldr	r3, [pc, #468]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aa6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa7a:	d103      	bne.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800aa7c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800aa80:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aa82:	e03e      	b.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aa88:	e03b      	b.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa8a:	4b6e      	ldr	r3, [pc, #440]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aa8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa90:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800aa94:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa96:	4b6b      	ldr	r3, [pc, #428]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f003 0302 	and.w	r3, r3, #2
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d10c      	bne.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800aaa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d109      	bne.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aaa8:	4b66      	ldr	r3, [pc, #408]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	08db      	lsrs	r3, r3, #3
 800aaae:	f003 0303 	and.w	r3, r3, #3
 800aab2:	4a65      	ldr	r2, [pc, #404]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800aab4:	fa22 f303 	lsr.w	r3, r2, r3
 800aab8:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaba:	e01e      	b.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aabc:	4b61      	ldr	r3, [pc, #388]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aac8:	d106      	bne.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800aaca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aacc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aad0:	d102      	bne.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800aad2:	4b5e      	ldr	r3, [pc, #376]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800aad4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aad6:	e010      	b.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aad8:	4b5a      	ldr	r3, [pc, #360]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aae0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aae4:	d106      	bne.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800aae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aaec:	d102      	bne.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800aaee:	4b58      	ldr	r3, [pc, #352]	@ (800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800aaf0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaf2:	e002      	b.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800aaf8:	e003      	b.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800aafa:	e002      	b.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800aafc:	2300      	movs	r3, #0
 800aafe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab00:	bf00      	nop
          }
        }
        break;
 800ab02:	f000 beb4 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800ab06:	4b4f      	ldr	r3, [pc, #316]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ab08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ab0c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ab10:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab18:	d056      	beq.n	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab20:	f200 808b 	bhi.w	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800ab24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab2a:	d03e      	beq.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800ab2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab32:	f200 8082 	bhi.w	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800ab36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab3c:	d027      	beq.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab44:	d879      	bhi.n	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800ab46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab4c:	d017      	beq.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab54:	d871      	bhi.n	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800ab56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d004      	beq.n	800ab66 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab62:	d004      	beq.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800ab64:	e069      	b.n	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800ab66:	f7fb ff53 	bl	8006a10 <HAL_RCC_GetPCLK3Freq>
 800ab6a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ab6c:	e068      	b.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab6e:	f107 0314 	add.w	r3, r7, #20
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fe f858 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab7c:	e060      	b.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab7e:	f107 0308 	add.w	r3, r7, #8
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7fe f9bc 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab8c:	e058      	b.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ab8e:	4b2d      	ldr	r3, [pc, #180]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ab90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab94:	f003 0302 	and.w	r3, r3, #2
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	d103      	bne.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800ab9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aba0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aba2:	e04d      	b.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800aba4:	2300      	movs	r3, #0
 800aba6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aba8:	e04a      	b.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800abaa:	4b26      	ldr	r3, [pc, #152]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800abac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abb8:	d103      	bne.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800abba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800abbe:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800abc0:	e03e      	b.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800abc6:	e03b      	b.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abc8:	4b1e      	ldr	r3, [pc, #120]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800abca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800abce:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800abd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abd4:	4b1b      	ldr	r3, [pc, #108]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 0302 	and.w	r3, r3, #2
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d10c      	bne.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800abe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d109      	bne.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800abe6:	4b17      	ldr	r3, [pc, #92]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	08db      	lsrs	r3, r3, #3
 800abec:	f003 0303 	and.w	r3, r3, #3
 800abf0:	4a15      	ldr	r2, [pc, #84]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800abf2:	fa22 f303 	lsr.w	r3, r2, r3
 800abf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800abf8:	e01e      	b.n	800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abfa:	4b12      	ldr	r3, [pc, #72]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac06:	d106      	bne.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800ac08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac0e:	d102      	bne.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ac10:	4b0e      	ldr	r3, [pc, #56]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800ac12:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac14:	e010      	b.n	800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac16:	4b0b      	ldr	r3, [pc, #44]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac22:	d106      	bne.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800ac24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac2a:	d102      	bne.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ac2c:	4b08      	ldr	r3, [pc, #32]	@ (800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800ac2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac30:	e002      	b.n	800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ac32:	2300      	movs	r3, #0
 800ac34:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ac36:	e003      	b.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800ac38:	e002      	b.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac3e:	bf00      	nop
          }
        }
        break;
 800ac40:	f000 be15 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ac44:	44020c00 	.word	0x44020c00
 800ac48:	03d09000 	.word	0x03d09000
 800ac4c:	003d0900 	.word	0x003d0900
 800ac50:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800ac54:	4b9e      	ldr	r3, [pc, #632]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ac56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ac5a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800ac5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac62:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800ac66:	d056      	beq.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800ac68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac6a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800ac6e:	f200 808b 	bhi.w	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800ac72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac78:	d03e      	beq.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac80:	f200 8082 	bhi.w	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800ac84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac8a:	d027      	beq.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac92:	d879      	bhi.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800ac94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac9a:	d017      	beq.n	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800ac9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aca2:	d871      	bhi.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800aca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d004      	beq.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800acaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acb0:	d004      	beq.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800acb2:	e069      	b.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800acb4:	f7fb feac 	bl	8006a10 <HAL_RCC_GetPCLK3Freq>
 800acb8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800acba:	e068      	b.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acbc:	f107 0314 	add.w	r3, r7, #20
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7fd ffb1 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800acca:	e060      	b.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800accc:	f107 0308 	add.w	r3, r7, #8
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fe f915 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800acda:	e058      	b.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800acdc:	4b7c      	ldr	r3, [pc, #496]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800acde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ace2:	f003 0302 	and.w	r3, r3, #2
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d103      	bne.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800acea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acee:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800acf0:	e04d      	b.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800acf6:	e04a      	b.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800acf8:	4b75      	ldr	r3, [pc, #468]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800acfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800acfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad06:	d103      	bne.n	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800ad08:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ad0c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ad0e:	e03e      	b.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800ad10:	2300      	movs	r3, #0
 800ad12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad14:	e03b      	b.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad16:	4b6e      	ldr	r3, [pc, #440]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ad18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ad1c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ad20:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad22:	4b6b      	ldr	r3, [pc, #428]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 0302 	and.w	r3, r3, #2
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d10c      	bne.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800ad2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d109      	bne.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ad34:	4b66      	ldr	r3, [pc, #408]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	08db      	lsrs	r3, r3, #3
 800ad3a:	f003 0303 	and.w	r3, r3, #3
 800ad3e:	4a65      	ldr	r2, [pc, #404]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800ad40:	fa22 f303 	lsr.w	r3, r2, r3
 800ad44:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad46:	e01e      	b.n	800ad86 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad48:	4b61      	ldr	r3, [pc, #388]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad54:	d106      	bne.n	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800ad56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad5c:	d102      	bne.n	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ad5e:	4b5e      	ldr	r3, [pc, #376]	@ (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800ad60:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad62:	e010      	b.n	800ad86 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad64:	4b5a      	ldr	r3, [pc, #360]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad70:	d106      	bne.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800ad72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad78:	d102      	bne.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ad7a:	4b58      	ldr	r3, [pc, #352]	@ (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800ad7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad7e:	e002      	b.n	800ad86 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ad84:	e003      	b.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800ad86:	e002      	b.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad8c:	bf00      	nop
          }
        }
        break;
 800ad8e:	f000 bd6e 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800ad92:	4b4f      	ldr	r3, [pc, #316]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ad94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ad98:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ad9c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ada4:	d056      	beq.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800ada6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800adac:	f200 808b 	bhi.w	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800adb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800adb6:	d03e      	beq.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800adb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800adbe:	f200 8082 	bhi.w	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800adc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800adc8:	d027      	beq.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800adca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adcc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800add0:	d879      	bhi.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800add2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800add8:	d017      	beq.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800adda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800addc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ade0:	d871      	bhi.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800ade2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d004      	beq.n	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800ade8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800adee:	d004      	beq.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800adf0:	e069      	b.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800adf2:	f7fb fe0d 	bl	8006a10 <HAL_RCC_GetPCLK3Freq>
 800adf6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800adf8:	e068      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adfa:	f107 0314 	add.w	r3, r7, #20
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7fd ff12 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae08:	e060      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae0a:	f107 0308 	add.w	r3, r7, #8
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fe f876 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae18:	e058      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ae1a:	4b2d      	ldr	r3, [pc, #180]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ae1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae20:	f003 0302 	and.w	r3, r3, #2
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d103      	bne.n	800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800ae28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae2c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ae2e:	e04d      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800ae30:	2300      	movs	r3, #0
 800ae32:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae34:	e04a      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ae36:	4b26      	ldr	r3, [pc, #152]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ae38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae44:	d103      	bne.n	800ae4e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800ae46:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ae4a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ae4c:	e03e      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae52:	e03b      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae54:	4b1e      	ldr	r3, [pc, #120]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ae56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ae5a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ae5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae60:	4b1b      	ldr	r3, [pc, #108]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 0302 	and.w	r3, r3, #2
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	d10c      	bne.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800ae6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d109      	bne.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ae72:	4b17      	ldr	r3, [pc, #92]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	08db      	lsrs	r3, r3, #3
 800ae78:	f003 0303 	and.w	r3, r3, #3
 800ae7c:	4a15      	ldr	r2, [pc, #84]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800ae7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae82:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae84:	e01e      	b.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae86:	4b12      	ldr	r3, [pc, #72]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae92:	d106      	bne.n	800aea2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800ae94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae9a:	d102      	bne.n	800aea2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ae9c:	4b0e      	ldr	r3, [pc, #56]	@ (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800ae9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aea0:	e010      	b.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aea2:	4b0b      	ldr	r3, [pc, #44]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aeaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aeae:	d106      	bne.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800aeb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aeb6:	d102      	bne.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800aeb8:	4b08      	ldr	r3, [pc, #32]	@ (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800aeba:	637b      	str	r3, [r7, #52]	@ 0x34
 800aebc:	e002      	b.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800aebe:	2300      	movs	r3, #0
 800aec0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800aec2:	e003      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800aec4:	e002      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800aec6:	2300      	movs	r3, #0
 800aec8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aeca:	bf00      	nop
          }
        }
        break;
 800aecc:	f000 bccf 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aed0:	44020c00 	.word	0x44020c00
 800aed4:	03d09000 	.word	0x03d09000
 800aed8:	003d0900 	.word	0x003d0900
 800aedc:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800aee0:	4b9e      	ldr	r3, [pc, #632]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aee2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800aee6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800aeea:	633b      	str	r3, [r7, #48]	@ 0x30
 800aeec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aef2:	d056      	beq.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800aef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aefa:	f200 808b 	bhi.w	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800aefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af04:	d03e      	beq.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800af06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af0c:	f200 8082 	bhi.w	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800af10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af16:	d027      	beq.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800af18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af1e:	d879      	bhi.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800af20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af26:	d017      	beq.n	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800af28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af2e:	d871      	bhi.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800af30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af32:	2b00      	cmp	r3, #0
 800af34:	d004      	beq.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800af36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af3c:	d004      	beq.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800af3e:	e069      	b.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800af40:	f7fb fd66 	bl	8006a10 <HAL_RCC_GetPCLK3Freq>
 800af44:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800af46:	e068      	b.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af48:	f107 0314 	add.w	r3, r7, #20
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7fd fe6b 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800af56:	e060      	b.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af58:	f107 0308 	add.w	r3, r7, #8
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fd ffcf 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800af66:	e058      	b.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800af68:	4b7c      	ldr	r3, [pc, #496]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800af6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af6e:	f003 0302 	and.w	r3, r3, #2
 800af72:	2b02      	cmp	r3, #2
 800af74:	d103      	bne.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800af76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af7a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800af7c:	e04d      	b.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800af82:	e04a      	b.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800af84:	4b75      	ldr	r3, [pc, #468]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800af86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af92:	d103      	bne.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800af94:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800af98:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800af9a:	e03e      	b.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800afa0:	e03b      	b.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afa2:	4b6e      	ldr	r3, [pc, #440]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800afa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800afa8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800afac:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afae:	4b6b      	ldr	r3, [pc, #428]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f003 0302 	and.w	r3, r3, #2
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	d10c      	bne.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800afba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d109      	bne.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800afc0:	4b66      	ldr	r3, [pc, #408]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	08db      	lsrs	r3, r3, #3
 800afc6:	f003 0303 	and.w	r3, r3, #3
 800afca:	4a65      	ldr	r2, [pc, #404]	@ (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800afcc:	fa22 f303 	lsr.w	r3, r2, r3
 800afd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800afd2:	e01e      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afd4:	4b61      	ldr	r3, [pc, #388]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800afdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afe0:	d106      	bne.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800afe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afe8:	d102      	bne.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800afea:	4b5e      	ldr	r3, [pc, #376]	@ (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800afec:	637b      	str	r3, [r7, #52]	@ 0x34
 800afee:	e010      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aff0:	4b5a      	ldr	r3, [pc, #360]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aff8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800affc:	d106      	bne.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800affe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b000:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b004:	d102      	bne.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b006:	4b58      	ldr	r3, [pc, #352]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b008:	637b      	str	r3, [r7, #52]	@ 0x34
 800b00a:	e002      	b.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b00c:	2300      	movs	r3, #0
 800b00e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b010:	e003      	b.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800b012:	e002      	b.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800b014:	2300      	movs	r3, #0
 800b016:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b018:	bf00      	nop
          }
        }
        break;
 800b01a:	f000 bc28 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b01e:	4b4f      	ldr	r3, [pc, #316]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b024:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b028:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800b02a:	4b4c      	ldr	r3, [pc, #304]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b032:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b036:	d106      	bne.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800b038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d103      	bne.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800b03e:	4b4a      	ldr	r3, [pc, #296]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b040:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800b042:	f000 bc14 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800b046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b048:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b04c:	d108      	bne.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b04e:	f107 0320 	add.w	r3, r7, #32
 800b052:	4618      	mov	r0, r3
 800b054:	f7fd fc7c 	bl	8008950 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b05a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b05c:	f000 bc07 	b.w	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800b060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b066:	d107      	bne.n	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b068:	f107 0314 	add.w	r3, r7, #20
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7fd fddb 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b076:	e3fa      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b078:	2300      	movs	r3, #0
 800b07a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b07c:	e3f7      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b07e:	4b37      	ldr	r3, [pc, #220]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b084:	f003 0307 	and.w	r3, r3, #7
 800b088:	633b      	str	r3, [r7, #48]	@ 0x30
 800b08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08c:	2b04      	cmp	r3, #4
 800b08e:	d861      	bhi.n	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800b090:	a201      	add	r2, pc, #4	@ (adr r2, 800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800b092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b096:	bf00      	nop
 800b098:	0800b0ad 	.word	0x0800b0ad
 800b09c:	0800b0bd 	.word	0x0800b0bd
 800b0a0:	0800b0cd 	.word	0x0800b0cd
 800b0a4:	0800b0dd 	.word	0x0800b0dd
 800b0a8:	0800b0e3 	.word	0x0800b0e3
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0ac:	f107 0320 	add.w	r3, r7, #32
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7fd fc4d 	bl	8008950 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b0ba:	e04e      	b.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0bc:	f107 0314 	add.w	r3, r7, #20
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7fd fdb1 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b0ca:	e046      	b.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0cc:	f107 0308 	add.w	r3, r7, #8
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7fd ff15 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b0da:	e03e      	b.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b0dc:	4b23      	ldr	r3, [pc, #140]	@ (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800b0de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b0e0:	e03b      	b.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b0e2:	4b1e      	ldr	r3, [pc, #120]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b0e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b0e8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b0ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b0ee:	4b1b      	ldr	r3, [pc, #108]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 0302 	and.w	r3, r3, #2
 800b0f6:	2b02      	cmp	r3, #2
 800b0f8:	d10c      	bne.n	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800b0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d109      	bne.n	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b100:	4b16      	ldr	r3, [pc, #88]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	08db      	lsrs	r3, r3, #3
 800b106:	f003 0303 	and.w	r3, r3, #3
 800b10a:	4a15      	ldr	r2, [pc, #84]	@ (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b10c:	fa22 f303 	lsr.w	r3, r2, r3
 800b110:	637b      	str	r3, [r7, #52]	@ 0x34
 800b112:	e01e      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b114:	4b11      	ldr	r3, [pc, #68]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b11c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b120:	d106      	bne.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800b122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b128:	d102      	bne.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b12a:	4b0e      	ldr	r3, [pc, #56]	@ (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800b12c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b12e:	e010      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b130:	4b0a      	ldr	r3, [pc, #40]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b138:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b13c:	d106      	bne.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800b13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b140:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b144:	d102      	bne.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b146:	4b08      	ldr	r3, [pc, #32]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b148:	637b      	str	r3, [r7, #52]	@ 0x34
 800b14a:	e002      	b.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b150:	e003      	b.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800b152:	e002      	b.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800b154:	2300      	movs	r3, #0
 800b156:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b158:	bf00      	nop
          }
        }
        break;
 800b15a:	e388      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b15c:	44020c00 	.word	0x44020c00
 800b160:	03d09000 	.word	0x03d09000
 800b164:	003d0900 	.word	0x003d0900
 800b168:	007a1200 	.word	0x007a1200
 800b16c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b170:	4ba9      	ldr	r3, [pc, #676]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b176:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b17a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b17e:	2b20      	cmp	r3, #32
 800b180:	f200 809a 	bhi.w	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800b184:	a201      	add	r2, pc, #4	@ (adr r2, 800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800b186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18a:	bf00      	nop
 800b18c:	0800b211 	.word	0x0800b211
 800b190:	0800b2b9 	.word	0x0800b2b9
 800b194:	0800b2b9 	.word	0x0800b2b9
 800b198:	0800b2b9 	.word	0x0800b2b9
 800b19c:	0800b2b9 	.word	0x0800b2b9
 800b1a0:	0800b2b9 	.word	0x0800b2b9
 800b1a4:	0800b2b9 	.word	0x0800b2b9
 800b1a8:	0800b2b9 	.word	0x0800b2b9
 800b1ac:	0800b221 	.word	0x0800b221
 800b1b0:	0800b2b9 	.word	0x0800b2b9
 800b1b4:	0800b2b9 	.word	0x0800b2b9
 800b1b8:	0800b2b9 	.word	0x0800b2b9
 800b1bc:	0800b2b9 	.word	0x0800b2b9
 800b1c0:	0800b2b9 	.word	0x0800b2b9
 800b1c4:	0800b2b9 	.word	0x0800b2b9
 800b1c8:	0800b2b9 	.word	0x0800b2b9
 800b1cc:	0800b231 	.word	0x0800b231
 800b1d0:	0800b2b9 	.word	0x0800b2b9
 800b1d4:	0800b2b9 	.word	0x0800b2b9
 800b1d8:	0800b2b9 	.word	0x0800b2b9
 800b1dc:	0800b2b9 	.word	0x0800b2b9
 800b1e0:	0800b2b9 	.word	0x0800b2b9
 800b1e4:	0800b2b9 	.word	0x0800b2b9
 800b1e8:	0800b2b9 	.word	0x0800b2b9
 800b1ec:	0800b241 	.word	0x0800b241
 800b1f0:	0800b2b9 	.word	0x0800b2b9
 800b1f4:	0800b2b9 	.word	0x0800b2b9
 800b1f8:	0800b2b9 	.word	0x0800b2b9
 800b1fc:	0800b2b9 	.word	0x0800b2b9
 800b200:	0800b2b9 	.word	0x0800b2b9
 800b204:	0800b2b9 	.word	0x0800b2b9
 800b208:	0800b2b9 	.word	0x0800b2b9
 800b20c:	0800b247 	.word	0x0800b247
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b210:	f107 0320 	add.w	r3, r7, #32
 800b214:	4618      	mov	r0, r3
 800b216:	f7fd fb9b 	bl	8008950 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b21e:	e04e      	b.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b220:	f107 0314 	add.w	r3, r7, #20
 800b224:	4618      	mov	r0, r3
 800b226:	f7fd fcff 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b22e:	e046      	b.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b230:	f107 0308 	add.w	r3, r7, #8
 800b234:	4618      	mov	r0, r3
 800b236:	f7fd fe63 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b23e:	e03e      	b.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b240:	4b76      	ldr	r3, [pc, #472]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800b242:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b244:	e03b      	b.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b246:	4b74      	ldr	r3, [pc, #464]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b24c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b250:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b252:	4b71      	ldr	r3, [pc, #452]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 0302 	and.w	r3, r3, #2
 800b25a:	2b02      	cmp	r3, #2
 800b25c:	d10c      	bne.n	800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800b25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b260:	2b00      	cmp	r3, #0
 800b262:	d109      	bne.n	800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b264:	4b6c      	ldr	r3, [pc, #432]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	08db      	lsrs	r3, r3, #3
 800b26a:	f003 0303 	and.w	r3, r3, #3
 800b26e:	4a6c      	ldr	r2, [pc, #432]	@ (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800b270:	fa22 f303 	lsr.w	r3, r2, r3
 800b274:	637b      	str	r3, [r7, #52]	@ 0x34
 800b276:	e01e      	b.n	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b278:	4b67      	ldr	r3, [pc, #412]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b284:	d106      	bne.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800b286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b28c:	d102      	bne.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b28e:	4b65      	ldr	r3, [pc, #404]	@ (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800b290:	637b      	str	r3, [r7, #52]	@ 0x34
 800b292:	e010      	b.n	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b294:	4b60      	ldr	r3, [pc, #384]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b29c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2a0:	d106      	bne.n	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800b2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2a8:	d102      	bne.n	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b2aa:	4b5f      	ldr	r3, [pc, #380]	@ (800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800b2ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2ae:	e002      	b.n	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b2b4:	e003      	b.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800b2b6:	e002      	b.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2bc:	bf00      	nop
          }
        }
        break;
 800b2be:	e2d6      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b2c0:	4b55      	ldr	r3, [pc, #340]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b2c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b2c6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b2ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2d2:	d031      	beq.n	800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2da:	d866      	bhi.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2de:	2bc0      	cmp	r3, #192	@ 0xc0
 800b2e0:	d027      	beq.n	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e4:	2bc0      	cmp	r3, #192	@ 0xc0
 800b2e6:	d860      	bhi.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ea:	2b80      	cmp	r3, #128	@ 0x80
 800b2ec:	d019      	beq.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f0:	2b80      	cmp	r3, #128	@ 0x80
 800b2f2:	d85a      	bhi.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d003      	beq.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fc:	2b40      	cmp	r3, #64	@ 0x40
 800b2fe:	d008      	beq.n	800b312 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800b300:	e053      	b.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b302:	f107 0320 	add.w	r3, r7, #32
 800b306:	4618      	mov	r0, r3
 800b308:	f7fd fb22 	bl	8008950 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b30e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b310:	e04e      	b.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b312:	f107 0314 	add.w	r3, r7, #20
 800b316:	4618      	mov	r0, r3
 800b318:	f7fd fc86 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b320:	e046      	b.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b322:	f107 0308 	add.w	r3, r7, #8
 800b326:	4618      	mov	r0, r3
 800b328:	f7fd fdea 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b330:	e03e      	b.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b332:	4b3a      	ldr	r3, [pc, #232]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800b334:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b336:	e03b      	b.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b338:	4b37      	ldr	r3, [pc, #220]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b33a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b33e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b342:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b344:	4b34      	ldr	r3, [pc, #208]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 0302 	and.w	r3, r3, #2
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d10c      	bne.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800b350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b352:	2b00      	cmp	r3, #0
 800b354:	d109      	bne.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b356:	4b30      	ldr	r3, [pc, #192]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	08db      	lsrs	r3, r3, #3
 800b35c:	f003 0303 	and.w	r3, r3, #3
 800b360:	4a2f      	ldr	r2, [pc, #188]	@ (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800b362:	fa22 f303 	lsr.w	r3, r2, r3
 800b366:	637b      	str	r3, [r7, #52]	@ 0x34
 800b368:	e01e      	b.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b36a:	4b2b      	ldr	r3, [pc, #172]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b372:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b376:	d106      	bne.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800b378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b37a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b37e:	d102      	bne.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b380:	4b28      	ldr	r3, [pc, #160]	@ (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800b382:	637b      	str	r3, [r7, #52]	@ 0x34
 800b384:	e010      	b.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b386:	4b24      	ldr	r3, [pc, #144]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b38e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b392:	d106      	bne.n	800b3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800b394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b396:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b39a:	d102      	bne.n	800b3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b39c:	4b22      	ldr	r3, [pc, #136]	@ (800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800b39e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3a0:	e002      	b.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b3a6:	e003      	b.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800b3a8:	e002      	b.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b3ae:	bf00      	nop
          }
        }
        break;
 800b3b0:	e25d      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800b3b2:	4b19      	ldr	r3, [pc, #100]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b3b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b3b8:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800b3bc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800b3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d103      	bne.n	800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b3c4:	f7fb fb0e 	bl	80069e4 <HAL_RCC_GetPCLK2Freq>
 800b3c8:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b3ca:	e250      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800b3cc:	4b12      	ldr	r3, [pc, #72]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3d8:	d10b      	bne.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800b3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3e0:	d107      	bne.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3e2:	f107 0314 	add.w	r3, r7, #20
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fd fc1e 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3f0:	e04f      	b.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800b3f2:	4b09      	ldr	r3, [pc, #36]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3fe:	d115      	bne.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800b400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b406:	d111      	bne.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b408:	f107 0308 	add.w	r3, r7, #8
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7fd fd77 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	637b      	str	r3, [r7, #52]	@ 0x34
 800b416:	e03c      	b.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800b418:	44020c00 	.word	0x44020c00
 800b41c:	00bb8000 	.word	0x00bb8000
 800b420:	03d09000 	.word	0x03d09000
 800b424:	003d0900 	.word	0x003d0900
 800b428:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800b42c:	4b94      	ldr	r3, [pc, #592]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f003 0302 	and.w	r3, r3, #2
 800b434:	2b02      	cmp	r3, #2
 800b436:	d10d      	bne.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800b438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b43e:	d109      	bne.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b440:	4b8f      	ldr	r3, [pc, #572]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	08db      	lsrs	r3, r3, #3
 800b446:	f003 0303 	and.w	r3, r3, #3
 800b44a:	4a8e      	ldr	r2, [pc, #568]	@ (800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b44c:	fa22 f303 	lsr.w	r3, r2, r3
 800b450:	637b      	str	r3, [r7, #52]	@ 0x34
 800b452:	e01e      	b.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800b454:	4b8a      	ldr	r3, [pc, #552]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b45c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b460:	d106      	bne.n	800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800b462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b468:	d102      	bne.n	800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800b46a:	4b87      	ldr	r3, [pc, #540]	@ (800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b46c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b46e:	e010      	b.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800b470:	4b83      	ldr	r3, [pc, #524]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b478:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b47c:	d106      	bne.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800b47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b480:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b484:	d102      	bne.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800b486:	4b81      	ldr	r3, [pc, #516]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b488:	637b      	str	r3, [r7, #52]	@ 0x34
 800b48a:	e002      	b.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800b48c:	2300      	movs	r3, #0
 800b48e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b490:	e1ed      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b492:	e1ec      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800b494:	4b7a      	ldr	r3, [pc, #488]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b49a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b49e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d103      	bne.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b4a6:	f7fb fab3 	bl	8006a10 <HAL_RCC_GetPCLK3Freq>
 800b4aa:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b4ac:	e1df      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800b4ae:	4b74      	ldr	r3, [pc, #464]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4ba:	d10b      	bne.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800b4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4c2:	d107      	bne.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4c4:	f107 0314 	add.w	r3, r7, #20
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7fd fbad 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4d2:	e045      	b.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800b4d4:	4b6a      	ldr	r3, [pc, #424]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4e0:	d10b      	bne.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4e8:	d107      	bne.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4ea:	f107 0308 	add.w	r3, r7, #8
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7fd fd06 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4f8:	e032      	b.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800b4fa:	4b61      	ldr	r3, [pc, #388]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f003 0302 	and.w	r3, r3, #2
 800b502:	2b02      	cmp	r3, #2
 800b504:	d10d      	bne.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800b506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b508:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b50c:	d109      	bne.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b50e:	4b5c      	ldr	r3, [pc, #368]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	08db      	lsrs	r3, r3, #3
 800b514:	f003 0303 	and.w	r3, r3, #3
 800b518:	4a5a      	ldr	r2, [pc, #360]	@ (800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b51a:	fa22 f303 	lsr.w	r3, r2, r3
 800b51e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b520:	e01e      	b.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800b522:	4b57      	ldr	r3, [pc, #348]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b52a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b52e:	d106      	bne.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800b530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b532:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b536:	d102      	bne.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800b538:	4b53      	ldr	r3, [pc, #332]	@ (800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b53a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b53c:	e010      	b.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800b53e:	4b50      	ldr	r3, [pc, #320]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b546:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b54a:	d106      	bne.n	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800b54c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b54e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b552:	d102      	bne.n	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800b554:	4b4d      	ldr	r3, [pc, #308]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b556:	637b      	str	r3, [r7, #52]	@ 0x34
 800b558:	e002      	b.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800b55a:	2300      	movs	r3, #0
 800b55c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b55e:	e186      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b560:	e185      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b562:	4b47      	ldr	r3, [pc, #284]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b568:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800b56c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800b56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b570:	2b00      	cmp	r3, #0
 800b572:	d103      	bne.n	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b574:	f7fb fa36 	bl	80069e4 <HAL_RCC_GetPCLK2Freq>
 800b578:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b57a:	e178      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800b57c:	4b40      	ldr	r3, [pc, #256]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b584:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b588:	d10b      	bne.n	800b5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800b58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b58c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b590:	d107      	bne.n	800b5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b592:	f107 0314 	add.w	r3, r7, #20
 800b596:	4618      	mov	r0, r3
 800b598:	f7fd fb46 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5a0:	e045      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800b5a2:	4b37      	ldr	r3, [pc, #220]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5ae:	d10b      	bne.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800b5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5b6:	d107      	bne.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5b8:	f107 0308 	add.w	r3, r7, #8
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fd fc9f 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5c6:	e032      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800b5c8:	4b2d      	ldr	r3, [pc, #180]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 0302 	and.w	r3, r3, #2
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d10d      	bne.n	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800b5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800b5da:	d109      	bne.n	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b5dc:	4b28      	ldr	r3, [pc, #160]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	08db      	lsrs	r3, r3, #3
 800b5e2:	f003 0303 	and.w	r3, r3, #3
 800b5e6:	4a27      	ldr	r2, [pc, #156]	@ (800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b5e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b5ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5ee:	e01e      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800b5f0:	4b23      	ldr	r3, [pc, #140]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b5f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5fc:	d106      	bne.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800b5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b604:	d102      	bne.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800b606:	4b20      	ldr	r3, [pc, #128]	@ (800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b608:	637b      	str	r3, [r7, #52]	@ 0x34
 800b60a:	e010      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800b60c:	4b1c      	ldr	r3, [pc, #112]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b618:	d106      	bne.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800b61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b61c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800b620:	d102      	bne.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800b622:	4b1a      	ldr	r3, [pc, #104]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b624:	637b      	str	r3, [r7, #52]	@ 0x34
 800b626:	e002      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800b628:	2300      	movs	r3, #0
 800b62a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b62c:	e11f      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b62e:	e11e      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b630:	4b13      	ldr	r3, [pc, #76]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b632:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b636:	f003 0303 	and.w	r3, r3, #3
 800b63a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b63e:	2b03      	cmp	r3, #3
 800b640:	d85f      	bhi.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800b642:	a201      	add	r2, pc, #4	@ (adr r2, 800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800b644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b648:	0800b659 	.word	0x0800b659
 800b64c:	0800b661 	.word	0x0800b661
 800b650:	0800b671 	.word	0x0800b671
 800b654:	0800b691 	.word	0x0800b691

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800b658:	f7fb f992 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 800b65c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b65e:	e053      	b.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b660:	f107 0320 	add.w	r3, r7, #32
 800b664:	4618      	mov	r0, r3
 800b666:	f7fd f973 	bl	8008950 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b66e:	e04b      	b.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b670:	f107 0314 	add.w	r3, r7, #20
 800b674:	4618      	mov	r0, r3
 800b676:	f7fd fad7 	bl	8008c28 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b67e:	e043      	b.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800b680:	44020c00 	.word	0x44020c00
 800b684:	03d09000 	.word	0x03d09000
 800b688:	003d0900 	.word	0x003d0900
 800b68c:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b690:	4b79      	ldr	r3, [pc, #484]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b692:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b696:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b69a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b69c:	4b76      	ldr	r3, [pc, #472]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f003 0302 	and.w	r3, r3, #2
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	d10c      	bne.n	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800b6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d109      	bne.n	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b6ae:	4b72      	ldr	r3, [pc, #456]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	08db      	lsrs	r3, r3, #3
 800b6b4:	f003 0303 	and.w	r3, r3, #3
 800b6b8:	4a70      	ldr	r2, [pc, #448]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800b6ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b6be:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6c0:	e01e      	b.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b6c2:	4b6d      	ldr	r3, [pc, #436]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b6ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6ce:	d106      	bne.n	800b6de <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800b6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6d6:	d102      	bne.n	800b6de <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b6d8:	4b69      	ldr	r3, [pc, #420]	@ (800b880 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800b6da:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6dc:	e010      	b.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b6de:	4b66      	ldr	r3, [pc, #408]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6ea:	d106      	bne.n	800b6fa <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800b6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b6f2:	d102      	bne.n	800b6fa <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b6f4:	4b63      	ldr	r3, [pc, #396]	@ (800b884 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800b6f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6f8:	e002      	b.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b6fe:	e003      	b.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800b700:	e002      	b.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800b702:	2300      	movs	r3, #0
 800b704:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b706:	bf00      	nop
          }
        }
        break;
 800b708:	e0b1      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800b70a:	4b5b      	ldr	r3, [pc, #364]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b70c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b710:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b714:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800b716:	4b58      	ldr	r3, [pc, #352]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b71c:	f003 0302 	and.w	r3, r3, #2
 800b720:	2b02      	cmp	r3, #2
 800b722:	d106      	bne.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800b724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b726:	2b00      	cmp	r3, #0
 800b728:	d103      	bne.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800b72a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b72e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b730:	e01f      	b.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800b732:	4b51      	ldr	r3, [pc, #324]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b73c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b740:	d106      	bne.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800b742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b744:	2b40      	cmp	r3, #64	@ 0x40
 800b746:	d103      	bne.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800b748:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b74c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b74e:	e010      	b.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800b750:	4b49      	ldr	r3, [pc, #292]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b75c:	d106      	bne.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800b75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b760:	2b80      	cmp	r3, #128	@ 0x80
 800b762:	d103      	bne.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800b764:	f248 0312 	movw	r3, #32786	@ 0x8012
 800b768:	637b      	str	r3, [r7, #52]	@ 0x34
 800b76a:	e002      	b.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800b76c:	2300      	movs	r3, #0
 800b76e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800b770:	e07d      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b772:	e07c      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b774:	4b40      	ldr	r3, [pc, #256]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b77a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b77e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800b780:	4b3d      	ldr	r3, [pc, #244]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b788:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b78c:	d105      	bne.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800b78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b790:	2b00      	cmp	r3, #0
 800b792:	d102      	bne.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800b794:	4b3c      	ldr	r3, [pc, #240]	@ (800b888 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800b796:	637b      	str	r3, [r7, #52]	@ 0x34
 800b798:	e031      	b.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800b79a:	4b37      	ldr	r3, [pc, #220]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7a6:	d10a      	bne.n	800b7be <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7aa:	2b10      	cmp	r3, #16
 800b7ac:	d107      	bne.n	800b7be <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7ae:	f107 0320 	add.w	r3, r7, #32
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fd f8cc 	bl	8008950 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7bc:	e01f      	b.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800b7be:	4b2e      	ldr	r3, [pc, #184]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b7c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b7c4:	f003 0302 	and.w	r3, r3, #2
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	d106      	bne.n	800b7da <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800b7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ce:	2b20      	cmp	r3, #32
 800b7d0:	d103      	bne.n	800b7da <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800b7d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7d8:	e011      	b.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800b7da:	4b27      	ldr	r3, [pc, #156]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b7dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b7e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7e8:	d106      	bne.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ec:	2b30      	cmp	r3, #48	@ 0x30
 800b7ee:	d103      	bne.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800b7f0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b7f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7f6:	e002      	b.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800b7fc:	e037      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b7fe:	e036      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800b800:	4b1d      	ldr	r3, [pc, #116]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b802:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b806:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b80a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800b80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b80e:	2b10      	cmp	r3, #16
 800b810:	d107      	bne.n	800b822 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b812:	f107 0320 	add.w	r3, r7, #32
 800b816:	4618      	mov	r0, r3
 800b818:	f7fd f89a 	bl	8008950 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b81e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b820:	e025      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800b822:	4b15      	ldr	r3, [pc, #84]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b82a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b82e:	d10a      	bne.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800b830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b832:	2b20      	cmp	r3, #32
 800b834:	d107      	bne.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b836:	f107 0308 	add.w	r3, r7, #8
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fd fb60 	bl	8008f00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	637b      	str	r3, [r7, #52]	@ 0x34
 800b844:	e00f      	b.n	800b866 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800b846:	4b0c      	ldr	r3, [pc, #48]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b84e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b852:	d105      	bne.n	800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800b854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b856:	2b30      	cmp	r3, #48	@ 0x30
 800b858:	d102      	bne.n	800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800b85a:	4b0b      	ldr	r3, [pc, #44]	@ (800b888 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800b85c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b85e:	e002      	b.n	800b866 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800b860:	2300      	movs	r3, #0
 800b862:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800b864:	e003      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b866:	e002      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800b868:	2300      	movs	r3, #0
 800b86a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b86c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800b86e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b870:	4618      	mov	r0, r3
 800b872:	373c      	adds	r7, #60	@ 0x3c
 800b874:	46bd      	mov	sp, r7
 800b876:	bd90      	pop	{r4, r7, pc}
 800b878:	44020c00 	.word	0x44020c00
 800b87c:	03d09000 	.word	0x03d09000
 800b880:	003d0900 	.word	0x003d0900
 800b884:	007a1200 	.word	0x007a1200
 800b888:	02dc6c00 	.word	0x02dc6c00

0800b88c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800b894:	4b48      	ldr	r3, [pc, #288]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a47      	ldr	r2, [pc, #284]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b89a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b89e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b8a0:	f7f7 f814 	bl	80028cc <HAL_GetTick>
 800b8a4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b8a6:	e008      	b.n	800b8ba <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b8a8:	f7f7 f810 	bl	80028cc <HAL_GetTick>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d901      	bls.n	800b8ba <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	e07a      	b.n	800b9b0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b8ba:	4b3f      	ldr	r3, [pc, #252]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d1f0      	bne.n	800b8a8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b8c6:	4b3c      	ldr	r3, [pc, #240]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b8c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b8ce:	f023 0303 	bic.w	r3, r3, #3
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	6811      	ldr	r1, [r2, #0]
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	6852      	ldr	r2, [r2, #4]
 800b8da:	0212      	lsls	r2, r2, #8
 800b8dc:	430a      	orrs	r2, r1
 800b8de:	4936      	ldr	r1, [pc, #216]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	025b      	lsls	r3, r3, #9
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	431a      	orrs	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	691b      	ldr	r3, [r3, #16]
 800b8fe:	3b01      	subs	r3, #1
 800b900:	041b      	lsls	r3, r3, #16
 800b902:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b906:	431a      	orrs	r2, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	695b      	ldr	r3, [r3, #20]
 800b90c:	3b01      	subs	r3, #1
 800b90e:	061b      	lsls	r3, r3, #24
 800b910:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b914:	4928      	ldr	r1, [pc, #160]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b916:	4313      	orrs	r3, r2
 800b918:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b91a:	4b27      	ldr	r3, [pc, #156]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b91c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b91e:	f023 020c 	bic.w	r2, r3, #12
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	699b      	ldr	r3, [r3, #24]
 800b926:	4924      	ldr	r1, [pc, #144]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b928:	4313      	orrs	r3, r2
 800b92a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800b92c:	4b22      	ldr	r3, [pc, #136]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b92e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b930:	f023 0220 	bic.w	r2, r3, #32
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	69db      	ldr	r3, [r3, #28]
 800b938:	491f      	ldr	r1, [pc, #124]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b93a:	4313      	orrs	r3, r2
 800b93c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b93e:	4b1e      	ldr	r3, [pc, #120]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b946:	491c      	ldr	r1, [pc, #112]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b948:	4313      	orrs	r3, r2
 800b94a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800b94c:	4b1a      	ldr	r3, [pc, #104]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b94e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b950:	4a19      	ldr	r2, [pc, #100]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b952:	f023 0310 	bic.w	r3, r3, #16
 800b956:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800b958:	4b17      	ldr	r3, [pc, #92]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b95a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b95c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b960:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	6a12      	ldr	r2, [r2, #32]
 800b968:	00d2      	lsls	r2, r2, #3
 800b96a:	4913      	ldr	r1, [pc, #76]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b96c:	4313      	orrs	r3, r2
 800b96e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800b970:	4b11      	ldr	r3, [pc, #68]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b974:	4a10      	ldr	r2, [pc, #64]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b976:	f043 0310 	orr.w	r3, r3, #16
 800b97a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800b97c:	4b0e      	ldr	r3, [pc, #56]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a0d      	ldr	r2, [pc, #52]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b982:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b986:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b988:	f7f6 ffa0 	bl	80028cc <HAL_GetTick>
 800b98c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b98e:	e008      	b.n	800b9a2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b990:	f7f6 ff9c 	bl	80028cc <HAL_GetTick>
 800b994:	4602      	mov	r2, r0
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	1ad3      	subs	r3, r2, r3
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d901      	bls.n	800b9a2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800b99e:	2303      	movs	r3, #3
 800b9a0:	e006      	b.n	800b9b0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b9a2:	4b05      	ldr	r3, [pc, #20]	@ (800b9b8 <RCCEx_PLL2_Config+0x12c>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d0f0      	beq.n	800b990 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800b9ae:	2300      	movs	r3, #0

}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	44020c00 	.word	0x44020c00

0800b9bc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800b9c4:	4b48      	ldr	r3, [pc, #288]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a47      	ldr	r2, [pc, #284]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800b9ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9ce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b9d0:	f7f6 ff7c 	bl	80028cc <HAL_GetTick>
 800b9d4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b9d6:	e008      	b.n	800b9ea <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b9d8:	f7f6 ff78 	bl	80028cc <HAL_GetTick>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	d901      	bls.n	800b9ea <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	e07a      	b.n	800bae0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b9ea:	4b3f      	ldr	r3, [pc, #252]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1f0      	bne.n	800b9d8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800b9f6:	4b3c      	ldr	r3, [pc, #240]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800b9f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9fa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b9fe:	f023 0303 	bic.w	r3, r3, #3
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	6811      	ldr	r1, [r2, #0]
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	6852      	ldr	r2, [r2, #4]
 800ba0a:	0212      	lsls	r2, r2, #8
 800ba0c:	430a      	orrs	r2, r1
 800ba0e:	4936      	ldr	r1, [pc, #216]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800ba10:	4313      	orrs	r3, r2
 800ba12:	630b      	str	r3, [r1, #48]	@ 0x30
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	3b01      	subs	r3, #1
 800ba24:	025b      	lsls	r3, r3, #9
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	431a      	orrs	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	041b      	lsls	r3, r3, #16
 800ba32:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ba36:	431a      	orrs	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	695b      	ldr	r3, [r3, #20]
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	061b      	lsls	r3, r3, #24
 800ba40:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ba44:	4928      	ldr	r1, [pc, #160]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800ba46:	4313      	orrs	r3, r2
 800ba48:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ba4a:	4b27      	ldr	r3, [pc, #156]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800ba4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba4e:	f023 020c 	bic.w	r2, r3, #12
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	699b      	ldr	r3, [r3, #24]
 800ba56:	4924      	ldr	r1, [pc, #144]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800ba5c:	4b22      	ldr	r3, [pc, #136]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800ba5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba60:	f023 0220 	bic.w	r2, r3, #32
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	69db      	ldr	r3, [r3, #28]
 800ba68:	491f      	ldr	r1, [pc, #124]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ba6e:	4b1e      	ldr	r3, [pc, #120]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800ba70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba76:	491c      	ldr	r1, [pc, #112]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800ba7c:	4b1a      	ldr	r3, [pc, #104]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800ba7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba80:	4a19      	ldr	r2, [pc, #100]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800ba82:	f023 0310 	bic.w	r3, r3, #16
 800ba86:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800ba88:	4b17      	ldr	r3, [pc, #92]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800ba8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba8c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba90:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	6a12      	ldr	r2, [r2, #32]
 800ba98:	00d2      	lsls	r2, r2, #3
 800ba9a:	4913      	ldr	r1, [pc, #76]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800baa0:	4b11      	ldr	r3, [pc, #68]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800baa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baa4:	4a10      	ldr	r2, [pc, #64]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800baa6:	f043 0310 	orr.w	r3, r3, #16
 800baaa:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800baac:	4b0e      	ldr	r3, [pc, #56]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a0d      	ldr	r2, [pc, #52]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800bab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bab6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bab8:	f7f6 ff08 	bl	80028cc <HAL_GetTick>
 800babc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800babe:	e008      	b.n	800bad2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bac0:	f7f6 ff04 	bl	80028cc <HAL_GetTick>
 800bac4:	4602      	mov	r2, r0
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	1ad3      	subs	r3, r2, r3
 800baca:	2b02      	cmp	r3, #2
 800bacc:	d901      	bls.n	800bad2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800bace:	2303      	movs	r3, #3
 800bad0:	e006      	b.n	800bae0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bad2:	4b05      	ldr	r3, [pc, #20]	@ (800bae8 <RCCEx_PLL3_Config+0x12c>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bada:	2b00      	cmp	r3, #0
 800badc:	d0f0      	beq.n	800bac0 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	44020c00 	.word	0x44020c00

0800baec <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d101      	bne.n	800bafe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800bafa:	2301      	movs	r3, #1
 800bafc:	e08c      	b.n	800bc18 <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	7a5b      	ldrb	r3, [r3, #9]
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d105      	bne.n	800bb14 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7f5 ff50 	bl	80019b4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2202      	movs	r2, #2
 800bb18:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f022 0204 	bic.w	r2, r2, #4
 800bb28:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6859      	ldr	r1, [r3, #4]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	4b3b      	ldr	r3, [pc, #236]	@ (800bc20 <HAL_RNG_Init+0x134>)
 800bb34:	430b      	orrs	r3, r1
 800bb36:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800bb40:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a37      	ldr	r2, [pc, #220]	@ (800bc24 <HAL_RNG_Init+0x138>)
 800bb48:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800bb58:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bb5a:	f7f6 feb7 	bl	80028cc <HAL_GetTick>
 800bb5e:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800bb60:	e016      	b.n	800bb90 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800bb62:	f7f6 feb3 	bl	80028cc <HAL_GetTick>
 800bb66:	4602      	mov	r2, r0
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	2b04      	cmp	r3, #4
 800bb6e:	d90f      	bls.n	800bb90 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bb7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb7e:	d107      	bne.n	800bb90 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2202      	movs	r2, #2
 800bb8a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e043      	b.n	800bc18 <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bb9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb9e:	d0e0      	beq.n	800bb62 <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f042 0204 	orr.w	r2, r2, #4
 800bbae:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbba:	2b40      	cmp	r3, #64	@ 0x40
 800bbbc:	d104      	bne.n	800bbc8 <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2204      	movs	r2, #4
 800bbc2:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e027      	b.n	800bc18 <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800bbc8:	f7f6 fe80 	bl	80028cc <HAL_GetTick>
 800bbcc:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800bbce:	e015      	b.n	800bbfc <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800bbd0:	f7f6 fe7c 	bl	80028cc <HAL_GetTick>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	2b04      	cmp	r3, #4
 800bbdc:	d90e      	bls.n	800bbfc <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	f003 0301 	and.w	r3, r3, #1
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d007      	beq.n	800bbfc <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2204      	movs	r2, #4
 800bbf0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2202      	movs	r2, #2
 800bbf6:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e00d      	b.n	800bc18 <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	f003 0301 	and.w	r3, r3, #1
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d1e2      	bne.n	800bbd0 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800bc16:	2300      	movs	r3, #0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	40f00e00 	.word	0x40f00e00
 800bc24:	0003af66 	.word	0x0003af66

0800bc28 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d071      	beq.n	800bd1e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d106      	bne.n	800bc54 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7f5 ff08 	bl	8001a64 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2202      	movs	r2, #2
 800bc58:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bc5c:	4b32      	ldr	r3, [pc, #200]	@ (800bd28 <HAL_RTC_Init+0x100>)
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	f003 0310 	and.w	r3, r3, #16
 800bc64:	2b10      	cmp	r3, #16
 800bc66:	d051      	beq.n	800bd0c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bc68:	4b2f      	ldr	r3, [pc, #188]	@ (800bd28 <HAL_RTC_Init+0x100>)
 800bc6a:	22ca      	movs	r2, #202	@ 0xca
 800bc6c:	625a      	str	r2, [r3, #36]	@ 0x24
 800bc6e:	4b2e      	ldr	r3, [pc, #184]	@ (800bd28 <HAL_RTC_Init+0x100>)
 800bc70:	2253      	movs	r2, #83	@ 0x53
 800bc72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f9a3 	bl	800bfc0 <RTC_EnterInitMode>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800bc7e:	7bfb      	ldrb	r3, [r7, #15]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d13f      	bne.n	800bd04 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800bc84:	4b28      	ldr	r3, [pc, #160]	@ (800bd28 <HAL_RTC_Init+0x100>)
 800bc86:	699b      	ldr	r3, [r3, #24]
 800bc88:	4a27      	ldr	r2, [pc, #156]	@ (800bd28 <HAL_RTC_Init+0x100>)
 800bc8a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800bc8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc92:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800bc94:	4b24      	ldr	r3, [pc, #144]	@ (800bd28 <HAL_RTC_Init+0x100>)
 800bc96:	699a      	ldr	r2, [r3, #24]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6859      	ldr	r1, [r3, #4]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	4319      	orrs	r1, r3
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	699b      	ldr	r3, [r3, #24]
 800bca6:	430b      	orrs	r3, r1
 800bca8:	491f      	ldr	r1, [pc, #124]	@ (800bd28 <HAL_RTC_Init+0x100>)
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	68da      	ldr	r2, [r3, #12]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	041b      	lsls	r3, r3, #16
 800bcb8:	491b      	ldr	r1, [pc, #108]	@ (800bd28 <HAL_RTC_Init+0x100>)
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800bcbe:	4b1a      	ldr	r3, [pc, #104]	@ (800bd28 <HAL_RTC_Init+0x100>)
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcce:	430b      	orrs	r3, r1
 800bcd0:	4915      	ldr	r1, [pc, #84]	@ (800bd28 <HAL_RTC_Init+0x100>)
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f9ae 	bl	800c038 <RTC_ExitInitMode>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800bce0:	7bfb      	ldrb	r3, [r7, #15]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d10e      	bne.n	800bd04 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800bce6:	4b10      	ldr	r3, [pc, #64]	@ (800bd28 <HAL_RTC_Init+0x100>)
 800bce8:	699b      	ldr	r3, [r3, #24]
 800bcea:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6a19      	ldr	r1, [r3, #32]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	69db      	ldr	r3, [r3, #28]
 800bcf6:	4319      	orrs	r1, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	695b      	ldr	r3, [r3, #20]
 800bcfc:	430b      	orrs	r3, r1
 800bcfe:	490a      	ldr	r1, [pc, #40]	@ (800bd28 <HAL_RTC_Init+0x100>)
 800bd00:	4313      	orrs	r3, r2
 800bd02:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd04:	4b08      	ldr	r3, [pc, #32]	@ (800bd28 <HAL_RTC_Init+0x100>)
 800bd06:	22ff      	movs	r2, #255	@ 0xff
 800bd08:	625a      	str	r2, [r3, #36]	@ 0x24
 800bd0a:	e001      	b.n	800bd10 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800bd10:	7bfb      	ldrb	r3, [r7, #15]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d103      	bne.n	800bd1e <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	44007800 	.word	0x44007800

0800bd2c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bd2c:	b590      	push	{r4, r7, lr}
 800bd2e:	b087      	sub	sp, #28
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d101      	bne.n	800bd46 <HAL_RTC_SetTime+0x1a>
 800bd42:	2302      	movs	r3, #2
 800bd44:	e07e      	b.n	800be44 <HAL_RTC_SetTime+0x118>
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2202      	movs	r2, #2
 800bd52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd56:	4b3d      	ldr	r3, [pc, #244]	@ (800be4c <HAL_RTC_SetTime+0x120>)
 800bd58:	22ca      	movs	r2, #202	@ 0xca
 800bd5a:	625a      	str	r2, [r3, #36]	@ 0x24
 800bd5c:	4b3b      	ldr	r3, [pc, #236]	@ (800be4c <HAL_RTC_SetTime+0x120>)
 800bd5e:	2253      	movs	r2, #83	@ 0x53
 800bd60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f000 f92c 	bl	800bfc0 <RTC_EnterInitMode>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bd6c:	7cfb      	ldrb	r3, [r7, #19]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d159      	bne.n	800be26 <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800bd72:	4b36      	ldr	r3, [pc, #216]	@ (800be4c <HAL_RTC_SetTime+0x120>)
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd7e:	d04d      	beq.n	800be1c <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d125      	bne.n	800bdd2 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800bd86:	4b31      	ldr	r3, [pc, #196]	@ (800be4c <HAL_RTC_SetTime+0x120>)
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d102      	bne.n	800bd98 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	2200      	movs	r2, #0
 800bd96:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f000 f989 	bl	800c0b4 <RTC_ByteToBcd2>
 800bda2:	4603      	mov	r3, r0
 800bda4:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	785b      	ldrb	r3, [r3, #1]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f000 f982 	bl	800c0b4 <RTC_ByteToBcd2>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bdb4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	789b      	ldrb	r3, [r3, #2]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f000 f97a 	bl	800c0b4 <RTC_ByteToBcd2>
 800bdc0:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bdc2:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	78db      	ldrb	r3, [r3, #3]
 800bdca:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	617b      	str	r3, [r7, #20]
 800bdd0:	e017      	b.n	800be02 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800bdd2:	4b1e      	ldr	r3, [pc, #120]	@ (800be4c <HAL_RTC_SetTime+0x120>)
 800bdd4:	699b      	ldr	r3, [r3, #24]
 800bdd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d102      	bne.n	800bde4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	2200      	movs	r2, #0
 800bde2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	785b      	ldrb	r3, [r3, #1]
 800bdee:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bdf0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bdf2:	68ba      	ldr	r2, [r7, #8]
 800bdf4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bdf6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	78db      	ldrb	r3, [r3, #3]
 800bdfc:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bdfe:	4313      	orrs	r3, r2
 800be00:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800be02:	4a12      	ldr	r2, [pc, #72]	@ (800be4c <HAL_RTC_SetTime+0x120>)
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800be0a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800be0e:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800be10:	4b0e      	ldr	r3, [pc, #56]	@ (800be4c <HAL_RTC_SetTime+0x120>)
 800be12:	699b      	ldr	r3, [r3, #24]
 800be14:	4a0d      	ldr	r2, [pc, #52]	@ (800be4c <HAL_RTC_SetTime+0x120>)
 800be16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be1a:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f000 f90b 	bl	800c038 <RTC_ExitInitMode>
 800be22:	4603      	mov	r3, r0
 800be24:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be26:	4b09      	ldr	r3, [pc, #36]	@ (800be4c <HAL_RTC_SetTime+0x120>)
 800be28:	22ff      	movs	r2, #255	@ 0xff
 800be2a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800be2c:	7cfb      	ldrb	r3, [r7, #19]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d103      	bne.n	800be3a <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2201      	movs	r2, #1
 800be36:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2200      	movs	r2, #0
 800be3e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800be42:	7cfb      	ldrb	r3, [r7, #19]
}
 800be44:	4618      	mov	r0, r3
 800be46:	371c      	adds	r7, #28
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd90      	pop	{r4, r7, pc}
 800be4c:	44007800 	.word	0x44007800

0800be50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800be50:	b590      	push	{r4, r7, lr}
 800be52:	b087      	sub	sp, #28
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800be62:	2b01      	cmp	r3, #1
 800be64:	d101      	bne.n	800be6a <HAL_RTC_SetDate+0x1a>
 800be66:	2302      	movs	r3, #2
 800be68:	e071      	b.n	800bf4e <HAL_RTC_SetDate+0xfe>
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2201      	movs	r2, #1
 800be6e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2202      	movs	r2, #2
 800be76:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d10e      	bne.n	800be9e <HAL_RTC_SetDate+0x4e>
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	785b      	ldrb	r3, [r3, #1]
 800be84:	f003 0310 	and.w	r3, r3, #16
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d008      	beq.n	800be9e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	785b      	ldrb	r3, [r3, #1]
 800be90:	f023 0310 	bic.w	r3, r3, #16
 800be94:	b2db      	uxtb	r3, r3
 800be96:	330a      	adds	r3, #10
 800be98:	b2da      	uxtb	r2, r3
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d11c      	bne.n	800bede <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	78db      	ldrb	r3, [r3, #3]
 800bea8:	4618      	mov	r0, r3
 800beaa:	f000 f903 	bl	800c0b4 <RTC_ByteToBcd2>
 800beae:	4603      	mov	r3, r0
 800beb0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	785b      	ldrb	r3, [r3, #1]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f000 f8fc 	bl	800c0b4 <RTC_ByteToBcd2>
 800bebc:	4603      	mov	r3, r0
 800bebe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bec0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	789b      	ldrb	r3, [r3, #2]
 800bec6:	4618      	mov	r0, r3
 800bec8:	f000 f8f4 	bl	800c0b4 <RTC_ByteToBcd2>
 800becc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bece:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bed8:	4313      	orrs	r3, r2
 800beda:	617b      	str	r3, [r7, #20]
 800bedc:	e00e      	b.n	800befc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	78db      	ldrb	r3, [r3, #3]
 800bee2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	785b      	ldrb	r3, [r3, #1]
 800bee8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800beea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800beec:	68ba      	ldr	r2, [r7, #8]
 800beee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800bef0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bef8:	4313      	orrs	r3, r2
 800befa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800befc:	4b16      	ldr	r3, [pc, #88]	@ (800bf58 <HAL_RTC_SetDate+0x108>)
 800befe:	22ca      	movs	r2, #202	@ 0xca
 800bf00:	625a      	str	r2, [r3, #36]	@ 0x24
 800bf02:	4b15      	ldr	r3, [pc, #84]	@ (800bf58 <HAL_RTC_SetDate+0x108>)
 800bf04:	2253      	movs	r2, #83	@ 0x53
 800bf06:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bf08:	68f8      	ldr	r0, [r7, #12]
 800bf0a:	f000 f859 	bl	800bfc0 <RTC_EnterInitMode>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bf12:	7cfb      	ldrb	r3, [r7, #19]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10b      	bne.n	800bf30 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800bf18:	4a0f      	ldr	r2, [pc, #60]	@ (800bf58 <HAL_RTC_SetDate+0x108>)
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bf20:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bf24:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f000 f886 	bl	800c038 <RTC_ExitInitMode>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf30:	4b09      	ldr	r3, [pc, #36]	@ (800bf58 <HAL_RTC_SetDate+0x108>)
 800bf32:	22ff      	movs	r2, #255	@ 0xff
 800bf34:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800bf36:	7cfb      	ldrb	r3, [r7, #19]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d103      	bne.n	800bf44 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800bf4c:	7cfb      	ldrb	r3, [r7, #19]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	371c      	adds	r7, #28
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd90      	pop	{r4, r7, pc}
 800bf56:	bf00      	nop
 800bf58:	44007800 	.word	0x44007800

0800bf5c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800bf64:	4b15      	ldr	r3, [pc, #84]	@ (800bfbc <HAL_RTC_WaitForSynchro+0x60>)
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	4a14      	ldr	r2, [pc, #80]	@ (800bfbc <HAL_RTC_WaitForSynchro+0x60>)
 800bf6a:	f023 0320 	bic.w	r3, r3, #32
 800bf6e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800bf70:	f7f6 fcac 	bl	80028cc <HAL_GetTick>
 800bf74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800bf76:	e013      	b.n	800bfa0 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bf78:	f7f6 fca8 	bl	80028cc <HAL_GetTick>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf86:	d90b      	bls.n	800bfa0 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800bf88:	4b0c      	ldr	r3, [pc, #48]	@ (800bfbc <HAL_RTC_WaitForSynchro+0x60>)
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	f003 0320 	and.w	r3, r3, #32
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10c      	bne.n	800bfae <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2203      	movs	r2, #3
 800bf98:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	e008      	b.n	800bfb2 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800bfa0:	4b06      	ldr	r3, [pc, #24]	@ (800bfbc <HAL_RTC_WaitForSynchro+0x60>)
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	f003 0320 	and.w	r3, r3, #32
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d0e5      	beq.n	800bf78 <HAL_RTC_WaitForSynchro+0x1c>
 800bfac:	e000      	b.n	800bfb0 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800bfae:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800bfb0:	2300      	movs	r3, #0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	44007800 	.word	0x44007800

0800bfc0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800bfcc:	4b19      	ldr	r3, [pc, #100]	@ (800c034 <RTC_EnterInitMode+0x74>)
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d128      	bne.n	800c02a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800bfd8:	4b16      	ldr	r3, [pc, #88]	@ (800c034 <RTC_EnterInitMode+0x74>)
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	4a15      	ldr	r2, [pc, #84]	@ (800c034 <RTC_EnterInitMode+0x74>)
 800bfde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfe2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800bfe4:	f7f6 fc72 	bl	80028cc <HAL_GetTick>
 800bfe8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bfea:	e013      	b.n	800c014 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bfec:	f7f6 fc6e 	bl	80028cc <HAL_GetTick>
 800bff0:	4602      	mov	r2, r0
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bffa:	d90b      	bls.n	800c014 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800bffc:	4b0d      	ldr	r3, [pc, #52]	@ (800c034 <RTC_EnterInitMode+0x74>)
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10f      	bne.n	800c028 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800c008:	2303      	movs	r3, #3
 800c00a:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2203      	movs	r2, #3
 800c010:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c014:	4b07      	ldr	r3, [pc, #28]	@ (800c034 <RTC_EnterInitMode+0x74>)
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d104      	bne.n	800c02a <RTC_EnterInitMode+0x6a>
 800c020:	7bfb      	ldrb	r3, [r7, #15]
 800c022:	2b03      	cmp	r3, #3
 800c024:	d1e2      	bne.n	800bfec <RTC_EnterInitMode+0x2c>
 800c026:	e000      	b.n	800c02a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800c028:	bf00      	nop
        }
      }
    }
  }

  return status;
 800c02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	44007800 	.word	0x44007800

0800c038 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c040:	2300      	movs	r3, #0
 800c042:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c044:	4b1a      	ldr	r3, [pc, #104]	@ (800c0b0 <RTC_ExitInitMode+0x78>)
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	4a19      	ldr	r2, [pc, #100]	@ (800c0b0 <RTC_ExitInitMode+0x78>)
 800c04a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c04e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c050:	4b17      	ldr	r3, [pc, #92]	@ (800c0b0 <RTC_ExitInitMode+0x78>)
 800c052:	699b      	ldr	r3, [r3, #24]
 800c054:	f003 0320 	and.w	r3, r3, #32
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d10c      	bne.n	800c076 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f7ff ff7d 	bl	800bf5c <HAL_RTC_WaitForSynchro>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d01e      	beq.n	800c0a6 <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2203      	movs	r2, #3
 800c06c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800c070:	2303      	movs	r3, #3
 800c072:	73fb      	strb	r3, [r7, #15]
 800c074:	e017      	b.n	800c0a6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c076:	4b0e      	ldr	r3, [pc, #56]	@ (800c0b0 <RTC_ExitInitMode+0x78>)
 800c078:	699b      	ldr	r3, [r3, #24]
 800c07a:	4a0d      	ldr	r2, [pc, #52]	@ (800c0b0 <RTC_ExitInitMode+0x78>)
 800c07c:	f023 0320 	bic.w	r3, r3, #32
 800c080:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f7ff ff6a 	bl	800bf5c <HAL_RTC_WaitForSynchro>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d005      	beq.n	800c09a <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2203      	movs	r2, #3
 800c092:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800c096:	2303      	movs	r3, #3
 800c098:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c09a:	4b05      	ldr	r3, [pc, #20]	@ (800c0b0 <RTC_ExitInitMode+0x78>)
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	4a04      	ldr	r2, [pc, #16]	@ (800c0b0 <RTC_ExitInitMode+0x78>)
 800c0a0:	f043 0320 	orr.w	r3, r3, #32
 800c0a4:	6193      	str	r3, [r2, #24]
  }
  return status;
 800c0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	44007800 	.word	0x44007800

0800c0b4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800c0c2:	79fb      	ldrb	r3, [r7, #7]
 800c0c4:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800c0c6:	e005      	b.n	800c0d4 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800c0ce:	7afb      	ldrb	r3, [r7, #11]
 800c0d0:	3b0a      	subs	r3, #10
 800c0d2:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800c0d4:	7afb      	ldrb	r3, [r7, #11]
 800c0d6:	2b09      	cmp	r3, #9
 800c0d8:	d8f6      	bhi.n	800c0c8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	011b      	lsls	r3, r3, #4
 800c0e0:	b2da      	uxtb	r2, r3
 800c0e2:	7afb      	ldrb	r3, [r7, #11]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	b2db      	uxtb	r3, r3
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3714      	adds	r7, #20
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	4910      	ldr	r1, [pc, #64]	@ (800c148 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800c108:	4313      	orrs	r3, r2
 800c10a:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	689a      	ldr	r2, [r3, #8]
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	431a      	orrs	r2, r3
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	699b      	ldr	r3, [r3, #24]
 800c11a:	490c      	ldr	r1, [pc, #48]	@ (800c14c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c11c:	4313      	orrs	r3, r2
 800c11e:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800c120:	4b0a      	ldr	r3, [pc, #40]	@ (800c14c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c122:	6a1b      	ldr	r3, [r3, #32]
 800c124:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	6919      	ldr	r1, [r3, #16]
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	695b      	ldr	r3, [r3, #20]
 800c130:	041b      	lsls	r3, r3, #16
 800c132:	430b      	orrs	r3, r1
 800c134:	4905      	ldr	r1, [pc, #20]	@ (800c14c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c136:	4313      	orrs	r3, r2
 800c138:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800c13a:	2300      	movs	r3, #0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	44007800 	.word	0x44007800
 800c14c:	44007c00 	.word	0x44007c00

0800c150 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	e162      	b.n	800c428 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a70      	ldr	r2, [pc, #448]	@ (800c328 <HAL_SPI_Init+0x1d8>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d018      	beq.n	800c19e <HAL_SPI_Init+0x4e>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a6e      	ldr	r2, [pc, #440]	@ (800c32c <HAL_SPI_Init+0x1dc>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d013      	beq.n	800c19e <HAL_SPI_Init+0x4e>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a6d      	ldr	r2, [pc, #436]	@ (800c330 <HAL_SPI_Init+0x1e0>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d00e      	beq.n	800c19e <HAL_SPI_Init+0x4e>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a6b      	ldr	r2, [pc, #428]	@ (800c334 <HAL_SPI_Init+0x1e4>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d009      	beq.n	800c19e <HAL_SPI_Init+0x4e>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4a6a      	ldr	r2, [pc, #424]	@ (800c338 <HAL_SPI_Init+0x1e8>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d004      	beq.n	800c19e <HAL_SPI_Init+0x4e>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a68      	ldr	r2, [pc, #416]	@ (800c33c <HAL_SPI_Init+0x1ec>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	e000      	b.n	800c1a0 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800c19e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a5f      	ldr	r2, [pc, #380]	@ (800c328 <HAL_SPI_Init+0x1d8>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d018      	beq.n	800c1e2 <HAL_SPI_Init+0x92>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a5d      	ldr	r2, [pc, #372]	@ (800c32c <HAL_SPI_Init+0x1dc>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d013      	beq.n	800c1e2 <HAL_SPI_Init+0x92>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a5c      	ldr	r2, [pc, #368]	@ (800c330 <HAL_SPI_Init+0x1e0>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d00e      	beq.n	800c1e2 <HAL_SPI_Init+0x92>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a5a      	ldr	r2, [pc, #360]	@ (800c334 <HAL_SPI_Init+0x1e4>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d009      	beq.n	800c1e2 <HAL_SPI_Init+0x92>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a59      	ldr	r2, [pc, #356]	@ (800c338 <HAL_SPI_Init+0x1e8>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d004      	beq.n	800c1e2 <HAL_SPI_Init+0x92>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a57      	ldr	r2, [pc, #348]	@ (800c33c <HAL_SPI_Init+0x1ec>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d105      	bne.n	800c1ee <HAL_SPI_Init+0x9e>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	2b0f      	cmp	r3, #15
 800c1e8:	d901      	bls.n	800c1ee <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e11c      	b.n	800c428 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 fee2 	bl	800cfb8 <SPI_GetPacketSize>
 800c1f4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a4b      	ldr	r2, [pc, #300]	@ (800c328 <HAL_SPI_Init+0x1d8>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d018      	beq.n	800c232 <HAL_SPI_Init+0xe2>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a49      	ldr	r2, [pc, #292]	@ (800c32c <HAL_SPI_Init+0x1dc>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d013      	beq.n	800c232 <HAL_SPI_Init+0xe2>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a48      	ldr	r2, [pc, #288]	@ (800c330 <HAL_SPI_Init+0x1e0>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d00e      	beq.n	800c232 <HAL_SPI_Init+0xe2>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a46      	ldr	r2, [pc, #280]	@ (800c334 <HAL_SPI_Init+0x1e4>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d009      	beq.n	800c232 <HAL_SPI_Init+0xe2>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4a45      	ldr	r2, [pc, #276]	@ (800c338 <HAL_SPI_Init+0x1e8>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d004      	beq.n	800c232 <HAL_SPI_Init+0xe2>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a43      	ldr	r2, [pc, #268]	@ (800c33c <HAL_SPI_Init+0x1ec>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d102      	bne.n	800c238 <HAL_SPI_Init+0xe8>
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2b08      	cmp	r3, #8
 800c236:	d820      	bhi.n	800c27a <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c23c:	4a40      	ldr	r2, [pc, #256]	@ (800c340 <HAL_SPI_Init+0x1f0>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d018      	beq.n	800c274 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a3f      	ldr	r2, [pc, #252]	@ (800c344 <HAL_SPI_Init+0x1f4>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d013      	beq.n	800c274 <HAL_SPI_Init+0x124>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a3d      	ldr	r2, [pc, #244]	@ (800c348 <HAL_SPI_Init+0x1f8>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d00e      	beq.n	800c274 <HAL_SPI_Init+0x124>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a3c      	ldr	r2, [pc, #240]	@ (800c34c <HAL_SPI_Init+0x1fc>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d009      	beq.n	800c274 <HAL_SPI_Init+0x124>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a3a      	ldr	r2, [pc, #232]	@ (800c350 <HAL_SPI_Init+0x200>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d004      	beq.n	800c274 <HAL_SPI_Init+0x124>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a39      	ldr	r2, [pc, #228]	@ (800c354 <HAL_SPI_Init+0x204>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d104      	bne.n	800c27e <HAL_SPI_Init+0x12e>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2b10      	cmp	r3, #16
 800c278:	d901      	bls.n	800c27e <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800c27a:	2301      	movs	r3, #1
 800c27c:	e0d4      	b.n	800c428 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c284:	b2db      	uxtb	r3, r3
 800c286:	2b00      	cmp	r3, #0
 800c288:	d106      	bne.n	800c298 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2200      	movs	r2, #0
 800c28e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f7f5 fc46 	bl	8001b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2202      	movs	r2, #2
 800c29c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f022 0201 	bic.w	r2, r2, #1
 800c2ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c2ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c2c4:	d119      	bne.n	800c2fa <HAL_SPI_Init+0x1aa>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c2ce:	d103      	bne.n	800c2d8 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d008      	beq.n	800c2ea <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10c      	bne.n	800c2fa <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c2e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2e8:	d107      	bne.n	800c2fa <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c2f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c302:	2b00      	cmp	r3, #0
 800c304:	d028      	beq.n	800c358 <HAL_SPI_Init+0x208>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	68db      	ldr	r3, [r3, #12]
 800c30a:	2b06      	cmp	r3, #6
 800c30c:	d924      	bls.n	800c358 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	430a      	orrs	r2, r1
 800c322:	601a      	str	r2, [r3, #0]
 800c324:	e020      	b.n	800c368 <HAL_SPI_Init+0x218>
 800c326:	bf00      	nop
 800c328:	40014c00 	.word	0x40014c00
 800c32c:	50014c00 	.word	0x50014c00
 800c330:	44002000 	.word	0x44002000
 800c334:	54002000 	.word	0x54002000
 800c338:	40015000 	.word	0x40015000
 800c33c:	50015000 	.word	0x50015000
 800c340:	40013000 	.word	0x40013000
 800c344:	50013000 	.word	0x50013000
 800c348:	40003800 	.word	0x40003800
 800c34c:	50003800 	.word	0x50003800
 800c350:	40003c00 	.word	0x40003c00
 800c354:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c366:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	69da      	ldr	r2, [r3, #28]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c370:	431a      	orrs	r2, r3
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	431a      	orrs	r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c37a:	ea42 0103 	orr.w	r1, r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	68da      	ldr	r2, [r3, #12]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	430a      	orrs	r2, r1
 800c388:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c392:	431a      	orrs	r2, r3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c398:	431a      	orrs	r2, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	699b      	ldr	r3, [r3, #24]
 800c39e:	431a      	orrs	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	431a      	orrs	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	695b      	ldr	r3, [r3, #20]
 800c3aa:	431a      	orrs	r2, r3
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6a1b      	ldr	r3, [r3, #32]
 800c3b0:	431a      	orrs	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	431a      	orrs	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c3bc:	431a      	orrs	r2, r3
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	431a      	orrs	r2, r3
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c3c8:	431a      	orrs	r2, r3
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3ce:	431a      	orrs	r2, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3d4:	ea42 0103 	orr.w	r1, r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	430a      	orrs	r2, r1
 800c3e2:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f022 0201 	bic.w	r2, r2, #1
 800c3f2:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00a      	beq.n	800c416 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	430a      	orrs	r2, r1
 800c414:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3710      	adds	r7, #16
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b088      	sub	sp, #32
 800c434:	af02      	add	r7, sp, #8
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	603b      	str	r3, [r7, #0]
 800c43c:	4613      	mov	r3, r2
 800c43e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	3320      	adds	r3, #32
 800c446:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a92      	ldr	r2, [pc, #584]	@ (800c698 <HAL_SPI_Transmit+0x268>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d012      	beq.n	800c478 <HAL_SPI_Transmit+0x48>
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a91      	ldr	r2, [pc, #580]	@ (800c69c <HAL_SPI_Transmit+0x26c>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d00d      	beq.n	800c478 <HAL_SPI_Transmit+0x48>
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a8f      	ldr	r2, [pc, #572]	@ (800c6a0 <HAL_SPI_Transmit+0x270>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d008      	beq.n	800c478 <HAL_SPI_Transmit+0x48>
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a8e      	ldr	r2, [pc, #568]	@ (800c6a4 <HAL_SPI_Transmit+0x274>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d003      	beq.n	800c478 <HAL_SPI_Transmit+0x48>
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a8c      	ldr	r2, [pc, #560]	@ (800c6a8 <HAL_SPI_Transmit+0x278>)
 800c476:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c478:	f7f6 fa28 	bl	80028cc <HAL_GetTick>
 800c47c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c484:	b2db      	uxtb	r3, r3
 800c486:	2b01      	cmp	r3, #1
 800c488:	d001      	beq.n	800c48e <HAL_SPI_Transmit+0x5e>
  {
    return HAL_BUSY;
 800c48a:	2302      	movs	r3, #2
 800c48c:	e204      	b.n	800c898 <HAL_SPI_Transmit+0x468>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d002      	beq.n	800c49a <HAL_SPI_Transmit+0x6a>
 800c494:	88fb      	ldrh	r3, [r7, #6]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d101      	bne.n	800c49e <HAL_SPI_Transmit+0x6e>
  {
    return HAL_ERROR;
 800c49a:	2301      	movs	r3, #1
 800c49c:	e1fc      	b.n	800c898 <HAL_SPI_Transmit+0x468>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d101      	bne.n	800c4ac <HAL_SPI_Transmit+0x7c>
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	e1f5      	b.n	800c898 <HAL_SPI_Transmit+0x468>
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2203      	movs	r2, #3
 800c4b8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	68ba      	ldr	r2, [r7, #8]
 800c4c8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	88fa      	ldrh	r2, [r7, #6]
 800c4ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	88fa      	ldrh	r2, [r7, #6]
 800c4d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c504:	d108      	bne.n	800c518 <HAL_SPI_Transmit+0xe8>
  {
    SPI_1LINE_TX(hspi);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c514:	601a      	str	r2, [r3, #0]
 800c516:	e009      	b.n	800c52c <HAL_SPI_Transmit+0xfc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c52a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	0c1b      	lsrs	r3, r3, #16
 800c534:	041b      	lsls	r3, r3, #16
 800c536:	88f9      	ldrh	r1, [r7, #6]
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	6812      	ldr	r2, [r2, #0]
 800c53c:	430b      	orrs	r3, r1
 800c53e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f042 0201 	orr.w	r2, r2, #1
 800c54e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c558:	d107      	bne.n	800c56a <HAL_SPI_Transmit+0x13a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c568:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	2b0f      	cmp	r3, #15
 800c570:	d965      	bls.n	800c63e <HAL_SPI_Transmit+0x20e>
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a4d      	ldr	r2, [pc, #308]	@ (800c6ac <HAL_SPI_Transmit+0x27c>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d059      	beq.n	800c630 <HAL_SPI_Transmit+0x200>
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a4b      	ldr	r2, [pc, #300]	@ (800c6b0 <HAL_SPI_Transmit+0x280>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d054      	beq.n	800c630 <HAL_SPI_Transmit+0x200>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a4a      	ldr	r2, [pc, #296]	@ (800c6b4 <HAL_SPI_Transmit+0x284>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d04f      	beq.n	800c630 <HAL_SPI_Transmit+0x200>
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a48      	ldr	r2, [pc, #288]	@ (800c6b8 <HAL_SPI_Transmit+0x288>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d04a      	beq.n	800c630 <HAL_SPI_Transmit+0x200>
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a47      	ldr	r2, [pc, #284]	@ (800c6bc <HAL_SPI_Transmit+0x28c>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d045      	beq.n	800c630 <HAL_SPI_Transmit+0x200>
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a45      	ldr	r2, [pc, #276]	@ (800c6c0 <HAL_SPI_Transmit+0x290>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d147      	bne.n	800c63e <HAL_SPI_Transmit+0x20e>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c5ae:	e03f      	b.n	800c630 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	695b      	ldr	r3, [r3, #20]
 800c5b6:	f003 0302 	and.w	r3, r3, #2
 800c5ba:	2b02      	cmp	r3, #2
 800c5bc:	d114      	bne.n	800c5e8 <HAL_SPI_Transmit+0x1b8>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	6812      	ldr	r2, [r2, #0]
 800c5c8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5ce:	1d1a      	adds	r2, r3, #4
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c5e6:	e023      	b.n	800c630 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5e8:	f7f6 f970 	bl	80028cc <HAL_GetTick>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	683a      	ldr	r2, [r7, #0]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d803      	bhi.n	800c600 <HAL_SPI_Transmit+0x1d0>
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5fe:	d102      	bne.n	800c606 <HAL_SPI_Transmit+0x1d6>
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d114      	bne.n	800c630 <HAL_SPI_Transmit+0x200>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	f000 fc08 	bl	800ce1c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c612:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2201      	movs	r2, #1
 800c620:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2200      	movs	r2, #0
 800c628:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c62c:	2303      	movs	r3, #3
 800c62e:	e133      	b.n	800c898 <HAL_SPI_Transmit+0x468>
    while (hspi->TxXferCount > 0UL)
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c636:	b29b      	uxth	r3, r3
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1b9      	bne.n	800c5b0 <HAL_SPI_Transmit+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c63c:	e106      	b.n	800c84c <HAL_SPI_Transmit+0x41c>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	2b07      	cmp	r3, #7
 800c644:	f240 80fb 	bls.w	800c83e <HAL_SPI_Transmit+0x40e>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c648:	e074      	b.n	800c734 <HAL_SPI_Transmit+0x304>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	695b      	ldr	r3, [r3, #20]
 800c650:	f003 0302 	and.w	r3, r3, #2
 800c654:	2b02      	cmp	r3, #2
 800c656:	d149      	bne.n	800c6ec <HAL_SPI_Transmit+0x2bc>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c65e:	b29b      	uxth	r3, r3
 800c660:	2b01      	cmp	r3, #1
 800c662:	d92f      	bls.n	800c6c4 <HAL_SPI_Transmit+0x294>
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d02b      	beq.n	800c6c4 <HAL_SPI_Transmit+0x294>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6812      	ldr	r2, [r2, #0]
 800c676:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c67c:	1d1a      	adds	r2, r3, #4
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c688:	b29b      	uxth	r3, r3
 800c68a:	3b02      	subs	r3, #2
 800c68c:	b29a      	uxth	r2, r3
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c694:	e04e      	b.n	800c734 <HAL_SPI_Transmit+0x304>
 800c696:	bf00      	nop
 800c698:	40014c00 	.word	0x40014c00
 800c69c:	50014c00 	.word	0x50014c00
 800c6a0:	44002000 	.word	0x44002000
 800c6a4:	54002000 	.word	0x54002000
 800c6a8:	40015000 	.word	0x40015000
 800c6ac:	40013000 	.word	0x40013000
 800c6b0:	50013000 	.word	0x50013000
 800c6b4:	40003800 	.word	0x40003800
 800c6b8:	50003800 	.word	0x50003800
 800c6bc:	40003c00 	.word	0x40003c00
 800c6c0:	50003c00 	.word	0x50003c00
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6c8:	881a      	ldrh	r2, [r3, #0]
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6d2:	1c9a      	adds	r2, r3, #2
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c6ea:	e023      	b.n	800c734 <HAL_SPI_Transmit+0x304>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c6ec:	f7f6 f8ee 	bl	80028cc <HAL_GetTick>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	1ad3      	subs	r3, r2, r3
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d803      	bhi.n	800c704 <HAL_SPI_Transmit+0x2d4>
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c702:	d102      	bne.n	800c70a <HAL_SPI_Transmit+0x2da>
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d114      	bne.n	800c734 <HAL_SPI_Transmit+0x304>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f000 fb86 	bl	800ce1c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c716:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2201      	movs	r2, #1
 800c724:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c730:	2303      	movs	r3, #3
 800c732:	e0b1      	b.n	800c898 <HAL_SPI_Transmit+0x468>
    while (hspi->TxXferCount > 0UL)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d184      	bne.n	800c64a <HAL_SPI_Transmit+0x21a>
 800c740:	e084      	b.n	800c84c <HAL_SPI_Transmit+0x41c>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	695b      	ldr	r3, [r3, #20]
 800c748:	f003 0302 	and.w	r3, r3, #2
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d152      	bne.n	800c7f6 <HAL_SPI_Transmit+0x3c6>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c756:	b29b      	uxth	r3, r3
 800c758:	2b03      	cmp	r3, #3
 800c75a:	d918      	bls.n	800c78e <HAL_SPI_Transmit+0x35e>
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c760:	2b40      	cmp	r3, #64	@ 0x40
 800c762:	d914      	bls.n	800c78e <HAL_SPI_Transmit+0x35e>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	6812      	ldr	r2, [r2, #0]
 800c76e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c774:	1d1a      	adds	r2, r3, #4
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c780:	b29b      	uxth	r3, r3
 800c782:	3b04      	subs	r3, #4
 800c784:	b29a      	uxth	r2, r3
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c78c:	e057      	b.n	800c83e <HAL_SPI_Transmit+0x40e>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c794:	b29b      	uxth	r3, r3
 800c796:	2b01      	cmp	r3, #1
 800c798:	d917      	bls.n	800c7ca <HAL_SPI_Transmit+0x39a>
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d013      	beq.n	800c7ca <HAL_SPI_Transmit+0x39a>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7a6:	881a      	ldrh	r2, [r3, #0]
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7b0:	1c9a      	adds	r2, r3, #2
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	3b02      	subs	r3, #2
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c7c8:	e039      	b.n	800c83e <HAL_SPI_Transmit+0x40e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	3320      	adds	r3, #32
 800c7d4:	7812      	ldrb	r2, [r2, #0]
 800c7d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7dc:	1c5a      	adds	r2, r3, #1
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	3b01      	subs	r3, #1
 800c7ec:	b29a      	uxth	r2, r3
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c7f4:	e023      	b.n	800c83e <HAL_SPI_Transmit+0x40e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c7f6:	f7f6 f869 	bl	80028cc <HAL_GetTick>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	683a      	ldr	r2, [r7, #0]
 800c802:	429a      	cmp	r2, r3
 800c804:	d803      	bhi.n	800c80e <HAL_SPI_Transmit+0x3de>
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c80c:	d102      	bne.n	800c814 <HAL_SPI_Transmit+0x3e4>
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d114      	bne.n	800c83e <HAL_SPI_Transmit+0x40e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f000 fb01 	bl	800ce1c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c820:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2201      	movs	r2, #1
 800c82e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2200      	movs	r2, #0
 800c836:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c83a:	2303      	movs	r3, #3
 800c83c:	e02c      	b.n	800c898 <HAL_SPI_Transmit+0x468>
    while (hspi->TxXferCount > 0UL)
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c844:	b29b      	uxth	r3, r3
 800c846:	2b00      	cmp	r3, #0
 800c848:	f47f af7b 	bne.w	800c742 <HAL_SPI_Transmit+0x312>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	9300      	str	r3, [sp, #0]
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	2200      	movs	r2, #0
 800c854:	2108      	movs	r1, #8
 800c856:	68f8      	ldr	r0, [r7, #12]
 800c858:	f000 fb80 	bl	800cf5c <SPI_WaitOnFlagUntilTimeout>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d007      	beq.n	800c872 <HAL_SPI_Transmit+0x442>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c868:	f043 0220 	orr.w	r2, r3, #32
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c872:	68f8      	ldr	r0, [r7, #12]
 800c874:	f000 fad2 	bl	800ce1c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2201      	movs	r2, #1
 800c87c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2200      	movs	r2, #0
 800c884:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d001      	beq.n	800c896 <HAL_SPI_Transmit+0x466>
  {
    return HAL_ERROR;
 800c892:	2301      	movs	r3, #1
 800c894:	e000      	b.n	800c898 <HAL_SPI_Transmit+0x468>
  }
  else
  {
    return HAL_OK;
 800c896:	2300      	movs	r3, #0
  }
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b088      	sub	sp, #32
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	603b      	str	r3, [r7, #0]
 800c8ac:	4613      	mov	r3, r2
 800c8ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8b4:	095b      	lsrs	r3, r3, #5
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	3330      	adds	r3, #48	@ 0x30
 800c8c2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a92      	ldr	r2, [pc, #584]	@ (800cb14 <HAL_SPI_Receive+0x274>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d012      	beq.n	800c8f4 <HAL_SPI_Receive+0x54>
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a91      	ldr	r2, [pc, #580]	@ (800cb18 <HAL_SPI_Receive+0x278>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d00d      	beq.n	800c8f4 <HAL_SPI_Receive+0x54>
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a8f      	ldr	r2, [pc, #572]	@ (800cb1c <HAL_SPI_Receive+0x27c>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d008      	beq.n	800c8f4 <HAL_SPI_Receive+0x54>
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a8e      	ldr	r2, [pc, #568]	@ (800cb20 <HAL_SPI_Receive+0x280>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d003      	beq.n	800c8f4 <HAL_SPI_Receive+0x54>
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a8c      	ldr	r2, [pc, #560]	@ (800cb24 <HAL_SPI_Receive+0x284>)
 800c8f2:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c8f4:	f7f5 ffea 	bl	80028cc <HAL_GetTick>
 800c8f8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c900:	b2db      	uxtb	r3, r3
 800c902:	2b01      	cmp	r3, #1
 800c904:	d001      	beq.n	800c90a <HAL_SPI_Receive+0x6a>
  {
    return HAL_BUSY;
 800c906:	2302      	movs	r3, #2
 800c908:	e284      	b.n	800ce14 <HAL_SPI_Receive+0x574>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d002      	beq.n	800c916 <HAL_SPI_Receive+0x76>
 800c910:	88fb      	ldrh	r3, [r7, #6]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d101      	bne.n	800c91a <HAL_SPI_Receive+0x7a>
  {
    return HAL_ERROR;
 800c916:	2301      	movs	r3, #1
 800c918:	e27c      	b.n	800ce14 <HAL_SPI_Receive+0x574>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c920:	2b01      	cmp	r3, #1
 800c922:	d101      	bne.n	800c928 <HAL_SPI_Receive+0x88>
 800c924:	2302      	movs	r3, #2
 800c926:	e275      	b.n	800ce14 <HAL_SPI_Receive+0x574>
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2204      	movs	r2, #4
 800c934:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2200      	movs	r2, #0
 800c93c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	68ba      	ldr	r2, [r7, #8]
 800c944:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	88fa      	ldrh	r2, [r7, #6]
 800c94a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	88fa      	ldrh	r2, [r7, #6]
 800c952:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2200      	movs	r2, #0
 800c95a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2200      	movs	r2, #0
 800c960:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2200      	movs	r2, #0
 800c968:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2200      	movs	r2, #0
 800c970:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2200      	movs	r2, #0
 800c976:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c980:	d108      	bne.n	800c994 <HAL_SPI_Receive+0xf4>
  {
    SPI_1LINE_RX(hspi);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c990:	601a      	str	r2, [r3, #0]
 800c992:	e009      	b.n	800c9a8 <HAL_SPI_Receive+0x108>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c9a6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	0c1b      	lsrs	r3, r3, #16
 800c9b0:	041b      	lsls	r3, r3, #16
 800c9b2:	88f9      	ldrh	r1, [r7, #6]
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	6812      	ldr	r2, [r2, #0]
 800c9b8:	430b      	orrs	r3, r1
 800c9ba:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f042 0201 	orr.w	r2, r2, #1
 800c9ca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c9d4:	d107      	bne.n	800c9e6 <HAL_SPI_Receive+0x146>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c9e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	68db      	ldr	r3, [r3, #12]
 800c9ea:	2b0f      	cmp	r3, #15
 800c9ec:	f240 808b 	bls.w	800cb06 <HAL_SPI_Receive+0x266>
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a4c      	ldr	r2, [pc, #304]	@ (800cb28 <HAL_SPI_Receive+0x288>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d07e      	beq.n	800caf8 <HAL_SPI_Receive+0x258>
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a4b      	ldr	r2, [pc, #300]	@ (800cb2c <HAL_SPI_Receive+0x28c>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d079      	beq.n	800caf8 <HAL_SPI_Receive+0x258>
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a49      	ldr	r2, [pc, #292]	@ (800cb30 <HAL_SPI_Receive+0x290>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d074      	beq.n	800caf8 <HAL_SPI_Receive+0x258>
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a48      	ldr	r2, [pc, #288]	@ (800cb34 <HAL_SPI_Receive+0x294>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d06f      	beq.n	800caf8 <HAL_SPI_Receive+0x258>
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a46      	ldr	r2, [pc, #280]	@ (800cb38 <HAL_SPI_Receive+0x298>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d06a      	beq.n	800caf8 <HAL_SPI_Receive+0x258>
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a45      	ldr	r2, [pc, #276]	@ (800cb3c <HAL_SPI_Receive+0x29c>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d16c      	bne.n	800cb06 <HAL_SPI_Receive+0x266>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ca2c:	e064      	b.n	800caf8 <HAL_SPI_Receive+0x258>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	695b      	ldr	r3, [r3, #20]
 800ca34:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	695b      	ldr	r3, [r3, #20]
 800ca3c:	f003 0301 	and.w	r3, r3, #1
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d114      	bne.n	800ca6e <HAL_SPI_Receive+0x1ce>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ca4e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca54:	1d1a      	adds	r2, r3, #4
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	3b01      	subs	r3, #1
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800ca6c:	e044      	b.n	800caf8 <HAL_SPI_Receive+0x258>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	8bfa      	ldrh	r2, [r7, #30]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d919      	bls.n	800cab0 <HAL_SPI_Receive+0x210>
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d014      	beq.n	800cab0 <HAL_SPI_Receive+0x210>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca8e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ca90:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca96:	1d1a      	adds	r2, r3, #4
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	3b01      	subs	r3, #1
 800caa6:	b29a      	uxth	r2, r3
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800caae:	e023      	b.n	800caf8 <HAL_SPI_Receive+0x258>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cab0:	f7f5 ff0c 	bl	80028cc <HAL_GetTick>
 800cab4:	4602      	mov	r2, r0
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	1ad3      	subs	r3, r2, r3
 800caba:	683a      	ldr	r2, [r7, #0]
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d803      	bhi.n	800cac8 <HAL_SPI_Receive+0x228>
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac6:	d102      	bne.n	800cace <HAL_SPI_Receive+0x22e>
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d114      	bne.n	800caf8 <HAL_SPI_Receive+0x258>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f000 f9a4 	bl	800ce1c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cada:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2201      	movs	r2, #1
 800cae8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2200      	movs	r2, #0
 800caf0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800caf4:	2303      	movs	r3, #3
 800caf6:	e18d      	b.n	800ce14 <HAL_SPI_Receive+0x574>
    while (hspi->RxXferCount > 0UL)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d194      	bne.n	800ca2e <HAL_SPI_Receive+0x18e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800cb04:	e173      	b.n	800cdee <HAL_SPI_Receive+0x54e>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	2b07      	cmp	r3, #7
 800cb0c:	f240 8168 	bls.w	800cde0 <HAL_SPI_Receive+0x540>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cb10:	e0a6      	b.n	800cc60 <HAL_SPI_Receive+0x3c0>
 800cb12:	bf00      	nop
 800cb14:	40014c00 	.word	0x40014c00
 800cb18:	50014c00 	.word	0x50014c00
 800cb1c:	44002000 	.word	0x44002000
 800cb20:	54002000 	.word	0x54002000
 800cb24:	40015000 	.word	0x40015000
 800cb28:	40013000 	.word	0x40013000
 800cb2c:	50013000 	.word	0x50013000
 800cb30:	40003800 	.word	0x40003800
 800cb34:	50003800 	.word	0x50003800
 800cb38:	40003c00 	.word	0x40003c00
 800cb3c:	50003c00 	.word	0x50003c00
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	695b      	ldr	r3, [r3, #20]
 800cb46:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	695b      	ldr	r3, [r3, #20]
 800cb4e:	f003 0301 	and.w	r3, r3, #1
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d114      	bne.n	800cb80 <HAL_SPI_Receive+0x2e0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb5a:	69ba      	ldr	r2, [r7, #24]
 800cb5c:	8812      	ldrh	r2, [r2, #0]
 800cb5e:	b292      	uxth	r2, r2
 800cb60:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb66:	1c9a      	adds	r2, r3, #2
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	3b01      	subs	r3, #1
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800cb7e:	e06f      	b.n	800cc60 <HAL_SPI_Receive+0x3c0>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	8bfa      	ldrh	r2, [r7, #30]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d924      	bls.n	800cbd8 <HAL_SPI_Receive+0x338>
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d01f      	beq.n	800cbd8 <HAL_SPI_Receive+0x338>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb9c:	69ba      	ldr	r2, [r7, #24]
 800cb9e:	8812      	ldrh	r2, [r2, #0]
 800cba0:	b292      	uxth	r2, r2
 800cba2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cba8:	1c9a      	adds	r2, r3, #2
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbb2:	69ba      	ldr	r2, [r7, #24]
 800cbb4:	8812      	ldrh	r2, [r2, #0]
 800cbb6:	b292      	uxth	r2, r2
 800cbb8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbbe:	1c9a      	adds	r2, r3, #2
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	3b02      	subs	r3, #2
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800cbd6:	e043      	b.n	800cc60 <HAL_SPI_Receive+0x3c0>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cbde:	b29b      	uxth	r3, r3
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d119      	bne.n	800cc18 <HAL_SPI_Receive+0x378>
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d014      	beq.n	800cc18 <HAL_SPI_Receive+0x378>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbf2:	69ba      	ldr	r2, [r7, #24]
 800cbf4:	8812      	ldrh	r2, [r2, #0]
 800cbf6:	b292      	uxth	r2, r2
 800cbf8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbfe:	1c9a      	adds	r2, r3, #2
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	b29a      	uxth	r2, r3
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800cc16:	e023      	b.n	800cc60 <HAL_SPI_Receive+0x3c0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc18:	f7f5 fe58 	bl	80028cc <HAL_GetTick>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	1ad3      	subs	r3, r2, r3
 800cc22:	683a      	ldr	r2, [r7, #0]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d803      	bhi.n	800cc30 <HAL_SPI_Receive+0x390>
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc2e:	d102      	bne.n	800cc36 <HAL_SPI_Receive+0x396>
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d114      	bne.n	800cc60 <HAL_SPI_Receive+0x3c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cc36:	68f8      	ldr	r0, [r7, #12]
 800cc38:	f000 f8f0 	bl	800ce1c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc42:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800cc5c:	2303      	movs	r3, #3
 800cc5e:	e0d9      	b.n	800ce14 <HAL_SPI_Receive+0x574>
    while (hspi->RxXferCount > 0UL)
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f47f af69 	bne.w	800cb40 <HAL_SPI_Receive+0x2a0>
 800cc6e:	e0be      	b.n	800cdee <HAL_SPI_Receive+0x54e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	695b      	ldr	r3, [r3, #20]
 800cc76:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	695b      	ldr	r3, [r3, #20]
 800cc7e:	f003 0301 	and.w	r3, r3, #1
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d117      	bne.n	800ccb6 <HAL_SPI_Receive+0x416>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc92:	7812      	ldrb	r2, [r2, #0]
 800cc94:	b2d2      	uxtb	r2, r2
 800cc96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc9c:	1c5a      	adds	r2, r3, #1
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	b29a      	uxth	r2, r3
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800ccb4:	e094      	b.n	800cde0 <HAL_SPI_Receive+0x540>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	8bfa      	ldrh	r2, [r7, #30]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d946      	bls.n	800cd52 <HAL_SPI_Receive+0x4b2>
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d041      	beq.n	800cd52 <HAL_SPI_Receive+0x4b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccda:	7812      	ldrb	r2, [r2, #0]
 800ccdc:	b2d2      	uxtb	r2, r2
 800ccde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cce4:	1c5a      	adds	r2, r3, #1
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccf6:	7812      	ldrb	r2, [r2, #0]
 800ccf8:	b2d2      	uxtb	r2, r2
 800ccfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd00:	1c5a      	adds	r2, r3, #1
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd12:	7812      	ldrb	r2, [r2, #0]
 800cd14:	b2d2      	uxtb	r2, r2
 800cd16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd1c:	1c5a      	adds	r2, r3, #1
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd2e:	7812      	ldrb	r2, [r2, #0]
 800cd30:	b2d2      	uxtb	r2, r2
 800cd32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd38:	1c5a      	adds	r2, r3, #1
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	3b04      	subs	r3, #4
 800cd48:	b29a      	uxth	r2, r3
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800cd50:	e046      	b.n	800cde0 <HAL_SPI_Receive+0x540>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	2b03      	cmp	r3, #3
 800cd5c:	d81c      	bhi.n	800cd98 <HAL_SPI_Receive+0x4f8>
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d017      	beq.n	800cd98 <HAL_SPI_Receive+0x4f8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd74:	7812      	ldrb	r2, [r2, #0]
 800cd76:	b2d2      	uxtb	r2, r2
 800cd78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd7e:	1c5a      	adds	r2, r3, #1
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	3b01      	subs	r3, #1
 800cd8e:	b29a      	uxth	r2, r3
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800cd96:	e023      	b.n	800cde0 <HAL_SPI_Receive+0x540>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd98:	f7f5 fd98 	bl	80028cc <HAL_GetTick>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	1ad3      	subs	r3, r2, r3
 800cda2:	683a      	ldr	r2, [r7, #0]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d803      	bhi.n	800cdb0 <HAL_SPI_Receive+0x510>
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdae:	d102      	bne.n	800cdb6 <HAL_SPI_Receive+0x516>
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d114      	bne.n	800cde0 <HAL_SPI_Receive+0x540>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f000 f830 	bl	800ce1c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdc2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800cddc:	2303      	movs	r3, #3
 800cdde:	e019      	b.n	800ce14 <HAL_SPI_Receive+0x574>
    while (hspi->RxXferCount > 0UL)
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f47f af41 	bne.w	800cc70 <HAL_SPI_Receive+0x3d0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cdee:	68f8      	ldr	r0, [r7, #12]
 800cdf0:	f000 f814 	bl	800ce1c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d001      	beq.n	800ce12 <HAL_SPI_Receive+0x572>
  {
    return HAL_ERROR;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	e000      	b.n	800ce14 <HAL_SPI_Receive+0x574>
  }
  else
  {
    return HAL_OK;
 800ce12:	2300      	movs	r3, #0
  }
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3720      	adds	r7, #32
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	695b      	ldr	r3, [r3, #20]
 800ce2a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	699a      	ldr	r2, [r3, #24]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f042 0208 	orr.w	r2, r2, #8
 800ce3a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	699a      	ldr	r2, [r3, #24]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f042 0210 	orr.w	r2, r2, #16
 800ce4a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f022 0201 	bic.w	r2, r2, #1
 800ce5a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	6812      	ldr	r2, [r2, #0]
 800ce66:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800ce6a:	f023 0303 	bic.w	r3, r3, #3
 800ce6e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	689a      	ldr	r2, [r3, #8]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ce7e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b04      	cmp	r3, #4
 800ce8a:	d014      	beq.n	800ceb6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f003 0320 	and.w	r3, r3, #32
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d00f      	beq.n	800ceb6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ce9c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	699a      	ldr	r2, [r3, #24]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f042 0220 	orr.w	r2, r2, #32
 800ceb4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800cebc:	b2db      	uxtb	r3, r3
 800cebe:	2b03      	cmp	r3, #3
 800cec0:	d014      	beq.n	800ceec <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d00f      	beq.n	800ceec <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ced2:	f043 0204 	orr.w	r2, r3, #4
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	699a      	ldr	r2, [r3, #24]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ceea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00f      	beq.n	800cf16 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cefc:	f043 0201 	orr.w	r2, r3, #1
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	699a      	ldr	r2, [r3, #24]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cf14:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00f      	beq.n	800cf40 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf26:	f043 0208 	orr.w	r2, r3, #8
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	699a      	ldr	r2, [r3, #24]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cf3e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800cf50:	bf00      	nop
 800cf52:	3714      	adds	r7, #20
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr

0800cf5c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	603b      	str	r3, [r7, #0]
 800cf68:	4613      	mov	r3, r2
 800cf6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cf6c:	e010      	b.n	800cf90 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf6e:	f7f5 fcad 	bl	80028cc <HAL_GetTick>
 800cf72:	4602      	mov	r2, r0
 800cf74:	69bb      	ldr	r3, [r7, #24]
 800cf76:	1ad3      	subs	r3, r2, r3
 800cf78:	683a      	ldr	r2, [r7, #0]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d803      	bhi.n	800cf86 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf84:	d102      	bne.n	800cf8c <SPI_WaitOnFlagUntilTimeout+0x30>
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d101      	bne.n	800cf90 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	e00f      	b.n	800cfb0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	695a      	ldr	r2, [r3, #20]
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	4013      	ands	r3, r2
 800cf9a:	68ba      	ldr	r2, [r7, #8]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	bf0c      	ite	eq
 800cfa0:	2301      	moveq	r3, #1
 800cfa2:	2300      	movne	r3, #0
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	79fb      	ldrb	r3, [r7, #7]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d0df      	beq.n	800cf6e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfc4:	095b      	lsrs	r3, r3, #5
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	3307      	adds	r3, #7
 800cfd6:	08db      	lsrs	r3, r3, #3
 800cfd8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	fb02 f303 	mul.w	r3, r2, r3
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3714      	adds	r7, #20
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr

0800cfee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b082      	sub	sp, #8
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d101      	bne.n	800d000 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cffc:	2301      	movs	r3, #1
 800cffe:	e042      	b.n	800d086 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d006:	2b00      	cmp	r3, #0
 800d008:	d106      	bne.n	800d018 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2200      	movs	r2, #0
 800d00e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f7f4 fe72 	bl	8001cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2224      	movs	r2, #36	@ 0x24
 800d01c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f022 0201 	bic.w	r2, r2, #1
 800d02e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d034:	2b00      	cmp	r3, #0
 800d036:	d002      	beq.n	800d03e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 fab5 	bl	800d5a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 f8c4 	bl	800d1cc <UART_SetConfig>
 800d044:	4603      	mov	r3, r0
 800d046:	2b01      	cmp	r3, #1
 800d048:	d101      	bne.n	800d04e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d04a:	2301      	movs	r3, #1
 800d04c:	e01b      	b.n	800d086 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	685a      	ldr	r2, [r3, #4]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d05c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	689a      	ldr	r2, [r3, #8]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d06c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f042 0201 	orr.w	r2, r2, #1
 800d07c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f000 fb34 	bl	800d6ec <UART_CheckIdleState>
 800d084:	4603      	mov	r3, r0
}
 800d086:	4618      	mov	r0, r3
 800d088:	3708      	adds	r7, #8
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d08e:	b580      	push	{r7, lr}
 800d090:	b08a      	sub	sp, #40	@ 0x28
 800d092:	af02      	add	r7, sp, #8
 800d094:	60f8      	str	r0, [r7, #12]
 800d096:	60b9      	str	r1, [r7, #8]
 800d098:	603b      	str	r3, [r7, #0]
 800d09a:	4613      	mov	r3, r2
 800d09c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0a4:	2b20      	cmp	r3, #32
 800d0a6:	f040 808b 	bne.w	800d1c0 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d002      	beq.n	800d0b6 <HAL_UART_Transmit+0x28>
 800d0b0:	88fb      	ldrh	r3, [r7, #6]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d101      	bne.n	800d0ba <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e083      	b.n	800d1c2 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0c4:	2b80      	cmp	r3, #128	@ 0x80
 800d0c6:	d107      	bne.n	800d0d8 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	689a      	ldr	r2, [r3, #8]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d0d6:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2221      	movs	r2, #33	@ 0x21
 800d0e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d0e8:	f7f5 fbf0 	bl	80028cc <HAL_GetTick>
 800d0ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	88fa      	ldrh	r2, [r7, #6]
 800d0f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	88fa      	ldrh	r2, [r7, #6]
 800d0fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	689b      	ldr	r3, [r3, #8]
 800d102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d106:	d108      	bne.n	800d11a <HAL_UART_Transmit+0x8c>
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d104      	bne.n	800d11a <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800d110:	2300      	movs	r3, #0
 800d112:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	61bb      	str	r3, [r7, #24]
 800d118:	e003      	b.n	800d122 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d11e:	2300      	movs	r3, #0
 800d120:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d122:	e030      	b.n	800d186 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	2200      	movs	r2, #0
 800d12c:	2180      	movs	r1, #128	@ 0x80
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f000 fb86 	bl	800d840 <UART_WaitOnFlagUntilTimeout>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d005      	beq.n	800d146 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2220      	movs	r2, #32
 800d13e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d142:	2303      	movs	r3, #3
 800d144:	e03d      	b.n	800d1c2 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d10b      	bne.n	800d164 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d14c:	69bb      	ldr	r3, [r7, #24]
 800d14e:	881b      	ldrh	r3, [r3, #0]
 800d150:	461a      	mov	r2, r3
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d15a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d15c:	69bb      	ldr	r3, [r7, #24]
 800d15e:	3302      	adds	r3, #2
 800d160:	61bb      	str	r3, [r7, #24]
 800d162:	e007      	b.n	800d174 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	781a      	ldrb	r2, [r3, #0]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	3301      	adds	r3, #1
 800d172:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	3b01      	subs	r3, #1
 800d17e:	b29a      	uxth	r2, r3
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d1c8      	bne.n	800d124 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	2200      	movs	r2, #0
 800d19a:	2140      	movs	r1, #64	@ 0x40
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f000 fb4f 	bl	800d840 <UART_WaitOnFlagUntilTimeout>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d005      	beq.n	800d1b4 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2220      	movs	r2, #32
 800d1ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d1b0:	2303      	movs	r3, #3
 800d1b2:	e006      	b.n	800d1c2 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2220      	movs	r2, #32
 800d1b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	e000      	b.n	800d1c2 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800d1c0:	2302      	movs	r3, #2
  }
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3720      	adds	r7, #32
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
	...

0800d1cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d1cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d1d0:	b094      	sub	sp, #80	@ 0x50
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	4b78      	ldr	r3, [pc, #480]	@ (800d3c4 <UART_SetConfig+0x1f8>)
 800d1e2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e6:	689a      	ldr	r2, [r3, #8]
 800d1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ea:	691b      	ldr	r3, [r3, #16]
 800d1ec:	431a      	orrs	r2, r3
 800d1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f0:	695b      	ldr	r3, [r3, #20]
 800d1f2:	431a      	orrs	r2, r3
 800d1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f6:	69db      	ldr	r3, [r3, #28]
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4971      	ldr	r1, [pc, #452]	@ (800d3c8 <UART_SetConfig+0x1fc>)
 800d204:	4019      	ands	r1, r3
 800d206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d20c:	430b      	orrs	r3, r1
 800d20e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d21c:	68d9      	ldr	r1, [r3, #12]
 800d21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	ea40 0301 	orr.w	r3, r0, r1
 800d226:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d22a:	699b      	ldr	r3, [r3, #24]
 800d22c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	4b64      	ldr	r3, [pc, #400]	@ (800d3c4 <UART_SetConfig+0x1f8>)
 800d234:	429a      	cmp	r2, r3
 800d236:	d009      	beq.n	800d24c <UART_SetConfig+0x80>
 800d238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	4b63      	ldr	r3, [pc, #396]	@ (800d3cc <UART_SetConfig+0x200>)
 800d23e:	429a      	cmp	r2, r3
 800d240:	d004      	beq.n	800d24c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d244:	6a1a      	ldr	r2, [r3, #32]
 800d246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d248:	4313      	orrs	r3, r2
 800d24a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	689b      	ldr	r3, [r3, #8]
 800d252:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d256:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d260:	430b      	orrs	r3, r1
 800d262:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d26a:	f023 000f 	bic.w	r0, r3, #15
 800d26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d270:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	ea40 0301 	orr.w	r3, r0, r1
 800d27a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	4b53      	ldr	r3, [pc, #332]	@ (800d3d0 <UART_SetConfig+0x204>)
 800d282:	429a      	cmp	r2, r3
 800d284:	d102      	bne.n	800d28c <UART_SetConfig+0xc0>
 800d286:	2301      	movs	r3, #1
 800d288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d28a:	e066      	b.n	800d35a <UART_SetConfig+0x18e>
 800d28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	4b50      	ldr	r3, [pc, #320]	@ (800d3d4 <UART_SetConfig+0x208>)
 800d292:	429a      	cmp	r2, r3
 800d294:	d102      	bne.n	800d29c <UART_SetConfig+0xd0>
 800d296:	2302      	movs	r3, #2
 800d298:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d29a:	e05e      	b.n	800d35a <UART_SetConfig+0x18e>
 800d29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	4b4d      	ldr	r3, [pc, #308]	@ (800d3d8 <UART_SetConfig+0x20c>)
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d102      	bne.n	800d2ac <UART_SetConfig+0xe0>
 800d2a6:	2304      	movs	r3, #4
 800d2a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2aa:	e056      	b.n	800d35a <UART_SetConfig+0x18e>
 800d2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	4b4a      	ldr	r3, [pc, #296]	@ (800d3dc <UART_SetConfig+0x210>)
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d102      	bne.n	800d2bc <UART_SetConfig+0xf0>
 800d2b6:	2308      	movs	r3, #8
 800d2b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2ba:	e04e      	b.n	800d35a <UART_SetConfig+0x18e>
 800d2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	4b47      	ldr	r3, [pc, #284]	@ (800d3e0 <UART_SetConfig+0x214>)
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d102      	bne.n	800d2cc <UART_SetConfig+0x100>
 800d2c6:	2310      	movs	r3, #16
 800d2c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2ca:	e046      	b.n	800d35a <UART_SetConfig+0x18e>
 800d2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	4b44      	ldr	r3, [pc, #272]	@ (800d3e4 <UART_SetConfig+0x218>)
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d102      	bne.n	800d2dc <UART_SetConfig+0x110>
 800d2d6:	2320      	movs	r3, #32
 800d2d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2da:	e03e      	b.n	800d35a <UART_SetConfig+0x18e>
 800d2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2de:	681a      	ldr	r2, [r3, #0]
 800d2e0:	4b41      	ldr	r3, [pc, #260]	@ (800d3e8 <UART_SetConfig+0x21c>)
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d102      	bne.n	800d2ec <UART_SetConfig+0x120>
 800d2e6:	2340      	movs	r3, #64	@ 0x40
 800d2e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2ea:	e036      	b.n	800d35a <UART_SetConfig+0x18e>
 800d2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	4b3e      	ldr	r3, [pc, #248]	@ (800d3ec <UART_SetConfig+0x220>)
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d102      	bne.n	800d2fc <UART_SetConfig+0x130>
 800d2f6:	2380      	movs	r3, #128	@ 0x80
 800d2f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2fa:	e02e      	b.n	800d35a <UART_SetConfig+0x18e>
 800d2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	4b3b      	ldr	r3, [pc, #236]	@ (800d3f0 <UART_SetConfig+0x224>)
 800d302:	429a      	cmp	r2, r3
 800d304:	d103      	bne.n	800d30e <UART_SetConfig+0x142>
 800d306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d30a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d30c:	e025      	b.n	800d35a <UART_SetConfig+0x18e>
 800d30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	4b38      	ldr	r3, [pc, #224]	@ (800d3f4 <UART_SetConfig+0x228>)
 800d314:	429a      	cmp	r2, r3
 800d316:	d103      	bne.n	800d320 <UART_SetConfig+0x154>
 800d318:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d31c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d31e:	e01c      	b.n	800d35a <UART_SetConfig+0x18e>
 800d320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	4b34      	ldr	r3, [pc, #208]	@ (800d3f8 <UART_SetConfig+0x22c>)
 800d326:	429a      	cmp	r2, r3
 800d328:	d103      	bne.n	800d332 <UART_SetConfig+0x166>
 800d32a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d32e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d330:	e013      	b.n	800d35a <UART_SetConfig+0x18e>
 800d332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	4b31      	ldr	r3, [pc, #196]	@ (800d3fc <UART_SetConfig+0x230>)
 800d338:	429a      	cmp	r2, r3
 800d33a:	d103      	bne.n	800d344 <UART_SetConfig+0x178>
 800d33c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d340:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d342:	e00a      	b.n	800d35a <UART_SetConfig+0x18e>
 800d344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	4b1e      	ldr	r3, [pc, #120]	@ (800d3c4 <UART_SetConfig+0x1f8>)
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d103      	bne.n	800d356 <UART_SetConfig+0x18a>
 800d34e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d352:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d354:	e001      	b.n	800d35a <UART_SetConfig+0x18e>
 800d356:	2300      	movs	r3, #0
 800d358:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	4b19      	ldr	r3, [pc, #100]	@ (800d3c4 <UART_SetConfig+0x1f8>)
 800d360:	429a      	cmp	r2, r3
 800d362:	d005      	beq.n	800d370 <UART_SetConfig+0x1a4>
 800d364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	4b18      	ldr	r3, [pc, #96]	@ (800d3cc <UART_SetConfig+0x200>)
 800d36a:	429a      	cmp	r2, r3
 800d36c:	f040 8094 	bne.w	800d498 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d370:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d372:	2200      	movs	r2, #0
 800d374:	623b      	str	r3, [r7, #32]
 800d376:	627a      	str	r2, [r7, #36]	@ 0x24
 800d378:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d37c:	f7fb ff2c 	bl	80091d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d380:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d384:	2b00      	cmp	r3, #0
 800d386:	f000 80f7 	beq.w	800d578 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d38e:	4a1c      	ldr	r2, [pc, #112]	@ (800d400 <UART_SetConfig+0x234>)
 800d390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d394:	461a      	mov	r2, r3
 800d396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d398:	fbb3 f3f2 	udiv	r3, r3, r2
 800d39c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3a0:	685a      	ldr	r2, [r3, #4]
 800d3a2:	4613      	mov	r3, r2
 800d3a4:	005b      	lsls	r3, r3, #1
 800d3a6:	4413      	add	r3, r2
 800d3a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d305      	bcc.n	800d3ba <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d924      	bls.n	800d404 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d3c0:	e069      	b.n	800d496 <UART_SetConfig+0x2ca>
 800d3c2:	bf00      	nop
 800d3c4:	44002400 	.word	0x44002400
 800d3c8:	cfff69f3 	.word	0xcfff69f3
 800d3cc:	54002400 	.word	0x54002400
 800d3d0:	40013800 	.word	0x40013800
 800d3d4:	40004400 	.word	0x40004400
 800d3d8:	40004800 	.word	0x40004800
 800d3dc:	40004c00 	.word	0x40004c00
 800d3e0:	40005000 	.word	0x40005000
 800d3e4:	40006400 	.word	0x40006400
 800d3e8:	40007800 	.word	0x40007800
 800d3ec:	40007c00 	.word	0x40007c00
 800d3f0:	40008000 	.word	0x40008000
 800d3f4:	40006800 	.word	0x40006800
 800d3f8:	40006c00 	.word	0x40006c00
 800d3fc:	40008400 	.word	0x40008400
 800d400:	08013720 	.word	0x08013720
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d406:	2200      	movs	r2, #0
 800d408:	61bb      	str	r3, [r7, #24]
 800d40a:	61fa      	str	r2, [r7, #28]
 800d40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d40e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d410:	4a64      	ldr	r2, [pc, #400]	@ (800d5a4 <UART_SetConfig+0x3d8>)
 800d412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d416:	b29b      	uxth	r3, r3
 800d418:	2200      	movs	r2, #0
 800d41a:	613b      	str	r3, [r7, #16]
 800d41c:	617a      	str	r2, [r7, #20]
 800d41e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d422:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d426:	f7f2 ff31 	bl	800028c <__aeabi_uldivmod>
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	4610      	mov	r0, r2
 800d430:	4619      	mov	r1, r3
 800d432:	f04f 0200 	mov.w	r2, #0
 800d436:	f04f 0300 	mov.w	r3, #0
 800d43a:	020b      	lsls	r3, r1, #8
 800d43c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d440:	0202      	lsls	r2, r0, #8
 800d442:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d444:	6849      	ldr	r1, [r1, #4]
 800d446:	0849      	lsrs	r1, r1, #1
 800d448:	2000      	movs	r0, #0
 800d44a:	460c      	mov	r4, r1
 800d44c:	4605      	mov	r5, r0
 800d44e:	eb12 0804 	adds.w	r8, r2, r4
 800d452:	eb43 0905 	adc.w	r9, r3, r5
 800d456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	60bb      	str	r3, [r7, #8]
 800d45e:	60fa      	str	r2, [r7, #12]
 800d460:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d464:	4640      	mov	r0, r8
 800d466:	4649      	mov	r1, r9
 800d468:	f7f2 ff10 	bl	800028c <__aeabi_uldivmod>
 800d46c:	4602      	mov	r2, r0
 800d46e:	460b      	mov	r3, r1
 800d470:	4613      	mov	r3, r2
 800d472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d476:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d47a:	d308      	bcc.n	800d48e <UART_SetConfig+0x2c2>
 800d47c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d47e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d482:	d204      	bcs.n	800d48e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800d484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d48a:	60da      	str	r2, [r3, #12]
 800d48c:	e003      	b.n	800d496 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800d48e:	2301      	movs	r3, #1
 800d490:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d494:	e070      	b.n	800d578 <UART_SetConfig+0x3ac>
 800d496:	e06f      	b.n	800d578 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d49a:	69db      	ldr	r3, [r3, #28]
 800d49c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d4a0:	d13c      	bne.n	800d51c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d4a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	603b      	str	r3, [r7, #0]
 800d4a8:	607a      	str	r2, [r7, #4]
 800d4aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d4ae:	f7fb fe93 	bl	80091d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d4b2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d4b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d05e      	beq.n	800d578 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4be:	4a39      	ldr	r2, [pc, #228]	@ (800d5a4 <UART_SetConfig+0x3d8>)
 800d4c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4cc:	005a      	lsls	r2, r3, #1
 800d4ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	085b      	lsrs	r3, r3, #1
 800d4d4:	441a      	add	r2, r3
 800d4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4e2:	2b0f      	cmp	r3, #15
 800d4e4:	d916      	bls.n	800d514 <UART_SetConfig+0x348>
 800d4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4ec:	d212      	bcs.n	800d514 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d4ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	f023 030f 	bic.w	r3, r3, #15
 800d4f6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d4f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4fa:	085b      	lsrs	r3, r3, #1
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	f003 0307 	and.w	r3, r3, #7
 800d502:	b29a      	uxth	r2, r3
 800d504:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d506:	4313      	orrs	r3, r2
 800d508:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800d50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d510:	60da      	str	r2, [r3, #12]
 800d512:	e031      	b.n	800d578 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800d514:	2301      	movs	r3, #1
 800d516:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d51a:	e02d      	b.n	800d578 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d51c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d51e:	2200      	movs	r2, #0
 800d520:	469a      	mov	sl, r3
 800d522:	4693      	mov	fp, r2
 800d524:	4650      	mov	r0, sl
 800d526:	4659      	mov	r1, fp
 800d528:	f7fb fe56 	bl	80091d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d52c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d52e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d530:	2b00      	cmp	r3, #0
 800d532:	d021      	beq.n	800d578 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d538:	4a1a      	ldr	r2, [pc, #104]	@ (800d5a4 <UART_SetConfig+0x3d8>)
 800d53a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d53e:	461a      	mov	r2, r3
 800d540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d542:	fbb3 f2f2 	udiv	r2, r3, r2
 800d546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	085b      	lsrs	r3, r3, #1
 800d54c:	441a      	add	r2, r3
 800d54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d550:	685b      	ldr	r3, [r3, #4]
 800d552:	fbb2 f3f3 	udiv	r3, r2, r3
 800d556:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d55a:	2b0f      	cmp	r3, #15
 800d55c:	d909      	bls.n	800d572 <UART_SetConfig+0x3a6>
 800d55e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d564:	d205      	bcs.n	800d572 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d568:	b29a      	uxth	r2, r3
 800d56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	60da      	str	r2, [r3, #12]
 800d570:	e002      	b.n	800d578 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800d572:	2301      	movs	r3, #1
 800d574:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d57a:	2201      	movs	r2, #1
 800d57c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d582:	2201      	movs	r2, #1
 800d584:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d58a:	2200      	movs	r2, #0
 800d58c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d590:	2200      	movs	r2, #0
 800d592:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d594:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3750      	adds	r7, #80	@ 0x50
 800d59c:	46bd      	mov	sp, r7
 800d59e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d5a2:	bf00      	nop
 800d5a4:	08013720 	.word	0x08013720

0800d5a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5b4:	f003 0308 	and.w	r3, r3, #8
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d00a      	beq.n	800d5d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	430a      	orrs	r2, r1
 800d5d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5d6:	f003 0301 	and.w	r3, r3, #1
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00a      	beq.n	800d5f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	430a      	orrs	r2, r1
 800d5f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5f8:	f003 0302 	and.w	r3, r3, #2
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d00a      	beq.n	800d616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	430a      	orrs	r2, r1
 800d614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d61a:	f003 0304 	and.w	r3, r3, #4
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d00a      	beq.n	800d638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	430a      	orrs	r2, r1
 800d636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d63c:	f003 0310 	and.w	r3, r3, #16
 800d640:	2b00      	cmp	r3, #0
 800d642:	d00a      	beq.n	800d65a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	689b      	ldr	r3, [r3, #8]
 800d64a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	430a      	orrs	r2, r1
 800d658:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d65e:	f003 0320 	and.w	r3, r3, #32
 800d662:	2b00      	cmp	r3, #0
 800d664:	d00a      	beq.n	800d67c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	430a      	orrs	r2, r1
 800d67a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d684:	2b00      	cmp	r3, #0
 800d686:	d01a      	beq.n	800d6be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	430a      	orrs	r2, r1
 800d69c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d6a6:	d10a      	bne.n	800d6be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	430a      	orrs	r2, r1
 800d6bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00a      	beq.n	800d6e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	430a      	orrs	r2, r1
 800d6de:	605a      	str	r2, [r3, #4]
  }
}
 800d6e0:	bf00      	nop
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b098      	sub	sp, #96	@ 0x60
 800d6f0:	af02      	add	r7, sp, #8
 800d6f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d6fc:	f7f5 f8e6 	bl	80028cc <HAL_GetTick>
 800d700:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f003 0308 	and.w	r3, r3, #8
 800d70c:	2b08      	cmp	r3, #8
 800d70e:	d12f      	bne.n	800d770 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d710:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d718:	2200      	movs	r2, #0
 800d71a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 f88e 	bl	800d840 <UART_WaitOnFlagUntilTimeout>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d022      	beq.n	800d770 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d732:	e853 3f00 	ldrex	r3, [r3]
 800d736:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d73a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d73e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	461a      	mov	r2, r3
 800d746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d748:	647b      	str	r3, [r7, #68]	@ 0x44
 800d74a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d74c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d74e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d750:	e841 2300 	strex	r3, r2, [r1]
 800d754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d1e6      	bne.n	800d72a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2220      	movs	r2, #32
 800d760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d76c:	2303      	movs	r3, #3
 800d76e:	e063      	b.n	800d838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f003 0304 	and.w	r3, r3, #4
 800d77a:	2b04      	cmp	r3, #4
 800d77c:	d149      	bne.n	800d812 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d77e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d786:	2200      	movs	r2, #0
 800d788:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 f857 	bl	800d840 <UART_WaitOnFlagUntilTimeout>
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d03c      	beq.n	800d812 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a0:	e853 3f00 	ldrex	r3, [r3]
 800d7a4:	623b      	str	r3, [r7, #32]
   return(result);
 800d7a6:	6a3b      	ldr	r3, [r7, #32]
 800d7a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d7ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d7bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7be:	e841 2300 	strex	r3, r2, [r1]
 800d7c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d1e6      	bne.n	800d798 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	3308      	adds	r3, #8
 800d7d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	e853 3f00 	ldrex	r3, [r3]
 800d7d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	f023 0301 	bic.w	r3, r3, #1
 800d7e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	3308      	adds	r3, #8
 800d7e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7ea:	61fa      	str	r2, [r7, #28]
 800d7ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ee:	69b9      	ldr	r1, [r7, #24]
 800d7f0:	69fa      	ldr	r2, [r7, #28]
 800d7f2:	e841 2300 	strex	r3, r2, [r1]
 800d7f6:	617b      	str	r3, [r7, #20]
   return(result);
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d1e5      	bne.n	800d7ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2220      	movs	r2, #32
 800d802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2200      	movs	r2, #0
 800d80a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d80e:	2303      	movs	r3, #3
 800d810:	e012      	b.n	800d838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2220      	movs	r2, #32
 800d816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2220      	movs	r2, #32
 800d81e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2200      	movs	r2, #0
 800d826:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d836:	2300      	movs	r3, #0
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3758      	adds	r7, #88	@ 0x58
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	60b9      	str	r1, [r7, #8]
 800d84a:	603b      	str	r3, [r7, #0]
 800d84c:	4613      	mov	r3, r2
 800d84e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d850:	e04f      	b.n	800d8f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d858:	d04b      	beq.n	800d8f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d85a:	f7f5 f837 	bl	80028cc <HAL_GetTick>
 800d85e:	4602      	mov	r2, r0
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	1ad3      	subs	r3, r2, r3
 800d864:	69ba      	ldr	r2, [r7, #24]
 800d866:	429a      	cmp	r2, r3
 800d868:	d302      	bcc.n	800d870 <UART_WaitOnFlagUntilTimeout+0x30>
 800d86a:	69bb      	ldr	r3, [r7, #24]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d101      	bne.n	800d874 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d870:	2303      	movs	r3, #3
 800d872:	e04e      	b.n	800d912 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f003 0304 	and.w	r3, r3, #4
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d037      	beq.n	800d8f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	2b80      	cmp	r3, #128	@ 0x80
 800d886:	d034      	beq.n	800d8f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	2b40      	cmp	r3, #64	@ 0x40
 800d88c:	d031      	beq.n	800d8f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	69db      	ldr	r3, [r3, #28]
 800d894:	f003 0308 	and.w	r3, r3, #8
 800d898:	2b08      	cmp	r3, #8
 800d89a:	d110      	bne.n	800d8be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2208      	movs	r2, #8
 800d8a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d8a4:	68f8      	ldr	r0, [r7, #12]
 800d8a6:	f000 f838 	bl	800d91a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2208      	movs	r2, #8
 800d8ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	e029      	b.n	800d912 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	69db      	ldr	r3, [r3, #28]
 800d8c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d8c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d8cc:	d111      	bne.n	800d8f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d8d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	f000 f81e 	bl	800d91a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2220      	movs	r2, #32
 800d8e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d8ee:	2303      	movs	r3, #3
 800d8f0:	e00f      	b.n	800d912 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	69da      	ldr	r2, [r3, #28]
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	4013      	ands	r3, r2
 800d8fc:	68ba      	ldr	r2, [r7, #8]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	bf0c      	ite	eq
 800d902:	2301      	moveq	r3, #1
 800d904:	2300      	movne	r3, #0
 800d906:	b2db      	uxtb	r3, r3
 800d908:	461a      	mov	r2, r3
 800d90a:	79fb      	ldrb	r3, [r7, #7]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d0a0      	beq.n	800d852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d910:	2300      	movs	r3, #0
}
 800d912:	4618      	mov	r0, r3
 800d914:	3710      	adds	r7, #16
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}

0800d91a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d91a:	b480      	push	{r7}
 800d91c:	b095      	sub	sp, #84	@ 0x54
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d92a:	e853 3f00 	ldrex	r3, [r3]
 800d92e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d932:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	461a      	mov	r2, r3
 800d93e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d940:	643b      	str	r3, [r7, #64]	@ 0x40
 800d942:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d944:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d946:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d948:	e841 2300 	strex	r3, r2, [r1]
 800d94c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d950:	2b00      	cmp	r3, #0
 800d952:	d1e6      	bne.n	800d922 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	3308      	adds	r3, #8
 800d95a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d95c:	6a3b      	ldr	r3, [r7, #32]
 800d95e:	e853 3f00 	ldrex	r3, [r3]
 800d962:	61fb      	str	r3, [r7, #28]
   return(result);
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d96a:	f023 0301 	bic.w	r3, r3, #1
 800d96e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	3308      	adds	r3, #8
 800d976:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d978:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d97a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d97c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d97e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d980:	e841 2300 	strex	r3, r2, [r1]
 800d984:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d1e3      	bne.n	800d954 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d990:	2b01      	cmp	r3, #1
 800d992:	d118      	bne.n	800d9c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	e853 3f00 	ldrex	r3, [r3]
 800d9a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	f023 0310 	bic.w	r3, r3, #16
 800d9a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9b2:	61bb      	str	r3, [r7, #24]
 800d9b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b6:	6979      	ldr	r1, [r7, #20]
 800d9b8:	69ba      	ldr	r2, [r7, #24]
 800d9ba:	e841 2300 	strex	r3, r2, [r1]
 800d9be:	613b      	str	r3, [r7, #16]
   return(result);
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d1e6      	bne.n	800d994 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2220      	movs	r2, #32
 800d9ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d9da:	bf00      	nop
 800d9dc:	3754      	adds	r7, #84	@ 0x54
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr

0800d9e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d9e6:	b480      	push	{r7}
 800d9e8:	b085      	sub	sp, #20
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d101      	bne.n	800d9fc <HAL_UARTEx_DisableFifoMode+0x16>
 800d9f8:	2302      	movs	r3, #2
 800d9fa:	e027      	b.n	800da4c <HAL_UARTEx_DisableFifoMode+0x66>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2201      	movs	r2, #1
 800da00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2224      	movs	r2, #36	@ 0x24
 800da08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f022 0201 	bic.w	r2, r2, #1
 800da22:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800da2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2200      	movs	r2, #0
 800da30:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	68fa      	ldr	r2, [r7, #12]
 800da38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2220      	movs	r2, #32
 800da3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2200      	movs	r2, #0
 800da46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da4a:	2300      	movs	r3, #0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3714      	adds	r7, #20
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d101      	bne.n	800da70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800da6c:	2302      	movs	r3, #2
 800da6e:	e02d      	b.n	800dacc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2201      	movs	r2, #1
 800da74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2224      	movs	r2, #36	@ 0x24
 800da7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f022 0201 	bic.w	r2, r2, #1
 800da96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	689b      	ldr	r3, [r3, #8]
 800da9e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	683a      	ldr	r2, [r7, #0]
 800daa8:	430a      	orrs	r2, r1
 800daaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f000 f84f 	bl	800db50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2220      	movs	r2, #32
 800dabe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2200      	movs	r2, #0
 800dac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3710      	adds	r7, #16
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d101      	bne.n	800daec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dae8:	2302      	movs	r3, #2
 800daea:	e02d      	b.n	800db48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2201      	movs	r2, #1
 800daf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2224      	movs	r2, #36	@ 0x24
 800daf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f022 0201 	bic.w	r2, r2, #1
 800db12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	689b      	ldr	r3, [r3, #8]
 800db1a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	683a      	ldr	r2, [r7, #0]
 800db24:	430a      	orrs	r2, r1
 800db26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 f811 	bl	800db50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	68fa      	ldr	r2, [r7, #12]
 800db34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2220      	movs	r2, #32
 800db3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db46:	2300      	movs	r3, #0
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800db50:	b480      	push	{r7}
 800db52:	b085      	sub	sp, #20
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d108      	bne.n	800db72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2201      	movs	r2, #1
 800db64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2201      	movs	r2, #1
 800db6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800db70:	e031      	b.n	800dbd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800db72:	2308      	movs	r3, #8
 800db74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800db76:	2308      	movs	r3, #8
 800db78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	0e5b      	lsrs	r3, r3, #25
 800db82:	b2db      	uxtb	r3, r3
 800db84:	f003 0307 	and.w	r3, r3, #7
 800db88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	689b      	ldr	r3, [r3, #8]
 800db90:	0f5b      	lsrs	r3, r3, #29
 800db92:	b2db      	uxtb	r3, r3
 800db94:	f003 0307 	and.w	r3, r3, #7
 800db98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db9a:	7bbb      	ldrb	r3, [r7, #14]
 800db9c:	7b3a      	ldrb	r2, [r7, #12]
 800db9e:	4911      	ldr	r1, [pc, #68]	@ (800dbe4 <UARTEx_SetNbDataToProcess+0x94>)
 800dba0:	5c8a      	ldrb	r2, [r1, r2]
 800dba2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dba6:	7b3a      	ldrb	r2, [r7, #12]
 800dba8:	490f      	ldr	r1, [pc, #60]	@ (800dbe8 <UARTEx_SetNbDataToProcess+0x98>)
 800dbaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dbac:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbb0:	b29a      	uxth	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dbb8:	7bfb      	ldrb	r3, [r7, #15]
 800dbba:	7b7a      	ldrb	r2, [r7, #13]
 800dbbc:	4909      	ldr	r1, [pc, #36]	@ (800dbe4 <UARTEx_SetNbDataToProcess+0x94>)
 800dbbe:	5c8a      	ldrb	r2, [r1, r2]
 800dbc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dbc4:	7b7a      	ldrb	r2, [r7, #13]
 800dbc6:	4908      	ldr	r1, [pc, #32]	@ (800dbe8 <UARTEx_SetNbDataToProcess+0x98>)
 800dbc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dbca:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbce:	b29a      	uxth	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dbd6:	bf00      	nop
 800dbd8:	3714      	adds	r7, #20
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop
 800dbe4:	08013738 	.word	0x08013738
 800dbe8:	08013740 	.word	0x08013740

0800dbec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbf8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc04:	f043 0201 	orr.w	r2, r3, #1
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800dc0c:	2300      	movs	r3, #0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	370c      	adds	r7, #12
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr

0800dc1a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	f107 001c 	add.w	r0, r7, #28
 800dc28:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d101      	bne.n	800dc36 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800dc32:	2301      	movs	r3, #1
 800dc34:	e008      	b.n	800dc48 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f7ff ffd8 	bl	800dbec <USB_CoreReset>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800dc46:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc52:	b004      	add	sp, #16
 800dc54:	4770      	bx	lr

0800dc56 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800dc56:	b480      	push	{r7}
 800dc58:	b085      	sub	sp, #20
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2200      	movs	r2, #0
 800dc62:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800dc64:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800dc68:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800dc70:	2300      	movs	r3, #0
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3714      	adds	r7, #20
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr

0800dc7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800dc7e:	b480      	push	{r7}
 800dc80:	b085      	sub	sp, #20
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800dc86:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800dc8a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	43db      	mvns	r3, r3
 800dc94:	401a      	ands	r2, r3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800dc9a:	2300      	movs	r3, #0
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3714      	adds	r7, #20
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800dcb4:	78fb      	ldrb	r3, [r7, #3]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d106      	bne.n	800dcc8 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcbe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	641a      	str	r2, [r3, #64]	@ 0x40
 800dcc6:	e00b      	b.n	800dce0 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800dcc8:	78fb      	ldrb	r3, [r7, #3]
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d106      	bne.n	800dcdc <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcd2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	641a      	str	r2, [r3, #64]	@ 0x40
 800dcda:	e001      	b.n	800dce0 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800dcdc:	2301      	movs	r3, #1
 800dcde:	e000      	b.n	800dce2 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800dce0:	2300      	movs	r3, #0
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	370c      	adds	r7, #12
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr

0800dcee <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800dcee:	b084      	sub	sp, #16
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	f107 001c 	add.w	r0, r7, #28
 800dcfc:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2201      	movs	r2, #1
 800dd04:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd0a:	f023 0201 	bic.w	r2, r3, #1
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800dd12:	2100      	movs	r1, #0
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f7ff ffc7 	bl	800dca8 <USB_SetCurrentMode>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800dd24:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3710      	adds	r7, #16
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd30:	b004      	add	sp, #16
 800dd32:	4770      	bx	lr

0800dd34 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800dd34:	b480      	push	{r7}
 800dd36:	b09f      	sub	sp, #124	@ 0x7c
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	4413      	add	r3, r2
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	4ba0      	ldr	r3, [pc, #640]	@ (800dfd4 <USB_ActivateEndpoint+0x2a0>)
 800dd52:	4013      	ands	r3, r2
 800dd54:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	78db      	ldrb	r3, [r3, #3]
 800dd5a:	2b03      	cmp	r3, #3
 800dd5c:	d819      	bhi.n	800dd92 <USB_ActivateEndpoint+0x5e>
 800dd5e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd64 <USB_ActivateEndpoint+0x30>)
 800dd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd64:	0800dd75 	.word	0x0800dd75
 800dd68:	0800dd89 	.word	0x0800dd89
 800dd6c:	0800dd9b 	.word	0x0800dd9b
 800dd70:	0800dd7f 	.word	0x0800dd7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800dd74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dd76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800dd7a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800dd7c:	e00e      	b.n	800dd9c <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800dd7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dd80:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800dd84:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800dd86:	e009      	b.n	800dd9c <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800dd88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dd8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800dd8e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800dd90:	e004      	b.n	800dd9c <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800dd92:	2301      	movs	r3, #1
 800dd94:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800dd98:	e000      	b.n	800dd9c <USB_ActivateEndpoint+0x68>
      break;
 800dd9a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	009b      	lsls	r3, r3, #2
 800dda4:	441a      	add	r2, r3
 800dda6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dda8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddb0:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	4413      	add	r3, r2
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	4b86      	ldr	r3, [pc, #536]	@ (800dfd8 <USB_ActivateEndpoint+0x2a4>)
 800ddc0:	4013      	ands	r3, r2
 800ddc2:	683a      	ldr	r2, [r7, #0]
 800ddc4:	7812      	ldrb	r2, [r2, #0]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	441a      	add	r2, r3
 800ddd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ddd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddde:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	7b1b      	ldrb	r3, [r3, #12]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	f040 8177 	bne.w	800e0d8 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	785b      	ldrb	r3, [r3, #1]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d079      	beq.n	800dee6 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	00db      	lsls	r3, r3, #3
 800ddf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ddfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	00db      	lsls	r3, r3, #3
 800de08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de10:	0c12      	lsrs	r2, r2, #16
 800de12:	0412      	lsls	r2, r2, #16
 800de14:	601a      	str	r2, [r3, #0]
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	00db      	lsls	r3, r3, #3
 800de1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de24:	6819      	ldr	r1, [r3, #0]
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	88db      	ldrh	r3, [r3, #6]
 800de2a:	089b      	lsrs	r3, r3, #2
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	009a      	lsls	r2, r3, #2
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	00db      	lsls	r3, r3, #3
 800de36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de3e:	430a      	orrs	r2, r1
 800de40:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	009b      	lsls	r3, r3, #2
 800de4a:	4413      	add	r3, r2
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	61bb      	str	r3, [r7, #24]
 800de50:	69bb      	ldr	r3, [r7, #24]
 800de52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de56:	2b00      	cmp	r3, #0
 800de58:	d013      	beq.n	800de82 <USB_ActivateEndpoint+0x14e>
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	4413      	add	r3, r2
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	4b5c      	ldr	r3, [pc, #368]	@ (800dfd8 <USB_ActivateEndpoint+0x2a4>)
 800de68:	4013      	ands	r3, r2
 800de6a:	617b      	str	r3, [r7, #20]
 800de6c:	687a      	ldr	r2, [r7, #4]
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	441a      	add	r2, r3
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800de80:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	78db      	ldrb	r3, [r3, #3]
 800de86:	2b01      	cmp	r3, #1
 800de88:	d018      	beq.n	800debc <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	4413      	add	r3, r2
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	4b51      	ldr	r3, [pc, #324]	@ (800dfdc <USB_ActivateEndpoint+0x2a8>)
 800de98:	4013      	ands	r3, r2
 800de9a:	60fb      	str	r3, [r7, #12]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f083 0320 	eor.w	r3, r3, #32
 800dea2:	60fb      	str	r3, [r7, #12]
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	009b      	lsls	r3, r3, #2
 800deac:	441a      	add	r2, r3
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800deb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800deb8:	6013      	str	r3, [r2, #0]
 800deba:	e28c      	b.n	800e3d6 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	009b      	lsls	r3, r3, #2
 800dec4:	4413      	add	r3, r2
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	4b44      	ldr	r3, [pc, #272]	@ (800dfdc <USB_ActivateEndpoint+0x2a8>)
 800deca:	4013      	ands	r3, r2
 800decc:	613b      	str	r3, [r7, #16]
 800dece:	687a      	ldr	r2, [r7, #4]
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	441a      	add	r2, r3
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dee2:	6013      	str	r3, [r2, #0]
 800dee4:	e277      	b.n	800e3d6 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	00db      	lsls	r3, r3, #3
 800deec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800def0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800def4:	685a      	ldr	r2, [r3, #4]
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	00db      	lsls	r3, r3, #3
 800defc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df04:	0c12      	lsrs	r2, r2, #16
 800df06:	0412      	lsls	r2, r2, #16
 800df08:	605a      	str	r2, [r3, #4]
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	00db      	lsls	r3, r3, #3
 800df10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df18:	6859      	ldr	r1, [r3, #4]
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	88db      	ldrh	r3, [r3, #6]
 800df1e:	089b      	lsrs	r3, r3, #2
 800df20:	b29b      	uxth	r3, r3
 800df22:	009a      	lsls	r2, r3, #2
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	00db      	lsls	r3, r3, #3
 800df2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df32:	430a      	orrs	r2, r1
 800df34:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	00db      	lsls	r3, r3, #3
 800df3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df44:	685a      	ldr	r2, [r3, #4]
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	00db      	lsls	r3, r3, #3
 800df4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df54:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800df58:	605a      	str	r2, [r3, #4]
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	691b      	ldr	r3, [r3, #16]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d112      	bne.n	800df88 <USB_ActivateEndpoint+0x254>
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	00db      	lsls	r3, r3, #3
 800df68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df70:	685a      	ldr	r2, [r3, #4]
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	00db      	lsls	r3, r3, #3
 800df78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df80:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800df84:	605a      	str	r2, [r3, #4]
 800df86:	e04d      	b.n	800e024 <USB_ActivateEndpoint+0x2f0>
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	691b      	ldr	r3, [r3, #16]
 800df8c:	2b3e      	cmp	r3, #62	@ 0x3e
 800df8e:	d827      	bhi.n	800dfe0 <USB_ActivateEndpoint+0x2ac>
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	691b      	ldr	r3, [r3, #16]
 800df94:	085b      	lsrs	r3, r3, #1
 800df96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	691b      	ldr	r3, [r3, #16]
 800df9c:	f003 0301 	and.w	r3, r3, #1
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d002      	beq.n	800dfaa <USB_ActivateEndpoint+0x276>
 800dfa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	00db      	lsls	r3, r3, #3
 800dfb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfb8:	6859      	ldr	r1, [r3, #4]
 800dfba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfbc:	069a      	lsls	r2, r3, #26
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	00db      	lsls	r3, r3, #3
 800dfc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfc8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfcc:	430a      	orrs	r2, r1
 800dfce:	605a      	str	r2, [r3, #4]
 800dfd0:	e028      	b.n	800e024 <USB_ActivateEndpoint+0x2f0>
 800dfd2:	bf00      	nop
 800dfd4:	07ff898f 	.word	0x07ff898f
 800dfd8:	07ff8f8f 	.word	0x07ff8f8f
 800dfdc:	07ff8fbf 	.word	0x07ff8fbf
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	691b      	ldr	r3, [r3, #16]
 800dfe4:	095b      	lsrs	r3, r3, #5
 800dfe6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	691b      	ldr	r3, [r3, #16]
 800dfec:	f003 031f 	and.w	r3, r3, #31
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d102      	bne.n	800dffa <USB_ActivateEndpoint+0x2c6>
 800dff4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dff6:	3b01      	subs	r3, #1
 800dff8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	00db      	lsls	r3, r3, #3
 800e000:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e004:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e008:	685a      	ldr	r2, [r3, #4]
 800e00a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e00c:	069b      	lsls	r3, r3, #26
 800e00e:	431a      	orrs	r2, r3
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	00db      	lsls	r3, r3, #3
 800e016:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e01a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e01e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e022:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	009b      	lsls	r3, r3, #2
 800e02c:	4413      	add	r3, r2
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d013      	beq.n	800e064 <USB_ActivateEndpoint+0x330>
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	4413      	add	r3, r2
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	4b9c      	ldr	r3, [pc, #624]	@ (800e2bc <USB_ActivateEndpoint+0x588>)
 800e04a:	4013      	ands	r3, r2
 800e04c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	009b      	lsls	r3, r3, #2
 800e056:	441a      	add	r2, r3
 800e058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e05a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e05e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e062:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d11c      	bne.n	800e0a6 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	4413      	add	r3, r2
 800e076:	681a      	ldr	r2, [r3, #0]
 800e078:	4b91      	ldr	r3, [pc, #580]	@ (800e2c0 <USB_ActivateEndpoint+0x58c>)
 800e07a:	4013      	ands	r3, r2
 800e07c:	61fb      	str	r3, [r7, #28]
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e084:	61fb      	str	r3, [r7, #28]
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e08c:	61fb      	str	r3, [r7, #28]
 800e08e:	687a      	ldr	r2, [r7, #4]
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	441a      	add	r2, r3
 800e098:	69fb      	ldr	r3, [r7, #28]
 800e09a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e09e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0a2:	6013      	str	r3, [r2, #0]
 800e0a4:	e197      	b.n	800e3d6 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	009b      	lsls	r3, r3, #2
 800e0ae:	4413      	add	r3, r2
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	4b83      	ldr	r3, [pc, #524]	@ (800e2c0 <USB_ActivateEndpoint+0x58c>)
 800e0b4:	4013      	ands	r3, r2
 800e0b6:	623b      	str	r3, [r7, #32]
 800e0b8:	6a3b      	ldr	r3, [r7, #32]
 800e0ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e0be:	623b      	str	r3, [r7, #32]
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	009b      	lsls	r3, r3, #2
 800e0c8:	441a      	add	r2, r3
 800e0ca:	6a3b      	ldr	r3, [r7, #32]
 800e0cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0d4:	6013      	str	r3, [r2, #0]
 800e0d6:	e17e      	b.n	800e3d6 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	78db      	ldrb	r3, [r3, #3]
 800e0dc:	2b02      	cmp	r3, #2
 800e0de:	d114      	bne.n	800e10a <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	4413      	add	r3, r2
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	4b73      	ldr	r3, [pc, #460]	@ (800e2bc <USB_ActivateEndpoint+0x588>)
 800e0ee:	4013      	ands	r3, r2
 800e0f0:	663b      	str	r3, [r7, #96]	@ 0x60
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	441a      	add	r2, r3
 800e0fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e0fe:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e106:	6013      	str	r3, [r2, #0]
 800e108:	e013      	b.n	800e132 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800e10a:	687a      	ldr	r2, [r7, #4]
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	009b      	lsls	r3, r3, #2
 800e112:	4413      	add	r3, r2
 800e114:	681a      	ldr	r2, [r3, #0]
 800e116:	4b6b      	ldr	r3, [pc, #428]	@ (800e2c4 <USB_ActivateEndpoint+0x590>)
 800e118:	4013      	ands	r3, r2
 800e11a:	667b      	str	r3, [r7, #100]	@ 0x64
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	441a      	add	r2, r3
 800e126:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e12c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e130:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	00db      	lsls	r3, r3, #3
 800e138:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e13c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	00db      	lsls	r3, r3, #3
 800e148:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e14c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e150:	0c12      	lsrs	r2, r2, #16
 800e152:	0412      	lsls	r2, r2, #16
 800e154:	601a      	str	r2, [r3, #0]
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	00db      	lsls	r3, r3, #3
 800e15c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e160:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e164:	6819      	ldr	r1, [r3, #0]
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	891b      	ldrh	r3, [r3, #8]
 800e16a:	089b      	lsrs	r3, r3, #2
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	009a      	lsls	r2, r3, #2
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	00db      	lsls	r3, r3, #3
 800e176:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e17a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e17e:	430a      	orrs	r2, r1
 800e180:	601a      	str	r2, [r3, #0]
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	00db      	lsls	r3, r3, #3
 800e188:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e18c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e190:	685a      	ldr	r2, [r3, #4]
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	00db      	lsls	r3, r3, #3
 800e198:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e19c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1a0:	0c12      	lsrs	r2, r2, #16
 800e1a2:	0412      	lsls	r2, r2, #16
 800e1a4:	605a      	str	r2, [r3, #4]
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	00db      	lsls	r3, r3, #3
 800e1ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1b4:	6859      	ldr	r1, [r3, #4]
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	895b      	ldrh	r3, [r3, #10]
 800e1ba:	089b      	lsrs	r3, r3, #2
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	009a      	lsls	r2, r3, #2
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	00db      	lsls	r3, r3, #3
 800e1c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1ce:	430a      	orrs	r2, r1
 800e1d0:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	785b      	ldrb	r3, [r3, #1]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d178      	bne.n	800e2cc <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e1da:	687a      	ldr	r2, [r7, #4]
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	4413      	add	r3, r2
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800e1e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d013      	beq.n	800e21a <USB_ActivateEndpoint+0x4e6>
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	4413      	add	r3, r2
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	4b2f      	ldr	r3, [pc, #188]	@ (800e2bc <USB_ActivateEndpoint+0x588>)
 800e200:	4013      	ands	r3, r2
 800e202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e204:	687a      	ldr	r2, [r7, #4]
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	441a      	add	r2, r3
 800e20e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e210:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e218:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e21a:	687a      	ldr	r2, [r7, #4]
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	009b      	lsls	r3, r3, #2
 800e222:	4413      	add	r3, r2
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e22a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d013      	beq.n	800e25a <USB_ActivateEndpoint+0x526>
 800e232:	687a      	ldr	r2, [r7, #4]
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	4413      	add	r3, r2
 800e23c:	681a      	ldr	r2, [r3, #0]
 800e23e:	4b1f      	ldr	r3, [pc, #124]	@ (800e2bc <USB_ActivateEndpoint+0x588>)
 800e240:	4013      	ands	r3, r2
 800e242:	637b      	str	r3, [r7, #52]	@ 0x34
 800e244:	687a      	ldr	r2, [r7, #4]
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	781b      	ldrb	r3, [r3, #0]
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	441a      	add	r2, r3
 800e24e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e250:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e254:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e258:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e25a:	687a      	ldr	r2, [r7, #4]
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	4413      	add	r3, r2
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	4b16      	ldr	r3, [pc, #88]	@ (800e2c0 <USB_ActivateEndpoint+0x58c>)
 800e268:	4013      	ands	r3, r2
 800e26a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e26e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e272:	633b      	str	r3, [r7, #48]	@ 0x30
 800e274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e276:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e27a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	441a      	add	r2, r3
 800e286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e288:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e28c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e290:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e292:	687a      	ldr	r2, [r7, #4]
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	009b      	lsls	r3, r3, #2
 800e29a:	4413      	add	r3, r2
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	4b0a      	ldr	r3, [pc, #40]	@ (800e2c8 <USB_ActivateEndpoint+0x594>)
 800e2a0:	4013      	ands	r3, r2
 800e2a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	441a      	add	r2, r3
 800e2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2b8:	6013      	str	r3, [r2, #0]
 800e2ba:	e08c      	b.n	800e3d6 <USB_ActivateEndpoint+0x6a2>
 800e2bc:	07ff8f8f 	.word	0x07ff8f8f
 800e2c0:	07ffbf8f 	.word	0x07ffbf8f
 800e2c4:	07ff8e8f 	.word	0x07ff8e8f
 800e2c8:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	781b      	ldrb	r3, [r3, #0]
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	4413      	add	r3, r2
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e2da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e2dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d013      	beq.n	800e30c <USB_ActivateEndpoint+0x5d8>
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	4413      	add	r3, r2
 800e2ee:	681a      	ldr	r2, [r3, #0]
 800e2f0:	4b3d      	ldr	r3, [pc, #244]	@ (800e3e8 <USB_ActivateEndpoint+0x6b4>)
 800e2f2:	4013      	ands	r3, r2
 800e2f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	009b      	lsls	r3, r3, #2
 800e2fe:	441a      	add	r2, r3
 800e300:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e302:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e30a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e30c:	687a      	ldr	r2, [r7, #4]
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	4413      	add	r3, r2
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	657b      	str	r3, [r7, #84]	@ 0x54
 800e31a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e31c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e320:	2b00      	cmp	r3, #0
 800e322:	d013      	beq.n	800e34c <USB_ActivateEndpoint+0x618>
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	009b      	lsls	r3, r3, #2
 800e32c:	4413      	add	r3, r2
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	4b2d      	ldr	r3, [pc, #180]	@ (800e3e8 <USB_ActivateEndpoint+0x6b4>)
 800e332:	4013      	ands	r3, r2
 800e334:	653b      	str	r3, [r7, #80]	@ 0x50
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	441a      	add	r2, r3
 800e340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e346:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e34a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	78db      	ldrb	r3, [r3, #3]
 800e350:	2b01      	cmp	r3, #1
 800e352:	d018      	beq.n	800e386 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	4413      	add	r3, r2
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	4b22      	ldr	r3, [pc, #136]	@ (800e3ec <USB_ActivateEndpoint+0x6b8>)
 800e362:	4013      	ands	r3, r2
 800e364:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e368:	f083 0320 	eor.w	r3, r3, #32
 800e36c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	441a      	add	r2, r3
 800e378:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e37a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e37e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e382:	6013      	str	r3, [r2, #0]
 800e384:	e013      	b.n	800e3ae <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e386:	687a      	ldr	r2, [r7, #4]
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4413      	add	r3, r2
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	4b16      	ldr	r3, [pc, #88]	@ (800e3ec <USB_ActivateEndpoint+0x6b8>)
 800e394:	4013      	ands	r3, r2
 800e396:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	441a      	add	r2, r3
 800e3a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3ac:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e3ae:	687a      	ldr	r2, [r7, #4]
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	009b      	lsls	r3, r3, #2
 800e3b6:	4413      	add	r3, r2
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e3f0 <USB_ActivateEndpoint+0x6bc>)
 800e3bc:	4013      	ands	r3, r2
 800e3be:	647b      	str	r3, [r7, #68]	@ 0x44
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	441a      	add	r2, r3
 800e3ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3d4:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800e3d6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	377c      	adds	r7, #124	@ 0x7c
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e4:	4770      	bx	lr
 800e3e6:	bf00      	nop
 800e3e8:	07ff8f8f 	.word	0x07ff8f8f
 800e3ec:	07ff8fbf 	.word	0x07ff8fbf
 800e3f0:	07ffbf8f 	.word	0x07ffbf8f

0800e3f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b097      	sub	sp, #92	@ 0x5c
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	7b1b      	ldrb	r3, [r3, #12]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d16d      	bne.n	800e4e2 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	785b      	ldrb	r3, [r3, #1]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d034      	beq.n	800e478 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	4413      	add	r3, r2
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	613b      	str	r3, [r7, #16]
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e422:	2b00      	cmp	r3, #0
 800e424:	d013      	beq.n	800e44e <USB_DeactivateEndpoint+0x5a>
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	4413      	add	r3, r2
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	4b6d      	ldr	r3, [pc, #436]	@ (800e5e8 <USB_DeactivateEndpoint+0x1f4>)
 800e434:	4013      	ands	r3, r2
 800e436:	60fb      	str	r3, [r7, #12]
 800e438:	687a      	ldr	r2, [r7, #4]
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	441a      	add	r2, r3
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e448:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e44c:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	4413      	add	r3, r2
 800e458:	681a      	ldr	r2, [r3, #0]
 800e45a:	4b64      	ldr	r3, [pc, #400]	@ (800e5ec <USB_DeactivateEndpoint+0x1f8>)
 800e45c:	4013      	ands	r3, r2
 800e45e:	60bb      	str	r3, [r7, #8]
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	441a      	add	r2, r3
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e474:	6013      	str	r3, [r2, #0]
 800e476:	e139      	b.n	800e6ec <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	4413      	add	r3, r2
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	61fb      	str	r3, [r7, #28]
 800e486:	69fb      	ldr	r3, [r7, #28]
 800e488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d013      	beq.n	800e4b8 <USB_DeactivateEndpoint+0xc4>
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	4413      	add	r3, r2
 800e49a:	681a      	ldr	r2, [r3, #0]
 800e49c:	4b52      	ldr	r3, [pc, #328]	@ (800e5e8 <USB_DeactivateEndpoint+0x1f4>)
 800e49e:	4013      	ands	r3, r2
 800e4a0:	61bb      	str	r3, [r7, #24]
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	441a      	add	r2, r3
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e4b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4b6:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e4b8:	687a      	ldr	r2, [r7, #4]
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	4413      	add	r3, r2
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	4b4a      	ldr	r3, [pc, #296]	@ (800e5f0 <USB_DeactivateEndpoint+0x1fc>)
 800e4c6:	4013      	ands	r3, r2
 800e4c8:	617b      	str	r3, [r7, #20]
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	441a      	add	r2, r3
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4de:	6013      	str	r3, [r2, #0]
 800e4e0:	e104      	b.n	800e6ec <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	785b      	ldrb	r3, [r3, #1]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	f040 8084 	bne.w	800e5f4 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	4413      	add	r3, r2
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e500:	2b00      	cmp	r3, #0
 800e502:	d013      	beq.n	800e52c <USB_DeactivateEndpoint+0x138>
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	009b      	lsls	r3, r3, #2
 800e50c:	4413      	add	r3, r2
 800e50e:	681a      	ldr	r2, [r3, #0]
 800e510:	4b35      	ldr	r3, [pc, #212]	@ (800e5e8 <USB_DeactivateEndpoint+0x1f4>)
 800e512:	4013      	ands	r3, r2
 800e514:	637b      	str	r3, [r7, #52]	@ 0x34
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	009b      	lsls	r3, r3, #2
 800e51e:	441a      	add	r2, r3
 800e520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e522:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e52a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	009b      	lsls	r3, r3, #2
 800e534:	4413      	add	r3, r2
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	633b      	str	r3, [r7, #48]	@ 0x30
 800e53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e53c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e540:	2b00      	cmp	r3, #0
 800e542:	d013      	beq.n	800e56c <USB_DeactivateEndpoint+0x178>
 800e544:	687a      	ldr	r2, [r7, #4]
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	4413      	add	r3, r2
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	4b25      	ldr	r3, [pc, #148]	@ (800e5e8 <USB_DeactivateEndpoint+0x1f4>)
 800e552:	4013      	ands	r3, r2
 800e554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e556:	687a      	ldr	r2, [r7, #4]
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	009b      	lsls	r3, r3, #2
 800e55e:	441a      	add	r2, r3
 800e560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e566:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e56a:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	4413      	add	r3, r2
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	4b1b      	ldr	r3, [pc, #108]	@ (800e5e8 <USB_DeactivateEndpoint+0x1f4>)
 800e57a:	4013      	ands	r3, r2
 800e57c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	009b      	lsls	r3, r3, #2
 800e586:	441a      	add	r2, r3
 800e588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e58a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e58e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e592:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	009b      	lsls	r3, r3, #2
 800e59c:	4413      	add	r3, r2
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	4b13      	ldr	r3, [pc, #76]	@ (800e5f0 <USB_DeactivateEndpoint+0x1fc>)
 800e5a2:	4013      	ands	r3, r2
 800e5a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	009b      	lsls	r3, r3, #2
 800e5ae:	441a      	add	r2, r3
 800e5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e5b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5ba:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e5bc:	687a      	ldr	r2, [r7, #4]
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	009b      	lsls	r3, r3, #2
 800e5c4:	4413      	add	r3, r2
 800e5c6:	681a      	ldr	r2, [r3, #0]
 800e5c8:	4b08      	ldr	r3, [pc, #32]	@ (800e5ec <USB_DeactivateEndpoint+0x1f8>)
 800e5ca:	4013      	ands	r3, r2
 800e5cc:	623b      	str	r3, [r7, #32]
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	009b      	lsls	r3, r3, #2
 800e5d6:	441a      	add	r2, r3
 800e5d8:	6a3b      	ldr	r3, [r7, #32]
 800e5da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e5de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5e2:	6013      	str	r3, [r2, #0]
 800e5e4:	e082      	b.n	800e6ec <USB_DeactivateEndpoint+0x2f8>
 800e5e6:	bf00      	nop
 800e5e8:	07ff8f8f 	.word	0x07ff8f8f
 800e5ec:	07ff8fbf 	.word	0x07ff8fbf
 800e5f0:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	009b      	lsls	r3, r3, #2
 800e5fc:	4413      	add	r3, r2
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	657b      	str	r3, [r7, #84]	@ 0x54
 800e602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d013      	beq.n	800e634 <USB_DeactivateEndpoint+0x240>
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	009b      	lsls	r3, r3, #2
 800e614:	4413      	add	r3, r2
 800e616:	681a      	ldr	r2, [r3, #0]
 800e618:	4b38      	ldr	r3, [pc, #224]	@ (800e6fc <USB_DeactivateEndpoint+0x308>)
 800e61a:	4013      	ands	r3, r2
 800e61c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	009b      	lsls	r3, r3, #2
 800e626:	441a      	add	r2, r3
 800e628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e62a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e62e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e632:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	009b      	lsls	r3, r3, #2
 800e63c:	4413      	add	r3, r2
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d013      	beq.n	800e674 <USB_DeactivateEndpoint+0x280>
 800e64c:	687a      	ldr	r2, [r7, #4]
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	009b      	lsls	r3, r3, #2
 800e654:	4413      	add	r3, r2
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	4b28      	ldr	r3, [pc, #160]	@ (800e6fc <USB_DeactivateEndpoint+0x308>)
 800e65a:	4013      	ands	r3, r2
 800e65c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	009b      	lsls	r3, r3, #2
 800e666:	441a      	add	r2, r3
 800e668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e66a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e66e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e672:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e674:	687a      	ldr	r2, [r7, #4]
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	009b      	lsls	r3, r3, #2
 800e67c:	4413      	add	r3, r2
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	4b1e      	ldr	r3, [pc, #120]	@ (800e6fc <USB_DeactivateEndpoint+0x308>)
 800e682:	4013      	ands	r3, r2
 800e684:	647b      	str	r3, [r7, #68]	@ 0x44
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	441a      	add	r2, r3
 800e690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e692:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e69a:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	4413      	add	r3, r2
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	4b15      	ldr	r3, [pc, #84]	@ (800e700 <USB_DeactivateEndpoint+0x30c>)
 800e6aa:	4013      	ands	r3, r2
 800e6ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800e6ae:	687a      	ldr	r2, [r7, #4]
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	441a      	add	r2, r3
 800e6b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e6ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e6be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6c2:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e6c4:	687a      	ldr	r2, [r7, #4]
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	781b      	ldrb	r3, [r3, #0]
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	4413      	add	r3, r2
 800e6ce:	681a      	ldr	r2, [r3, #0]
 800e6d0:	4b0c      	ldr	r3, [pc, #48]	@ (800e704 <USB_DeactivateEndpoint+0x310>)
 800e6d2:	4013      	ands	r3, r2
 800e6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e6d6:	687a      	ldr	r2, [r7, #4]
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	009b      	lsls	r3, r3, #2
 800e6de:	441a      	add	r2, r3
 800e6e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e6e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6ea:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e6ec:	2300      	movs	r3, #0
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	375c      	adds	r7, #92	@ 0x5c
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr
 800e6fa:	bf00      	nop
 800e6fc:	07ff8f8f 	.word	0x07ff8f8f
 800e700:	07ff8fbf 	.word	0x07ff8fbf
 800e704:	07ffbf8f 	.word	0x07ffbf8f

0800e708 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b096      	sub	sp, #88	@ 0x58
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	785b      	ldrb	r3, [r3, #1]
 800e716:	2b01      	cmp	r3, #1
 800e718:	f040 84ed 	bne.w	800f0f6 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	699a      	ldr	r2, [r3, #24]
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	691b      	ldr	r3, [r3, #16]
 800e724:	429a      	cmp	r2, r3
 800e726:	d903      	bls.n	800e730 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	691b      	ldr	r3, [r3, #16]
 800e72c:	657b      	str	r3, [r7, #84]	@ 0x54
 800e72e:	e002      	b.n	800e736 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	699b      	ldr	r3, [r3, #24]
 800e734:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	7b1b      	ldrb	r3, [r3, #12]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d12e      	bne.n	800e79c <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	6959      	ldr	r1, [r3, #20]
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	88da      	ldrh	r2, [r3, #6]
 800e746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e748:	b29b      	uxth	r3, r3
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f001 f963 	bl	800fa16 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	00db      	lsls	r3, r3, #3
 800e756:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e75a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	00db      	lsls	r3, r3, #3
 800e766:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e76a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e76e:	b292      	uxth	r2, r2
 800e770:	601a      	str	r2, [r3, #0]
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	00db      	lsls	r3, r3, #3
 800e778:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e77c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e780:	6819      	ldr	r1, [r3, #0]
 800e782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e784:	041a      	lsls	r2, r3, #16
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	00db      	lsls	r3, r3, #3
 800e78c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e790:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e794:	430a      	orrs	r2, r1
 800e796:	601a      	str	r2, [r3, #0]
 800e798:	f000 bc90 	b.w	800f0bc <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	78db      	ldrb	r3, [r3, #3]
 800e7a0:	2b02      	cmp	r3, #2
 800e7a2:	f040 8332 	bne.w	800ee0a <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	6a1a      	ldr	r2, [r3, #32]
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	691b      	ldr	r3, [r3, #16]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	f240 82e4 	bls.w	800ed7c <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	009b      	lsls	r3, r3, #2
 800e7bc:	4413      	add	r3, r2
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	4ba4      	ldr	r3, [pc, #656]	@ (800ea54 <USB_EPStartXfer+0x34c>)
 800e7c2:	4013      	ands	r3, r2
 800e7c4:	613b      	str	r3, [r7, #16]
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	009b      	lsls	r3, r3, #2
 800e7ce:	441a      	add	r2, r3
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e7d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7da:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	6a1a      	ldr	r2, [r3, #32]
 800e7e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7e2:	1ad2      	subs	r2, r2, r3
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	009b      	lsls	r3, r3, #2
 800e7f0:	4413      	add	r3, r2
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	f000 8161 	beq.w	800eac0 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	785b      	ldrb	r3, [r3, #1]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d16a      	bne.n	800e8dc <USB_EPStartXfer+0x1d4>
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	00db      	lsls	r3, r3, #3
 800e80c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e810:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e814:	685a      	ldr	r2, [r3, #4]
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	00db      	lsls	r3, r3, #3
 800e81c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e820:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e824:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e828:	605a      	str	r2, [r3, #4]
 800e82a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d112      	bne.n	800e856 <USB_EPStartXfer+0x14e>
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	00db      	lsls	r3, r3, #3
 800e836:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e83a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e83e:	685a      	ldr	r2, [r3, #4]
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	00db      	lsls	r3, r3, #3
 800e846:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e84a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e84e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e852:	605a      	str	r2, [r3, #4]
 800e854:	e06a      	b.n	800e92c <USB_EPStartXfer+0x224>
 800e856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e858:	2b3e      	cmp	r3, #62	@ 0x3e
 800e85a:	d81e      	bhi.n	800e89a <USB_EPStartXfer+0x192>
 800e85c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e85e:	085b      	lsrs	r3, r3, #1
 800e860:	653b      	str	r3, [r7, #80]	@ 0x50
 800e862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e864:	f003 0301 	and.w	r3, r3, #1
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d002      	beq.n	800e872 <USB_EPStartXfer+0x16a>
 800e86c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e86e:	3301      	adds	r3, #1
 800e870:	653b      	str	r3, [r7, #80]	@ 0x50
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	781b      	ldrb	r3, [r3, #0]
 800e876:	00db      	lsls	r3, r3, #3
 800e878:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e87c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e880:	6859      	ldr	r1, [r3, #4]
 800e882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e884:	069a      	lsls	r2, r3, #26
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	00db      	lsls	r3, r3, #3
 800e88c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e890:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e894:	430a      	orrs	r2, r1
 800e896:	605a      	str	r2, [r3, #4]
 800e898:	e048      	b.n	800e92c <USB_EPStartXfer+0x224>
 800e89a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e89c:	095b      	lsrs	r3, r3, #5
 800e89e:	653b      	str	r3, [r7, #80]	@ 0x50
 800e8a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8a2:	f003 031f 	and.w	r3, r3, #31
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d102      	bne.n	800e8b0 <USB_EPStartXfer+0x1a8>
 800e8aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	00db      	lsls	r3, r3, #3
 800e8b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8be:	685a      	ldr	r2, [r3, #4]
 800e8c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8c2:	069b      	lsls	r3, r3, #26
 800e8c4:	431a      	orrs	r2, r3
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	00db      	lsls	r3, r3, #3
 800e8cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8d4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e8d8:	605a      	str	r2, [r3, #4]
 800e8da:	e027      	b.n	800e92c <USB_EPStartXfer+0x224>
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	785b      	ldrb	r3, [r3, #1]
 800e8e0:	2b01      	cmp	r3, #1
 800e8e2:	d123      	bne.n	800e92c <USB_EPStartXfer+0x224>
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	00db      	lsls	r3, r3, #3
 800e8ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8f2:	685a      	ldr	r2, [r3, #4]
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	00db      	lsls	r3, r3, #3
 800e8fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e902:	b292      	uxth	r2, r2
 800e904:	605a      	str	r2, [r3, #4]
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	00db      	lsls	r3, r3, #3
 800e90c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e910:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e914:	6859      	ldr	r1, [r3, #4]
 800e916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e918:	041a      	lsls	r2, r3, #16
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	00db      	lsls	r3, r3, #3
 800e920:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e924:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e928:	430a      	orrs	r2, r1
 800e92a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	895b      	ldrh	r3, [r3, #10]
 800e930:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	6959      	ldr	r1, [r3, #20]
 800e936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e938:	b29b      	uxth	r3, r3
 800e93a:	8b7a      	ldrh	r2, [r7, #26]
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f001 f86a 	bl	800fa16 <USB_WritePMA>
            ep->xfer_buff += len;
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	695a      	ldr	r2, [r3, #20]
 800e946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e948:	441a      	add	r2, r3
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	6a1a      	ldr	r2, [r3, #32]
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	691b      	ldr	r3, [r3, #16]
 800e956:	429a      	cmp	r2, r3
 800e958:	d906      	bls.n	800e968 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	6a1a      	ldr	r2, [r3, #32]
 800e95e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e960:	1ad2      	subs	r2, r2, r3
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	621a      	str	r2, [r3, #32]
 800e966:	e005      	b.n	800e974 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	6a1b      	ldr	r3, [r3, #32]
 800e96c:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	2200      	movs	r2, #0
 800e972:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	785b      	ldrb	r3, [r3, #1]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d16d      	bne.n	800ea58 <USB_EPStartXfer+0x350>
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	00db      	lsls	r3, r3, #3
 800e982:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e986:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	00db      	lsls	r3, r3, #3
 800e992:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e996:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e99a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e99e:	601a      	str	r2, [r3, #0]
 800e9a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d112      	bne.n	800e9cc <USB_EPStartXfer+0x2c4>
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	781b      	ldrb	r3, [r3, #0]
 800e9aa:	00db      	lsls	r3, r3, #3
 800e9ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	00db      	lsls	r3, r3, #3
 800e9bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e9c8:	601a      	str	r2, [r3, #0]
 800e9ca:	e06d      	b.n	800eaa8 <USB_EPStartXfer+0x3a0>
 800e9cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800e9d0:	d81e      	bhi.n	800ea10 <USB_EPStartXfer+0x308>
 800e9d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9d4:	085b      	lsrs	r3, r3, #1
 800e9d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e9d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9da:	f003 0301 	and.w	r3, r3, #1
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d002      	beq.n	800e9e8 <USB_EPStartXfer+0x2e0>
 800e9e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	00db      	lsls	r3, r3, #3
 800e9ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9f6:	6819      	ldr	r1, [r3, #0]
 800e9f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9fa:	069a      	lsls	r2, r3, #26
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	00db      	lsls	r3, r3, #3
 800ea02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea0a:	430a      	orrs	r2, r1
 800ea0c:	601a      	str	r2, [r3, #0]
 800ea0e:	e04b      	b.n	800eaa8 <USB_EPStartXfer+0x3a0>
 800ea10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea12:	095b      	lsrs	r3, r3, #5
 800ea14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea18:	f003 031f 	and.w	r3, r3, #31
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d102      	bne.n	800ea26 <USB_EPStartXfer+0x31e>
 800ea20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea22:	3b01      	subs	r3, #1
 800ea24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	00db      	lsls	r3, r3, #3
 800ea2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea38:	069b      	lsls	r3, r3, #26
 800ea3a:	431a      	orrs	r2, r3
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	00db      	lsls	r3, r3, #3
 800ea42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea4a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ea4e:	601a      	str	r2, [r3, #0]
 800ea50:	e02a      	b.n	800eaa8 <USB_EPStartXfer+0x3a0>
 800ea52:	bf00      	nop
 800ea54:	07ff8f8f 	.word	0x07ff8f8f
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	785b      	ldrb	r3, [r3, #1]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d123      	bne.n	800eaa8 <USB_EPStartXfer+0x3a0>
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	00db      	lsls	r3, r3, #3
 800ea66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	00db      	lsls	r3, r3, #3
 800ea76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea7e:	b292      	uxth	r2, r2
 800ea80:	601a      	str	r2, [r3, #0]
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	00db      	lsls	r3, r3, #3
 800ea88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea90:	6819      	ldr	r1, [r3, #0]
 800ea92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea94:	041a      	lsls	r2, r3, #16
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	781b      	ldrb	r3, [r3, #0]
 800ea9a:	00db      	lsls	r3, r3, #3
 800ea9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eaa0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eaa4:	430a      	orrs	r2, r1
 800eaa6:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	891b      	ldrh	r3, [r3, #8]
 800eaac:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	6959      	ldr	r1, [r3, #20]
 800eab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	8b7a      	ldrh	r2, [r7, #26]
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 ffac 	bl	800fa16 <USB_WritePMA>
 800eabe:	e2fd      	b.n	800f0bc <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	785b      	ldrb	r3, [r3, #1]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d16a      	bne.n	800eb9e <USB_EPStartXfer+0x496>
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	00db      	lsls	r3, r3, #3
 800eace:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ead2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	00db      	lsls	r3, r3, #3
 800eade:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eae2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eae6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800eaea:	601a      	str	r2, [r3, #0]
 800eaec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d112      	bne.n	800eb18 <USB_EPStartXfer+0x410>
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	781b      	ldrb	r3, [r3, #0]
 800eaf6:	00db      	lsls	r3, r3, #3
 800eaf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eafc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	781b      	ldrb	r3, [r3, #0]
 800eb06:	00db      	lsls	r3, r3, #3
 800eb08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb10:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800eb14:	601a      	str	r2, [r3, #0]
 800eb16:	e06a      	b.n	800ebee <USB_EPStartXfer+0x4e6>
 800eb18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb1a:	2b3e      	cmp	r3, #62	@ 0x3e
 800eb1c:	d81e      	bhi.n	800eb5c <USB_EPStartXfer+0x454>
 800eb1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb20:	085b      	lsrs	r3, r3, #1
 800eb22:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb26:	f003 0301 	and.w	r3, r3, #1
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d002      	beq.n	800eb34 <USB_EPStartXfer+0x42c>
 800eb2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb30:	3301      	adds	r3, #1
 800eb32:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	00db      	lsls	r3, r3, #3
 800eb3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb42:	6819      	ldr	r1, [r3, #0]
 800eb44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb46:	069a      	lsls	r2, r3, #26
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	00db      	lsls	r3, r3, #3
 800eb4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb56:	430a      	orrs	r2, r1
 800eb58:	601a      	str	r2, [r3, #0]
 800eb5a:	e048      	b.n	800ebee <USB_EPStartXfer+0x4e6>
 800eb5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb5e:	095b      	lsrs	r3, r3, #5
 800eb60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb64:	f003 031f 	and.w	r3, r3, #31
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d102      	bne.n	800eb72 <USB_EPStartXfer+0x46a>
 800eb6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb6e:	3b01      	subs	r3, #1
 800eb70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	00db      	lsls	r3, r3, #3
 800eb78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb80:	681a      	ldr	r2, [r3, #0]
 800eb82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb84:	069b      	lsls	r3, r3, #26
 800eb86:	431a      	orrs	r2, r3
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	00db      	lsls	r3, r3, #3
 800eb8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb96:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800eb9a:	601a      	str	r2, [r3, #0]
 800eb9c:	e027      	b.n	800ebee <USB_EPStartXfer+0x4e6>
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	785b      	ldrb	r3, [r3, #1]
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d123      	bne.n	800ebee <USB_EPStartXfer+0x4e6>
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	00db      	lsls	r3, r3, #3
 800ebac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebb4:	681a      	ldr	r2, [r3, #0]
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	00db      	lsls	r3, r3, #3
 800ebbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebc4:	b292      	uxth	r2, r2
 800ebc6:	601a      	str	r2, [r3, #0]
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	00db      	lsls	r3, r3, #3
 800ebce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebd2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebd6:	6819      	ldr	r1, [r3, #0]
 800ebd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebda:	041a      	lsls	r2, r3, #16
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	00db      	lsls	r3, r3, #3
 800ebe2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebe6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebea:	430a      	orrs	r2, r1
 800ebec:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	891b      	ldrh	r3, [r3, #8]
 800ebf2:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	6959      	ldr	r1, [r3, #20]
 800ebf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	8b7a      	ldrh	r2, [r7, #26]
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 ff09 	bl	800fa16 <USB_WritePMA>
            ep->xfer_buff += len;
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	695a      	ldr	r2, [r3, #20]
 800ec08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec0a:	441a      	add	r2, r3
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	6a1a      	ldr	r2, [r3, #32]
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	691b      	ldr	r3, [r3, #16]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d906      	bls.n	800ec2a <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	6a1a      	ldr	r2, [r3, #32]
 800ec20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec22:	1ad2      	subs	r2, r2, r3
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	621a      	str	r2, [r3, #32]
 800ec28:	e005      	b.n	800ec36 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	6a1b      	ldr	r3, [r3, #32]
 800ec2e:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	2200      	movs	r2, #0
 800ec34:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	785b      	ldrb	r3, [r3, #1]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d16a      	bne.n	800ed14 <USB_EPStartXfer+0x60c>
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	781b      	ldrb	r3, [r3, #0]
 800ec42:	00db      	lsls	r3, r3, #3
 800ec44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec4c:	685a      	ldr	r2, [r3, #4]
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	00db      	lsls	r3, r3, #3
 800ec54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec5c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ec60:	605a      	str	r2, [r3, #4]
 800ec62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d112      	bne.n	800ec8e <USB_EPStartXfer+0x586>
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	781b      	ldrb	r3, [r3, #0]
 800ec6c:	00db      	lsls	r3, r3, #3
 800ec6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec76:	685a      	ldr	r2, [r3, #4]
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	781b      	ldrb	r3, [r3, #0]
 800ec7c:	00db      	lsls	r3, r3, #3
 800ec7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec86:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ec8a:	605a      	str	r2, [r3, #4]
 800ec8c:	e06a      	b.n	800ed64 <USB_EPStartXfer+0x65c>
 800ec8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec90:	2b3e      	cmp	r3, #62	@ 0x3e
 800ec92:	d81e      	bhi.n	800ecd2 <USB_EPStartXfer+0x5ca>
 800ec94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec96:	085b      	lsrs	r3, r3, #1
 800ec98:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec9c:	f003 0301 	and.w	r3, r3, #1
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d002      	beq.n	800ecaa <USB_EPStartXfer+0x5a2>
 800eca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eca6:	3301      	adds	r3, #1
 800eca8:	647b      	str	r3, [r7, #68]	@ 0x44
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	00db      	lsls	r3, r3, #3
 800ecb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecb8:	6859      	ldr	r1, [r3, #4]
 800ecba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecbc:	069a      	lsls	r2, r3, #26
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	00db      	lsls	r3, r3, #3
 800ecc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecc8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eccc:	430a      	orrs	r2, r1
 800ecce:	605a      	str	r2, [r3, #4]
 800ecd0:	e048      	b.n	800ed64 <USB_EPStartXfer+0x65c>
 800ecd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecd4:	095b      	lsrs	r3, r3, #5
 800ecd6:	647b      	str	r3, [r7, #68]	@ 0x44
 800ecd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecda:	f003 031f 	and.w	r3, r3, #31
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d102      	bne.n	800ece8 <USB_EPStartXfer+0x5e0>
 800ece2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ece4:	3b01      	subs	r3, #1
 800ece6:	647b      	str	r3, [r7, #68]	@ 0x44
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	00db      	lsls	r3, r3, #3
 800ecee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecf2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecf6:	685a      	ldr	r2, [r3, #4]
 800ecf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecfa:	069b      	lsls	r3, r3, #26
 800ecfc:	431a      	orrs	r2, r3
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	00db      	lsls	r3, r3, #3
 800ed04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed0c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ed10:	605a      	str	r2, [r3, #4]
 800ed12:	e027      	b.n	800ed64 <USB_EPStartXfer+0x65c>
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	785b      	ldrb	r3, [r3, #1]
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d123      	bne.n	800ed64 <USB_EPStartXfer+0x65c>
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	00db      	lsls	r3, r3, #3
 800ed22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed2a:	685a      	ldr	r2, [r3, #4]
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	00db      	lsls	r3, r3, #3
 800ed32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed3a:	b292      	uxth	r2, r2
 800ed3c:	605a      	str	r2, [r3, #4]
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	00db      	lsls	r3, r3, #3
 800ed44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed4c:	6859      	ldr	r1, [r3, #4]
 800ed4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed50:	041a      	lsls	r2, r3, #16
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	00db      	lsls	r3, r3, #3
 800ed58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed60:	430a      	orrs	r2, r1
 800ed62:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	895b      	ldrh	r3, [r3, #10]
 800ed68:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	6959      	ldr	r1, [r3, #20]
 800ed6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	8b7a      	ldrh	r2, [r7, #26]
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f000 fe4e 	bl	800fa16 <USB_WritePMA>
 800ed7a:	e19f      	b.n	800f0bc <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	6a1b      	ldr	r3, [r3, #32]
 800ed80:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	4413      	add	r3, r2
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	4ba0      	ldr	r3, [pc, #640]	@ (800f010 <USB_EPStartXfer+0x908>)
 800ed90:	4013      	ands	r3, r2
 800ed92:	617b      	str	r3, [r7, #20]
 800ed94:	687a      	ldr	r2, [r7, #4]
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	009b      	lsls	r3, r3, #2
 800ed9c:	441a      	add	r2, r3
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eda4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eda8:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	00db      	lsls	r3, r3, #3
 800edb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	00db      	lsls	r3, r3, #3
 800edc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edc4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800edc8:	b292      	uxth	r2, r2
 800edca:	601a      	str	r2, [r3, #0]
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	781b      	ldrb	r3, [r3, #0]
 800edd0:	00db      	lsls	r3, r3, #3
 800edd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edd6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800edda:	6819      	ldr	r1, [r3, #0]
 800eddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edde:	041a      	lsls	r2, r3, #16
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	00db      	lsls	r3, r3, #3
 800ede6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800edee:	430a      	orrs	r2, r1
 800edf0:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	891b      	ldrh	r3, [r3, #8]
 800edf6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	6959      	ldr	r1, [r3, #20]
 800edfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edfe:	b29b      	uxth	r3, r3
 800ee00:	8b7a      	ldrh	r2, [r7, #26]
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 fe07 	bl	800fa16 <USB_WritePMA>
 800ee08:	e158      	b.n	800f0bc <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	6a1a      	ldr	r2, [r3, #32]
 800ee0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee10:	1ad2      	subs	r2, r2, r3
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ee16:	687a      	ldr	r2, [r7, #4]
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	4413      	add	r3, r2
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	f000 80a3 	beq.w	800ef72 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	785b      	ldrb	r3, [r3, #1]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d16a      	bne.n	800ef0a <USB_EPStartXfer+0x802>
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	00db      	lsls	r3, r3, #3
 800ee3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee42:	685a      	ldr	r2, [r3, #4]
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	00db      	lsls	r3, r3, #3
 800ee4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee52:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ee56:	605a      	str	r2, [r3, #4]
 800ee58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d112      	bne.n	800ee84 <USB_EPStartXfer+0x77c>
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	00db      	lsls	r3, r3, #3
 800ee64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee6c:	685a      	ldr	r2, [r3, #4]
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	00db      	lsls	r3, r3, #3
 800ee74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee7c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ee80:	605a      	str	r2, [r3, #4]
 800ee82:	e06a      	b.n	800ef5a <USB_EPStartXfer+0x852>
 800ee84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee86:	2b3e      	cmp	r3, #62	@ 0x3e
 800ee88:	d81e      	bhi.n	800eec8 <USB_EPStartXfer+0x7c0>
 800ee8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee8c:	085b      	lsrs	r3, r3, #1
 800ee8e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee92:	f003 0301 	and.w	r3, r3, #1
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d002      	beq.n	800eea0 <USB_EPStartXfer+0x798>
 800ee9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	643b      	str	r3, [r7, #64]	@ 0x40
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	00db      	lsls	r3, r3, #3
 800eea6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eeaa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eeae:	6859      	ldr	r1, [r3, #4]
 800eeb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eeb2:	069a      	lsls	r2, r3, #26
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	00db      	lsls	r3, r3, #3
 800eeba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eebe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eec2:	430a      	orrs	r2, r1
 800eec4:	605a      	str	r2, [r3, #4]
 800eec6:	e048      	b.n	800ef5a <USB_EPStartXfer+0x852>
 800eec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eeca:	095b      	lsrs	r3, r3, #5
 800eecc:	643b      	str	r3, [r7, #64]	@ 0x40
 800eece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eed0:	f003 031f 	and.w	r3, r3, #31
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d102      	bne.n	800eede <USB_EPStartXfer+0x7d6>
 800eed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eeda:	3b01      	subs	r3, #1
 800eedc:	643b      	str	r3, [r7, #64]	@ 0x40
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	00db      	lsls	r3, r3, #3
 800eee4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eee8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eeec:	685a      	ldr	r2, [r3, #4]
 800eeee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eef0:	069b      	lsls	r3, r3, #26
 800eef2:	431a      	orrs	r2, r3
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	00db      	lsls	r3, r3, #3
 800eefa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eefe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef02:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ef06:	605a      	str	r2, [r3, #4]
 800ef08:	e027      	b.n	800ef5a <USB_EPStartXfer+0x852>
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	785b      	ldrb	r3, [r3, #1]
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	d123      	bne.n	800ef5a <USB_EPStartXfer+0x852>
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	00db      	lsls	r3, r3, #3
 800ef18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef20:	685a      	ldr	r2, [r3, #4]
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	00db      	lsls	r3, r3, #3
 800ef28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef30:	b292      	uxth	r2, r2
 800ef32:	605a      	str	r2, [r3, #4]
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	00db      	lsls	r3, r3, #3
 800ef3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef42:	6859      	ldr	r1, [r3, #4]
 800ef44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef46:	041a      	lsls	r2, r3, #16
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	00db      	lsls	r3, r3, #3
 800ef4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef56:	430a      	orrs	r2, r1
 800ef58:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	895b      	ldrh	r3, [r3, #10]
 800ef5e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	6959      	ldr	r1, [r3, #20]
 800ef64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	8b7a      	ldrh	r2, [r7, #26]
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f000 fd53 	bl	800fa16 <USB_WritePMA>
 800ef70:	e0a4      	b.n	800f0bc <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	785b      	ldrb	r3, [r3, #1]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d16d      	bne.n	800f056 <USB_EPStartXfer+0x94e>
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	00db      	lsls	r3, r3, #3
 800ef80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef88:	681a      	ldr	r2, [r3, #0]
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	00db      	lsls	r3, r3, #3
 800ef90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef98:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ef9c:	601a      	str	r2, [r3, #0]
 800ef9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d112      	bne.n	800efca <USB_EPStartXfer+0x8c2>
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	00db      	lsls	r3, r3, #3
 800efaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efb2:	681a      	ldr	r2, [r3, #0]
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	781b      	ldrb	r3, [r3, #0]
 800efb8:	00db      	lsls	r3, r3, #3
 800efba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efbe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efc2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800efc6:	601a      	str	r2, [r3, #0]
 800efc8:	e06d      	b.n	800f0a6 <USB_EPStartXfer+0x99e>
 800efca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efcc:	2b3e      	cmp	r3, #62	@ 0x3e
 800efce:	d821      	bhi.n	800f014 <USB_EPStartXfer+0x90c>
 800efd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efd2:	085b      	lsrs	r3, r3, #1
 800efd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800efd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efd8:	f003 0301 	and.w	r3, r3, #1
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d002      	beq.n	800efe6 <USB_EPStartXfer+0x8de>
 800efe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efe2:	3301      	adds	r3, #1
 800efe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	781b      	ldrb	r3, [r3, #0]
 800efea:	00db      	lsls	r3, r3, #3
 800efec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eff0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eff4:	6819      	ldr	r1, [r3, #0]
 800eff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eff8:	069a      	lsls	r2, r3, #26
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	00db      	lsls	r3, r3, #3
 800f000:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f004:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f008:	430a      	orrs	r2, r1
 800f00a:	601a      	str	r2, [r3, #0]
 800f00c:	e04b      	b.n	800f0a6 <USB_EPStartXfer+0x99e>
 800f00e:	bf00      	nop
 800f010:	07ff8e8f 	.word	0x07ff8e8f
 800f014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f016:	095b      	lsrs	r3, r3, #5
 800f018:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f01a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f01c:	f003 031f 	and.w	r3, r3, #31
 800f020:	2b00      	cmp	r3, #0
 800f022:	d102      	bne.n	800f02a <USB_EPStartXfer+0x922>
 800f024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f026:	3b01      	subs	r3, #1
 800f028:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	781b      	ldrb	r3, [r3, #0]
 800f02e:	00db      	lsls	r3, r3, #3
 800f030:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f034:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f03c:	069b      	lsls	r3, r3, #26
 800f03e:	431a      	orrs	r2, r3
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	781b      	ldrb	r3, [r3, #0]
 800f044:	00db      	lsls	r3, r3, #3
 800f046:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f04a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f04e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f052:	601a      	str	r2, [r3, #0]
 800f054:	e027      	b.n	800f0a6 <USB_EPStartXfer+0x99e>
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	785b      	ldrb	r3, [r3, #1]
 800f05a:	2b01      	cmp	r3, #1
 800f05c:	d123      	bne.n	800f0a6 <USB_EPStartXfer+0x99e>
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	00db      	lsls	r3, r3, #3
 800f064:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f068:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	00db      	lsls	r3, r3, #3
 800f074:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f078:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f07c:	b292      	uxth	r2, r2
 800f07e:	601a      	str	r2, [r3, #0]
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	00db      	lsls	r3, r3, #3
 800f086:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f08a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f08e:	6819      	ldr	r1, [r3, #0]
 800f090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f092:	041a      	lsls	r2, r3, #16
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	00db      	lsls	r3, r3, #3
 800f09a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f09e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0a2:	430a      	orrs	r2, r1
 800f0a4:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	891b      	ldrh	r3, [r3, #8]
 800f0aa:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	6959      	ldr	r1, [r3, #20]
 800f0b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	8b7a      	ldrh	r2, [r7, #26]
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f000 fcad 	bl	800fa16 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	781b      	ldrb	r3, [r3, #0]
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	4413      	add	r3, r2
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	4b8b      	ldr	r3, [pc, #556]	@ (800f2f8 <USB_EPStartXfer+0xbf0>)
 800f0ca:	4013      	ands	r3, r2
 800f0cc:	60fb      	str	r3, [r7, #12]
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f083 0310 	eor.w	r3, r3, #16
 800f0d4:	60fb      	str	r3, [r7, #12]
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	f083 0320 	eor.w	r3, r3, #32
 800f0dc:	60fb      	str	r3, [r7, #12]
 800f0de:	687a      	ldr	r2, [r7, #4]
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	009b      	lsls	r3, r3, #2
 800f0e6:	441a      	add	r2, r3
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f0ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0f2:	6013      	str	r3, [r2, #0]
 800f0f4:	e36b      	b.n	800f7ce <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	7b1b      	ldrb	r3, [r3, #12]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	f040 8081 	bne.w	800f202 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	699a      	ldr	r2, [r3, #24]
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	691b      	ldr	r3, [r3, #16]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d909      	bls.n	800f120 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	691b      	ldr	r3, [r3, #16]
 800f110:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	699a      	ldr	r2, [r3, #24]
 800f116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f118:	1ad2      	subs	r2, r2, r3
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	619a      	str	r2, [r3, #24]
 800f11e:	e005      	b.n	800f12c <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	699b      	ldr	r3, [r3, #24]
 800f124:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	2200      	movs	r2, #0
 800f12a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	00db      	lsls	r3, r3, #3
 800f132:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f136:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f13a:	685a      	ldr	r2, [r3, #4]
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	00db      	lsls	r3, r3, #3
 800f142:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f146:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f14a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f14e:	605a      	str	r2, [r3, #4]
 800f150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f152:	2b00      	cmp	r3, #0
 800f154:	d112      	bne.n	800f17c <USB_EPStartXfer+0xa74>
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	00db      	lsls	r3, r3, #3
 800f15c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f160:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f164:	685a      	ldr	r2, [r3, #4]
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	00db      	lsls	r3, r3, #3
 800f16c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f170:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f174:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f178:	605a      	str	r2, [r3, #4]
 800f17a:	e30c      	b.n	800f796 <USB_EPStartXfer+0x108e>
 800f17c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f17e:	2b3e      	cmp	r3, #62	@ 0x3e
 800f180:	d81e      	bhi.n	800f1c0 <USB_EPStartXfer+0xab8>
 800f182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f184:	085b      	lsrs	r3, r3, #1
 800f186:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f18a:	f003 0301 	and.w	r3, r3, #1
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d002      	beq.n	800f198 <USB_EPStartXfer+0xa90>
 800f192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f194:	3301      	adds	r3, #1
 800f196:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	00db      	lsls	r3, r3, #3
 800f19e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1a6:	6859      	ldr	r1, [r3, #4]
 800f1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1aa:	069a      	lsls	r2, r3, #26
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	00db      	lsls	r3, r3, #3
 800f1b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1ba:	430a      	orrs	r2, r1
 800f1bc:	605a      	str	r2, [r3, #4]
 800f1be:	e2ea      	b.n	800f796 <USB_EPStartXfer+0x108e>
 800f1c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1c2:	095b      	lsrs	r3, r3, #5
 800f1c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f1c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1c8:	f003 031f 	and.w	r3, r3, #31
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d102      	bne.n	800f1d6 <USB_EPStartXfer+0xace>
 800f1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1d2:	3b01      	subs	r3, #1
 800f1d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	00db      	lsls	r3, r3, #3
 800f1dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1e4:	685a      	ldr	r2, [r3, #4]
 800f1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e8:	069b      	lsls	r3, r3, #26
 800f1ea:	431a      	orrs	r2, r3
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	00db      	lsls	r3, r3, #3
 800f1f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f1fe:	605a      	str	r2, [r3, #4]
 800f200:	e2c9      	b.n	800f796 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	78db      	ldrb	r3, [r3, #3]
 800f206:	2b02      	cmp	r3, #2
 800f208:	f040 8176 	bne.w	800f4f8 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	785b      	ldrb	r3, [r3, #1]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d173      	bne.n	800f2fc <USB_EPStartXfer+0xbf4>
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	00db      	lsls	r3, r3, #3
 800f21a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f21e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	00db      	lsls	r3, r3, #3
 800f22a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f22e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f232:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f236:	601a      	str	r2, [r3, #0]
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	691b      	ldr	r3, [r3, #16]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d112      	bne.n	800f266 <USB_EPStartXfer+0xb5e>
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	00db      	lsls	r3, r3, #3
 800f246:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f24a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	00db      	lsls	r3, r3, #3
 800f256:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f25a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f25e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f262:	601a      	str	r2, [r3, #0]
 800f264:	e073      	b.n	800f34e <USB_EPStartXfer+0xc46>
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	691b      	ldr	r3, [r3, #16]
 800f26a:	2b3e      	cmp	r3, #62	@ 0x3e
 800f26c:	d820      	bhi.n	800f2b0 <USB_EPStartXfer+0xba8>
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	691b      	ldr	r3, [r3, #16]
 800f272:	085b      	lsrs	r3, r3, #1
 800f274:	637b      	str	r3, [r7, #52]	@ 0x34
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	691b      	ldr	r3, [r3, #16]
 800f27a:	f003 0301 	and.w	r3, r3, #1
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d002      	beq.n	800f288 <USB_EPStartXfer+0xb80>
 800f282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f284:	3301      	adds	r3, #1
 800f286:	637b      	str	r3, [r7, #52]	@ 0x34
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	00db      	lsls	r3, r3, #3
 800f28e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f292:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f296:	6819      	ldr	r1, [r3, #0]
 800f298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f29a:	069a      	lsls	r2, r3, #26
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	00db      	lsls	r3, r3, #3
 800f2a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2aa:	430a      	orrs	r2, r1
 800f2ac:	601a      	str	r2, [r3, #0]
 800f2ae:	e04e      	b.n	800f34e <USB_EPStartXfer+0xc46>
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	691b      	ldr	r3, [r3, #16]
 800f2b4:	095b      	lsrs	r3, r3, #5
 800f2b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	691b      	ldr	r3, [r3, #16]
 800f2bc:	f003 031f 	and.w	r3, r3, #31
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d102      	bne.n	800f2ca <USB_EPStartXfer+0xbc2>
 800f2c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2c6:	3b01      	subs	r3, #1
 800f2c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	00db      	lsls	r3, r3, #3
 800f2d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2d8:	681a      	ldr	r2, [r3, #0]
 800f2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2dc:	069b      	lsls	r3, r3, #26
 800f2de:	431a      	orrs	r2, r3
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	00db      	lsls	r3, r3, #3
 800f2e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2ee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f2f2:	601a      	str	r2, [r3, #0]
 800f2f4:	e02b      	b.n	800f34e <USB_EPStartXfer+0xc46>
 800f2f6:	bf00      	nop
 800f2f8:	07ff8fbf 	.word	0x07ff8fbf
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	785b      	ldrb	r3, [r3, #1]
 800f300:	2b01      	cmp	r3, #1
 800f302:	d124      	bne.n	800f34e <USB_EPStartXfer+0xc46>
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	00db      	lsls	r3, r3, #3
 800f30a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f30e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f312:	681a      	ldr	r2, [r3, #0]
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	00db      	lsls	r3, r3, #3
 800f31a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f31e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f322:	b292      	uxth	r2, r2
 800f324:	601a      	str	r2, [r3, #0]
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	00db      	lsls	r3, r3, #3
 800f32c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f330:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f334:	6819      	ldr	r1, [r3, #0]
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	691b      	ldr	r3, [r3, #16]
 800f33a:	041a      	lsls	r2, r3, #16
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	00db      	lsls	r3, r3, #3
 800f342:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f346:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f34a:	430a      	orrs	r2, r1
 800f34c:	601a      	str	r2, [r3, #0]
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	785b      	ldrb	r3, [r3, #1]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d170      	bne.n	800f438 <USB_EPStartXfer+0xd30>
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	00db      	lsls	r3, r3, #3
 800f35c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f360:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f364:	685a      	ldr	r2, [r3, #4]
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	00db      	lsls	r3, r3, #3
 800f36c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f370:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f374:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f378:	605a      	str	r2, [r3, #4]
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	691b      	ldr	r3, [r3, #16]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d112      	bne.n	800f3a8 <USB_EPStartXfer+0xca0>
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	00db      	lsls	r3, r3, #3
 800f388:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f38c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f390:	685a      	ldr	r2, [r3, #4]
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	00db      	lsls	r3, r3, #3
 800f398:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f39c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3a0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f3a4:	605a      	str	r2, [r3, #4]
 800f3a6:	e070      	b.n	800f48a <USB_EPStartXfer+0xd82>
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	691b      	ldr	r3, [r3, #16]
 800f3ac:	2b3e      	cmp	r3, #62	@ 0x3e
 800f3ae:	d820      	bhi.n	800f3f2 <USB_EPStartXfer+0xcea>
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	691b      	ldr	r3, [r3, #16]
 800f3b4:	085b      	lsrs	r3, r3, #1
 800f3b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	691b      	ldr	r3, [r3, #16]
 800f3bc:	f003 0301 	and.w	r3, r3, #1
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d002      	beq.n	800f3ca <USB_EPStartXfer+0xcc2>
 800f3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	633b      	str	r3, [r7, #48]	@ 0x30
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	00db      	lsls	r3, r3, #3
 800f3d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3d8:	6859      	ldr	r1, [r3, #4]
 800f3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3dc:	069a      	lsls	r2, r3, #26
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	00db      	lsls	r3, r3, #3
 800f3e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3ec:	430a      	orrs	r2, r1
 800f3ee:	605a      	str	r2, [r3, #4]
 800f3f0:	e04b      	b.n	800f48a <USB_EPStartXfer+0xd82>
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	691b      	ldr	r3, [r3, #16]
 800f3f6:	095b      	lsrs	r3, r3, #5
 800f3f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	691b      	ldr	r3, [r3, #16]
 800f3fe:	f003 031f 	and.w	r3, r3, #31
 800f402:	2b00      	cmp	r3, #0
 800f404:	d102      	bne.n	800f40c <USB_EPStartXfer+0xd04>
 800f406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f408:	3b01      	subs	r3, #1
 800f40a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	00db      	lsls	r3, r3, #3
 800f412:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f416:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f41a:	685a      	ldr	r2, [r3, #4]
 800f41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f41e:	069b      	lsls	r3, r3, #26
 800f420:	431a      	orrs	r2, r3
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	00db      	lsls	r3, r3, #3
 800f428:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f42c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f430:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f434:	605a      	str	r2, [r3, #4]
 800f436:	e028      	b.n	800f48a <USB_EPStartXfer+0xd82>
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	785b      	ldrb	r3, [r3, #1]
 800f43c:	2b01      	cmp	r3, #1
 800f43e:	d124      	bne.n	800f48a <USB_EPStartXfer+0xd82>
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	00db      	lsls	r3, r3, #3
 800f446:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f44a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f44e:	685a      	ldr	r2, [r3, #4]
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	00db      	lsls	r3, r3, #3
 800f456:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f45a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f45e:	b292      	uxth	r2, r2
 800f460:	605a      	str	r2, [r3, #4]
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	00db      	lsls	r3, r3, #3
 800f468:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f46c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f470:	6859      	ldr	r1, [r3, #4]
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	691b      	ldr	r3, [r3, #16]
 800f476:	041a      	lsls	r2, r3, #16
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	00db      	lsls	r3, r3, #3
 800f47e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f482:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f486:	430a      	orrs	r2, r1
 800f488:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	69db      	ldr	r3, [r3, #28]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	f000 8181 	beq.w	800f796 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800f494:	687a      	ldr	r2, [r7, #4]
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	009b      	lsls	r3, r3, #2
 800f49c:	4413      	add	r3, r2
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f4a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f4a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d004      	beq.n	800f4b6 <USB_EPStartXfer+0xdae>
 800f4ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f4ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d10b      	bne.n	800f4ce <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f4b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f4b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	f040 816a 	bne.w	800f796 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f4c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f4c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	f040 8164 	bne.w	800f796 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	009b      	lsls	r3, r3, #2
 800f4d6:	4413      	add	r3, r2
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	4b98      	ldr	r3, [pc, #608]	@ (800f73c <USB_EPStartXfer+0x1034>)
 800f4dc:	4013      	ands	r3, r2
 800f4de:	623b      	str	r3, [r7, #32]
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	009b      	lsls	r3, r3, #2
 800f4e8:	441a      	add	r2, r3
 800f4ea:	6a3b      	ldr	r3, [r7, #32]
 800f4ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f4f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f4f4:	6013      	str	r3, [r2, #0]
 800f4f6:	e14e      	b.n	800f796 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	78db      	ldrb	r3, [r3, #3]
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	f040 8148 	bne.w	800f792 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	699a      	ldr	r2, [r3, #24]
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	691b      	ldr	r3, [r3, #16]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d909      	bls.n	800f522 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	691b      	ldr	r3, [r3, #16]
 800f512:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	699a      	ldr	r2, [r3, #24]
 800f518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f51a:	1ad2      	subs	r2, r2, r3
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	619a      	str	r2, [r3, #24]
 800f520:	e005      	b.n	800f52e <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	699b      	ldr	r3, [r3, #24]
 800f526:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	2200      	movs	r2, #0
 800f52c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	785b      	ldrb	r3, [r3, #1]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d16a      	bne.n	800f60c <USB_EPStartXfer+0xf04>
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	00db      	lsls	r3, r3, #3
 800f53c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f540:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f544:	681a      	ldr	r2, [r3, #0]
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	00db      	lsls	r3, r3, #3
 800f54c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f550:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f554:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f558:	601a      	str	r2, [r3, #0]
 800f55a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d112      	bne.n	800f586 <USB_EPStartXfer+0xe7e>
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	00db      	lsls	r3, r3, #3
 800f566:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f56a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f56e:	681a      	ldr	r2, [r3, #0]
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	781b      	ldrb	r3, [r3, #0]
 800f574:	00db      	lsls	r3, r3, #3
 800f576:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f57a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f57e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f582:	601a      	str	r2, [r3, #0]
 800f584:	e06a      	b.n	800f65c <USB_EPStartXfer+0xf54>
 800f586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f588:	2b3e      	cmp	r3, #62	@ 0x3e
 800f58a:	d81e      	bhi.n	800f5ca <USB_EPStartXfer+0xec2>
 800f58c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f58e:	085b      	lsrs	r3, r3, #1
 800f590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f594:	f003 0301 	and.w	r3, r3, #1
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d002      	beq.n	800f5a2 <USB_EPStartXfer+0xe9a>
 800f59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f59e:	3301      	adds	r3, #1
 800f5a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	00db      	lsls	r3, r3, #3
 800f5a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5b0:	6819      	ldr	r1, [r3, #0]
 800f5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5b4:	069a      	lsls	r2, r3, #26
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	00db      	lsls	r3, r3, #3
 800f5bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5c4:	430a      	orrs	r2, r1
 800f5c6:	601a      	str	r2, [r3, #0]
 800f5c8:	e048      	b.n	800f65c <USB_EPStartXfer+0xf54>
 800f5ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5cc:	095b      	lsrs	r3, r3, #5
 800f5ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f5d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5d2:	f003 031f 	and.w	r3, r3, #31
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d102      	bne.n	800f5e0 <USB_EPStartXfer+0xed8>
 800f5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	781b      	ldrb	r3, [r3, #0]
 800f5e4:	00db      	lsls	r3, r3, #3
 800f5e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f2:	069b      	lsls	r3, r3, #26
 800f5f4:	431a      	orrs	r2, r3
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	00db      	lsls	r3, r3, #3
 800f5fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f600:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f604:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f608:	601a      	str	r2, [r3, #0]
 800f60a:	e027      	b.n	800f65c <USB_EPStartXfer+0xf54>
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	785b      	ldrb	r3, [r3, #1]
 800f610:	2b01      	cmp	r3, #1
 800f612:	d123      	bne.n	800f65c <USB_EPStartXfer+0xf54>
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	00db      	lsls	r3, r3, #3
 800f61a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f61e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	00db      	lsls	r3, r3, #3
 800f62a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f62e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f632:	b292      	uxth	r2, r2
 800f634:	601a      	str	r2, [r3, #0]
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	00db      	lsls	r3, r3, #3
 800f63c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f640:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f644:	6819      	ldr	r1, [r3, #0]
 800f646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f648:	041a      	lsls	r2, r3, #16
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	00db      	lsls	r3, r3, #3
 800f650:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f654:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f658:	430a      	orrs	r2, r1
 800f65a:	601a      	str	r2, [r3, #0]
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	785b      	ldrb	r3, [r3, #1]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d16d      	bne.n	800f740 <USB_EPStartXfer+0x1038>
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	00db      	lsls	r3, r3, #3
 800f66a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f66e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f672:	685a      	ldr	r2, [r3, #4]
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	00db      	lsls	r3, r3, #3
 800f67a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f67e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f682:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f686:	605a      	str	r2, [r3, #4]
 800f688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d112      	bne.n	800f6b4 <USB_EPStartXfer+0xfac>
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	00db      	lsls	r3, r3, #3
 800f694:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f698:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f69c:	685a      	ldr	r2, [r3, #4]
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	00db      	lsls	r3, r3, #3
 800f6a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6ac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f6b0:	605a      	str	r2, [r3, #4]
 800f6b2:	e070      	b.n	800f796 <USB_EPStartXfer+0x108e>
 800f6b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6b6:	2b3e      	cmp	r3, #62	@ 0x3e
 800f6b8:	d81e      	bhi.n	800f6f8 <USB_EPStartXfer+0xff0>
 800f6ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6bc:	085b      	lsrs	r3, r3, #1
 800f6be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f6c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6c2:	f003 0301 	and.w	r3, r3, #1
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d002      	beq.n	800f6d0 <USB_EPStartXfer+0xfc8>
 800f6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6cc:	3301      	adds	r3, #1
 800f6ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	00db      	lsls	r3, r3, #3
 800f6d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6de:	6859      	ldr	r1, [r3, #4]
 800f6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6e2:	069a      	lsls	r2, r3, #26
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	00db      	lsls	r3, r3, #3
 800f6ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6f2:	430a      	orrs	r2, r1
 800f6f4:	605a      	str	r2, [r3, #4]
 800f6f6:	e04e      	b.n	800f796 <USB_EPStartXfer+0x108e>
 800f6f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6fa:	095b      	lsrs	r3, r3, #5
 800f6fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f6fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f700:	f003 031f 	and.w	r3, r3, #31
 800f704:	2b00      	cmp	r3, #0
 800f706:	d102      	bne.n	800f70e <USB_EPStartXfer+0x1006>
 800f708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f70a:	3b01      	subs	r3, #1
 800f70c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	00db      	lsls	r3, r3, #3
 800f714:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f718:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f71c:	685a      	ldr	r2, [r3, #4]
 800f71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f720:	069b      	lsls	r3, r3, #26
 800f722:	431a      	orrs	r2, r3
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	00db      	lsls	r3, r3, #3
 800f72a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f72e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f732:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f736:	605a      	str	r2, [r3, #4]
 800f738:	e02d      	b.n	800f796 <USB_EPStartXfer+0x108e>
 800f73a:	bf00      	nop
 800f73c:	07ff8f8f 	.word	0x07ff8f8f
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	785b      	ldrb	r3, [r3, #1]
 800f744:	2b01      	cmp	r3, #1
 800f746:	d126      	bne.n	800f796 <USB_EPStartXfer+0x108e>
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	00db      	lsls	r3, r3, #3
 800f74e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f752:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f756:	685a      	ldr	r2, [r3, #4]
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	00db      	lsls	r3, r3, #3
 800f75e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f762:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f766:	b292      	uxth	r2, r2
 800f768:	605a      	str	r2, [r3, #4]
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	00db      	lsls	r3, r3, #3
 800f770:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f774:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f778:	6859      	ldr	r1, [r3, #4]
 800f77a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f77c:	041a      	lsls	r2, r3, #16
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	781b      	ldrb	r3, [r3, #0]
 800f782:	00db      	lsls	r3, r3, #3
 800f784:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f788:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f78c:	430a      	orrs	r2, r1
 800f78e:	605a      	str	r2, [r3, #4]
 800f790:	e001      	b.n	800f796 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800f792:	2301      	movs	r3, #1
 800f794:	e01c      	b.n	800f7d0 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f796:	687a      	ldr	r2, [r7, #4]
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	009b      	lsls	r3, r3, #2
 800f79e:	4413      	add	r3, r2
 800f7a0:	681a      	ldr	r2, [r3, #0]
 800f7a2:	4b0d      	ldr	r3, [pc, #52]	@ (800f7d8 <USB_EPStartXfer+0x10d0>)
 800f7a4:	4013      	ands	r3, r2
 800f7a6:	61fb      	str	r3, [r7, #28]
 800f7a8:	69fb      	ldr	r3, [r7, #28]
 800f7aa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f7ae:	61fb      	str	r3, [r7, #28]
 800f7b0:	69fb      	ldr	r3, [r7, #28]
 800f7b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f7b6:	61fb      	str	r3, [r7, #28]
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	009b      	lsls	r3, r3, #2
 800f7c0:	441a      	add	r2, r3
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f7c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f7ce:	2300      	movs	r3, #0
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3758      	adds	r7, #88	@ 0x58
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}
 800f7d8:	07ffbf8f 	.word	0x07ffbf8f

0800f7dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b085      	sub	sp, #20
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	785b      	ldrb	r3, [r3, #1]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d018      	beq.n	800f820 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f7ee:	687a      	ldr	r2, [r7, #4]
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	009b      	lsls	r3, r3, #2
 800f7f6:	4413      	add	r3, r2
 800f7f8:	681a      	ldr	r2, [r3, #0]
 800f7fa:	4b19      	ldr	r3, [pc, #100]	@ (800f860 <USB_EPSetStall+0x84>)
 800f7fc:	4013      	ands	r3, r2
 800f7fe:	60bb      	str	r3, [r7, #8]
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	f083 0310 	eor.w	r3, r3, #16
 800f806:	60bb      	str	r3, [r7, #8]
 800f808:	687a      	ldr	r2, [r7, #4]
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	781b      	ldrb	r3, [r3, #0]
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	441a      	add	r2, r3
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f81c:	6013      	str	r3, [r2, #0]
 800f81e:	e017      	b.n	800f850 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	781b      	ldrb	r3, [r3, #0]
 800f826:	009b      	lsls	r3, r3, #2
 800f828:	4413      	add	r3, r2
 800f82a:	681a      	ldr	r2, [r3, #0]
 800f82c:	4b0d      	ldr	r3, [pc, #52]	@ (800f864 <USB_EPSetStall+0x88>)
 800f82e:	4013      	ands	r3, r2
 800f830:	60fb      	str	r3, [r7, #12]
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f838:	60fb      	str	r3, [r7, #12]
 800f83a:	687a      	ldr	r2, [r7, #4]
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	009b      	lsls	r3, r3, #2
 800f842:	441a      	add	r2, r3
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f84a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f84e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f850:	2300      	movs	r3, #0
}
 800f852:	4618      	mov	r0, r3
 800f854:	3714      	adds	r7, #20
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr
 800f85e:	bf00      	nop
 800f860:	07ff8fbf 	.word	0x07ff8fbf
 800f864:	07ffbf8f 	.word	0x07ffbf8f

0800f868 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800f868:	b480      	push	{r7}
 800f86a:	b089      	sub	sp, #36	@ 0x24
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	7b1b      	ldrb	r3, [r3, #12]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d17c      	bne.n	800f974 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	785b      	ldrb	r3, [r3, #1]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d03c      	beq.n	800f8fc <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f882:	687a      	ldr	r2, [r7, #4]
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	4413      	add	r3, r2
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	613b      	str	r3, [r7, #16]
 800f890:	693b      	ldr	r3, [r7, #16]
 800f892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f896:	2b00      	cmp	r3, #0
 800f898:	d013      	beq.n	800f8c2 <USB_EPClearStall+0x5a>
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	009b      	lsls	r3, r3, #2
 800f8a2:	4413      	add	r3, r2
 800f8a4:	681a      	ldr	r2, [r3, #0]
 800f8a6:	4b37      	ldr	r3, [pc, #220]	@ (800f984 <USB_EPClearStall+0x11c>)
 800f8a8:	4013      	ands	r3, r2
 800f8aa:	60fb      	str	r3, [r7, #12]
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	441a      	add	r2, r3
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f8bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f8c0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	78db      	ldrb	r3, [r3, #3]
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	d054      	beq.n	800f974 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f8ca:	687a      	ldr	r2, [r7, #4]
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	009b      	lsls	r3, r3, #2
 800f8d2:	4413      	add	r3, r2
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	4b2c      	ldr	r3, [pc, #176]	@ (800f988 <USB_EPClearStall+0x120>)
 800f8d8:	4013      	ands	r3, r2
 800f8da:	60bb      	str	r3, [r7, #8]
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	f083 0320 	eor.w	r3, r3, #32
 800f8e2:	60bb      	str	r3, [r7, #8]
 800f8e4:	687a      	ldr	r2, [r7, #4]
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	009b      	lsls	r3, r3, #2
 800f8ec:	441a      	add	r2, r3
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f8f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8f8:	6013      	str	r3, [r2, #0]
 800f8fa:	e03b      	b.n	800f974 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	009b      	lsls	r3, r3, #2
 800f904:	4413      	add	r3, r2
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	61fb      	str	r3, [r7, #28]
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f910:	2b00      	cmp	r3, #0
 800f912:	d013      	beq.n	800f93c <USB_EPClearStall+0xd4>
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	009b      	lsls	r3, r3, #2
 800f91c:	4413      	add	r3, r2
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	4b18      	ldr	r3, [pc, #96]	@ (800f984 <USB_EPClearStall+0x11c>)
 800f922:	4013      	ands	r3, r2
 800f924:	61bb      	str	r3, [r7, #24]
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	009b      	lsls	r3, r3, #2
 800f92e:	441a      	add	r2, r3
 800f930:	69bb      	ldr	r3, [r7, #24]
 800f932:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f93a:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f93c:	687a      	ldr	r2, [r7, #4]
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	009b      	lsls	r3, r3, #2
 800f944:	4413      	add	r3, r2
 800f946:	681a      	ldr	r2, [r3, #0]
 800f948:	4b10      	ldr	r3, [pc, #64]	@ (800f98c <USB_EPClearStall+0x124>)
 800f94a:	4013      	ands	r3, r2
 800f94c:	617b      	str	r3, [r7, #20]
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f954:	617b      	str	r3, [r7, #20]
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f95c:	617b      	str	r3, [r7, #20]
 800f95e:	687a      	ldr	r2, [r7, #4]
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	441a      	add	r2, r3
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f96e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f972:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f974:	2300      	movs	r3, #0
}
 800f976:	4618      	mov	r0, r3
 800f978:	3724      	adds	r7, #36	@ 0x24
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr
 800f982:	bf00      	nop
 800f984:	07ff8f8f 	.word	0x07ff8f8f
 800f988:	07ff8fbf 	.word	0x07ff8fbf
 800f98c:	07ffbf8f 	.word	0x07ffbf8f

0800f990 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	460b      	mov	r3, r1
 800f99a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f99c:	78fb      	ldrb	r3, [r7, #3]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d102      	bne.n	800f9a8 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2280      	movs	r2, #128	@ 0x80
 800f9a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f9a8:	2300      	movs	r3, #0
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	370c      	adds	r7, #12
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b4:	4770      	bx	lr

0800f9b6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800f9b6:	b480      	push	{r7}
 800f9b8:	b083      	sub	sp, #12
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f9c2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f9ca:	2300      	movs	r3, #0
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	370c      	adds	r7, #12
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d6:	4770      	bx	lr

0800f9d8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b083      	sub	sp, #12
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f9e4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f9ec:	2300      	movs	r3, #0
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	370c      	adds	r7, #12
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr

0800f9fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800f9fa:	b480      	push	{r7}
 800f9fc:	b085      	sub	sp, #20
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa06:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800fa08:	68fb      	ldr	r3, [r7, #12]
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3714      	adds	r7, #20
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa14:	4770      	bx	lr

0800fa16 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fa16:	b480      	push	{r7}
 800fa18:	b08b      	sub	sp, #44	@ 0x2c
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	60f8      	str	r0, [r7, #12]
 800fa1e:	60b9      	str	r1, [r7, #8]
 800fa20:	4611      	mov	r1, r2
 800fa22:	461a      	mov	r2, r3
 800fa24:	460b      	mov	r3, r1
 800fa26:	80fb      	strh	r3, [r7, #6]
 800fa28:	4613      	mov	r3, r2
 800fa2a:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800fa2c:	88bb      	ldrh	r3, [r7, #4]
 800fa2e:	3303      	adds	r3, #3
 800fa30:	089b      	lsrs	r3, r3, #2
 800fa32:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800fa34:	88bb      	ldrh	r3, [r7, #4]
 800fa36:	f003 0303 	and.w	r3, r3, #3
 800fa3a:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800fa40:	8afb      	ldrh	r3, [r7, #22]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d002      	beq.n	800fa4c <USB_WritePMA+0x36>
  {
    NbWords--;
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800fa4c:	88fb      	ldrh	r3, [r7, #6]
 800fa4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fa52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fa56:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800fa58:	69bb      	ldr	r3, [r7, #24]
 800fa5a:	623b      	str	r3, [r7, #32]
 800fa5c:	e015      	b.n	800fa8a <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800fa5e:	693b      	ldr	r3, [r7, #16]
 800fa60:	681a      	ldr	r2, [r3, #0]
 800fa62:	69fb      	ldr	r3, [r7, #28]
 800fa64:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800fa66:	69fb      	ldr	r3, [r7, #28]
 800fa68:	3304      	adds	r3, #4
 800fa6a:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	3301      	adds	r3, #1
 800fa70:	613b      	str	r3, [r7, #16]
    pBuf++;
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	3301      	adds	r3, #1
 800fa76:	613b      	str	r3, [r7, #16]
    pBuf++;
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	3301      	adds	r3, #1
 800fa82:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800fa84:	6a3b      	ldr	r3, [r7, #32]
 800fa86:	3b01      	subs	r3, #1
 800fa88:	623b      	str	r3, [r7, #32]
 800fa8a:	6a3b      	ldr	r3, [r7, #32]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d1e6      	bne.n	800fa5e <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800fa90:	8afb      	ldrh	r3, [r7, #22]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d01a      	beq.n	800facc <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800fa96:	2300      	movs	r3, #0
 800fa98:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800fa9a:	693b      	ldr	r3, [r7, #16]
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	461a      	mov	r2, r3
 800faa0:	6a3b      	ldr	r3, [r7, #32]
 800faa2:	00db      	lsls	r3, r3, #3
 800faa4:	fa02 f303 	lsl.w	r3, r2, r3
 800faa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800faaa:	4313      	orrs	r3, r2
 800faac:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800faae:	6a3b      	ldr	r3, [r7, #32]
 800fab0:	3301      	adds	r3, #1
 800fab2:	623b      	str	r3, [r7, #32]
      pBuf++;
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	3301      	adds	r3, #1
 800fab8:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800faba:	8afb      	ldrh	r3, [r7, #22]
 800fabc:	3b01      	subs	r3, #1
 800fabe:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800fac0:	8afb      	ldrh	r3, [r7, #22]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d1e9      	bne.n	800fa9a <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800fac6:	69fb      	ldr	r3, [r7, #28]
 800fac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800faca:	601a      	str	r2, [r3, #0]
  }
}
 800facc:	bf00      	nop
 800face:	372c      	adds	r7, #44	@ 0x2c
 800fad0:	46bd      	mov	sp, r7
 800fad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad6:	4770      	bx	lr

0800fad8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fad8:	b480      	push	{r7}
 800fada:	b08b      	sub	sp, #44	@ 0x2c
 800fadc:	af00      	add	r7, sp, #0
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	60b9      	str	r1, [r7, #8]
 800fae2:	4611      	mov	r1, r2
 800fae4:	461a      	mov	r2, r3
 800fae6:	460b      	mov	r3, r1
 800fae8:	80fb      	strh	r3, [r7, #6]
 800faea:	4613      	mov	r3, r2
 800faec:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800faee:	88bb      	ldrh	r3, [r7, #4]
 800faf0:	3303      	adds	r3, #3
 800faf2:	089b      	lsrs	r3, r3, #2
 800faf4:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800faf6:	88bb      	ldrh	r3, [r7, #4]
 800faf8:	f003 0303 	and.w	r3, r3, #3
 800fafc:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800fb02:	88fb      	ldrh	r3, [r7, #6]
 800fb04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fb08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fb0c:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800fb0e:	8b7b      	ldrh	r3, [r7, #26]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d002      	beq.n	800fb1a <USB_ReadPMA+0x42>
  {
    NbWords--;
 800fb14:	69fb      	ldr	r3, [r7, #28]
 800fb16:	3b01      	subs	r3, #1
 800fb18:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800fb1a:	69fb      	ldr	r3, [r7, #28]
 800fb1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb1e:	e015      	b.n	800fb4c <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800fb20:	6a3b      	ldr	r3, [r7, #32]
 800fb22:	681a      	ldr	r2, [r3, #0]
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800fb28:	6a3b      	ldr	r3, [r7, #32]
 800fb2a:	3304      	adds	r3, #4
 800fb2c:	623b      	str	r3, [r7, #32]
    pBuf++;
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	3301      	adds	r3, #1
 800fb32:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	3301      	adds	r3, #1
 800fb38:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	3301      	adds	r3, #1
 800fb44:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800fb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb48:	3b01      	subs	r3, #1
 800fb4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d1e6      	bne.n	800fb20 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800fb52:	8b7b      	ldrh	r3, [r7, #26]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d017      	beq.n	800fb88 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800fb58:	6a3b      	ldr	r3, [r7, #32]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800fb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb60:	b2db      	uxtb	r3, r3
 800fb62:	00db      	lsls	r3, r3, #3
 800fb64:	693a      	ldr	r2, [r7, #16]
 800fb66:	fa22 f303 	lsr.w	r3, r2, r3
 800fb6a:	b2da      	uxtb	r2, r3
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	701a      	strb	r2, [r3, #0]
      count++;
 800fb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb72:	3301      	adds	r3, #1
 800fb74:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	3301      	adds	r3, #1
 800fb7a:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800fb7c:	8b7b      	ldrh	r3, [r7, #26]
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800fb82:	8b7b      	ldrh	r3, [r7, #26]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d1ea      	bne.n	800fb5e <USB_ReadPMA+0x86>
  }
}
 800fb88:	bf00      	nop
 800fb8a:	372c      	adds	r7, #44	@ 0x2c
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr

0800fb94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b084      	sub	sp, #16
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fba0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800fba4:	f000 fff0 	bl	8010b88 <USBD_static_malloc>
 800fba8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d109      	bne.n	800fbc4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	32b0      	adds	r2, #176	@ 0xb0
 800fbba:	2100      	movs	r1, #0
 800fbbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800fbc0:	2302      	movs	r3, #2
 800fbc2:	e0d4      	b.n	800fd6e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800fbc4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800fbc8:	2100      	movs	r1, #0
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	f002 fd90 	bl	80126f0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	32b0      	adds	r2, #176	@ 0xb0
 800fbda:	68f9      	ldr	r1, [r7, #12]
 800fbdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	32b0      	adds	r2, #176	@ 0xb0
 800fbea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	7c1b      	ldrb	r3, [r3, #16]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d138      	bne.n	800fc6e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fbfc:	4b5e      	ldr	r3, [pc, #376]	@ (800fd78 <USBD_CDC_Init+0x1e4>)
 800fbfe:	7819      	ldrb	r1, [r3, #0]
 800fc00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc04:	2202      	movs	r2, #2
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f000 fec5 	bl	8010996 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fc0c:	4b5a      	ldr	r3, [pc, #360]	@ (800fd78 <USBD_CDC_Init+0x1e4>)
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	f003 020f 	and.w	r2, r3, #15
 800fc14:	6879      	ldr	r1, [r7, #4]
 800fc16:	4613      	mov	r3, r2
 800fc18:	009b      	lsls	r3, r3, #2
 800fc1a:	4413      	add	r3, r2
 800fc1c:	009b      	lsls	r3, r3, #2
 800fc1e:	440b      	add	r3, r1
 800fc20:	3324      	adds	r3, #36	@ 0x24
 800fc22:	2201      	movs	r2, #1
 800fc24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fc26:	4b55      	ldr	r3, [pc, #340]	@ (800fd7c <USBD_CDC_Init+0x1e8>)
 800fc28:	7819      	ldrb	r1, [r3, #0]
 800fc2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc2e:	2202      	movs	r2, #2
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 feb0 	bl	8010996 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fc36:	4b51      	ldr	r3, [pc, #324]	@ (800fd7c <USBD_CDC_Init+0x1e8>)
 800fc38:	781b      	ldrb	r3, [r3, #0]
 800fc3a:	f003 020f 	and.w	r2, r3, #15
 800fc3e:	6879      	ldr	r1, [r7, #4]
 800fc40:	4613      	mov	r3, r2
 800fc42:	009b      	lsls	r3, r3, #2
 800fc44:	4413      	add	r3, r2
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	440b      	add	r3, r1
 800fc4a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fc4e:	2201      	movs	r2, #1
 800fc50:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fc52:	4b4b      	ldr	r3, [pc, #300]	@ (800fd80 <USBD_CDC_Init+0x1ec>)
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	f003 020f 	and.w	r2, r3, #15
 800fc5a:	6879      	ldr	r1, [r7, #4]
 800fc5c:	4613      	mov	r3, r2
 800fc5e:	009b      	lsls	r3, r3, #2
 800fc60:	4413      	add	r3, r2
 800fc62:	009b      	lsls	r3, r3, #2
 800fc64:	440b      	add	r3, r1
 800fc66:	3326      	adds	r3, #38	@ 0x26
 800fc68:	2210      	movs	r2, #16
 800fc6a:	801a      	strh	r2, [r3, #0]
 800fc6c:	e035      	b.n	800fcda <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fc6e:	4b42      	ldr	r3, [pc, #264]	@ (800fd78 <USBD_CDC_Init+0x1e4>)
 800fc70:	7819      	ldrb	r1, [r3, #0]
 800fc72:	2340      	movs	r3, #64	@ 0x40
 800fc74:	2202      	movs	r2, #2
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f000 fe8d 	bl	8010996 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fc7c:	4b3e      	ldr	r3, [pc, #248]	@ (800fd78 <USBD_CDC_Init+0x1e4>)
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	f003 020f 	and.w	r2, r3, #15
 800fc84:	6879      	ldr	r1, [r7, #4]
 800fc86:	4613      	mov	r3, r2
 800fc88:	009b      	lsls	r3, r3, #2
 800fc8a:	4413      	add	r3, r2
 800fc8c:	009b      	lsls	r3, r3, #2
 800fc8e:	440b      	add	r3, r1
 800fc90:	3324      	adds	r3, #36	@ 0x24
 800fc92:	2201      	movs	r2, #1
 800fc94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fc96:	4b39      	ldr	r3, [pc, #228]	@ (800fd7c <USBD_CDC_Init+0x1e8>)
 800fc98:	7819      	ldrb	r1, [r3, #0]
 800fc9a:	2340      	movs	r3, #64	@ 0x40
 800fc9c:	2202      	movs	r2, #2
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f000 fe79 	bl	8010996 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fca4:	4b35      	ldr	r3, [pc, #212]	@ (800fd7c <USBD_CDC_Init+0x1e8>)
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	f003 020f 	and.w	r2, r3, #15
 800fcac:	6879      	ldr	r1, [r7, #4]
 800fcae:	4613      	mov	r3, r2
 800fcb0:	009b      	lsls	r3, r3, #2
 800fcb2:	4413      	add	r3, r2
 800fcb4:	009b      	lsls	r3, r3, #2
 800fcb6:	440b      	add	r3, r1
 800fcb8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fcbc:	2201      	movs	r2, #1
 800fcbe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fcc0:	4b2f      	ldr	r3, [pc, #188]	@ (800fd80 <USBD_CDC_Init+0x1ec>)
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	f003 020f 	and.w	r2, r3, #15
 800fcc8:	6879      	ldr	r1, [r7, #4]
 800fcca:	4613      	mov	r3, r2
 800fccc:	009b      	lsls	r3, r3, #2
 800fcce:	4413      	add	r3, r2
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	440b      	add	r3, r1
 800fcd4:	3326      	adds	r3, #38	@ 0x26
 800fcd6:	2210      	movs	r2, #16
 800fcd8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fcda:	4b29      	ldr	r3, [pc, #164]	@ (800fd80 <USBD_CDC_Init+0x1ec>)
 800fcdc:	7819      	ldrb	r1, [r3, #0]
 800fcde:	2308      	movs	r3, #8
 800fce0:	2203      	movs	r2, #3
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 fe57 	bl	8010996 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800fce8:	4b25      	ldr	r3, [pc, #148]	@ (800fd80 <USBD_CDC_Init+0x1ec>)
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	f003 020f 	and.w	r2, r3, #15
 800fcf0:	6879      	ldr	r1, [r7, #4]
 800fcf2:	4613      	mov	r3, r2
 800fcf4:	009b      	lsls	r3, r3, #2
 800fcf6:	4413      	add	r3, r2
 800fcf8:	009b      	lsls	r3, r3, #2
 800fcfa:	440b      	add	r3, r1
 800fcfc:	3324      	adds	r3, #36	@ 0x24
 800fcfe:	2201      	movs	r2, #1
 800fd00:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2200      	movs	r2, #0
 800fd06:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	33b0      	adds	r3, #176	@ 0xb0
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	4413      	add	r3, r2
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	2200      	movs	r2, #0
 800fd22:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	2200      	movs	r2, #0
 800fd2a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d101      	bne.n	800fd3c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800fd38:	2302      	movs	r3, #2
 800fd3a:	e018      	b.n	800fd6e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	7c1b      	ldrb	r3, [r3, #16]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d10a      	bne.n	800fd5a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fd44:	4b0d      	ldr	r3, [pc, #52]	@ (800fd7c <USBD_CDC_Init+0x1e8>)
 800fd46:	7819      	ldrb	r1, [r3, #0]
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fd4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f000 feea 	bl	8010b2c <USBD_LL_PrepareReceive>
 800fd58:	e008      	b.n	800fd6c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fd5a:	4b08      	ldr	r3, [pc, #32]	@ (800fd7c <USBD_CDC_Init+0x1e8>)
 800fd5c:	7819      	ldrb	r1, [r3, #0]
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fd64:	2340      	movs	r3, #64	@ 0x40
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 fee0 	bl	8010b2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fd6c:	2300      	movs	r3, #0
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3710      	adds	r7, #16
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
 800fd76:	bf00      	nop
 800fd78:	200000b3 	.word	0x200000b3
 800fd7c:	200000b4 	.word	0x200000b4
 800fd80:	200000b5 	.word	0x200000b5

0800fd84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	460b      	mov	r3, r1
 800fd8e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800fd90:	4b3a      	ldr	r3, [pc, #232]	@ (800fe7c <USBD_CDC_DeInit+0xf8>)
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	4619      	mov	r1, r3
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f000 fe1d 	bl	80109d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800fd9c:	4b37      	ldr	r3, [pc, #220]	@ (800fe7c <USBD_CDC_DeInit+0xf8>)
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	f003 020f 	and.w	r2, r3, #15
 800fda4:	6879      	ldr	r1, [r7, #4]
 800fda6:	4613      	mov	r3, r2
 800fda8:	009b      	lsls	r3, r3, #2
 800fdaa:	4413      	add	r3, r2
 800fdac:	009b      	lsls	r3, r3, #2
 800fdae:	440b      	add	r3, r1
 800fdb0:	3324      	adds	r3, #36	@ 0x24
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fdb6:	4b32      	ldr	r3, [pc, #200]	@ (800fe80 <USBD_CDC_DeInit+0xfc>)
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	4619      	mov	r1, r3
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f000 fe0a 	bl	80109d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fdc2:	4b2f      	ldr	r3, [pc, #188]	@ (800fe80 <USBD_CDC_DeInit+0xfc>)
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	f003 020f 	and.w	r2, r3, #15
 800fdca:	6879      	ldr	r1, [r7, #4]
 800fdcc:	4613      	mov	r3, r2
 800fdce:	009b      	lsls	r3, r3, #2
 800fdd0:	4413      	add	r3, r2
 800fdd2:	009b      	lsls	r3, r3, #2
 800fdd4:	440b      	add	r3, r1
 800fdd6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fdda:	2200      	movs	r2, #0
 800fddc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800fdde:	4b29      	ldr	r3, [pc, #164]	@ (800fe84 <USBD_CDC_DeInit+0x100>)
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	4619      	mov	r1, r3
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 fdf6 	bl	80109d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800fdea:	4b26      	ldr	r3, [pc, #152]	@ (800fe84 <USBD_CDC_DeInit+0x100>)
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	f003 020f 	and.w	r2, r3, #15
 800fdf2:	6879      	ldr	r1, [r7, #4]
 800fdf4:	4613      	mov	r3, r2
 800fdf6:	009b      	lsls	r3, r3, #2
 800fdf8:	4413      	add	r3, r2
 800fdfa:	009b      	lsls	r3, r3, #2
 800fdfc:	440b      	add	r3, r1
 800fdfe:	3324      	adds	r3, #36	@ 0x24
 800fe00:	2200      	movs	r2, #0
 800fe02:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800fe04:	4b1f      	ldr	r3, [pc, #124]	@ (800fe84 <USBD_CDC_DeInit+0x100>)
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	f003 020f 	and.w	r2, r3, #15
 800fe0c:	6879      	ldr	r1, [r7, #4]
 800fe0e:	4613      	mov	r3, r2
 800fe10:	009b      	lsls	r3, r3, #2
 800fe12:	4413      	add	r3, r2
 800fe14:	009b      	lsls	r3, r3, #2
 800fe16:	440b      	add	r3, r1
 800fe18:	3326      	adds	r3, #38	@ 0x26
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	32b0      	adds	r2, #176	@ 0xb0
 800fe28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d01f      	beq.n	800fe70 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fe36:	687a      	ldr	r2, [r7, #4]
 800fe38:	33b0      	adds	r3, #176	@ 0xb0
 800fe3a:	009b      	lsls	r3, r3, #2
 800fe3c:	4413      	add	r3, r2
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	685b      	ldr	r3, [r3, #4]
 800fe42:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	32b0      	adds	r2, #176	@ 0xb0
 800fe4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe52:	4618      	mov	r0, r3
 800fe54:	f000 fea6 	bl	8010ba4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	32b0      	adds	r2, #176	@ 0xb0
 800fe62:	2100      	movs	r1, #0
 800fe64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fe70:	2300      	movs	r3, #0
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3708      	adds	r7, #8
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	200000b3 	.word	0x200000b3
 800fe80:	200000b4 	.word	0x200000b4
 800fe84:	200000b5 	.word	0x200000b5

0800fe88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b086      	sub	sp, #24
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	32b0      	adds	r2, #176	@ 0xb0
 800fe9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fea0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800fea2:	2300      	movs	r3, #0
 800fea4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800fea6:	2300      	movs	r3, #0
 800fea8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800feaa:	2300      	movs	r3, #0
 800feac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d101      	bne.n	800feb8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800feb4:	2303      	movs	r3, #3
 800feb6:	e0bf      	b.n	8010038 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d050      	beq.n	800ff66 <USBD_CDC_Setup+0xde>
 800fec4:	2b20      	cmp	r3, #32
 800fec6:	f040 80af 	bne.w	8010028 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	88db      	ldrh	r3, [r3, #6]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d03a      	beq.n	800ff48 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	b25b      	sxtb	r3, r3
 800fed8:	2b00      	cmp	r3, #0
 800feda:	da1b      	bge.n	800ff14 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fee2:	687a      	ldr	r2, [r7, #4]
 800fee4:	33b0      	adds	r3, #176	@ 0xb0
 800fee6:	009b      	lsls	r3, r3, #2
 800fee8:	4413      	add	r3, r2
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	689b      	ldr	r3, [r3, #8]
 800feee:	683a      	ldr	r2, [r7, #0]
 800fef0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800fef2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fef4:	683a      	ldr	r2, [r7, #0]
 800fef6:	88d2      	ldrh	r2, [r2, #6]
 800fef8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	88db      	ldrh	r3, [r3, #6]
 800fefe:	2b07      	cmp	r3, #7
 800ff00:	bf28      	it	cs
 800ff02:	2307      	movcs	r3, #7
 800ff04:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	89fa      	ldrh	r2, [r7, #14]
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f002 f93c 	bl	801218a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ff12:	e090      	b.n	8010036 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	785a      	ldrb	r2, [r3, #1]
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	88db      	ldrh	r3, [r3, #6]
 800ff22:	2b3f      	cmp	r3, #63	@ 0x3f
 800ff24:	d803      	bhi.n	800ff2e <USBD_CDC_Setup+0xa6>
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	88db      	ldrh	r3, [r3, #6]
 800ff2a:	b2da      	uxtb	r2, r3
 800ff2c:	e000      	b.n	800ff30 <USBD_CDC_Setup+0xa8>
 800ff2e:	2240      	movs	r2, #64	@ 0x40
 800ff30:	693b      	ldr	r3, [r7, #16]
 800ff32:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ff36:	6939      	ldr	r1, [r7, #16]
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ff3e:	461a      	mov	r2, r3
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f002 f94e 	bl	80121e2 <USBD_CtlPrepareRx>
      break;
 800ff46:	e076      	b.n	8010036 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	33b0      	adds	r3, #176	@ 0xb0
 800ff52:	009b      	lsls	r3, r3, #2
 800ff54:	4413      	add	r3, r2
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	689b      	ldr	r3, [r3, #8]
 800ff5a:	683a      	ldr	r2, [r7, #0]
 800ff5c:	7850      	ldrb	r0, [r2, #1]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	6839      	ldr	r1, [r7, #0]
 800ff62:	4798      	blx	r3
      break;
 800ff64:	e067      	b.n	8010036 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	785b      	ldrb	r3, [r3, #1]
 800ff6a:	2b0b      	cmp	r3, #11
 800ff6c:	d851      	bhi.n	8010012 <USBD_CDC_Setup+0x18a>
 800ff6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ff74 <USBD_CDC_Setup+0xec>)
 800ff70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff74:	0800ffa5 	.word	0x0800ffa5
 800ff78:	08010021 	.word	0x08010021
 800ff7c:	08010013 	.word	0x08010013
 800ff80:	08010013 	.word	0x08010013
 800ff84:	08010013 	.word	0x08010013
 800ff88:	08010013 	.word	0x08010013
 800ff8c:	08010013 	.word	0x08010013
 800ff90:	08010013 	.word	0x08010013
 800ff94:	08010013 	.word	0x08010013
 800ff98:	08010013 	.word	0x08010013
 800ff9c:	0800ffcf 	.word	0x0800ffcf
 800ffa0:	0800fff9 	.word	0x0800fff9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffaa:	b2db      	uxtb	r3, r3
 800ffac:	2b03      	cmp	r3, #3
 800ffae:	d107      	bne.n	800ffc0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ffb0:	f107 030a 	add.w	r3, r7, #10
 800ffb4:	2202      	movs	r2, #2
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f002 f8e6 	bl	801218a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ffbe:	e032      	b.n	8010026 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ffc0:	6839      	ldr	r1, [r7, #0]
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f001 ff63 	bl	8011e8e <USBD_CtlError>
            ret = USBD_FAIL;
 800ffc8:	2303      	movs	r3, #3
 800ffca:	75fb      	strb	r3, [r7, #23]
          break;
 800ffcc:	e02b      	b.n	8010026 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	2b03      	cmp	r3, #3
 800ffd8:	d107      	bne.n	800ffea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ffda:	f107 030d 	add.w	r3, r7, #13
 800ffde:	2201      	movs	r2, #1
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f002 f8d1 	bl	801218a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ffe8:	e01d      	b.n	8010026 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ffea:	6839      	ldr	r1, [r7, #0]
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f001 ff4e 	bl	8011e8e <USBD_CtlError>
            ret = USBD_FAIL;
 800fff2:	2303      	movs	r3, #3
 800fff4:	75fb      	strb	r3, [r7, #23]
          break;
 800fff6:	e016      	b.n	8010026 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	2b03      	cmp	r3, #3
 8010002:	d00f      	beq.n	8010024 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010004:	6839      	ldr	r1, [r7, #0]
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f001 ff41 	bl	8011e8e <USBD_CtlError>
            ret = USBD_FAIL;
 801000c:	2303      	movs	r3, #3
 801000e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010010:	e008      	b.n	8010024 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010012:	6839      	ldr	r1, [r7, #0]
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f001 ff3a 	bl	8011e8e <USBD_CtlError>
          ret = USBD_FAIL;
 801001a:	2303      	movs	r3, #3
 801001c:	75fb      	strb	r3, [r7, #23]
          break;
 801001e:	e002      	b.n	8010026 <USBD_CDC_Setup+0x19e>
          break;
 8010020:	bf00      	nop
 8010022:	e008      	b.n	8010036 <USBD_CDC_Setup+0x1ae>
          break;
 8010024:	bf00      	nop
      }
      break;
 8010026:	e006      	b.n	8010036 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010028:	6839      	ldr	r1, [r7, #0]
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f001 ff2f 	bl	8011e8e <USBD_CtlError>
      ret = USBD_FAIL;
 8010030:	2303      	movs	r3, #3
 8010032:	75fb      	strb	r3, [r7, #23]
      break;
 8010034:	bf00      	nop
  }

  return (uint8_t)ret;
 8010036:	7dfb      	ldrb	r3, [r7, #23]
}
 8010038:	4618      	mov	r0, r3
 801003a:	3718      	adds	r7, #24
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b084      	sub	sp, #16
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
 8010048:	460b      	mov	r3, r1
 801004a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010052:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	32b0      	adds	r2, #176	@ 0xb0
 801005e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d101      	bne.n	801006a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010066:	2303      	movs	r3, #3
 8010068:	e065      	b.n	8010136 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	32b0      	adds	r2, #176	@ 0xb0
 8010074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010078:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801007a:	78fb      	ldrb	r3, [r7, #3]
 801007c:	f003 020f 	and.w	r2, r3, #15
 8010080:	6879      	ldr	r1, [r7, #4]
 8010082:	4613      	mov	r3, r2
 8010084:	009b      	lsls	r3, r3, #2
 8010086:	4413      	add	r3, r2
 8010088:	009b      	lsls	r3, r3, #2
 801008a:	440b      	add	r3, r1
 801008c:	3318      	adds	r3, #24
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d02f      	beq.n	80100f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010094:	78fb      	ldrb	r3, [r7, #3]
 8010096:	f003 020f 	and.w	r2, r3, #15
 801009a:	6879      	ldr	r1, [r7, #4]
 801009c:	4613      	mov	r3, r2
 801009e:	009b      	lsls	r3, r3, #2
 80100a0:	4413      	add	r3, r2
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	440b      	add	r3, r1
 80100a6:	3318      	adds	r3, #24
 80100a8:	681a      	ldr	r2, [r3, #0]
 80100aa:	78fb      	ldrb	r3, [r7, #3]
 80100ac:	f003 010f 	and.w	r1, r3, #15
 80100b0:	68f8      	ldr	r0, [r7, #12]
 80100b2:	460b      	mov	r3, r1
 80100b4:	009b      	lsls	r3, r3, #2
 80100b6:	440b      	add	r3, r1
 80100b8:	00db      	lsls	r3, r3, #3
 80100ba:	4403      	add	r3, r0
 80100bc:	3324      	adds	r3, #36	@ 0x24
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80100c4:	fb01 f303 	mul.w	r3, r1, r3
 80100c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d112      	bne.n	80100f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80100ce:	78fb      	ldrb	r3, [r7, #3]
 80100d0:	f003 020f 	and.w	r2, r3, #15
 80100d4:	6879      	ldr	r1, [r7, #4]
 80100d6:	4613      	mov	r3, r2
 80100d8:	009b      	lsls	r3, r3, #2
 80100da:	4413      	add	r3, r2
 80100dc:	009b      	lsls	r3, r3, #2
 80100de:	440b      	add	r3, r1
 80100e0:	3318      	adds	r3, #24
 80100e2:	2200      	movs	r2, #0
 80100e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80100e6:	78f9      	ldrb	r1, [r7, #3]
 80100e8:	2300      	movs	r3, #0
 80100ea:	2200      	movs	r2, #0
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f000 fd02 	bl	8010af6 <USBD_LL_Transmit>
 80100f2:	e01f      	b.n	8010134 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	2200      	movs	r2, #0
 80100f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010102:	687a      	ldr	r2, [r7, #4]
 8010104:	33b0      	adds	r3, #176	@ 0xb0
 8010106:	009b      	lsls	r3, r3, #2
 8010108:	4413      	add	r3, r2
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	691b      	ldr	r3, [r3, #16]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d010      	beq.n	8010134 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010118:	687a      	ldr	r2, [r7, #4]
 801011a:	33b0      	adds	r3, #176	@ 0xb0
 801011c:	009b      	lsls	r3, r3, #2
 801011e:	4413      	add	r3, r2
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	691b      	ldr	r3, [r3, #16]
 8010124:	68ba      	ldr	r2, [r7, #8]
 8010126:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801012a:	68ba      	ldr	r2, [r7, #8]
 801012c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010130:	78fa      	ldrb	r2, [r7, #3]
 8010132:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010134:	2300      	movs	r3, #0
}
 8010136:	4618      	mov	r0, r3
 8010138:	3710      	adds	r7, #16
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}

0801013e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801013e:	b580      	push	{r7, lr}
 8010140:	b084      	sub	sp, #16
 8010142:	af00      	add	r7, sp, #0
 8010144:	6078      	str	r0, [r7, #4]
 8010146:	460b      	mov	r3, r1
 8010148:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	32b0      	adds	r2, #176	@ 0xb0
 8010154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010158:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	32b0      	adds	r2, #176	@ 0xb0
 8010164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d101      	bne.n	8010170 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801016c:	2303      	movs	r3, #3
 801016e:	e01a      	b.n	80101a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010170:	78fb      	ldrb	r3, [r7, #3]
 8010172:	4619      	mov	r1, r3
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f000 fcf4 	bl	8010b62 <USBD_LL_GetRxDataSize>
 801017a:	4602      	mov	r2, r0
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	33b0      	adds	r3, #176	@ 0xb0
 801018c:	009b      	lsls	r3, r3, #2
 801018e:	4413      	add	r3, r2
 8010190:	685b      	ldr	r3, [r3, #4]
 8010192:	68db      	ldr	r3, [r3, #12]
 8010194:	68fa      	ldr	r2, [r7, #12]
 8010196:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801019a:	68fa      	ldr	r2, [r7, #12]
 801019c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80101a0:	4611      	mov	r1, r2
 80101a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80101a4:	2300      	movs	r3, #0
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3710      	adds	r7, #16
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b084      	sub	sp, #16
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	32b0      	adds	r2, #176	@ 0xb0
 80101c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d101      	bne.n	80101d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80101cc:	2303      	movs	r3, #3
 80101ce:	e024      	b.n	801021a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	33b0      	adds	r3, #176	@ 0xb0
 80101da:	009b      	lsls	r3, r3, #2
 80101dc:	4413      	add	r3, r2
 80101de:	685b      	ldr	r3, [r3, #4]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d019      	beq.n	8010218 <USBD_CDC_EP0_RxReady+0x6a>
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80101ea:	2bff      	cmp	r3, #255	@ 0xff
 80101ec:	d014      	beq.n	8010218 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	33b0      	adds	r3, #176	@ 0xb0
 80101f8:	009b      	lsls	r3, r3, #2
 80101fa:	4413      	add	r3, r2
 80101fc:	685b      	ldr	r3, [r3, #4]
 80101fe:	689b      	ldr	r3, [r3, #8]
 8010200:	68fa      	ldr	r2, [r7, #12]
 8010202:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8010206:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010208:	68fa      	ldr	r2, [r7, #12]
 801020a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801020e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	22ff      	movs	r2, #255	@ 0xff
 8010214:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8010218:	2300      	movs	r3, #0
}
 801021a:	4618      	mov	r0, r3
 801021c:	3710      	adds	r7, #16
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
	...

08010224 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b086      	sub	sp, #24
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801022c:	2182      	movs	r1, #130	@ 0x82
 801022e:	4818      	ldr	r0, [pc, #96]	@ (8010290 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010230:	f000 fff7 	bl	8011222 <USBD_GetEpDesc>
 8010234:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010236:	2101      	movs	r1, #1
 8010238:	4815      	ldr	r0, [pc, #84]	@ (8010290 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801023a:	f000 fff2 	bl	8011222 <USBD_GetEpDesc>
 801023e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010240:	2181      	movs	r1, #129	@ 0x81
 8010242:	4813      	ldr	r0, [pc, #76]	@ (8010290 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010244:	f000 ffed 	bl	8011222 <USBD_GetEpDesc>
 8010248:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d002      	beq.n	8010256 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010250:	697b      	ldr	r3, [r7, #20]
 8010252:	2210      	movs	r2, #16
 8010254:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d006      	beq.n	801026a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	2200      	movs	r2, #0
 8010260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010264:	711a      	strb	r2, [r3, #4]
 8010266:	2200      	movs	r2, #0
 8010268:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d006      	beq.n	801027e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	2200      	movs	r2, #0
 8010274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010278:	711a      	strb	r2, [r3, #4]
 801027a:	2200      	movs	r2, #0
 801027c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2243      	movs	r2, #67	@ 0x43
 8010282:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010284:	4b02      	ldr	r3, [pc, #8]	@ (8010290 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010286:	4618      	mov	r0, r3
 8010288:	3718      	adds	r7, #24
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
 801028e:	bf00      	nop
 8010290:	20000070 	.word	0x20000070

08010294 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b086      	sub	sp, #24
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801029c:	2182      	movs	r1, #130	@ 0x82
 801029e:	4818      	ldr	r0, [pc, #96]	@ (8010300 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80102a0:	f000 ffbf 	bl	8011222 <USBD_GetEpDesc>
 80102a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80102a6:	2101      	movs	r1, #1
 80102a8:	4815      	ldr	r0, [pc, #84]	@ (8010300 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80102aa:	f000 ffba 	bl	8011222 <USBD_GetEpDesc>
 80102ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80102b0:	2181      	movs	r1, #129	@ 0x81
 80102b2:	4813      	ldr	r0, [pc, #76]	@ (8010300 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80102b4:	f000 ffb5 	bl	8011222 <USBD_GetEpDesc>
 80102b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d002      	beq.n	80102c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	2210      	movs	r2, #16
 80102c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d006      	beq.n	80102da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	2200      	movs	r2, #0
 80102d0:	711a      	strb	r2, [r3, #4]
 80102d2:	2200      	movs	r2, #0
 80102d4:	f042 0202 	orr.w	r2, r2, #2
 80102d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d006      	beq.n	80102ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2200      	movs	r2, #0
 80102e4:	711a      	strb	r2, [r3, #4]
 80102e6:	2200      	movs	r2, #0
 80102e8:	f042 0202 	orr.w	r2, r2, #2
 80102ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2243      	movs	r2, #67	@ 0x43
 80102f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80102f4:	4b02      	ldr	r3, [pc, #8]	@ (8010300 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3718      	adds	r7, #24
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	20000070 	.word	0x20000070

08010304 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b086      	sub	sp, #24
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801030c:	2182      	movs	r1, #130	@ 0x82
 801030e:	4818      	ldr	r0, [pc, #96]	@ (8010370 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010310:	f000 ff87 	bl	8011222 <USBD_GetEpDesc>
 8010314:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010316:	2101      	movs	r1, #1
 8010318:	4815      	ldr	r0, [pc, #84]	@ (8010370 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801031a:	f000 ff82 	bl	8011222 <USBD_GetEpDesc>
 801031e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010320:	2181      	movs	r1, #129	@ 0x81
 8010322:	4813      	ldr	r0, [pc, #76]	@ (8010370 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010324:	f000 ff7d 	bl	8011222 <USBD_GetEpDesc>
 8010328:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d002      	beq.n	8010336 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	2210      	movs	r2, #16
 8010334:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d006      	beq.n	801034a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	2200      	movs	r2, #0
 8010340:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010344:	711a      	strb	r2, [r3, #4]
 8010346:	2200      	movs	r2, #0
 8010348:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d006      	beq.n	801035e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	2200      	movs	r2, #0
 8010354:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010358:	711a      	strb	r2, [r3, #4]
 801035a:	2200      	movs	r2, #0
 801035c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2243      	movs	r2, #67	@ 0x43
 8010362:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010364:	4b02      	ldr	r3, [pc, #8]	@ (8010370 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010366:	4618      	mov	r0, r3
 8010368:	3718      	adds	r7, #24
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
 801036e:	bf00      	nop
 8010370:	20000070 	.word	0x20000070

08010374 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010374:	b480      	push	{r7}
 8010376:	b083      	sub	sp, #12
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	220a      	movs	r2, #10
 8010380:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010382:	4b03      	ldr	r3, [pc, #12]	@ (8010390 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010384:	4618      	mov	r0, r3
 8010386:	370c      	adds	r7, #12
 8010388:	46bd      	mov	sp, r7
 801038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038e:	4770      	bx	lr
 8010390:	2000002c 	.word	0x2000002c

08010394 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010394:	b480      	push	{r7}
 8010396:	b083      	sub	sp, #12
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d101      	bne.n	80103a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80103a4:	2303      	movs	r3, #3
 80103a6:	e009      	b.n	80103bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80103ae:	687a      	ldr	r2, [r7, #4]
 80103b0:	33b0      	adds	r3, #176	@ 0xb0
 80103b2:	009b      	lsls	r3, r3, #2
 80103b4:	4413      	add	r3, r2
 80103b6:	683a      	ldr	r2, [r7, #0]
 80103b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80103ba:	2300      	movs	r3, #0
}
 80103bc:	4618      	mov	r0, r3
 80103be:	370c      	adds	r7, #12
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr

080103c8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b087      	sub	sp, #28
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	60b9      	str	r1, [r7, #8]
 80103d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	32b0      	adds	r2, #176	@ 0xb0
 80103de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103e2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d101      	bne.n	80103ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80103ea:	2303      	movs	r3, #3
 80103ec:	e008      	b.n	8010400 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	68ba      	ldr	r2, [r7, #8]
 80103f2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	687a      	ldr	r2, [r7, #4]
 80103fa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80103fe:	2300      	movs	r3, #0
}
 8010400:	4618      	mov	r0, r3
 8010402:	371c      	adds	r7, #28
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr

0801040c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801040c:	b480      	push	{r7}
 801040e:	b085      	sub	sp, #20
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	32b0      	adds	r2, #176	@ 0xb0
 8010420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010424:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d101      	bne.n	8010430 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801042c:	2303      	movs	r3, #3
 801042e:	e004      	b.n	801043a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	683a      	ldr	r2, [r7, #0]
 8010434:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8010438:	2300      	movs	r3, #0
}
 801043a:	4618      	mov	r0, r3
 801043c:	3714      	adds	r7, #20
 801043e:	46bd      	mov	sp, r7
 8010440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010444:	4770      	bx	lr
	...

08010448 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b084      	sub	sp, #16
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	32b0      	adds	r2, #176	@ 0xb0
 801045a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801045e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	32b0      	adds	r2, #176	@ 0xb0
 801046a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d101      	bne.n	8010476 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010472:	2303      	movs	r3, #3
 8010474:	e018      	b.n	80104a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	7c1b      	ldrb	r3, [r3, #16]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d10a      	bne.n	8010494 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801047e:	4b0c      	ldr	r3, [pc, #48]	@ (80104b0 <USBD_CDC_ReceivePacket+0x68>)
 8010480:	7819      	ldrb	r1, [r3, #0]
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010488:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f000 fb4d 	bl	8010b2c <USBD_LL_PrepareReceive>
 8010492:	e008      	b.n	80104a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010494:	4b06      	ldr	r3, [pc, #24]	@ (80104b0 <USBD_CDC_ReceivePacket+0x68>)
 8010496:	7819      	ldrb	r1, [r3, #0]
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801049e:	2340      	movs	r3, #64	@ 0x40
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f000 fb43 	bl	8010b2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80104a6:	2300      	movs	r3, #0
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	3710      	adds	r7, #16
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}
 80104b0:	200000b4 	.word	0x200000b4

080104b4 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80104b8:	2200      	movs	r2, #0
 80104ba:	4905      	ldr	r1, [pc, #20]	@ (80104d0 <TEMPLATE_Init+0x1c>)
 80104bc:	4805      	ldr	r0, [pc, #20]	@ (80104d4 <TEMPLATE_Init+0x20>)
 80104be:	f7ff ff83 	bl	80103c8 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80104c2:	4905      	ldr	r1, [pc, #20]	@ (80104d8 <TEMPLATE_Init+0x24>)
 80104c4:	4803      	ldr	r0, [pc, #12]	@ (80104d4 <TEMPLATE_Init+0x20>)
 80104c6:	f7ff ffa1 	bl	801040c <USBD_CDC_SetRxBuffer>
      return (0);
 80104ca:	2300      	movs	r3, #0
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	20000ca8 	.word	0x20000ca8
 80104d4:	20000720 	.word	0x20000720
 80104d8:	20000aa8 	.word	0x20000aa8

080104dc <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 80104dc:	b480      	push	{r7}
 80104de:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 80104e0:	2300      	movs	r3, #0
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr

080104ec <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 80104ec:	b480      	push	{r7}
 80104ee:	b083      	sub	sp, #12
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	4603      	mov	r3, r0
 80104f4:	6039      	str	r1, [r7, #0]
 80104f6:	71fb      	strb	r3, [r7, #7]
 80104f8:	4613      	mov	r3, r2
 80104fa:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 80104fc:	79fb      	ldrb	r3, [r7, #7]
 80104fe:	2b23      	cmp	r3, #35	@ 0x23
 8010500:	f200 8098 	bhi.w	8010634 <TEMPLATE_Control+0x148>
 8010504:	a201      	add	r2, pc, #4	@ (adr r2, 801050c <TEMPLATE_Control+0x20>)
 8010506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801050a:	bf00      	nop
 801050c:	08010635 	.word	0x08010635
 8010510:	08010635 	.word	0x08010635
 8010514:	08010635 	.word	0x08010635
 8010518:	08010635 	.word	0x08010635
 801051c:	08010635 	.word	0x08010635
 8010520:	08010635 	.word	0x08010635
 8010524:	08010635 	.word	0x08010635
 8010528:	08010635 	.word	0x08010635
 801052c:	08010635 	.word	0x08010635
 8010530:	08010635 	.word	0x08010635
 8010534:	08010635 	.word	0x08010635
 8010538:	08010635 	.word	0x08010635
 801053c:	08010635 	.word	0x08010635
 8010540:	08010635 	.word	0x08010635
 8010544:	08010635 	.word	0x08010635
 8010548:	08010635 	.word	0x08010635
 801054c:	08010635 	.word	0x08010635
 8010550:	08010635 	.word	0x08010635
 8010554:	08010635 	.word	0x08010635
 8010558:	08010635 	.word	0x08010635
 801055c:	08010635 	.word	0x08010635
 8010560:	08010635 	.word	0x08010635
 8010564:	08010635 	.word	0x08010635
 8010568:	08010635 	.word	0x08010635
 801056c:	08010635 	.word	0x08010635
 8010570:	08010635 	.word	0x08010635
 8010574:	08010635 	.word	0x08010635
 8010578:	08010635 	.word	0x08010635
 801057c:	08010635 	.word	0x08010635
 8010580:	08010635 	.word	0x08010635
 8010584:	08010635 	.word	0x08010635
 8010588:	08010635 	.word	0x08010635
 801058c:	0801059d 	.word	0x0801059d
 8010590:	080105e1 	.word	0x080105e1
 8010594:	08010635 	.word	0x08010635
 8010598:	08010635 	.word	0x08010635
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	461a      	mov	r2, r3
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	3301      	adds	r3, #1
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	021b      	lsls	r3, r3, #8
 80105aa:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	3302      	adds	r3, #2
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80105b4:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	3303      	adds	r3, #3
 80105ba:	781b      	ldrb	r3, [r3, #0]
 80105bc:	061b      	lsls	r3, r3, #24
 80105be:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80105c0:	461a      	mov	r2, r3
 80105c2:	4b20      	ldr	r3, [pc, #128]	@ (8010644 <TEMPLATE_Control+0x158>)
 80105c4:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	791a      	ldrb	r2, [r3, #4]
 80105ca:	4b1e      	ldr	r3, [pc, #120]	@ (8010644 <TEMPLATE_Control+0x158>)
 80105cc:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	795a      	ldrb	r2, [r3, #5]
 80105d2:	4b1c      	ldr	r3, [pc, #112]	@ (8010644 <TEMPLATE_Control+0x158>)
 80105d4:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	799a      	ldrb	r2, [r3, #6]
 80105da:	4b1a      	ldr	r3, [pc, #104]	@ (8010644 <TEMPLATE_Control+0x158>)
 80105dc:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 80105de:	e02a      	b.n	8010636 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 80105e0:	4b18      	ldr	r3, [pc, #96]	@ (8010644 <TEMPLATE_Control+0x158>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	b2da      	uxtb	r2, r3
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 80105ea:	4b16      	ldr	r3, [pc, #88]	@ (8010644 <TEMPLATE_Control+0x158>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	0a1a      	lsrs	r2, r3, #8
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	3301      	adds	r3, #1
 80105f4:	b2d2      	uxtb	r2, r2
 80105f6:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 80105f8:	4b12      	ldr	r3, [pc, #72]	@ (8010644 <TEMPLATE_Control+0x158>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	0c1a      	lsrs	r2, r3, #16
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	3302      	adds	r3, #2
 8010602:	b2d2      	uxtb	r2, r2
 8010604:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8010606:	4b0f      	ldr	r3, [pc, #60]	@ (8010644 <TEMPLATE_Control+0x158>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	0e1a      	lsrs	r2, r3, #24
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	3303      	adds	r3, #3
 8010610:	b2d2      	uxtb	r2, r2
 8010612:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	3304      	adds	r3, #4
 8010618:	4a0a      	ldr	r2, [pc, #40]	@ (8010644 <TEMPLATE_Control+0x158>)
 801061a:	7912      	ldrb	r2, [r2, #4]
 801061c:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	3305      	adds	r3, #5
 8010622:	4a08      	ldr	r2, [pc, #32]	@ (8010644 <TEMPLATE_Control+0x158>)
 8010624:	7952      	ldrb	r2, [r2, #5]
 8010626:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	3306      	adds	r3, #6
 801062c:	4a05      	ldr	r2, [pc, #20]	@ (8010644 <TEMPLATE_Control+0x158>)
 801062e:	7992      	ldrb	r2, [r2, #6]
 8010630:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 8010632:	e000      	b.n	8010636 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 8010634:	bf00      	nop
  }

  return (0);
 8010636:	2300      	movs	r3, #0
}
 8010638:	4618      	mov	r0, r3
 801063a:	370c      	adds	r7, #12
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr
 8010644:	200000cc 	.word	0x200000cc

08010648 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 8010648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801064c:	b08b      	sub	sp, #44	@ 0x2c
 801064e:	af00      	add	r7, sp, #0
 8010650:	6078      	str	r0, [r7, #4]
 8010652:	6039      	str	r1, [r7, #0]
 8010654:	466b      	mov	r3, sp
 8010656:	461e      	mov	r6, r3
    const uint32_t bytesPerLine = 16;
 8010658:	2310      	movs	r3, #16
 801065a:	61bb      	str	r3, [r7, #24]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 801065c:	69ba      	ldr	r2, [r7, #24]
 801065e:	4613      	mov	r3, r2
 8010660:	005b      	lsls	r3, r3, #1
 8010662:	4413      	add	r3, r2
 8010664:	617b      	str	r3, [r7, #20]
 8010666:	69ba      	ldr	r2, [r7, #24]
 8010668:	4613      	mov	r3, r2
 801066a:	005b      	lsls	r3, r3, #1
 801066c:	4413      	add	r3, r2
 801066e:	3301      	adds	r3, #1
 8010670:	2200      	movs	r2, #0
 8010672:	4698      	mov	r8, r3
 8010674:	4691      	mov	r9, r2
 8010676:	f04f 0200 	mov.w	r2, #0
 801067a:	f04f 0300 	mov.w	r3, #0
 801067e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010682:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010686:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801068a:	69ba      	ldr	r2, [r7, #24]
 801068c:	4613      	mov	r3, r2
 801068e:	005b      	lsls	r3, r3, #1
 8010690:	4413      	add	r3, r2
 8010692:	3301      	adds	r3, #1
 8010694:	2200      	movs	r2, #0
 8010696:	461c      	mov	r4, r3
 8010698:	4615      	mov	r5, r2
 801069a:	f04f 0200 	mov.w	r2, #0
 801069e:	f04f 0300 	mov.w	r3, #0
 80106a2:	00eb      	lsls	r3, r5, #3
 80106a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80106a8:	00e2      	lsls	r2, r4, #3
 80106aa:	69ba      	ldr	r2, [r7, #24]
 80106ac:	4613      	mov	r3, r2
 80106ae:	005b      	lsls	r3, r3, #1
 80106b0:	4413      	add	r3, r2
 80106b2:	3301      	adds	r3, #1
 80106b4:	3307      	adds	r3, #7
 80106b6:	08db      	lsrs	r3, r3, #3
 80106b8:	00db      	lsls	r3, r3, #3
 80106ba:	ebad 0d03 	sub.w	sp, sp, r3
 80106be:	466b      	mov	r3, sp
 80106c0:	3300      	adds	r3, #0
 80106c2:	613b      	str	r3, [r7, #16]
    uint32_t totalLen = *Len;
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	60fb      	str	r3, [r7, #12]
    uint32_t printed = 0;
 80106ca:	2300      	movs	r3, #0
 80106cc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (*Len > CDC_DATA_FS_MAX_PACKET_SIZE) {
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	2b40      	cmp	r3, #64	@ 0x40
 80106d4:	d944      	bls.n	8010760 <TEMPLATE_Receive+0x118>
        *Len = CDC_DATA_FS_MAX_PACKET_SIZE;
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	2240      	movs	r2, #64	@ 0x40
 80106da:	601a      	str	r2, [r3, #0]
    }

    while (printed < *Len)
 80106dc:	e040      	b.n	8010760 <TEMPLATE_Receive+0x118>
    {
        uint32_t lineLen = ((*Len - printed) > bytesPerLine) ? bytesPerLine : (*Len - printed);
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	681a      	ldr	r2, [r3, #0]
 80106e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e4:	1ad3      	subs	r3, r2, r3
 80106e6:	69ba      	ldr	r2, [r7, #24]
 80106e8:	4293      	cmp	r3, r2
 80106ea:	bf28      	it	cs
 80106ec:	4613      	movcs	r3, r2
 80106ee:	60bb      	str	r3, [r7, #8]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 80106f0:	69ba      	ldr	r2, [r7, #24]
 80106f2:	4613      	mov	r3, r2
 80106f4:	005b      	lsls	r3, r3, #1
 80106f6:	4413      	add	r3, r2
        memset(hexLine, 0, sizeof(hexLine));
 80106f8:	3301      	adds	r3, #1
 80106fa:	461a      	mov	r2, r3
 80106fc:	2100      	movs	r1, #0
 80106fe:	6938      	ldr	r0, [r7, #16]
 8010700:	f001 fff6 	bl	80126f0 <memset>
        char *ptr = hexLine;
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	623b      	str	r3, [r7, #32]

        for (uint32_t i = 0; i < lineLen; ++i)
 8010708:	2300      	movs	r3, #0
 801070a:	61fb      	str	r3, [r7, #28]
 801070c:	e012      	b.n	8010734 <TEMPLATE_Receive+0xec>
        {
            ptr += snprintf(ptr, 4, "%02X ", Buf[printed + i]);
 801070e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010710:	69fb      	ldr	r3, [r7, #28]
 8010712:	4413      	add	r3, r2
 8010714:	687a      	ldr	r2, [r7, #4]
 8010716:	4413      	add	r3, r2
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	4a2d      	ldr	r2, [pc, #180]	@ (80107d0 <TEMPLATE_Receive+0x188>)
 801071c:	2104      	movs	r1, #4
 801071e:	6a38      	ldr	r0, [r7, #32]
 8010720:	f001 ff36 	bl	8012590 <sniprintf>
 8010724:	4603      	mov	r3, r0
 8010726:	461a      	mov	r2, r3
 8010728:	6a3b      	ldr	r3, [r7, #32]
 801072a:	4413      	add	r3, r2
 801072c:	623b      	str	r3, [r7, #32]
        for (uint32_t i = 0; i < lineLen; ++i)
 801072e:	69fb      	ldr	r3, [r7, #28]
 8010730:	3301      	adds	r3, #1
 8010732:	61fb      	str	r3, [r7, #28]
 8010734:	69fa      	ldr	r2, [r7, #28]
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	429a      	cmp	r2, r3
 801073a:	d3e8      	bcc.n	801070e <TEMPLATE_Receive+0xc6>
        }

        if (printed == 0)
 801073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801073e:	2b00      	cmp	r3, #0
 8010740:	d105      	bne.n	801074e <TEMPLATE_Receive+0x106>
        {
            // First line includes logger message
            log_info("USB Rx [%lu bytes]: %s", totalLen, hexLine);
 8010742:	693a      	ldr	r2, [r7, #16]
 8010744:	68f9      	ldr	r1, [r7, #12]
 8010746:	4823      	ldr	r0, [pc, #140]	@ (80107d4 <TEMPLATE_Receive+0x18c>)
 8010748:	f7f0 fb12 	bl	8000d70 <log_info>
 801074c:	e004      	b.n	8010758 <TEMPLATE_Receive+0x110>
        }
        else
        {
            // Subsequent lines have 26-space indent
            log_info("%19s%s", "", hexLine);
 801074e:	693a      	ldr	r2, [r7, #16]
 8010750:	4921      	ldr	r1, [pc, #132]	@ (80107d8 <TEMPLATE_Receive+0x190>)
 8010752:	4822      	ldr	r0, [pc, #136]	@ (80107dc <TEMPLATE_Receive+0x194>)
 8010754:	f7f0 fb0c 	bl	8000d70 <log_info>
        }

        printed += lineLen;
 8010758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	4413      	add	r3, r2
 801075e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (printed < *Len)
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010766:	429a      	cmp	r2, r3
 8010768:	d3b9      	bcc.n	80106de <TEMPLATE_Receive+0x96>
    }

    // Copy to usb_rx_buffer if space permits
    if ((usb_rx_index + *Len) < MAX_USB_DATA_SIZE)
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	4b1c      	ldr	r3, [pc, #112]	@ (80107e0 <TEMPLATE_Receive+0x198>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	4413      	add	r3, r2
 8010774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010778:	d215      	bcs.n	80107a6 <TEMPLATE_Receive+0x15e>
    {
        memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 801077a:	4b19      	ldr	r3, [pc, #100]	@ (80107e0 <TEMPLATE_Receive+0x198>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	4a19      	ldr	r2, [pc, #100]	@ (80107e4 <TEMPLATE_Receive+0x19c>)
 8010780:	1898      	adds	r0, r3, r2
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	461a      	mov	r2, r3
 8010788:	6879      	ldr	r1, [r7, #4]
 801078a:	f002 f83c 	bl	8012806 <memcpy>
        usb_rx_index += *Len;
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	681a      	ldr	r2, [r3, #0]
 8010792:	4b13      	ldr	r3, [pc, #76]	@ (80107e0 <TEMPLATE_Receive+0x198>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	4413      	add	r3, r2
 8010798:	4a11      	ldr	r2, [pc, #68]	@ (80107e0 <TEMPLATE_Receive+0x198>)
 801079a:	6013      	str	r3, [r2, #0]
        log_error("USB buffer overflow");
        return USBD_FAIL;
    }

    // If this was the last packet
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE)
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80107a2:	d80b      	bhi.n	80107bc <TEMPLATE_Receive+0x174>
 80107a4:	e007      	b.n	80107b6 <TEMPLATE_Receive+0x16e>
        usb_rx_index = 0;
 80107a6:	4b0e      	ldr	r3, [pc, #56]	@ (80107e0 <TEMPLATE_Receive+0x198>)
 80107a8:	2200      	movs	r2, #0
 80107aa:	601a      	str	r2, [r3, #0]
        log_error("USB buffer overflow");
 80107ac:	480e      	ldr	r0, [pc, #56]	@ (80107e8 <TEMPLATE_Receive+0x1a0>)
 80107ae:	f7f0 faf9 	bl	8000da4 <log_error>
        return USBD_FAIL;
 80107b2:	2303      	movs	r3, #3
 80107b4:	e006      	b.n	80107c4 <TEMPLATE_Receive+0x17c>
    {
        usb_rx_complete = true;
 80107b6:	4b0d      	ldr	r3, [pc, #52]	@ (80107ec <TEMPLATE_Receive+0x1a4>)
 80107b8:	2201      	movs	r2, #1
 80107ba:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80107bc:	480c      	ldr	r0, [pc, #48]	@ (80107f0 <TEMPLATE_Receive+0x1a8>)
 80107be:	f7ff fe43 	bl	8010448 <USBD_CDC_ReceivePacket>
    return USBD_OK;
 80107c2:	2300      	movs	r3, #0
 80107c4:	46b5      	mov	sp, r6
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	372c      	adds	r7, #44	@ 0x2c
 80107ca:	46bd      	mov	sp, r7
 80107cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107d0:	08013648 	.word	0x08013648
 80107d4:	08013684 	.word	0x08013684
 80107d8:	08013668 	.word	0x08013668
 80107dc:	0801366c 	.word	0x0801366c
 80107e0:	20010ea8 	.word	0x20010ea8
 80107e4:	20000ea8 	.word	0x20000ea8
 80107e8:	0801369c 	.word	0x0801369c
 80107ec:	20010eac 	.word	0x20010eac
 80107f0:	20000720 	.word	0x20000720

080107f4 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80107f4:	b480      	push	{r7}
 80107f6:	b085      	sub	sp, #20
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	60f8      	str	r0, [r7, #12]
 80107fc:	60b9      	str	r1, [r7, #8]
 80107fe:	4613      	mov	r3, r2
 8010800:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 8010802:	2300      	movs	r3, #0

}
 8010804:	4618      	mov	r0, r3
 8010806:	3714      	adds	r7, #20
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8010824:	4619      	mov	r1, r3
 8010826:	4610      	mov	r0, r2
 8010828:	f000 faa5 	bl	8010d76 <USBD_LL_SetupStage>
}
 801082c:	bf00      	nop
 801082e:	3708      	adds	r7, #8
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b082      	sub	sp, #8
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	460b      	mov	r3, r1
 801083e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 8010846:	78fa      	ldrb	r2, [r7, #3]
 8010848:	6879      	ldr	r1, [r7, #4]
 801084a:	4613      	mov	r3, r2
 801084c:	009b      	lsls	r3, r3, #2
 801084e:	4413      	add	r3, r2
 8010850:	00db      	lsls	r3, r3, #3
 8010852:	440b      	add	r3, r1
 8010854:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	78fb      	ldrb	r3, [r7, #3]
 801085c:	4619      	mov	r1, r3
 801085e:	f000 fadf 	bl	8010e20 <USBD_LL_DataOutStage>
}
 8010862:	bf00      	nop
 8010864:	3708      	adds	r7, #8
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}

0801086a <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 801086a:	b580      	push	{r7, lr}
 801086c:	b082      	sub	sp, #8
 801086e:	af00      	add	r7, sp, #0
 8010870:	6078      	str	r0, [r7, #4]
 8010872:	460b      	mov	r3, r1
 8010874:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 801087c:	78fa      	ldrb	r2, [r7, #3]
 801087e:	6879      	ldr	r1, [r7, #4]
 8010880:	4613      	mov	r3, r2
 8010882:	009b      	lsls	r3, r3, #2
 8010884:	4413      	add	r3, r2
 8010886:	00db      	lsls	r3, r3, #3
 8010888:	440b      	add	r3, r1
 801088a:	3328      	adds	r3, #40	@ 0x28
 801088c:	681a      	ldr	r2, [r3, #0]
 801088e:	78fb      	ldrb	r3, [r7, #3]
 8010890:	4619      	mov	r1, r3
 8010892:	f000 fb78 	bl	8010f86 <USBD_LL_DataInStage>
}
 8010896:	bf00      	nop
 8010898:	3708      	adds	r7, #8
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}

0801089e <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 801089e:	b580      	push	{r7, lr}
 80108a0:	b082      	sub	sp, #8
 80108a2:	af00      	add	r7, sp, #0
 80108a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80108ac:	4618      	mov	r0, r3
 80108ae:	f000 fc7e 	bl	80111ae <USBD_LL_SOF>
}
 80108b2:	bf00      	nop
 80108b4:	3708      	adds	r7, #8
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}

080108ba <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80108ba:	b580      	push	{r7, lr}
 80108bc:	b084      	sub	sp, #16
 80108be:	af00      	add	r7, sp, #0
 80108c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80108c2:	2301      	movs	r3, #1
 80108c4:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	79db      	ldrb	r3, [r3, #7]
 80108ca:	2b02      	cmp	r3, #2
 80108cc:	d001      	beq.n	80108d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80108ce:	f7f0 ffb3 	bl	8001838 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80108d8:	7bfa      	ldrb	r2, [r7, #15]
 80108da:	4611      	mov	r1, r2
 80108dc:	4618      	mov	r0, r3
 80108de:	f000 fc56 	bl	801118e <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80108e8:	4618      	mov	r0, r3
 80108ea:	f000 fbfe 	bl	80110ea <USBD_LL_Reset>
}
 80108ee:	bf00      	nop
 80108f0:	3710      	adds	r7, #16
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
	...

080108f8 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	4a19      	ldr	r2, [pc, #100]	@ (8010968 <USBD_LL_Init+0x70>)
 8010904:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801090e:	2340      	movs	r3, #64	@ 0x40
 8010910:	2200      	movs	r2, #0
 8010912:	2100      	movs	r1, #0
 8010914:	f7f5 f894 	bl	8005a40 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801091e:	2380      	movs	r3, #128	@ 0x80
 8010920:	2200      	movs	r2, #0
 8010922:	2180      	movs	r1, #128	@ 0x80
 8010924:	f7f5 f88c 	bl	8005a40 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801092e:	23c0      	movs	r3, #192	@ 0xc0
 8010930:	2200      	movs	r2, #0
 8010932:	2181      	movs	r1, #129	@ 0x81
 8010934:	f7f5 f884 	bl	8005a40 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801093e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010942:	2200      	movs	r2, #0
 8010944:	2101      	movs	r1, #1
 8010946:	f7f5 f87b 	bl	8005a40 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010950:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8010954:	2200      	movs	r2, #0
 8010956:	2182      	movs	r1, #130	@ 0x82
 8010958:	f7f5 f872 	bl	8005a40 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 801095c:	2300      	movs	r3, #0
}
 801095e:	4618      	mov	r0, r3
 8010960:	3708      	adds	r7, #8
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}
 8010966:	bf00      	nop
 8010968:	2000043c 	.word	0x2000043c

0801096c <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b084      	sub	sp, #16
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801097a:	4618      	mov	r0, r3
 801097c:	f7f3 fd44 	bl	8004408 <HAL_PCD_Start>
 8010980:	4603      	mov	r3, r0
 8010982:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 8010984:	7bfb      	ldrb	r3, [r7, #15]
 8010986:	4618      	mov	r0, r3
 8010988:	f000 f916 	bl	8010bb8 <USBD_Get_USB_Status>
 801098c:	4603      	mov	r3, r0
}
 801098e:	4618      	mov	r0, r3
 8010990:	3710      	adds	r7, #16
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}

08010996 <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 8010996:	b580      	push	{r7, lr}
 8010998:	b084      	sub	sp, #16
 801099a:	af00      	add	r7, sp, #0
 801099c:	6078      	str	r0, [r7, #4]
 801099e:	4608      	mov	r0, r1
 80109a0:	4611      	mov	r1, r2
 80109a2:	461a      	mov	r2, r3
 80109a4:	4603      	mov	r3, r0
 80109a6:	70fb      	strb	r3, [r7, #3]
 80109a8:	460b      	mov	r3, r1
 80109aa:	70bb      	strb	r3, [r7, #2]
 80109ac:	4613      	mov	r3, r2
 80109ae:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80109b6:	78bb      	ldrb	r3, [r7, #2]
 80109b8:	883a      	ldrh	r2, [r7, #0]
 80109ba:	78f9      	ldrb	r1, [r7, #3]
 80109bc:	f7f3 fe73 	bl	80046a6 <HAL_PCD_EP_Open>
 80109c0:	4603      	mov	r3, r0
 80109c2:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 80109c4:	7bfb      	ldrb	r3, [r7, #15]
 80109c6:	4618      	mov	r0, r3
 80109c8:	f000 f8f6 	bl	8010bb8 <USBD_Get_USB_Status>
 80109cc:	4603      	mov	r3, r0
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3710      	adds	r7, #16
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}

080109d6 <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109d6:	b580      	push	{r7, lr}
 80109d8:	b084      	sub	sp, #16
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
 80109de:	460b      	mov	r3, r1
 80109e0:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80109e8:	78fa      	ldrb	r2, [r7, #3]
 80109ea:	4611      	mov	r1, r2
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7f3 febb 	bl	8004768 <HAL_PCD_EP_Close>
 80109f2:	4603      	mov	r3, r0
 80109f4:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 80109f6:	7bfb      	ldrb	r3, [r7, #15]
 80109f8:	4618      	mov	r0, r3
 80109fa:	f000 f8dd 	bl	8010bb8 <USBD_Get_USB_Status>
 80109fe:	4603      	mov	r3, r0
}
 8010a00:	4618      	mov	r0, r3
 8010a02:	3710      	adds	r7, #16
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b084      	sub	sp, #16
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	460b      	mov	r3, r1
 8010a12:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010a1a:	78fa      	ldrb	r2, [r7, #3]
 8010a1c:	4611      	mov	r1, r2
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f7f3 ff6e 	bl	8004900 <HAL_PCD_EP_SetStall>
 8010a24:	4603      	mov	r3, r0
 8010a26:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010a28:	7bfb      	ldrb	r3, [r7, #15]
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f000 f8c4 	bl	8010bb8 <USBD_Get_USB_Status>
 8010a30:	4603      	mov	r3, r0
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3710      	adds	r7, #16
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}

08010a3a <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 8010a3a:	b580      	push	{r7, lr}
 8010a3c:	b084      	sub	sp, #16
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
 8010a42:	460b      	mov	r3, r1
 8010a44:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010a4c:	78fa      	ldrb	r2, [r7, #3]
 8010a4e:	4611      	mov	r1, r2
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7f3 ffa9 	bl	80049a8 <HAL_PCD_EP_ClrStall>
 8010a56:	4603      	mov	r3, r0
 8010a58:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010a5a:	7bfb      	ldrb	r3, [r7, #15]
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f000 f8ab 	bl	8010bb8 <USBD_Get_USB_Status>
 8010a62:	4603      	mov	r3, r0
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3710      	adds	r7, #16
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a6c:	b480      	push	{r7}
 8010a6e:	b085      	sub	sp, #20
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	460b      	mov	r3, r1
 8010a76:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010a7e:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 8010a80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	da0b      	bge.n	8010aa0 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010a88:	78fb      	ldrb	r3, [r7, #3]
 8010a8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010a8e:	68f9      	ldr	r1, [r7, #12]
 8010a90:	4613      	mov	r3, r2
 8010a92:	009b      	lsls	r3, r3, #2
 8010a94:	4413      	add	r3, r2
 8010a96:	00db      	lsls	r3, r3, #3
 8010a98:	440b      	add	r3, r1
 8010a9a:	3316      	adds	r3, #22
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	e00b      	b.n	8010ab8 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010aa0:	78fb      	ldrb	r3, [r7, #3]
 8010aa2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010aa6:	68f9      	ldr	r1, [r7, #12]
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	009b      	lsls	r3, r3, #2
 8010aac:	4413      	add	r3, r2
 8010aae:	00db      	lsls	r3, r3, #3
 8010ab0:	440b      	add	r3, r1
 8010ab2:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 8010ab6:	781b      	ldrb	r3, [r3, #0]
      }
}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	3714      	adds	r7, #20
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr

08010ac4 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	460b      	mov	r3, r1
 8010ace:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010ad6:	78fa      	ldrb	r2, [r7, #3]
 8010ad8:	4611      	mov	r1, r2
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7f3 fdbf 	bl	800465e <HAL_PCD_SetAddress>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010ae4:	7bfb      	ldrb	r3, [r7, #15]
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f000 f866 	bl	8010bb8 <USBD_Get_USB_Status>
 8010aec:	4603      	mov	r3, r0
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3710      	adds	r7, #16
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}

08010af6 <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 8010af6:	b580      	push	{r7, lr}
 8010af8:	b086      	sub	sp, #24
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	60f8      	str	r0, [r7, #12]
 8010afe:	607a      	str	r2, [r7, #4]
 8010b00:	603b      	str	r3, [r7, #0]
 8010b02:	460b      	mov	r3, r1
 8010b04:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010b0c:	7af9      	ldrb	r1, [r7, #11]
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	687a      	ldr	r2, [r7, #4]
 8010b12:	f7f3 febd 	bl	8004890 <HAL_PCD_EP_Transmit>
 8010b16:	4603      	mov	r3, r0
 8010b18:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 8010b1a:	7dfb      	ldrb	r3, [r7, #23]
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f000 f84b 	bl	8010bb8 <USBD_Get_USB_Status>
 8010b22:	4603      	mov	r3, r0
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	3718      	adds	r7, #24
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}

08010b2c <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b086      	sub	sp, #24
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	60f8      	str	r0, [r7, #12]
 8010b34:	607a      	str	r2, [r7, #4]
 8010b36:	603b      	str	r3, [r7, #0]
 8010b38:	460b      	mov	r3, r1
 8010b3a:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010b42:	7af9      	ldrb	r1, [r7, #11]
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	687a      	ldr	r2, [r7, #4]
 8010b48:	f7f3 fe58 	bl	80047fc <HAL_PCD_EP_Receive>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 8010b50:	7dfb      	ldrb	r3, [r7, #23]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f000 f830 	bl	8010bb8 <USBD_Get_USB_Status>
 8010b58:	4603      	mov	r3, r0
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3718      	adds	r7, #24
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}

08010b62 <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b62:	b580      	push	{r7, lr}
 8010b64:	b082      	sub	sp, #8
 8010b66:	af00      	add	r7, sp, #0
 8010b68:	6078      	str	r0, [r7, #4]
 8010b6a:	460b      	mov	r3, r1
 8010b6c:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010b74:	78fa      	ldrb	r2, [r7, #3]
 8010b76:	4611      	mov	r1, r2
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7f3 fe71 	bl	8004860 <HAL_PCD_EP_GetRxCount>
 8010b7e:	4603      	mov	r3, r0
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3708      	adds	r7, #8
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}

08010b88 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b083      	sub	sp, #12
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 8010b90:	4b03      	ldr	r3, [pc, #12]	@ (8010ba0 <USBD_static_malloc+0x18>)
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	370c      	adds	r7, #12
 8010b96:	46bd      	mov	sp, r7
 8010b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9c:	4770      	bx	lr
 8010b9e:	bf00      	nop
 8010ba0:	20010eb0 	.word	0x20010eb0

08010ba4 <USBD_static_free>:

void USBD_static_free(void *p)
{
 8010ba4:	b480      	push	{r7}
 8010ba6:	b083      	sub	sp, #12
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 8010bac:	bf00      	nop
 8010bae:	370c      	adds	r7, #12
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb6:	4770      	bx	lr

08010bb8 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010bb8:	b480      	push	{r7}
 8010bba:	b085      	sub	sp, #20
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 8010bc6:	79fb      	ldrb	r3, [r7, #7]
 8010bc8:	2b03      	cmp	r3, #3
 8010bca:	d817      	bhi.n	8010bfc <USBD_Get_USB_Status+0x44>
 8010bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8010bd4 <USBD_Get_USB_Status+0x1c>)
 8010bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bd2:	bf00      	nop
 8010bd4:	08010be5 	.word	0x08010be5
 8010bd8:	08010beb 	.word	0x08010beb
 8010bdc:	08010bf1 	.word	0x08010bf1
 8010be0:	08010bf7 	.word	0x08010bf7
      {
      case HAL_OK :
             usb_status = USBD_OK;
 8010be4:	2300      	movs	r3, #0
 8010be6:	73fb      	strb	r3, [r7, #15]
             break;
 8010be8:	e00b      	b.n	8010c02 <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 8010bea:	2303      	movs	r3, #3
 8010bec:	73fb      	strb	r3, [r7, #15]
             break;
 8010bee:	e008      	b.n	8010c02 <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	73fb      	strb	r3, [r7, #15]
             break;
 8010bf4:	e005      	b.n	8010c02 <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 8010bf6:	2303      	movs	r3, #3
 8010bf8:	73fb      	strb	r3, [r7, #15]
             break;
 8010bfa:	e002      	b.n	8010c02 <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 8010bfc:	2303      	movs	r3, #3
 8010bfe:	73fb      	strb	r3, [r7, #15]
             break;
 8010c00:	bf00      	nop
      }
      return usb_status;
 8010c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	3714      	adds	r7, #20
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0e:	4770      	bx	lr

08010c10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b086      	sub	sp, #24
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	60f8      	str	r0, [r7, #12]
 8010c18:	60b9      	str	r1, [r7, #8]
 8010c1a:	4613      	mov	r3, r2
 8010c1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d101      	bne.n	8010c28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010c24:	2303      	movs	r3, #3
 8010c26:	e01f      	b.n	8010c68 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	2200      	movs	r2, #0
 8010c34:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d003      	beq.n	8010c4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	68ba      	ldr	r2, [r7, #8]
 8010c4a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	2201      	movs	r2, #1
 8010c52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	79fa      	ldrb	r2, [r7, #7]
 8010c5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010c5c:	68f8      	ldr	r0, [r7, #12]
 8010c5e:	f7ff fe4b 	bl	80108f8 <USBD_LL_Init>
 8010c62:	4603      	mov	r3, r0
 8010c64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3718      	adds	r7, #24
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d101      	bne.n	8010c88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010c84:	2303      	movs	r3, #3
 8010c86:	e025      	b.n	8010cd4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	683a      	ldr	r2, [r7, #0]
 8010c8c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	32ae      	adds	r2, #174	@ 0xae
 8010c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d00f      	beq.n	8010cc4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	32ae      	adds	r2, #174	@ 0xae
 8010cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cb4:	f107 020e 	add.w	r2, r7, #14
 8010cb8:	4610      	mov	r0, r2
 8010cba:	4798      	blx	r3
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010cca:	1c5a      	adds	r2, r3, #1
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8010cd2:	2300      	movs	r3, #0
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3710      	adds	r7, #16
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f7ff fe41 	bl	801096c <USBD_LL_Start>
 8010cea:	4603      	mov	r3, r0
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3708      	adds	r7, #8
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}

08010cf4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	b083      	sub	sp, #12
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010cfc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	370c      	adds	r7, #12
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr

08010d0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010d0a:	b580      	push	{r7, lr}
 8010d0c:	b084      	sub	sp, #16
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
 8010d12:	460b      	mov	r3, r1
 8010d14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d16:	2300      	movs	r3, #0
 8010d18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d009      	beq.n	8010d38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	78fa      	ldrb	r2, [r7, #3]
 8010d2e:	4611      	mov	r1, r2
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	4798      	blx	r3
 8010d34:	4603      	mov	r3, r0
 8010d36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3710      	adds	r7, #16
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}

08010d42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010d42:	b580      	push	{r7, lr}
 8010d44:	b084      	sub	sp, #16
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6078      	str	r0, [r7, #4]
 8010d4a:	460b      	mov	r3, r1
 8010d4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d58:	685b      	ldr	r3, [r3, #4]
 8010d5a:	78fa      	ldrb	r2, [r7, #3]
 8010d5c:	4611      	mov	r1, r2
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	4798      	blx	r3
 8010d62:	4603      	mov	r3, r0
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d001      	beq.n	8010d6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010d68:	2303      	movs	r3, #3
 8010d6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3710      	adds	r7, #16
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}

08010d76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010d76:	b580      	push	{r7, lr}
 8010d78:	b084      	sub	sp, #16
 8010d7a:	af00      	add	r7, sp, #0
 8010d7c:	6078      	str	r0, [r7, #4]
 8010d7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010d86:	6839      	ldr	r1, [r7, #0]
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f001 f846 	bl	8011e1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2201      	movs	r2, #1
 8010d92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010d9c:	461a      	mov	r2, r3
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010daa:	f003 031f 	and.w	r3, r3, #31
 8010dae:	2b02      	cmp	r3, #2
 8010db0:	d01a      	beq.n	8010de8 <USBD_LL_SetupStage+0x72>
 8010db2:	2b02      	cmp	r3, #2
 8010db4:	d822      	bhi.n	8010dfc <USBD_LL_SetupStage+0x86>
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d002      	beq.n	8010dc0 <USBD_LL_SetupStage+0x4a>
 8010dba:	2b01      	cmp	r3, #1
 8010dbc:	d00a      	beq.n	8010dd4 <USBD_LL_SetupStage+0x5e>
 8010dbe:	e01d      	b.n	8010dfc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010dc6:	4619      	mov	r1, r3
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	f000 fa9d 	bl	8011308 <USBD_StdDevReq>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8010dd2:	e020      	b.n	8010e16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010dda:	4619      	mov	r1, r3
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 fb05 	bl	80113ec <USBD_StdItfReq>
 8010de2:	4603      	mov	r3, r0
 8010de4:	73fb      	strb	r3, [r7, #15]
      break;
 8010de6:	e016      	b.n	8010e16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010dee:	4619      	mov	r1, r3
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f000 fb67 	bl	80114c4 <USBD_StdEPReq>
 8010df6:	4603      	mov	r3, r0
 8010df8:	73fb      	strb	r3, [r7, #15]
      break;
 8010dfa:	e00c      	b.n	8010e16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010e02:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010e06:	b2db      	uxtb	r3, r3
 8010e08:	4619      	mov	r1, r3
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f7ff fdfc 	bl	8010a08 <USBD_LL_StallEP>
 8010e10:	4603      	mov	r3, r0
 8010e12:	73fb      	strb	r3, [r7, #15]
      break;
 8010e14:	bf00      	nop
  }

  return ret;
 8010e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e18:	4618      	mov	r0, r3
 8010e1a:	3710      	adds	r7, #16
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}

08010e20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b086      	sub	sp, #24
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	60f8      	str	r0, [r7, #12]
 8010e28:	460b      	mov	r3, r1
 8010e2a:	607a      	str	r2, [r7, #4]
 8010e2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010e32:	7afb      	ldrb	r3, [r7, #11]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d16e      	bne.n	8010f16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8010e3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010e46:	2b03      	cmp	r3, #3
 8010e48:	f040 8098 	bne.w	8010f7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010e4c:	693b      	ldr	r3, [r7, #16]
 8010e4e:	689a      	ldr	r2, [r3, #8]
 8010e50:	693b      	ldr	r3, [r7, #16]
 8010e52:	68db      	ldr	r3, [r3, #12]
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d913      	bls.n	8010e80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	689a      	ldr	r2, [r3, #8]
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	1ad2      	subs	r2, r2, r3
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	68da      	ldr	r2, [r3, #12]
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	689b      	ldr	r3, [r3, #8]
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	bf28      	it	cs
 8010e72:	4613      	movcs	r3, r2
 8010e74:	461a      	mov	r2, r3
 8010e76:	6879      	ldr	r1, [r7, #4]
 8010e78:	68f8      	ldr	r0, [r7, #12]
 8010e7a:	f001 f9cf 	bl	801221c <USBD_CtlContinueRx>
 8010e7e:	e07d      	b.n	8010f7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010e86:	f003 031f 	and.w	r3, r3, #31
 8010e8a:	2b02      	cmp	r3, #2
 8010e8c:	d014      	beq.n	8010eb8 <USBD_LL_DataOutStage+0x98>
 8010e8e:	2b02      	cmp	r3, #2
 8010e90:	d81d      	bhi.n	8010ece <USBD_LL_DataOutStage+0xae>
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d002      	beq.n	8010e9c <USBD_LL_DataOutStage+0x7c>
 8010e96:	2b01      	cmp	r3, #1
 8010e98:	d003      	beq.n	8010ea2 <USBD_LL_DataOutStage+0x82>
 8010e9a:	e018      	b.n	8010ece <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	75bb      	strb	r3, [r7, #22]
            break;
 8010ea0:	e018      	b.n	8010ed4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010ea8:	b2db      	uxtb	r3, r3
 8010eaa:	4619      	mov	r1, r3
 8010eac:	68f8      	ldr	r0, [r7, #12]
 8010eae:	f000 f99e 	bl	80111ee <USBD_CoreFindIF>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	75bb      	strb	r3, [r7, #22]
            break;
 8010eb6:	e00d      	b.n	8010ed4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010ebe:	b2db      	uxtb	r3, r3
 8010ec0:	4619      	mov	r1, r3
 8010ec2:	68f8      	ldr	r0, [r7, #12]
 8010ec4:	f000 f9a0 	bl	8011208 <USBD_CoreFindEP>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	75bb      	strb	r3, [r7, #22]
            break;
 8010ecc:	e002      	b.n	8010ed4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	75bb      	strb	r3, [r7, #22]
            break;
 8010ed2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010ed4:	7dbb      	ldrb	r3, [r7, #22]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d119      	bne.n	8010f0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	2b03      	cmp	r3, #3
 8010ee4:	d113      	bne.n	8010f0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010ee6:	7dba      	ldrb	r2, [r7, #22]
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	32ae      	adds	r2, #174	@ 0xae
 8010eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ef0:	691b      	ldr	r3, [r3, #16]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d00b      	beq.n	8010f0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010ef6:	7dba      	ldrb	r2, [r7, #22]
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010efe:	7dba      	ldrb	r2, [r7, #22]
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	32ae      	adds	r2, #174	@ 0xae
 8010f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f08:	691b      	ldr	r3, [r3, #16]
 8010f0a:	68f8      	ldr	r0, [r7, #12]
 8010f0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010f0e:	68f8      	ldr	r0, [r7, #12]
 8010f10:	f001 f995 	bl	801223e <USBD_CtlSendStatus>
 8010f14:	e032      	b.n	8010f7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010f16:	7afb      	ldrb	r3, [r7, #11]
 8010f18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f1c:	b2db      	uxtb	r3, r3
 8010f1e:	4619      	mov	r1, r3
 8010f20:	68f8      	ldr	r0, [r7, #12]
 8010f22:	f000 f971 	bl	8011208 <USBD_CoreFindEP>
 8010f26:	4603      	mov	r3, r0
 8010f28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010f2a:	7dbb      	ldrb	r3, [r7, #22]
 8010f2c:	2bff      	cmp	r3, #255	@ 0xff
 8010f2e:	d025      	beq.n	8010f7c <USBD_LL_DataOutStage+0x15c>
 8010f30:	7dbb      	ldrb	r3, [r7, #22]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d122      	bne.n	8010f7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	2b03      	cmp	r3, #3
 8010f40:	d117      	bne.n	8010f72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010f42:	7dba      	ldrb	r2, [r7, #22]
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	32ae      	adds	r2, #174	@ 0xae
 8010f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f4c:	699b      	ldr	r3, [r3, #24]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d00f      	beq.n	8010f72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010f52:	7dba      	ldrb	r2, [r7, #22]
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010f5a:	7dba      	ldrb	r2, [r7, #22]
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	32ae      	adds	r2, #174	@ 0xae
 8010f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f64:	699b      	ldr	r3, [r3, #24]
 8010f66:	7afa      	ldrb	r2, [r7, #11]
 8010f68:	4611      	mov	r1, r2
 8010f6a:	68f8      	ldr	r0, [r7, #12]
 8010f6c:	4798      	blx	r3
 8010f6e:	4603      	mov	r3, r0
 8010f70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010f72:	7dfb      	ldrb	r3, [r7, #23]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d001      	beq.n	8010f7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010f78:	7dfb      	ldrb	r3, [r7, #23]
 8010f7a:	e000      	b.n	8010f7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010f7c:	2300      	movs	r3, #0
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3718      	adds	r7, #24
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}

08010f86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010f86:	b580      	push	{r7, lr}
 8010f88:	b086      	sub	sp, #24
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	60f8      	str	r0, [r7, #12]
 8010f8e:	460b      	mov	r3, r1
 8010f90:	607a      	str	r2, [r7, #4]
 8010f92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010f94:	7afb      	ldrb	r3, [r7, #11]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d16f      	bne.n	801107a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	3314      	adds	r3, #20
 8010f9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010fa6:	2b02      	cmp	r3, #2
 8010fa8:	d15a      	bne.n	8011060 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	689a      	ldr	r2, [r3, #8]
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	68db      	ldr	r3, [r3, #12]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d914      	bls.n	8010fe0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010fb6:	693b      	ldr	r3, [r7, #16]
 8010fb8:	689a      	ldr	r2, [r3, #8]
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	68db      	ldr	r3, [r3, #12]
 8010fbe:	1ad2      	subs	r2, r2, r3
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010fc4:	693b      	ldr	r3, [r7, #16]
 8010fc6:	689b      	ldr	r3, [r3, #8]
 8010fc8:	461a      	mov	r2, r3
 8010fca:	6879      	ldr	r1, [r7, #4]
 8010fcc:	68f8      	ldr	r0, [r7, #12]
 8010fce:	f001 f8f7 	bl	80121c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	2100      	movs	r1, #0
 8010fd8:	68f8      	ldr	r0, [r7, #12]
 8010fda:	f7ff fda7 	bl	8010b2c <USBD_LL_PrepareReceive>
 8010fde:	e03f      	b.n	8011060 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	68da      	ldr	r2, [r3, #12]
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	689b      	ldr	r3, [r3, #8]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d11c      	bne.n	8011026 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	685a      	ldr	r2, [r3, #4]
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d316      	bcc.n	8011026 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	685a      	ldr	r2, [r3, #4]
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011002:	429a      	cmp	r2, r3
 8011004:	d20f      	bcs.n	8011026 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011006:	2200      	movs	r2, #0
 8011008:	2100      	movs	r1, #0
 801100a:	68f8      	ldr	r0, [r7, #12]
 801100c:	f001 f8d8 	bl	80121c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	2200      	movs	r2, #0
 8011014:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011018:	2300      	movs	r3, #0
 801101a:	2200      	movs	r2, #0
 801101c:	2100      	movs	r1, #0
 801101e:	68f8      	ldr	r0, [r7, #12]
 8011020:	f7ff fd84 	bl	8010b2c <USBD_LL_PrepareReceive>
 8011024:	e01c      	b.n	8011060 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801102c:	b2db      	uxtb	r3, r3
 801102e:	2b03      	cmp	r3, #3
 8011030:	d10f      	bne.n	8011052 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011038:	68db      	ldr	r3, [r3, #12]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d009      	beq.n	8011052 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	2200      	movs	r2, #0
 8011042:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801104c:	68db      	ldr	r3, [r3, #12]
 801104e:	68f8      	ldr	r0, [r7, #12]
 8011050:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011052:	2180      	movs	r1, #128	@ 0x80
 8011054:	68f8      	ldr	r0, [r7, #12]
 8011056:	f7ff fcd7 	bl	8010a08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801105a:	68f8      	ldr	r0, [r7, #12]
 801105c:	f001 f902 	bl	8012264 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8011066:	2b00      	cmp	r3, #0
 8011068:	d03a      	beq.n	80110e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801106a:	68f8      	ldr	r0, [r7, #12]
 801106c:	f7ff fe42 	bl	8010cf4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	2200      	movs	r2, #0
 8011074:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8011078:	e032      	b.n	80110e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801107a:	7afb      	ldrb	r3, [r7, #11]
 801107c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011080:	b2db      	uxtb	r3, r3
 8011082:	4619      	mov	r1, r3
 8011084:	68f8      	ldr	r0, [r7, #12]
 8011086:	f000 f8bf 	bl	8011208 <USBD_CoreFindEP>
 801108a:	4603      	mov	r3, r0
 801108c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801108e:	7dfb      	ldrb	r3, [r7, #23]
 8011090:	2bff      	cmp	r3, #255	@ 0xff
 8011092:	d025      	beq.n	80110e0 <USBD_LL_DataInStage+0x15a>
 8011094:	7dfb      	ldrb	r3, [r7, #23]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d122      	bne.n	80110e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	2b03      	cmp	r3, #3
 80110a4:	d11c      	bne.n	80110e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80110a6:	7dfa      	ldrb	r2, [r7, #23]
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	32ae      	adds	r2, #174	@ 0xae
 80110ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110b0:	695b      	ldr	r3, [r3, #20]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d014      	beq.n	80110e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80110b6:	7dfa      	ldrb	r2, [r7, #23]
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80110be:	7dfa      	ldrb	r2, [r7, #23]
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	32ae      	adds	r2, #174	@ 0xae
 80110c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110c8:	695b      	ldr	r3, [r3, #20]
 80110ca:	7afa      	ldrb	r2, [r7, #11]
 80110cc:	4611      	mov	r1, r2
 80110ce:	68f8      	ldr	r0, [r7, #12]
 80110d0:	4798      	blx	r3
 80110d2:	4603      	mov	r3, r0
 80110d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80110d6:	7dbb      	ldrb	r3, [r7, #22]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d001      	beq.n	80110e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80110dc:	7dbb      	ldrb	r3, [r7, #22]
 80110de:	e000      	b.n	80110e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80110e0:	2300      	movs	r3, #0
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3718      	adds	r7, #24
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}

080110ea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80110ea:	b580      	push	{r7, lr}
 80110ec:	b084      	sub	sp, #16
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80110f2:	2300      	movs	r3, #0
 80110f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	2201      	movs	r2, #1
 80110fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2200      	movs	r2, #0
 8011102:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2200      	movs	r2, #0
 801110a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2200      	movs	r2, #0
 8011110:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2200      	movs	r2, #0
 8011118:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011122:	2b00      	cmp	r3, #0
 8011124:	d014      	beq.n	8011150 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d00e      	beq.n	8011150 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	6852      	ldr	r2, [r2, #4]
 801113e:	b2d2      	uxtb	r2, r2
 8011140:	4611      	mov	r1, r2
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	4798      	blx	r3
 8011146:	4603      	mov	r3, r0
 8011148:	2b00      	cmp	r3, #0
 801114a:	d001      	beq.n	8011150 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801114c:	2303      	movs	r3, #3
 801114e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011150:	2340      	movs	r3, #64	@ 0x40
 8011152:	2200      	movs	r2, #0
 8011154:	2100      	movs	r1, #0
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f7ff fc1d 	bl	8010996 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2201      	movs	r2, #1
 8011160:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2240      	movs	r2, #64	@ 0x40
 8011168:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801116c:	2340      	movs	r3, #64	@ 0x40
 801116e:	2200      	movs	r2, #0
 8011170:	2180      	movs	r1, #128	@ 0x80
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f7ff fc0f 	bl	8010996 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2201      	movs	r2, #1
 801117c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	2240      	movs	r2, #64	@ 0x40
 8011182:	621a      	str	r2, [r3, #32]

  return ret;
 8011184:	7bfb      	ldrb	r3, [r7, #15]
}
 8011186:	4618      	mov	r0, r3
 8011188:	3710      	adds	r7, #16
 801118a:	46bd      	mov	sp, r7
 801118c:	bd80      	pop	{r7, pc}

0801118e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801118e:	b480      	push	{r7}
 8011190:	b083      	sub	sp, #12
 8011192:	af00      	add	r7, sp, #0
 8011194:	6078      	str	r0, [r7, #4]
 8011196:	460b      	mov	r3, r1
 8011198:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	78fa      	ldrb	r2, [r7, #3]
 801119e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80111a0:	2300      	movs	r3, #0
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	370c      	adds	r7, #12
 80111a6:	46bd      	mov	sp, r7
 80111a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ac:	4770      	bx	lr

080111ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80111ae:	b580      	push	{r7, lr}
 80111b0:	b082      	sub	sp, #8
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111bc:	b2db      	uxtb	r3, r3
 80111be:	2b03      	cmp	r3, #3
 80111c0:	d110      	bne.n	80111e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d00b      	beq.n	80111e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80111d2:	69db      	ldr	r3, [r3, #28]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d005      	beq.n	80111e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80111de:	69db      	ldr	r3, [r3, #28]
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80111e4:	2300      	movs	r3, #0
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3708      	adds	r7, #8
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}

080111ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80111ee:	b480      	push	{r7}
 80111f0:	b083      	sub	sp, #12
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	6078      	str	r0, [r7, #4]
 80111f6:	460b      	mov	r3, r1
 80111f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80111fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	370c      	adds	r7, #12
 8011200:	46bd      	mov	sp, r7
 8011202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011206:	4770      	bx	lr

08011208 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011208:	b480      	push	{r7}
 801120a:	b083      	sub	sp, #12
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	460b      	mov	r3, r1
 8011212:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011214:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011216:	4618      	mov	r0, r3
 8011218:	370c      	adds	r7, #12
 801121a:	46bd      	mov	sp, r7
 801121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011220:	4770      	bx	lr

08011222 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011222:	b580      	push	{r7, lr}
 8011224:	b086      	sub	sp, #24
 8011226:	af00      	add	r7, sp, #0
 8011228:	6078      	str	r0, [r7, #4]
 801122a:	460b      	mov	r3, r1
 801122c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011236:	2300      	movs	r3, #0
 8011238:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	885b      	ldrh	r3, [r3, #2]
 801123e:	b29b      	uxth	r3, r3
 8011240:	68fa      	ldr	r2, [r7, #12]
 8011242:	7812      	ldrb	r2, [r2, #0]
 8011244:	4293      	cmp	r3, r2
 8011246:	d91f      	bls.n	8011288 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801124e:	e013      	b.n	8011278 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011250:	f107 030a 	add.w	r3, r7, #10
 8011254:	4619      	mov	r1, r3
 8011256:	6978      	ldr	r0, [r7, #20]
 8011258:	f000 f81b 	bl	8011292 <USBD_GetNextDesc>
 801125c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	785b      	ldrb	r3, [r3, #1]
 8011262:	2b05      	cmp	r3, #5
 8011264:	d108      	bne.n	8011278 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	789b      	ldrb	r3, [r3, #2]
 801126e:	78fa      	ldrb	r2, [r7, #3]
 8011270:	429a      	cmp	r2, r3
 8011272:	d008      	beq.n	8011286 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011274:	2300      	movs	r3, #0
 8011276:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	885b      	ldrh	r3, [r3, #2]
 801127c:	b29a      	uxth	r2, r3
 801127e:	897b      	ldrh	r3, [r7, #10]
 8011280:	429a      	cmp	r2, r3
 8011282:	d8e5      	bhi.n	8011250 <USBD_GetEpDesc+0x2e>
 8011284:	e000      	b.n	8011288 <USBD_GetEpDesc+0x66>
          break;
 8011286:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011288:	693b      	ldr	r3, [r7, #16]
}
 801128a:	4618      	mov	r0, r3
 801128c:	3718      	adds	r7, #24
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}

08011292 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011292:	b480      	push	{r7}
 8011294:	b085      	sub	sp, #20
 8011296:	af00      	add	r7, sp, #0
 8011298:	6078      	str	r0, [r7, #4]
 801129a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	881b      	ldrh	r3, [r3, #0]
 80112a4:	68fa      	ldr	r2, [r7, #12]
 80112a6:	7812      	ldrb	r2, [r2, #0]
 80112a8:	4413      	add	r3, r2
 80112aa:	b29a      	uxth	r2, r3
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	461a      	mov	r2, r3
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	4413      	add	r3, r2
 80112ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80112bc:	68fb      	ldr	r3, [r7, #12]
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3714      	adds	r7, #20
 80112c2:	46bd      	mov	sp, r7
 80112c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c8:	4770      	bx	lr

080112ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80112ca:	b480      	push	{r7}
 80112cc:	b087      	sub	sp, #28
 80112ce:	af00      	add	r7, sp, #0
 80112d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	781b      	ldrb	r3, [r3, #0]
 80112da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	3301      	adds	r3, #1
 80112e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	781b      	ldrb	r3, [r3, #0]
 80112e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80112e8:	8a3b      	ldrh	r3, [r7, #16]
 80112ea:	021b      	lsls	r3, r3, #8
 80112ec:	b21a      	sxth	r2, r3
 80112ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80112f2:	4313      	orrs	r3, r2
 80112f4:	b21b      	sxth	r3, r3
 80112f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80112f8:	89fb      	ldrh	r3, [r7, #14]
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	371c      	adds	r7, #28
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr
	...

08011308 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011312:	2300      	movs	r3, #0
 8011314:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	781b      	ldrb	r3, [r3, #0]
 801131a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801131e:	2b40      	cmp	r3, #64	@ 0x40
 8011320:	d005      	beq.n	801132e <USBD_StdDevReq+0x26>
 8011322:	2b40      	cmp	r3, #64	@ 0x40
 8011324:	d857      	bhi.n	80113d6 <USBD_StdDevReq+0xce>
 8011326:	2b00      	cmp	r3, #0
 8011328:	d00f      	beq.n	801134a <USBD_StdDevReq+0x42>
 801132a:	2b20      	cmp	r3, #32
 801132c:	d153      	bne.n	80113d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	32ae      	adds	r2, #174	@ 0xae
 8011338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801133c:	689b      	ldr	r3, [r3, #8]
 801133e:	6839      	ldr	r1, [r7, #0]
 8011340:	6878      	ldr	r0, [r7, #4]
 8011342:	4798      	blx	r3
 8011344:	4603      	mov	r3, r0
 8011346:	73fb      	strb	r3, [r7, #15]
      break;
 8011348:	e04a      	b.n	80113e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	785b      	ldrb	r3, [r3, #1]
 801134e:	2b09      	cmp	r3, #9
 8011350:	d83b      	bhi.n	80113ca <USBD_StdDevReq+0xc2>
 8011352:	a201      	add	r2, pc, #4	@ (adr r2, 8011358 <USBD_StdDevReq+0x50>)
 8011354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011358:	080113ad 	.word	0x080113ad
 801135c:	080113c1 	.word	0x080113c1
 8011360:	080113cb 	.word	0x080113cb
 8011364:	080113b7 	.word	0x080113b7
 8011368:	080113cb 	.word	0x080113cb
 801136c:	0801138b 	.word	0x0801138b
 8011370:	08011381 	.word	0x08011381
 8011374:	080113cb 	.word	0x080113cb
 8011378:	080113a3 	.word	0x080113a3
 801137c:	08011395 	.word	0x08011395
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011380:	6839      	ldr	r1, [r7, #0]
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f000 fa3c 	bl	8011800 <USBD_GetDescriptor>
          break;
 8011388:	e024      	b.n	80113d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801138a:	6839      	ldr	r1, [r7, #0]
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f000 fba1 	bl	8011ad4 <USBD_SetAddress>
          break;
 8011392:	e01f      	b.n	80113d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011394:	6839      	ldr	r1, [r7, #0]
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f000 fbe0 	bl	8011b5c <USBD_SetConfig>
 801139c:	4603      	mov	r3, r0
 801139e:	73fb      	strb	r3, [r7, #15]
          break;
 80113a0:	e018      	b.n	80113d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80113a2:	6839      	ldr	r1, [r7, #0]
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f000 fc83 	bl	8011cb0 <USBD_GetConfig>
          break;
 80113aa:	e013      	b.n	80113d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80113ac:	6839      	ldr	r1, [r7, #0]
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f000 fcb4 	bl	8011d1c <USBD_GetStatus>
          break;
 80113b4:	e00e      	b.n	80113d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80113b6:	6839      	ldr	r1, [r7, #0]
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f000 fce3 	bl	8011d84 <USBD_SetFeature>
          break;
 80113be:	e009      	b.n	80113d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80113c0:	6839      	ldr	r1, [r7, #0]
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f000 fd07 	bl	8011dd6 <USBD_ClrFeature>
          break;
 80113c8:	e004      	b.n	80113d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80113ca:	6839      	ldr	r1, [r7, #0]
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f000 fd5e 	bl	8011e8e <USBD_CtlError>
          break;
 80113d2:	bf00      	nop
      }
      break;
 80113d4:	e004      	b.n	80113e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80113d6:	6839      	ldr	r1, [r7, #0]
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f000 fd58 	bl	8011e8e <USBD_CtlError>
      break;
 80113de:	bf00      	nop
  }

  return ret;
 80113e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	3710      	adds	r7, #16
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}
 80113ea:	bf00      	nop

080113ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b084      	sub	sp, #16
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
 80113f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80113f6:	2300      	movs	r3, #0
 80113f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011402:	2b40      	cmp	r3, #64	@ 0x40
 8011404:	d005      	beq.n	8011412 <USBD_StdItfReq+0x26>
 8011406:	2b40      	cmp	r3, #64	@ 0x40
 8011408:	d852      	bhi.n	80114b0 <USBD_StdItfReq+0xc4>
 801140a:	2b00      	cmp	r3, #0
 801140c:	d001      	beq.n	8011412 <USBD_StdItfReq+0x26>
 801140e:	2b20      	cmp	r3, #32
 8011410:	d14e      	bne.n	80114b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011418:	b2db      	uxtb	r3, r3
 801141a:	3b01      	subs	r3, #1
 801141c:	2b02      	cmp	r3, #2
 801141e:	d840      	bhi.n	80114a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	889b      	ldrh	r3, [r3, #4]
 8011424:	b2db      	uxtb	r3, r3
 8011426:	2b01      	cmp	r3, #1
 8011428:	d836      	bhi.n	8011498 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	889b      	ldrh	r3, [r3, #4]
 801142e:	b2db      	uxtb	r3, r3
 8011430:	4619      	mov	r1, r3
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f7ff fedb 	bl	80111ee <USBD_CoreFindIF>
 8011438:	4603      	mov	r3, r0
 801143a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801143c:	7bbb      	ldrb	r3, [r7, #14]
 801143e:	2bff      	cmp	r3, #255	@ 0xff
 8011440:	d01d      	beq.n	801147e <USBD_StdItfReq+0x92>
 8011442:	7bbb      	ldrb	r3, [r7, #14]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d11a      	bne.n	801147e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011448:	7bba      	ldrb	r2, [r7, #14]
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	32ae      	adds	r2, #174	@ 0xae
 801144e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011452:	689b      	ldr	r3, [r3, #8]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d00f      	beq.n	8011478 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011458:	7bba      	ldrb	r2, [r7, #14]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011460:	7bba      	ldrb	r2, [r7, #14]
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	32ae      	adds	r2, #174	@ 0xae
 8011466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801146a:	689b      	ldr	r3, [r3, #8]
 801146c:	6839      	ldr	r1, [r7, #0]
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	4798      	blx	r3
 8011472:	4603      	mov	r3, r0
 8011474:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011476:	e004      	b.n	8011482 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011478:	2303      	movs	r3, #3
 801147a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801147c:	e001      	b.n	8011482 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801147e:	2303      	movs	r3, #3
 8011480:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	88db      	ldrh	r3, [r3, #6]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d110      	bne.n	80114ac <USBD_StdItfReq+0xc0>
 801148a:	7bfb      	ldrb	r3, [r7, #15]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d10d      	bne.n	80114ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f000 fed4 	bl	801223e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011496:	e009      	b.n	80114ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011498:	6839      	ldr	r1, [r7, #0]
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	f000 fcf7 	bl	8011e8e <USBD_CtlError>
          break;
 80114a0:	e004      	b.n	80114ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80114a2:	6839      	ldr	r1, [r7, #0]
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f000 fcf2 	bl	8011e8e <USBD_CtlError>
          break;
 80114aa:	e000      	b.n	80114ae <USBD_StdItfReq+0xc2>
          break;
 80114ac:	bf00      	nop
      }
      break;
 80114ae:	e004      	b.n	80114ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80114b0:	6839      	ldr	r1, [r7, #0]
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f000 fceb 	bl	8011e8e <USBD_CtlError>
      break;
 80114b8:	bf00      	nop
  }

  return ret;
 80114ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80114bc:	4618      	mov	r0, r3
 80114be:	3710      	adds	r7, #16
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b084      	sub	sp, #16
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
 80114cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80114ce:	2300      	movs	r3, #0
 80114d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	889b      	ldrh	r3, [r3, #4]
 80114d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	781b      	ldrb	r3, [r3, #0]
 80114dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80114e0:	2b40      	cmp	r3, #64	@ 0x40
 80114e2:	d007      	beq.n	80114f4 <USBD_StdEPReq+0x30>
 80114e4:	2b40      	cmp	r3, #64	@ 0x40
 80114e6:	f200 817f 	bhi.w	80117e8 <USBD_StdEPReq+0x324>
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d02a      	beq.n	8011544 <USBD_StdEPReq+0x80>
 80114ee:	2b20      	cmp	r3, #32
 80114f0:	f040 817a 	bne.w	80117e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80114f4:	7bbb      	ldrb	r3, [r7, #14]
 80114f6:	4619      	mov	r1, r3
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f7ff fe85 	bl	8011208 <USBD_CoreFindEP>
 80114fe:	4603      	mov	r3, r0
 8011500:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011502:	7b7b      	ldrb	r3, [r7, #13]
 8011504:	2bff      	cmp	r3, #255	@ 0xff
 8011506:	f000 8174 	beq.w	80117f2 <USBD_StdEPReq+0x32e>
 801150a:	7b7b      	ldrb	r3, [r7, #13]
 801150c:	2b00      	cmp	r3, #0
 801150e:	f040 8170 	bne.w	80117f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011512:	7b7a      	ldrb	r2, [r7, #13]
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801151a:	7b7a      	ldrb	r2, [r7, #13]
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	32ae      	adds	r2, #174	@ 0xae
 8011520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011524:	689b      	ldr	r3, [r3, #8]
 8011526:	2b00      	cmp	r3, #0
 8011528:	f000 8163 	beq.w	80117f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801152c:	7b7a      	ldrb	r2, [r7, #13]
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	32ae      	adds	r2, #174	@ 0xae
 8011532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011536:	689b      	ldr	r3, [r3, #8]
 8011538:	6839      	ldr	r1, [r7, #0]
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	4798      	blx	r3
 801153e:	4603      	mov	r3, r0
 8011540:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011542:	e156      	b.n	80117f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	785b      	ldrb	r3, [r3, #1]
 8011548:	2b03      	cmp	r3, #3
 801154a:	d008      	beq.n	801155e <USBD_StdEPReq+0x9a>
 801154c:	2b03      	cmp	r3, #3
 801154e:	f300 8145 	bgt.w	80117dc <USBD_StdEPReq+0x318>
 8011552:	2b00      	cmp	r3, #0
 8011554:	f000 809b 	beq.w	801168e <USBD_StdEPReq+0x1ca>
 8011558:	2b01      	cmp	r3, #1
 801155a:	d03c      	beq.n	80115d6 <USBD_StdEPReq+0x112>
 801155c:	e13e      	b.n	80117dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011564:	b2db      	uxtb	r3, r3
 8011566:	2b02      	cmp	r3, #2
 8011568:	d002      	beq.n	8011570 <USBD_StdEPReq+0xac>
 801156a:	2b03      	cmp	r3, #3
 801156c:	d016      	beq.n	801159c <USBD_StdEPReq+0xd8>
 801156e:	e02c      	b.n	80115ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011570:	7bbb      	ldrb	r3, [r7, #14]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d00d      	beq.n	8011592 <USBD_StdEPReq+0xce>
 8011576:	7bbb      	ldrb	r3, [r7, #14]
 8011578:	2b80      	cmp	r3, #128	@ 0x80
 801157a:	d00a      	beq.n	8011592 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801157c:	7bbb      	ldrb	r3, [r7, #14]
 801157e:	4619      	mov	r1, r3
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f7ff fa41 	bl	8010a08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011586:	2180      	movs	r1, #128	@ 0x80
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f7ff fa3d 	bl	8010a08 <USBD_LL_StallEP>
 801158e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011590:	e020      	b.n	80115d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011592:	6839      	ldr	r1, [r7, #0]
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f000 fc7a 	bl	8011e8e <USBD_CtlError>
              break;
 801159a:	e01b      	b.n	80115d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	885b      	ldrh	r3, [r3, #2]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d10e      	bne.n	80115c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80115a4:	7bbb      	ldrb	r3, [r7, #14]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d00b      	beq.n	80115c2 <USBD_StdEPReq+0xfe>
 80115aa:	7bbb      	ldrb	r3, [r7, #14]
 80115ac:	2b80      	cmp	r3, #128	@ 0x80
 80115ae:	d008      	beq.n	80115c2 <USBD_StdEPReq+0xfe>
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	88db      	ldrh	r3, [r3, #6]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d104      	bne.n	80115c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80115b8:	7bbb      	ldrb	r3, [r7, #14]
 80115ba:	4619      	mov	r1, r3
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f7ff fa23 	bl	8010a08 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f000 fe3b 	bl	801223e <USBD_CtlSendStatus>

              break;
 80115c8:	e004      	b.n	80115d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80115ca:	6839      	ldr	r1, [r7, #0]
 80115cc:	6878      	ldr	r0, [r7, #4]
 80115ce:	f000 fc5e 	bl	8011e8e <USBD_CtlError>
              break;
 80115d2:	bf00      	nop
          }
          break;
 80115d4:	e107      	b.n	80117e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80115dc:	b2db      	uxtb	r3, r3
 80115de:	2b02      	cmp	r3, #2
 80115e0:	d002      	beq.n	80115e8 <USBD_StdEPReq+0x124>
 80115e2:	2b03      	cmp	r3, #3
 80115e4:	d016      	beq.n	8011614 <USBD_StdEPReq+0x150>
 80115e6:	e04b      	b.n	8011680 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80115e8:	7bbb      	ldrb	r3, [r7, #14]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d00d      	beq.n	801160a <USBD_StdEPReq+0x146>
 80115ee:	7bbb      	ldrb	r3, [r7, #14]
 80115f0:	2b80      	cmp	r3, #128	@ 0x80
 80115f2:	d00a      	beq.n	801160a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80115f4:	7bbb      	ldrb	r3, [r7, #14]
 80115f6:	4619      	mov	r1, r3
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f7ff fa05 	bl	8010a08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80115fe:	2180      	movs	r1, #128	@ 0x80
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f7ff fa01 	bl	8010a08 <USBD_LL_StallEP>
 8011606:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011608:	e040      	b.n	801168c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801160a:	6839      	ldr	r1, [r7, #0]
 801160c:	6878      	ldr	r0, [r7, #4]
 801160e:	f000 fc3e 	bl	8011e8e <USBD_CtlError>
              break;
 8011612:	e03b      	b.n	801168c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	885b      	ldrh	r3, [r3, #2]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d136      	bne.n	801168a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801161c:	7bbb      	ldrb	r3, [r7, #14]
 801161e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011622:	2b00      	cmp	r3, #0
 8011624:	d004      	beq.n	8011630 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011626:	7bbb      	ldrb	r3, [r7, #14]
 8011628:	4619      	mov	r1, r3
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f7ff fa05 	bl	8010a3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f000 fe04 	bl	801223e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011636:	7bbb      	ldrb	r3, [r7, #14]
 8011638:	4619      	mov	r1, r3
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f7ff fde4 	bl	8011208 <USBD_CoreFindEP>
 8011640:	4603      	mov	r3, r0
 8011642:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011644:	7b7b      	ldrb	r3, [r7, #13]
 8011646:	2bff      	cmp	r3, #255	@ 0xff
 8011648:	d01f      	beq.n	801168a <USBD_StdEPReq+0x1c6>
 801164a:	7b7b      	ldrb	r3, [r7, #13]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d11c      	bne.n	801168a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011650:	7b7a      	ldrb	r2, [r7, #13]
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011658:	7b7a      	ldrb	r2, [r7, #13]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	32ae      	adds	r2, #174	@ 0xae
 801165e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011662:	689b      	ldr	r3, [r3, #8]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d010      	beq.n	801168a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011668:	7b7a      	ldrb	r2, [r7, #13]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	32ae      	adds	r2, #174	@ 0xae
 801166e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011672:	689b      	ldr	r3, [r3, #8]
 8011674:	6839      	ldr	r1, [r7, #0]
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	4798      	blx	r3
 801167a:	4603      	mov	r3, r0
 801167c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801167e:	e004      	b.n	801168a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011680:	6839      	ldr	r1, [r7, #0]
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f000 fc03 	bl	8011e8e <USBD_CtlError>
              break;
 8011688:	e000      	b.n	801168c <USBD_StdEPReq+0x1c8>
              break;
 801168a:	bf00      	nop
          }
          break;
 801168c:	e0ab      	b.n	80117e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011694:	b2db      	uxtb	r3, r3
 8011696:	2b02      	cmp	r3, #2
 8011698:	d002      	beq.n	80116a0 <USBD_StdEPReq+0x1dc>
 801169a:	2b03      	cmp	r3, #3
 801169c:	d032      	beq.n	8011704 <USBD_StdEPReq+0x240>
 801169e:	e097      	b.n	80117d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80116a0:	7bbb      	ldrb	r3, [r7, #14]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d007      	beq.n	80116b6 <USBD_StdEPReq+0x1f2>
 80116a6:	7bbb      	ldrb	r3, [r7, #14]
 80116a8:	2b80      	cmp	r3, #128	@ 0x80
 80116aa:	d004      	beq.n	80116b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80116ac:	6839      	ldr	r1, [r7, #0]
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f000 fbed 	bl	8011e8e <USBD_CtlError>
                break;
 80116b4:	e091      	b.n	80117da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80116b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	da0b      	bge.n	80116d6 <USBD_StdEPReq+0x212>
 80116be:	7bbb      	ldrb	r3, [r7, #14]
 80116c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80116c4:	4613      	mov	r3, r2
 80116c6:	009b      	lsls	r3, r3, #2
 80116c8:	4413      	add	r3, r2
 80116ca:	009b      	lsls	r3, r3, #2
 80116cc:	3310      	adds	r3, #16
 80116ce:	687a      	ldr	r2, [r7, #4]
 80116d0:	4413      	add	r3, r2
 80116d2:	3304      	adds	r3, #4
 80116d4:	e00b      	b.n	80116ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80116d6:	7bbb      	ldrb	r3, [r7, #14]
 80116d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80116dc:	4613      	mov	r3, r2
 80116de:	009b      	lsls	r3, r3, #2
 80116e0:	4413      	add	r3, r2
 80116e2:	009b      	lsls	r3, r3, #2
 80116e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80116e8:	687a      	ldr	r2, [r7, #4]
 80116ea:	4413      	add	r3, r2
 80116ec:	3304      	adds	r3, #4
 80116ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	2200      	movs	r2, #0
 80116f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80116f6:	68bb      	ldr	r3, [r7, #8]
 80116f8:	2202      	movs	r2, #2
 80116fa:	4619      	mov	r1, r3
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f000 fd44 	bl	801218a <USBD_CtlSendData>
              break;
 8011702:	e06a      	b.n	80117da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011704:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011708:	2b00      	cmp	r3, #0
 801170a:	da11      	bge.n	8011730 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801170c:	7bbb      	ldrb	r3, [r7, #14]
 801170e:	f003 020f 	and.w	r2, r3, #15
 8011712:	6879      	ldr	r1, [r7, #4]
 8011714:	4613      	mov	r3, r2
 8011716:	009b      	lsls	r3, r3, #2
 8011718:	4413      	add	r3, r2
 801171a:	009b      	lsls	r3, r3, #2
 801171c:	440b      	add	r3, r1
 801171e:	3324      	adds	r3, #36	@ 0x24
 8011720:	881b      	ldrh	r3, [r3, #0]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d117      	bne.n	8011756 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011726:	6839      	ldr	r1, [r7, #0]
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f000 fbb0 	bl	8011e8e <USBD_CtlError>
                  break;
 801172e:	e054      	b.n	80117da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011730:	7bbb      	ldrb	r3, [r7, #14]
 8011732:	f003 020f 	and.w	r2, r3, #15
 8011736:	6879      	ldr	r1, [r7, #4]
 8011738:	4613      	mov	r3, r2
 801173a:	009b      	lsls	r3, r3, #2
 801173c:	4413      	add	r3, r2
 801173e:	009b      	lsls	r3, r3, #2
 8011740:	440b      	add	r3, r1
 8011742:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011746:	881b      	ldrh	r3, [r3, #0]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d104      	bne.n	8011756 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801174c:	6839      	ldr	r1, [r7, #0]
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f000 fb9d 	bl	8011e8e <USBD_CtlError>
                  break;
 8011754:	e041      	b.n	80117da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011756:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801175a:	2b00      	cmp	r3, #0
 801175c:	da0b      	bge.n	8011776 <USBD_StdEPReq+0x2b2>
 801175e:	7bbb      	ldrb	r3, [r7, #14]
 8011760:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011764:	4613      	mov	r3, r2
 8011766:	009b      	lsls	r3, r3, #2
 8011768:	4413      	add	r3, r2
 801176a:	009b      	lsls	r3, r3, #2
 801176c:	3310      	adds	r3, #16
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	4413      	add	r3, r2
 8011772:	3304      	adds	r3, #4
 8011774:	e00b      	b.n	801178e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011776:	7bbb      	ldrb	r3, [r7, #14]
 8011778:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801177c:	4613      	mov	r3, r2
 801177e:	009b      	lsls	r3, r3, #2
 8011780:	4413      	add	r3, r2
 8011782:	009b      	lsls	r3, r3, #2
 8011784:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011788:	687a      	ldr	r2, [r7, #4]
 801178a:	4413      	add	r3, r2
 801178c:	3304      	adds	r3, #4
 801178e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011790:	7bbb      	ldrb	r3, [r7, #14]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d002      	beq.n	801179c <USBD_StdEPReq+0x2d8>
 8011796:	7bbb      	ldrb	r3, [r7, #14]
 8011798:	2b80      	cmp	r3, #128	@ 0x80
 801179a:	d103      	bne.n	80117a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	2200      	movs	r2, #0
 80117a0:	601a      	str	r2, [r3, #0]
 80117a2:	e00e      	b.n	80117c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80117a4:	7bbb      	ldrb	r3, [r7, #14]
 80117a6:	4619      	mov	r1, r3
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	f7ff f95f 	bl	8010a6c <USBD_LL_IsStallEP>
 80117ae:	4603      	mov	r3, r0
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d003      	beq.n	80117bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80117b4:	68bb      	ldr	r3, [r7, #8]
 80117b6:	2201      	movs	r2, #1
 80117b8:	601a      	str	r2, [r3, #0]
 80117ba:	e002      	b.n	80117c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	2200      	movs	r2, #0
 80117c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	2202      	movs	r2, #2
 80117c6:	4619      	mov	r1, r3
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f000 fcde 	bl	801218a <USBD_CtlSendData>
              break;
 80117ce:	e004      	b.n	80117da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80117d0:	6839      	ldr	r1, [r7, #0]
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f000 fb5b 	bl	8011e8e <USBD_CtlError>
              break;
 80117d8:	bf00      	nop
          }
          break;
 80117da:	e004      	b.n	80117e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80117dc:	6839      	ldr	r1, [r7, #0]
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f000 fb55 	bl	8011e8e <USBD_CtlError>
          break;
 80117e4:	bf00      	nop
      }
      break;
 80117e6:	e005      	b.n	80117f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80117e8:	6839      	ldr	r1, [r7, #0]
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f000 fb4f 	bl	8011e8e <USBD_CtlError>
      break;
 80117f0:	e000      	b.n	80117f4 <USBD_StdEPReq+0x330>
      break;
 80117f2:	bf00      	nop
  }

  return ret;
 80117f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	3710      	adds	r7, #16
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}
	...

08011800 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b084      	sub	sp, #16
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
 8011808:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801180a:	2300      	movs	r3, #0
 801180c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801180e:	2300      	movs	r3, #0
 8011810:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011812:	2300      	movs	r3, #0
 8011814:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	885b      	ldrh	r3, [r3, #2]
 801181a:	0a1b      	lsrs	r3, r3, #8
 801181c:	b29b      	uxth	r3, r3
 801181e:	3b01      	subs	r3, #1
 8011820:	2b06      	cmp	r3, #6
 8011822:	f200 8128 	bhi.w	8011a76 <USBD_GetDescriptor+0x276>
 8011826:	a201      	add	r2, pc, #4	@ (adr r2, 801182c <USBD_GetDescriptor+0x2c>)
 8011828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801182c:	08011849 	.word	0x08011849
 8011830:	08011861 	.word	0x08011861
 8011834:	080118a1 	.word	0x080118a1
 8011838:	08011a77 	.word	0x08011a77
 801183c:	08011a77 	.word	0x08011a77
 8011840:	08011a17 	.word	0x08011a17
 8011844:	08011a43 	.word	0x08011a43
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	687a      	ldr	r2, [r7, #4]
 8011852:	7c12      	ldrb	r2, [r2, #16]
 8011854:	f107 0108 	add.w	r1, r7, #8
 8011858:	4610      	mov	r0, r2
 801185a:	4798      	blx	r3
 801185c:	60f8      	str	r0, [r7, #12]
      break;
 801185e:	e112      	b.n	8011a86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	7c1b      	ldrb	r3, [r3, #16]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d10d      	bne.n	8011884 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801186e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011870:	f107 0208 	add.w	r2, r7, #8
 8011874:	4610      	mov	r0, r2
 8011876:	4798      	blx	r3
 8011878:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	3301      	adds	r3, #1
 801187e:	2202      	movs	r2, #2
 8011880:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011882:	e100      	b.n	8011a86 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801188a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801188c:	f107 0208 	add.w	r2, r7, #8
 8011890:	4610      	mov	r0, r2
 8011892:	4798      	blx	r3
 8011894:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	3301      	adds	r3, #1
 801189a:	2202      	movs	r2, #2
 801189c:	701a      	strb	r2, [r3, #0]
      break;
 801189e:	e0f2      	b.n	8011a86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	885b      	ldrh	r3, [r3, #2]
 80118a4:	b2db      	uxtb	r3, r3
 80118a6:	2b05      	cmp	r3, #5
 80118a8:	f200 80ac 	bhi.w	8011a04 <USBD_GetDescriptor+0x204>
 80118ac:	a201      	add	r2, pc, #4	@ (adr r2, 80118b4 <USBD_GetDescriptor+0xb4>)
 80118ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118b2:	bf00      	nop
 80118b4:	080118cd 	.word	0x080118cd
 80118b8:	08011901 	.word	0x08011901
 80118bc:	08011935 	.word	0x08011935
 80118c0:	08011969 	.word	0x08011969
 80118c4:	0801199d 	.word	0x0801199d
 80118c8:	080119d1 	.word	0x080119d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d00b      	beq.n	80118f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	687a      	ldr	r2, [r7, #4]
 80118e2:	7c12      	ldrb	r2, [r2, #16]
 80118e4:	f107 0108 	add.w	r1, r7, #8
 80118e8:	4610      	mov	r0, r2
 80118ea:	4798      	blx	r3
 80118ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80118ee:	e091      	b.n	8011a14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80118f0:	6839      	ldr	r1, [r7, #0]
 80118f2:	6878      	ldr	r0, [r7, #4]
 80118f4:	f000 facb 	bl	8011e8e <USBD_CtlError>
            err++;
 80118f8:	7afb      	ldrb	r3, [r7, #11]
 80118fa:	3301      	adds	r3, #1
 80118fc:	72fb      	strb	r3, [r7, #11]
          break;
 80118fe:	e089      	b.n	8011a14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011906:	689b      	ldr	r3, [r3, #8]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d00b      	beq.n	8011924 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011912:	689b      	ldr	r3, [r3, #8]
 8011914:	687a      	ldr	r2, [r7, #4]
 8011916:	7c12      	ldrb	r2, [r2, #16]
 8011918:	f107 0108 	add.w	r1, r7, #8
 801191c:	4610      	mov	r0, r2
 801191e:	4798      	blx	r3
 8011920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011922:	e077      	b.n	8011a14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011924:	6839      	ldr	r1, [r7, #0]
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f000 fab1 	bl	8011e8e <USBD_CtlError>
            err++;
 801192c:	7afb      	ldrb	r3, [r7, #11]
 801192e:	3301      	adds	r3, #1
 8011930:	72fb      	strb	r3, [r7, #11]
          break;
 8011932:	e06f      	b.n	8011a14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801193a:	68db      	ldr	r3, [r3, #12]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00b      	beq.n	8011958 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011946:	68db      	ldr	r3, [r3, #12]
 8011948:	687a      	ldr	r2, [r7, #4]
 801194a:	7c12      	ldrb	r2, [r2, #16]
 801194c:	f107 0108 	add.w	r1, r7, #8
 8011950:	4610      	mov	r0, r2
 8011952:	4798      	blx	r3
 8011954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011956:	e05d      	b.n	8011a14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011958:	6839      	ldr	r1, [r7, #0]
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f000 fa97 	bl	8011e8e <USBD_CtlError>
            err++;
 8011960:	7afb      	ldrb	r3, [r7, #11]
 8011962:	3301      	adds	r3, #1
 8011964:	72fb      	strb	r3, [r7, #11]
          break;
 8011966:	e055      	b.n	8011a14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801196e:	691b      	ldr	r3, [r3, #16]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d00b      	beq.n	801198c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801197a:	691b      	ldr	r3, [r3, #16]
 801197c:	687a      	ldr	r2, [r7, #4]
 801197e:	7c12      	ldrb	r2, [r2, #16]
 8011980:	f107 0108 	add.w	r1, r7, #8
 8011984:	4610      	mov	r0, r2
 8011986:	4798      	blx	r3
 8011988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801198a:	e043      	b.n	8011a14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801198c:	6839      	ldr	r1, [r7, #0]
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f000 fa7d 	bl	8011e8e <USBD_CtlError>
            err++;
 8011994:	7afb      	ldrb	r3, [r7, #11]
 8011996:	3301      	adds	r3, #1
 8011998:	72fb      	strb	r3, [r7, #11]
          break;
 801199a:	e03b      	b.n	8011a14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80119a2:	695b      	ldr	r3, [r3, #20]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d00b      	beq.n	80119c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80119ae:	695b      	ldr	r3, [r3, #20]
 80119b0:	687a      	ldr	r2, [r7, #4]
 80119b2:	7c12      	ldrb	r2, [r2, #16]
 80119b4:	f107 0108 	add.w	r1, r7, #8
 80119b8:	4610      	mov	r0, r2
 80119ba:	4798      	blx	r3
 80119bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80119be:	e029      	b.n	8011a14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80119c0:	6839      	ldr	r1, [r7, #0]
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f000 fa63 	bl	8011e8e <USBD_CtlError>
            err++;
 80119c8:	7afb      	ldrb	r3, [r7, #11]
 80119ca:	3301      	adds	r3, #1
 80119cc:	72fb      	strb	r3, [r7, #11]
          break;
 80119ce:	e021      	b.n	8011a14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80119d6:	699b      	ldr	r3, [r3, #24]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d00b      	beq.n	80119f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80119e2:	699b      	ldr	r3, [r3, #24]
 80119e4:	687a      	ldr	r2, [r7, #4]
 80119e6:	7c12      	ldrb	r2, [r2, #16]
 80119e8:	f107 0108 	add.w	r1, r7, #8
 80119ec:	4610      	mov	r0, r2
 80119ee:	4798      	blx	r3
 80119f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80119f2:	e00f      	b.n	8011a14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80119f4:	6839      	ldr	r1, [r7, #0]
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f000 fa49 	bl	8011e8e <USBD_CtlError>
            err++;
 80119fc:	7afb      	ldrb	r3, [r7, #11]
 80119fe:	3301      	adds	r3, #1
 8011a00:	72fb      	strb	r3, [r7, #11]
          break;
 8011a02:	e007      	b.n	8011a14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011a04:	6839      	ldr	r1, [r7, #0]
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f000 fa41 	bl	8011e8e <USBD_CtlError>
          err++;
 8011a0c:	7afb      	ldrb	r3, [r7, #11]
 8011a0e:	3301      	adds	r3, #1
 8011a10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011a12:	bf00      	nop
      }
      break;
 8011a14:	e037      	b.n	8011a86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	7c1b      	ldrb	r3, [r3, #16]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d109      	bne.n	8011a32 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011a26:	f107 0208 	add.w	r2, r7, #8
 8011a2a:	4610      	mov	r0, r2
 8011a2c:	4798      	blx	r3
 8011a2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011a30:	e029      	b.n	8011a86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011a32:	6839      	ldr	r1, [r7, #0]
 8011a34:	6878      	ldr	r0, [r7, #4]
 8011a36:	f000 fa2a 	bl	8011e8e <USBD_CtlError>
        err++;
 8011a3a:	7afb      	ldrb	r3, [r7, #11]
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	72fb      	strb	r3, [r7, #11]
      break;
 8011a40:	e021      	b.n	8011a86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	7c1b      	ldrb	r3, [r3, #16]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d10d      	bne.n	8011a66 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a52:	f107 0208 	add.w	r2, r7, #8
 8011a56:	4610      	mov	r0, r2
 8011a58:	4798      	blx	r3
 8011a5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	3301      	adds	r3, #1
 8011a60:	2207      	movs	r2, #7
 8011a62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011a64:	e00f      	b.n	8011a86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011a66:	6839      	ldr	r1, [r7, #0]
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f000 fa10 	bl	8011e8e <USBD_CtlError>
        err++;
 8011a6e:	7afb      	ldrb	r3, [r7, #11]
 8011a70:	3301      	adds	r3, #1
 8011a72:	72fb      	strb	r3, [r7, #11]
      break;
 8011a74:	e007      	b.n	8011a86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011a76:	6839      	ldr	r1, [r7, #0]
 8011a78:	6878      	ldr	r0, [r7, #4]
 8011a7a:	f000 fa08 	bl	8011e8e <USBD_CtlError>
      err++;
 8011a7e:	7afb      	ldrb	r3, [r7, #11]
 8011a80:	3301      	adds	r3, #1
 8011a82:	72fb      	strb	r3, [r7, #11]
      break;
 8011a84:	bf00      	nop
  }

  if (err != 0U)
 8011a86:	7afb      	ldrb	r3, [r7, #11]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d11e      	bne.n	8011aca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	88db      	ldrh	r3, [r3, #6]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d016      	beq.n	8011ac2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8011a94:	893b      	ldrh	r3, [r7, #8]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d00e      	beq.n	8011ab8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	88da      	ldrh	r2, [r3, #6]
 8011a9e:	893b      	ldrh	r3, [r7, #8]
 8011aa0:	4293      	cmp	r3, r2
 8011aa2:	bf28      	it	cs
 8011aa4:	4613      	movcs	r3, r2
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011aaa:	893b      	ldrh	r3, [r7, #8]
 8011aac:	461a      	mov	r2, r3
 8011aae:	68f9      	ldr	r1, [r7, #12]
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f000 fb6a 	bl	801218a <USBD_CtlSendData>
 8011ab6:	e009      	b.n	8011acc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011ab8:	6839      	ldr	r1, [r7, #0]
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f000 f9e7 	bl	8011e8e <USBD_CtlError>
 8011ac0:	e004      	b.n	8011acc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f000 fbbb 	bl	801223e <USBD_CtlSendStatus>
 8011ac8:	e000      	b.n	8011acc <USBD_GetDescriptor+0x2cc>
    return;
 8011aca:	bf00      	nop
  }
}
 8011acc:	3710      	adds	r7, #16
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}
 8011ad2:	bf00      	nop

08011ad4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b084      	sub	sp, #16
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	889b      	ldrh	r3, [r3, #4]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d131      	bne.n	8011b4a <USBD_SetAddress+0x76>
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	88db      	ldrh	r3, [r3, #6]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d12d      	bne.n	8011b4a <USBD_SetAddress+0x76>
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	885b      	ldrh	r3, [r3, #2]
 8011af2:	2b7f      	cmp	r3, #127	@ 0x7f
 8011af4:	d829      	bhi.n	8011b4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	885b      	ldrh	r3, [r3, #2]
 8011afa:	b2db      	uxtb	r3, r3
 8011afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011b00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b08:	b2db      	uxtb	r3, r3
 8011b0a:	2b03      	cmp	r3, #3
 8011b0c:	d104      	bne.n	8011b18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011b0e:	6839      	ldr	r1, [r7, #0]
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f000 f9bc 	bl	8011e8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b16:	e01d      	b.n	8011b54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	7bfa      	ldrb	r2, [r7, #15]
 8011b1c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011b20:	7bfb      	ldrb	r3, [r7, #15]
 8011b22:	4619      	mov	r1, r3
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f7fe ffcd 	bl	8010ac4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f000 fb87 	bl	801223e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011b30:	7bfb      	ldrb	r3, [r7, #15]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d004      	beq.n	8011b40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2202      	movs	r2, #2
 8011b3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b3e:	e009      	b.n	8011b54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2201      	movs	r2, #1
 8011b44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b48:	e004      	b.n	8011b54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011b4a:	6839      	ldr	r1, [r7, #0]
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	f000 f99e 	bl	8011e8e <USBD_CtlError>
  }
}
 8011b52:	bf00      	nop
 8011b54:	bf00      	nop
 8011b56:	3710      	adds	r7, #16
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}

08011b5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b084      	sub	sp, #16
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011b66:	2300      	movs	r3, #0
 8011b68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	885b      	ldrh	r3, [r3, #2]
 8011b6e:	b2da      	uxtb	r2, r3
 8011b70:	4b4e      	ldr	r3, [pc, #312]	@ (8011cac <USBD_SetConfig+0x150>)
 8011b72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011b74:	4b4d      	ldr	r3, [pc, #308]	@ (8011cac <USBD_SetConfig+0x150>)
 8011b76:	781b      	ldrb	r3, [r3, #0]
 8011b78:	2b01      	cmp	r3, #1
 8011b7a:	d905      	bls.n	8011b88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011b7c:	6839      	ldr	r1, [r7, #0]
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f000 f985 	bl	8011e8e <USBD_CtlError>
    return USBD_FAIL;
 8011b84:	2303      	movs	r3, #3
 8011b86:	e08c      	b.n	8011ca2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b8e:	b2db      	uxtb	r3, r3
 8011b90:	2b02      	cmp	r3, #2
 8011b92:	d002      	beq.n	8011b9a <USBD_SetConfig+0x3e>
 8011b94:	2b03      	cmp	r3, #3
 8011b96:	d029      	beq.n	8011bec <USBD_SetConfig+0x90>
 8011b98:	e075      	b.n	8011c86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011b9a:	4b44      	ldr	r3, [pc, #272]	@ (8011cac <USBD_SetConfig+0x150>)
 8011b9c:	781b      	ldrb	r3, [r3, #0]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d020      	beq.n	8011be4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011ba2:	4b42      	ldr	r3, [pc, #264]	@ (8011cac <USBD_SetConfig+0x150>)
 8011ba4:	781b      	ldrb	r3, [r3, #0]
 8011ba6:	461a      	mov	r2, r3
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011bac:	4b3f      	ldr	r3, [pc, #252]	@ (8011cac <USBD_SetConfig+0x150>)
 8011bae:	781b      	ldrb	r3, [r3, #0]
 8011bb0:	4619      	mov	r1, r3
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f7ff f8a9 	bl	8010d0a <USBD_SetClassConfig>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011bbc:	7bfb      	ldrb	r3, [r7, #15]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d008      	beq.n	8011bd4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011bc2:	6839      	ldr	r1, [r7, #0]
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	f000 f962 	bl	8011e8e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2202      	movs	r2, #2
 8011bce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011bd2:	e065      	b.n	8011ca0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f000 fb32 	bl	801223e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2203      	movs	r2, #3
 8011bde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011be2:	e05d      	b.n	8011ca0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011be4:	6878      	ldr	r0, [r7, #4]
 8011be6:	f000 fb2a 	bl	801223e <USBD_CtlSendStatus>
      break;
 8011bea:	e059      	b.n	8011ca0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011bec:	4b2f      	ldr	r3, [pc, #188]	@ (8011cac <USBD_SetConfig+0x150>)
 8011bee:	781b      	ldrb	r3, [r3, #0]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d112      	bne.n	8011c1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2202      	movs	r2, #2
 8011bf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8011cac <USBD_SetConfig+0x150>)
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	461a      	mov	r2, r3
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011c06:	4b29      	ldr	r3, [pc, #164]	@ (8011cac <USBD_SetConfig+0x150>)
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f7ff f898 	bl	8010d42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f000 fb13 	bl	801223e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011c18:	e042      	b.n	8011ca0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011c1a:	4b24      	ldr	r3, [pc, #144]	@ (8011cac <USBD_SetConfig+0x150>)
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	461a      	mov	r2, r3
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	685b      	ldr	r3, [r3, #4]
 8011c24:	429a      	cmp	r2, r3
 8011c26:	d02a      	beq.n	8011c7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	685b      	ldr	r3, [r3, #4]
 8011c2c:	b2db      	uxtb	r3, r3
 8011c2e:	4619      	mov	r1, r3
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f7ff f886 	bl	8010d42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011c36:	4b1d      	ldr	r3, [pc, #116]	@ (8011cac <USBD_SetConfig+0x150>)
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	461a      	mov	r2, r3
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011c40:	4b1a      	ldr	r3, [pc, #104]	@ (8011cac <USBD_SetConfig+0x150>)
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	4619      	mov	r1, r3
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f7ff f85f 	bl	8010d0a <USBD_SetClassConfig>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011c50:	7bfb      	ldrb	r3, [r7, #15]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d00f      	beq.n	8011c76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011c56:	6839      	ldr	r1, [r7, #0]
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f000 f918 	bl	8011e8e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	b2db      	uxtb	r3, r3
 8011c64:	4619      	mov	r1, r3
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f7ff f86b 	bl	8010d42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2202      	movs	r2, #2
 8011c70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011c74:	e014      	b.n	8011ca0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f000 fae1 	bl	801223e <USBD_CtlSendStatus>
      break;
 8011c7c:	e010      	b.n	8011ca0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f000 fadd 	bl	801223e <USBD_CtlSendStatus>
      break;
 8011c84:	e00c      	b.n	8011ca0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011c86:	6839      	ldr	r1, [r7, #0]
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f000 f900 	bl	8011e8e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011c8e:	4b07      	ldr	r3, [pc, #28]	@ (8011cac <USBD_SetConfig+0x150>)
 8011c90:	781b      	ldrb	r3, [r3, #0]
 8011c92:	4619      	mov	r1, r3
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f7ff f854 	bl	8010d42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011c9a:	2303      	movs	r3, #3
 8011c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8011c9e:	bf00      	nop
  }

  return ret;
 8011ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3710      	adds	r7, #16
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}
 8011caa:	bf00      	nop
 8011cac:	200110d0 	.word	0x200110d0

08011cb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	88db      	ldrh	r3, [r3, #6]
 8011cbe:	2b01      	cmp	r3, #1
 8011cc0:	d004      	beq.n	8011ccc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011cc2:	6839      	ldr	r1, [r7, #0]
 8011cc4:	6878      	ldr	r0, [r7, #4]
 8011cc6:	f000 f8e2 	bl	8011e8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011cca:	e023      	b.n	8011d14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011cd2:	b2db      	uxtb	r3, r3
 8011cd4:	2b02      	cmp	r3, #2
 8011cd6:	dc02      	bgt.n	8011cde <USBD_GetConfig+0x2e>
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	dc03      	bgt.n	8011ce4 <USBD_GetConfig+0x34>
 8011cdc:	e015      	b.n	8011d0a <USBD_GetConfig+0x5a>
 8011cde:	2b03      	cmp	r3, #3
 8011ce0:	d00b      	beq.n	8011cfa <USBD_GetConfig+0x4a>
 8011ce2:	e012      	b.n	8011d0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	3308      	adds	r3, #8
 8011cee:	2201      	movs	r2, #1
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f000 fa49 	bl	801218a <USBD_CtlSendData>
        break;
 8011cf8:	e00c      	b.n	8011d14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	3304      	adds	r3, #4
 8011cfe:	2201      	movs	r2, #1
 8011d00:	4619      	mov	r1, r3
 8011d02:	6878      	ldr	r0, [r7, #4]
 8011d04:	f000 fa41 	bl	801218a <USBD_CtlSendData>
        break;
 8011d08:	e004      	b.n	8011d14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011d0a:	6839      	ldr	r1, [r7, #0]
 8011d0c:	6878      	ldr	r0, [r7, #4]
 8011d0e:	f000 f8be 	bl	8011e8e <USBD_CtlError>
        break;
 8011d12:	bf00      	nop
}
 8011d14:	bf00      	nop
 8011d16:	3708      	adds	r7, #8
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}

08011d1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d2c:	b2db      	uxtb	r3, r3
 8011d2e:	3b01      	subs	r3, #1
 8011d30:	2b02      	cmp	r3, #2
 8011d32:	d81e      	bhi.n	8011d72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	88db      	ldrh	r3, [r3, #6]
 8011d38:	2b02      	cmp	r3, #2
 8011d3a:	d004      	beq.n	8011d46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011d3c:	6839      	ldr	r1, [r7, #0]
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f000 f8a5 	bl	8011e8e <USBD_CtlError>
        break;
 8011d44:	e01a      	b.n	8011d7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2201      	movs	r2, #1
 8011d4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d005      	beq.n	8011d62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	68db      	ldr	r3, [r3, #12]
 8011d5a:	f043 0202 	orr.w	r2, r3, #2
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	330c      	adds	r3, #12
 8011d66:	2202      	movs	r2, #2
 8011d68:	4619      	mov	r1, r3
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f000 fa0d 	bl	801218a <USBD_CtlSendData>
      break;
 8011d70:	e004      	b.n	8011d7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011d72:	6839      	ldr	r1, [r7, #0]
 8011d74:	6878      	ldr	r0, [r7, #4]
 8011d76:	f000 f88a 	bl	8011e8e <USBD_CtlError>
      break;
 8011d7a:	bf00      	nop
  }
}
 8011d7c:	bf00      	nop
 8011d7e:	3708      	adds	r7, #8
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
 8011d8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	885b      	ldrh	r3, [r3, #2]
 8011d92:	2b01      	cmp	r3, #1
 8011d94:	d107      	bne.n	8011da6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2201      	movs	r2, #1
 8011d9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f000 fa4d 	bl	801223e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011da4:	e013      	b.n	8011dce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	885b      	ldrh	r3, [r3, #2]
 8011daa:	2b02      	cmp	r3, #2
 8011dac:	d10b      	bne.n	8011dc6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	889b      	ldrh	r3, [r3, #4]
 8011db2:	0a1b      	lsrs	r3, r3, #8
 8011db4:	b29b      	uxth	r3, r3
 8011db6:	b2da      	uxtb	r2, r3
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f000 fa3d 	bl	801223e <USBD_CtlSendStatus>
}
 8011dc4:	e003      	b.n	8011dce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011dc6:	6839      	ldr	r1, [r7, #0]
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f000 f860 	bl	8011e8e <USBD_CtlError>
}
 8011dce:	bf00      	nop
 8011dd0:	3708      	adds	r7, #8
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}

08011dd6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dd6:	b580      	push	{r7, lr}
 8011dd8:	b082      	sub	sp, #8
 8011dda:	af00      	add	r7, sp, #0
 8011ddc:	6078      	str	r0, [r7, #4]
 8011dde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011de6:	b2db      	uxtb	r3, r3
 8011de8:	3b01      	subs	r3, #1
 8011dea:	2b02      	cmp	r3, #2
 8011dec:	d80b      	bhi.n	8011e06 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	885b      	ldrh	r3, [r3, #2]
 8011df2:	2b01      	cmp	r3, #1
 8011df4:	d10c      	bne.n	8011e10 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2200      	movs	r2, #0
 8011dfa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f000 fa1d 	bl	801223e <USBD_CtlSendStatus>
      }
      break;
 8011e04:	e004      	b.n	8011e10 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011e06:	6839      	ldr	r1, [r7, #0]
 8011e08:	6878      	ldr	r0, [r7, #4]
 8011e0a:	f000 f840 	bl	8011e8e <USBD_CtlError>
      break;
 8011e0e:	e000      	b.n	8011e12 <USBD_ClrFeature+0x3c>
      break;
 8011e10:	bf00      	nop
  }
}
 8011e12:	bf00      	nop
 8011e14:	3708      	adds	r7, #8
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}

08011e1a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011e1a:	b580      	push	{r7, lr}
 8011e1c:	b084      	sub	sp, #16
 8011e1e:	af00      	add	r7, sp, #0
 8011e20:	6078      	str	r0, [r7, #4]
 8011e22:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	781a      	ldrb	r2, [r3, #0]
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	3301      	adds	r3, #1
 8011e34:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	781a      	ldrb	r2, [r3, #0]
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	3301      	adds	r3, #1
 8011e42:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011e44:	68f8      	ldr	r0, [r7, #12]
 8011e46:	f7ff fa40 	bl	80112ca <SWAPBYTE>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	461a      	mov	r2, r3
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	3301      	adds	r3, #1
 8011e56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	3301      	adds	r3, #1
 8011e5c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011e5e:	68f8      	ldr	r0, [r7, #12]
 8011e60:	f7ff fa33 	bl	80112ca <SWAPBYTE>
 8011e64:	4603      	mov	r3, r0
 8011e66:	461a      	mov	r2, r3
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	3301      	adds	r3, #1
 8011e70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	3301      	adds	r3, #1
 8011e76:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011e78:	68f8      	ldr	r0, [r7, #12]
 8011e7a:	f7ff fa26 	bl	80112ca <SWAPBYTE>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	461a      	mov	r2, r3
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	80da      	strh	r2, [r3, #6]
}
 8011e86:	bf00      	nop
 8011e88:	3710      	adds	r7, #16
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd80      	pop	{r7, pc}

08011e8e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e8e:	b580      	push	{r7, lr}
 8011e90:	b082      	sub	sp, #8
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	6078      	str	r0, [r7, #4]
 8011e96:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e98:	2180      	movs	r1, #128	@ 0x80
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f7fe fdb4 	bl	8010a08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011ea0:	2100      	movs	r1, #0
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f7fe fdb0 	bl	8010a08 <USBD_LL_StallEP>
}
 8011ea8:	bf00      	nop
 8011eaa:	3708      	adds	r7, #8
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}

08011eb0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b086      	sub	sp, #24
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	60f8      	str	r0, [r7, #12]
 8011eb8:	60b9      	str	r1, [r7, #8]
 8011eba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d036      	beq.n	8011f34 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011eca:	6938      	ldr	r0, [r7, #16]
 8011ecc:	f000 f836 	bl	8011f3c <USBD_GetLen>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	3301      	adds	r3, #1
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	005b      	lsls	r3, r3, #1
 8011ed8:	b29a      	uxth	r2, r3
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011ede:	7dfb      	ldrb	r3, [r7, #23]
 8011ee0:	68ba      	ldr	r2, [r7, #8]
 8011ee2:	4413      	add	r3, r2
 8011ee4:	687a      	ldr	r2, [r7, #4]
 8011ee6:	7812      	ldrb	r2, [r2, #0]
 8011ee8:	701a      	strb	r2, [r3, #0]
  idx++;
 8011eea:	7dfb      	ldrb	r3, [r7, #23]
 8011eec:	3301      	adds	r3, #1
 8011eee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011ef0:	7dfb      	ldrb	r3, [r7, #23]
 8011ef2:	68ba      	ldr	r2, [r7, #8]
 8011ef4:	4413      	add	r3, r2
 8011ef6:	2203      	movs	r2, #3
 8011ef8:	701a      	strb	r2, [r3, #0]
  idx++;
 8011efa:	7dfb      	ldrb	r3, [r7, #23]
 8011efc:	3301      	adds	r3, #1
 8011efe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011f00:	e013      	b.n	8011f2a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011f02:	7dfb      	ldrb	r3, [r7, #23]
 8011f04:	68ba      	ldr	r2, [r7, #8]
 8011f06:	4413      	add	r3, r2
 8011f08:	693a      	ldr	r2, [r7, #16]
 8011f0a:	7812      	ldrb	r2, [r2, #0]
 8011f0c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	3301      	adds	r3, #1
 8011f12:	613b      	str	r3, [r7, #16]
    idx++;
 8011f14:	7dfb      	ldrb	r3, [r7, #23]
 8011f16:	3301      	adds	r3, #1
 8011f18:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011f1a:	7dfb      	ldrb	r3, [r7, #23]
 8011f1c:	68ba      	ldr	r2, [r7, #8]
 8011f1e:	4413      	add	r3, r2
 8011f20:	2200      	movs	r2, #0
 8011f22:	701a      	strb	r2, [r3, #0]
    idx++;
 8011f24:	7dfb      	ldrb	r3, [r7, #23]
 8011f26:	3301      	adds	r3, #1
 8011f28:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	781b      	ldrb	r3, [r3, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d1e7      	bne.n	8011f02 <USBD_GetString+0x52>
 8011f32:	e000      	b.n	8011f36 <USBD_GetString+0x86>
    return;
 8011f34:	bf00      	nop
  }
}
 8011f36:	3718      	adds	r7, #24
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}

08011f3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011f3c:	b480      	push	{r7}
 8011f3e:	b085      	sub	sp, #20
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011f44:	2300      	movs	r3, #0
 8011f46:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011f4c:	e005      	b.n	8011f5a <USBD_GetLen+0x1e>
  {
    len++;
 8011f4e:	7bfb      	ldrb	r3, [r7, #15]
 8011f50:	3301      	adds	r3, #1
 8011f52:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	3301      	adds	r3, #1
 8011f58:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011f5a:	68bb      	ldr	r3, [r7, #8]
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d1f5      	bne.n	8011f4e <USBD_GetLen+0x12>
  }

  return len;
 8011f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3714      	adds	r7, #20
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6e:	4770      	bx	lr

08011f70 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f70:	b480      	push	{r7}
 8011f72:	b083      	sub	sp, #12
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	4603      	mov	r3, r0
 8011f78:	6039      	str	r1, [r7, #0]
 8011f7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	2212      	movs	r2, #18
 8011f80:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 8011f82:	4b03      	ldr	r3, [pc, #12]	@ (8011f90 <USBD_Class_DeviceDescriptor+0x20>)
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	370c      	adds	r7, #12
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8e:	4770      	bx	lr
 8011f90:	200000f0 	.word	0x200000f0

08011f94 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f94:	b480      	push	{r7}
 8011f96:	b083      	sub	sp, #12
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	6039      	str	r1, [r7, #0]
 8011f9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	2204      	movs	r2, #4
 8011fa4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 8011fa6:	4b03      	ldr	r3, [pc, #12]	@ (8011fb4 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	370c      	adds	r7, #12
 8011fac:	46bd      	mov	sp, r7
 8011fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb2:	4770      	bx	lr
 8011fb4:	20000104 	.word	0x20000104

08011fb8 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b082      	sub	sp, #8
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	6039      	str	r1, [r7, #0]
 8011fc2:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8011fc4:	79fb      	ldrb	r3, [r7, #7]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d105      	bne.n	8011fd6 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8011fca:	683a      	ldr	r2, [r7, #0]
 8011fcc:	4907      	ldr	r1, [pc, #28]	@ (8011fec <USBD_Class_ProductStrDescriptor+0x34>)
 8011fce:	4808      	ldr	r0, [pc, #32]	@ (8011ff0 <USBD_Class_ProductStrDescriptor+0x38>)
 8011fd0:	f7ff ff6e 	bl	8011eb0 <USBD_GetString>
 8011fd4:	e004      	b.n	8011fe0 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8011fd6:	683a      	ldr	r2, [r7, #0]
 8011fd8:	4904      	ldr	r1, [pc, #16]	@ (8011fec <USBD_Class_ProductStrDescriptor+0x34>)
 8011fda:	4805      	ldr	r0, [pc, #20]	@ (8011ff0 <USBD_Class_ProductStrDescriptor+0x38>)
 8011fdc:	f7ff ff68 	bl	8011eb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011fe0:	4b02      	ldr	r3, [pc, #8]	@ (8011fec <USBD_Class_ProductStrDescriptor+0x34>)
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	3708      	adds	r7, #8
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}
 8011fea:	bf00      	nop
 8011fec:	200110d4 	.word	0x200110d4
 8011ff0:	080136b0 	.word	0x080136b0

08011ff4 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b082      	sub	sp, #8
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	6039      	str	r1, [r7, #0]
 8011ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012000:	683a      	ldr	r2, [r7, #0]
 8012002:	4904      	ldr	r1, [pc, #16]	@ (8012014 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 8012004:	4804      	ldr	r0, [pc, #16]	@ (8012018 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 8012006:	f7ff ff53 	bl	8011eb0 <USBD_GetString>
  return USBD_StrDesc;
 801200a:	4b02      	ldr	r3, [pc, #8]	@ (8012014 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 801200c:	4618      	mov	r0, r3
 801200e:	3708      	adds	r7, #8
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	200110d4 	.word	0x200110d4
 8012018:	080136c8 	.word	0x080136c8

0801201c <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b082      	sub	sp, #8
 8012020:	af00      	add	r7, sp, #0
 8012022:	4603      	mov	r3, r0
 8012024:	6039      	str	r1, [r7, #0]
 8012026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	221a      	movs	r2, #26
 801202c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 801202e:	f000 f843 	bl	80120b8 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 8012032:	4b02      	ldr	r3, [pc, #8]	@ (801203c <USBD_Class_SerialStrDescriptor+0x20>)
}
 8012034:	4618      	mov	r0, r3
 8012036:	3708      	adds	r7, #8
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}
 801203c:	20000108 	.word	0x20000108

08012040 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b082      	sub	sp, #8
 8012044:	af00      	add	r7, sp, #0
 8012046:	4603      	mov	r3, r0
 8012048:	6039      	str	r1, [r7, #0]
 801204a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 801204c:	79fb      	ldrb	r3, [r7, #7]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d105      	bne.n	801205e <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8012052:	683a      	ldr	r2, [r7, #0]
 8012054:	4907      	ldr	r1, [pc, #28]	@ (8012074 <USBD_Class_ConfigStrDescriptor+0x34>)
 8012056:	4808      	ldr	r0, [pc, #32]	@ (8012078 <USBD_Class_ConfigStrDescriptor+0x38>)
 8012058:	f7ff ff2a 	bl	8011eb0 <USBD_GetString>
 801205c:	e004      	b.n	8012068 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 801205e:	683a      	ldr	r2, [r7, #0]
 8012060:	4904      	ldr	r1, [pc, #16]	@ (8012074 <USBD_Class_ConfigStrDescriptor+0x34>)
 8012062:	4805      	ldr	r0, [pc, #20]	@ (8012078 <USBD_Class_ConfigStrDescriptor+0x38>)
 8012064:	f7ff ff24 	bl	8011eb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012068:	4b02      	ldr	r3, [pc, #8]	@ (8012074 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 801206a:	4618      	mov	r0, r3
 801206c:	3708      	adds	r7, #8
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}
 8012072:	bf00      	nop
 8012074:	200110d4 	.word	0x200110d4
 8012078:	080136dc 	.word	0x080136dc

0801207c <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b082      	sub	sp, #8
 8012080:	af00      	add	r7, sp, #0
 8012082:	4603      	mov	r3, r0
 8012084:	6039      	str	r1, [r7, #0]
 8012086:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8012088:	79fb      	ldrb	r3, [r7, #7]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d105      	bne.n	801209a <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 801208e:	683a      	ldr	r2, [r7, #0]
 8012090:	4907      	ldr	r1, [pc, #28]	@ (80120b0 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8012092:	4808      	ldr	r0, [pc, #32]	@ (80120b4 <USBD_Class_InterfaceStrDescriptor+0x38>)
 8012094:	f7ff ff0c 	bl	8011eb0 <USBD_GetString>
 8012098:	e004      	b.n	80120a4 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 801209a:	683a      	ldr	r2, [r7, #0]
 801209c:	4904      	ldr	r1, [pc, #16]	@ (80120b0 <USBD_Class_InterfaceStrDescriptor+0x34>)
 801209e:	4805      	ldr	r0, [pc, #20]	@ (80120b4 <USBD_Class_InterfaceStrDescriptor+0x38>)
 80120a0:	f7ff ff06 	bl	8011eb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80120a4:	4b02      	ldr	r3, [pc, #8]	@ (80120b0 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3708      	adds	r7, #8
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}
 80120ae:	bf00      	nop
 80120b0:	200110d4 	.word	0x200110d4
 80120b4:	080136e8 	.word	0x080136e8

080120b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b084      	sub	sp, #16
 80120bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 80120be:	4b0f      	ldr	r3, [pc, #60]	@ (80120fc <Get_SerialNum+0x44>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 80120c4:	4b0e      	ldr	r3, [pc, #56]	@ (8012100 <Get_SerialNum+0x48>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 80120ca:	4b0e      	ldr	r3, [pc, #56]	@ (8012104 <Get_SerialNum+0x4c>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80120d0:	68fa      	ldr	r2, [r7, #12]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	4413      	add	r3, r2
 80120d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d009      	beq.n	80120f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 80120de:	2208      	movs	r2, #8
 80120e0:	4909      	ldr	r1, [pc, #36]	@ (8012108 <Get_SerialNum+0x50>)
 80120e2:	68f8      	ldr	r0, [r7, #12]
 80120e4:	f000 f814 	bl	8012110 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 80120e8:	2204      	movs	r2, #4
 80120ea:	4908      	ldr	r1, [pc, #32]	@ (801210c <Get_SerialNum+0x54>)
 80120ec:	68b8      	ldr	r0, [r7, #8]
 80120ee:	f000 f80f 	bl	8012110 <IntToUnicode>
  }
}
 80120f2:	bf00      	nop
 80120f4:	3710      	adds	r7, #16
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}
 80120fa:	bf00      	nop
 80120fc:	08fff800 	.word	0x08fff800
 8012100:	08fff804 	.word	0x08fff804
 8012104:	08fff808 	.word	0x08fff808
 8012108:	2000010a 	.word	0x2000010a
 801210c:	2000011a 	.word	0x2000011a

08012110 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 8012110:	b480      	push	{r7}
 8012112:	b087      	sub	sp, #28
 8012114:	af00      	add	r7, sp, #0
 8012116:	60f8      	str	r0, [r7, #12]
 8012118:	60b9      	str	r1, [r7, #8]
 801211a:	4613      	mov	r3, r2
 801211c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 801211e:	2300      	movs	r3, #0
 8012120:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 8012122:	2300      	movs	r3, #0
 8012124:	75fb      	strb	r3, [r7, #23]
 8012126:	e025      	b.n	8012174 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	0f1b      	lsrs	r3, r3, #28
 801212c:	2b09      	cmp	r3, #9
 801212e:	d80a      	bhi.n	8012146 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	0f1b      	lsrs	r3, r3, #28
 8012134:	b2da      	uxtb	r2, r3
 8012136:	7dfb      	ldrb	r3, [r7, #23]
 8012138:	005b      	lsls	r3, r3, #1
 801213a:	68b9      	ldr	r1, [r7, #8]
 801213c:	440b      	add	r3, r1
 801213e:	3230      	adds	r2, #48	@ 0x30
 8012140:	b2d2      	uxtb	r2, r2
 8012142:	701a      	strb	r2, [r3, #0]
 8012144:	e009      	b.n	801215a <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	0f1b      	lsrs	r3, r3, #28
 801214a:	b2da      	uxtb	r2, r3
 801214c:	7dfb      	ldrb	r3, [r7, #23]
 801214e:	005b      	lsls	r3, r3, #1
 8012150:	68b9      	ldr	r1, [r7, #8]
 8012152:	440b      	add	r3, r1
 8012154:	3237      	adds	r2, #55	@ 0x37
 8012156:	b2d2      	uxtb	r2, r2
 8012158:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	011b      	lsls	r3, r3, #4
 801215e:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 8012160:	7dfb      	ldrb	r3, [r7, #23]
 8012162:	005b      	lsls	r3, r3, #1
 8012164:	3301      	adds	r3, #1
 8012166:	68ba      	ldr	r2, [r7, #8]
 8012168:	4413      	add	r3, r2
 801216a:	2200      	movs	r2, #0
 801216c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 801216e:	7dfb      	ldrb	r3, [r7, #23]
 8012170:	3301      	adds	r3, #1
 8012172:	75fb      	strb	r3, [r7, #23]
 8012174:	7dfa      	ldrb	r2, [r7, #23]
 8012176:	79fb      	ldrb	r3, [r7, #7]
 8012178:	429a      	cmp	r2, r3
 801217a:	d3d5      	bcc.n	8012128 <IntToUnicode+0x18>
  }
}
 801217c:	bf00      	nop
 801217e:	bf00      	nop
 8012180:	371c      	adds	r7, #28
 8012182:	46bd      	mov	sp, r7
 8012184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012188:	4770      	bx	lr

0801218a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801218a:	b580      	push	{r7, lr}
 801218c:	b084      	sub	sp, #16
 801218e:	af00      	add	r7, sp, #0
 8012190:	60f8      	str	r0, [r7, #12]
 8012192:	60b9      	str	r1, [r7, #8]
 8012194:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	2202      	movs	r2, #2
 801219a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	687a      	ldr	r2, [r7, #4]
 80121a2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	687a      	ldr	r2, [r7, #4]
 80121a8:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	68ba      	ldr	r2, [r7, #8]
 80121ae:	2100      	movs	r1, #0
 80121b0:	68f8      	ldr	r0, [r7, #12]
 80121b2:	f7fe fca0 	bl	8010af6 <USBD_LL_Transmit>

  return USBD_OK;
 80121b6:	2300      	movs	r3, #0
}
 80121b8:	4618      	mov	r0, r3
 80121ba:	3710      	adds	r7, #16
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}

080121c0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b084      	sub	sp, #16
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	60f8      	str	r0, [r7, #12]
 80121c8:	60b9      	str	r1, [r7, #8]
 80121ca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	68ba      	ldr	r2, [r7, #8]
 80121d0:	2100      	movs	r1, #0
 80121d2:	68f8      	ldr	r0, [r7, #12]
 80121d4:	f7fe fc8f 	bl	8010af6 <USBD_LL_Transmit>

  return USBD_OK;
 80121d8:	2300      	movs	r3, #0
}
 80121da:	4618      	mov	r0, r3
 80121dc:	3710      	adds	r7, #16
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}

080121e2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80121e2:	b580      	push	{r7, lr}
 80121e4:	b084      	sub	sp, #16
 80121e6:	af00      	add	r7, sp, #0
 80121e8:	60f8      	str	r0, [r7, #12]
 80121ea:	60b9      	str	r1, [r7, #8]
 80121ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	2203      	movs	r2, #3
 80121f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	687a      	ldr	r2, [r7, #4]
 80121fa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	687a      	ldr	r2, [r7, #4]
 8012202:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	68ba      	ldr	r2, [r7, #8]
 801220a:	2100      	movs	r1, #0
 801220c:	68f8      	ldr	r0, [r7, #12]
 801220e:	f7fe fc8d 	bl	8010b2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012212:	2300      	movs	r3, #0
}
 8012214:	4618      	mov	r0, r3
 8012216:	3710      	adds	r7, #16
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}

0801221c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b084      	sub	sp, #16
 8012220:	af00      	add	r7, sp, #0
 8012222:	60f8      	str	r0, [r7, #12]
 8012224:	60b9      	str	r1, [r7, #8]
 8012226:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	68ba      	ldr	r2, [r7, #8]
 801222c:	2100      	movs	r1, #0
 801222e:	68f8      	ldr	r0, [r7, #12]
 8012230:	f7fe fc7c 	bl	8010b2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012234:	2300      	movs	r3, #0
}
 8012236:	4618      	mov	r0, r3
 8012238:	3710      	adds	r7, #16
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}

0801223e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801223e:	b580      	push	{r7, lr}
 8012240:	b082      	sub	sp, #8
 8012242:	af00      	add	r7, sp, #0
 8012244:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	2204      	movs	r2, #4
 801224a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801224e:	2300      	movs	r3, #0
 8012250:	2200      	movs	r2, #0
 8012252:	2100      	movs	r1, #0
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f7fe fc4e 	bl	8010af6 <USBD_LL_Transmit>

  return USBD_OK;
 801225a:	2300      	movs	r3, #0
}
 801225c:	4618      	mov	r0, r3
 801225e:	3708      	adds	r7, #8
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}

08012264 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b082      	sub	sp, #8
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2205      	movs	r2, #5
 8012270:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012274:	2300      	movs	r3, #0
 8012276:	2200      	movs	r2, #0
 8012278:	2100      	movs	r1, #0
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f7fe fc56 	bl	8010b2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012280:	2300      	movs	r3, #0
}
 8012282:	4618      	mov	r0, r3
 8012284:	3708      	adds	r7, #8
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}
	...

0801228c <sbrk_aligned>:
 801228c:	b570      	push	{r4, r5, r6, lr}
 801228e:	4e0f      	ldr	r6, [pc, #60]	@ (80122cc <sbrk_aligned+0x40>)
 8012290:	460c      	mov	r4, r1
 8012292:	4605      	mov	r5, r0
 8012294:	6831      	ldr	r1, [r6, #0]
 8012296:	b911      	cbnz	r1, 801229e <sbrk_aligned+0x12>
 8012298:	f000 fa66 	bl	8012768 <_sbrk_r>
 801229c:	6030      	str	r0, [r6, #0]
 801229e:	4621      	mov	r1, r4
 80122a0:	4628      	mov	r0, r5
 80122a2:	f000 fa61 	bl	8012768 <_sbrk_r>
 80122a6:	1c43      	adds	r3, r0, #1
 80122a8:	d103      	bne.n	80122b2 <sbrk_aligned+0x26>
 80122aa:	f04f 34ff 	mov.w	r4, #4294967295
 80122ae:	4620      	mov	r0, r4
 80122b0:	bd70      	pop	{r4, r5, r6, pc}
 80122b2:	1cc4      	adds	r4, r0, #3
 80122b4:	f024 0403 	bic.w	r4, r4, #3
 80122b8:	42a0      	cmp	r0, r4
 80122ba:	d0f8      	beq.n	80122ae <sbrk_aligned+0x22>
 80122bc:	1a21      	subs	r1, r4, r0
 80122be:	4628      	mov	r0, r5
 80122c0:	f000 fa52 	bl	8012768 <_sbrk_r>
 80122c4:	3001      	adds	r0, #1
 80122c6:	d1f2      	bne.n	80122ae <sbrk_aligned+0x22>
 80122c8:	e7ef      	b.n	80122aa <sbrk_aligned+0x1e>
 80122ca:	bf00      	nop
 80122cc:	200111d4 	.word	0x200111d4

080122d0 <_malloc_r>:
 80122d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122d4:	1ccd      	adds	r5, r1, #3
 80122d6:	4606      	mov	r6, r0
 80122d8:	f025 0503 	bic.w	r5, r5, #3
 80122dc:	3508      	adds	r5, #8
 80122de:	2d0c      	cmp	r5, #12
 80122e0:	bf38      	it	cc
 80122e2:	250c      	movcc	r5, #12
 80122e4:	2d00      	cmp	r5, #0
 80122e6:	db01      	blt.n	80122ec <_malloc_r+0x1c>
 80122e8:	42a9      	cmp	r1, r5
 80122ea:	d904      	bls.n	80122f6 <_malloc_r+0x26>
 80122ec:	230c      	movs	r3, #12
 80122ee:	6033      	str	r3, [r6, #0]
 80122f0:	2000      	movs	r0, #0
 80122f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80123cc <_malloc_r+0xfc>
 80122fa:	f000 f869 	bl	80123d0 <__malloc_lock>
 80122fe:	f8d8 3000 	ldr.w	r3, [r8]
 8012302:	461c      	mov	r4, r3
 8012304:	bb44      	cbnz	r4, 8012358 <_malloc_r+0x88>
 8012306:	4629      	mov	r1, r5
 8012308:	4630      	mov	r0, r6
 801230a:	f7ff ffbf 	bl	801228c <sbrk_aligned>
 801230e:	1c43      	adds	r3, r0, #1
 8012310:	4604      	mov	r4, r0
 8012312:	d158      	bne.n	80123c6 <_malloc_r+0xf6>
 8012314:	f8d8 4000 	ldr.w	r4, [r8]
 8012318:	4627      	mov	r7, r4
 801231a:	2f00      	cmp	r7, #0
 801231c:	d143      	bne.n	80123a6 <_malloc_r+0xd6>
 801231e:	2c00      	cmp	r4, #0
 8012320:	d04b      	beq.n	80123ba <_malloc_r+0xea>
 8012322:	6823      	ldr	r3, [r4, #0]
 8012324:	4639      	mov	r1, r7
 8012326:	4630      	mov	r0, r6
 8012328:	eb04 0903 	add.w	r9, r4, r3
 801232c:	f000 fa1c 	bl	8012768 <_sbrk_r>
 8012330:	4581      	cmp	r9, r0
 8012332:	d142      	bne.n	80123ba <_malloc_r+0xea>
 8012334:	6821      	ldr	r1, [r4, #0]
 8012336:	4630      	mov	r0, r6
 8012338:	1a6d      	subs	r5, r5, r1
 801233a:	4629      	mov	r1, r5
 801233c:	f7ff ffa6 	bl	801228c <sbrk_aligned>
 8012340:	3001      	adds	r0, #1
 8012342:	d03a      	beq.n	80123ba <_malloc_r+0xea>
 8012344:	6823      	ldr	r3, [r4, #0]
 8012346:	442b      	add	r3, r5
 8012348:	6023      	str	r3, [r4, #0]
 801234a:	f8d8 3000 	ldr.w	r3, [r8]
 801234e:	685a      	ldr	r2, [r3, #4]
 8012350:	bb62      	cbnz	r2, 80123ac <_malloc_r+0xdc>
 8012352:	f8c8 7000 	str.w	r7, [r8]
 8012356:	e00f      	b.n	8012378 <_malloc_r+0xa8>
 8012358:	6822      	ldr	r2, [r4, #0]
 801235a:	1b52      	subs	r2, r2, r5
 801235c:	d420      	bmi.n	80123a0 <_malloc_r+0xd0>
 801235e:	2a0b      	cmp	r2, #11
 8012360:	d917      	bls.n	8012392 <_malloc_r+0xc2>
 8012362:	1961      	adds	r1, r4, r5
 8012364:	42a3      	cmp	r3, r4
 8012366:	6025      	str	r5, [r4, #0]
 8012368:	bf18      	it	ne
 801236a:	6059      	strne	r1, [r3, #4]
 801236c:	6863      	ldr	r3, [r4, #4]
 801236e:	bf08      	it	eq
 8012370:	f8c8 1000 	streq.w	r1, [r8]
 8012374:	5162      	str	r2, [r4, r5]
 8012376:	604b      	str	r3, [r1, #4]
 8012378:	4630      	mov	r0, r6
 801237a:	f000 f82f 	bl	80123dc <__malloc_unlock>
 801237e:	f104 000b 	add.w	r0, r4, #11
 8012382:	1d23      	adds	r3, r4, #4
 8012384:	f020 0007 	bic.w	r0, r0, #7
 8012388:	1ac2      	subs	r2, r0, r3
 801238a:	bf1c      	itt	ne
 801238c:	1a1b      	subne	r3, r3, r0
 801238e:	50a3      	strne	r3, [r4, r2]
 8012390:	e7af      	b.n	80122f2 <_malloc_r+0x22>
 8012392:	6862      	ldr	r2, [r4, #4]
 8012394:	42a3      	cmp	r3, r4
 8012396:	bf0c      	ite	eq
 8012398:	f8c8 2000 	streq.w	r2, [r8]
 801239c:	605a      	strne	r2, [r3, #4]
 801239e:	e7eb      	b.n	8012378 <_malloc_r+0xa8>
 80123a0:	4623      	mov	r3, r4
 80123a2:	6864      	ldr	r4, [r4, #4]
 80123a4:	e7ae      	b.n	8012304 <_malloc_r+0x34>
 80123a6:	463c      	mov	r4, r7
 80123a8:	687f      	ldr	r7, [r7, #4]
 80123aa:	e7b6      	b.n	801231a <_malloc_r+0x4a>
 80123ac:	461a      	mov	r2, r3
 80123ae:	685b      	ldr	r3, [r3, #4]
 80123b0:	42a3      	cmp	r3, r4
 80123b2:	d1fb      	bne.n	80123ac <_malloc_r+0xdc>
 80123b4:	2300      	movs	r3, #0
 80123b6:	6053      	str	r3, [r2, #4]
 80123b8:	e7de      	b.n	8012378 <_malloc_r+0xa8>
 80123ba:	230c      	movs	r3, #12
 80123bc:	4630      	mov	r0, r6
 80123be:	6033      	str	r3, [r6, #0]
 80123c0:	f000 f80c 	bl	80123dc <__malloc_unlock>
 80123c4:	e794      	b.n	80122f0 <_malloc_r+0x20>
 80123c6:	6005      	str	r5, [r0, #0]
 80123c8:	e7d6      	b.n	8012378 <_malloc_r+0xa8>
 80123ca:	bf00      	nop
 80123cc:	200111d8 	.word	0x200111d8

080123d0 <__malloc_lock>:
 80123d0:	4801      	ldr	r0, [pc, #4]	@ (80123d8 <__malloc_lock+0x8>)
 80123d2:	f000 ba16 	b.w	8012802 <__retarget_lock_acquire_recursive>
 80123d6:	bf00      	nop
 80123d8:	2001131c 	.word	0x2001131c

080123dc <__malloc_unlock>:
 80123dc:	4801      	ldr	r0, [pc, #4]	@ (80123e4 <__malloc_unlock+0x8>)
 80123de:	f000 ba11 	b.w	8012804 <__retarget_lock_release_recursive>
 80123e2:	bf00      	nop
 80123e4:	2001131c 	.word	0x2001131c

080123e8 <std>:
 80123e8:	2300      	movs	r3, #0
 80123ea:	b510      	push	{r4, lr}
 80123ec:	4604      	mov	r4, r0
 80123ee:	6083      	str	r3, [r0, #8]
 80123f0:	8181      	strh	r1, [r0, #12]
 80123f2:	4619      	mov	r1, r3
 80123f4:	6643      	str	r3, [r0, #100]	@ 0x64
 80123f6:	81c2      	strh	r2, [r0, #14]
 80123f8:	2208      	movs	r2, #8
 80123fa:	6183      	str	r3, [r0, #24]
 80123fc:	e9c0 3300 	strd	r3, r3, [r0]
 8012400:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012404:	305c      	adds	r0, #92	@ 0x5c
 8012406:	f000 f973 	bl	80126f0 <memset>
 801240a:	4b0d      	ldr	r3, [pc, #52]	@ (8012440 <std+0x58>)
 801240c:	6224      	str	r4, [r4, #32]
 801240e:	6263      	str	r3, [r4, #36]	@ 0x24
 8012410:	4b0c      	ldr	r3, [pc, #48]	@ (8012444 <std+0x5c>)
 8012412:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012414:	4b0c      	ldr	r3, [pc, #48]	@ (8012448 <std+0x60>)
 8012416:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012418:	4b0c      	ldr	r3, [pc, #48]	@ (801244c <std+0x64>)
 801241a:	6323      	str	r3, [r4, #48]	@ 0x30
 801241c:	4b0c      	ldr	r3, [pc, #48]	@ (8012450 <std+0x68>)
 801241e:	429c      	cmp	r4, r3
 8012420:	d006      	beq.n	8012430 <std+0x48>
 8012422:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012426:	4294      	cmp	r4, r2
 8012428:	d002      	beq.n	8012430 <std+0x48>
 801242a:	33d0      	adds	r3, #208	@ 0xd0
 801242c:	429c      	cmp	r4, r3
 801242e:	d105      	bne.n	801243c <std+0x54>
 8012430:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012438:	f000 b9e2 	b.w	8012800 <__retarget_lock_init_recursive>
 801243c:	bd10      	pop	{r4, pc}
 801243e:	bf00      	nop
 8012440:	080125f9 	.word	0x080125f9
 8012444:	0801261b 	.word	0x0801261b
 8012448:	08012653 	.word	0x08012653
 801244c:	08012677 	.word	0x08012677
 8012450:	200111dc 	.word	0x200111dc

08012454 <stdio_exit_handler>:
 8012454:	4a02      	ldr	r2, [pc, #8]	@ (8012460 <stdio_exit_handler+0xc>)
 8012456:	4903      	ldr	r1, [pc, #12]	@ (8012464 <stdio_exit_handler+0x10>)
 8012458:	4803      	ldr	r0, [pc, #12]	@ (8012468 <stdio_exit_handler+0x14>)
 801245a:	f000 b869 	b.w	8012530 <_fwalk_sglue>
 801245e:	bf00      	nop
 8012460:	20000124 	.word	0x20000124
 8012464:	08013215 	.word	0x08013215
 8012468:	20000134 	.word	0x20000134

0801246c <cleanup_stdio>:
 801246c:	6841      	ldr	r1, [r0, #4]
 801246e:	4b0c      	ldr	r3, [pc, #48]	@ (80124a0 <cleanup_stdio+0x34>)
 8012470:	4299      	cmp	r1, r3
 8012472:	b510      	push	{r4, lr}
 8012474:	4604      	mov	r4, r0
 8012476:	d001      	beq.n	801247c <cleanup_stdio+0x10>
 8012478:	f000 fecc 	bl	8013214 <_fflush_r>
 801247c:	68a1      	ldr	r1, [r4, #8]
 801247e:	4b09      	ldr	r3, [pc, #36]	@ (80124a4 <cleanup_stdio+0x38>)
 8012480:	4299      	cmp	r1, r3
 8012482:	d002      	beq.n	801248a <cleanup_stdio+0x1e>
 8012484:	4620      	mov	r0, r4
 8012486:	f000 fec5 	bl	8013214 <_fflush_r>
 801248a:	68e1      	ldr	r1, [r4, #12]
 801248c:	4b06      	ldr	r3, [pc, #24]	@ (80124a8 <cleanup_stdio+0x3c>)
 801248e:	4299      	cmp	r1, r3
 8012490:	d004      	beq.n	801249c <cleanup_stdio+0x30>
 8012492:	4620      	mov	r0, r4
 8012494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012498:	f000 bebc 	b.w	8013214 <_fflush_r>
 801249c:	bd10      	pop	{r4, pc}
 801249e:	bf00      	nop
 80124a0:	200111dc 	.word	0x200111dc
 80124a4:	20011244 	.word	0x20011244
 80124a8:	200112ac 	.word	0x200112ac

080124ac <global_stdio_init.part.0>:
 80124ac:	b510      	push	{r4, lr}
 80124ae:	4b0b      	ldr	r3, [pc, #44]	@ (80124dc <global_stdio_init.part.0+0x30>)
 80124b0:	2104      	movs	r1, #4
 80124b2:	4c0b      	ldr	r4, [pc, #44]	@ (80124e0 <global_stdio_init.part.0+0x34>)
 80124b4:	4a0b      	ldr	r2, [pc, #44]	@ (80124e4 <global_stdio_init.part.0+0x38>)
 80124b6:	4620      	mov	r0, r4
 80124b8:	601a      	str	r2, [r3, #0]
 80124ba:	2200      	movs	r2, #0
 80124bc:	f7ff ff94 	bl	80123e8 <std>
 80124c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80124c4:	2201      	movs	r2, #1
 80124c6:	2109      	movs	r1, #9
 80124c8:	f7ff ff8e 	bl	80123e8 <std>
 80124cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80124d0:	2202      	movs	r2, #2
 80124d2:	2112      	movs	r1, #18
 80124d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124d8:	f7ff bf86 	b.w	80123e8 <std>
 80124dc:	20011314 	.word	0x20011314
 80124e0:	200111dc 	.word	0x200111dc
 80124e4:	08012455 	.word	0x08012455

080124e8 <__sfp_lock_acquire>:
 80124e8:	4801      	ldr	r0, [pc, #4]	@ (80124f0 <__sfp_lock_acquire+0x8>)
 80124ea:	f000 b98a 	b.w	8012802 <__retarget_lock_acquire_recursive>
 80124ee:	bf00      	nop
 80124f0:	2001131d 	.word	0x2001131d

080124f4 <__sfp_lock_release>:
 80124f4:	4801      	ldr	r0, [pc, #4]	@ (80124fc <__sfp_lock_release+0x8>)
 80124f6:	f000 b985 	b.w	8012804 <__retarget_lock_release_recursive>
 80124fa:	bf00      	nop
 80124fc:	2001131d 	.word	0x2001131d

08012500 <__sinit>:
 8012500:	b510      	push	{r4, lr}
 8012502:	4604      	mov	r4, r0
 8012504:	f7ff fff0 	bl	80124e8 <__sfp_lock_acquire>
 8012508:	6a23      	ldr	r3, [r4, #32]
 801250a:	b11b      	cbz	r3, 8012514 <__sinit+0x14>
 801250c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012510:	f7ff bff0 	b.w	80124f4 <__sfp_lock_release>
 8012514:	4b04      	ldr	r3, [pc, #16]	@ (8012528 <__sinit+0x28>)
 8012516:	6223      	str	r3, [r4, #32]
 8012518:	4b04      	ldr	r3, [pc, #16]	@ (801252c <__sinit+0x2c>)
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d1f5      	bne.n	801250c <__sinit+0xc>
 8012520:	f7ff ffc4 	bl	80124ac <global_stdio_init.part.0>
 8012524:	e7f2      	b.n	801250c <__sinit+0xc>
 8012526:	bf00      	nop
 8012528:	0801246d 	.word	0x0801246d
 801252c:	20011314 	.word	0x20011314

08012530 <_fwalk_sglue>:
 8012530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012534:	4607      	mov	r7, r0
 8012536:	4688      	mov	r8, r1
 8012538:	4614      	mov	r4, r2
 801253a:	2600      	movs	r6, #0
 801253c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012540:	f1b9 0901 	subs.w	r9, r9, #1
 8012544:	d505      	bpl.n	8012552 <_fwalk_sglue+0x22>
 8012546:	6824      	ldr	r4, [r4, #0]
 8012548:	2c00      	cmp	r4, #0
 801254a:	d1f7      	bne.n	801253c <_fwalk_sglue+0xc>
 801254c:	4630      	mov	r0, r6
 801254e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012552:	89ab      	ldrh	r3, [r5, #12]
 8012554:	2b01      	cmp	r3, #1
 8012556:	d907      	bls.n	8012568 <_fwalk_sglue+0x38>
 8012558:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801255c:	3301      	adds	r3, #1
 801255e:	d003      	beq.n	8012568 <_fwalk_sglue+0x38>
 8012560:	4629      	mov	r1, r5
 8012562:	4638      	mov	r0, r7
 8012564:	47c0      	blx	r8
 8012566:	4306      	orrs	r6, r0
 8012568:	3568      	adds	r5, #104	@ 0x68
 801256a:	e7e9      	b.n	8012540 <_fwalk_sglue+0x10>

0801256c <iprintf>:
 801256c:	b40f      	push	{r0, r1, r2, r3}
 801256e:	b507      	push	{r0, r1, r2, lr}
 8012570:	4906      	ldr	r1, [pc, #24]	@ (801258c <iprintf+0x20>)
 8012572:	ab04      	add	r3, sp, #16
 8012574:	6808      	ldr	r0, [r1, #0]
 8012576:	f853 2b04 	ldr.w	r2, [r3], #4
 801257a:	6881      	ldr	r1, [r0, #8]
 801257c:	9301      	str	r3, [sp, #4]
 801257e:	f000 fb1b 	bl	8012bb8 <_vfiprintf_r>
 8012582:	b003      	add	sp, #12
 8012584:	f85d eb04 	ldr.w	lr, [sp], #4
 8012588:	b004      	add	sp, #16
 801258a:	4770      	bx	lr
 801258c:	20000130 	.word	0x20000130

08012590 <sniprintf>:
 8012590:	b40c      	push	{r2, r3}
 8012592:	4b18      	ldr	r3, [pc, #96]	@ (80125f4 <sniprintf+0x64>)
 8012594:	b530      	push	{r4, r5, lr}
 8012596:	1e0c      	subs	r4, r1, #0
 8012598:	b09d      	sub	sp, #116	@ 0x74
 801259a:	681d      	ldr	r5, [r3, #0]
 801259c:	da08      	bge.n	80125b0 <sniprintf+0x20>
 801259e:	238b      	movs	r3, #139	@ 0x8b
 80125a0:	f04f 30ff 	mov.w	r0, #4294967295
 80125a4:	602b      	str	r3, [r5, #0]
 80125a6:	b01d      	add	sp, #116	@ 0x74
 80125a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125ac:	b002      	add	sp, #8
 80125ae:	4770      	bx	lr
 80125b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80125b4:	9002      	str	r0, [sp, #8]
 80125b6:	9006      	str	r0, [sp, #24]
 80125b8:	a902      	add	r1, sp, #8
 80125ba:	f8ad 3014 	strh.w	r3, [sp, #20]
 80125be:	bf14      	ite	ne
 80125c0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80125c4:	4623      	moveq	r3, r4
 80125c6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80125c8:	4628      	mov	r0, r5
 80125ca:	9304      	str	r3, [sp, #16]
 80125cc:	9307      	str	r3, [sp, #28]
 80125ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80125d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80125d6:	ab21      	add	r3, sp, #132	@ 0x84
 80125d8:	9301      	str	r3, [sp, #4]
 80125da:	f000 f9c7 	bl	801296c <_svfiprintf_r>
 80125de:	1c43      	adds	r3, r0, #1
 80125e0:	bfbc      	itt	lt
 80125e2:	238b      	movlt	r3, #139	@ 0x8b
 80125e4:	602b      	strlt	r3, [r5, #0]
 80125e6:	2c00      	cmp	r4, #0
 80125e8:	d0dd      	beq.n	80125a6 <sniprintf+0x16>
 80125ea:	9b02      	ldr	r3, [sp, #8]
 80125ec:	2200      	movs	r2, #0
 80125ee:	701a      	strb	r2, [r3, #0]
 80125f0:	e7d9      	b.n	80125a6 <sniprintf+0x16>
 80125f2:	bf00      	nop
 80125f4:	20000130 	.word	0x20000130

080125f8 <__sread>:
 80125f8:	b510      	push	{r4, lr}
 80125fa:	460c      	mov	r4, r1
 80125fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012600:	f000 f8a0 	bl	8012744 <_read_r>
 8012604:	2800      	cmp	r0, #0
 8012606:	bfab      	itete	ge
 8012608:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801260a:	89a3      	ldrhlt	r3, [r4, #12]
 801260c:	181b      	addge	r3, r3, r0
 801260e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012612:	bfac      	ite	ge
 8012614:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012616:	81a3      	strhlt	r3, [r4, #12]
 8012618:	bd10      	pop	{r4, pc}

0801261a <__swrite>:
 801261a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801261e:	461f      	mov	r7, r3
 8012620:	898b      	ldrh	r3, [r1, #12]
 8012622:	4605      	mov	r5, r0
 8012624:	460c      	mov	r4, r1
 8012626:	05db      	lsls	r3, r3, #23
 8012628:	4616      	mov	r6, r2
 801262a:	d505      	bpl.n	8012638 <__swrite+0x1e>
 801262c:	2302      	movs	r3, #2
 801262e:	2200      	movs	r2, #0
 8012630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012634:	f000 f874 	bl	8012720 <_lseek_r>
 8012638:	89a3      	ldrh	r3, [r4, #12]
 801263a:	4632      	mov	r2, r6
 801263c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012640:	4628      	mov	r0, r5
 8012642:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012646:	81a3      	strh	r3, [r4, #12]
 8012648:	463b      	mov	r3, r7
 801264a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801264e:	f000 b89b 	b.w	8012788 <_write_r>

08012652 <__sseek>:
 8012652:	b510      	push	{r4, lr}
 8012654:	460c      	mov	r4, r1
 8012656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801265a:	f000 f861 	bl	8012720 <_lseek_r>
 801265e:	1c43      	adds	r3, r0, #1
 8012660:	89a3      	ldrh	r3, [r4, #12]
 8012662:	bf15      	itete	ne
 8012664:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012666:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801266a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801266e:	81a3      	strheq	r3, [r4, #12]
 8012670:	bf18      	it	ne
 8012672:	81a3      	strhne	r3, [r4, #12]
 8012674:	bd10      	pop	{r4, pc}

08012676 <__sclose>:
 8012676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801267a:	f000 b841 	b.w	8012700 <_close_r>

0801267e <_vsniprintf_r>:
 801267e:	b530      	push	{r4, r5, lr}
 8012680:	4614      	mov	r4, r2
 8012682:	b09b      	sub	sp, #108	@ 0x6c
 8012684:	4605      	mov	r5, r0
 8012686:	461a      	mov	r2, r3
 8012688:	2c00      	cmp	r4, #0
 801268a:	da05      	bge.n	8012698 <_vsniprintf_r+0x1a>
 801268c:	238b      	movs	r3, #139	@ 0x8b
 801268e:	6003      	str	r3, [r0, #0]
 8012690:	f04f 30ff 	mov.w	r0, #4294967295
 8012694:	b01b      	add	sp, #108	@ 0x6c
 8012696:	bd30      	pop	{r4, r5, pc}
 8012698:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801269c:	9100      	str	r1, [sp, #0]
 801269e:	9104      	str	r1, [sp, #16]
 80126a0:	4669      	mov	r1, sp
 80126a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80126a6:	bf14      	ite	ne
 80126a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80126ac:	4623      	moveq	r3, r4
 80126ae:	9302      	str	r3, [sp, #8]
 80126b0:	9305      	str	r3, [sp, #20]
 80126b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80126b6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80126ba:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80126bc:	f000 f956 	bl	801296c <_svfiprintf_r>
 80126c0:	1c43      	adds	r3, r0, #1
 80126c2:	bfbc      	itt	lt
 80126c4:	238b      	movlt	r3, #139	@ 0x8b
 80126c6:	602b      	strlt	r3, [r5, #0]
 80126c8:	2c00      	cmp	r4, #0
 80126ca:	d0e3      	beq.n	8012694 <_vsniprintf_r+0x16>
 80126cc:	9b00      	ldr	r3, [sp, #0]
 80126ce:	2200      	movs	r2, #0
 80126d0:	701a      	strb	r2, [r3, #0]
 80126d2:	e7df      	b.n	8012694 <_vsniprintf_r+0x16>

080126d4 <vsniprintf>:
 80126d4:	b507      	push	{r0, r1, r2, lr}
 80126d6:	9300      	str	r3, [sp, #0]
 80126d8:	4613      	mov	r3, r2
 80126da:	460a      	mov	r2, r1
 80126dc:	4601      	mov	r1, r0
 80126de:	4803      	ldr	r0, [pc, #12]	@ (80126ec <vsniprintf+0x18>)
 80126e0:	6800      	ldr	r0, [r0, #0]
 80126e2:	f7ff ffcc 	bl	801267e <_vsniprintf_r>
 80126e6:	b003      	add	sp, #12
 80126e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80126ec:	20000130 	.word	0x20000130

080126f0 <memset>:
 80126f0:	4402      	add	r2, r0
 80126f2:	4603      	mov	r3, r0
 80126f4:	4293      	cmp	r3, r2
 80126f6:	d100      	bne.n	80126fa <memset+0xa>
 80126f8:	4770      	bx	lr
 80126fa:	f803 1b01 	strb.w	r1, [r3], #1
 80126fe:	e7f9      	b.n	80126f4 <memset+0x4>

08012700 <_close_r>:
 8012700:	b538      	push	{r3, r4, r5, lr}
 8012702:	2300      	movs	r3, #0
 8012704:	4d05      	ldr	r5, [pc, #20]	@ (801271c <_close_r+0x1c>)
 8012706:	4604      	mov	r4, r0
 8012708:	4608      	mov	r0, r1
 801270a:	602b      	str	r3, [r5, #0]
 801270c:	f7ef fd01 	bl	8002112 <_close>
 8012710:	1c43      	adds	r3, r0, #1
 8012712:	d102      	bne.n	801271a <_close_r+0x1a>
 8012714:	682b      	ldr	r3, [r5, #0]
 8012716:	b103      	cbz	r3, 801271a <_close_r+0x1a>
 8012718:	6023      	str	r3, [r4, #0]
 801271a:	bd38      	pop	{r3, r4, r5, pc}
 801271c:	20011318 	.word	0x20011318

08012720 <_lseek_r>:
 8012720:	b538      	push	{r3, r4, r5, lr}
 8012722:	4604      	mov	r4, r0
 8012724:	4d06      	ldr	r5, [pc, #24]	@ (8012740 <_lseek_r+0x20>)
 8012726:	4608      	mov	r0, r1
 8012728:	4611      	mov	r1, r2
 801272a:	2200      	movs	r2, #0
 801272c:	602a      	str	r2, [r5, #0]
 801272e:	461a      	mov	r2, r3
 8012730:	f7ef fd16 	bl	8002160 <_lseek>
 8012734:	1c43      	adds	r3, r0, #1
 8012736:	d102      	bne.n	801273e <_lseek_r+0x1e>
 8012738:	682b      	ldr	r3, [r5, #0]
 801273a:	b103      	cbz	r3, 801273e <_lseek_r+0x1e>
 801273c:	6023      	str	r3, [r4, #0]
 801273e:	bd38      	pop	{r3, r4, r5, pc}
 8012740:	20011318 	.word	0x20011318

08012744 <_read_r>:
 8012744:	b538      	push	{r3, r4, r5, lr}
 8012746:	4604      	mov	r4, r0
 8012748:	4d06      	ldr	r5, [pc, #24]	@ (8012764 <_read_r+0x20>)
 801274a:	4608      	mov	r0, r1
 801274c:	4611      	mov	r1, r2
 801274e:	2200      	movs	r2, #0
 8012750:	602a      	str	r2, [r5, #0]
 8012752:	461a      	mov	r2, r3
 8012754:	f7ef fca4 	bl	80020a0 <_read>
 8012758:	1c43      	adds	r3, r0, #1
 801275a:	d102      	bne.n	8012762 <_read_r+0x1e>
 801275c:	682b      	ldr	r3, [r5, #0]
 801275e:	b103      	cbz	r3, 8012762 <_read_r+0x1e>
 8012760:	6023      	str	r3, [r4, #0]
 8012762:	bd38      	pop	{r3, r4, r5, pc}
 8012764:	20011318 	.word	0x20011318

08012768 <_sbrk_r>:
 8012768:	b538      	push	{r3, r4, r5, lr}
 801276a:	2300      	movs	r3, #0
 801276c:	4d05      	ldr	r5, [pc, #20]	@ (8012784 <_sbrk_r+0x1c>)
 801276e:	4604      	mov	r4, r0
 8012770:	4608      	mov	r0, r1
 8012772:	602b      	str	r3, [r5, #0]
 8012774:	f7ef fd02 	bl	800217c <_sbrk>
 8012778:	1c43      	adds	r3, r0, #1
 801277a:	d102      	bne.n	8012782 <_sbrk_r+0x1a>
 801277c:	682b      	ldr	r3, [r5, #0]
 801277e:	b103      	cbz	r3, 8012782 <_sbrk_r+0x1a>
 8012780:	6023      	str	r3, [r4, #0]
 8012782:	bd38      	pop	{r3, r4, r5, pc}
 8012784:	20011318 	.word	0x20011318

08012788 <_write_r>:
 8012788:	b538      	push	{r3, r4, r5, lr}
 801278a:	4604      	mov	r4, r0
 801278c:	4d06      	ldr	r5, [pc, #24]	@ (80127a8 <_write_r+0x20>)
 801278e:	4608      	mov	r0, r1
 8012790:	4611      	mov	r1, r2
 8012792:	2200      	movs	r2, #0
 8012794:	602a      	str	r2, [r5, #0]
 8012796:	461a      	mov	r2, r3
 8012798:	f7ef fc9f 	bl	80020da <_write>
 801279c:	1c43      	adds	r3, r0, #1
 801279e:	d102      	bne.n	80127a6 <_write_r+0x1e>
 80127a0:	682b      	ldr	r3, [r5, #0]
 80127a2:	b103      	cbz	r3, 80127a6 <_write_r+0x1e>
 80127a4:	6023      	str	r3, [r4, #0]
 80127a6:	bd38      	pop	{r3, r4, r5, pc}
 80127a8:	20011318 	.word	0x20011318

080127ac <__errno>:
 80127ac:	4b01      	ldr	r3, [pc, #4]	@ (80127b4 <__errno+0x8>)
 80127ae:	6818      	ldr	r0, [r3, #0]
 80127b0:	4770      	bx	lr
 80127b2:	bf00      	nop
 80127b4:	20000130 	.word	0x20000130

080127b8 <__libc_init_array>:
 80127b8:	b570      	push	{r4, r5, r6, lr}
 80127ba:	4d0d      	ldr	r5, [pc, #52]	@ (80127f0 <__libc_init_array+0x38>)
 80127bc:	2600      	movs	r6, #0
 80127be:	4c0d      	ldr	r4, [pc, #52]	@ (80127f4 <__libc_init_array+0x3c>)
 80127c0:	1b64      	subs	r4, r4, r5
 80127c2:	10a4      	asrs	r4, r4, #2
 80127c4:	42a6      	cmp	r6, r4
 80127c6:	d109      	bne.n	80127dc <__libc_init_array+0x24>
 80127c8:	4d0b      	ldr	r5, [pc, #44]	@ (80127f8 <__libc_init_array+0x40>)
 80127ca:	2600      	movs	r6, #0
 80127cc:	4c0b      	ldr	r4, [pc, #44]	@ (80127fc <__libc_init_array+0x44>)
 80127ce:	f000 febf 	bl	8013550 <_init>
 80127d2:	1b64      	subs	r4, r4, r5
 80127d4:	10a4      	asrs	r4, r4, #2
 80127d6:	42a6      	cmp	r6, r4
 80127d8:	d105      	bne.n	80127e6 <__libc_init_array+0x2e>
 80127da:	bd70      	pop	{r4, r5, r6, pc}
 80127dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80127e0:	3601      	adds	r6, #1
 80127e2:	4798      	blx	r3
 80127e4:	e7ee      	b.n	80127c4 <__libc_init_array+0xc>
 80127e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80127ea:	3601      	adds	r6, #1
 80127ec:	4798      	blx	r3
 80127ee:	e7f2      	b.n	80127d6 <__libc_init_array+0x1e>
 80127f0:	08013784 	.word	0x08013784
 80127f4:	08013784 	.word	0x08013784
 80127f8:	08013784 	.word	0x08013784
 80127fc:	08013788 	.word	0x08013788

08012800 <__retarget_lock_init_recursive>:
 8012800:	4770      	bx	lr

08012802 <__retarget_lock_acquire_recursive>:
 8012802:	4770      	bx	lr

08012804 <__retarget_lock_release_recursive>:
 8012804:	4770      	bx	lr

08012806 <memcpy>:
 8012806:	440a      	add	r2, r1
 8012808:	1e43      	subs	r3, r0, #1
 801280a:	4291      	cmp	r1, r2
 801280c:	d100      	bne.n	8012810 <memcpy+0xa>
 801280e:	4770      	bx	lr
 8012810:	b510      	push	{r4, lr}
 8012812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012816:	4291      	cmp	r1, r2
 8012818:	f803 4f01 	strb.w	r4, [r3, #1]!
 801281c:	d1f9      	bne.n	8012812 <memcpy+0xc>
 801281e:	bd10      	pop	{r4, pc}

08012820 <_free_r>:
 8012820:	b538      	push	{r3, r4, r5, lr}
 8012822:	4605      	mov	r5, r0
 8012824:	2900      	cmp	r1, #0
 8012826:	d041      	beq.n	80128ac <_free_r+0x8c>
 8012828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801282c:	1f0c      	subs	r4, r1, #4
 801282e:	2b00      	cmp	r3, #0
 8012830:	bfb8      	it	lt
 8012832:	18e4      	addlt	r4, r4, r3
 8012834:	f7ff fdcc 	bl	80123d0 <__malloc_lock>
 8012838:	4a1d      	ldr	r2, [pc, #116]	@ (80128b0 <_free_r+0x90>)
 801283a:	6813      	ldr	r3, [r2, #0]
 801283c:	b933      	cbnz	r3, 801284c <_free_r+0x2c>
 801283e:	6063      	str	r3, [r4, #4]
 8012840:	6014      	str	r4, [r2, #0]
 8012842:	4628      	mov	r0, r5
 8012844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012848:	f7ff bdc8 	b.w	80123dc <__malloc_unlock>
 801284c:	42a3      	cmp	r3, r4
 801284e:	d908      	bls.n	8012862 <_free_r+0x42>
 8012850:	6820      	ldr	r0, [r4, #0]
 8012852:	1821      	adds	r1, r4, r0
 8012854:	428b      	cmp	r3, r1
 8012856:	bf01      	itttt	eq
 8012858:	6819      	ldreq	r1, [r3, #0]
 801285a:	685b      	ldreq	r3, [r3, #4]
 801285c:	1809      	addeq	r1, r1, r0
 801285e:	6021      	streq	r1, [r4, #0]
 8012860:	e7ed      	b.n	801283e <_free_r+0x1e>
 8012862:	461a      	mov	r2, r3
 8012864:	685b      	ldr	r3, [r3, #4]
 8012866:	b10b      	cbz	r3, 801286c <_free_r+0x4c>
 8012868:	42a3      	cmp	r3, r4
 801286a:	d9fa      	bls.n	8012862 <_free_r+0x42>
 801286c:	6811      	ldr	r1, [r2, #0]
 801286e:	1850      	adds	r0, r2, r1
 8012870:	42a0      	cmp	r0, r4
 8012872:	d10b      	bne.n	801288c <_free_r+0x6c>
 8012874:	6820      	ldr	r0, [r4, #0]
 8012876:	4401      	add	r1, r0
 8012878:	1850      	adds	r0, r2, r1
 801287a:	6011      	str	r1, [r2, #0]
 801287c:	4283      	cmp	r3, r0
 801287e:	d1e0      	bne.n	8012842 <_free_r+0x22>
 8012880:	6818      	ldr	r0, [r3, #0]
 8012882:	685b      	ldr	r3, [r3, #4]
 8012884:	4408      	add	r0, r1
 8012886:	6053      	str	r3, [r2, #4]
 8012888:	6010      	str	r0, [r2, #0]
 801288a:	e7da      	b.n	8012842 <_free_r+0x22>
 801288c:	d902      	bls.n	8012894 <_free_r+0x74>
 801288e:	230c      	movs	r3, #12
 8012890:	602b      	str	r3, [r5, #0]
 8012892:	e7d6      	b.n	8012842 <_free_r+0x22>
 8012894:	6820      	ldr	r0, [r4, #0]
 8012896:	1821      	adds	r1, r4, r0
 8012898:	428b      	cmp	r3, r1
 801289a:	bf02      	ittt	eq
 801289c:	6819      	ldreq	r1, [r3, #0]
 801289e:	685b      	ldreq	r3, [r3, #4]
 80128a0:	1809      	addeq	r1, r1, r0
 80128a2:	6063      	str	r3, [r4, #4]
 80128a4:	bf08      	it	eq
 80128a6:	6021      	streq	r1, [r4, #0]
 80128a8:	6054      	str	r4, [r2, #4]
 80128aa:	e7ca      	b.n	8012842 <_free_r+0x22>
 80128ac:	bd38      	pop	{r3, r4, r5, pc}
 80128ae:	bf00      	nop
 80128b0:	200111d8 	.word	0x200111d8

080128b4 <__ssputs_r>:
 80128b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128b8:	461f      	mov	r7, r3
 80128ba:	688e      	ldr	r6, [r1, #8]
 80128bc:	4682      	mov	sl, r0
 80128be:	460c      	mov	r4, r1
 80128c0:	42be      	cmp	r6, r7
 80128c2:	4690      	mov	r8, r2
 80128c4:	680b      	ldr	r3, [r1, #0]
 80128c6:	d82d      	bhi.n	8012924 <__ssputs_r+0x70>
 80128c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80128cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80128d0:	d026      	beq.n	8012920 <__ssputs_r+0x6c>
 80128d2:	6965      	ldr	r5, [r4, #20]
 80128d4:	6909      	ldr	r1, [r1, #16]
 80128d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80128da:	eba3 0901 	sub.w	r9, r3, r1
 80128de:	1c7b      	adds	r3, r7, #1
 80128e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80128e4:	444b      	add	r3, r9
 80128e6:	106d      	asrs	r5, r5, #1
 80128e8:	429d      	cmp	r5, r3
 80128ea:	bf38      	it	cc
 80128ec:	461d      	movcc	r5, r3
 80128ee:	0553      	lsls	r3, r2, #21
 80128f0:	d527      	bpl.n	8012942 <__ssputs_r+0x8e>
 80128f2:	4629      	mov	r1, r5
 80128f4:	f7ff fcec 	bl	80122d0 <_malloc_r>
 80128f8:	4606      	mov	r6, r0
 80128fa:	b360      	cbz	r0, 8012956 <__ssputs_r+0xa2>
 80128fc:	464a      	mov	r2, r9
 80128fe:	6921      	ldr	r1, [r4, #16]
 8012900:	f7ff ff81 	bl	8012806 <memcpy>
 8012904:	89a3      	ldrh	r3, [r4, #12]
 8012906:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801290a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801290e:	81a3      	strh	r3, [r4, #12]
 8012910:	6126      	str	r6, [r4, #16]
 8012912:	444e      	add	r6, r9
 8012914:	6165      	str	r5, [r4, #20]
 8012916:	eba5 0509 	sub.w	r5, r5, r9
 801291a:	6026      	str	r6, [r4, #0]
 801291c:	463e      	mov	r6, r7
 801291e:	60a5      	str	r5, [r4, #8]
 8012920:	42be      	cmp	r6, r7
 8012922:	d900      	bls.n	8012926 <__ssputs_r+0x72>
 8012924:	463e      	mov	r6, r7
 8012926:	4632      	mov	r2, r6
 8012928:	4641      	mov	r1, r8
 801292a:	6820      	ldr	r0, [r4, #0]
 801292c:	f000 fd2e 	bl	801338c <memmove>
 8012930:	68a3      	ldr	r3, [r4, #8]
 8012932:	2000      	movs	r0, #0
 8012934:	1b9b      	subs	r3, r3, r6
 8012936:	60a3      	str	r3, [r4, #8]
 8012938:	6823      	ldr	r3, [r4, #0]
 801293a:	4433      	add	r3, r6
 801293c:	6023      	str	r3, [r4, #0]
 801293e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012942:	462a      	mov	r2, r5
 8012944:	f000 fd4a 	bl	80133dc <_realloc_r>
 8012948:	4606      	mov	r6, r0
 801294a:	2800      	cmp	r0, #0
 801294c:	d1e0      	bne.n	8012910 <__ssputs_r+0x5c>
 801294e:	6921      	ldr	r1, [r4, #16]
 8012950:	4650      	mov	r0, sl
 8012952:	f7ff ff65 	bl	8012820 <_free_r>
 8012956:	230c      	movs	r3, #12
 8012958:	f04f 30ff 	mov.w	r0, #4294967295
 801295c:	f8ca 3000 	str.w	r3, [sl]
 8012960:	89a3      	ldrh	r3, [r4, #12]
 8012962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012966:	81a3      	strh	r3, [r4, #12]
 8012968:	e7e9      	b.n	801293e <__ssputs_r+0x8a>
	...

0801296c <_svfiprintf_r>:
 801296c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012970:	4698      	mov	r8, r3
 8012972:	898b      	ldrh	r3, [r1, #12]
 8012974:	b09d      	sub	sp, #116	@ 0x74
 8012976:	4607      	mov	r7, r0
 8012978:	061b      	lsls	r3, r3, #24
 801297a:	460d      	mov	r5, r1
 801297c:	4614      	mov	r4, r2
 801297e:	d510      	bpl.n	80129a2 <_svfiprintf_r+0x36>
 8012980:	690b      	ldr	r3, [r1, #16]
 8012982:	b973      	cbnz	r3, 80129a2 <_svfiprintf_r+0x36>
 8012984:	2140      	movs	r1, #64	@ 0x40
 8012986:	f7ff fca3 	bl	80122d0 <_malloc_r>
 801298a:	6028      	str	r0, [r5, #0]
 801298c:	6128      	str	r0, [r5, #16]
 801298e:	b930      	cbnz	r0, 801299e <_svfiprintf_r+0x32>
 8012990:	230c      	movs	r3, #12
 8012992:	603b      	str	r3, [r7, #0]
 8012994:	f04f 30ff 	mov.w	r0, #4294967295
 8012998:	b01d      	add	sp, #116	@ 0x74
 801299a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801299e:	2340      	movs	r3, #64	@ 0x40
 80129a0:	616b      	str	r3, [r5, #20]
 80129a2:	2300      	movs	r3, #0
 80129a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80129a8:	f04f 0901 	mov.w	r9, #1
 80129ac:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8012b50 <_svfiprintf_r+0x1e4>
 80129b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80129b2:	2320      	movs	r3, #32
 80129b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80129b8:	2330      	movs	r3, #48	@ 0x30
 80129ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80129be:	4623      	mov	r3, r4
 80129c0:	469a      	mov	sl, r3
 80129c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129c6:	b10a      	cbz	r2, 80129cc <_svfiprintf_r+0x60>
 80129c8:	2a25      	cmp	r2, #37	@ 0x25
 80129ca:	d1f9      	bne.n	80129c0 <_svfiprintf_r+0x54>
 80129cc:	ebba 0b04 	subs.w	fp, sl, r4
 80129d0:	d00b      	beq.n	80129ea <_svfiprintf_r+0x7e>
 80129d2:	465b      	mov	r3, fp
 80129d4:	4622      	mov	r2, r4
 80129d6:	4629      	mov	r1, r5
 80129d8:	4638      	mov	r0, r7
 80129da:	f7ff ff6b 	bl	80128b4 <__ssputs_r>
 80129de:	3001      	adds	r0, #1
 80129e0:	f000 80a7 	beq.w	8012b32 <_svfiprintf_r+0x1c6>
 80129e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80129e6:	445a      	add	r2, fp
 80129e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80129ea:	f89a 3000 	ldrb.w	r3, [sl]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	f000 809f 	beq.w	8012b32 <_svfiprintf_r+0x1c6>
 80129f4:	2300      	movs	r3, #0
 80129f6:	f04f 32ff 	mov.w	r2, #4294967295
 80129fa:	f10a 0a01 	add.w	sl, sl, #1
 80129fe:	9304      	str	r3, [sp, #16]
 8012a00:	9307      	str	r3, [sp, #28]
 8012a02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012a06:	931a      	str	r3, [sp, #104]	@ 0x68
 8012a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a0c:	4654      	mov	r4, sl
 8012a0e:	2205      	movs	r2, #5
 8012a10:	484f      	ldr	r0, [pc, #316]	@ (8012b50 <_svfiprintf_r+0x1e4>)
 8012a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a16:	f000 fcd3 	bl	80133c0 <memchr>
 8012a1a:	9a04      	ldr	r2, [sp, #16]
 8012a1c:	b9d8      	cbnz	r0, 8012a56 <_svfiprintf_r+0xea>
 8012a1e:	06d0      	lsls	r0, r2, #27
 8012a20:	bf44      	itt	mi
 8012a22:	2320      	movmi	r3, #32
 8012a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a28:	0711      	lsls	r1, r2, #28
 8012a2a:	bf44      	itt	mi
 8012a2c:	232b      	movmi	r3, #43	@ 0x2b
 8012a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a32:	f89a 3000 	ldrb.w	r3, [sl]
 8012a36:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a38:	d015      	beq.n	8012a66 <_svfiprintf_r+0xfa>
 8012a3a:	9a07      	ldr	r2, [sp, #28]
 8012a3c:	4654      	mov	r4, sl
 8012a3e:	2000      	movs	r0, #0
 8012a40:	f04f 0c0a 	mov.w	ip, #10
 8012a44:	4621      	mov	r1, r4
 8012a46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a4a:	3b30      	subs	r3, #48	@ 0x30
 8012a4c:	2b09      	cmp	r3, #9
 8012a4e:	d94b      	bls.n	8012ae8 <_svfiprintf_r+0x17c>
 8012a50:	b1b0      	cbz	r0, 8012a80 <_svfiprintf_r+0x114>
 8012a52:	9207      	str	r2, [sp, #28]
 8012a54:	e014      	b.n	8012a80 <_svfiprintf_r+0x114>
 8012a56:	eba0 0308 	sub.w	r3, r0, r8
 8012a5a:	46a2      	mov	sl, r4
 8012a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8012a60:	4313      	orrs	r3, r2
 8012a62:	9304      	str	r3, [sp, #16]
 8012a64:	e7d2      	b.n	8012a0c <_svfiprintf_r+0xa0>
 8012a66:	9b03      	ldr	r3, [sp, #12]
 8012a68:	1d19      	adds	r1, r3, #4
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	9103      	str	r1, [sp, #12]
 8012a70:	bfbb      	ittet	lt
 8012a72:	425b      	neglt	r3, r3
 8012a74:	f042 0202 	orrlt.w	r2, r2, #2
 8012a78:	9307      	strge	r3, [sp, #28]
 8012a7a:	9307      	strlt	r3, [sp, #28]
 8012a7c:	bfb8      	it	lt
 8012a7e:	9204      	strlt	r2, [sp, #16]
 8012a80:	7823      	ldrb	r3, [r4, #0]
 8012a82:	2b2e      	cmp	r3, #46	@ 0x2e
 8012a84:	d10a      	bne.n	8012a9c <_svfiprintf_r+0x130>
 8012a86:	7863      	ldrb	r3, [r4, #1]
 8012a88:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a8a:	d132      	bne.n	8012af2 <_svfiprintf_r+0x186>
 8012a8c:	9b03      	ldr	r3, [sp, #12]
 8012a8e:	3402      	adds	r4, #2
 8012a90:	1d1a      	adds	r2, r3, #4
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012a98:	9203      	str	r2, [sp, #12]
 8012a9a:	9305      	str	r3, [sp, #20]
 8012a9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012b60 <_svfiprintf_r+0x1f4>
 8012aa0:	2203      	movs	r2, #3
 8012aa2:	7821      	ldrb	r1, [r4, #0]
 8012aa4:	4650      	mov	r0, sl
 8012aa6:	f000 fc8b 	bl	80133c0 <memchr>
 8012aaa:	b138      	cbz	r0, 8012abc <_svfiprintf_r+0x150>
 8012aac:	eba0 000a 	sub.w	r0, r0, sl
 8012ab0:	2240      	movs	r2, #64	@ 0x40
 8012ab2:	9b04      	ldr	r3, [sp, #16]
 8012ab4:	3401      	adds	r4, #1
 8012ab6:	4082      	lsls	r2, r0
 8012ab8:	4313      	orrs	r3, r2
 8012aba:	9304      	str	r3, [sp, #16]
 8012abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ac0:	2206      	movs	r2, #6
 8012ac2:	4824      	ldr	r0, [pc, #144]	@ (8012b54 <_svfiprintf_r+0x1e8>)
 8012ac4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012ac8:	f000 fc7a 	bl	80133c0 <memchr>
 8012acc:	2800      	cmp	r0, #0
 8012ace:	d036      	beq.n	8012b3e <_svfiprintf_r+0x1d2>
 8012ad0:	4b21      	ldr	r3, [pc, #132]	@ (8012b58 <_svfiprintf_r+0x1ec>)
 8012ad2:	bb1b      	cbnz	r3, 8012b1c <_svfiprintf_r+0x1b0>
 8012ad4:	9b03      	ldr	r3, [sp, #12]
 8012ad6:	3307      	adds	r3, #7
 8012ad8:	f023 0307 	bic.w	r3, r3, #7
 8012adc:	3308      	adds	r3, #8
 8012ade:	9303      	str	r3, [sp, #12]
 8012ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ae2:	4433      	add	r3, r6
 8012ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ae6:	e76a      	b.n	80129be <_svfiprintf_r+0x52>
 8012ae8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012aec:	460c      	mov	r4, r1
 8012aee:	2001      	movs	r0, #1
 8012af0:	e7a8      	b.n	8012a44 <_svfiprintf_r+0xd8>
 8012af2:	2300      	movs	r3, #0
 8012af4:	3401      	adds	r4, #1
 8012af6:	f04f 0c0a 	mov.w	ip, #10
 8012afa:	4619      	mov	r1, r3
 8012afc:	9305      	str	r3, [sp, #20]
 8012afe:	4620      	mov	r0, r4
 8012b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b04:	3a30      	subs	r2, #48	@ 0x30
 8012b06:	2a09      	cmp	r2, #9
 8012b08:	d903      	bls.n	8012b12 <_svfiprintf_r+0x1a6>
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d0c6      	beq.n	8012a9c <_svfiprintf_r+0x130>
 8012b0e:	9105      	str	r1, [sp, #20]
 8012b10:	e7c4      	b.n	8012a9c <_svfiprintf_r+0x130>
 8012b12:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b16:	4604      	mov	r4, r0
 8012b18:	2301      	movs	r3, #1
 8012b1a:	e7f0      	b.n	8012afe <_svfiprintf_r+0x192>
 8012b1c:	ab03      	add	r3, sp, #12
 8012b1e:	462a      	mov	r2, r5
 8012b20:	a904      	add	r1, sp, #16
 8012b22:	4638      	mov	r0, r7
 8012b24:	9300      	str	r3, [sp, #0]
 8012b26:	4b0d      	ldr	r3, [pc, #52]	@ (8012b5c <_svfiprintf_r+0x1f0>)
 8012b28:	f3af 8000 	nop.w
 8012b2c:	1c42      	adds	r2, r0, #1
 8012b2e:	4606      	mov	r6, r0
 8012b30:	d1d6      	bne.n	8012ae0 <_svfiprintf_r+0x174>
 8012b32:	89ab      	ldrh	r3, [r5, #12]
 8012b34:	065b      	lsls	r3, r3, #25
 8012b36:	f53f af2d 	bmi.w	8012994 <_svfiprintf_r+0x28>
 8012b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b3c:	e72c      	b.n	8012998 <_svfiprintf_r+0x2c>
 8012b3e:	ab03      	add	r3, sp, #12
 8012b40:	462a      	mov	r2, r5
 8012b42:	a904      	add	r1, sp, #16
 8012b44:	4638      	mov	r0, r7
 8012b46:	9300      	str	r3, [sp, #0]
 8012b48:	4b04      	ldr	r3, [pc, #16]	@ (8012b5c <_svfiprintf_r+0x1f0>)
 8012b4a:	f000 f9bf 	bl	8012ecc <_printf_i>
 8012b4e:	e7ed      	b.n	8012b2c <_svfiprintf_r+0x1c0>
 8012b50:	08013748 	.word	0x08013748
 8012b54:	08013752 	.word	0x08013752
 8012b58:	00000000 	.word	0x00000000
 8012b5c:	080128b5 	.word	0x080128b5
 8012b60:	0801374e 	.word	0x0801374e

08012b64 <__sfputc_r>:
 8012b64:	6893      	ldr	r3, [r2, #8]
 8012b66:	3b01      	subs	r3, #1
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	6093      	str	r3, [r2, #8]
 8012b6c:	b410      	push	{r4}
 8012b6e:	da08      	bge.n	8012b82 <__sfputc_r+0x1e>
 8012b70:	6994      	ldr	r4, [r2, #24]
 8012b72:	42a3      	cmp	r3, r4
 8012b74:	db01      	blt.n	8012b7a <__sfputc_r+0x16>
 8012b76:	290a      	cmp	r1, #10
 8012b78:	d103      	bne.n	8012b82 <__sfputc_r+0x1e>
 8012b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b7e:	f000 bb71 	b.w	8013264 <__swbuf_r>
 8012b82:	6813      	ldr	r3, [r2, #0]
 8012b84:	1c58      	adds	r0, r3, #1
 8012b86:	6010      	str	r0, [r2, #0]
 8012b88:	4608      	mov	r0, r1
 8012b8a:	7019      	strb	r1, [r3, #0]
 8012b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b90:	4770      	bx	lr

08012b92 <__sfputs_r>:
 8012b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b94:	4606      	mov	r6, r0
 8012b96:	460f      	mov	r7, r1
 8012b98:	4614      	mov	r4, r2
 8012b9a:	18d5      	adds	r5, r2, r3
 8012b9c:	42ac      	cmp	r4, r5
 8012b9e:	d101      	bne.n	8012ba4 <__sfputs_r+0x12>
 8012ba0:	2000      	movs	r0, #0
 8012ba2:	e007      	b.n	8012bb4 <__sfputs_r+0x22>
 8012ba4:	463a      	mov	r2, r7
 8012ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012baa:	4630      	mov	r0, r6
 8012bac:	f7ff ffda 	bl	8012b64 <__sfputc_r>
 8012bb0:	1c43      	adds	r3, r0, #1
 8012bb2:	d1f3      	bne.n	8012b9c <__sfputs_r+0xa>
 8012bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012bb8 <_vfiprintf_r>:
 8012bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bbc:	460d      	mov	r5, r1
 8012bbe:	b09d      	sub	sp, #116	@ 0x74
 8012bc0:	4614      	mov	r4, r2
 8012bc2:	4698      	mov	r8, r3
 8012bc4:	4606      	mov	r6, r0
 8012bc6:	b118      	cbz	r0, 8012bd0 <_vfiprintf_r+0x18>
 8012bc8:	6a03      	ldr	r3, [r0, #32]
 8012bca:	b90b      	cbnz	r3, 8012bd0 <_vfiprintf_r+0x18>
 8012bcc:	f7ff fc98 	bl	8012500 <__sinit>
 8012bd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012bd2:	07d9      	lsls	r1, r3, #31
 8012bd4:	d405      	bmi.n	8012be2 <_vfiprintf_r+0x2a>
 8012bd6:	89ab      	ldrh	r3, [r5, #12]
 8012bd8:	059a      	lsls	r2, r3, #22
 8012bda:	d402      	bmi.n	8012be2 <_vfiprintf_r+0x2a>
 8012bdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012bde:	f7ff fe10 	bl	8012802 <__retarget_lock_acquire_recursive>
 8012be2:	89ab      	ldrh	r3, [r5, #12]
 8012be4:	071b      	lsls	r3, r3, #28
 8012be6:	d501      	bpl.n	8012bec <_vfiprintf_r+0x34>
 8012be8:	692b      	ldr	r3, [r5, #16]
 8012bea:	b99b      	cbnz	r3, 8012c14 <_vfiprintf_r+0x5c>
 8012bec:	4629      	mov	r1, r5
 8012bee:	4630      	mov	r0, r6
 8012bf0:	f000 fb76 	bl	80132e0 <__swsetup_r>
 8012bf4:	b170      	cbz	r0, 8012c14 <_vfiprintf_r+0x5c>
 8012bf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012bf8:	07dc      	lsls	r4, r3, #31
 8012bfa:	d504      	bpl.n	8012c06 <_vfiprintf_r+0x4e>
 8012bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8012c00:	b01d      	add	sp, #116	@ 0x74
 8012c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c06:	89ab      	ldrh	r3, [r5, #12]
 8012c08:	0598      	lsls	r0, r3, #22
 8012c0a:	d4f7      	bmi.n	8012bfc <_vfiprintf_r+0x44>
 8012c0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012c0e:	f7ff fdf9 	bl	8012804 <__retarget_lock_release_recursive>
 8012c12:	e7f3      	b.n	8012bfc <_vfiprintf_r+0x44>
 8012c14:	2300      	movs	r3, #0
 8012c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c1a:	f04f 0901 	mov.w	r9, #1
 8012c1e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8012dd4 <_vfiprintf_r+0x21c>
 8012c22:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c24:	2320      	movs	r3, #32
 8012c26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012c2a:	2330      	movs	r3, #48	@ 0x30
 8012c2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c30:	4623      	mov	r3, r4
 8012c32:	469a      	mov	sl, r3
 8012c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c38:	b10a      	cbz	r2, 8012c3e <_vfiprintf_r+0x86>
 8012c3a:	2a25      	cmp	r2, #37	@ 0x25
 8012c3c:	d1f9      	bne.n	8012c32 <_vfiprintf_r+0x7a>
 8012c3e:	ebba 0b04 	subs.w	fp, sl, r4
 8012c42:	d00b      	beq.n	8012c5c <_vfiprintf_r+0xa4>
 8012c44:	465b      	mov	r3, fp
 8012c46:	4622      	mov	r2, r4
 8012c48:	4629      	mov	r1, r5
 8012c4a:	4630      	mov	r0, r6
 8012c4c:	f7ff ffa1 	bl	8012b92 <__sfputs_r>
 8012c50:	3001      	adds	r0, #1
 8012c52:	f000 80a7 	beq.w	8012da4 <_vfiprintf_r+0x1ec>
 8012c56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c58:	445a      	add	r2, fp
 8012c5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	f000 809f 	beq.w	8012da4 <_vfiprintf_r+0x1ec>
 8012c66:	2300      	movs	r3, #0
 8012c68:	f04f 32ff 	mov.w	r2, #4294967295
 8012c6c:	f10a 0a01 	add.w	sl, sl, #1
 8012c70:	9304      	str	r3, [sp, #16]
 8012c72:	9307      	str	r3, [sp, #28]
 8012c74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012c78:	931a      	str	r3, [sp, #104]	@ 0x68
 8012c7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c7e:	4654      	mov	r4, sl
 8012c80:	2205      	movs	r2, #5
 8012c82:	4854      	ldr	r0, [pc, #336]	@ (8012dd4 <_vfiprintf_r+0x21c>)
 8012c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c88:	f000 fb9a 	bl	80133c0 <memchr>
 8012c8c:	9a04      	ldr	r2, [sp, #16]
 8012c8e:	b9d8      	cbnz	r0, 8012cc8 <_vfiprintf_r+0x110>
 8012c90:	06d1      	lsls	r1, r2, #27
 8012c92:	bf44      	itt	mi
 8012c94:	2320      	movmi	r3, #32
 8012c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c9a:	0713      	lsls	r3, r2, #28
 8012c9c:	bf44      	itt	mi
 8012c9e:	232b      	movmi	r3, #43	@ 0x2b
 8012ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8012ca8:	2b2a      	cmp	r3, #42	@ 0x2a
 8012caa:	d015      	beq.n	8012cd8 <_vfiprintf_r+0x120>
 8012cac:	9a07      	ldr	r2, [sp, #28]
 8012cae:	4654      	mov	r4, sl
 8012cb0:	2000      	movs	r0, #0
 8012cb2:	f04f 0c0a 	mov.w	ip, #10
 8012cb6:	4621      	mov	r1, r4
 8012cb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cbc:	3b30      	subs	r3, #48	@ 0x30
 8012cbe:	2b09      	cmp	r3, #9
 8012cc0:	d94b      	bls.n	8012d5a <_vfiprintf_r+0x1a2>
 8012cc2:	b1b0      	cbz	r0, 8012cf2 <_vfiprintf_r+0x13a>
 8012cc4:	9207      	str	r2, [sp, #28]
 8012cc6:	e014      	b.n	8012cf2 <_vfiprintf_r+0x13a>
 8012cc8:	eba0 0308 	sub.w	r3, r0, r8
 8012ccc:	46a2      	mov	sl, r4
 8012cce:	fa09 f303 	lsl.w	r3, r9, r3
 8012cd2:	4313      	orrs	r3, r2
 8012cd4:	9304      	str	r3, [sp, #16]
 8012cd6:	e7d2      	b.n	8012c7e <_vfiprintf_r+0xc6>
 8012cd8:	9b03      	ldr	r3, [sp, #12]
 8012cda:	1d19      	adds	r1, r3, #4
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	9103      	str	r1, [sp, #12]
 8012ce2:	bfbb      	ittet	lt
 8012ce4:	425b      	neglt	r3, r3
 8012ce6:	f042 0202 	orrlt.w	r2, r2, #2
 8012cea:	9307      	strge	r3, [sp, #28]
 8012cec:	9307      	strlt	r3, [sp, #28]
 8012cee:	bfb8      	it	lt
 8012cf0:	9204      	strlt	r2, [sp, #16]
 8012cf2:	7823      	ldrb	r3, [r4, #0]
 8012cf4:	2b2e      	cmp	r3, #46	@ 0x2e
 8012cf6:	d10a      	bne.n	8012d0e <_vfiprintf_r+0x156>
 8012cf8:	7863      	ldrb	r3, [r4, #1]
 8012cfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8012cfc:	d132      	bne.n	8012d64 <_vfiprintf_r+0x1ac>
 8012cfe:	9b03      	ldr	r3, [sp, #12]
 8012d00:	3402      	adds	r4, #2
 8012d02:	1d1a      	adds	r2, r3, #4
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012d0a:	9203      	str	r2, [sp, #12]
 8012d0c:	9305      	str	r3, [sp, #20]
 8012d0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012de4 <_vfiprintf_r+0x22c>
 8012d12:	2203      	movs	r2, #3
 8012d14:	7821      	ldrb	r1, [r4, #0]
 8012d16:	4650      	mov	r0, sl
 8012d18:	f000 fb52 	bl	80133c0 <memchr>
 8012d1c:	b138      	cbz	r0, 8012d2e <_vfiprintf_r+0x176>
 8012d1e:	eba0 000a 	sub.w	r0, r0, sl
 8012d22:	2240      	movs	r2, #64	@ 0x40
 8012d24:	9b04      	ldr	r3, [sp, #16]
 8012d26:	3401      	adds	r4, #1
 8012d28:	4082      	lsls	r2, r0
 8012d2a:	4313      	orrs	r3, r2
 8012d2c:	9304      	str	r3, [sp, #16]
 8012d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d32:	2206      	movs	r2, #6
 8012d34:	4828      	ldr	r0, [pc, #160]	@ (8012dd8 <_vfiprintf_r+0x220>)
 8012d36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012d3a:	f000 fb41 	bl	80133c0 <memchr>
 8012d3e:	2800      	cmp	r0, #0
 8012d40:	d03f      	beq.n	8012dc2 <_vfiprintf_r+0x20a>
 8012d42:	4b26      	ldr	r3, [pc, #152]	@ (8012ddc <_vfiprintf_r+0x224>)
 8012d44:	bb1b      	cbnz	r3, 8012d8e <_vfiprintf_r+0x1d6>
 8012d46:	9b03      	ldr	r3, [sp, #12]
 8012d48:	3307      	adds	r3, #7
 8012d4a:	f023 0307 	bic.w	r3, r3, #7
 8012d4e:	3308      	adds	r3, #8
 8012d50:	9303      	str	r3, [sp, #12]
 8012d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d54:	443b      	add	r3, r7
 8012d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d58:	e76a      	b.n	8012c30 <_vfiprintf_r+0x78>
 8012d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d5e:	460c      	mov	r4, r1
 8012d60:	2001      	movs	r0, #1
 8012d62:	e7a8      	b.n	8012cb6 <_vfiprintf_r+0xfe>
 8012d64:	2300      	movs	r3, #0
 8012d66:	3401      	adds	r4, #1
 8012d68:	f04f 0c0a 	mov.w	ip, #10
 8012d6c:	4619      	mov	r1, r3
 8012d6e:	9305      	str	r3, [sp, #20]
 8012d70:	4620      	mov	r0, r4
 8012d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d76:	3a30      	subs	r2, #48	@ 0x30
 8012d78:	2a09      	cmp	r2, #9
 8012d7a:	d903      	bls.n	8012d84 <_vfiprintf_r+0x1cc>
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d0c6      	beq.n	8012d0e <_vfiprintf_r+0x156>
 8012d80:	9105      	str	r1, [sp, #20]
 8012d82:	e7c4      	b.n	8012d0e <_vfiprintf_r+0x156>
 8012d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d88:	4604      	mov	r4, r0
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	e7f0      	b.n	8012d70 <_vfiprintf_r+0x1b8>
 8012d8e:	ab03      	add	r3, sp, #12
 8012d90:	462a      	mov	r2, r5
 8012d92:	a904      	add	r1, sp, #16
 8012d94:	4630      	mov	r0, r6
 8012d96:	9300      	str	r3, [sp, #0]
 8012d98:	4b11      	ldr	r3, [pc, #68]	@ (8012de0 <_vfiprintf_r+0x228>)
 8012d9a:	f3af 8000 	nop.w
 8012d9e:	4607      	mov	r7, r0
 8012da0:	1c78      	adds	r0, r7, #1
 8012da2:	d1d6      	bne.n	8012d52 <_vfiprintf_r+0x19a>
 8012da4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012da6:	07d9      	lsls	r1, r3, #31
 8012da8:	d405      	bmi.n	8012db6 <_vfiprintf_r+0x1fe>
 8012daa:	89ab      	ldrh	r3, [r5, #12]
 8012dac:	059a      	lsls	r2, r3, #22
 8012dae:	d402      	bmi.n	8012db6 <_vfiprintf_r+0x1fe>
 8012db0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012db2:	f7ff fd27 	bl	8012804 <__retarget_lock_release_recursive>
 8012db6:	89ab      	ldrh	r3, [r5, #12]
 8012db8:	065b      	lsls	r3, r3, #25
 8012dba:	f53f af1f 	bmi.w	8012bfc <_vfiprintf_r+0x44>
 8012dbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012dc0:	e71e      	b.n	8012c00 <_vfiprintf_r+0x48>
 8012dc2:	ab03      	add	r3, sp, #12
 8012dc4:	462a      	mov	r2, r5
 8012dc6:	a904      	add	r1, sp, #16
 8012dc8:	4630      	mov	r0, r6
 8012dca:	9300      	str	r3, [sp, #0]
 8012dcc:	4b04      	ldr	r3, [pc, #16]	@ (8012de0 <_vfiprintf_r+0x228>)
 8012dce:	f000 f87d 	bl	8012ecc <_printf_i>
 8012dd2:	e7e4      	b.n	8012d9e <_vfiprintf_r+0x1e6>
 8012dd4:	08013748 	.word	0x08013748
 8012dd8:	08013752 	.word	0x08013752
 8012ddc:	00000000 	.word	0x00000000
 8012de0:	08012b93 	.word	0x08012b93
 8012de4:	0801374e 	.word	0x0801374e

08012de8 <_printf_common>:
 8012de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dec:	4616      	mov	r6, r2
 8012dee:	4698      	mov	r8, r3
 8012df0:	688a      	ldr	r2, [r1, #8]
 8012df2:	4607      	mov	r7, r0
 8012df4:	690b      	ldr	r3, [r1, #16]
 8012df6:	460c      	mov	r4, r1
 8012df8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012dfc:	4293      	cmp	r3, r2
 8012dfe:	bfb8      	it	lt
 8012e00:	4613      	movlt	r3, r2
 8012e02:	6033      	str	r3, [r6, #0]
 8012e04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012e08:	b10a      	cbz	r2, 8012e0e <_printf_common+0x26>
 8012e0a:	3301      	adds	r3, #1
 8012e0c:	6033      	str	r3, [r6, #0]
 8012e0e:	6823      	ldr	r3, [r4, #0]
 8012e10:	0699      	lsls	r1, r3, #26
 8012e12:	bf42      	ittt	mi
 8012e14:	6833      	ldrmi	r3, [r6, #0]
 8012e16:	3302      	addmi	r3, #2
 8012e18:	6033      	strmi	r3, [r6, #0]
 8012e1a:	6825      	ldr	r5, [r4, #0]
 8012e1c:	f015 0506 	ands.w	r5, r5, #6
 8012e20:	d106      	bne.n	8012e30 <_printf_common+0x48>
 8012e22:	f104 0a19 	add.w	sl, r4, #25
 8012e26:	68e3      	ldr	r3, [r4, #12]
 8012e28:	6832      	ldr	r2, [r6, #0]
 8012e2a:	1a9b      	subs	r3, r3, r2
 8012e2c:	42ab      	cmp	r3, r5
 8012e2e:	dc2b      	bgt.n	8012e88 <_printf_common+0xa0>
 8012e30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012e34:	6822      	ldr	r2, [r4, #0]
 8012e36:	3b00      	subs	r3, #0
 8012e38:	bf18      	it	ne
 8012e3a:	2301      	movne	r3, #1
 8012e3c:	0692      	lsls	r2, r2, #26
 8012e3e:	d430      	bmi.n	8012ea2 <_printf_common+0xba>
 8012e40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012e44:	4641      	mov	r1, r8
 8012e46:	4638      	mov	r0, r7
 8012e48:	47c8      	blx	r9
 8012e4a:	3001      	adds	r0, #1
 8012e4c:	d023      	beq.n	8012e96 <_printf_common+0xae>
 8012e4e:	6823      	ldr	r3, [r4, #0]
 8012e50:	341a      	adds	r4, #26
 8012e52:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8012e56:	f003 0306 	and.w	r3, r3, #6
 8012e5a:	2b04      	cmp	r3, #4
 8012e5c:	bf0a      	itet	eq
 8012e5e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8012e62:	2500      	movne	r5, #0
 8012e64:	6833      	ldreq	r3, [r6, #0]
 8012e66:	f04f 0600 	mov.w	r6, #0
 8012e6a:	bf08      	it	eq
 8012e6c:	1aed      	subeq	r5, r5, r3
 8012e6e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8012e72:	bf08      	it	eq
 8012e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e78:	4293      	cmp	r3, r2
 8012e7a:	bfc4      	itt	gt
 8012e7c:	1a9b      	subgt	r3, r3, r2
 8012e7e:	18ed      	addgt	r5, r5, r3
 8012e80:	42b5      	cmp	r5, r6
 8012e82:	d11a      	bne.n	8012eba <_printf_common+0xd2>
 8012e84:	2000      	movs	r0, #0
 8012e86:	e008      	b.n	8012e9a <_printf_common+0xb2>
 8012e88:	2301      	movs	r3, #1
 8012e8a:	4652      	mov	r2, sl
 8012e8c:	4641      	mov	r1, r8
 8012e8e:	4638      	mov	r0, r7
 8012e90:	47c8      	blx	r9
 8012e92:	3001      	adds	r0, #1
 8012e94:	d103      	bne.n	8012e9e <_printf_common+0xb6>
 8012e96:	f04f 30ff 	mov.w	r0, #4294967295
 8012e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e9e:	3501      	adds	r5, #1
 8012ea0:	e7c1      	b.n	8012e26 <_printf_common+0x3e>
 8012ea2:	18e1      	adds	r1, r4, r3
 8012ea4:	1c5a      	adds	r2, r3, #1
 8012ea6:	2030      	movs	r0, #48	@ 0x30
 8012ea8:	3302      	adds	r3, #2
 8012eaa:	4422      	add	r2, r4
 8012eac:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012eb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012eb8:	e7c2      	b.n	8012e40 <_printf_common+0x58>
 8012eba:	2301      	movs	r3, #1
 8012ebc:	4622      	mov	r2, r4
 8012ebe:	4641      	mov	r1, r8
 8012ec0:	4638      	mov	r0, r7
 8012ec2:	47c8      	blx	r9
 8012ec4:	3001      	adds	r0, #1
 8012ec6:	d0e6      	beq.n	8012e96 <_printf_common+0xae>
 8012ec8:	3601      	adds	r6, #1
 8012eca:	e7d9      	b.n	8012e80 <_printf_common+0x98>

08012ecc <_printf_i>:
 8012ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ed0:	7e0f      	ldrb	r7, [r1, #24]
 8012ed2:	4691      	mov	r9, r2
 8012ed4:	4680      	mov	r8, r0
 8012ed6:	460c      	mov	r4, r1
 8012ed8:	2f78      	cmp	r7, #120	@ 0x78
 8012eda:	469a      	mov	sl, r3
 8012edc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012ede:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012ee2:	d807      	bhi.n	8012ef4 <_printf_i+0x28>
 8012ee4:	2f62      	cmp	r7, #98	@ 0x62
 8012ee6:	d80a      	bhi.n	8012efe <_printf_i+0x32>
 8012ee8:	2f00      	cmp	r7, #0
 8012eea:	f000 80d2 	beq.w	8013092 <_printf_i+0x1c6>
 8012eee:	2f58      	cmp	r7, #88	@ 0x58
 8012ef0:	f000 80b9 	beq.w	8013066 <_printf_i+0x19a>
 8012ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012ef8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012efc:	e03a      	b.n	8012f74 <_printf_i+0xa8>
 8012efe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012f02:	2b15      	cmp	r3, #21
 8012f04:	d8f6      	bhi.n	8012ef4 <_printf_i+0x28>
 8012f06:	a101      	add	r1, pc, #4	@ (adr r1, 8012f0c <_printf_i+0x40>)
 8012f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012f0c:	08012f65 	.word	0x08012f65
 8012f10:	08012f79 	.word	0x08012f79
 8012f14:	08012ef5 	.word	0x08012ef5
 8012f18:	08012ef5 	.word	0x08012ef5
 8012f1c:	08012ef5 	.word	0x08012ef5
 8012f20:	08012ef5 	.word	0x08012ef5
 8012f24:	08012f79 	.word	0x08012f79
 8012f28:	08012ef5 	.word	0x08012ef5
 8012f2c:	08012ef5 	.word	0x08012ef5
 8012f30:	08012ef5 	.word	0x08012ef5
 8012f34:	08012ef5 	.word	0x08012ef5
 8012f38:	08013079 	.word	0x08013079
 8012f3c:	08012fa3 	.word	0x08012fa3
 8012f40:	08013033 	.word	0x08013033
 8012f44:	08012ef5 	.word	0x08012ef5
 8012f48:	08012ef5 	.word	0x08012ef5
 8012f4c:	0801309b 	.word	0x0801309b
 8012f50:	08012ef5 	.word	0x08012ef5
 8012f54:	08012fa3 	.word	0x08012fa3
 8012f58:	08012ef5 	.word	0x08012ef5
 8012f5c:	08012ef5 	.word	0x08012ef5
 8012f60:	0801303b 	.word	0x0801303b
 8012f64:	6833      	ldr	r3, [r6, #0]
 8012f66:	1d1a      	adds	r2, r3, #4
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	6032      	str	r2, [r6, #0]
 8012f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012f70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012f74:	2301      	movs	r3, #1
 8012f76:	e09d      	b.n	80130b4 <_printf_i+0x1e8>
 8012f78:	6833      	ldr	r3, [r6, #0]
 8012f7a:	6820      	ldr	r0, [r4, #0]
 8012f7c:	1d19      	adds	r1, r3, #4
 8012f7e:	6031      	str	r1, [r6, #0]
 8012f80:	0606      	lsls	r6, r0, #24
 8012f82:	d501      	bpl.n	8012f88 <_printf_i+0xbc>
 8012f84:	681d      	ldr	r5, [r3, #0]
 8012f86:	e003      	b.n	8012f90 <_printf_i+0xc4>
 8012f88:	0645      	lsls	r5, r0, #25
 8012f8a:	d5fb      	bpl.n	8012f84 <_printf_i+0xb8>
 8012f8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012f90:	2d00      	cmp	r5, #0
 8012f92:	da03      	bge.n	8012f9c <_printf_i+0xd0>
 8012f94:	232d      	movs	r3, #45	@ 0x2d
 8012f96:	426d      	negs	r5, r5
 8012f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012f9c:	4859      	ldr	r0, [pc, #356]	@ (8013104 <_printf_i+0x238>)
 8012f9e:	230a      	movs	r3, #10
 8012fa0:	e011      	b.n	8012fc6 <_printf_i+0xfa>
 8012fa2:	6821      	ldr	r1, [r4, #0]
 8012fa4:	6833      	ldr	r3, [r6, #0]
 8012fa6:	0608      	lsls	r0, r1, #24
 8012fa8:	f853 5b04 	ldr.w	r5, [r3], #4
 8012fac:	d402      	bmi.n	8012fb4 <_printf_i+0xe8>
 8012fae:	0649      	lsls	r1, r1, #25
 8012fb0:	bf48      	it	mi
 8012fb2:	b2ad      	uxthmi	r5, r5
 8012fb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8012fb6:	6033      	str	r3, [r6, #0]
 8012fb8:	4852      	ldr	r0, [pc, #328]	@ (8013104 <_printf_i+0x238>)
 8012fba:	bf14      	ite	ne
 8012fbc:	230a      	movne	r3, #10
 8012fbe:	2308      	moveq	r3, #8
 8012fc0:	2100      	movs	r1, #0
 8012fc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012fc6:	6866      	ldr	r6, [r4, #4]
 8012fc8:	2e00      	cmp	r6, #0
 8012fca:	60a6      	str	r6, [r4, #8]
 8012fcc:	bfa2      	ittt	ge
 8012fce:	6821      	ldrge	r1, [r4, #0]
 8012fd0:	f021 0104 	bicge.w	r1, r1, #4
 8012fd4:	6021      	strge	r1, [r4, #0]
 8012fd6:	b90d      	cbnz	r5, 8012fdc <_printf_i+0x110>
 8012fd8:	2e00      	cmp	r6, #0
 8012fda:	d04b      	beq.n	8013074 <_printf_i+0x1a8>
 8012fdc:	4616      	mov	r6, r2
 8012fde:	fbb5 f1f3 	udiv	r1, r5, r3
 8012fe2:	fb03 5711 	mls	r7, r3, r1, r5
 8012fe6:	5dc7      	ldrb	r7, [r0, r7]
 8012fe8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012fec:	462f      	mov	r7, r5
 8012fee:	460d      	mov	r5, r1
 8012ff0:	42bb      	cmp	r3, r7
 8012ff2:	d9f4      	bls.n	8012fde <_printf_i+0x112>
 8012ff4:	2b08      	cmp	r3, #8
 8012ff6:	d10b      	bne.n	8013010 <_printf_i+0x144>
 8012ff8:	6823      	ldr	r3, [r4, #0]
 8012ffa:	07df      	lsls	r7, r3, #31
 8012ffc:	d508      	bpl.n	8013010 <_printf_i+0x144>
 8012ffe:	6923      	ldr	r3, [r4, #16]
 8013000:	6861      	ldr	r1, [r4, #4]
 8013002:	4299      	cmp	r1, r3
 8013004:	bfde      	ittt	le
 8013006:	2330      	movle	r3, #48	@ 0x30
 8013008:	f806 3c01 	strble.w	r3, [r6, #-1]
 801300c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013010:	1b92      	subs	r2, r2, r6
 8013012:	6122      	str	r2, [r4, #16]
 8013014:	464b      	mov	r3, r9
 8013016:	aa03      	add	r2, sp, #12
 8013018:	4621      	mov	r1, r4
 801301a:	4640      	mov	r0, r8
 801301c:	f8cd a000 	str.w	sl, [sp]
 8013020:	f7ff fee2 	bl	8012de8 <_printf_common>
 8013024:	3001      	adds	r0, #1
 8013026:	d14a      	bne.n	80130be <_printf_i+0x1f2>
 8013028:	f04f 30ff 	mov.w	r0, #4294967295
 801302c:	b004      	add	sp, #16
 801302e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013032:	6823      	ldr	r3, [r4, #0]
 8013034:	f043 0320 	orr.w	r3, r3, #32
 8013038:	6023      	str	r3, [r4, #0]
 801303a:	2778      	movs	r7, #120	@ 0x78
 801303c:	4832      	ldr	r0, [pc, #200]	@ (8013108 <_printf_i+0x23c>)
 801303e:	6823      	ldr	r3, [r4, #0]
 8013040:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013044:	061f      	lsls	r7, r3, #24
 8013046:	6831      	ldr	r1, [r6, #0]
 8013048:	f851 5b04 	ldr.w	r5, [r1], #4
 801304c:	d402      	bmi.n	8013054 <_printf_i+0x188>
 801304e:	065f      	lsls	r7, r3, #25
 8013050:	bf48      	it	mi
 8013052:	b2ad      	uxthmi	r5, r5
 8013054:	6031      	str	r1, [r6, #0]
 8013056:	07d9      	lsls	r1, r3, #31
 8013058:	bf44      	itt	mi
 801305a:	f043 0320 	orrmi.w	r3, r3, #32
 801305e:	6023      	strmi	r3, [r4, #0]
 8013060:	b11d      	cbz	r5, 801306a <_printf_i+0x19e>
 8013062:	2310      	movs	r3, #16
 8013064:	e7ac      	b.n	8012fc0 <_printf_i+0xf4>
 8013066:	4827      	ldr	r0, [pc, #156]	@ (8013104 <_printf_i+0x238>)
 8013068:	e7e9      	b.n	801303e <_printf_i+0x172>
 801306a:	6823      	ldr	r3, [r4, #0]
 801306c:	f023 0320 	bic.w	r3, r3, #32
 8013070:	6023      	str	r3, [r4, #0]
 8013072:	e7f6      	b.n	8013062 <_printf_i+0x196>
 8013074:	4616      	mov	r6, r2
 8013076:	e7bd      	b.n	8012ff4 <_printf_i+0x128>
 8013078:	6833      	ldr	r3, [r6, #0]
 801307a:	6825      	ldr	r5, [r4, #0]
 801307c:	1d18      	adds	r0, r3, #4
 801307e:	6961      	ldr	r1, [r4, #20]
 8013080:	6030      	str	r0, [r6, #0]
 8013082:	062e      	lsls	r6, r5, #24
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	d501      	bpl.n	801308c <_printf_i+0x1c0>
 8013088:	6019      	str	r1, [r3, #0]
 801308a:	e002      	b.n	8013092 <_printf_i+0x1c6>
 801308c:	0668      	lsls	r0, r5, #25
 801308e:	d5fb      	bpl.n	8013088 <_printf_i+0x1bc>
 8013090:	8019      	strh	r1, [r3, #0]
 8013092:	2300      	movs	r3, #0
 8013094:	4616      	mov	r6, r2
 8013096:	6123      	str	r3, [r4, #16]
 8013098:	e7bc      	b.n	8013014 <_printf_i+0x148>
 801309a:	6833      	ldr	r3, [r6, #0]
 801309c:	2100      	movs	r1, #0
 801309e:	1d1a      	adds	r2, r3, #4
 80130a0:	6032      	str	r2, [r6, #0]
 80130a2:	681e      	ldr	r6, [r3, #0]
 80130a4:	6862      	ldr	r2, [r4, #4]
 80130a6:	4630      	mov	r0, r6
 80130a8:	f000 f98a 	bl	80133c0 <memchr>
 80130ac:	b108      	cbz	r0, 80130b2 <_printf_i+0x1e6>
 80130ae:	1b80      	subs	r0, r0, r6
 80130b0:	6060      	str	r0, [r4, #4]
 80130b2:	6863      	ldr	r3, [r4, #4]
 80130b4:	6123      	str	r3, [r4, #16]
 80130b6:	2300      	movs	r3, #0
 80130b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80130bc:	e7aa      	b.n	8013014 <_printf_i+0x148>
 80130be:	6923      	ldr	r3, [r4, #16]
 80130c0:	4632      	mov	r2, r6
 80130c2:	4649      	mov	r1, r9
 80130c4:	4640      	mov	r0, r8
 80130c6:	47d0      	blx	sl
 80130c8:	3001      	adds	r0, #1
 80130ca:	d0ad      	beq.n	8013028 <_printf_i+0x15c>
 80130cc:	6823      	ldr	r3, [r4, #0]
 80130ce:	079b      	lsls	r3, r3, #30
 80130d0:	d413      	bmi.n	80130fa <_printf_i+0x22e>
 80130d2:	68e0      	ldr	r0, [r4, #12]
 80130d4:	9b03      	ldr	r3, [sp, #12]
 80130d6:	4298      	cmp	r0, r3
 80130d8:	bfb8      	it	lt
 80130da:	4618      	movlt	r0, r3
 80130dc:	e7a6      	b.n	801302c <_printf_i+0x160>
 80130de:	2301      	movs	r3, #1
 80130e0:	4632      	mov	r2, r6
 80130e2:	4649      	mov	r1, r9
 80130e4:	4640      	mov	r0, r8
 80130e6:	47d0      	blx	sl
 80130e8:	3001      	adds	r0, #1
 80130ea:	d09d      	beq.n	8013028 <_printf_i+0x15c>
 80130ec:	3501      	adds	r5, #1
 80130ee:	68e3      	ldr	r3, [r4, #12]
 80130f0:	9903      	ldr	r1, [sp, #12]
 80130f2:	1a5b      	subs	r3, r3, r1
 80130f4:	42ab      	cmp	r3, r5
 80130f6:	dcf2      	bgt.n	80130de <_printf_i+0x212>
 80130f8:	e7eb      	b.n	80130d2 <_printf_i+0x206>
 80130fa:	2500      	movs	r5, #0
 80130fc:	f104 0619 	add.w	r6, r4, #25
 8013100:	e7f5      	b.n	80130ee <_printf_i+0x222>
 8013102:	bf00      	nop
 8013104:	08013759 	.word	0x08013759
 8013108:	0801376a 	.word	0x0801376a

0801310c <__sflush_r>:
 801310c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013114:	0716      	lsls	r6, r2, #28
 8013116:	4605      	mov	r5, r0
 8013118:	460c      	mov	r4, r1
 801311a:	d454      	bmi.n	80131c6 <__sflush_r+0xba>
 801311c:	684b      	ldr	r3, [r1, #4]
 801311e:	2b00      	cmp	r3, #0
 8013120:	dc02      	bgt.n	8013128 <__sflush_r+0x1c>
 8013122:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013124:	2b00      	cmp	r3, #0
 8013126:	dd48      	ble.n	80131ba <__sflush_r+0xae>
 8013128:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801312a:	2e00      	cmp	r6, #0
 801312c:	d045      	beq.n	80131ba <__sflush_r+0xae>
 801312e:	2300      	movs	r3, #0
 8013130:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013134:	682f      	ldr	r7, [r5, #0]
 8013136:	6a21      	ldr	r1, [r4, #32]
 8013138:	602b      	str	r3, [r5, #0]
 801313a:	d030      	beq.n	801319e <__sflush_r+0x92>
 801313c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801313e:	89a3      	ldrh	r3, [r4, #12]
 8013140:	0759      	lsls	r1, r3, #29
 8013142:	d505      	bpl.n	8013150 <__sflush_r+0x44>
 8013144:	6863      	ldr	r3, [r4, #4]
 8013146:	1ad2      	subs	r2, r2, r3
 8013148:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801314a:	b10b      	cbz	r3, 8013150 <__sflush_r+0x44>
 801314c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801314e:	1ad2      	subs	r2, r2, r3
 8013150:	2300      	movs	r3, #0
 8013152:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013154:	6a21      	ldr	r1, [r4, #32]
 8013156:	4628      	mov	r0, r5
 8013158:	47b0      	blx	r6
 801315a:	1c43      	adds	r3, r0, #1
 801315c:	89a3      	ldrh	r3, [r4, #12]
 801315e:	d106      	bne.n	801316e <__sflush_r+0x62>
 8013160:	6829      	ldr	r1, [r5, #0]
 8013162:	291d      	cmp	r1, #29
 8013164:	d82b      	bhi.n	80131be <__sflush_r+0xb2>
 8013166:	4a2a      	ldr	r2, [pc, #168]	@ (8013210 <__sflush_r+0x104>)
 8013168:	410a      	asrs	r2, r1
 801316a:	07d6      	lsls	r6, r2, #31
 801316c:	d427      	bmi.n	80131be <__sflush_r+0xb2>
 801316e:	2200      	movs	r2, #0
 8013170:	04d9      	lsls	r1, r3, #19
 8013172:	6062      	str	r2, [r4, #4]
 8013174:	6922      	ldr	r2, [r4, #16]
 8013176:	6022      	str	r2, [r4, #0]
 8013178:	d504      	bpl.n	8013184 <__sflush_r+0x78>
 801317a:	1c42      	adds	r2, r0, #1
 801317c:	d101      	bne.n	8013182 <__sflush_r+0x76>
 801317e:	682b      	ldr	r3, [r5, #0]
 8013180:	b903      	cbnz	r3, 8013184 <__sflush_r+0x78>
 8013182:	6560      	str	r0, [r4, #84]	@ 0x54
 8013184:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013186:	602f      	str	r7, [r5, #0]
 8013188:	b1b9      	cbz	r1, 80131ba <__sflush_r+0xae>
 801318a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801318e:	4299      	cmp	r1, r3
 8013190:	d002      	beq.n	8013198 <__sflush_r+0x8c>
 8013192:	4628      	mov	r0, r5
 8013194:	f7ff fb44 	bl	8012820 <_free_r>
 8013198:	2300      	movs	r3, #0
 801319a:	6363      	str	r3, [r4, #52]	@ 0x34
 801319c:	e00d      	b.n	80131ba <__sflush_r+0xae>
 801319e:	2301      	movs	r3, #1
 80131a0:	4628      	mov	r0, r5
 80131a2:	47b0      	blx	r6
 80131a4:	4602      	mov	r2, r0
 80131a6:	1c50      	adds	r0, r2, #1
 80131a8:	d1c9      	bne.n	801313e <__sflush_r+0x32>
 80131aa:	682b      	ldr	r3, [r5, #0]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d0c6      	beq.n	801313e <__sflush_r+0x32>
 80131b0:	2b1d      	cmp	r3, #29
 80131b2:	d001      	beq.n	80131b8 <__sflush_r+0xac>
 80131b4:	2b16      	cmp	r3, #22
 80131b6:	d11d      	bne.n	80131f4 <__sflush_r+0xe8>
 80131b8:	602f      	str	r7, [r5, #0]
 80131ba:	2000      	movs	r0, #0
 80131bc:	e021      	b.n	8013202 <__sflush_r+0xf6>
 80131be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80131c2:	b21b      	sxth	r3, r3
 80131c4:	e01a      	b.n	80131fc <__sflush_r+0xf0>
 80131c6:	690f      	ldr	r7, [r1, #16]
 80131c8:	2f00      	cmp	r7, #0
 80131ca:	d0f6      	beq.n	80131ba <__sflush_r+0xae>
 80131cc:	0793      	lsls	r3, r2, #30
 80131ce:	680e      	ldr	r6, [r1, #0]
 80131d0:	600f      	str	r7, [r1, #0]
 80131d2:	bf0c      	ite	eq
 80131d4:	694b      	ldreq	r3, [r1, #20]
 80131d6:	2300      	movne	r3, #0
 80131d8:	eba6 0807 	sub.w	r8, r6, r7
 80131dc:	608b      	str	r3, [r1, #8]
 80131de:	f1b8 0f00 	cmp.w	r8, #0
 80131e2:	ddea      	ble.n	80131ba <__sflush_r+0xae>
 80131e4:	4643      	mov	r3, r8
 80131e6:	463a      	mov	r2, r7
 80131e8:	6a21      	ldr	r1, [r4, #32]
 80131ea:	4628      	mov	r0, r5
 80131ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80131ee:	47b0      	blx	r6
 80131f0:	2800      	cmp	r0, #0
 80131f2:	dc08      	bgt.n	8013206 <__sflush_r+0xfa>
 80131f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80131fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013200:	81a3      	strh	r3, [r4, #12]
 8013202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013206:	4407      	add	r7, r0
 8013208:	eba8 0800 	sub.w	r8, r8, r0
 801320c:	e7e7      	b.n	80131de <__sflush_r+0xd2>
 801320e:	bf00      	nop
 8013210:	dfbffffe 	.word	0xdfbffffe

08013214 <_fflush_r>:
 8013214:	b538      	push	{r3, r4, r5, lr}
 8013216:	690b      	ldr	r3, [r1, #16]
 8013218:	4605      	mov	r5, r0
 801321a:	460c      	mov	r4, r1
 801321c:	b913      	cbnz	r3, 8013224 <_fflush_r+0x10>
 801321e:	2500      	movs	r5, #0
 8013220:	4628      	mov	r0, r5
 8013222:	bd38      	pop	{r3, r4, r5, pc}
 8013224:	b118      	cbz	r0, 801322e <_fflush_r+0x1a>
 8013226:	6a03      	ldr	r3, [r0, #32]
 8013228:	b90b      	cbnz	r3, 801322e <_fflush_r+0x1a>
 801322a:	f7ff f969 	bl	8012500 <__sinit>
 801322e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d0f3      	beq.n	801321e <_fflush_r+0xa>
 8013236:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013238:	07d0      	lsls	r0, r2, #31
 801323a:	d404      	bmi.n	8013246 <_fflush_r+0x32>
 801323c:	0599      	lsls	r1, r3, #22
 801323e:	d402      	bmi.n	8013246 <_fflush_r+0x32>
 8013240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013242:	f7ff fade 	bl	8012802 <__retarget_lock_acquire_recursive>
 8013246:	4628      	mov	r0, r5
 8013248:	4621      	mov	r1, r4
 801324a:	f7ff ff5f 	bl	801310c <__sflush_r>
 801324e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013250:	4605      	mov	r5, r0
 8013252:	07da      	lsls	r2, r3, #31
 8013254:	d4e4      	bmi.n	8013220 <_fflush_r+0xc>
 8013256:	89a3      	ldrh	r3, [r4, #12]
 8013258:	059b      	lsls	r3, r3, #22
 801325a:	d4e1      	bmi.n	8013220 <_fflush_r+0xc>
 801325c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801325e:	f7ff fad1 	bl	8012804 <__retarget_lock_release_recursive>
 8013262:	e7dd      	b.n	8013220 <_fflush_r+0xc>

08013264 <__swbuf_r>:
 8013264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013266:	460e      	mov	r6, r1
 8013268:	4614      	mov	r4, r2
 801326a:	4605      	mov	r5, r0
 801326c:	b118      	cbz	r0, 8013276 <__swbuf_r+0x12>
 801326e:	6a03      	ldr	r3, [r0, #32]
 8013270:	b90b      	cbnz	r3, 8013276 <__swbuf_r+0x12>
 8013272:	f7ff f945 	bl	8012500 <__sinit>
 8013276:	69a3      	ldr	r3, [r4, #24]
 8013278:	60a3      	str	r3, [r4, #8]
 801327a:	89a3      	ldrh	r3, [r4, #12]
 801327c:	071a      	lsls	r2, r3, #28
 801327e:	d501      	bpl.n	8013284 <__swbuf_r+0x20>
 8013280:	6923      	ldr	r3, [r4, #16]
 8013282:	b943      	cbnz	r3, 8013296 <__swbuf_r+0x32>
 8013284:	4621      	mov	r1, r4
 8013286:	4628      	mov	r0, r5
 8013288:	f000 f82a 	bl	80132e0 <__swsetup_r>
 801328c:	b118      	cbz	r0, 8013296 <__swbuf_r+0x32>
 801328e:	f04f 37ff 	mov.w	r7, #4294967295
 8013292:	4638      	mov	r0, r7
 8013294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013296:	6823      	ldr	r3, [r4, #0]
 8013298:	b2f6      	uxtb	r6, r6
 801329a:	6922      	ldr	r2, [r4, #16]
 801329c:	4637      	mov	r7, r6
 801329e:	1a98      	subs	r0, r3, r2
 80132a0:	6963      	ldr	r3, [r4, #20]
 80132a2:	4283      	cmp	r3, r0
 80132a4:	dc05      	bgt.n	80132b2 <__swbuf_r+0x4e>
 80132a6:	4621      	mov	r1, r4
 80132a8:	4628      	mov	r0, r5
 80132aa:	f7ff ffb3 	bl	8013214 <_fflush_r>
 80132ae:	2800      	cmp	r0, #0
 80132b0:	d1ed      	bne.n	801328e <__swbuf_r+0x2a>
 80132b2:	68a3      	ldr	r3, [r4, #8]
 80132b4:	3b01      	subs	r3, #1
 80132b6:	60a3      	str	r3, [r4, #8]
 80132b8:	6823      	ldr	r3, [r4, #0]
 80132ba:	1c5a      	adds	r2, r3, #1
 80132bc:	6022      	str	r2, [r4, #0]
 80132be:	701e      	strb	r6, [r3, #0]
 80132c0:	1c43      	adds	r3, r0, #1
 80132c2:	6962      	ldr	r2, [r4, #20]
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d004      	beq.n	80132d2 <__swbuf_r+0x6e>
 80132c8:	89a3      	ldrh	r3, [r4, #12]
 80132ca:	07db      	lsls	r3, r3, #31
 80132cc:	d5e1      	bpl.n	8013292 <__swbuf_r+0x2e>
 80132ce:	2e0a      	cmp	r6, #10
 80132d0:	d1df      	bne.n	8013292 <__swbuf_r+0x2e>
 80132d2:	4621      	mov	r1, r4
 80132d4:	4628      	mov	r0, r5
 80132d6:	f7ff ff9d 	bl	8013214 <_fflush_r>
 80132da:	2800      	cmp	r0, #0
 80132dc:	d0d9      	beq.n	8013292 <__swbuf_r+0x2e>
 80132de:	e7d6      	b.n	801328e <__swbuf_r+0x2a>

080132e0 <__swsetup_r>:
 80132e0:	b538      	push	{r3, r4, r5, lr}
 80132e2:	4b29      	ldr	r3, [pc, #164]	@ (8013388 <__swsetup_r+0xa8>)
 80132e4:	4605      	mov	r5, r0
 80132e6:	460c      	mov	r4, r1
 80132e8:	6818      	ldr	r0, [r3, #0]
 80132ea:	b118      	cbz	r0, 80132f4 <__swsetup_r+0x14>
 80132ec:	6a03      	ldr	r3, [r0, #32]
 80132ee:	b90b      	cbnz	r3, 80132f4 <__swsetup_r+0x14>
 80132f0:	f7ff f906 	bl	8012500 <__sinit>
 80132f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132f8:	0719      	lsls	r1, r3, #28
 80132fa:	d422      	bmi.n	8013342 <__swsetup_r+0x62>
 80132fc:	06da      	lsls	r2, r3, #27
 80132fe:	d407      	bmi.n	8013310 <__swsetup_r+0x30>
 8013300:	2209      	movs	r2, #9
 8013302:	602a      	str	r2, [r5, #0]
 8013304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013308:	f04f 30ff 	mov.w	r0, #4294967295
 801330c:	81a3      	strh	r3, [r4, #12]
 801330e:	e033      	b.n	8013378 <__swsetup_r+0x98>
 8013310:	0758      	lsls	r0, r3, #29
 8013312:	d512      	bpl.n	801333a <__swsetup_r+0x5a>
 8013314:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013316:	b141      	cbz	r1, 801332a <__swsetup_r+0x4a>
 8013318:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801331c:	4299      	cmp	r1, r3
 801331e:	d002      	beq.n	8013326 <__swsetup_r+0x46>
 8013320:	4628      	mov	r0, r5
 8013322:	f7ff fa7d 	bl	8012820 <_free_r>
 8013326:	2300      	movs	r3, #0
 8013328:	6363      	str	r3, [r4, #52]	@ 0x34
 801332a:	89a3      	ldrh	r3, [r4, #12]
 801332c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013330:	81a3      	strh	r3, [r4, #12]
 8013332:	2300      	movs	r3, #0
 8013334:	6063      	str	r3, [r4, #4]
 8013336:	6923      	ldr	r3, [r4, #16]
 8013338:	6023      	str	r3, [r4, #0]
 801333a:	89a3      	ldrh	r3, [r4, #12]
 801333c:	f043 0308 	orr.w	r3, r3, #8
 8013340:	81a3      	strh	r3, [r4, #12]
 8013342:	6923      	ldr	r3, [r4, #16]
 8013344:	b94b      	cbnz	r3, 801335a <__swsetup_r+0x7a>
 8013346:	89a3      	ldrh	r3, [r4, #12]
 8013348:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801334c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013350:	d003      	beq.n	801335a <__swsetup_r+0x7a>
 8013352:	4621      	mov	r1, r4
 8013354:	4628      	mov	r0, r5
 8013356:	f000 f894 	bl	8013482 <__smakebuf_r>
 801335a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801335e:	f013 0201 	ands.w	r2, r3, #1
 8013362:	d00a      	beq.n	801337a <__swsetup_r+0x9a>
 8013364:	2200      	movs	r2, #0
 8013366:	60a2      	str	r2, [r4, #8]
 8013368:	6962      	ldr	r2, [r4, #20]
 801336a:	4252      	negs	r2, r2
 801336c:	61a2      	str	r2, [r4, #24]
 801336e:	6922      	ldr	r2, [r4, #16]
 8013370:	b942      	cbnz	r2, 8013384 <__swsetup_r+0xa4>
 8013372:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013376:	d1c5      	bne.n	8013304 <__swsetup_r+0x24>
 8013378:	bd38      	pop	{r3, r4, r5, pc}
 801337a:	0799      	lsls	r1, r3, #30
 801337c:	bf58      	it	pl
 801337e:	6962      	ldrpl	r2, [r4, #20]
 8013380:	60a2      	str	r2, [r4, #8]
 8013382:	e7f4      	b.n	801336e <__swsetup_r+0x8e>
 8013384:	2000      	movs	r0, #0
 8013386:	e7f7      	b.n	8013378 <__swsetup_r+0x98>
 8013388:	20000130 	.word	0x20000130

0801338c <memmove>:
 801338c:	4288      	cmp	r0, r1
 801338e:	b510      	push	{r4, lr}
 8013390:	eb01 0402 	add.w	r4, r1, r2
 8013394:	d902      	bls.n	801339c <memmove+0x10>
 8013396:	4284      	cmp	r4, r0
 8013398:	4623      	mov	r3, r4
 801339a:	d807      	bhi.n	80133ac <memmove+0x20>
 801339c:	1e43      	subs	r3, r0, #1
 801339e:	42a1      	cmp	r1, r4
 80133a0:	d008      	beq.n	80133b4 <memmove+0x28>
 80133a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80133a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80133aa:	e7f8      	b.n	801339e <memmove+0x12>
 80133ac:	4402      	add	r2, r0
 80133ae:	4601      	mov	r1, r0
 80133b0:	428a      	cmp	r2, r1
 80133b2:	d100      	bne.n	80133b6 <memmove+0x2a>
 80133b4:	bd10      	pop	{r4, pc}
 80133b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80133ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80133be:	e7f7      	b.n	80133b0 <memmove+0x24>

080133c0 <memchr>:
 80133c0:	b2c9      	uxtb	r1, r1
 80133c2:	4603      	mov	r3, r0
 80133c4:	4402      	add	r2, r0
 80133c6:	b510      	push	{r4, lr}
 80133c8:	4293      	cmp	r3, r2
 80133ca:	4618      	mov	r0, r3
 80133cc:	d101      	bne.n	80133d2 <memchr+0x12>
 80133ce:	2000      	movs	r0, #0
 80133d0:	e003      	b.n	80133da <memchr+0x1a>
 80133d2:	7804      	ldrb	r4, [r0, #0]
 80133d4:	3301      	adds	r3, #1
 80133d6:	428c      	cmp	r4, r1
 80133d8:	d1f6      	bne.n	80133c8 <memchr+0x8>
 80133da:	bd10      	pop	{r4, pc}

080133dc <_realloc_r>:
 80133dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133e0:	4680      	mov	r8, r0
 80133e2:	4615      	mov	r5, r2
 80133e4:	460c      	mov	r4, r1
 80133e6:	b921      	cbnz	r1, 80133f2 <_realloc_r+0x16>
 80133e8:	4611      	mov	r1, r2
 80133ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133ee:	f7fe bf6f 	b.w	80122d0 <_malloc_r>
 80133f2:	b92a      	cbnz	r2, 8013400 <_realloc_r+0x24>
 80133f4:	f7ff fa14 	bl	8012820 <_free_r>
 80133f8:	2400      	movs	r4, #0
 80133fa:	4620      	mov	r0, r4
 80133fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013400:	f000 f89e 	bl	8013540 <_malloc_usable_size_r>
 8013404:	4285      	cmp	r5, r0
 8013406:	4606      	mov	r6, r0
 8013408:	d802      	bhi.n	8013410 <_realloc_r+0x34>
 801340a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801340e:	d8f4      	bhi.n	80133fa <_realloc_r+0x1e>
 8013410:	4629      	mov	r1, r5
 8013412:	4640      	mov	r0, r8
 8013414:	f7fe ff5c 	bl	80122d0 <_malloc_r>
 8013418:	4607      	mov	r7, r0
 801341a:	2800      	cmp	r0, #0
 801341c:	d0ec      	beq.n	80133f8 <_realloc_r+0x1c>
 801341e:	42b5      	cmp	r5, r6
 8013420:	462a      	mov	r2, r5
 8013422:	4621      	mov	r1, r4
 8013424:	bf28      	it	cs
 8013426:	4632      	movcs	r2, r6
 8013428:	f7ff f9ed 	bl	8012806 <memcpy>
 801342c:	4621      	mov	r1, r4
 801342e:	4640      	mov	r0, r8
 8013430:	463c      	mov	r4, r7
 8013432:	f7ff f9f5 	bl	8012820 <_free_r>
 8013436:	e7e0      	b.n	80133fa <_realloc_r+0x1e>

08013438 <__swhatbuf_r>:
 8013438:	b570      	push	{r4, r5, r6, lr}
 801343a:	460c      	mov	r4, r1
 801343c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013440:	b096      	sub	sp, #88	@ 0x58
 8013442:	4615      	mov	r5, r2
 8013444:	2900      	cmp	r1, #0
 8013446:	461e      	mov	r6, r3
 8013448:	da0c      	bge.n	8013464 <__swhatbuf_r+0x2c>
 801344a:	89a3      	ldrh	r3, [r4, #12]
 801344c:	2100      	movs	r1, #0
 801344e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013452:	bf14      	ite	ne
 8013454:	2340      	movne	r3, #64	@ 0x40
 8013456:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801345a:	2000      	movs	r0, #0
 801345c:	6031      	str	r1, [r6, #0]
 801345e:	602b      	str	r3, [r5, #0]
 8013460:	b016      	add	sp, #88	@ 0x58
 8013462:	bd70      	pop	{r4, r5, r6, pc}
 8013464:	466a      	mov	r2, sp
 8013466:	f000 f849 	bl	80134fc <_fstat_r>
 801346a:	2800      	cmp	r0, #0
 801346c:	dbed      	blt.n	801344a <__swhatbuf_r+0x12>
 801346e:	9901      	ldr	r1, [sp, #4]
 8013470:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013474:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013478:	4259      	negs	r1, r3
 801347a:	4159      	adcs	r1, r3
 801347c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013480:	e7eb      	b.n	801345a <__swhatbuf_r+0x22>

08013482 <__smakebuf_r>:
 8013482:	898b      	ldrh	r3, [r1, #12]
 8013484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013486:	079d      	lsls	r5, r3, #30
 8013488:	4606      	mov	r6, r0
 801348a:	460c      	mov	r4, r1
 801348c:	d507      	bpl.n	801349e <__smakebuf_r+0x1c>
 801348e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013492:	6023      	str	r3, [r4, #0]
 8013494:	6123      	str	r3, [r4, #16]
 8013496:	2301      	movs	r3, #1
 8013498:	6163      	str	r3, [r4, #20]
 801349a:	b003      	add	sp, #12
 801349c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801349e:	ab01      	add	r3, sp, #4
 80134a0:	466a      	mov	r2, sp
 80134a2:	f7ff ffc9 	bl	8013438 <__swhatbuf_r>
 80134a6:	9f00      	ldr	r7, [sp, #0]
 80134a8:	4605      	mov	r5, r0
 80134aa:	4630      	mov	r0, r6
 80134ac:	4639      	mov	r1, r7
 80134ae:	f7fe ff0f 	bl	80122d0 <_malloc_r>
 80134b2:	b948      	cbnz	r0, 80134c8 <__smakebuf_r+0x46>
 80134b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134b8:	059a      	lsls	r2, r3, #22
 80134ba:	d4ee      	bmi.n	801349a <__smakebuf_r+0x18>
 80134bc:	f023 0303 	bic.w	r3, r3, #3
 80134c0:	f043 0302 	orr.w	r3, r3, #2
 80134c4:	81a3      	strh	r3, [r4, #12]
 80134c6:	e7e2      	b.n	801348e <__smakebuf_r+0xc>
 80134c8:	89a3      	ldrh	r3, [r4, #12]
 80134ca:	6020      	str	r0, [r4, #0]
 80134cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80134d0:	81a3      	strh	r3, [r4, #12]
 80134d2:	9b01      	ldr	r3, [sp, #4]
 80134d4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80134d8:	b15b      	cbz	r3, 80134f2 <__smakebuf_r+0x70>
 80134da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134de:	4630      	mov	r0, r6
 80134e0:	f000 f81e 	bl	8013520 <_isatty_r>
 80134e4:	b128      	cbz	r0, 80134f2 <__smakebuf_r+0x70>
 80134e6:	89a3      	ldrh	r3, [r4, #12]
 80134e8:	f023 0303 	bic.w	r3, r3, #3
 80134ec:	f043 0301 	orr.w	r3, r3, #1
 80134f0:	81a3      	strh	r3, [r4, #12]
 80134f2:	89a3      	ldrh	r3, [r4, #12]
 80134f4:	431d      	orrs	r5, r3
 80134f6:	81a5      	strh	r5, [r4, #12]
 80134f8:	e7cf      	b.n	801349a <__smakebuf_r+0x18>
	...

080134fc <_fstat_r>:
 80134fc:	b538      	push	{r3, r4, r5, lr}
 80134fe:	2300      	movs	r3, #0
 8013500:	4d06      	ldr	r5, [pc, #24]	@ (801351c <_fstat_r+0x20>)
 8013502:	4604      	mov	r4, r0
 8013504:	4608      	mov	r0, r1
 8013506:	4611      	mov	r1, r2
 8013508:	602b      	str	r3, [r5, #0]
 801350a:	f7ee fe0e 	bl	800212a <_fstat>
 801350e:	1c43      	adds	r3, r0, #1
 8013510:	d102      	bne.n	8013518 <_fstat_r+0x1c>
 8013512:	682b      	ldr	r3, [r5, #0]
 8013514:	b103      	cbz	r3, 8013518 <_fstat_r+0x1c>
 8013516:	6023      	str	r3, [r4, #0]
 8013518:	bd38      	pop	{r3, r4, r5, pc}
 801351a:	bf00      	nop
 801351c:	20011318 	.word	0x20011318

08013520 <_isatty_r>:
 8013520:	b538      	push	{r3, r4, r5, lr}
 8013522:	2300      	movs	r3, #0
 8013524:	4d05      	ldr	r5, [pc, #20]	@ (801353c <_isatty_r+0x1c>)
 8013526:	4604      	mov	r4, r0
 8013528:	4608      	mov	r0, r1
 801352a:	602b      	str	r3, [r5, #0]
 801352c:	f7ee fe0d 	bl	800214a <_isatty>
 8013530:	1c43      	adds	r3, r0, #1
 8013532:	d102      	bne.n	801353a <_isatty_r+0x1a>
 8013534:	682b      	ldr	r3, [r5, #0]
 8013536:	b103      	cbz	r3, 801353a <_isatty_r+0x1a>
 8013538:	6023      	str	r3, [r4, #0]
 801353a:	bd38      	pop	{r3, r4, r5, pc}
 801353c:	20011318 	.word	0x20011318

08013540 <_malloc_usable_size_r>:
 8013540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013544:	1f18      	subs	r0, r3, #4
 8013546:	2b00      	cmp	r3, #0
 8013548:	bfbc      	itt	lt
 801354a:	580b      	ldrlt	r3, [r1, r0]
 801354c:	18c0      	addlt	r0, r0, r3
 801354e:	4770      	bx	lr

08013550 <_init>:
 8013550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013552:	bf00      	nop
 8013554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013556:	bc08      	pop	{r3}
 8013558:	469e      	mov	lr, r3
 801355a:	4770      	bx	lr

0801355c <_fini>:
 801355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801355e:	bf00      	nop
 8013560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013562:	bc08      	pop	{r3}
 8013564:	469e      	mov	lr, r3
 8013566:	4770      	bx	lr
