
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001053c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08010788  08010788  00011788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108c0  080108c0  00012174  2**0
                  CONTENTS
  4 .ARM          00000008  080108c0  080108c0  000118c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108c8  080108c8  00012174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108c8  080108c8  000118c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080108cc  080108cc  000118cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000174  20000000  080108d0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001190  20000174  08010a44  00012174  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20001304  08010a44  00012304  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00012174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002645e  00000000  00000000  000121aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cef  00000000  00000000  00038608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d40  00000000  00000000  0003d2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000166f  00000000  00000000  0003f038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000077af  00000000  00000000  000406a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029837  00000000  00000000  00047e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00149c8e  00000000  00000000  0007168d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bb31b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008238  00000000  00000000  001bb360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001c3598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000174 	.word	0x20000174
 8000268:	00000000 	.word	0x00000000
 800026c:	08010770 	.word	0x08010770

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000178 	.word	0x20000178
 8000288:	08010770 	.word	0x08010770

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b97e 	b.w	80005b0 <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002d2:	460c      	mov	r4, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14d      	bne.n	8000374 <__udivmoddi4+0xa8>
 80002d8:	428a      	cmp	r2, r1
 80002da:	460f      	mov	r7, r1
 80002dc:	4684      	mov	ip, r0
 80002de:	4696      	mov	lr, r2
 80002e0:	fab2 f382 	clz	r3, r2
 80002e4:	d960      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80002e6:	b14b      	cbz	r3, 80002fc <__udivmoddi4+0x30>
 80002e8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002ec:	f1c3 0220 	rsb	r2, r3, #32
 80002f0:	409f      	lsls	r7, r3
 80002f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000300:	fa1f f48e 	uxth.w	r4, lr
 8000304:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000308:	fbb7 f1f6 	udiv	r1, r7, r6
 800030c:	fb06 7711 	mls	r7, r6, r1, r7
 8000310:	fb01 f004 	mul.w	r0, r1, r4
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	4290      	cmp	r0, r2
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x62>
 800031c:	eb1e 0202 	adds.w	r2, lr, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x60>
 8000326:	4290      	cmp	r0, r2
 8000328:	f200 812d 	bhi.w	8000586 <__udivmoddi4+0x2ba>
 800032c:	4639      	mov	r1, r7
 800032e:	1a12      	subs	r2, r2, r0
 8000330:	fa1f fc8c 	uxth.w	ip, ip
 8000334:	fbb2 f0f6 	udiv	r0, r2, r6
 8000338:	fb06 2210 	mls	r2, r6, r0, r2
 800033c:	fb00 f404 	mul.w	r4, r0, r4
 8000340:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000344:	4564      	cmp	r4, ip
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x8e>
 8000348:	eb1e 0c0c 	adds.w	ip, lr, ip
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x8c>
 8000352:	4564      	cmp	r4, ip
 8000354:	f200 811a 	bhi.w	800058c <__udivmoddi4+0x2c0>
 8000358:	4610      	mov	r0, r2
 800035a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035e:	ebac 0c04 	sub.w	ip, ip, r4
 8000362:	2100      	movs	r1, #0
 8000364:	b125      	cbz	r5, 8000370 <__udivmoddi4+0xa4>
 8000366:	fa2c f303 	lsr.w	r3, ip, r3
 800036a:	2200      	movs	r2, #0
 800036c:	e9c5 3200 	strd	r3, r2, [r5]
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d905      	bls.n	8000384 <__udivmoddi4+0xb8>
 8000378:	b10d      	cbz	r5, 800037e <__udivmoddi4+0xb2>
 800037a:	e9c5 0100 	strd	r0, r1, [r5]
 800037e:	2100      	movs	r1, #0
 8000380:	4608      	mov	r0, r1
 8000382:	e7f5      	b.n	8000370 <__udivmoddi4+0xa4>
 8000384:	fab3 f183 	clz	r1, r3
 8000388:	2900      	cmp	r1, #0
 800038a:	d14d      	bne.n	8000428 <__udivmoddi4+0x15c>
 800038c:	42a3      	cmp	r3, r4
 800038e:	f0c0 80f2 	bcc.w	8000576 <__udivmoddi4+0x2aa>
 8000392:	4290      	cmp	r0, r2
 8000394:	f080 80ef 	bcs.w	8000576 <__udivmoddi4+0x2aa>
 8000398:	4606      	mov	r6, r0
 800039a:	4623      	mov	r3, r4
 800039c:	4608      	mov	r0, r1
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e6      	beq.n	8000370 <__udivmoddi4+0xa4>
 80003a2:	e9c5 6300 	strd	r6, r3, [r5]
 80003a6:	e7e3      	b.n	8000370 <__udivmoddi4+0xa4>
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f040 80a2 	bne.w	80004f2 <__udivmoddi4+0x226>
 80003ae:	1a8a      	subs	r2, r1, r2
 80003b0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b4:	fa1f f68e 	uxth.w	r6, lr
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 f4f7 	udiv	r4, r2, r7
 80003be:	fb07 2014 	mls	r0, r7, r4, r2
 80003c2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb06 f004 	mul.w	r0, r6, r4
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d90f      	bls.n	80003f2 <__udivmoddi4+0x126>
 80003d2:	eb1e 0202 	adds.w	r2, lr, r2
 80003d6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003da:	bf2c      	ite	cs
 80003dc:	f04f 0901 	movcs.w	r9, #1
 80003e0:	f04f 0900 	movcc.w	r9, #0
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d903      	bls.n	80003f0 <__udivmoddi4+0x124>
 80003e8:	f1b9 0f00 	cmp.w	r9, #0
 80003ec:	f000 80c8 	beq.w	8000580 <__udivmoddi4+0x2b4>
 80003f0:	4644      	mov	r4, r8
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	fa1f fc8c 	uxth.w	ip, ip
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	fb00 f606 	mul.w	r6, r0, r6
 8000404:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000408:	4566      	cmp	r6, ip
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x152>
 800040c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x150>
 8000416:	4566      	cmp	r6, ip
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c6>
 800041c:	4610      	mov	r0, r2
 800041e:	ebac 0c06 	sub.w	ip, ip, r6
 8000422:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000426:	e79d      	b.n	8000364 <__udivmoddi4+0x98>
 8000428:	f1c1 0620 	rsb	r6, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	fa20 fc06 	lsr.w	ip, r0, r6
 800043a:	40f4      	lsrs	r4, r6
 800043c:	408a      	lsls	r2, r1
 800043e:	431f      	orrs	r7, r3
 8000440:	ea4e 030c 	orr.w	r3, lr, ip
 8000444:	fa00 fe01 	lsl.w	lr, r0, r1
 8000448:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800044c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000450:	fa1f fc87 	uxth.w	ip, r7
 8000454:	fbb4 f0f8 	udiv	r0, r4, r8
 8000458:	fb08 4410 	mls	r4, r8, r0, r4
 800045c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000460:	fb00 f90c 	mul.w	r9, r0, ip
 8000464:	45a1      	cmp	r9, r4
 8000466:	d90e      	bls.n	8000486 <__udivmoddi4+0x1ba>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 3aff 	add.w	sl, r0, #4294967295
 800046e:	bf2c      	ite	cs
 8000470:	f04f 0b01 	movcs.w	fp, #1
 8000474:	f04f 0b00 	movcc.w	fp, #0
 8000478:	45a1      	cmp	r9, r4
 800047a:	d903      	bls.n	8000484 <__udivmoddi4+0x1b8>
 800047c:	f1bb 0f00 	cmp.w	fp, #0
 8000480:	f000 8093 	beq.w	80005aa <__udivmoddi4+0x2de>
 8000484:	4650      	mov	r0, sl
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000492:	fb08 4413 	mls	r4, r8, r3, r4
 8000496:	fb03 fc0c 	mul.w	ip, r3, ip
 800049a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d906      	bls.n	80004b0 <__udivmoddi4+0x1e4>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a8:	d201      	bcs.n	80004ae <__udivmoddi4+0x1e2>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d87a      	bhi.n	80005a4 <__udivmoddi4+0x2d8>
 80004ae:	4643      	mov	r3, r8
 80004b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b4:	eba4 040c 	sub.w	r4, r4, ip
 80004b8:	fba0 9802 	umull	r9, r8, r0, r2
 80004bc:	4544      	cmp	r4, r8
 80004be:	46cc      	mov	ip, r9
 80004c0:	4643      	mov	r3, r8
 80004c2:	d302      	bcc.n	80004ca <__udivmoddi4+0x1fe>
 80004c4:	d106      	bne.n	80004d4 <__udivmoddi4+0x208>
 80004c6:	45ce      	cmp	lr, r9
 80004c8:	d204      	bcs.n	80004d4 <__udivmoddi4+0x208>
 80004ca:	3801      	subs	r0, #1
 80004cc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004d0:	eb68 0307 	sbc.w	r3, r8, r7
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x222>
 80004d6:	ebbe 020c 	subs.w	r2, lr, ip
 80004da:	eb64 0403 	sbc.w	r4, r4, r3
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e73e      	b.n	8000370 <__udivmoddi4+0xa4>
 80004f2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f6:	f1c3 0120 	rsb	r1, r3, #32
 80004fa:	fa04 f203 	lsl.w	r2, r4, r3
 80004fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000508:	fa20 f101 	lsr.w	r1, r0, r1
 800050c:	fa1f f68e 	uxth.w	r6, lr
 8000510:	fbb4 f0f7 	udiv	r0, r4, r7
 8000514:	430a      	orrs	r2, r1
 8000516:	fb07 4410 	mls	r4, r7, r0, r4
 800051a:	0c11      	lsrs	r1, r2, #16
 800051c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000520:	fb00 f406 	mul.w	r4, r0, r6
 8000524:	428c      	cmp	r4, r1
 8000526:	d90e      	bls.n	8000546 <__udivmoddi4+0x27a>
 8000528:	eb1e 0101 	adds.w	r1, lr, r1
 800052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0901 	movcs.w	r9, #1
 8000536:	f04f 0900 	movcc.w	r9, #0
 800053a:	428c      	cmp	r4, r1
 800053c:	d902      	bls.n	8000544 <__udivmoddi4+0x278>
 800053e:	f1b9 0f00 	cmp.w	r9, #0
 8000542:	d02c      	beq.n	800059e <__udivmoddi4+0x2d2>
 8000544:	4640      	mov	r0, r8
 8000546:	1b09      	subs	r1, r1, r4
 8000548:	b292      	uxth	r2, r2
 800054a:	fbb1 f4f7 	udiv	r4, r1, r7
 800054e:	fb07 1114 	mls	r1, r7, r4, r1
 8000552:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000556:	fb04 f106 	mul.w	r1, r4, r6
 800055a:	4291      	cmp	r1, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x2a2>
 800055e:	eb1e 0202 	adds.w	r2, lr, r2
 8000562:	f104 38ff 	add.w	r8, r4, #4294967295
 8000566:	d201      	bcs.n	800056c <__udivmoddi4+0x2a0>
 8000568:	4291      	cmp	r1, r2
 800056a:	d815      	bhi.n	8000598 <__udivmoddi4+0x2cc>
 800056c:	4644      	mov	r4, r8
 800056e:	1a52      	subs	r2, r2, r1
 8000570:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000574:	e721      	b.n	80003ba <__udivmoddi4+0xee>
 8000576:	1a86      	subs	r6, r0, r2
 8000578:	eb64 0303 	sbc.w	r3, r4, r3
 800057c:	2001      	movs	r0, #1
 800057e:	e70e      	b.n	800039e <__udivmoddi4+0xd2>
 8000580:	3c02      	subs	r4, #2
 8000582:	4472      	add	r2, lr
 8000584:	e735      	b.n	80003f2 <__udivmoddi4+0x126>
 8000586:	3902      	subs	r1, #2
 8000588:	4472      	add	r2, lr
 800058a:	e6d0      	b.n	800032e <__udivmoddi4+0x62>
 800058c:	44f4      	add	ip, lr
 800058e:	3802      	subs	r0, #2
 8000590:	e6e3      	b.n	800035a <__udivmoddi4+0x8e>
 8000592:	44f4      	add	ip, lr
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x152>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e7e7      	b.n	800056e <__udivmoddi4+0x2a2>
 800059e:	3802      	subs	r0, #2
 80005a0:	4471      	add	r1, lr
 80005a2:	e7d0      	b.n	8000546 <__udivmoddi4+0x27a>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	443c      	add	r4, r7
 80005a8:	e782      	b.n	80004b0 <__udivmoddi4+0x1e4>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e76a      	b.n	8000486 <__udivmoddi4+0x1ba>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <uart6_write>:
{
    current_level = level;
}

static void uart6_write(const char *data)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff fe65 	bl	800028c <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	4803      	ldr	r0, [pc, #12]	@ (80005dc <uart6_write+0x28>)
 80005ce:	f00a fb64 	bl	800ac9a <HAL_UART_Transmit>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000308 	.word	0x20000308

080005e0 <log_generic>:

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80005e6:	af04      	add	r7, sp, #16
 80005e8:	4604      	mov	r4, r0
 80005ea:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 80005ee:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 80005f2:	6001      	str	r1, [r0, #0]
 80005f4:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 80005f8:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 80005fc:	600a      	str	r2, [r1, #0]
 80005fe:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000602:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800060c:	f2a3 2341 	subw	r3, r3, #577	@ 0x241
 8000610:	4622      	mov	r2, r4
 8000612:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 8000614:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <log_generic+0xa4>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800061c:	f2a2 2241 	subw	r2, r2, #577	@ 0x241
 8000620:	7812      	ldrb	r2, [r2, #0]
 8000622:	429a      	cmp	r2, r3
 8000624:	d329      	bcc.n	800067a <log_generic+0x9a>
    	return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000626:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800062a:	f5a3 7214 	sub.w	r2, r3, #592	@ 0x250
 800062e:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8000632:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8000636:	6812      	ldr	r2, [r2, #0]
 8000638:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800063c:	f00f fbf8 	bl	800fe30 <vsniprintf>

    char final_msg[LOG_BUFFER_SIZE + 64];
    snprintf(final_msg, sizeof(final_msg), "%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 8000640:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000644:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000648:	f107 0010 	add.w	r0, r7, #16
 800064c:	4a0e      	ldr	r2, [pc, #56]	@ (8000688 <log_generic+0xa8>)
 800064e:	9202      	str	r2, [sp, #8]
 8000650:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8000654:	9201      	str	r2, [sp, #4]
 8000656:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800065a:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 800065e:	6812      	ldr	r2, [r2, #0]
 8000660:	9200      	str	r2, [sp, #0]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a09      	ldr	r2, [pc, #36]	@ (800068c <log_generic+0xac>)
 8000666:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800066a:	f00f fb81 	bl	800fd70 <sniprintf>

    uart6_write(final_msg);
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff9e 	bl	80005b4 <uart6_write>
 8000678:	e000      	b.n	800067c <log_generic+0x9c>
    	return;
 800067a:	bf00      	nop
}
 800067c:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8000680:	46bd      	mov	sp, r7
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	20000000 	.word	0x20000000
 8000688:	08010798 	.word	0x08010798
 800068c:	08010788 	.word	0x08010788

08000690 <log_info>:
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
    va_end(args);
}

void log_info(const char *fmt, ...)
{
 8000690:	b40f      	push	{r0, r1, r2, r3}
 8000692:	b580      	push	{r7, lr}
 8000694:	b084      	sub	sp, #16
 8000696:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	4a05      	ldr	r2, [pc, #20]	@ (80006bc <log_info+0x2c>)
 80006a6:	4906      	ldr	r1, [pc, #24]	@ (80006c0 <log_info+0x30>)
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff99 	bl	80005e0 <log_generic>
    va_end(args);
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006b8:	b004      	add	sp, #16
 80006ba:	4770      	bx	lr
 80006bc:	080107b0 	.word	0x080107b0
 80006c0:	080107b8 	.word	0x080107b8

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f001 fb1c 	bl	8001d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f898 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 fb4e 	bl	8000d70 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80006d4:	f000 faea 	bl	8000cac <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80006d8:	f000 fa50 	bl	8000b7c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006dc:	f000 f920 	bl	8000920 <MX_I2C1_Init>
  MX_SPI1_Init();
 80006e0:	f000 f9f6 	bl	8000ad0 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80006e4:	f000 fa96 	bl	8000c14 <MX_USART6_UART_Init>
  MX_RTC_Init();
 80006e8:	f000 f970 	bl	80009cc <MX_RTC_Init>
  MX_RNG_Init();
 80006ec:	f000 f958 	bl	80009a0 <MX_RNG_Init>
  MX_HASH_Init();
 80006f0:	f000 f8fc 	bl	80008ec <MX_HASH_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 80006f4:	bf00      	nop
 80006f6:	4b40      	ldr	r3, [pc, #256]	@ (80007f8 <main+0x134>)
 80006f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0fa      	beq.n	80006f6 <main+0x32>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000700:	2000      	movs	r0, #0
 8000702:	f001 f901 	bl	8001908 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000706:	2001      	movs	r0, #1
 8000708:	f001 f8fe 	bl	8001908 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800070c:	2002      	movs	r0, #2
 800070e:	f001 f8fb 	bl	8001908 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000712:	2101      	movs	r1, #1
 8000714:	2000      	movs	r0, #0
 8000716:	f001 f997 	bl	8001a48 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800071a:	4b38      	ldr	r3, [pc, #224]	@ (80007fc <main+0x138>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000720:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000722:	4b36      	ldr	r3, [pc, #216]	@ (80007fc <main+0x138>)
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000728:	4b34      	ldr	r3, [pc, #208]	@ (80007fc <main+0x138>)
 800072a:	2200      	movs	r2, #0
 800072c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800072e:	4b33      	ldr	r3, [pc, #204]	@ (80007fc <main+0x138>)
 8000730:	2200      	movs	r2, #0
 8000732:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000734:	4b31      	ldr	r3, [pc, #196]	@ (80007fc <main+0x138>)
 8000736:	2200      	movs	r2, #0
 8000738:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800073a:	4930      	ldr	r1, [pc, #192]	@ (80007fc <main+0x138>)
 800073c:	2000      	movs	r0, #0
 800073e:	f001 fa1d 	bl	8001b7c <BSP_COM_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <main+0x88>
  {
    Error_Handler();
 8000748:	f000 fc0e 	bl	8000f68 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 800074c:	2000      	movs	r0, #0
 800074e:	f001 f951 	bl	80019f4 <BSP_LED_Toggle>
 8000752:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000756:	f001 fb93 	bl	8001e80 <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 800075a:	2002      	movs	r0, #2
 800075c:	f001 f94a 	bl	80019f4 <BSP_LED_Toggle>
 8000760:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000764:	f001 fb8c 	bl	8001e80 <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000768:	2001      	movs	r0, #1
 800076a:	f001 f943 	bl	80019f4 <BSP_LED_Toggle>
 800076e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000772:	f001 fb85 	bl	8001e80 <HAL_Delay>

	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000776:	2000      	movs	r0, #0
 8000778:	f001 f93c 	bl	80019f4 <BSP_LED_Toggle>
 800077c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000780:	f001 fb7e 	bl	8001e80 <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000784:	2002      	movs	r0, #2
 8000786:	f001 f935 	bl	80019f4 <BSP_LED_Toggle>
 800078a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800078e:	f001 fb77 	bl	8001e80 <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000792:	2001      	movs	r0, #1
 8000794:	f001 f92e 	bl	80019f4 <BSP_LED_Toggle>
 8000798:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800079c:	f001 fb70 	bl	8001e80 <HAL_Delay>

	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f001 f927 	bl	80019f4 <BSP_LED_Toggle>
 80007a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007aa:	f001 fb69 	bl	8001e80 <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 80007ae:	2002      	movs	r0, #2
 80007b0:	f001 f920 	bl	80019f4 <BSP_LED_Toggle>
 80007b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b8:	f001 fb62 	bl	8001e80 <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 80007bc:	2001      	movs	r0, #1
 80007be:	f001 f919 	bl	80019f4 <BSP_LED_Toggle>
 80007c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007c6:	f001 fb5b 	bl	8001e80 <HAL_Delay>

	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f001 f912 	bl	80019f4 <BSP_LED_Toggle>
 80007d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d4:	f001 fb54 	bl	8001e80 <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 80007d8:	2002      	movs	r0, #2
 80007da:	f001 f90b 	bl	80019f4 <BSP_LED_Toggle>
 80007de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e2:	f001 fb4d 	bl	8001e80 <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f001 f904 	bl	80019f4 <BSP_LED_Toggle>
 80007ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007f0:	f001 fb46 	bl	8001e80 <HAL_Delay>

  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <main+0x130>
 80007f8:	20000714 	.word	0x20000714
 80007fc:	20000190 	.word	0x20000190

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b09c      	sub	sp, #112	@ 0x70
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2250      	movs	r2, #80	@ 0x50
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f00f fb1c 	bl	800fe4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
 8000824:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000826:	4b2f      	ldr	r3, [pc, #188]	@ (80008e4 <SystemClock_Config+0xe4>)
 8000828:	691b      	ldr	r3, [r3, #16]
 800082a:	4a2e      	ldr	r2, [pc, #184]	@ (80008e4 <SystemClock_Config+0xe4>)
 800082c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000830:	6113      	str	r3, [r2, #16]
 8000832:	4b2c      	ldr	r3, [pc, #176]	@ (80008e4 <SystemClock_Config+0xe4>)
 8000834:	691b      	ldr	r3, [r3, #16]
 8000836:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083e:	bf00      	nop
 8000840:	4b28      	ldr	r3, [pc, #160]	@ (80008e4 <SystemClock_Config+0xe4>)
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	f003 0308 	and.w	r3, r3, #8
 8000848:	2b08      	cmp	r3, #8
 800084a:	d1f9      	bne.n	8000840 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 800084c:	2329      	movs	r3, #41	@ 0x29
 800084e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000850:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000856:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800085a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800085c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000860:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000866:	2303      	movs	r3, #3
 8000868:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800086a:	2304      	movs	r3, #4
 800086c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 800086e:	23fa      	movs	r3, #250	@ 0xfa
 8000870:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 800087e:	2304      	movs	r3, #4
 8000880:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000882:	2300      	movs	r3, #0
 8000884:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	4618      	mov	r0, r3
 8000890:	f003 fd24 	bl	80042dc <HAL_RCC_OscConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800089a:	f000 fb65 	bl	8000f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	231f      	movs	r3, #31
 80008a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	2303      	movs	r3, #3
 80008a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	2105      	movs	r1, #5
 80008bc:	4618      	mov	r0, r3
 80008be:	f004 f945 	bl	8004b4c <HAL_RCC_ClockConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008c8:	f000 fb4e 	bl	8000f68 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <SystemClock_Config+0xe8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80008d4:	4a04      	ldr	r2, [pc, #16]	@ (80008e8 <SystemClock_Config+0xe8>)
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	3770      	adds	r7, #112	@ 0x70
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	44020800 	.word	0x44020800
 80008e8:	40022000 	.word	0x40022000

080008ec <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_HASH_Init+0x2c>)
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <MX_HASH_Init+0x30>)
 80008f4:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_NO_SWAP;
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <MX_HASH_Init+0x2c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA1;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_HASH_Init+0x2c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_HASH_Init+0x2c>)
 8000904:	f001 fe7c 	bl	8002600 <HAL_HASH_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_HASH_Init+0x26>
  {
    Error_Handler();
 800090e:	f000 fb2b 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200001a0 	.word	0x200001a0
 800091c:	420c0400 	.word	0x420c0400

08000920 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000924:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <MX_I2C1_Init+0x74>)
 8000926:	4a1c      	ldr	r2, [pc, #112]	@ (8000998 <MX_I2C1_Init+0x78>)
 8000928:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_I2C1_Init+0x74>)
 800092c:	4a1b      	ldr	r2, [pc, #108]	@ (800099c <MX_I2C1_Init+0x7c>)
 800092e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000930:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <MX_I2C1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000936:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <MX_I2C1_Init+0x74>)
 8000938:	2201      	movs	r2, #1
 800093a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800093c:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000942:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <MX_I2C1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_I2C1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_I2C1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800095a:	480e      	ldr	r0, [pc, #56]	@ (8000994 <MX_I2C1_Init+0x74>)
 800095c:	f001 fe88 	bl	8002670 <HAL_I2C_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000966:	f000 faff 	bl	8000f68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4809      	ldr	r0, [pc, #36]	@ (8000994 <MX_I2C1_Init+0x74>)
 800096e:	f001 ff1a 	bl	80027a6 <HAL_I2CEx_ConfigAnalogFilter>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000978:	f000 faf6 	bl	8000f68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	4805      	ldr	r0, [pc, #20]	@ (8000994 <MX_I2C1_Init+0x74>)
 8000980:	f001 ff5c 	bl	800283c <HAL_I2CEx_ConfigDigitalFilter>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800098a:	f000 faed 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200001e0 	.word	0x200001e0
 8000998:	40005400 	.word	0x40005400
 800099c:	10c043e5 	.word	0x10c043e5

080009a0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <MX_RNG_Init+0x24>)
 80009a6:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <MX_RNG_Init+0x28>)
 80009a8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_RNG_Init+0x24>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <MX_RNG_Init+0x24>)
 80009b2:	f009 fc65 	bl	800a280 <HAL_RNG_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80009bc:	f000 fad4 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000234 	.word	0x20000234
 80009c8:	420c0800 	.word	0x420c0800

080009cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08e      	sub	sp, #56	@ 0x38
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009fa:	4b33      	ldr	r3, [pc, #204]	@ (8000ac8 <MX_RTC_Init+0xfc>)
 80009fc:	4a33      	ldr	r2, [pc, #204]	@ (8000acc <MX_RTC_Init+0x100>)
 80009fe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a00:	4b31      	ldr	r3, [pc, #196]	@ (8000ac8 <MX_RTC_Init+0xfc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a06:	4b30      	ldr	r3, [pc, #192]	@ (8000ac8 <MX_RTC_Init+0xfc>)
 8000a08:	227f      	movs	r2, #127	@ 0x7f
 8000a0a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac8 <MX_RTC_Init+0xfc>)
 8000a0e:	22ff      	movs	r2, #255	@ 0xff
 8000a10:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a12:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac8 <MX_RTC_Init+0xfc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a18:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac8 <MX_RTC_Init+0xfc>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac8 <MX_RTC_Init+0xfc>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a24:	4b28      	ldr	r3, [pc, #160]	@ (8000ac8 <MX_RTC_Init+0xfc>)
 8000a26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a2a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a2c:	4b26      	ldr	r3, [pc, #152]	@ (8000ac8 <MX_RTC_Init+0xfc>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000a32:	4b25      	ldr	r3, [pc, #148]	@ (8000ac8 <MX_RTC_Init+0xfc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a38:	4823      	ldr	r0, [pc, #140]	@ (8000ac8 <MX_RTC_Init+0xfc>)
 8000a3a:	f009 fcbf 	bl	800a3bc <HAL_RTC_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000a44:	f000 fa90 	bl	8000f68 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	481a      	ldr	r0, [pc, #104]	@ (8000ac8 <MX_RTC_Init+0xfc>)
 8000a60:	f009 ff12 	bl	800a888 <HAL_RTCEx_PrivilegeModeSet>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a6a:	f000 fa7d 	bl	8000f68 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	2201      	movs	r2, #1
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480f      	ldr	r0, [pc, #60]	@ (8000ac8 <MX_RTC_Init+0xfc>)
 8000a8c:	f009 fd18 	bl	800a4c0 <HAL_RTC_SetTime>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000a96:	f000 fa67 	bl	8000f68 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2201      	movs	r2, #1
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <MX_RTC_Init+0xfc>)
 8000ab2:	f009 fd97 	bl	800a5e4 <HAL_RTC_SetDate>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000abc:	f000 fa54 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	3738      	adds	r7, #56	@ 0x38
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000248 	.word	0x20000248
 8000acc:	44007800 	.word	0x44007800

08000ad0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ad4:	4b27      	ldr	r3, [pc, #156]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000ad6:	4a28      	ldr	r2, [pc, #160]	@ (8000b78 <MX_SPI1_Init+0xa8>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ada:	4b26      	ldr	r3, [pc, #152]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000adc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ae0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae2:	4b24      	ldr	r3, [pc, #144]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae8:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000aea:	2207      	movs	r2, #7
 8000aec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aee:	4b21      	ldr	r3, [pc, #132]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000afa:	4b1e      	ldr	r3, [pc, #120]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000afc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000b04:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000b08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b10:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000b1e:	2207      	movs	r2, #7
 8000b20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b22:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000b24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b28:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b2a:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b30:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b54:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	@ (8000b74 <MX_SPI1_Init+0xa4>)
 8000b62:	f009 febf 	bl	800a8e4 <HAL_SPI_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000b6c:	f000 f9fc 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000278 	.word	0x20000278
 8000b78:	40013000 	.word	0x40013000

08000b7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b80:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <MX_USART2_UART_Init+0x90>)
 8000b82:	4a23      	ldr	r2, [pc, #140]	@ (8000c10 <MX_USART2_UART_Init+0x94>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <MX_USART2_UART_Init+0x90>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <MX_USART2_UART_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <MX_USART2_UART_Init+0x90>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <MX_USART2_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c0c <MX_USART2_UART_Init+0x90>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <MX_USART2_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <MX_USART2_UART_Init+0x90>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb2:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <MX_USART2_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_USART2_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <MX_USART2_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc4:	4811      	ldr	r0, [pc, #68]	@ (8000c0c <MX_USART2_UART_Init+0x90>)
 8000bc6:	f00a f818 	bl	800abfa <HAL_UART_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bd0:	f000 f9ca 	bl	8000f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	480d      	ldr	r0, [pc, #52]	@ (8000c0c <MX_USART2_UART_Init+0x90>)
 8000bd8:	f00a fd44 	bl	800b664 <HAL_UARTEx_SetTxFifoThreshold>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000be2:	f000 f9c1 	bl	8000f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be6:	2100      	movs	r1, #0
 8000be8:	4808      	ldr	r0, [pc, #32]	@ (8000c0c <MX_USART2_UART_Init+0x90>)
 8000bea:	f00a fd79 	bl	800b6e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bf4:	f000 f9b8 	bl	8000f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bf8:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <MX_USART2_UART_Init+0x90>)
 8000bfa:	f00a fcfa 	bl	800b5f2 <HAL_UARTEx_DisableFifoMode>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c04:	f000 f9b0 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000308 	.word	0x20000308
 8000c10:	40004400 	.word	0x40004400

08000c14 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c18:	4b22      	ldr	r3, [pc, #136]	@ (8000ca4 <MX_USART6_UART_Init+0x90>)
 8000c1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ca8 <MX_USART6_UART_Init+0x94>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <MX_USART6_UART_Init+0x90>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <MX_USART6_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <MX_USART6_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <MX_USART6_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <MX_USART6_UART_Init+0x90>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <MX_USART6_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_USART6_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <MX_USART6_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_USART6_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <MX_USART6_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c5c:	4811      	ldr	r0, [pc, #68]	@ (8000ca4 <MX_USART6_UART_Init+0x90>)
 8000c5e:	f009 ffcc 	bl	800abfa <HAL_UART_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000c68:	f000 f97e 	bl	8000f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <MX_USART6_UART_Init+0x90>)
 8000c70:	f00a fcf8 	bl	800b664 <HAL_UARTEx_SetTxFifoThreshold>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000c7a:	f000 f975 	bl	8000f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4808      	ldr	r0, [pc, #32]	@ (8000ca4 <MX_USART6_UART_Init+0x90>)
 8000c82:	f00a fd2d 	bl	800b6e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000c8c:	f000 f96c 	bl	8000f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <MX_USART6_UART_Init+0x90>)
 8000c92:	f00a fcae 	bl	800b5f2 <HAL_UARTEx_DisableFifoMode>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000c9c:	f000 f964 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000039c 	.word	0x2000039c
 8000ca8:	40006400 	.word	0x40006400

08000cac <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8000cb0:	4b29      	ldr	r3, [pc, #164]	@ (8000d58 <MX_USB_PCD_Init+0xac>)
 8000cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8000d5c <MX_USB_PCD_Init+0xb0>)
 8000cb4:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000cb8:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <MX_USB_PCD_Init+0xac>)
 8000cba:	4a29      	ldr	r2, [pc, #164]	@ (8000d60 <MX_USB_PCD_Init+0xb4>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000cbe:	4b26      	ldr	r3, [pc, #152]	@ (8000d58 <MX_USB_PCD_Init+0xac>)
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000cc4:	4b24      	ldr	r3, [pc, #144]	@ (8000d58 <MX_USB_PCD_Init+0xac>)
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cca:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <MX_USB_PCD_Init+0xac>)
 8000ccc:	2202      	movs	r2, #2
 8000cce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000cd0:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <MX_USB_PCD_Init+0xac>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000cd6:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <MX_USB_PCD_Init+0xac>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <MX_USB_PCD_Init+0xac>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <MX_USB_PCD_Init+0xac>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <MX_USB_PCD_Init+0xac>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000cee:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <MX_USB_PCD_Init+0xac>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000cf4:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <MX_USB_PCD_Init+0xac>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000cfa:	4817      	ldr	r0, [pc, #92]	@ (8000d58 <MX_USB_PCD_Init+0xac>)
 8000cfc:	f001 fe4d 	bl	800299a <HAL_PCD_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8000d06:	f000 f92f 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4915      	ldr	r1, [pc, #84]	@ (8000d64 <MX_USB_PCD_Init+0xb8>)
 8000d0e:	4813      	ldr	r0, [pc, #76]	@ (8000d5c <MX_USB_PCD_Init+0xb0>)
 8000d10:	f00d fcf0 	bl	800e6f4 <USBD_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8000d1a:	f000 f925 	bl	8000f68 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000d1e:	4912      	ldr	r1, [pc, #72]	@ (8000d68 <MX_USB_PCD_Init+0xbc>)
 8000d20:	480e      	ldr	r0, [pc, #56]	@ (8000d5c <MX_USB_PCD_Init+0xb0>)
 8000d22:	f00d fd17 	bl	800e754 <USBD_RegisterClass>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8000d2c:	f000 f91c 	bl	8000f68 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8000d30:	490e      	ldr	r1, [pc, #56]	@ (8000d6c <MX_USB_PCD_Init+0xc0>)
 8000d32:	480a      	ldr	r0, [pc, #40]	@ (8000d5c <MX_USB_PCD_Init+0xb0>)
 8000d34:	f00d f934 	bl	800dfa0 <USBD_CDC_RegisterInterface>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8000d3e:	f000 f913 	bl	8000f68 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000d42:	4806      	ldr	r0, [pc, #24]	@ (8000d5c <MX_USB_PCD_Init+0xb0>)
 8000d44:	f00d fd3c 	bl	800e7c0 <USBD_Start>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8000d4e:	f000 f90b 	bl	8000f68 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000430 	.word	0x20000430
 8000d5c:	20000714 	.word	0x20000714
 8000d60:	40016000 	.word	0x40016000
 8000d64:	200000d4 	.word	0x200000d4
 8000d68:	20000038 	.word	0x20000038
 8000d6c:	200000b8 	.word	0x200000b8

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	@ 0x30
 8000d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d86:	4b72      	ldr	r3, [pc, #456]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d8c:	4a70      	ldr	r2, [pc, #448]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d96:	4b6e      	ldr	r3, [pc, #440]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	61bb      	str	r3, [r7, #24]
 8000da2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da4:	4b6a      	ldr	r3, [pc, #424]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000daa:	4a69      	ldr	r2, [pc, #420]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000db4:	4b66      	ldr	r3, [pc, #408]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc2:	4b63      	ldr	r3, [pc, #396]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dc8:	4a61      	ldr	r2, [pc, #388]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b5b      	ldr	r3, [pc, #364]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000de6:	4a5a      	ldr	r2, [pc, #360]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000df0:	4b57      	ldr	r3, [pc, #348]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b54      	ldr	r3, [pc, #336]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e04:	4a52      	ldr	r2, [pc, #328]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e0e:	4b50      	ldr	r3, [pc, #320]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e1c:	4b4c      	ldr	r3, [pc, #304]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e22:	4a4b      	ldr	r2, [pc, #300]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e28:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e2c:	4b48      	ldr	r3, [pc, #288]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3a:	4b45      	ldr	r3, [pc, #276]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e40:	4a43      	ldr	r2, [pc, #268]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000e42:	f043 0308 	orr.w	r3, r3, #8
 8000e46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e4a:	4b41      	ldr	r3, [pc, #260]	@ (8000f50 <MX_GPIO_Init+0x1e0>)
 8000e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e50:	f003 0308 	and.w	r3, r3, #8
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e58:	2332      	movs	r3, #50	@ 0x32
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e64:	2302      	movs	r3, #2
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e68:	230b      	movs	r3, #11
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4838      	ldr	r0, [pc, #224]	@ (8000f54 <MX_GPIO_Init+0x1e4>)
 8000e74:	f001 fa40 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e78:	2384      	movs	r3, #132	@ 0x84
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e84:	2302      	movs	r3, #2
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e88:	230b      	movs	r3, #11
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	4831      	ldr	r0, [pc, #196]	@ (8000f58 <MX_GPIO_Init+0x1e8>)
 8000e94:	f001 fa30 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000e98:	2310      	movs	r3, #16
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	482b      	ldr	r0, [pc, #172]	@ (8000f58 <MX_GPIO_Init+0x1e8>)
 8000eac:	f001 fa24 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8000eb0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4825      	ldr	r0, [pc, #148]	@ (8000f5c <MX_GPIO_Init+0x1ec>)
 8000ec6:	f001 fa17 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000eca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000edc:	230b      	movs	r3, #11
 8000ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	481d      	ldr	r0, [pc, #116]	@ (8000f5c <MX_GPIO_Init+0x1ec>)
 8000ee8:	f001 fa06 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000eec:	2380      	movs	r3, #128	@ 0x80
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <MX_GPIO_Init+0x1f0>)
 8000ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	4819      	ldr	r0, [pc, #100]	@ (8000f64 <MX_GPIO_Init+0x1f4>)
 8000f00:	f001 f9fa 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000f04:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f12:	2302      	movs	r3, #2
 8000f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f16:	230b      	movs	r3, #11
 8000f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4810      	ldr	r0, [pc, #64]	@ (8000f64 <MX_GPIO_Init+0x1f4>)
 8000f22:	f001 f9e9 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000f26:	23c0      	movs	r3, #192	@ 0xc0
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f36:	2308      	movs	r3, #8
 8000f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4806      	ldr	r0, [pc, #24]	@ (8000f5c <MX_GPIO_Init+0x1ec>)
 8000f42:	f001 f9d9 	bl	80022f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f46:	bf00      	nop
 8000f48:	3730      	adds	r7, #48	@ 0x30
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	44020c00 	.word	0x44020c00
 8000f54:	42020800 	.word	0x42020800
 8000f58:	42020000 	.word	0x42020000
 8000f5c:	42020400 	.word	0x42020400
 8000f60:	10110000 	.word	0x10110000
 8000f64:	42021800 	.word	0x42021800

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <Error_Handler+0x8>

08000f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <HAL_HASH_MspInit+0x34>)
 8000f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f92:	4a09      	ldr	r2, [pc, #36]	@ (8000fb8 <HAL_HASH_MspInit+0x34>)
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_HASH_MspInit+0x34>)
 8000f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	44020c00 	.word	0x44020c00

08000fbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0cc      	sub	sp, #304	@ 0x130
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fca:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fe0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000fea:	461a      	mov	r2, r3
 8000fec:	2100      	movs	r1, #0
 8000fee:	f00e ff2d 	bl	800fe4c <memset>
  if(hi2c->Instance==I2C1)
 8000ff2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ff6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a33      	ldr	r2, [pc, #204]	@ (80010cc <HAL_I2C_MspInit+0x110>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d15e      	bne.n	80010c2 <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001004:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001008:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800100c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001018:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800101c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001020:	2200      	movs	r2, #0
 8001022:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	4618      	mov	r0, r3
 800102c:	f004 f8d0 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8001036:	f7ff ff97 	bl	8000f68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	4b25      	ldr	r3, [pc, #148]	@ (80010d0 <HAL_I2C_MspInit+0x114>)
 800103c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001040:	4a23      	ldr	r2, [pc, #140]	@ (80010d0 <HAL_I2C_MspInit+0x114>)
 8001042:	f043 0302 	orr.w	r3, r3, #2
 8001046:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800104a:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <HAL_I2C_MspInit+0x114>)
 800104c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001050:	f003 0202 	and.w	r2, r3, #2
 8001054:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001058:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001062:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001066:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001068:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800106c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001070:	2312      	movs	r3, #18
 8001072:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001082:	2304      	movs	r3, #4
 8001084:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800108c:	4619      	mov	r1, r3
 800108e:	4811      	ldr	r0, [pc, #68]	@ (80010d4 <HAL_I2C_MspInit+0x118>)
 8001090:	f001 f932 	bl	80022f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001094:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <HAL_I2C_MspInit+0x114>)
 8001096:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800109a:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <HAL_I2C_MspInit+0x114>)
 800109c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010a0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80010a4:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <HAL_I2C_MspInit+0x114>)
 80010a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010aa:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80010ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80010b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80010bc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80010c0:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010c2:	bf00      	nop
 80010c4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40005400 	.word	0x40005400
 80010d0:	44020c00 	.word	0x44020c00
 80010d4:	42020400 	.word	0x42020400

080010d8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0c6      	sub	sp, #280	@ 0x118
 80010dc:	af00      	add	r7, sp, #0
 80010de:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80010e6:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80010f0:	4618      	mov	r0, r3
 80010f2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80010f6:	461a      	mov	r2, r3
 80010f8:	2100      	movs	r1, #0
 80010fa:	f00e fea7 	bl	800fe4c <memset>
  if(hrng->Instance==RNG)
 80010fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001102:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a1d      	ldr	r2, [pc, #116]	@ (8001180 <HAL_RNG_MspInit+0xa8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d131      	bne.n	8001174 <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001110:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001114:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001118:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001124:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800112c:	2200      	movs	r2, #0
 800112e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	4618      	mov	r0, r3
 8001138:	f004 f84a 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 8001142:	f7ff ff11 	bl	8000f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001146:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <HAL_RNG_MspInit+0xac>)
 8001148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800114c:	4a0d      	ldr	r2, [pc, #52]	@ (8001184 <HAL_RNG_MspInit+0xac>)
 800114e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001152:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <HAL_RNG_MspInit+0xac>)
 8001158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800115c:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001160:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001164:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800116e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001172:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001174:	bf00      	nop
 8001176:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	420c0800 	.word	0x420c0800
 8001184:	44020c00 	.word	0x44020c00

08001188 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0c6      	sub	sp, #280	@ 0x118
 800118c:	af00      	add	r7, sp, #0
 800118e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001192:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001196:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001198:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800119c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011a0:	4618      	mov	r0, r3
 80011a2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80011a6:	461a      	mov	r2, r3
 80011a8:	2100      	movs	r1, #0
 80011aa:	f00e fe4f 	bl	800fe4c <memset>
  if(hrtc->Instance==RTC)
 80011ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a21      	ldr	r2, [pc, #132]	@ (8001240 <HAL_RTC_MspInit+0xb8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d13a      	bne.n	8001236 <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011c4:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80011c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e0:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 fff1 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 80011f4:	f7ff feb8 	bl	8000f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_RTC_MspInit+0xbc>)
 80011fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011fe:	4a11      	ldr	r2, [pc, #68]	@ (8001244 <HAL_RTC_MspInit+0xbc>)
 8001200:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001204:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001208:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <HAL_RTC_MspInit+0xbc>)
 800120a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800120e:	4a0d      	ldr	r2, [pc, #52]	@ (8001244 <HAL_RTC_MspInit+0xbc>)
 8001210:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001214:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001218:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <HAL_RTC_MspInit+0xbc>)
 800121a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800121e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001222:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001226:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001230:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001234:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001236:	bf00      	nop
 8001238:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	44007800 	.word	0x44007800
 8001244:	44020c00 	.word	0x44020c00

08001248 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0ce      	sub	sp, #312	@ 0x138
 800124c:	af00      	add	r7, sp, #0
 800124e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001252:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001256:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800126c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001270:	4618      	mov	r0, r3
 8001272:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001276:	461a      	mov	r2, r3
 8001278:	2100      	movs	r1, #0
 800127a:	f00e fde7 	bl	800fe4c <memset>
  if(hspi->Instance==SPI1)
 800127e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001282:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a49      	ldr	r2, [pc, #292]	@ (80013b0 <HAL_SPI_MspInit+0x168>)
 800128c:	4293      	cmp	r3, r2
 800128e:	f040 808a 	bne.w	80013a6 <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001292:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001296:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800129a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 80012a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80012ae:	2200      	movs	r2, #0
 80012b0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b4:	f107 0318 	add.w	r3, r7, #24
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 ff89 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 80012c4:	f7ff fe50 	bl	8000f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012c8:	4b3a      	ldr	r3, [pc, #232]	@ (80013b4 <HAL_SPI_MspInit+0x16c>)
 80012ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80012ce:	4a39      	ldr	r2, [pc, #228]	@ (80013b4 <HAL_SPI_MspInit+0x16c>)
 80012d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80012d8:	4b36      	ldr	r3, [pc, #216]	@ (80013b4 <HAL_SPI_MspInit+0x16c>)
 80012da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80012de:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80012e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012e6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012f0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012f4:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b2f      	ldr	r3, [pc, #188]	@ (80013b4 <HAL_SPI_MspInit+0x16c>)
 80012f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012fc:	4a2d      	ldr	r2, [pc, #180]	@ (80013b4 <HAL_SPI_MspInit+0x16c>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001306:	4b2b      	ldr	r3, [pc, #172]	@ (80013b4 <HAL_SPI_MspInit+0x16c>)
 8001308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800130c:	f003 0201 	and.w	r2, r3, #1
 8001310:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001314:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800131e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001322:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001324:	4b23      	ldr	r3, [pc, #140]	@ (80013b4 <HAL_SPI_MspInit+0x16c>)
 8001326:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800132a:	4a22      	ldr	r2, [pc, #136]	@ (80013b4 <HAL_SPI_MspInit+0x16c>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001334:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <HAL_SPI_MspInit+0x16c>)
 8001336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800133a:	f003 0208 	and.w	r2, r3, #8
 800133e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001342:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800134c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001350:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001352:	2360      	movs	r3, #96	@ 0x60
 8001354:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800136a:	2305      	movs	r3, #5
 800136c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001374:	4619      	mov	r1, r3
 8001376:	4810      	ldr	r0, [pc, #64]	@ (80013b8 <HAL_SPI_MspInit+0x170>)
 8001378:	f000 ffbe 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800137c:	2380      	movs	r3, #128	@ 0x80
 800137e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001394:	2305      	movs	r3, #5
 8001396:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139a:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800139e:	4619      	mov	r1, r3
 80013a0:	4806      	ldr	r0, [pc, #24]	@ (80013bc <HAL_SPI_MspInit+0x174>)
 80013a2:	f000 ffa9 	bl	80022f8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80013a6:	bf00      	nop
 80013a8:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40013000 	.word	0x40013000
 80013b4:	44020c00 	.word	0x44020c00
 80013b8:	42020000 	.word	0x42020000
 80013bc:	42020c00 	.word	0x42020c00

080013c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b0d0      	sub	sp, #320	@ 0x140
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013ca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013ce:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013e4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013e8:	4618      	mov	r0, r3
 80013ea:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80013ee:	461a      	mov	r2, r3
 80013f0:	2100      	movs	r1, #0
 80013f2:	f00e fd2b 	bl	800fe4c <memset>
  if(huart->Instance==USART2)
 80013f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013fa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a7c      	ldr	r2, [pc, #496]	@ (80015f4 <HAL_UART_MspInit+0x234>)
 8001404:	4293      	cmp	r3, r2
 8001406:	f040 808a 	bne.w	800151e <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800140a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800140e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001412:	f04f 0202 	mov.w	r2, #2
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800141e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001422:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001426:	2200      	movs	r2, #0
 8001428:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142a:	f107 0320 	add.w	r3, r7, #32
 800142e:	4618      	mov	r0, r3
 8001430:	f003 fece 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 800143a:	f7ff fd95 	bl	8000f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800143e:	4b6e      	ldr	r3, [pc, #440]	@ (80015f8 <HAL_UART_MspInit+0x238>)
 8001440:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001444:	4a6c      	ldr	r2, [pc, #432]	@ (80015f8 <HAL_UART_MspInit+0x238>)
 8001446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800144a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800144e:	4b6a      	ldr	r3, [pc, #424]	@ (80015f8 <HAL_UART_MspInit+0x238>)
 8001450:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001454:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8001458:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800145c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001466:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800146a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b62      	ldr	r3, [pc, #392]	@ (80015f8 <HAL_UART_MspInit+0x238>)
 800146e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001472:	4a61      	ldr	r2, [pc, #388]	@ (80015f8 <HAL_UART_MspInit+0x238>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800147c:	4b5e      	ldr	r3, [pc, #376]	@ (80015f8 <HAL_UART_MspInit+0x238>)
 800147e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001482:	f003 0201 	and.w	r2, r3, #1
 8001486:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800148a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001494:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001498:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800149a:	4b57      	ldr	r3, [pc, #348]	@ (80015f8 <HAL_UART_MspInit+0x238>)
 800149c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a0:	4a55      	ldr	r2, [pc, #340]	@ (80015f8 <HAL_UART_MspInit+0x238>)
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014aa:	4b53      	ldr	r3, [pc, #332]	@ (80015f8 <HAL_UART_MspInit+0x238>)
 80014ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b0:	f003 0208 	and.w	r2, r3, #8
 80014b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014c6:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014c8:	2308      	movs	r3, #8
 80014ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014e0:	2307      	movs	r3, #7
 80014e2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80014ea:	4619      	mov	r1, r3
 80014ec:	4843      	ldr	r0, [pc, #268]	@ (80015fc <HAL_UART_MspInit+0x23c>)
 80014ee:	f000 ff03 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014f2:	2320      	movs	r3, #32
 80014f4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150a:	2307      	movs	r3, #7
 800150c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001510:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001514:	4619      	mov	r1, r3
 8001516:	483a      	ldr	r0, [pc, #232]	@ (8001600 <HAL_UART_MspInit+0x240>)
 8001518:	f000 feee 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800151c:	e065      	b.n	80015ea <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART6)
 800151e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001522:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a36      	ldr	r2, [pc, #216]	@ (8001604 <HAL_UART_MspInit+0x244>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d15c      	bne.n	80015ea <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001530:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001534:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001538:	f04f 0220 	mov.w	r2, #32
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8001544:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001548:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800154c:	2200      	movs	r2, #0
 800154e:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001550:	f107 0320 	add.w	r3, r7, #32
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fe3b 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8001560:	f7ff fd02 	bl	8000f68 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001564:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <HAL_UART_MspInit+0x238>)
 8001566:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800156a:	4a23      	ldr	r2, [pc, #140]	@ (80015f8 <HAL_UART_MspInit+0x238>)
 800156c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001570:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001574:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <HAL_UART_MspInit+0x238>)
 8001576:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800157a:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 800157e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001582:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800158c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001590:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <HAL_UART_MspInit+0x238>)
 8001594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001598:	4a17      	ldr	r2, [pc, #92]	@ (80015f8 <HAL_UART_MspInit+0x238>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <HAL_UART_MspInit+0x238>)
 80015a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015a8:	f003 0204 	and.w	r2, r3, #4
 80015ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015b0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015ba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015be:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015c0:	23c0      	movs	r3, #192	@ 0xc0
 80015c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80015d8:	2307      	movs	r3, #7
 80015da:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015de:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80015e2:	4619      	mov	r1, r3
 80015e4:	4808      	ldr	r0, [pc, #32]	@ (8001608 <HAL_UART_MspInit+0x248>)
 80015e6:	f000 fe87 	bl	80022f8 <HAL_GPIO_Init>
}
 80015ea:	bf00      	nop
 80015ec:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40004400 	.word	0x40004400
 80015f8:	44020c00 	.word	0x44020c00
 80015fc:	42020000 	.word	0x42020000
 8001600:	42020c00 	.word	0x42020c00
 8001604:	40006400 	.word	0x40006400
 8001608:	42020800 	.word	0x42020800

0800160c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0c6      	sub	sp, #280	@ 0x118
 8001610:	af00      	add	r7, sp, #0
 8001612:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001616:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800161a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800161c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001624:	4618      	mov	r0, r3
 8001626:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800162a:	461a      	mov	r2, r3
 800162c:	2100      	movs	r1, #0
 800162e:	f00e fc0d 	bl	800fe4c <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001632:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001636:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a22      	ldr	r2, [pc, #136]	@ (80016c8 <HAL_PCD_MspInit+0xbc>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d13b      	bne.n	80016bc <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001644:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001648:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	f04f 0310 	mov.w	r3, #16
 8001654:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001658:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800165c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001660:	2230      	movs	r2, #48	@ 0x30
 8001662:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fdb0 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 8001676:	f7ff fc77 	bl	8000f68 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 800167a:	f002 fe1f 	bl	80042bc <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800167e:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <HAL_PCD_MspInit+0xc0>)
 8001680:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001684:	4a11      	ldr	r2, [pc, #68]	@ (80016cc <HAL_PCD_MspInit+0xc0>)
 8001686:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800168a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800168e:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <HAL_PCD_MspInit+0xc0>)
 8001690:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001694:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8001698:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800169c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80016a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016aa:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2100      	movs	r1, #0
 80016b0:	204a      	movs	r0, #74	@ 0x4a
 80016b2:	f000 fcc1 	bl	8002038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80016b6:	204a      	movs	r0, #74	@ 0x4a
 80016b8:	f000 fcd8 	bl	800206c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 80016bc:	bf00      	nop
 80016be:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40016000 	.word	0x40016000
 80016cc:	44020c00 	.word	0x44020c00

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <NMI_Handler+0x4>

080016d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <MemManage_Handler+0x4>

080016e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001726:	f000 fb8b 	bl	8001e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}

0800172e <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001732:	2000      	movs	r0, #0
 8001734:	f000 fa00 	bl	8001b38 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <USB_DRD_FS_IRQHandler+0x10>)
 8001742:	f001 fa4d 	bl	8002be0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000430 	.word	0x20000430

08001750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001758:	4a14      	ldr	r2, [pc, #80]	@ (80017ac <_sbrk+0x5c>)
 800175a:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <_sbrk+0x60>)
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001764:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <_sbrk+0x64>)
 800176e:	4a12      	ldr	r2, [pc, #72]	@ (80017b8 <_sbrk+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001772:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001780:	f00e fb6c 	bl	800fe5c <__errno>
 8001784:	4603      	mov	r3, r0
 8001786:	220c      	movs	r2, #12
 8001788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e009      	b.n	80017a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001796:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	4a05      	ldr	r2, [pc, #20]	@ (80017b4 <_sbrk+0x64>)
 80017a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200a0000 	.word	0x200a0000
 80017b0:	00000500 	.word	0x00000500
 80017b4:	200009f0 	.word	0x200009f0
 80017b8:	20001308 	.word	0x20001308

080017bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c2:	4b35      	ldr	r3, [pc, #212]	@ (8001898 <SystemInit+0xdc>)
 80017c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017c8:	4a33      	ldr	r2, [pc, #204]	@ (8001898 <SystemInit+0xdc>)
 80017ca:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80017d2:	4b32      	ldr	r3, [pc, #200]	@ (800189c <SystemInit+0xe0>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80017d8:	4b30      	ldr	r3, [pc, #192]	@ (800189c <SystemInit+0xe0>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80017de:	4b2f      	ldr	r3, [pc, #188]	@ (800189c <SystemInit+0xe0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80017e4:	4b2d      	ldr	r3, [pc, #180]	@ (800189c <SystemInit+0xe0>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	492c      	ldr	r1, [pc, #176]	@ (800189c <SystemInit+0xe0>)
 80017ea:	4b2d      	ldr	r3, [pc, #180]	@ (80018a0 <SystemInit+0xe4>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80017f0:	4b2a      	ldr	r3, [pc, #168]	@ (800189c <SystemInit+0xe0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80017f6:	4b29      	ldr	r3, [pc, #164]	@ (800189c <SystemInit+0xe0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80017fc:	4b27      	ldr	r3, [pc, #156]	@ (800189c <SystemInit+0xe0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001802:	4b26      	ldr	r3, [pc, #152]	@ (800189c <SystemInit+0xe0>)
 8001804:	4a27      	ldr	r2, [pc, #156]	@ (80018a4 <SystemInit+0xe8>)
 8001806:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001808:	4b24      	ldr	r3, [pc, #144]	@ (800189c <SystemInit+0xe0>)
 800180a:	2200      	movs	r2, #0
 800180c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800180e:	4b23      	ldr	r3, [pc, #140]	@ (800189c <SystemInit+0xe0>)
 8001810:	4a24      	ldr	r2, [pc, #144]	@ (80018a4 <SystemInit+0xe8>)
 8001812:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001814:	4b21      	ldr	r3, [pc, #132]	@ (800189c <SystemInit+0xe0>)
 8001816:	2200      	movs	r2, #0
 8001818:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800181a:	4b20      	ldr	r3, [pc, #128]	@ (800189c <SystemInit+0xe0>)
 800181c:	4a21      	ldr	r2, [pc, #132]	@ (80018a4 <SystemInit+0xe8>)
 800181e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001820:	4b1e      	ldr	r3, [pc, #120]	@ (800189c <SystemInit+0xe0>)
 8001822:	2200      	movs	r2, #0
 8001824:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001826:	4b1d      	ldr	r3, [pc, #116]	@ (800189c <SystemInit+0xe0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a1c      	ldr	r2, [pc, #112]	@ (800189c <SystemInit+0xe0>)
 800182c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001830:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001832:	4b1a      	ldr	r3, [pc, #104]	@ (800189c <SystemInit+0xe0>)
 8001834:	2200      	movs	r2, #0
 8001836:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <SystemInit+0xdc>)
 800183a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800183e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001840:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <SystemInit+0xec>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001848:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001850:	d003      	beq.n	800185a <SystemInit+0x9e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001858:	d117      	bne.n	800188a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800185a:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <SystemInit+0xec>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001866:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <SystemInit+0xec>)
 8001868:	4a10      	ldr	r2, [pc, #64]	@ (80018ac <SystemInit+0xf0>)
 800186a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800186c:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <SystemInit+0xec>)
 800186e:	4a10      	ldr	r2, [pc, #64]	@ (80018b0 <SystemInit+0xf4>)
 8001870:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001872:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <SystemInit+0xec>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a0c      	ldr	r2, [pc, #48]	@ (80018a8 <SystemInit+0xec>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800187e:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <SystemInit+0xec>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a09      	ldr	r2, [pc, #36]	@ (80018a8 <SystemInit+0xec>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	61d3      	str	r3, [r2, #28]
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00
 800189c:	44020c00 	.word	0x44020c00
 80018a0:	eae2eae3 	.word	0xeae2eae3
 80018a4:	01010280 	.word	0x01010280
 80018a8:	40022000 	.word	0x40022000
 80018ac:	08192a3b 	.word	0x08192a3b
 80018b0:	4c5d6e7f 	.word	0x4c5d6e7f

080018b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018b4:	480d      	ldr	r0, [pc, #52]	@ (80018ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018b8:	f7ff ff80 	bl	80017bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018bc:	480c      	ldr	r0, [pc, #48]	@ (80018f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80018be:	490d      	ldr	r1, [pc, #52]	@ (80018f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018c0:	4a0d      	ldr	r2, [pc, #52]	@ (80018f8 <LoopForever+0xe>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c4:	e002      	b.n	80018cc <LoopCopyDataInit>

080018c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ca:	3304      	adds	r3, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d0:	d3f9      	bcc.n	80018c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d2:	4a0a      	ldr	r2, [pc, #40]	@ (80018fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80018d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001900 <LoopForever+0x16>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d8:	e001      	b.n	80018de <LoopFillZerobss>

080018da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018dc:	3204      	adds	r2, #4

080018de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e0:	d3fb      	bcc.n	80018da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018e2:	f00e fac1 	bl	800fe68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018e6:	f7fe feed 	bl	80006c4 <main>

080018ea <LoopForever>:

LoopForever:
    b LoopForever
 80018ea:	e7fe      	b.n	80018ea <LoopForever>
  ldr   r0, =_estack
 80018ec:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80018f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f4:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 80018f8:	080108d0 	.word	0x080108d0
  ldr r2, =_sbss
 80018fc:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001900:	20001304 	.word	0x20001304

08001904 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC1_IRQHandler>
	...

08001908 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	@ 0x30
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d009      	beq.n	8001930 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d006      	beq.n	8001930 <BSP_LED_Init+0x28>
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d003      	beq.n	8001930 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001928:	f06f 0301 	mvn.w	r3, #1
 800192c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800192e:	e055      	b.n	80019dc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d10f      	bne.n	8001956 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8001936:	4b2c      	ldr	r3, [pc, #176]	@ (80019e8 <BSP_LED_Init+0xe0>)
 8001938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800193c:	4a2a      	ldr	r2, [pc, #168]	@ (80019e8 <BSP_LED_Init+0xe0>)
 800193e:	f043 0320 	orr.w	r3, r3, #32
 8001942:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001946:	4b28      	ldr	r3, [pc, #160]	@ (80019e8 <BSP_LED_Init+0xe0>)
 8001948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800194c:	f003 0320 	and.w	r3, r3, #32
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	e021      	b.n	800199a <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10f      	bne.n	800197c <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 800195c:	4b22      	ldr	r3, [pc, #136]	@ (80019e8 <BSP_LED_Init+0xe0>)
 800195e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001962:	4a21      	ldr	r2, [pc, #132]	@ (80019e8 <BSP_LED_Init+0xe0>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800196c:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <BSP_LED_Init+0xe0>)
 800196e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	e00e      	b.n	800199a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800197c:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <BSP_LED_Init+0xe0>)
 800197e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001982:	4a19      	ldr	r2, [pc, #100]	@ (80019e8 <BSP_LED_Init+0xe0>)
 8001984:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001988:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800198c:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <BSP_LED_Init+0xe0>)
 800198e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4a13      	ldr	r2, [pc, #76]	@ (80019ec <BSP_LED_Init+0xe4>)
 800199e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019a2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80019a4:	2301      	movs	r3, #1
 80019a6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	4a0f      	ldr	r2, [pc, #60]	@ (80019f0 <BSP_LED_Init+0xe8>)
 80019b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b8:	f107 0218 	add.w	r2, r7, #24
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fc9a 	bl	80022f8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <BSP_LED_Init+0xe8>)
 80019c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	4a07      	ldr	r2, [pc, #28]	@ (80019ec <BSP_LED_Init+0xe4>)
 80019d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019d4:	2200      	movs	r2, #0
 80019d6:	4619      	mov	r1, r3
 80019d8:	f000 fde0 	bl	800259c <HAL_GPIO_WritePin>
  }

  return ret;
 80019dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3730      	adds	r7, #48	@ 0x30
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	44020c00 	.word	0x44020c00
 80019ec:	08010858 	.word	0x08010858
 80019f0:	2000000c 	.word	0x2000000c

080019f4 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d009      	beq.n	8001a1c <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d006      	beq.n	8001a1c <BSP_LED_Toggle+0x28>
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d003      	beq.n	8001a1c <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a14:	f06f 0301 	mvn.w	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	e00b      	b.n	8001a34 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	4a08      	ldr	r2, [pc, #32]	@ (8001a40 <BSP_LED_Toggle+0x4c>)
 8001a20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	4907      	ldr	r1, [pc, #28]	@ (8001a44 <BSP_LED_Toggle+0x50>)
 8001a28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4610      	mov	r0, r2
 8001a30:	f000 fdcc 	bl	80025cc <HAL_GPIO_TogglePin>
  }

  return ret;
 8001a34:	68fb      	ldr	r3, [r7, #12]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000000c 	.word	0x2000000c
 8001a44:	08010858 	.word	0x08010858

08001a48 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	460a      	mov	r2, r1
 8001a52:	71fb      	strb	r3, [r7, #7]
 8001a54:	4613      	mov	r3, r2
 8001a56:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001a58:	4b30      	ldr	r3, [pc, #192]	@ (8001b1c <BSP_PB_Init+0xd4>)
 8001a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a5e:	4a2f      	ldr	r2, [pc, #188]	@ (8001b1c <BSP_PB_Init+0xd4>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a68:	4b2c      	ldr	r3, [pc, #176]	@ (8001b1c <BSP_PB_Init+0xd4>)
 8001a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001a76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a7a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a80:	2302      	movs	r3, #2
 8001a82:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001a84:	79bb      	ldrb	r3, [r7, #6]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10c      	bne.n	8001aa4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	4a23      	ldr	r2, [pc, #140]	@ (8001b20 <BSP_PB_Init+0xd8>)
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	f107 020c 	add.w	r2, r7, #12
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 fc2b 	bl	80022f8 <HAL_GPIO_Init>
 8001aa2:	e036      	b.n	8001b12 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b24 <BSP_PB_Init+0xdc>)
 8001aa6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8001b20 <BSP_PB_Init+0xd8>)
 8001aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab0:	f107 020c 	add.w	r2, r7, #12
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fc1e 	bl	80022f8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001abc:	79fa      	ldrb	r2, [r7, #7]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4a18      	ldr	r2, [pc, #96]	@ (8001b28 <BSP_PB_Init+0xe0>)
 8001ac8:	441a      	add	r2, r3
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	4917      	ldr	r1, [pc, #92]	@ (8001b2c <BSP_PB_Init+0xe4>)
 8001ace:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	f000 fbb3 	bl	8002240 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001ada:	79fa      	ldrb	r2, [r7, #7]
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4a10      	ldr	r2, [pc, #64]	@ (8001b28 <BSP_PB_Init+0xe0>)
 8001ae6:	1898      	adds	r0, r3, r2
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	4a11      	ldr	r2, [pc, #68]	@ (8001b30 <BSP_PB_Init+0xe8>)
 8001aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af0:	461a      	mov	r2, r3
 8001af2:	2100      	movs	r1, #0
 8001af4:	f000 fb78 	bl	80021e8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001af8:	2018      	movs	r0, #24
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <BSP_PB_Init+0xec>)
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	2200      	movs	r2, #0
 8001b04:	4619      	mov	r1, r3
 8001b06:	f000 fa97 	bl	8002038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001b0a:	2318      	movs	r3, #24
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 faad 	bl	800206c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	44020c00 	.word	0x44020c00
 8001b20:	20000018 	.word	0x20000018
 8001b24:	10110000 	.word	0x10110000
 8001b28:	200009f4 	.word	0x200009f4
 8001b2c:	08010860 	.word	0x08010860
 8001b30:	2000001c 	.word	0x2000001c
 8001b34:	20000020 	.word	0x20000020

08001b38 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001b42:	79fa      	ldrb	r2, [r7, #7]
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	@ (8001b60 <BSP_PB_IRQHandler+0x28>)
 8001b4e:	4413      	add	r3, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 fb89 	bl	8002268 <HAL_EXTI_IRQHandler>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200009f4 	.word	0x200009f4

08001b64 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b92:	f06f 0301 	mvn.w	r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e018      	b.n	8001bcc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2294      	movs	r2, #148	@ 0x94
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd8 <BSP_COM_Init+0x5c>)
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f854 	bl	8001c54 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	2294      	movs	r2, #148	@ 0x94
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	4a08      	ldr	r2, [pc, #32]	@ (8001bd8 <BSP_COM_Init+0x5c>)
 8001bb6:	4413      	add	r3, r2
 8001bb8:	6839      	ldr	r1, [r7, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 f80e 	bl	8001bdc <MX_USART_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001bc6:	f06f 0303 	mvn.w	r3, #3
 8001bca:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000a00 	.word	0x20000a00

08001bdc <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001be6:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <MX_USART_Init+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	220c      	movs	r2, #12
 8001bfa:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	895b      	ldrh	r3, [r3, #10]
 8001c00:	461a      	mov	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	891b      	ldrh	r3, [r3, #8]
 8001c12:	461a      	mov	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	899b      	ldrh	r3, [r3, #12]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c28:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f008 ffe2 	bl	800abfa <HAL_UART_Init>
 8001c36:	4603      	mov	r3, r0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000008 	.word	0x20000008

08001c44 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff ff8b 	bl	8001b64 <BSP_PB_Callback>
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	@ 0x28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001c5c:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <COM1_MspInit+0xa8>)
 8001c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c62:	4a26      	ldr	r2, [pc, #152]	@ (8001cfc <COM1_MspInit+0xa8>)
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c6c:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <COM1_MspInit+0xa8>)
 8001c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001c7a:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <COM1_MspInit+0xa8>)
 8001c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c80:	4a1e      	ldr	r2, [pc, #120]	@ (8001cfc <COM1_MspInit+0xa8>)
 8001c82:	f043 0308 	orr.w	r3, r3, #8
 8001c86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cfc <COM1_MspInit+0xa8>)
 8001c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001c98:	4b18      	ldr	r3, [pc, #96]	@ (8001cfc <COM1_MspInit+0xa8>)
 8001c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c9e:	4a17      	ldr	r2, [pc, #92]	@ (8001cfc <COM1_MspInit+0xa8>)
 8001ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ca4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ca8:	4b14      	ldr	r3, [pc, #80]	@ (8001cfc <COM1_MspInit+0xa8>)
 8001caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001cae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001cb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001cc8:	2307      	movs	r3, #7
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480b      	ldr	r0, [pc, #44]	@ (8001d00 <COM1_MspInit+0xac>)
 8001cd4:	f000 fb10 	bl	80022f8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001cd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cdc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	4804      	ldr	r0, [pc, #16]	@ (8001d00 <COM1_MspInit+0xac>)
 8001cee:	f000 fb03 	bl	80022f8 <HAL_GPIO_Init>
}
 8001cf2:	bf00      	nop
 8001cf4:	3728      	adds	r7, #40	@ 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	44020c00 	.word	0x44020c00
 8001d00:	42020c00 	.word	0x42020c00

08001d04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d08:	2003      	movs	r0, #3
 8001d0a:	f000 f98a 	bl	8002022 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d0e:	f003 f8d5 	bl	8004ebc <HAL_RCC_GetSysClockFreq>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <HAL_Init+0x44>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	490b      	ldr	r1, [pc, #44]	@ (8001d4c <HAL_Init+0x48>)
 8001d1e:	5ccb      	ldrb	r3, [r1, r3]
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
 8001d24:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <HAL_Init+0x4c>)
 8001d26:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d28:	2004      	movs	r0, #4
 8001d2a:	f000 f9cf 	bl	80020cc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d2e:	200f      	movs	r0, #15
 8001d30:	f000 f810 	bl	8001d54 <HAL_InitTick>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e002      	b.n	8001d44 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d3e:	f7ff f919 	bl	8000f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	44020c00 	.word	0x44020c00
 8001d4c:	08010840 	.word	0x08010840
 8001d50:	20000004 	.word	0x20000004

08001d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001d60:	4b33      	ldr	r3, [pc, #204]	@ (8001e30 <HAL_InitTick+0xdc>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e05c      	b.n	8001e26 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001d6c:	4b31      	ldr	r3, [pc, #196]	@ (8001e34 <HAL_InitTick+0xe0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d10c      	bne.n	8001d92 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001d78:	4b2f      	ldr	r3, [pc, #188]	@ (8001e38 <HAL_InitTick+0xe4>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e30 <HAL_InitTick+0xdc>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	e037      	b.n	8001e02 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001d92:	f000 f9f3 	bl	800217c <HAL_SYSTICK_GetCLKSourceConfig>
 8001d96:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d023      	beq.n	8001de6 <HAL_InitTick+0x92>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d82d      	bhi.n	8001e00 <HAL_InitTick+0xac>
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_InitTick+0x5e>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d00d      	beq.n	8001dcc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001db0:	e026      	b.n	8001e00 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001db2:	4b21      	ldr	r3, [pc, #132]	@ (8001e38 <HAL_InitTick+0xe4>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e30 <HAL_InitTick+0xdc>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001dc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	60fb      	str	r3, [r7, #12]
        break;
 8001dca:	e01a      	b.n	8001e02 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001dcc:	4b18      	ldr	r3, [pc, #96]	@ (8001e30 <HAL_InitTick+0xdc>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dda:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	60fb      	str	r3, [r7, #12]
        break;
 8001de4:	e00d      	b.n	8001e02 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001de6:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <HAL_InitTick+0xdc>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001df0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001df4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfc:	60fb      	str	r3, [r7, #12]
        break;
 8001dfe:	e000      	b.n	8001e02 <HAL_InitTick+0xae>
        break;
 8001e00:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f940 	bl	8002088 <HAL_SYSTICK_Config>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e009      	b.n	8001e26 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e12:	2200      	movs	r2, #0
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1a:	f000 f90d 	bl	8002038 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001e1e:	4a07      	ldr	r2, [pc, #28]	@ (8001e3c <HAL_InitTick+0xe8>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000028 	.word	0x20000028
 8001e34:	e000e010 	.word	0xe000e010
 8001e38:	20000004 	.word	0x20000004
 8001e3c:	20000024 	.word	0x20000024

08001e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <HAL_IncTick+0x20>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <HAL_IncTick+0x24>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a04      	ldr	r2, [pc, #16]	@ (8001e64 <HAL_IncTick+0x24>)
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000028 	.word	0x20000028
 8001e64:	20000a94 	.word	0x20000a94

08001e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	@ (8001e7c <HAL_GetTick+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000a94 	.word	0x20000a94

08001e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff ffee 	bl	8001e68 <HAL_GetTick>
 8001e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d005      	beq.n	8001ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <HAL_Delay+0x44>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ea6:	bf00      	nop
 8001ea8:	f7ff ffde 	bl	8001e68 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8f7      	bhi.n	8001ea8 <HAL_Delay+0x28>
  {
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000028 	.word	0x20000028

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	@ (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0b      	blt.n	8001f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4907      	ldr	r1, [pc, #28]	@ (8001f64 <__NVIC_EnableIRQ+0x38>)
 8001f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	@ (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	@ (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	@ 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	@ 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ff4c 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002046:	f7ff ff63 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 800204a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	68b9      	ldr	r1, [r7, #8]
 8002050:	6978      	ldr	r0, [r7, #20]
 8002052:	f7ff ffb3 	bl	8001fbc <NVIC_EncodePriority>
 8002056:	4602      	mov	r2, r0
 8002058:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff82 	bl	8001f68 <__NVIC_SetPriority>
}
 8002064:	bf00      	nop
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff56 	bl	8001f2c <__NVIC_EnableIRQ>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002098:	d301      	bcc.n	800209e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800209a:	2301      	movs	r3, #1
 800209c:	e00d      	b.n	80020ba <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800209e:	4a0a      	ldr	r2, [pc, #40]	@ (80020c8 <HAL_SYSTICK_Config+0x40>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80020a6:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <HAL_SYSTICK_Config+0x40>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <HAL_SYSTICK_Config+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a05      	ldr	r2, [pc, #20]	@ (80020c8 <HAL_SYSTICK_Config+0x40>)
 80020b2:	f043 0303 	orr.w	r3, r3, #3
 80020b6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e010 	.word	0xe000e010

080020cc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d844      	bhi.n	8002164 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80020da:	a201      	add	r2, pc, #4	@ (adr r2, 80020e0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80020dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e0:	08002103 	.word	0x08002103
 80020e4:	08002121 	.word	0x08002121
 80020e8:	08002143 	.word	0x08002143
 80020ec:	08002165 	.word	0x08002165
 80020f0:	080020f5 	.word	0x080020f5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80020f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002174 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002174 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6013      	str	r3, [r2, #0]
      break;
 8002100:	e031      	b.n	8002166 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002102:	4b1c      	ldr	r3, [pc, #112]	@ (8002174 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1b      	ldr	r2, [pc, #108]	@ (8002174 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800210e:	4b1a      	ldr	r3, [pc, #104]	@ (8002178 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002110:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002114:	4a18      	ldr	r2, [pc, #96]	@ (8002178 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002116:	f023 030c 	bic.w	r3, r3, #12
 800211a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800211e:	e022      	b.n	8002166 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002120:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a13      	ldr	r2, [pc, #76]	@ (8002174 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002126:	f023 0304 	bic.w	r3, r3, #4
 800212a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800212c:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800212e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002132:	f023 030c 	bic.w	r3, r3, #12
 8002136:	4a10      	ldr	r2, [pc, #64]	@ (8002178 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002140:	e011      	b.n	8002166 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002142:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a0b      	ldr	r2, [pc, #44]	@ (8002174 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002148:	f023 0304 	bic.w	r3, r3, #4
 800214c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002150:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002154:	f023 030c 	bic.w	r3, r3, #12
 8002158:	4a07      	ldr	r2, [pc, #28]	@ (8002178 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800215a:	f043 0308 	orr.w	r3, r3, #8
 800215e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002162:	e000      	b.n	8002166 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002164:	bf00      	nop
  }
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000e010 	.word	0xe000e010
 8002178:	44020c00 	.word	0x44020c00

0800217c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002182:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800218e:	2304      	movs	r3, #4
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	e01e      	b.n	80021d2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002194:	4b13      	ldr	r3, [pc, #76]	@ (80021e4 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002196:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d00f      	beq.n	80021c6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d80f      	bhi.n	80021cc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d003      	beq.n	80021c0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80021b8:	e008      	b.n	80021cc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
        break;
 80021be:	e008      	b.n	80021d2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80021c0:	2301      	movs	r3, #1
 80021c2:	607b      	str	r3, [r7, #4]
        break;
 80021c4:	e005      	b.n	80021d2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80021c6:	2302      	movs	r3, #2
 80021c8:	607b      	str	r3, [r7, #4]
        break;
 80021ca:	e002      	b.n	80021d2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80021cc:	2300      	movs	r3, #0
 80021ce:	607b      	str	r3, [r7, #4]
        break;
 80021d0:	bf00      	nop
    }
  }
  return systick_source;
 80021d2:	687b      	ldr	r3, [r7, #4]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000e010 	.word	0xe000e010
 80021e4:	44020c00 	.word	0x44020c00

080021e8 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	460b      	mov	r3, r1
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80021fa:	7afb      	ldrb	r3, [r7, #11]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d011      	beq.n	8002224 <HAL_EXTI_RegisterCallback+0x3c>
 8002200:	2b02      	cmp	r3, #2
 8002202:	dc13      	bgt.n	800222c <HAL_EXTI_RegisterCallback+0x44>
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <HAL_EXTI_RegisterCallback+0x26>
 8002208:	2b01      	cmp	r3, #1
 800220a:	d007      	beq.n	800221c <HAL_EXTI_RegisterCallback+0x34>
 800220c:	e00e      	b.n	800222c <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	609a      	str	r2, [r3, #8]
      break;
 800221a:	e00a      	b.n	8002232 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	605a      	str	r2, [r3, #4]
      break;
 8002222:	e006      	b.n	8002232 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	609a      	str	r2, [r3, #8]
      break;
 800222a:	e002      	b.n	8002232 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	75fb      	strb	r3, [r7, #23]
      break;
 8002230:	bf00      	nop
  }

  return status;
 8002232:	7dfb      	ldrb	r3, [r7, #23]
}
 8002234:	4618      	mov	r0, r3
 8002236:	371c      	adds	r7, #28
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e003      	b.n	800225c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800225a:	2300      	movs	r3, #0
  }
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	2201      	movs	r2, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	4b17      	ldr	r3, [pc, #92]	@ (80022f0 <HAL_EXTI_IRQHandler+0x88>)
 8002292:	4413      	add	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	4b0d      	ldr	r3, [pc, #52]	@ (80022f4 <HAL_EXTI_IRQHandler+0x8c>)
 80022c0:	4413      	add	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d009      	beq.n	80022e8 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	4798      	blx	r3
    }
  }
}
 80022e8:	bf00      	nop
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	4402200c 	.word	0x4402200c
 80022f4:	44022010 	.word	0x44022010

080022f8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002306:	e136      	b.n	8002576 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	2101      	movs	r1, #1
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
 8002314:	4013      	ands	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8128 	beq.w	8002570 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x38>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b12      	cmp	r3, #18
 800232e:	d125      	bne.n	800237c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	08da      	lsrs	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3208      	adds	r2, #8
 8002338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	220f      	movs	r2, #15
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4013      	ands	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	f003 020f 	and.w	r2, r3, #15
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	08da      	lsrs	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3208      	adds	r2, #8
 8002376:	6979      	ldr	r1, [r7, #20]
 8002378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4013      	ands	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0203 	and.w	r2, r3, #3
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d00b      	beq.n	80023d0 <HAL_GPIO_Init+0xd8>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d007      	beq.n	80023d0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023c4:	2b11      	cmp	r3, #17
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b12      	cmp	r3, #18
 80023ce:	d130      	bne.n	8002432 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4013      	ands	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002406:	2201      	movs	r2, #1
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	4013      	ands	r3, r2
 8002414:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	f003 0201 	and.w	r2, r3, #1
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b03      	cmp	r3, #3
 8002438:	d017      	beq.n	800246a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	4013      	ands	r3, r2
 8002450:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4313      	orrs	r3, r2
 8002462:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d07c      	beq.n	8002570 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002476:	4a47      	ldr	r2, [pc, #284]	@ (8002594 <HAL_GPIO_Init+0x29c>)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3318      	adds	r3, #24
 800247e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002482:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	220f      	movs	r2, #15
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	4013      	ands	r3, r2
 8002498:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	0a9a      	lsrs	r2, r3, #10
 800249e:	4b3e      	ldr	r3, [pc, #248]	@ (8002598 <HAL_GPIO_Init+0x2a0>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	f002 0203 	and.w	r2, r2, #3
 80024a8:	00d2      	lsls	r2, r2, #3
 80024aa:	4093      	lsls	r3, r2
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80024b2:	4938      	ldr	r1, [pc, #224]	@ (8002594 <HAL_GPIO_Init+0x29c>)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	3318      	adds	r3, #24
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80024c0:	4b34      	ldr	r3, [pc, #208]	@ (8002594 <HAL_GPIO_Init+0x29c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4013      	ands	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80024e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002594 <HAL_GPIO_Init+0x29c>)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80024ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002594 <HAL_GPIO_Init+0x29c>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	4013      	ands	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800250e:	4a21      	ldr	r2, [pc, #132]	@ (8002594 <HAL_GPIO_Init+0x29c>)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002514:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <HAL_GPIO_Init+0x29c>)
 8002516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800251a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	43db      	mvns	r3, r3
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	4013      	ands	r3, r2
 8002524:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800253a:	4a16      	ldr	r2, [pc, #88]	@ (8002594 <HAL_GPIO_Init+0x29c>)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002542:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <HAL_GPIO_Init+0x29c>)
 8002544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002548:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	43db      	mvns	r3, r3
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4013      	ands	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002568:	4a0a      	ldr	r2, [pc, #40]	@ (8002594 <HAL_GPIO_Init+0x29c>)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	3301      	adds	r3, #1
 8002574:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	f47f aec1 	bne.w	8002308 <HAL_GPIO_Init+0x10>
  }
}
 8002586:	bf00      	nop
 8002588:	bf00      	nop
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	44022000 	.word	0x44022000
 8002598:	002f7f7f 	.word	0x002f7f7f

0800259c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	807b      	strh	r3, [r7, #2]
 80025a8:	4613      	mov	r3, r2
 80025aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025ac:	787b      	ldrb	r3, [r7, #1]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025b2:	887a      	ldrh	r2, [r7, #2]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025b8:	e002      	b.n	80025c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4013      	ands	r3, r2
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	43d9      	mvns	r1, r3
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	400b      	ands	r3, r1
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	619a      	str	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e02a      	b.n	8002668 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fe fcac 	bl	8000f84 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 8002642:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	68f9      	ldr	r1, [r7, #12]
 800264c:	430b      	orrs	r3, r1
 800264e:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e08d      	b.n	800279e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe fc90 	bl	8000fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	@ 0x24
 80026a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d107      	bne.n	80026ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	e006      	b.n	80026f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80026f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d108      	bne.n	8002712 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	e007      	b.n	8002722 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002720:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002730:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002734:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002744:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69d9      	ldr	r1, [r3, #28]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1a      	ldr	r2, [r3, #32]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2220      	movs	r2, #32
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d138      	bne.n	800282e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e032      	b.n	8002830 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2224      	movs	r2, #36	@ 0x24
 80027d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0201 	bic.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	e000      	b.n	8002830 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800282e:	2302      	movs	r3, #2
  }
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b20      	cmp	r3, #32
 8002850:	d139      	bne.n	80028c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800285c:	2302      	movs	r3, #2
 800285e:	e033      	b.n	80028c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2224      	movs	r2, #36	@ 0x24
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800288e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0201 	orr.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e000      	b.n	80028c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028c6:	2302      	movs	r3, #2
  }
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80028e0:	230a      	movs	r3, #10
 80028e2:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80028e4:	e002      	b.n	80028ec <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f9      	bne.n	80028e6 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80028f2:	887b      	ldrh	r3, [r7, #2]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80028fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	b29b      	uxth	r3, r3
 8002904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002908:	b29b      	uxth	r3, r3
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002922:	230a      	movs	r3, #10
 8002924:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002926:	e002      	b.n	800292e <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3b01      	subs	r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f9      	bne.n	8002928 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8002934:	887b      	ldrh	r3, [r7, #2]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800293c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	0c1b      	lsrs	r3, r3, #16
 8002944:	b29b      	uxth	r3, r3
 8002946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294a:	b29b      	uxth	r3, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002964:	230a      	movs	r3, #10
 8002966:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002968:	e002      	b.n	8002970 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3b01      	subs	r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f9      	bne.n	800296a <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8002976:	887b      	ldrh	r3, [r7, #2]
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800297e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	0c1b      	lsrs	r3, r3, #16
 8002986:	b29b      	uxth	r3, r3
 8002988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800298c:	b29b      	uxth	r3, r3
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b086      	sub	sp, #24
 800299e:	af02      	add	r7, sp, #8
 80029a0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0f3      	b.n	8002b94 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7fe fe23 	bl	800160c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2203      	movs	r2, #3
 80029ca:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f008 ff59 	bl	800b88a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	7c1a      	ldrb	r2, [r3, #16]
 80029e0:	f88d 2000 	strb.w	r2, [sp]
 80029e4:	3304      	adds	r3, #4
 80029e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e8:	f008 ff1d 	bl	800b826 <USB_CoreInit>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2202      	movs	r2, #2
 80029f6:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e0ca      	b.n	8002b94 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f008 ff55 	bl	800b8b4 <USB_SetCurrentMode>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0bb      	b.n	8002b94 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	73fb      	strb	r3, [r7, #15]
 8002a20:	e03f      	b.n	8002aa2 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a22:	7bfa      	ldrb	r2, [r7, #15]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	440b      	add	r3, r1
 8002a30:	3315      	adds	r3, #21
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	440b      	add	r3, r1
 8002a44:	3314      	adds	r3, #20
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a4a:	7bfa      	ldrb	r2, [r7, #15]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	440b      	add	r3, r1
 8002a58:	3317      	adds	r3, #23
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3324      	adds	r3, #36	@ 0x24
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	3328      	adds	r3, #40	@ 0x28
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	440b      	add	r3, r1
 8002a96:	3304      	adds	r3, #4
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	791b      	ldrb	r3, [r3, #4]
 8002aa6:	7bfa      	ldrb	r2, [r7, #15]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d3ba      	bcc.n	8002a22 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aac:	2300      	movs	r3, #0
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	e044      	b.n	8002b3c <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	440b      	add	r3, r1
 8002ac0:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	440b      	add	r3, r1
 8002ad6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ade:	7bfa      	ldrb	r2, [r7, #15]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	440b      	add	r3, r1
 8002aec:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	440b      	add	r3, r1
 8002b18:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	440b      	add	r3, r1
 8002b2e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	791b      	ldrb	r3, [r3, #4]
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d3b5      	bcc.n	8002ab2 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	7c1a      	ldrb	r2, [r3, #16]
 8002b4e:	f88d 2000 	strb.w	r2, [sp]
 8002b52:	3304      	adds	r3, #4
 8002b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b56:	f008 fed0 	bl	800b8fa <USB_DevInit>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e013      	b.n	8002b94 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	7b1b      	ldrb	r3, [r3, #12]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d102      	bne.n	8002b88 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f001 fb6b 	bl	800425e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f00a fd29 	bl	800d5e4 <USB_DevDisconnect>

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_PCD_Start+0x16>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e012      	b.n	8002bd8 <HAL_PCD_Start+0x3c>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f008 fe4f 	bl	800b862 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f00a fcfa 	bl	800d5c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f00a fd0a 	bl	800d606 <USB_ReadInterrupts>
 8002bf2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 faf2 	bl	80031e8 <PCD_EP_ISR_Handler>

    return;
 8002c04:	e0de      	b.n	8002dc4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d010      	beq.n	8002c32 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8002c1e:	400b      	ands	r3, r1
 8002c20:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f00b fbbb 	bl	800e39e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c28:	2100      	movs	r1, #0
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f8e1 	bl	8002df2 <HAL_PCD_SetAddress>

    return;
 8002c30:	e0c8      	b.n	8002dc4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d009      	beq.n	8002c50 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8002c4a:	400b      	ands	r3, r1
 8002c4c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002c4e:	e0b9      	b.n	8002dc4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8002c68:	400b      	ands	r3, r1
 8002c6a:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002c6c:	e0aa      	b.n	8002dc4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d029      	beq.n	8002ccc <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0204 	bic.w	r2, r2, #4
 8002c86:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0208 	bic.w	r2, r2, #8
 8002c96:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d107      	bne.n	8002cb2 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002caa:	2100      	movs	r1, #0
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f001 faf8 	bl	80042a2 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f893 	bl	8002dde <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002cc6:	400b      	ands	r3, r1
 8002cc8:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002cca:	e07b      	b.n	8002dc4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01c      	beq.n	8002d10 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0208 	orr.w	r2, r2, #8
 8002ce4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8002cf4:	400b      	ands	r3, r1
 8002cf6:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0204 	orr.w	r2, r2, #4
 8002d06:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f85e 	bl	8002dca <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002d0e:	e059      	b.n	8002dc4 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d033      	beq.n	8002d82 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8002d28:	400b      	ands	r3, r1
 8002d2a:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d121      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0204 	orr.w	r2, r2, #4
 8002d44:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0208 	orr.w	r2, r2, #8
 8002d54:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d64:	089b      	lsrs	r3, r3, #2
 8002d66:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002d70:	2101      	movs	r1, #1
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f001 fa95 	bl	80042a2 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002d78:	e024      	b.n	8002dc4 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f825 	bl	8002dca <HAL_PCD_SuspendCallback>
    return;
 8002d80:	e020      	b.n	8002dc4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00c      	beq.n	8002da6 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8002d9a:	400b      	ands	r3, r1
 8002d9c:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f00b faef 	bl	800e382 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002da4:	e00e      	b.n	8002dc4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d009      	beq.n	8002dc4 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8002dbe:	400b      	ands	r3, r1
 8002dc0:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002dc2:	bf00      	nop
  }
}
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_PCD_SetAddress+0x1a>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e012      	b.n	8002e32 <HAL_PCD_SetAddress+0x40>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f00a fbba 	bl	800d59c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	4608      	mov	r0, r1
 8002e44:	4611      	mov	r1, r2
 8002e46:	461a      	mov	r2, r3
 8002e48:	4603      	mov	r3, r0
 8002e4a:	70fb      	strb	r3, [r7, #3]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	803b      	strh	r3, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	da0f      	bge.n	8002e80 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	f003 0207 	and.w	r2, r3, #7
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	3310      	adds	r3, #16
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	3304      	adds	r3, #4
 8002e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	705a      	strb	r2, [r3, #1]
 8002e7e:	e00f      	b.n	8002ea0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 0207 	and.w	r2, r3, #7
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	3304      	adds	r3, #4
 8002e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002eac:	883b      	ldrh	r3, [r7, #0]
 8002eae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	78ba      	ldrb	r2, [r7, #2]
 8002eba:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ebc:	78bb      	ldrb	r3, [r7, #2]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d102      	bne.n	8002ec8 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_PCD_EP_Open+0x9c>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e00e      	b.n	8002ef4 <HAL_PCD_EP_Open+0xba>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68f9      	ldr	r1, [r7, #12]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f008 fd2b 	bl	800b940 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8002ef2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	da0f      	bge.n	8002f30 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	f003 0207 	and.w	r2, r3, #7
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	3310      	adds	r3, #16
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	3304      	adds	r3, #4
 8002f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	705a      	strb	r2, [r3, #1]
 8002f2e:	e00f      	b.n	8002f50 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	f003 0207 	and.w	r2, r3, #7
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	3304      	adds	r3, #4
 8002f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_PCD_EP_Close+0x6e>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e00e      	b.n	8002f88 <HAL_PCD_EP_Close+0x8c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68f9      	ldr	r1, [r7, #12]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f009 f841 	bl	800c000 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa0:	7afb      	ldrb	r3, [r7, #11]
 8002fa2:	f003 0207 	and.w	r2, r3, #7
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd2:	7afb      	ldrb	r3, [r7, #11]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6979      	ldr	r1, [r7, #20]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f009 f995 	bl	800c314 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	f003 0207 	and.w	r2, r3, #7
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	440b      	add	r3, r1
 8003012:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8003016:	681b      	ldr	r3, [r3, #0]
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	460b      	mov	r3, r1
 8003032:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003034:	7afb      	ldrb	r3, [r7, #11]
 8003036:	f003 0207 	and.w	r2, r3, #7
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	3310      	adds	r3, #16
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	3304      	adds	r3, #4
 800304a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2200      	movs	r2, #0
 800306a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2201      	movs	r2, #1
 8003070:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003072:	7afb      	ldrb	r3, [r7, #11]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	b2da      	uxtb	r2, r3
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6979      	ldr	r1, [r7, #20]
 8003084:	4618      	mov	r0, r3
 8003086:	f009 f945 	bl	800c314 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	7912      	ldrb	r2, [r2, #4]
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e040      	b.n	8003134 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	da0f      	bge.n	80030da <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 0207 	and.w	r2, r3, #7
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	3310      	adds	r3, #16
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	3304      	adds	r3, #4
 80030d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	705a      	strb	r2, [r3, #1]
 80030d8:	e00d      	b.n	80030f6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	3304      	adds	r3, #4
 80030ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	b2da      	uxtb	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_PCD_EP_SetStall+0x82>
 8003112:	2302      	movs	r3, #2
 8003114:	e00e      	b.n	8003134 <HAL_PCD_EP_SetStall+0xa0>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68f9      	ldr	r1, [r7, #12]
 8003124:	4618      	mov	r0, r3
 8003126:	f00a f95f 	bl	800d3e8 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	7912      	ldrb	r2, [r2, #4]
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e042      	b.n	80031e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800315a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800315e:	2b00      	cmp	r3, #0
 8003160:	da0f      	bge.n	8003182 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 0207 	and.w	r2, r3, #7
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	3310      	adds	r3, #16
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	3304      	adds	r3, #4
 8003178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	705a      	strb	r2, [r3, #1]
 8003180:	e00f      	b.n	80031a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	f003 0207 	and.w	r2, r3, #7
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	3304      	adds	r3, #4
 800319a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_PCD_EP_ClrStall+0x86>
 80031be:	2302      	movs	r3, #2
 80031c0:	e00e      	b.n	80031e0 <HAL_PCD_EP_ClrStall+0xa4>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68f9      	ldr	r1, [r7, #12]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f00a f94f 	bl	800d474 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08e      	sub	sp, #56	@ 0x38
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031f0:	e326      	b.n	8003840 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f8:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 80031fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8003206:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 8124 	bne.w	8003458 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003210:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2b00      	cmp	r3, #0
 8003218:	d13e      	bne.n	8003298 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4b89      	ldr	r3, [pc, #548]	@ (8003448 <PCD_EP_ISR_Handler+0x260>)
 8003222:	4013      	ands	r3, r2
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003230:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3314      	adds	r3, #20
 8003236:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003242:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800324e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003250:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	441a      	add	r2, r3
 800325c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800325e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003260:	2100      	movs	r1, #0
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f00b f873 	bl	800e34e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	7c5b      	ldrb	r3, [r3, #17]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 82e6 	beq.w	8003840 <PCD_EP_ISR_Handler+0x658>
 8003274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	f040 82e1 	bne.w	8003840 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	7c5b      	ldrb	r3, [r3, #17]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003288:	b2da      	uxtb	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	745a      	strb	r2, [r3, #17]
 8003296:	e2d3      	b.n	8003840 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800329e:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80032a8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80032aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d027      	beq.n	8003302 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	4619      	mov	r1, r3
 80032bc:	4610      	mov	r0, r2
 80032be:	f7ff fb09 	bl	80028d4 <PCD_GET_EP_RX_CNT>
 80032c2:	4603      	mov	r3, r0
 80032c4:	461a      	mov	r2, r3
 80032c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 80032d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80032d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032da:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f00a fa01 	bl	800d6e4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b58      	ldr	r3, [pc, #352]	@ (800344c <PCD_EP_ISR_Handler+0x264>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032f8:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f00a fffa 	bl	800e2f4 <HAL_PCD_SetupStageCallback>
 8003300:	e29e      	b.n	8003840 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8003302:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003306:	2b00      	cmp	r3, #0
 8003308:	f280 829a 	bge.w	8003840 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4b4e      	ldr	r3, [pc, #312]	@ (800344c <PCD_EP_ISR_Handler+0x264>)
 8003314:	4013      	ands	r3, r2
 8003316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800331e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003322:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	4619      	mov	r1, r3
 800332e:	4610      	mov	r0, r2
 8003330:	f7ff fad0 	bl	80028d4 <PCD_GET_EP_RX_CNT>
 8003334:	4603      	mov	r3, r0
 8003336:	461a      	mov	r2, r3
 8003338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800333a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800333c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d019      	beq.n	8003378 <PCD_EP_ISR_Handler+0x190>
 8003344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d015      	beq.n	8003378 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003352:	6959      	ldr	r1, [r3, #20]
 8003354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003356:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800335c:	b29b      	uxth	r3, r3
 800335e:	f00a f9c1 	bl	800d6e4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	441a      	add	r2, r3
 800336c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003370:	2100      	movs	r1, #0
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f00a ffd0 	bl	800e318 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003380:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003386:	2b00      	cmp	r3, #0
 8003388:	f040 825a 	bne.w	8003840 <PCD_EP_ISR_Handler+0x658>
 800338c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800338e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003392:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003396:	f000 8253 	beq.w	8003840 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800339a:	4b2d      	ldr	r3, [pc, #180]	@ (8003450 <PCD_EP_ISR_Handler+0x268>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4a2c      	ldr	r2, [pc, #176]	@ (8003450 <PCD_EP_ISR_Handler+0x268>)
 80033a0:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80033a4:	6053      	str	r3, [r2, #4]
 80033a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d106      	bne.n	80033bc <PCD_EP_ISR_Handler+0x1d4>
 80033ae:	4b28      	ldr	r3, [pc, #160]	@ (8003450 <PCD_EP_ISR_Handler+0x268>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4a27      	ldr	r2, [pc, #156]	@ (8003450 <PCD_EP_ISR_Handler+0x268>)
 80033b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033b8:	6053      	str	r3, [r2, #4]
 80033ba:	e02e      	b.n	800341a <PCD_EP_ISR_Handler+0x232>
 80033bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80033c2:	d814      	bhi.n	80033ee <PCD_EP_ISR_Handler+0x206>
 80033c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <PCD_EP_ISR_Handler+0x1f6>
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3301      	adds	r3, #1
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	4b1c      	ldr	r3, [pc, #112]	@ (8003450 <PCD_EP_ISR_Handler+0x268>)
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	069b      	lsls	r3, r3, #26
 80033e6:	491a      	ldr	r1, [pc, #104]	@ (8003450 <PCD_EP_ISR_Handler+0x268>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]
 80033ec:	e015      	b.n	800341a <PCD_EP_ISR_Handler+0x232>
 80033ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d102      	bne.n	8003408 <PCD_EP_ISR_Handler+0x220>
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	3b01      	subs	r3, #1
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	4b11      	ldr	r3, [pc, #68]	@ (8003450 <PCD_EP_ISR_Handler+0x268>)
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	069b      	lsls	r3, r3, #26
 8003410:	4313      	orrs	r3, r2
 8003412:	4a0f      	ldr	r2, [pc, #60]	@ (8003450 <PCD_EP_ISR_Handler+0x268>)
 8003414:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003418:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4b0c      	ldr	r3, [pc, #48]	@ (8003454 <PCD_EP_ISR_Handler+0x26c>)
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e1fb      	b.n	8003840 <PCD_EP_ISR_Handler+0x658>
 8003448:	07ff8f0f 	.word	0x07ff8f0f
 800344c:	07ff0f8f 	.word	0x07ff0f8f
 8003450:	40016400 	.word	0x40016400
 8003454:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800346a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800346e:	2b00      	cmp	r3, #0
 8003470:	f280 80bd 	bge.w	80035ee <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4b9e      	ldr	r3, [pc, #632]	@ (8003700 <PCD_EP_ISR_Handler+0x518>)
 8003486:	4013      	ands	r3, r2
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800349e:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80034a0:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	4413      	add	r3, r2
 80034b4:	3304      	adds	r3, #4
 80034b6:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80034b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ba:	7b1b      	ldrb	r3, [r3, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d116      	bne.n	80034ee <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	4619      	mov	r1, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f7ff fa02 	bl	80028d4 <PCD_GET_EP_RX_CNT>
 80034d0:	4603      	mov	r3, r0
 80034d2:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 80034d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d067      	beq.n	80035aa <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e0:	6959      	ldr	r1, [r3, #20]
 80034e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e4:	88da      	ldrh	r2, [r3, #6]
 80034e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80034e8:	f00a f8fc 	bl	800d6e4 <USB_ReadPMA>
 80034ec:	e05d      	b.n	80035aa <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80034ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f0:	78db      	ldrb	r3, [r3, #3]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d108      	bne.n	8003508 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80034f6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80034f8:	461a      	mov	r2, r3
 80034fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f9ad 	bl	800385c <HAL_PCD_EP_DB_Receive>
 8003502:	4603      	mov	r3, r0
 8003504:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003506:	e050      	b.n	80035aa <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b7a      	ldr	r3, [pc, #488]	@ (8003704 <PCD_EP_ISR_Handler+0x51c>)
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	441a      	add	r2, r3
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003532:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003536:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	461a      	mov	r2, r3
 800353e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d016      	beq.n	800357e <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4619      	mov	r1, r3
 800355a:	4610      	mov	r0, r2
 800355c:	f7ff f9db 	bl	8002916 <PCD_GET_EP_DBUF0_CNT>
 8003560:	4603      	mov	r3, r0
 8003562:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8003564:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01f      	beq.n	80035aa <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003570:	6959      	ldr	r1, [r3, #20]
 8003572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003574:	891a      	ldrh	r2, [r3, #8]
 8003576:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003578:	f00a f8b4 	bl	800d6e4 <USB_ReadPMA>
 800357c:	e015      	b.n	80035aa <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	4619      	mov	r1, r3
 8003588:	4610      	mov	r0, r2
 800358a:	f7ff f9e5 	bl	8002958 <PCD_GET_EP_DBUF1_CNT>
 800358e:	4603      	mov	r3, r0
 8003590:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8003592:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359e:	6959      	ldr	r1, [r3, #20]
 80035a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a2:	895a      	ldrh	r2, [r3, #10]
 80035a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80035a6:	f00a f89d 	bl	800d6e4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80035aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ac:	69da      	ldr	r2, [r3, #28]
 80035ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80035b0:	441a      	add	r2, r3
 80035b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80035b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80035bc:	441a      	add	r2, r3
 80035be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80035c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d004      	beq.n	80035d4 <PCD_EP_ISR_Handler+0x3ec>
 80035ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80035cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d206      	bcs.n	80035e2 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80035d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f00a fe9c 	bl	800e318 <HAL_PCD_DataOutStageCallback>
 80035e0:	e005      	b.n	80035ee <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80035e8:	4618      	mov	r0, r3
 80035ea:	f008 fe93 	bl	800c314 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 80035ee:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80035f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8123 	beq.w	8003840 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 80035fa:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	3310      	adds	r3, #16
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	4413      	add	r3, r2
 800360c:	3304      	adds	r3, #4
 800360e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b39      	ldr	r3, [pc, #228]	@ (8003708 <PCD_EP_ISR_Handler+0x520>)
 8003622:	4013      	ands	r3, r2
 8003624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003636:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800363a:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800363c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800363e:	78db      	ldrb	r3, [r3, #3]
 8003640:	2b01      	cmp	r3, #1
 8003642:	f040 80b8 	bne.w	80037b6 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8003646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003648:	2200      	movs	r2, #0
 800364a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800364c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364e:	7b1b      	ldrb	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 80a9 	beq.w	80037a8 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003656:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d055      	beq.n	800370c <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003662:	785b      	ldrb	r3, [r3, #1]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d124      	bne.n	80036b2 <PCD_EP_ISR_Handler+0x4ca>
 8003668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003672:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003682:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003686:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003696:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036aa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	e07a      	b.n	80037a8 <PCD_EP_ISR_Handler+0x5c0>
 80036b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b4:	785b      	ldrb	r3, [r3, #1]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d176      	bne.n	80037a8 <PCD_EP_ISR_Handler+0x5c0>
 80036ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036d8:	b292      	uxth	r2, r2
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80036e6:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80036ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	e054      	b.n	80037a8 <PCD_EP_ISR_Handler+0x5c0>
 80036fe:	bf00      	nop
 8003700:	07ff0f8f 	.word	0x07ff0f8f
 8003704:	07ff8f8f 	.word	0x07ff8f8f
 8003708:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800370c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800370e:	785b      	ldrb	r3, [r3, #1]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d124      	bne.n	800375e <PCD_EP_ISR_Handler+0x576>
 8003714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800371e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800372e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003732:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003742:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003752:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003756:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800375a:	605a      	str	r2, [r3, #4]
 800375c:	e024      	b.n	80037a8 <PCD_EP_ISR_Handler+0x5c0>
 800375e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003760:	785b      	ldrb	r3, [r3, #1]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d120      	bne.n	80037a8 <PCD_EP_ISR_Handler+0x5c0>
 8003766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003770:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003780:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003784:	b292      	uxth	r2, r2
 8003786:	605a      	str	r2, [r3, #4]
 8003788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003792:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037a4:	6852      	ldr	r2, [r2, #4]
 80037a6:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	4619      	mov	r1, r3
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f00a fdcd 	bl	800e34e <HAL_PCD_DataInStageCallback>
 80037b4:	e044      	b.n	8003840 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80037b6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80037b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d139      	bne.n	8003834 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037d8:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 80037da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d906      	bls.n	80037f2 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 80037e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037e6:	699a      	ldr	r2, [r3, #24]
 80037e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80037ea:	1ad2      	subs	r2, r2, r3
 80037ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ee:	619a      	str	r2, [r3, #24]
 80037f0:	e002      	b.n	80037f8 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 80037f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f4:	2200      	movs	r2, #0
 80037f6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80037f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d106      	bne.n	800380e <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	4619      	mov	r1, r3
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f00a fda1 	bl	800e34e <HAL_PCD_DataInStageCallback>
 800380c:	e018      	b.n	8003840 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800380e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003810:	695a      	ldr	r2, [r3, #20]
 8003812:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003814:	441a      	add	r2, r3
 8003816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003818:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800381a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800381c:	69da      	ldr	r2, [r3, #28]
 800381e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003820:	441a      	add	r2, r3
 8003822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003824:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800382c:	4618      	mov	r0, r3
 800382e:	f008 fd71 	bl	800c314 <USB_EPStartXfer>
 8003832:	e005      	b.n	8003840 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003834:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003836:	461a      	mov	r2, r3
 8003838:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f8e8 	bl	8003a10 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800384a:	2b00      	cmp	r3, #0
 800384c:	f47f acd1 	bne.w	80031f2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3738      	adds	r7, #56	@ 0x38
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop

0800385c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	@ 0x28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800386a:	88fb      	ldrh	r3, [r7, #6]
 800386c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d062      	beq.n	800393a <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f7ff f849 	bl	8002916 <PCD_GET_EP_DBUF0_CNT>
 8003884:	4603      	mov	r3, r0
 8003886:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	699a      	ldr	r2, [r3, #24]
 800388c:	8bfb      	ldrh	r3, [r7, #30]
 800388e:	429a      	cmp	r2, r3
 8003890:	d306      	bcc.n	80038a0 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	8bfb      	ldrh	r3, [r7, #30]
 8003898:	1ad2      	subs	r2, r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	619a      	str	r2, [r3, #24]
 800389e:	e002      	b.n	80038a6 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2200      	movs	r2, #0
 80038a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11b      	bne.n	80038e6 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4b52      	ldr	r3, [pc, #328]	@ (8003a08 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	441a      	add	r2, r3
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038e4:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d017      	beq.n	8003920 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b42      	ldr	r3, [pc, #264]	@ (8003a0c <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003902:	4013      	ands	r3, r2
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	441a      	add	r2, r3
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800391a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800391e:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003920:	8bfb      	ldrh	r3, [r7, #30]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d06b      	beq.n	80039fe <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6959      	ldr	r1, [r3, #20]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	891a      	ldrh	r2, [r3, #8]
 8003932:	8bfb      	ldrh	r3, [r7, #30]
 8003934:	f009 fed6 	bl	800d6e4 <USB_ReadPMA>
 8003938:	e061      	b.n	80039fe <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	4619      	mov	r1, r3
 8003944:	4610      	mov	r0, r2
 8003946:	f7ff f807 	bl	8002958 <PCD_GET_EP_DBUF1_CNT>
 800394a:	4603      	mov	r3, r0
 800394c:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	8bfb      	ldrh	r3, [r7, #30]
 8003954:	429a      	cmp	r2, r3
 8003956:	d306      	bcc.n	8003966 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	699a      	ldr	r2, [r3, #24]
 800395c:	8bfb      	ldrh	r3, [r7, #30]
 800395e:	1ad2      	subs	r2, r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	619a      	str	r2, [r3, #24]
 8003964:	e002      	b.n	800396c <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2200      	movs	r2, #0
 800396a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d11b      	bne.n	80039ac <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b20      	ldr	r3, [pc, #128]	@ (8003a08 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003986:	4013      	ands	r3, r2
 8003988:	627b      	str	r3, [r7, #36]	@ 0x24
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003990:	627b      	str	r3, [r7, #36]	@ 0x24
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	441a      	add	r2, r3
 80039a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039aa:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80039ac:	88fb      	ldrh	r3, [r7, #6]
 80039ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d117      	bne.n	80039e6 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	4b11      	ldr	r3, [pc, #68]	@ (8003a0c <HAL_PCD_EP_DB_Receive+0x1b0>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	623b      	str	r3, [r7, #32]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	441a      	add	r2, r3
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039e4:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80039e6:	8bfb      	ldrh	r3, [r7, #30]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	6959      	ldr	r1, [r3, #20]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	895a      	ldrh	r2, [r3, #10]
 80039f8:	8bfb      	ldrh	r3, [r7, #30]
 80039fa:	f009 fe73 	bl	800d6e4 <USB_ReadPMA>
    }
  }

  return count;
 80039fe:	8bfb      	ldrh	r3, [r7, #30]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3728      	adds	r7, #40	@ 0x28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	07ffbf8f 	.word	0x07ffbf8f
 8003a0c:	07ff8f8f 	.word	0x07ff8f8f

08003a10 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08e      	sub	sp, #56	@ 0x38
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 81d5 	beq.w	8003dd4 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	4619      	mov	r1, r3
 8003a34:	4610      	mov	r0, r2
 8003a36:	f7fe ff6e 	bl	8002916 <PCD_GET_EP_DBUF0_CNT>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	8bfb      	ldrh	r3, [r7, #30]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d906      	bls.n	8003a56 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	699a      	ldr	r2, [r3, #24]
 8003a4c:	8bfb      	ldrh	r3, [r7, #30]
 8003a4e:	1ad2      	subs	r2, r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	619a      	str	r2, [r3, #24]
 8003a54:	e002      	b.n	8003a5c <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f040 80c1 	bne.w	8003be8 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	785b      	ldrb	r3, [r3, #1]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d124      	bne.n	8003ab8 <HAL_PCD_EP_DB_Transmit+0xa8>
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a8c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003aac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ab0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	e024      	b.n	8003b02 <HAL_PCD_EP_DB_Transmit+0xf2>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	785b      	ldrb	r3, [r3, #1]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d120      	bne.n	8003b02 <HAL_PCD_EP_DB_Transmit+0xf2>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003aca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ada:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ade:	b292      	uxth	r2, r2
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003aec:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003afa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	785b      	ldrb	r3, [r3, #1]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d124      	bne.n	8003b54 <HAL_PCD_EP_DB_Transmit+0x144>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b28:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b4c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	e024      	b.n	8003b9e <HAL_PCD_EP_DB_Transmit+0x18e>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	785b      	ldrb	r3, [r3, #1]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d120      	bne.n	8003b9e <HAL_PCD_EP_DB_Transmit+0x18e>
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b7a:	b292      	uxth	r2, r2
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003b88:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b9a:	6852      	ldr	r2, [r2, #4]
 8003b9c:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f00a fbd2 	bl	800e34e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 82e5 	beq.w	8004180 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4b8e      	ldr	r3, [pc, #568]	@ (8003e00 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	441a      	add	r2, r3
 8003bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e2cb      	b.n	8004180 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d017      	beq.n	8003c22 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4b7f      	ldr	r3, [pc, #508]	@ (8003e00 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	441a      	add	r2, r3
 8003c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c20:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	f040 82a9 	bne.w	8004180 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	8bfb      	ldrh	r3, [r7, #30]
 8003c34:	441a      	add	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	69da      	ldr	r2, [r3, #28]
 8003c3e:	8bfb      	ldrh	r3, [r7, #30]
 8003c40:	441a      	add	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	6a1a      	ldr	r2, [r3, #32]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d309      	bcc.n	8003c66 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	6a1a      	ldr	r2, [r3, #32]
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5e:	1ad2      	subs	r2, r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	621a      	str	r2, [r3, #32]
 8003c64:	e014      	b.n	8003c90 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8003c6e:	8bfb      	ldrh	r3, [r7, #30]
 8003c70:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003c7a:	e009      	b.n	8003c90 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	785b      	ldrb	r3, [r3, #1]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d16a      	bne.n	8003d6e <HAL_PCD_EP_DB_Transmit+0x35e>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ca2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cb6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d112      	bne.n	8003ce8 <HAL_PCD_EP_DB_Transmit+0x2d8>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ccc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cdc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ce0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e06a      	b.n	8003dbe <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cec:	d81e      	bhi.n	8003d2c <HAL_PCD_EP_DB_Transmit+0x31c>
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8003cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d00:	3301      	adds	r3, #1
 8003d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d12:	6819      	ldr	r1, [r3, #0]
 8003d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d16:	069a      	lsls	r2, r3, #26
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d26:	430a      	orrs	r2, r1
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	e048      	b.n	8003dbe <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d102      	bne.n	8003d42 <HAL_PCD_EP_DB_Transmit+0x332>
 8003d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d54:	069b      	lsls	r3, r3, #26
 8003d56:	431a      	orrs	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d66:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e027      	b.n	8003dbe <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	785b      	ldrb	r3, [r3, #1]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d123      	bne.n	8003dbe <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d94:	b292      	uxth	r2, r2
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003da2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003da6:	6819      	ldr	r1, [r3, #0]
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	041a      	lsls	r2, r3, #16
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003db6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	6959      	ldr	r1, [r3, #20]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	891a      	ldrh	r2, [r3, #8]
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f009 fc28 	bl	800d622 <USB_WritePMA>
 8003dd2:	e1d5      	b.n	8004180 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f7fe fdba 	bl	8002958 <PCD_GET_EP_DBUF1_CNT>
 8003de4:	4603      	mov	r3, r0
 8003de6:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	8bfb      	ldrh	r3, [r7, #30]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d308      	bcc.n	8003e04 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	8bfb      	ldrh	r3, [r7, #30]
 8003df8:	1ad2      	subs	r2, r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	619a      	str	r2, [r3, #24]
 8003dfe:	e004      	b.n	8003e0a <HAL_PCD_EP_DB_Transmit+0x3fa>
 8003e00:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2200      	movs	r2, #0
 8003e08:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 80c1 	bne.w	8003f96 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	785b      	ldrb	r3, [r3, #1]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d124      	bne.n	8003e66 <HAL_PCD_EP_DB_Transmit+0x456>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e3a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e5e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e024      	b.n	8003eb0 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	785b      	ldrb	r3, [r3, #1]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d120      	bne.n	8003eb0 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e8c:	b292      	uxth	r2, r2
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003e9a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ea8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	785b      	ldrb	r3, [r3, #1]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d124      	bne.n	8003f02 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ec2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ed2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ed6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003eda:	605a      	str	r2, [r3, #4]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ee6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ef6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003efa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	e024      	b.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x53c>
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	785b      	ldrb	r3, [r3, #1]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d120      	bne.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x53c>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f28:	b292      	uxth	r2, r2
 8003f2a:	605a      	str	r2, [r3, #4]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003f36:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f48:	6852      	ldr	r2, [r2, #4]
 8003f4a:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	4619      	mov	r1, r3
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f00a f9fb 	bl	800e34e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f58:	88fb      	ldrh	r3, [r7, #6]
 8003f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f040 810e 	bne.w	8004180 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b95      	ldr	r3, [pc, #596]	@ (80041cc <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	623b      	str	r3, [r7, #32]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	441a      	add	r2, r3
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	e0f4      	b.n	8004180 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d117      	bne.n	8003fd0 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b86      	ldr	r3, [pc, #536]	@ (80041cc <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	441a      	add	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fce:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	f040 80d2 	bne.w	8004180 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	8bfb      	ldrh	r3, [r7, #30]
 8003fe2:	441a      	add	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	69da      	ldr	r2, [r3, #28]
 8003fec:	8bfb      	ldrh	r3, [r7, #30]
 8003fee:	441a      	add	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6a1a      	ldr	r2, [r3, #32]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d309      	bcc.n	8004014 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6a1a      	ldr	r2, [r3, #32]
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	1ad2      	subs	r2, r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	621a      	str	r2, [r3, #32]
 8004012:	e014      	b.n	800403e <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d106      	bne.n	800402a <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 800401c:	8bfb      	ldrh	r3, [r7, #30]
 800401e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004028:	e009      	b.n	800403e <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2200      	movs	r2, #0
 8004034:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	785b      	ldrb	r3, [r3, #1]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d16a      	bne.n	800411c <HAL_PCD_EP_DB_Transmit+0x70c>
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004050:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004060:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004064:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	2b00      	cmp	r3, #0
 800406e:	d112      	bne.n	8004096 <HAL_PCD_EP_DB_Transmit+0x686>
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800407a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800408a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800408e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004092:	605a      	str	r2, [r3, #4]
 8004094:	e06a      	b.n	800416c <HAL_PCD_EP_DB_Transmit+0x75c>
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	2b3e      	cmp	r3, #62	@ 0x3e
 800409a:	d81e      	bhi.n	80040da <HAL_PCD_EP_DB_Transmit+0x6ca>
 800409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_PCD_EP_DB_Transmit+0x6a2>
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	3301      	adds	r3, #1
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040c0:	6859      	ldr	r1, [r3, #4]
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	069a      	lsls	r2, r3, #26
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040d4:	430a      	orrs	r2, r1
 80040d6:	605a      	str	r2, [r3, #4]
 80040d8:	e048      	b.n	800416c <HAL_PCD_EP_DB_Transmit+0x75c>
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	095b      	lsrs	r3, r3, #5
 80040de:	61bb      	str	r3, [r7, #24]
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <HAL_PCD_EP_DB_Transmit+0x6e0>
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	069b      	lsls	r3, r3, #26
 8004104:	431a      	orrs	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004110:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004114:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	e027      	b.n	800416c <HAL_PCD_EP_DB_Transmit+0x75c>
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	785b      	ldrb	r3, [r3, #1]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d123      	bne.n	800416c <HAL_PCD_EP_DB_Transmit+0x75c>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800412e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800413e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004142:	b292      	uxth	r2, r2
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004150:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004154:	6859      	ldr	r1, [r3, #4]
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	041a      	lsls	r2, r3, #16
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004164:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004168:	430a      	orrs	r2, r1
 800416a:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	6959      	ldr	r1, [r3, #20]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	895a      	ldrh	r2, [r3, #10]
 8004178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417a:	b29b      	uxth	r3, r3
 800417c:	f009 fa51 	bl	800d622 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	4b0f      	ldr	r3, [pc, #60]	@ (80041d0 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8004192:	4013      	ands	r3, r2
 8004194:	633b      	str	r3, [r7, #48]	@ 0x30
 8004196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004198:	f083 0310 	eor.w	r3, r3, #16
 800419c:	633b      	str	r3, [r7, #48]	@ 0x30
 800419e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a0:	f083 0320 	eor.w	r3, r3, #32
 80041a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	441a      	add	r2, r3
 80041b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3738      	adds	r7, #56	@ 0x38
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	07ff8f8f 	.word	0x07ff8f8f
 80041d0:	07ff8fbf 	.word	0x07ff8fbf

080041d4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	607b      	str	r3, [r7, #4]
 80041de:	460b      	mov	r3, r1
 80041e0:	817b      	strh	r3, [r7, #10]
 80041e2:	4613      	mov	r3, r2
 80041e4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80041e6:	897b      	ldrh	r3, [r7, #10]
 80041e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00c      	beq.n	800420c <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041f2:	897b      	ldrh	r3, [r7, #10]
 80041f4:	f003 0207 	and.w	r2, r3, #7
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	3310      	adds	r3, #16
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4413      	add	r3, r2
 8004206:	3304      	adds	r3, #4
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	e00a      	b.n	8004222 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800420c:	897a      	ldrh	r2, [r7, #10]
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	3304      	adds	r3, #4
 8004220:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004222:	893b      	ldrh	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d107      	bne.n	8004238 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2200      	movs	r2, #0
 800422c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	b29a      	uxth	r2, r3
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	80da      	strh	r2, [r3, #6]
 8004236:	e00b      	b.n	8004250 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2201      	movs	r2, #1
 800423c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	b29a      	uxth	r2, r3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	b29a      	uxth	r2, r3
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800425e:	b480      	push	{r7}
 8004260:	b085      	sub	sp, #20
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004280:	f043 0201 	orr.w	r2, r3, #1
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428c:	f043 0202 	orr.w	r2, r3, #2
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	460b      	mov	r3, r1
 80042ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 80042c0:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80042c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c4:	4a04      	ldr	r2, [pc, #16]	@ (80042d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80042c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042ca:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	44020800 	.word	0x44020800

080042dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f000 bc28 	b.w	8004b40 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f0:	4b94      	ldr	r3, [pc, #592]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	f003 0318 	and.w	r3, r3, #24
 80042f8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80042fa:	4b92      	ldr	r3, [pc, #584]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 80042fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	d05b      	beq.n	80043c8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b08      	cmp	r3, #8
 8004314:	d005      	beq.n	8004322 <HAL_RCC_OscConfig+0x46>
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	2b18      	cmp	r3, #24
 800431a:	d114      	bne.n	8004346 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d111      	bne.n	8004346 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d102      	bne.n	8004330 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	f000 bc08 	b.w	8004b40 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004330:	4b84      	ldr	r3, [pc, #528]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	041b      	lsls	r3, r3, #16
 800433e:	4981      	ldr	r1, [pc, #516]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004340:	4313      	orrs	r3, r2
 8004342:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004344:	e040      	b.n	80043c8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d023      	beq.n	8004396 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800434e:	4b7d      	ldr	r3, [pc, #500]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a7c      	ldr	r2, [pc, #496]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435a:	f7fd fd85 	bl	8001e68 <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004362:	f7fd fd81 	bl	8001e68 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e3e5      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004374:	4b73      	ldr	r3, [pc, #460]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004380:	4b70      	ldr	r3, [pc, #448]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	496d      	ldr	r1, [pc, #436]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004390:	4313      	orrs	r3, r2
 8004392:	618b      	str	r3, [r1, #24]
 8004394:	e018      	b.n	80043c8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004396:	4b6b      	ldr	r3, [pc, #428]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a6a      	ldr	r2, [pc, #424]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 800439c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a2:	f7fd fd61 	bl	8001e68 <HAL_GetTick>
 80043a6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80043aa:	f7fd fd5d 	bl	8001e68 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e3c1      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80043bc:	4b61      	ldr	r3, [pc, #388]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f0      	bne.n	80043aa <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 80a0 	beq.w	8004516 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	2b10      	cmp	r3, #16
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_OscConfig+0x10c>
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	2b18      	cmp	r3, #24
 80043e0:	d109      	bne.n	80043f6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d106      	bne.n	80043f6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f040 8092 	bne.w	8004516 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e3a4      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043fe:	d106      	bne.n	800440e <HAL_RCC_OscConfig+0x132>
 8004400:	4b50      	ldr	r3, [pc, #320]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a4f      	ldr	r2, [pc, #316]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004406:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	e058      	b.n	80044c0 <HAL_RCC_OscConfig+0x1e4>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d112      	bne.n	800443c <HAL_RCC_OscConfig+0x160>
 8004416:	4b4b      	ldr	r3, [pc, #300]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a4a      	ldr	r2, [pc, #296]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 800441c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b48      	ldr	r3, [pc, #288]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a47      	ldr	r2, [pc, #284]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004428:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	4b45      	ldr	r3, [pc, #276]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a44      	ldr	r2, [pc, #272]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004434:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e041      	b.n	80044c0 <HAL_RCC_OscConfig+0x1e4>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004444:	d112      	bne.n	800446c <HAL_RCC_OscConfig+0x190>
 8004446:	4b3f      	ldr	r3, [pc, #252]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a3e      	ldr	r2, [pc, #248]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 800444c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	4b3c      	ldr	r3, [pc, #240]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a3b      	ldr	r2, [pc, #236]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004458:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	4b39      	ldr	r3, [pc, #228]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a38      	ldr	r2, [pc, #224]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	e029      	b.n	80044c0 <HAL_RCC_OscConfig+0x1e4>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004474:	d112      	bne.n	800449c <HAL_RCC_OscConfig+0x1c0>
 8004476:	4b33      	ldr	r3, [pc, #204]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a32      	ldr	r2, [pc, #200]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 800447c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	4b30      	ldr	r3, [pc, #192]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a2f      	ldr	r2, [pc, #188]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004488:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	4b2d      	ldr	r3, [pc, #180]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a2c      	ldr	r2, [pc, #176]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 8004494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	e011      	b.n	80044c0 <HAL_RCC_OscConfig+0x1e4>
 800449c:	4b29      	ldr	r3, [pc, #164]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a28      	ldr	r2, [pc, #160]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 80044a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	4b26      	ldr	r3, [pc, #152]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a25      	ldr	r2, [pc, #148]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 80044ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	4b23      	ldr	r3, [pc, #140]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a22      	ldr	r2, [pc, #136]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 80044ba:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80044be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d013      	beq.n	80044f0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c8:	f7fd fcce 	bl	8001e68 <HAL_GetTick>
 80044cc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80044d0:	f7fd fcca 	bl	8001e68 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	@ 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e32e      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e2:	4b18      	ldr	r3, [pc, #96]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0x1f4>
 80044ee:	e012      	b.n	8004516 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fd fcba 	bl	8001e68 <HAL_GetTick>
 80044f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80044f8:	f7fd fcb6 	bl	8001e68 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b64      	cmp	r3, #100	@ 0x64
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e31a      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800450a:	4b0e      	ldr	r3, [pc, #56]	@ (8004544 <HAL_RCC_OscConfig+0x268>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 809a 	beq.w	8004658 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_RCC_OscConfig+0x25a>
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	2b18      	cmp	r3, #24
 800452e:	d149      	bne.n	80045c4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d146      	bne.n	80045c4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e2fe      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
 8004542:	bf00      	nop
 8004544:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d11c      	bne.n	8004588 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800454e:	4b9a      	ldr	r3, [pc, #616]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0218 	and.w	r2, r3, #24
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	429a      	cmp	r2, r3
 800455c:	d014      	beq.n	8004588 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800455e:	4b96      	ldr	r3, [pc, #600]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f023 0218 	bic.w	r2, r3, #24
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	4993      	ldr	r1, [pc, #588]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 800456c:	4313      	orrs	r3, r2
 800456e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004570:	f000 fdd0 	bl	8005114 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004574:	4b91      	ldr	r3, [pc, #580]	@ (80047bc <HAL_RCC_OscConfig+0x4e0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f7fd fbeb 	bl	8001d54 <HAL_InitTick>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e2db      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fd fc6e 	bl	8001e68 <HAL_GetTick>
 800458c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004590:	f7fd fc6a 	bl	8001e68 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e2ce      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045a2:	4b85      	ldr	r3, [pc, #532]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80045ae:	4b82      	ldr	r3, [pc, #520]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	497e      	ldr	r1, [pc, #504]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80045c2:	e049      	b.n	8004658 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d02c      	beq.n	8004626 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80045cc:	4b7a      	ldr	r3, [pc, #488]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f023 0218 	bic.w	r2, r3, #24
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	4977      	ldr	r1, [pc, #476]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80045de:	4b76      	ldr	r3, [pc, #472]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a75      	ldr	r2, [pc, #468]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fd fc3d 	bl	8001e68 <HAL_GetTick>
 80045ee:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80045f2:	f7fd fc39 	bl	8001e68 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e29d      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004604:	4b6c      	ldr	r3, [pc, #432]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004610:	4b69      	ldr	r3, [pc, #420]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	4966      	ldr	r1, [pc, #408]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 8004620:	4313      	orrs	r3, r2
 8004622:	610b      	str	r3, [r1, #16]
 8004624:	e018      	b.n	8004658 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004626:	4b64      	ldr	r3, [pc, #400]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a63      	ldr	r2, [pc, #396]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004632:	f7fd fc19 	bl	8001e68 <HAL_GetTick>
 8004636:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800463a:	f7fd fc15 	bl	8001e68 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e279      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800464c:	4b5a      	ldr	r3, [pc, #360]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f0      	bne.n	800463a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d03c      	beq.n	80046de <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01c      	beq.n	80046a6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800466c:	4b52      	ldr	r3, [pc, #328]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 800466e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004672:	4a51      	ldr	r2, [pc, #324]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 8004674:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004678:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467c:	f7fd fbf4 	bl	8001e68 <HAL_GetTick>
 8004680:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004684:	f7fd fbf0 	bl	8001e68 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e254      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004696:	4b48      	ldr	r3, [pc, #288]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 8004698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800469c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ef      	beq.n	8004684 <HAL_RCC_OscConfig+0x3a8>
 80046a4:	e01b      	b.n	80046de <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a6:	4b44      	ldr	r3, [pc, #272]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 80046a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046ac:	4a42      	ldr	r2, [pc, #264]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 80046ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7fd fbd7 	bl	8001e68 <HAL_GetTick>
 80046ba:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80046be:	f7fd fbd3 	bl	8001e68 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e237      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046d0:	4b39      	ldr	r3, [pc, #228]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 80046d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1ef      	bne.n	80046be <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80d2 	beq.w	8004890 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80046ec:	4b34      	ldr	r3, [pc, #208]	@ (80047c0 <HAL_RCC_OscConfig+0x4e4>)
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d118      	bne.n	800472a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80046f8:	4b31      	ldr	r3, [pc, #196]	@ (80047c0 <HAL_RCC_OscConfig+0x4e4>)
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	4a30      	ldr	r2, [pc, #192]	@ (80047c0 <HAL_RCC_OscConfig+0x4e4>)
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004704:	f7fd fbb0 	bl	8001e68 <HAL_GetTick>
 8004708:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800470c:	f7fd fbac 	bl	8001e68 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e210      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800471e:	4b28      	ldr	r3, [pc, #160]	@ (80047c0 <HAL_RCC_OscConfig+0x4e4>)
 8004720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d108      	bne.n	8004744 <HAL_RCC_OscConfig+0x468>
 8004732:	4b21      	ldr	r3, [pc, #132]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 8004734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004738:	4a1f      	ldr	r2, [pc, #124]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004742:	e074      	b.n	800482e <HAL_RCC_OscConfig+0x552>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d118      	bne.n	800477e <HAL_RCC_OscConfig+0x4a2>
 800474c:	4b1a      	ldr	r3, [pc, #104]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 800474e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004752:	4a19      	ldr	r2, [pc, #100]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 8004754:	f023 0301 	bic.w	r3, r3, #1
 8004758:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800475c:	4b16      	ldr	r3, [pc, #88]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 800475e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004762:	4a15      	ldr	r2, [pc, #84]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 8004764:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004768:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800476c:	4b12      	ldr	r3, [pc, #72]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 800476e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004772:	4a11      	ldr	r2, [pc, #68]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 8004774:	f023 0304 	bic.w	r3, r3, #4
 8004778:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800477c:	e057      	b.n	800482e <HAL_RCC_OscConfig+0x552>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b05      	cmp	r3, #5
 8004784:	d11e      	bne.n	80047c4 <HAL_RCC_OscConfig+0x4e8>
 8004786:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 8004788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800478c:	4a0a      	ldr	r2, [pc, #40]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 800478e:	f043 0304 	orr.w	r3, r3, #4
 8004792:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004796:	4b08      	ldr	r3, [pc, #32]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 8004798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800479c:	4a06      	ldr	r2, [pc, #24]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 800479e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80047a6:	4b04      	ldr	r3, [pc, #16]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 80047a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047ac:	4a02      	ldr	r2, [pc, #8]	@ (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80047b6:	e03a      	b.n	800482e <HAL_RCC_OscConfig+0x552>
 80047b8:	44020c00 	.word	0x44020c00
 80047bc:	20000024 	.word	0x20000024
 80047c0:	44020800 	.word	0x44020800
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b85      	cmp	r3, #133	@ 0x85
 80047ca:	d118      	bne.n	80047fe <HAL_RCC_OscConfig+0x522>
 80047cc:	4ba2      	ldr	r3, [pc, #648]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80047ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047d2:	4aa1      	ldr	r2, [pc, #644]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80047d4:	f043 0304 	orr.w	r3, r3, #4
 80047d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80047dc:	4b9e      	ldr	r3, [pc, #632]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80047de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047e2:	4a9d      	ldr	r2, [pc, #628]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80047e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80047ec:	4b9a      	ldr	r3, [pc, #616]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80047ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047f2:	4a99      	ldr	r2, [pc, #612]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80047fc:	e017      	b.n	800482e <HAL_RCC_OscConfig+0x552>
 80047fe:	4b96      	ldr	r3, [pc, #600]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 8004800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004804:	4a94      	ldr	r2, [pc, #592]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 8004806:	f023 0301 	bic.w	r3, r3, #1
 800480a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800480e:	4b92      	ldr	r3, [pc, #584]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 8004810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004814:	4a90      	ldr	r2, [pc, #576]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 8004816:	f023 0304 	bic.w	r3, r3, #4
 800481a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800481e:	4b8e      	ldr	r3, [pc, #568]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 8004820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004824:	4a8c      	ldr	r2, [pc, #560]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 8004826:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800482a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004836:	f7fd fb17 	bl	8001e68 <HAL_GetTick>
 800483a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483c:	e00a      	b.n	8004854 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483e:	f7fd fb13 	bl	8001e68 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800484c:	4293      	cmp	r3, r2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e175      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004854:	4b80      	ldr	r3, [pc, #512]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 8004856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0ed      	beq.n	800483e <HAL_RCC_OscConfig+0x562>
 8004862:	e015      	b.n	8004890 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fd fb00 	bl	8001e68 <HAL_GetTick>
 8004868:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800486a:	e00a      	b.n	8004882 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486c:	f7fd fafc 	bl	8001e68 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e15e      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004882:	4b75      	ldr	r3, [pc, #468]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 8004884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1ed      	bne.n	800486c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d036      	beq.n	800490a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d019      	beq.n	80048d8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a6b      	ldr	r2, [pc, #428]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80048aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80048ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b0:	f7fd fada 	bl	8001e68 <HAL_GetTick>
 80048b4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80048b8:	f7fd fad6 	bl	8001e68 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e13a      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80048ca:	4b63      	ldr	r3, [pc, #396]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0x5dc>
 80048d6:	e018      	b.n	800490a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048d8:	4b5f      	ldr	r3, [pc, #380]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a5e      	ldr	r2, [pc, #376]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80048de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fd fac0 	bl	8001e68 <HAL_GetTick>
 80048e8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80048ec:	f7fd fabc 	bl	8001e68 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e120      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80048fe:	4b56      	ldr	r3, [pc, #344]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 8115 	beq.w	8004b3e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b18      	cmp	r3, #24
 8004918:	f000 80af 	beq.w	8004a7a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004920:	2b02      	cmp	r3, #2
 8004922:	f040 8086 	bne.w	8004a32 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004926:	4b4c      	ldr	r3, [pc, #304]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a4b      	ldr	r2, [pc, #300]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 800492c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004932:	f7fd fa99 	bl	8001e68 <HAL_GetTick>
 8004936:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800493a:	f7fd fa95 	bl	8001e68 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e0f9      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800494c:	4b42      	ldr	r3, [pc, #264]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1f0      	bne.n	800493a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004958:	4b3f      	ldr	r3, [pc, #252]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 800495a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004960:	f023 0303 	bic.w	r3, r3, #3
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800496c:	0212      	lsls	r2, r2, #8
 800496e:	430a      	orrs	r2, r1
 8004970:	4939      	ldr	r1, [pc, #228]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 8004972:	4313      	orrs	r3, r2
 8004974:	628b      	str	r3, [r1, #40]	@ 0x28
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800497a:	3b01      	subs	r3, #1
 800497c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004984:	3b01      	subs	r3, #1
 8004986:	025b      	lsls	r3, r3, #9
 8004988:	b29b      	uxth	r3, r3
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004990:	3b01      	subs	r3, #1
 8004992:	041b      	lsls	r3, r3, #16
 8004994:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	3b01      	subs	r3, #1
 80049a0:	061b      	lsls	r3, r3, #24
 80049a2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80049a6:	492c      	ldr	r1, [pc, #176]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80049ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80049ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b0:	4a29      	ldr	r2, [pc, #164]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80049b2:	f023 0310 	bic.w	r3, r3, #16
 80049b6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049bc:	4a26      	ldr	r2, [pc, #152]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80049c2:	4b25      	ldr	r3, [pc, #148]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80049c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c6:	4a24      	ldr	r2, [pc, #144]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80049c8:	f043 0310 	orr.w	r3, r3, #16
 80049cc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80049ce:	4b22      	ldr	r3, [pc, #136]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80049d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d2:	f023 020c 	bic.w	r2, r3, #12
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049da:	491f      	ldr	r1, [pc, #124]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80049e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80049e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e4:	f023 0220 	bic.w	r2, r3, #32
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ec:	491a      	ldr	r1, [pc, #104]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049f2:	4b19      	ldr	r3, [pc, #100]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80049f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f6:	4a18      	ldr	r2, [pc, #96]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 80049f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049fc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80049fe:	4b16      	ldr	r3, [pc, #88]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a15      	ldr	r2, [pc, #84]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 8004a04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0a:	f7fd fa2d 	bl	8001e68 <HAL_GetTick>
 8004a0e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004a12:	f7fd fa29 	bl	8001e68 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e08d      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004a24:	4b0c      	ldr	r3, [pc, #48]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0f0      	beq.n	8004a12 <HAL_RCC_OscConfig+0x736>
 8004a30:	e085      	b.n	8004b3e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004a32:	4b09      	ldr	r3, [pc, #36]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a08      	ldr	r2, [pc, #32]	@ (8004a58 <HAL_RCC_OscConfig+0x77c>)
 8004a38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3e:	f7fd fa13 	bl	8001e68 <HAL_GetTick>
 8004a42:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004a44:	e00a      	b.n	8004a5c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004a46:	f7fd fa0f 	bl	8001e68 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d903      	bls.n	8004a5c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e073      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
 8004a58:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004a5c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b48 <HAL_RCC_OscConfig+0x86c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1ee      	bne.n	8004a46 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004a68:	4b37      	ldr	r3, [pc, #220]	@ (8004b48 <HAL_RCC_OscConfig+0x86c>)
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6c:	4a36      	ldr	r2, [pc, #216]	@ (8004b48 <HAL_RCC_OscConfig+0x86c>)
 8004a6e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004a72:	f023 0303 	bic.w	r3, r3, #3
 8004a76:	6293      	str	r3, [r2, #40]	@ 0x28
 8004a78:	e061      	b.n	8004b3e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004a7a:	4b33      	ldr	r3, [pc, #204]	@ (8004b48 <HAL_RCC_OscConfig+0x86c>)
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a80:	4b31      	ldr	r3, [pc, #196]	@ (8004b48 <HAL_RCC_OscConfig+0x86c>)
 8004a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a84:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d031      	beq.n	8004af2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f003 0203 	and.w	r2, r3, #3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d12a      	bne.n	8004af2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d122      	bne.n	8004af2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d11a      	bne.n	8004af2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	0a5b      	lsrs	r3, r3, #9
 8004ac0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d111      	bne.n	8004af2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	0c1b      	lsrs	r3, r3, #16
 8004ad2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ada:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d108      	bne.n	8004af2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	0e1b      	lsrs	r3, r3, #24
 8004ae4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d001      	beq.n	8004af6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e024      	b.n	8004b40 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004af6:	4b14      	ldr	r3, [pc, #80]	@ (8004b48 <HAL_RCC_OscConfig+0x86c>)
 8004af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afa:	08db      	lsrs	r3, r3, #3
 8004afc:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d01a      	beq.n	8004b3e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004b08:	4b0f      	ldr	r3, [pc, #60]	@ (8004b48 <HAL_RCC_OscConfig+0x86c>)
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8004b48 <HAL_RCC_OscConfig+0x86c>)
 8004b0e:	f023 0310 	bic.w	r3, r3, #16
 8004b12:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fd f9a8 	bl	8001e68 <HAL_GetTick>
 8004b18:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004b1a:	bf00      	nop
 8004b1c:	f7fd f9a4 	bl	8001e68 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d0f9      	beq.n	8004b1c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b2c:	4a06      	ldr	r2, [pc, #24]	@ (8004b48 <HAL_RCC_OscConfig+0x86c>)
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004b32:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <HAL_RCC_OscConfig+0x86c>)
 8004b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b36:	4a04      	ldr	r2, [pc, #16]	@ (8004b48 <HAL_RCC_OscConfig+0x86c>)
 8004b38:	f043 0310 	orr.w	r3, r3, #16
 8004b3c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3720      	adds	r7, #32
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	44020c00 	.word	0x44020c00

08004b4c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e19e      	b.n	8004e9e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b60:	4b83      	ldr	r3, [pc, #524]	@ (8004d70 <HAL_RCC_ClockConfig+0x224>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d910      	bls.n	8004b90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6e:	4b80      	ldr	r3, [pc, #512]	@ (8004d70 <HAL_RCC_ClockConfig+0x224>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 020f 	bic.w	r2, r3, #15
 8004b76:	497e      	ldr	r1, [pc, #504]	@ (8004d70 <HAL_RCC_ClockConfig+0x224>)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7e:	4b7c      	ldr	r3, [pc, #496]	@ (8004d70 <HAL_RCC_ClockConfig+0x224>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e186      	b.n	8004e9e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d012      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	695a      	ldr	r2, [r3, #20]
 8004ba0:	4b74      	ldr	r3, [pc, #464]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	0a1b      	lsrs	r3, r3, #8
 8004ba6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d909      	bls.n	8004bc2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004bae:	4b71      	ldr	r3, [pc, #452]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	496d      	ldr	r1, [pc, #436]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d012      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	4b68      	ldr	r3, [pc, #416]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	091b      	lsrs	r3, r3, #4
 8004bd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d909      	bls.n	8004bf4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004be0:	4b64      	ldr	r3, [pc, #400]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	4961      	ldr	r1, [pc, #388]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d010      	beq.n	8004c22 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	4b5b      	ldr	r3, [pc, #364]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d908      	bls.n	8004c22 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004c10:	4b58      	ldr	r3, [pc, #352]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4955      	ldr	r1, [pc, #340]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d010      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	4b50      	ldr	r3, [pc, #320]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d908      	bls.n	8004c50 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004c3e:	4b4d      	ldr	r3, [pc, #308]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f023 020f 	bic.w	r2, r3, #15
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	494a      	ldr	r1, [pc, #296]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8093 	beq.w	8004d84 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d107      	bne.n	8004c76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004c66:	4b43      	ldr	r3, [pc, #268]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d121      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e113      	b.n	8004e9e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d107      	bne.n	8004c8e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d115      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e107      	b.n	8004e9e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d107      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004c96:	4b37      	ldr	r3, [pc, #220]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e0fb      	b.n	8004e9e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ca6:	4b33      	ldr	r3, [pc, #204]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e0f3      	b.n	8004e9e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f023 0203 	bic.w	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	492c      	ldr	r1, [pc, #176]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc8:	f7fd f8ce 	bl	8001e68 <HAL_GetTick>
 8004ccc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d112      	bne.n	8004cfc <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cd6:	e00a      	b.n	8004cee <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd8:	f7fd f8c6 	bl	8001e68 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e0d7      	b.n	8004e9e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cee:	4b21      	ldr	r3, [pc, #132]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f003 0318 	and.w	r3, r3, #24
 8004cf6:	2b18      	cmp	r3, #24
 8004cf8:	d1ee      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0x18c>
 8004cfa:	e043      	b.n	8004d84 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d112      	bne.n	8004d2a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d04:	e00a      	b.n	8004d1c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004d06:	f7fd f8af 	bl	8001e68 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e0c0      	b.n	8004e9e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d1c:	4b15      	ldr	r3, [pc, #84]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	f003 0318 	and.w	r3, r3, #24
 8004d24:	2b10      	cmp	r3, #16
 8004d26:	d1ee      	bne.n	8004d06 <HAL_RCC_ClockConfig+0x1ba>
 8004d28:	e02c      	b.n	8004d84 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d122      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004d32:	e00a      	b.n	8004d4a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004d34:	f7fd f898 	bl	8001e68 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e0a9      	b.n	8004e9e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d74 <HAL_RCC_ClockConfig+0x228>)
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f003 0318 	and.w	r3, r3, #24
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d1ee      	bne.n	8004d34 <HAL_RCC_ClockConfig+0x1e8>
 8004d56:	e015      	b.n	8004d84 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004d58:	f7fd f886 	bl	8001e68 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d906      	bls.n	8004d78 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e097      	b.n	8004e9e <HAL_RCC_ClockConfig+0x352>
 8004d6e:	bf00      	nop
 8004d70:	40022000 	.word	0x40022000
 8004d74:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d78:	4b4b      	ldr	r3, [pc, #300]	@ (8004ea8 <HAL_RCC_ClockConfig+0x35c>)
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f003 0318 	and.w	r3, r3, #24
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e9      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d010      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	4b44      	ldr	r3, [pc, #272]	@ (8004ea8 <HAL_RCC_ClockConfig+0x35c>)
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d208      	bcs.n	8004db2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004da0:	4b41      	ldr	r3, [pc, #260]	@ (8004ea8 <HAL_RCC_ClockConfig+0x35c>)
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f023 020f 	bic.w	r2, r3, #15
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	493e      	ldr	r1, [pc, #248]	@ (8004ea8 <HAL_RCC_ClockConfig+0x35c>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004db2:	4b3e      	ldr	r3, [pc, #248]	@ (8004eac <HAL_RCC_ClockConfig+0x360>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d210      	bcs.n	8004de2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc0:	4b3a      	ldr	r3, [pc, #232]	@ (8004eac <HAL_RCC_ClockConfig+0x360>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f023 020f 	bic.w	r2, r3, #15
 8004dc8:	4938      	ldr	r1, [pc, #224]	@ (8004eac <HAL_RCC_ClockConfig+0x360>)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd0:	4b36      	ldr	r3, [pc, #216]	@ (8004eac <HAL_RCC_ClockConfig+0x360>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d001      	beq.n	8004de2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e05d      	b.n	8004e9e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d010      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	4b2d      	ldr	r3, [pc, #180]	@ (8004ea8 <HAL_RCC_ClockConfig+0x35c>)
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d208      	bcs.n	8004e10 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8004ea8 <HAL_RCC_ClockConfig+0x35c>)
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	4927      	ldr	r1, [pc, #156]	@ (8004ea8 <HAL_RCC_ClockConfig+0x35c>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d012      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	4b21      	ldr	r3, [pc, #132]	@ (8004ea8 <HAL_RCC_ClockConfig+0x35c>)
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	091b      	lsrs	r3, r3, #4
 8004e26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d209      	bcs.n	8004e42 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ea8 <HAL_RCC_ClockConfig+0x35c>)
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	491a      	ldr	r1, [pc, #104]	@ (8004ea8 <HAL_RCC_ClockConfig+0x35c>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d012      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695a      	ldr	r2, [r3, #20]
 8004e52:	4b15      	ldr	r3, [pc, #84]	@ (8004ea8 <HAL_RCC_ClockConfig+0x35c>)
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	0a1b      	lsrs	r3, r3, #8
 8004e58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d209      	bcs.n	8004e74 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004e60:	4b11      	ldr	r3, [pc, #68]	@ (8004ea8 <HAL_RCC_ClockConfig+0x35c>)
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	490e      	ldr	r1, [pc, #56]	@ (8004ea8 <HAL_RCC_ClockConfig+0x35c>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004e74:	f000 f822 	bl	8004ebc <HAL_RCC_GetSysClockFreq>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea8 <HAL_RCC_ClockConfig+0x35c>)
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	490b      	ldr	r1, [pc, #44]	@ (8004eb0 <HAL_RCC_ClockConfig+0x364>)
 8004e84:	5ccb      	ldrb	r3, [r1, r3]
 8004e86:	fa22 f303 	lsr.w	r3, r2, r3
 8004e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb4 <HAL_RCC_ClockConfig+0x368>)
 8004e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb8 <HAL_RCC_ClockConfig+0x36c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fc ff5e 	bl	8001d54 <HAL_InitTick>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004e9c:	7afb      	ldrb	r3, [r7, #11]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	44020c00 	.word	0x44020c00
 8004eac:	40022000 	.word	0x40022000
 8004eb0:	08010840 	.word	0x08010840
 8004eb4:	20000004 	.word	0x20000004
 8004eb8:	20000024 	.word	0x20000024

08004ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b089      	sub	sp, #36	@ 0x24
 8004ec0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004ec2:	4b8c      	ldr	r3, [pc, #560]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	f003 0318 	and.w	r3, r3, #24
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d102      	bne.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004ece:	4b8a      	ldr	r3, [pc, #552]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	e107      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ed4:	4b87      	ldr	r3, [pc, #540]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f003 0318 	and.w	r3, r3, #24
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d112      	bne.n	8004f06 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004ee0:	4b84      	ldr	r3, [pc, #528]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d009      	beq.n	8004f00 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004eec:	4b81      	ldr	r3, [pc, #516]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	08db      	lsrs	r3, r3, #3
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	4a81      	ldr	r2, [pc, #516]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x240>)
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	e0f1      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004f00:	4b7e      	ldr	r3, [pc, #504]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x240>)
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	e0ee      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f06:	4b7b      	ldr	r3, [pc, #492]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f003 0318 	and.w	r3, r3, #24
 8004f0e:	2b10      	cmp	r3, #16
 8004f10:	d102      	bne.n	8004f18 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f12:	4b7b      	ldr	r3, [pc, #492]	@ (8005100 <HAL_RCC_GetSysClockFreq+0x244>)
 8004f14:	61fb      	str	r3, [r7, #28]
 8004f16:	e0e5      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f18:	4b76      	ldr	r3, [pc, #472]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	f003 0318 	and.w	r3, r3, #24
 8004f20:	2b18      	cmp	r3, #24
 8004f22:	f040 80dd 	bne.w	80050e0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004f26:	4b73      	ldr	r3, [pc, #460]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004f30:	4b70      	ldr	r3, [pc, #448]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f34:	0a1b      	lsrs	r3, r3, #8
 8004f36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f3a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004f3c:	4b6d      	ldr	r3, [pc, #436]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f40:	091b      	lsrs	r3, r3, #4
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004f48:	4b6a      	ldr	r3, [pc, #424]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004f4c:	08db      	lsrs	r3, r3, #3
 8004f4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	fb02 f303 	mul.w	r3, r2, r3
 8004f58:	ee07 3a90 	vmov	s15, r3
 8004f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f60:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 80b7 	beq.w	80050da <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d003      	beq.n	8004f7a <HAL_RCC_GetSysClockFreq+0xbe>
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d056      	beq.n	8005026 <HAL_RCC_GetSysClockFreq+0x16a>
 8004f78:	e077      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004f7a:	4b5e      	ldr	r3, [pc, #376]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d02d      	beq.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f86:	4b5b      	ldr	r3, [pc, #364]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	08db      	lsrs	r3, r3, #3
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	4a5a      	ldr	r2, [pc, #360]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x240>)
 8004f92:	fa22 f303 	lsr.w	r3, r2, r3
 8004f96:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	ee07 3a90 	vmov	s15, r3
 8004fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb0:	4b50      	ldr	r3, [pc, #320]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fc4:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8005104 <HAL_RCC_GetSysClockFreq+0x248>
 8004fc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fdc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004fe0:	e065      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	ee07 3a90 	vmov	s15, r3
 8004fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fec:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8005108 <HAL_RCC_GetSysClockFreq+0x24c>
 8004ff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff4:	4b3f      	ldr	r3, [pc, #252]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffc:	ee07 3a90 	vmov	s15, r3
 8005000:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005004:	ed97 6a02 	vldr	s12, [r7, #8]
 8005008:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005104 <HAL_RCC_GetSysClockFreq+0x248>
 800500c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005010:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005014:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005018:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800501c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005020:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005024:	e043      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	ee07 3a90 	vmov	s15, r3
 800502c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005030:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800510c <HAL_RCC_GetSysClockFreq+0x250>
 8005034:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005038:	4b2e      	ldr	r3, [pc, #184]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 800503a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800503c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005048:	ed97 6a02 	vldr	s12, [r7, #8]
 800504c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005104 <HAL_RCC_GetSysClockFreq+0x248>
 8005050:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005054:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005058:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800505c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005064:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8005068:	e021      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	ee07 3a90 	vmov	s15, r3
 8005070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005074:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005110 <HAL_RCC_GetSysClockFreq+0x254>
 8005078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800507c:	4b1d      	ldr	r3, [pc, #116]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 800507e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005084:	ee07 3a90 	vmov	s15, r3
 8005088:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800508c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005090:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8005104 <HAL_RCC_GetSysClockFreq+0x248>
 8005094:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005098:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800509c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80050ac:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80050ae:	4b11      	ldr	r3, [pc, #68]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x238>)
 80050b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b2:	0a5b      	lsrs	r3, r3, #9
 80050b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050b8:	3301      	adds	r3, #1
 80050ba:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050c6:	edd7 6a06 	vldr	s13, [r7, #24]
 80050ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050d2:	ee17 3a90 	vmov	r3, s15
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	e004      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	e001      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80050e0:	4b06      	ldr	r3, [pc, #24]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x240>)
 80050e2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80050e4:	69fb      	ldr	r3, [r7, #28]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3724      	adds	r7, #36	@ 0x24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	44020c00 	.word	0x44020c00
 80050f8:	003d0900 	.word	0x003d0900
 80050fc:	03d09000 	.word	0x03d09000
 8005100:	007a1200 	.word	0x007a1200
 8005104:	46000000 	.word	0x46000000
 8005108:	4c742400 	.word	0x4c742400
 800510c:	4af42400 	.word	0x4af42400
 8005110:	4a742400 	.word	0x4a742400

08005114 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005118:	f7ff fed0 	bl	8004ebc <HAL_RCC_GetSysClockFreq>
 800511c:	4602      	mov	r2, r0
 800511e:	4b08      	ldr	r3, [pc, #32]	@ (8005140 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005120:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005122:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005126:	4907      	ldr	r1, [pc, #28]	@ (8005144 <HAL_RCC_GetHCLKFreq+0x30>)
 8005128:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800512a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800512e:	fa22 f303 	lsr.w	r3, r2, r3
 8005132:	4a05      	ldr	r2, [pc, #20]	@ (8005148 <HAL_RCC_GetHCLKFreq+0x34>)
 8005134:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8005136:	4b04      	ldr	r3, [pc, #16]	@ (8005148 <HAL_RCC_GetHCLKFreq+0x34>)
 8005138:	681b      	ldr	r3, [r3, #0]
}
 800513a:	4618      	mov	r0, r3
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	44020c00 	.word	0x44020c00
 8005144:	08010840 	.word	0x08010840
 8005148:	20000004 	.word	0x20000004

0800514c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8005150:	f7ff ffe0 	bl	8005114 <HAL_RCC_GetHCLKFreq>
 8005154:	4602      	mov	r2, r0
 8005156:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	091b      	lsrs	r3, r3, #4
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	4904      	ldr	r1, [pc, #16]	@ (8005174 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005162:	5ccb      	ldrb	r3, [r1, r3]
 8005164:	f003 031f 	and.w	r3, r3, #31
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800516c:	4618      	mov	r0, r3
 800516e:	bd80      	pop	{r7, pc}
 8005170:	44020c00 	.word	0x44020c00
 8005174:	08010850 	.word	0x08010850

08005178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800517c:	f7ff ffca 	bl	8005114 <HAL_RCC_GetHCLKFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	4b06      	ldr	r3, [pc, #24]	@ (800519c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	4904      	ldr	r1, [pc, #16]	@ (80051a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	f003 031f 	and.w	r3, r3, #31
 8005194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005198:	4618      	mov	r0, r3
 800519a:	bd80      	pop	{r7, pc}
 800519c:	44020c00 	.word	0x44020c00
 80051a0:	08010850 	.word	0x08010850

080051a4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80051a8:	f7ff ffb4 	bl	8005114 <HAL_RCC_GetHCLKFreq>
 80051ac:	4602      	mov	r2, r0
 80051ae:	4b06      	ldr	r3, [pc, #24]	@ (80051c8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	0b1b      	lsrs	r3, r3, #12
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	4904      	ldr	r1, [pc, #16]	@ (80051cc <HAL_RCC_GetPCLK3Freq+0x28>)
 80051ba:	5ccb      	ldrb	r3, [r1, r3]
 80051bc:	f003 031f 	and.w	r3, r3, #31
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	44020c00 	.word	0x44020c00
 80051cc:	08010850 	.word	0x08010850

080051d0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80051d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051d4:	b0d8      	sub	sp, #352	@ 0x160
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051dc:	2300      	movs	r3, #0
 80051de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051e2:	2300      	movs	r3, #0
 80051e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80051e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80051f4:	2500      	movs	r5, #0
 80051f6:	ea54 0305 	orrs.w	r3, r4, r5
 80051fa:	d00b      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80051fc:	4bcd      	ldr	r3, [pc, #820]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80051fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005202:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8005206:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800520a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520c:	4ac9      	ldr	r2, [pc, #804]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800520e:	430b      	orrs	r3, r1
 8005210:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005214:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	f002 0801 	and.w	r8, r2, #1
 8005220:	f04f 0900 	mov.w	r9, #0
 8005224:	ea58 0309 	orrs.w	r3, r8, r9
 8005228:	d042      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800522a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800522e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005230:	2b05      	cmp	r3, #5
 8005232:	d823      	bhi.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005234:	a201      	add	r2, pc, #4	@ (adr r2, 800523c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8005236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523a:	bf00      	nop
 800523c:	08005285 	.word	0x08005285
 8005240:	08005255 	.word	0x08005255
 8005244:	08005269 	.word	0x08005269
 8005248:	08005285 	.word	0x08005285
 800524c:	08005285 	.word	0x08005285
 8005250:	08005285 	.word	0x08005285
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005254:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005258:	3308      	adds	r3, #8
 800525a:	4618      	mov	r0, r3
 800525c:	f004 fee0 	bl	800a020 <RCCEx_PLL2_Config>
 8005260:	4603      	mov	r3, r0
 8005262:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8005266:	e00e      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005268:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800526c:	3330      	adds	r3, #48	@ 0x30
 800526e:	4618      	mov	r0, r3
 8005270:	f004 ff6e 	bl	800a150 <RCCEx_PLL3_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800527a:	e004      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005282:	e000      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8005284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005286:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10c      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800528e:	4ba9      	ldr	r3, [pc, #676]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005290:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005294:	f023 0107 	bic.w	r1, r3, #7
 8005298:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800529c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800529e:	4aa5      	ldr	r2, [pc, #660]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80052a0:	430b      	orrs	r3, r1
 80052a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80052a6:	e003      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f002 0a02 	and.w	sl, r2, #2
 80052bc:	f04f 0b00 	mov.w	fp, #0
 80052c0:	ea5a 030b 	orrs.w	r3, sl, fp
 80052c4:	f000 8088 	beq.w	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80052c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ce:	2b28      	cmp	r3, #40	@ 0x28
 80052d0:	d868      	bhi.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80052d2:	a201      	add	r2, pc, #4	@ (adr r2, 80052d8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80052d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d8:	080053ad 	.word	0x080053ad
 80052dc:	080053a5 	.word	0x080053a5
 80052e0:	080053a5 	.word	0x080053a5
 80052e4:	080053a5 	.word	0x080053a5
 80052e8:	080053a5 	.word	0x080053a5
 80052ec:	080053a5 	.word	0x080053a5
 80052f0:	080053a5 	.word	0x080053a5
 80052f4:	080053a5 	.word	0x080053a5
 80052f8:	0800537d 	.word	0x0800537d
 80052fc:	080053a5 	.word	0x080053a5
 8005300:	080053a5 	.word	0x080053a5
 8005304:	080053a5 	.word	0x080053a5
 8005308:	080053a5 	.word	0x080053a5
 800530c:	080053a5 	.word	0x080053a5
 8005310:	080053a5 	.word	0x080053a5
 8005314:	080053a5 	.word	0x080053a5
 8005318:	08005391 	.word	0x08005391
 800531c:	080053a5 	.word	0x080053a5
 8005320:	080053a5 	.word	0x080053a5
 8005324:	080053a5 	.word	0x080053a5
 8005328:	080053a5 	.word	0x080053a5
 800532c:	080053a5 	.word	0x080053a5
 8005330:	080053a5 	.word	0x080053a5
 8005334:	080053a5 	.word	0x080053a5
 8005338:	080053ad 	.word	0x080053ad
 800533c:	080053a5 	.word	0x080053a5
 8005340:	080053a5 	.word	0x080053a5
 8005344:	080053a5 	.word	0x080053a5
 8005348:	080053a5 	.word	0x080053a5
 800534c:	080053a5 	.word	0x080053a5
 8005350:	080053a5 	.word	0x080053a5
 8005354:	080053a5 	.word	0x080053a5
 8005358:	080053ad 	.word	0x080053ad
 800535c:	080053a5 	.word	0x080053a5
 8005360:	080053a5 	.word	0x080053a5
 8005364:	080053a5 	.word	0x080053a5
 8005368:	080053a5 	.word	0x080053a5
 800536c:	080053a5 	.word	0x080053a5
 8005370:	080053a5 	.word	0x080053a5
 8005374:	080053a5 	.word	0x080053a5
 8005378:	080053ad 	.word	0x080053ad
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800537c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005380:	3308      	adds	r3, #8
 8005382:	4618      	mov	r0, r3
 8005384:	f004 fe4c 	bl	800a020 <RCCEx_PLL2_Config>
 8005388:	4603      	mov	r3, r0
 800538a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800538e:	e00e      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005390:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005394:	3330      	adds	r3, #48	@ 0x30
 8005396:	4618      	mov	r0, r3
 8005398:	f004 feda 	bl	800a150 <RCCEx_PLL3_Config>
 800539c:	4603      	mov	r3, r0
 800539e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80053a2:	e004      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80053aa:	e000      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80053ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10c      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80053b6:	4b5f      	ldr	r3, [pc, #380]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80053b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80053bc:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80053c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80053c8:	430b      	orrs	r3, r1
 80053ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80053ce:	e003      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e0:	f002 0304 	and.w	r3, r2, #4
 80053e4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80053e8:	2300      	movs	r3, #0
 80053ea:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80053ee:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80053f2:	460b      	mov	r3, r1
 80053f4:	4313      	orrs	r3, r2
 80053f6:	d04e      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80053f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053fe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005402:	d02c      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005404:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005408:	d825      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800540a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800540e:	d028      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005414:	d81f      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005416:	2bc0      	cmp	r3, #192	@ 0xc0
 8005418:	d025      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800541a:	2bc0      	cmp	r3, #192	@ 0xc0
 800541c:	d81b      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800541e:	2b80      	cmp	r3, #128	@ 0x80
 8005420:	d00f      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8005422:	2b80      	cmp	r3, #128	@ 0x80
 8005424:	d817      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d01f      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800542a:	2b40      	cmp	r3, #64	@ 0x40
 800542c:	d113      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800542e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005432:	3308      	adds	r3, #8
 8005434:	4618      	mov	r0, r3
 8005436:	f004 fdf3 	bl	800a020 <RCCEx_PLL2_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005440:	e014      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005442:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005446:	3330      	adds	r3, #48	@ 0x30
 8005448:	4618      	mov	r0, r3
 800544a:	f004 fe81 	bl	800a150 <RCCEx_PLL3_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005454:	e00a      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800545c:	e006      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800545e:	bf00      	nop
 8005460:	e004      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005462:	bf00      	nop
 8005464:	e002      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005466:	bf00      	nop
 8005468:	e000      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800546a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800546c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10c      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005474:	4b2f      	ldr	r3, [pc, #188]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005476:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800547a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800547e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005484:	4a2b      	ldr	r2, [pc, #172]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005486:	430b      	orrs	r3, r1
 8005488:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800548c:	e003      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005492:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005496:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f002 0308 	and.w	r3, r2, #8
 80054a2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80054a6:	2300      	movs	r3, #0
 80054a8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80054ac:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 80054b0:	460b      	mov	r3, r1
 80054b2:	4313      	orrs	r3, r2
 80054b4:	d056      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80054b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054bc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80054c0:	d031      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80054c2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80054c6:	d82a      	bhi.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80054c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054cc:	d02d      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80054ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054d2:	d824      	bhi.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80054d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80054d8:	d029      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80054da:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80054de:	d81e      	bhi.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80054e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054e4:	d011      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80054e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ea:	d818      	bhi.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d023      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80054f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054f4:	d113      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054fa:	3308      	adds	r3, #8
 80054fc:	4618      	mov	r0, r3
 80054fe:	f004 fd8f 	bl	800a020 <RCCEx_PLL2_Config>
 8005502:	4603      	mov	r3, r0
 8005504:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005508:	e017      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800550a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800550e:	3330      	adds	r3, #48	@ 0x30
 8005510:	4618      	mov	r0, r3
 8005512:	f004 fe1d 	bl	800a150 <RCCEx_PLL3_Config>
 8005516:	4603      	mov	r3, r0
 8005518:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800551c:	e00d      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005524:	e009      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005526:	bf00      	nop
 8005528:	e007      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800552a:	bf00      	nop
 800552c:	e005      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800552e:	bf00      	nop
 8005530:	e003      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005532:	bf00      	nop
 8005534:	44020c00 	.word	0x44020c00
        break;
 8005538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800553a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10c      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005542:	4bbb      	ldr	r3, [pc, #748]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005544:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005548:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800554c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005550:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005552:	4ab7      	ldr	r2, [pc, #732]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005554:	430b      	orrs	r3, r1
 8005556:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800555a:	e003      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005560:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005564:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	f002 0310 	and.w	r3, r2, #16
 8005570:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005574:	2300      	movs	r3, #0
 8005576:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800557a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800557e:	460b      	mov	r3, r1
 8005580:	4313      	orrs	r3, r2
 8005582:	d053      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8005584:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005588:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800558a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800558e:	d031      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005590:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005594:	d82a      	bhi.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005596:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800559a:	d02d      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800559c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055a0:	d824      	bhi.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80055a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055a6:	d029      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80055a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055ac:	d81e      	bhi.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80055ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055b2:	d011      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80055b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055b8:	d818      	bhi.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d020      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80055be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055c2:	d113      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055c8:	3308      	adds	r3, #8
 80055ca:	4618      	mov	r0, r3
 80055cc:	f004 fd28 	bl	800a020 <RCCEx_PLL2_Config>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80055d6:	e014      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055dc:	3330      	adds	r3, #48	@ 0x30
 80055de:	4618      	mov	r0, r3
 80055e0:	f004 fdb6 	bl	800a150 <RCCEx_PLL3_Config>
 80055e4:	4603      	mov	r3, r0
 80055e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80055ea:	e00a      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80055f2:	e006      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80055f4:	bf00      	nop
 80055f6:	e004      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80055f8:	bf00      	nop
 80055fa:	e002      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80055fc:	bf00      	nop
 80055fe:	e000      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005602:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10c      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800560a:	4b89      	ldr	r3, [pc, #548]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800560c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005610:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005614:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800561a:	4a85      	ldr	r2, [pc, #532]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800561c:	430b      	orrs	r3, r1
 800561e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005622:	e003      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005624:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005628:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800562c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	f002 0320 	and.w	r3, r2, #32
 8005638:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800563c:	2300      	movs	r3, #0
 800563e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005642:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8005646:	460b      	mov	r3, r1
 8005648:	4313      	orrs	r3, r2
 800564a:	d053      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800564c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005652:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005656:	d031      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8005658:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800565c:	d82a      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800565e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005662:	d02d      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005664:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005668:	d824      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800566a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800566e:	d029      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005670:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005674:	d81e      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800567a:	d011      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800567c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005680:	d818      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d020      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8005686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800568a:	d113      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800568c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005690:	3308      	adds	r3, #8
 8005692:	4618      	mov	r0, r3
 8005694:	f004 fcc4 	bl	800a020 <RCCEx_PLL2_Config>
 8005698:	4603      	mov	r3, r0
 800569a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800569e:	e014      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056a4:	3330      	adds	r3, #48	@ 0x30
 80056a6:	4618      	mov	r0, r3
 80056a8:	f004 fd52 	bl	800a150 <RCCEx_PLL3_Config>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80056b2:	e00a      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80056ba:	e006      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80056bc:	bf00      	nop
 80056be:	e004      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80056c0:	bf00      	nop
 80056c2:	e002      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80056c4:	bf00      	nop
 80056c6:	e000      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80056c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10c      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80056d2:	4b57      	ldr	r3, [pc, #348]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80056d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80056d8:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80056dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e2:	4a53      	ldr	r2, [pc, #332]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80056e4:	430b      	orrs	r3, r1
 80056e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80056ea:	e003      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80056f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005700:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005704:	2300      	movs	r3, #0
 8005706:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800570a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800570e:	460b      	mov	r3, r1
 8005710:	4313      	orrs	r3, r2
 8005712:	d053      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005714:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800571a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800571e:	d031      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005720:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005724:	d82a      	bhi.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800572a:	d02d      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800572c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005730:	d824      	bhi.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005732:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005736:	d029      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005738:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800573c:	d81e      	bhi.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800573e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005742:	d011      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005744:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005748:	d818      	bhi.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d020      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800574e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005752:	d113      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005754:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005758:	3308      	adds	r3, #8
 800575a:	4618      	mov	r0, r3
 800575c:	f004 fc60 	bl	800a020 <RCCEx_PLL2_Config>
 8005760:	4603      	mov	r3, r0
 8005762:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005766:	e014      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005768:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800576c:	3330      	adds	r3, #48	@ 0x30
 800576e:	4618      	mov	r0, r3
 8005770:	f004 fcee 	bl	800a150 <RCCEx_PLL3_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800577a:	e00a      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005782:	e006      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005784:	bf00      	nop
 8005786:	e004      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005788:	bf00      	nop
 800578a:	e002      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800578c:	bf00      	nop
 800578e:	e000      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005792:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10c      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800579a:	4b25      	ldr	r3, [pc, #148]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800579c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80057a0:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 80057a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057aa:	4a21      	ldr	r2, [pc, #132]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80057ac:	430b      	orrs	r3, r1
 80057ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80057b2:	e003      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057b8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80057c8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80057cc:	2300      	movs	r3, #0
 80057ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80057d2:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 80057d6:	460b      	mov	r3, r1
 80057d8:	4313      	orrs	r3, r2
 80057da:	d055      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80057dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057e2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80057e6:	d033      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80057e8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80057ec:	d82c      	bhi.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80057ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057f2:	d02f      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80057f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057f8:	d826      	bhi.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80057fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80057fe:	d02b      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005800:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005804:	d820      	bhi.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005806:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800580a:	d013      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800580c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005810:	d81a      	bhi.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d022      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005816:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800581a:	d115      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800581c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005820:	3308      	adds	r3, #8
 8005822:	4618      	mov	r0, r3
 8005824:	f004 fbfc 	bl	800a020 <RCCEx_PLL2_Config>
 8005828:	4603      	mov	r3, r0
 800582a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800582e:	e016      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005830:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005834:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005838:	3330      	adds	r3, #48	@ 0x30
 800583a:	4618      	mov	r0, r3
 800583c:	f004 fc88 	bl	800a150 <RCCEx_PLL3_Config>
 8005840:	4603      	mov	r3, r0
 8005842:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005846:	e00a      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800584e:	e006      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005850:	bf00      	nop
 8005852:	e004      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005854:	bf00      	nop
 8005856:	e002      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005858:	bf00      	nop
 800585a:	e000      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800585c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800585e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10c      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8005866:	4bbb      	ldr	r3, [pc, #748]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005868:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800586c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005870:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005874:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005876:	4ab7      	ldr	r2, [pc, #732]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005878:	430b      	orrs	r3, r1
 800587a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800587e:	e003      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005880:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005884:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005888:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005894:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005898:	2300      	movs	r3, #0
 800589a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800589e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80058a2:	460b      	mov	r3, r1
 80058a4:	4313      	orrs	r3, r2
 80058a6:	d053      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80058a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058ae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80058b2:	d031      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80058b4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80058b8:	d82a      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80058ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058be:	d02d      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80058c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058c4:	d824      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80058c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058ca:	d029      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80058cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058d0:	d81e      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80058d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058d6:	d011      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80058d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058dc:	d818      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d020      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80058e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058e6:	d113      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058ec:	3308      	adds	r3, #8
 80058ee:	4618      	mov	r0, r3
 80058f0:	f004 fb96 	bl	800a020 <RCCEx_PLL2_Config>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80058fa:	e014      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005900:	3330      	adds	r3, #48	@ 0x30
 8005902:	4618      	mov	r0, r3
 8005904:	f004 fc24 	bl	800a150 <RCCEx_PLL3_Config>
 8005908:	4603      	mov	r3, r0
 800590a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800590e:	e00a      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005916:	e006      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005918:	bf00      	nop
 800591a:	e004      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800591c:	bf00      	nop
 800591e:	e002      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005920:	bf00      	nop
 8005922:	e000      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005926:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10c      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800592e:	4b89      	ldr	r3, [pc, #548]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005930:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005934:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005938:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800593c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800593e:	4a85      	ldr	r2, [pc, #532]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005940:	430b      	orrs	r3, r1
 8005942:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005946:	e003      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005948:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800594c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005950:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800595c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005960:	2300      	movs	r3, #0
 8005962:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005966:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800596a:	460b      	mov	r3, r1
 800596c:	4313      	orrs	r3, r2
 800596e:	d055      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8005970:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005974:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005978:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800597c:	d031      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800597e:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005982:	d82a      	bhi.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005984:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005988:	d02d      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800598a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800598e:	d824      	bhi.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005990:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005994:	d029      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005996:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800599a:	d81e      	bhi.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800599c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059a0:	d011      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80059a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059a6:	d818      	bhi.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d020      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80059ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059b0:	d113      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059b6:	3308      	adds	r3, #8
 80059b8:	4618      	mov	r0, r3
 80059ba:	f004 fb31 	bl	800a020 <RCCEx_PLL2_Config>
 80059be:	4603      	mov	r3, r0
 80059c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80059c4:	e014      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059ca:	3330      	adds	r3, #48	@ 0x30
 80059cc:	4618      	mov	r0, r3
 80059ce:	f004 fbbf 	bl	800a150 <RCCEx_PLL3_Config>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80059d8:	e00a      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80059e0:	e006      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80059e2:	bf00      	nop
 80059e4:	e004      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80059e6:	bf00      	nop
 80059e8:	e002      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80059ea:	bf00      	nop
 80059ec:	e000      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80059ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10d      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80059f8:	4b56      	ldr	r3, [pc, #344]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80059fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80059fe:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8005a02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a0a:	4a52      	ldr	r2, [pc, #328]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005a12:	e003      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a14:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a18:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005a1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a24:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005a28:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005a32:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005a36:	460b      	mov	r3, r1
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	d044      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8005a3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a44:	2b05      	cmp	r3, #5
 8005a46:	d823      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005a48:	a201      	add	r2, pc, #4	@ (adr r2, 8005a50 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4e:	bf00      	nop
 8005a50:	08005a99 	.word	0x08005a99
 8005a54:	08005a69 	.word	0x08005a69
 8005a58:	08005a7d 	.word	0x08005a7d
 8005a5c:	08005a99 	.word	0x08005a99
 8005a60:	08005a99 	.word	0x08005a99
 8005a64:	08005a99 	.word	0x08005a99
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f004 fad6 	bl	800a020 <RCCEx_PLL2_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005a7a:	e00e      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a80:	3330      	adds	r3, #48	@ 0x30
 8005a82:	4618      	mov	r0, r3
 8005a84:	f004 fb64 	bl	800a150 <RCCEx_PLL3_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005a8e:	e004      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a96:	e000      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8005a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10d      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8005aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005aa4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005aa8:	f023 0107 	bic.w	r1, r3, #7
 8005aac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ab4:	4a27      	ldr	r2, [pc, #156]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005abc:	e003      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ac2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8005ac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005ad2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005adc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	d04f      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8005ae6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aee:	2b50      	cmp	r3, #80	@ 0x50
 8005af0:	d029      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005af2:	2b50      	cmp	r3, #80	@ 0x50
 8005af4:	d823      	bhi.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005af6:	2b40      	cmp	r3, #64	@ 0x40
 8005af8:	d027      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8005afa:	2b40      	cmp	r3, #64	@ 0x40
 8005afc:	d81f      	bhi.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005afe:	2b30      	cmp	r3, #48	@ 0x30
 8005b00:	d025      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005b02:	2b30      	cmp	r3, #48	@ 0x30
 8005b04:	d81b      	bhi.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d00f      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	d817      	bhi.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d022      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005b12:	2b10      	cmp	r3, #16
 8005b14:	d113      	bne.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b1a:	3308      	adds	r3, #8
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f004 fa7f 	bl	800a020 <RCCEx_PLL2_Config>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005b28:	e017      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b2e:	3330      	adds	r3, #48	@ 0x30
 8005b30:	4618      	mov	r0, r3
 8005b32:	f004 fb0d 	bl	800a150 <RCCEx_PLL3_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005b3c:	e00d      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b44:	e009      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005b46:	bf00      	nop
 8005b48:	e007      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005b4a:	bf00      	nop
 8005b4c:	e005      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005b4e:	bf00      	nop
 8005b50:	e003      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8005b52:	bf00      	nop
 8005b54:	44020c00 	.word	0x44020c00
        break;
 8005b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10d      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8005b62:	4baf      	ldr	r3, [pc, #700]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005b64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005b68:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005b6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b74:	4aaa      	ldr	r2, [pc, #680]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005b76:	430b      	orrs	r3, r1
 8005b78:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005b7c:	e003      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b82:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005b92:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b96:	2300      	movs	r3, #0
 8005b98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005b9c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	d055      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005ba6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005bb2:	d031      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8005bb4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005bb8:	d82a      	bhi.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005bba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bbe:	d02d      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005bc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bc4:	d824      	bhi.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005bc6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005bca:	d029      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005bcc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005bd0:	d81e      	bhi.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005bd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bd6:	d011      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005bd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bdc:	d818      	bhi.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d020      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8005be2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005be6:	d113      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005be8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bec:	3308      	adds	r3, #8
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f004 fa16 	bl	800a020 <RCCEx_PLL2_Config>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005bfa:	e014      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c00:	3330      	adds	r3, #48	@ 0x30
 8005c02:	4618      	mov	r0, r3
 8005c04:	f004 faa4 	bl	800a150 <RCCEx_PLL3_Config>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005c0e:	e00a      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c16:	e006      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005c18:	bf00      	nop
 8005c1a:	e004      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005c1c:	bf00      	nop
 8005c1e:	e002      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005c20:	bf00      	nop
 8005c22:	e000      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10d      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005c2e:	4b7c      	ldr	r3, [pc, #496]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c34:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005c38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c40:	4a77      	ldr	r2, [pc, #476]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005c42:	430b      	orrs	r3, r1
 8005c44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005c48:	e003      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c4e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005c5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c62:	2300      	movs	r3, #0
 8005c64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c68:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	d03d      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005c72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c7e:	d01b      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8005c80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c84:	d814      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005c86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c8a:	d017      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8005c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c90:	d80e      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d014      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8005c96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c9a:	d109      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ca0:	3330      	adds	r3, #48	@ 0x30
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f004 fa54 	bl	800a150 <RCCEx_PLL3_Config>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005cae:	e008      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005cb6:	e004      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005cb8:	bf00      	nop
 8005cba:	e002      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005cbc:	bf00      	nop
 8005cbe:	e000      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10d      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005cca:	4b55      	ldr	r3, [pc, #340]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005ccc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cd0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005cd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cdc:	4a50      	ldr	r2, [pc, #320]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005cde:	430b      	orrs	r3, r1
 8005ce0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005ce4:	e003      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005cfa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005cfe:	2300      	movs	r3, #0
 8005d00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d04:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	d03d      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005d0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d16:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005d1a:	d01b      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005d1c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005d20:	d814      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005d22:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005d26:	d017      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005d28:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005d2c:	d80e      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d014      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8005d32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d36:	d109      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d3c:	3330      	adds	r3, #48	@ 0x30
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f004 fa06 	bl	800a150 <RCCEx_PLL3_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005d4a:	e008      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d52:	e004      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005d54:	bf00      	nop
 8005d56:	e002      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005d58:	bf00      	nop
 8005d5a:	e000      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10d      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005d66:	4b2e      	ldr	r3, [pc, #184]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005d68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d6c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005d70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d78:	4a29      	ldr	r2, [pc, #164]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005d7a:	430b      	orrs	r3, r1
 8005d7c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005d80:	e003      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d86:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005d96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005da0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005da4:	460b      	mov	r3, r1
 8005da6:	4313      	orrs	r3, r2
 8005da8:	d040      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005daa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005db2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005db6:	d01b      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8005db8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005dbc:	d814      	bhi.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005dbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dc2:	d017      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005dc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dc8:	d80e      	bhi.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d014      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005dce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dd2:	d109      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005dd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dd8:	3330      	adds	r3, #48	@ 0x30
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f004 f9b8 	bl	800a150 <RCCEx_PLL3_Config>
 8005de0:	4603      	mov	r3, r0
 8005de2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005de6:	e008      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005dee:	e004      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005df0:	bf00      	nop
 8005df2:	e002      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005df4:	bf00      	nop
 8005df6:	e000      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d110      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005e02:	4b07      	ldr	r3, [pc, #28]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005e04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e08:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005e0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e14:	4a02      	ldr	r2, [pc, #8]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005e16:	430b      	orrs	r3, r1
 8005e18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005e1c:	e006      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8005e1e:	bf00      	nop
 8005e20:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e24:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e28:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	2100      	movs	r1, #0
 8005e36:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8005e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005e42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	d03d      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8005e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e54:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005e58:	d01b      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005e5a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005e5e:	d814      	bhi.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005e60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e64:	d017      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8005e66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e6a:	d80e      	bhi.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d014      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8005e70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e74:	d109      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e7a:	3330      	adds	r3, #48	@ 0x30
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f004 f967 	bl	800a150 <RCCEx_PLL3_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8005e88:	e008      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e90:	e004      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005e92:	bf00      	nop
 8005e94:	e002      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005e96:	bf00      	nop
 8005e98:	e000      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10d      	bne.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005ea4:	4bbe      	ldr	r3, [pc, #760]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005ea6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005eaa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005eae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005eb6:	4aba      	ldr	r2, [pc, #744]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005eb8:	430b      	orrs	r3, r1
 8005eba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005ebe:	e003      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ec4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005ec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ede:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	d035      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005ee8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ef0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ef4:	d015      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8005ef6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005efa:	d80e      	bhi.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d012      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f04:	d109      	bne.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f0a:	3330      	adds	r3, #48	@ 0x30
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f004 f91f 	bl	800a150 <RCCEx_PLL3_Config>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005f18:	e006      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f20:	e002      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005f22:	bf00      	nop
 8005f24:	e000      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f28:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10d      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005f30:	4b9b      	ldr	r3, [pc, #620]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005f32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f36:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005f3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f42:	4a97      	ldr	r2, [pc, #604]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005f44:	430b      	orrs	r3, r1
 8005f46:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005f4a:	e003      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f4c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f50:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8005f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f6a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4313      	orrs	r3, r2
 8005f72:	d00e      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005f74:	4b8a      	ldr	r3, [pc, #552]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	4a89      	ldr	r2, [pc, #548]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005f7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f7e:	61d3      	str	r3, [r2, #28]
 8005f80:	4b87      	ldr	r3, [pc, #540]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005f82:	69d9      	ldr	r1, [r3, #28]
 8005f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f88:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005f8c:	4a84      	ldr	r2, [pc, #528]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005f8e:	430b      	orrs	r3, r1
 8005f90:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005f9e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005fa8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005fac:	460b      	mov	r3, r1
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	d055      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005fb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005fba:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005fbe:	d031      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005fc0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005fc4:	d82a      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fca:	d02d      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fd0:	d824      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005fd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fd6:	d029      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005fd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fdc:	d81e      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005fde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fe2:	d011      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fe8:	d818      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d020      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ff2:	d113      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ff4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f004 f810 	bl	800a020 <RCCEx_PLL2_Config>
 8006000:	4603      	mov	r3, r0
 8006002:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006006:	e014      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006008:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800600c:	3330      	adds	r3, #48	@ 0x30
 800600e:	4618      	mov	r0, r3
 8006010:	f004 f89e 	bl	800a150 <RCCEx_PLL3_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800601a:	e00a      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006022:	e006      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006024:	bf00      	nop
 8006026:	e004      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006028:	bf00      	nop
 800602a:	e002      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800602c:	bf00      	nop
 800602e:	e000      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006032:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10d      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800603a:	4b59      	ldr	r3, [pc, #356]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800603c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006040:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006044:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006048:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800604c:	4a54      	ldr	r2, [pc, #336]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800604e:	430b      	orrs	r3, r1
 8006050:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006054:	e003      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006056:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800605a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800605e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800606a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800606e:	2300      	movs	r3, #0
 8006070:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006074:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006078:	460b      	mov	r3, r1
 800607a:	4313      	orrs	r3, r2
 800607c:	d055      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800607e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006082:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006086:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800608a:	d031      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 800608c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006090:	d82a      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006092:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006096:	d02d      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8006098:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800609c:	d824      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800609e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060a2:	d029      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80060a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060a8:	d81e      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80060aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ae:	d011      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80060b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060b4:	d818      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d020      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80060ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060be:	d113      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060c4:	3308      	adds	r3, #8
 80060c6:	4618      	mov	r0, r3
 80060c8:	f003 ffaa 	bl	800a020 <RCCEx_PLL2_Config>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80060d2:	e014      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060d8:	3330      	adds	r3, #48	@ 0x30
 80060da:	4618      	mov	r0, r3
 80060dc:	f004 f838 	bl	800a150 <RCCEx_PLL3_Config>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80060e6:	e00a      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80060ee:	e006      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80060f0:	bf00      	nop
 80060f2:	e004      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80060f4:	bf00      	nop
 80060f6:	e002      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80060f8:	bf00      	nop
 80060fa:	e000      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80060fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10d      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006106:	4b26      	ldr	r3, [pc, #152]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006108:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800610c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006114:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006118:	4a21      	ldr	r2, [pc, #132]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800611a:	430b      	orrs	r3, r1
 800611c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006120:	e003      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006122:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006126:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800612a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006132:	2100      	movs	r1, #0
 8006134:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8006138:	f003 0320 	and.w	r3, r3, #32
 800613c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006140:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006144:	460b      	mov	r3, r1
 8006146:	4313      	orrs	r3, r2
 8006148:	d057      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800614a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800614e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006152:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006156:	d033      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8006158:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800615c:	d82c      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800615e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006162:	d02f      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8006164:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006168:	d826      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800616a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800616e:	d02b      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8006170:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006174:	d820      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006176:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800617a:	d013      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800617c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006180:	d81a      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006182:	2b00      	cmp	r3, #0
 8006184:	d022      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8006186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800618a:	d115      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800618c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006190:	3308      	adds	r3, #8
 8006192:	4618      	mov	r0, r3
 8006194:	f003 ff44 	bl	800a020 <RCCEx_PLL2_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800619e:	e016      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80061a0:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061a8:	3330      	adds	r3, #48	@ 0x30
 80061aa:	4618      	mov	r0, r3
 80061ac:	f003 ffd0 	bl	800a150 <RCCEx_PLL3_Config>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80061b6:	e00a      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80061be:	e006      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80061c0:	bf00      	nop
 80061c2:	e004      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80061c4:	bf00      	nop
 80061c6:	e002      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80061c8:	bf00      	nop
 80061ca:	e000      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80061cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10d      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80061d6:	4bbb      	ldr	r3, [pc, #748]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80061d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80061dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80061e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80061e8:	4ab6      	ldr	r2, [pc, #728]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80061ea:	430b      	orrs	r3, r1
 80061ec:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80061f0:	e003      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061f6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80061fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	2100      	movs	r1, #0
 8006204:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8006208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006210:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006214:	460b      	mov	r3, r1
 8006216:	4313      	orrs	r3, r2
 8006218:	d055      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800621a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800621e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006222:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006226:	d031      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006228:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800622c:	d82a      	bhi.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800622e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006232:	d02d      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8006234:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006238:	d824      	bhi.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800623a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800623e:	d029      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8006240:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006244:	d81e      	bhi.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006246:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800624a:	d011      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800624c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006250:	d818      	bhi.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d020      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8006256:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800625a:	d113      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800625c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006260:	3308      	adds	r3, #8
 8006262:	4618      	mov	r0, r3
 8006264:	f003 fedc 	bl	800a020 <RCCEx_PLL2_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800626e:	e014      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006270:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006274:	3330      	adds	r3, #48	@ 0x30
 8006276:	4618      	mov	r0, r3
 8006278:	f003 ff6a 	bl	800a150 <RCCEx_PLL3_Config>
 800627c:	4603      	mov	r3, r0
 800627e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006282:	e00a      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800628a:	e006      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800628c:	bf00      	nop
 800628e:	e004      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006290:	bf00      	nop
 8006292:	e002      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006294:	bf00      	nop
 8006296:	e000      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10d      	bne.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80062a2:	4b88      	ldr	r3, [pc, #544]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80062a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80062a8:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80062ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062b4:	4a83      	ldr	r2, [pc, #524]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80062b6:	430b      	orrs	r3, r1
 80062b8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80062bc:	e003      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80062c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	2100      	movs	r1, #0
 80062d0:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80062d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062dc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80062e0:	460b      	mov	r3, r1
 80062e2:	4313      	orrs	r3, r2
 80062e4:	d055      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80062e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062ee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80062f2:	d031      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80062f4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80062f8:	d82a      	bhi.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80062fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062fe:	d02d      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8006300:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006304:	d824      	bhi.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006306:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800630a:	d029      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800630c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006310:	d81e      	bhi.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006312:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006316:	d011      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8006318:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800631c:	d818      	bhi.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d020      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8006322:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006326:	d113      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006328:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800632c:	3308      	adds	r3, #8
 800632e:	4618      	mov	r0, r3
 8006330:	f003 fe76 	bl	800a020 <RCCEx_PLL2_Config>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800633a:	e014      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800633c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006340:	3330      	adds	r3, #48	@ 0x30
 8006342:	4618      	mov	r0, r3
 8006344:	f003 ff04 	bl	800a150 <RCCEx_PLL3_Config>
 8006348:	4603      	mov	r3, r0
 800634a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800634e:	e00a      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006356:	e006      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006358:	bf00      	nop
 800635a:	e004      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800635c:	bf00      	nop
 800635e:	e002      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006360:	bf00      	nop
 8006362:	e000      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006366:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10d      	bne.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800636e:	4b55      	ldr	r3, [pc, #340]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006370:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006374:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006378:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800637c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006380:	4a50      	ldr	r2, [pc, #320]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006382:	430b      	orrs	r3, r1
 8006384:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006388:	e003      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800638e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006392:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639a:	2100      	movs	r1, #0
 800639c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80063a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80063a8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80063ac:	460b      	mov	r3, r1
 80063ae:	4313      	orrs	r3, r2
 80063b0:	d055      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80063b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80063ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063be:	d031      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80063c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063c4:	d82a      	bhi.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80063c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ca:	d02d      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80063cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063d0:	d824      	bhi.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80063d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063d6:	d029      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80063d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063dc:	d81e      	bhi.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80063de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063e2:	d011      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80063e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063e8:	d818      	bhi.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d020      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80063ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063f2:	d113      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063f8:	3308      	adds	r3, #8
 80063fa:	4618      	mov	r0, r3
 80063fc:	f003 fe10 	bl	800a020 <RCCEx_PLL2_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006406:	e014      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006408:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800640c:	3330      	adds	r3, #48	@ 0x30
 800640e:	4618      	mov	r0, r3
 8006410:	f003 fe9e 	bl	800a150 <RCCEx_PLL3_Config>
 8006414:	4603      	mov	r3, r0
 8006416:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800641a:	e00a      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006422:	e006      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006424:	bf00      	nop
 8006426:	e004      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006428:	bf00      	nop
 800642a:	e002      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800642c:	bf00      	nop
 800642e:	e000      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006432:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10d      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800643a:	4b22      	ldr	r3, [pc, #136]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800643c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006440:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006444:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006448:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800644c:	4a1d      	ldr	r2, [pc, #116]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800644e:	430b      	orrs	r3, r1
 8006450:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006454:	e003      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006456:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800645a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800645e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800646a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800646e:	2300      	movs	r3, #0
 8006470:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006474:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006478:	460b      	mov	r3, r1
 800647a:	4313      	orrs	r3, r2
 800647c:	d055      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800647e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006482:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006486:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800648a:	d035      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800648c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006490:	d82e      	bhi.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006492:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006496:	d031      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8006498:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800649c:	d828      	bhi.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800649e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064a2:	d01b      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80064a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064a8:	d822      	bhi.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80064ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064b2:	d009      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80064b4:	e01c      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b6:	4b03      	ldr	r3, [pc, #12]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80064b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ba:	4a02      	ldr	r2, [pc, #8]	@ (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80064bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064c0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80064c2:	e01c      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80064c4:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064cc:	3308      	adds	r3, #8
 80064ce:	4618      	mov	r0, r3
 80064d0:	f003 fda6 	bl	800a020 <RCCEx_PLL2_Config>
 80064d4:	4603      	mov	r3, r0
 80064d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80064da:	e010      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064e0:	3330      	adds	r3, #48	@ 0x30
 80064e2:	4618      	mov	r0, r3
 80064e4:	f003 fe34 	bl	800a150 <RCCEx_PLL3_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80064ee:	e006      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80064f6:	e002      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80064f8:	bf00      	nop
 80064fa:	e000      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80064fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10d      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006506:	4bc3      	ldr	r3, [pc, #780]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006508:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800650c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006510:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006514:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006518:	4abe      	ldr	r2, [pc, #760]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800651a:	430b      	orrs	r3, r1
 800651c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006520:	e003      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006522:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006526:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800652a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006532:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006536:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800653a:	2300      	movs	r3, #0
 800653c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006540:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006544:	460b      	mov	r3, r1
 8006546:	4313      	orrs	r3, r2
 8006548:	d051      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800654a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800654e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006552:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006556:	d033      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006558:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800655c:	d82c      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800655e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006562:	d02d      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006564:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006568:	d826      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800656a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800656e:	d019      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8006570:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006574:	d820      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800657a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800657e:	d007      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8006580:	e01a      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006582:	4ba4      	ldr	r3, [pc, #656]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006586:	4aa3      	ldr	r2, [pc, #652]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800658c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800658e:	e018      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006590:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006594:	3308      	adds	r3, #8
 8006596:	4618      	mov	r0, r3
 8006598:	f003 fd42 	bl	800a020 <RCCEx_PLL2_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80065a2:	e00e      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065a8:	3330      	adds	r3, #48	@ 0x30
 80065aa:	4618      	mov	r0, r3
 80065ac:	f003 fdd0 	bl	800a150 <RCCEx_PLL3_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80065b6:	e004      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80065be:	e000      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80065c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10d      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80065ca:	4b92      	ldr	r3, [pc, #584]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065d0:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 80065d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80065dc:	4a8d      	ldr	r2, [pc, #564]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065de:	430b      	orrs	r3, r1
 80065e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80065e4:	e003      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80065ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80065fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065fc:	2300      	movs	r3, #0
 80065fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006600:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006604:	460b      	mov	r3, r1
 8006606:	4313      	orrs	r3, r2
 8006608:	d032      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800660a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800660e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006612:	2b05      	cmp	r3, #5
 8006614:	d80f      	bhi.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8006616:	2b03      	cmp	r3, #3
 8006618:	d211      	bcs.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800661a:	2b01      	cmp	r3, #1
 800661c:	d911      	bls.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800661e:	2b02      	cmp	r3, #2
 8006620:	d109      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006622:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006626:	3308      	adds	r3, #8
 8006628:	4618      	mov	r0, r3
 800662a:	f003 fcf9 	bl	800a020 <RCCEx_PLL2_Config>
 800662e:	4603      	mov	r3, r0
 8006630:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006634:	e006      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800663c:	e002      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800663e:	bf00      	nop
 8006640:	e000      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006644:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10d      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800664c:	4b71      	ldr	r3, [pc, #452]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800664e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006652:	f023 0107 	bic.w	r1, r3, #7
 8006656:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800665a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800665e:	4a6d      	ldr	r2, [pc, #436]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006660:	430b      	orrs	r3, r1
 8006662:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006666:	e003      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006668:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800666c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006670:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006678:	2100      	movs	r1, #0
 800667a:	6739      	str	r1, [r7, #112]	@ 0x70
 800667c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006680:	677b      	str	r3, [r7, #116]	@ 0x74
 8006682:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006686:	460b      	mov	r3, r1
 8006688:	4313      	orrs	r3, r2
 800668a:	d024      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800668c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006690:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8006698:	2b08      	cmp	r3, #8
 800669a:	d005      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80066a2:	e002      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80066a4:	bf00      	nop
 80066a6:	e000      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80066a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10d      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80066b2:	4b58      	ldr	r3, [pc, #352]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80066b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066b8:	f023 0108 	bic.w	r1, r3, #8
 80066bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80066c4:	4a53      	ldr	r2, [pc, #332]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80066c6:	430b      	orrs	r3, r1
 80066c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80066cc:	e003      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80066e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066e4:	2300      	movs	r3, #0
 80066e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066e8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80066ec:	460b      	mov	r3, r1
 80066ee:	4313      	orrs	r3, r2
 80066f0:	f000 80b9 	beq.w	8006866 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80066f4:	4b48      	ldr	r3, [pc, #288]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80066f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f8:	4a47      	ldr	r2, [pc, #284]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006700:	f7fb fbb2 	bl	8001e68 <HAL_GetTick>
 8006704:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006708:	e00b      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800670a:	f7fb fbad 	bl	8001e68 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d903      	bls.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006720:	e005      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006722:	4b3d      	ldr	r3, [pc, #244]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0ed      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800672e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006732:	2b00      	cmp	r3, #0
 8006734:	f040 8093 	bne.w	800685e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006738:	4b36      	ldr	r3, [pc, #216]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800673a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800673e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006742:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006746:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d023      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800674e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006752:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8006756:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800675a:	4293      	cmp	r3, r2
 800675c:	d01b      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800675e:	4b2d      	ldr	r3, [pc, #180]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006768:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800676c:	4b29      	ldr	r3, [pc, #164]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800676e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006772:	4a28      	ldr	r2, [pc, #160]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006778:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800677c:	4b25      	ldr	r3, [pc, #148]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800677e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006782:	4a24      	ldr	r2, [pc, #144]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006788:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800678c:	4a21      	ldr	r2, [pc, #132]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800678e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006792:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006796:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d019      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a2:	f7fb fb61 	bl	8001e68 <HAL_GetTick>
 80067a6:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067aa:	e00d      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ac:	f7fb fb5c 	bl	8001e68 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80067b6:	1ad2      	subs	r2, r2, r3
 80067b8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80067bc:	429a      	cmp	r2, r3
 80067be:	d903      	bls.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 80067c6:	e006      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067c8:	4b12      	ldr	r3, [pc, #72]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80067ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0ea      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80067d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d13a      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80067de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067e2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80067e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067ee:	d115      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80067f0:	4b08      	ldr	r3, [pc, #32]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80067f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067fc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006800:	091b      	lsrs	r3, r3, #4
 8006802:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006806:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800680a:	4a02      	ldr	r2, [pc, #8]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800680c:	430b      	orrs	r3, r1
 800680e:	61d3      	str	r3, [r2, #28]
 8006810:	e00a      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006812:	bf00      	nop
 8006814:	44020c00 	.word	0x44020c00
 8006818:	44020800 	.word	0x44020800
 800681c:	4b9f      	ldr	r3, [pc, #636]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	4a9e      	ldr	r2, [pc, #632]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006822:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006826:	61d3      	str	r3, [r2, #28]
 8006828:	4b9c      	ldr	r3, [pc, #624]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800682a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800682e:	4a9b      	ldr	r2, [pc, #620]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006830:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006834:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006838:	4b98      	ldr	r3, [pc, #608]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800683a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800683e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006842:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800684a:	4a94      	ldr	r2, [pc, #592]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800684c:	430b      	orrs	r3, r1
 800684e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006852:	e008      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006854:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006858:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 800685c:	e003      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006862:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006866:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006872:	663b      	str	r3, [r7, #96]	@ 0x60
 8006874:	2300      	movs	r3, #0
 8006876:	667b      	str	r3, [r7, #100]	@ 0x64
 8006878:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800687c:	460b      	mov	r3, r1
 800687e:	4313      	orrs	r3, r2
 8006880:	d035      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006882:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006886:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800688a:	2b30      	cmp	r3, #48	@ 0x30
 800688c:	d014      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800688e:	2b30      	cmp	r3, #48	@ 0x30
 8006890:	d80e      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006892:	2b20      	cmp	r3, #32
 8006894:	d012      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8006896:	2b20      	cmp	r3, #32
 8006898:	d80a      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800689a:	2b00      	cmp	r3, #0
 800689c:	d010      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800689e:	2b10      	cmp	r3, #16
 80068a0:	d106      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a2:	4b7e      	ldr	r3, [pc, #504]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80068a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a6:	4a7d      	ldr	r2, [pc, #500]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80068a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80068ae:	e008      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068b6:	e004      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80068b8:	bf00      	nop
 80068ba:	e002      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80068bc:	bf00      	nop
 80068be:	e000      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80068c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10d      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80068ca:	4b74      	ldr	r3, [pc, #464]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80068cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80068d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068d8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80068dc:	4a6f      	ldr	r2, [pc, #444]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80068de:	430b      	orrs	r3, r1
 80068e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80068e4:	e003      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80068ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80068fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068fc:	2300      	movs	r3, #0
 80068fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006900:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006904:	460b      	mov	r3, r1
 8006906:	4313      	orrs	r3, r2
 8006908:	d033      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800690a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800690e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8006916:	2b40      	cmp	r3, #64	@ 0x40
 8006918:	d007      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800691a:	e010      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800691c:	4b5f      	ldr	r3, [pc, #380]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800691e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006920:	4a5e      	ldr	r2, [pc, #376]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006926:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006928:	e00d      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800692a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800692e:	3308      	adds	r3, #8
 8006930:	4618      	mov	r0, r3
 8006932:	f003 fb75 	bl	800a020 <RCCEx_PLL2_Config>
 8006936:	4603      	mov	r3, r0
 8006938:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800693c:	e003      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006946:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10d      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800694e:	4b53      	ldr	r3, [pc, #332]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006950:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006954:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006958:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800695c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006960:	4a4e      	ldr	r2, [pc, #312]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006962:	430b      	orrs	r3, r1
 8006964:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006968:	e003      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800696e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006972:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800697e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006980:	2300      	movs	r3, #0
 8006982:	657b      	str	r3, [r7, #84]	@ 0x54
 8006984:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006988:	460b      	mov	r3, r1
 800698a:	4313      	orrs	r3, r2
 800698c:	d033      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800698e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006992:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800699a:	2b80      	cmp	r3, #128	@ 0x80
 800699c:	d007      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800699e:	e010      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069a0:	4b3e      	ldr	r3, [pc, #248]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80069a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a4:	4a3d      	ldr	r2, [pc, #244]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80069a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069aa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80069ac:	e00d      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069b2:	3308      	adds	r3, #8
 80069b4:	4618      	mov	r0, r3
 80069b6:	f003 fb33 	bl	800a020 <RCCEx_PLL2_Config>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80069c0:	e003      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80069c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10d      	bne.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80069d2:	4b32      	ldr	r3, [pc, #200]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80069d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069d8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80069dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069e0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80069e4:	4a2d      	ldr	r2, [pc, #180]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80069e6:	430b      	orrs	r3, r1
 80069e8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80069ec:	e003      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80069f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a04:	2300      	movs	r3, #0
 8006a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a08:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	d04a      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006a12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d827      	bhi.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8006a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8006a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a24:	08006a39 	.word	0x08006a39
 8006a28:	08006a47 	.word	0x08006a47
 8006a2c:	08006a5b 	.word	0x08006a5b
 8006a30:	08006a77 	.word	0x08006a77
 8006a34:	08006a77 	.word	0x08006a77
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a38:	4b18      	ldr	r3, [pc, #96]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3c:	4a17      	ldr	r2, [pc, #92]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a42:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006a44:	e018      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f003 fae7 	bl	800a020 <RCCEx_PLL2_Config>
 8006a52:	4603      	mov	r3, r0
 8006a54:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006a58:	e00e      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a5e:	3330      	adds	r3, #48	@ 0x30
 8006a60:	4618      	mov	r0, r3
 8006a62:	f003 fb75 	bl	800a150 <RCCEx_PLL3_Config>
 8006a66:	4603      	mov	r3, r0
 8006a68:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006a6c:	e004      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006a74:	e000      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8006a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a78:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10f      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006a80:	4b06      	ldr	r3, [pc, #24]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a86:	f023 0107 	bic.w	r1, r3, #7
 8006a8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a92:	4a02      	ldr	r2, [pc, #8]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006a94:	430b      	orrs	r3, r1
 8006a96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006a9a:	e005      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8006a9c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006aa4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006ab4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	f000 8081 	beq.w	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8006ac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006aca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	d85f      	bhi.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8006ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8006ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad8:	08006b5d 	.word	0x08006b5d
 8006adc:	08006b93 	.word	0x08006b93
 8006ae0:	08006b93 	.word	0x08006b93
 8006ae4:	08006b93 	.word	0x08006b93
 8006ae8:	08006b93 	.word	0x08006b93
 8006aec:	08006b93 	.word	0x08006b93
 8006af0:	08006b93 	.word	0x08006b93
 8006af4:	08006b93 	.word	0x08006b93
 8006af8:	08006b6b 	.word	0x08006b6b
 8006afc:	08006b93 	.word	0x08006b93
 8006b00:	08006b93 	.word	0x08006b93
 8006b04:	08006b93 	.word	0x08006b93
 8006b08:	08006b93 	.word	0x08006b93
 8006b0c:	08006b93 	.word	0x08006b93
 8006b10:	08006b93 	.word	0x08006b93
 8006b14:	08006b93 	.word	0x08006b93
 8006b18:	08006b7f 	.word	0x08006b7f
 8006b1c:	08006b93 	.word	0x08006b93
 8006b20:	08006b93 	.word	0x08006b93
 8006b24:	08006b93 	.word	0x08006b93
 8006b28:	08006b93 	.word	0x08006b93
 8006b2c:	08006b93 	.word	0x08006b93
 8006b30:	08006b93 	.word	0x08006b93
 8006b34:	08006b93 	.word	0x08006b93
 8006b38:	08006b9b 	.word	0x08006b9b
 8006b3c:	08006b93 	.word	0x08006b93
 8006b40:	08006b93 	.word	0x08006b93
 8006b44:	08006b93 	.word	0x08006b93
 8006b48:	08006b93 	.word	0x08006b93
 8006b4c:	08006b93 	.word	0x08006b93
 8006b50:	08006b93 	.word	0x08006b93
 8006b54:	08006b93 	.word	0x08006b93
 8006b58:	08006b9b 	.word	0x08006b9b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b5c:	4bab      	ldr	r3, [pc, #684]	@ (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b60:	4aaa      	ldr	r2, [pc, #680]	@ (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b66:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006b68:	e018      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b6e:	3308      	adds	r3, #8
 8006b70:	4618      	mov	r0, r3
 8006b72:	f003 fa55 	bl	800a020 <RCCEx_PLL2_Config>
 8006b76:	4603      	mov	r3, r0
 8006b78:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006b7c:	e00e      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b82:	3330      	adds	r3, #48	@ 0x30
 8006b84:	4618      	mov	r0, r3
 8006b86:	f003 fae3 	bl	800a150 <RCCEx_PLL3_Config>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006b90:	e004      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b98:	e000      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8006b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b9c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10d      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006ba4:	4b99      	ldr	r3, [pc, #612]	@ (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006baa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006bb6:	4a95      	ldr	r2, [pc, #596]	@ (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006bbe:	e003      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006bc4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006bc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bda:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006bde:	460b      	mov	r3, r1
 8006be0:	4313      	orrs	r3, r2
 8006be2:	d04e      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006be4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bf0:	d02e      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bf6:	d827      	bhi.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006bf8:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bfa:	d02b      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8006bfc:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bfe:	d823      	bhi.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006c00:	2b80      	cmp	r3, #128	@ 0x80
 8006c02:	d017      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006c04:	2b80      	cmp	r3, #128	@ 0x80
 8006c06:	d81f      	bhi.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006c0c:	2b40      	cmp	r3, #64	@ 0x40
 8006c0e:	d007      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006c10:	e01a      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c12:	4b7e      	ldr	r3, [pc, #504]	@ (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c16:	4a7d      	ldr	r2, [pc, #500]	@ (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c1c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006c1e:	e01a      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c24:	3308      	adds	r3, #8
 8006c26:	4618      	mov	r0, r3
 8006c28:	f003 f9fa 	bl	800a020 <RCCEx_PLL2_Config>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006c32:	e010      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c38:	3330      	adds	r3, #48	@ 0x30
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f003 fa88 	bl	800a150 <RCCEx_PLL3_Config>
 8006c40:	4603      	mov	r3, r0
 8006c42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006c46:	e006      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c4e:	e002      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006c50:	bf00      	nop
 8006c52:	e000      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10d      	bne.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006c5e:	4b6b      	ldr	r3, [pc, #428]	@ (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c64:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006c68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c70:	4a66      	ldr	r2, [pc, #408]	@ (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006c72:	430b      	orrs	r3, r1
 8006c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006c78:	e003      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c7e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8006c82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006c8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c90:	2300      	movs	r3, #0
 8006c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c94:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	d055      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006c9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ca2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006ca6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006caa:	d031      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8006cac:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006cb0:	d82a      	bhi.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006cb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cb6:	d02d      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8006cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cbc:	d824      	bhi.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006cbe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006cc2:	d029      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8006cc4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006cc8:	d81e      	bhi.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cce:	d011      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006cd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cd4:	d818      	bhi.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d020      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8006cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cde:	d113      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f003 f99a 	bl	800a020 <RCCEx_PLL2_Config>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006cf2:	e014      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cf8:	3330      	adds	r3, #48	@ 0x30
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f003 fa28 	bl	800a150 <RCCEx_PLL3_Config>
 8006d00:	4603      	mov	r3, r0
 8006d02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006d06:	e00a      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d0e:	e006      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006d10:	bf00      	nop
 8006d12:	e004      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006d14:	bf00      	nop
 8006d16:	e002      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006d18:	bf00      	nop
 8006d1a:	e000      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10d      	bne.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8006d26:	4b39      	ldr	r3, [pc, #228]	@ (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d2c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006d30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d34:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006d38:	4a34      	ldr	r2, [pc, #208]	@ (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006d3a:	430b      	orrs	r3, r1
 8006d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006d40:	e003      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d42:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d46:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006d4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d52:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006d56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d58:	2300      	movs	r3, #0
 8006d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006d60:	460b      	mov	r3, r1
 8006d62:	4313      	orrs	r3, r2
 8006d64:	d058      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8006d66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d6e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006d72:	d031      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8006d74:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006d78:	d82a      	bhi.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006d7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d7e:	d02d      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8006d80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d84:	d824      	bhi.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006d86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d8a:	d029      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8006d8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d90:	d81e      	bhi.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006d92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d96:	d011      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8006d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d9c:	d818      	bhi.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d020      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8006da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006da6:	d113      	bne.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006da8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dac:	3308      	adds	r3, #8
 8006dae:	4618      	mov	r0, r3
 8006db0:	f003 f936 	bl	800a020 <RCCEx_PLL2_Config>
 8006db4:	4603      	mov	r3, r0
 8006db6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006dba:	e014      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006dbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dc0:	3330      	adds	r3, #48	@ 0x30
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f003 f9c4 	bl	800a150 <RCCEx_PLL3_Config>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006dce:	e00a      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006dd6:	e006      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006dd8:	bf00      	nop
 8006dda:	e004      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006ddc:	bf00      	nop
 8006dde:	e002      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006de0:	bf00      	nop
 8006de2:	e000      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006de6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d110      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8006dee:	4b07      	ldr	r3, [pc, #28]	@ (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006df4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006df8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e00:	4902      	ldr	r1, [pc, #8]	@ (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006e08:	e006      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8006e0a:	bf00      	nop
 8006e0c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e10:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e14:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e20:	2100      	movs	r1, #0
 8006e22:	6239      	str	r1, [r7, #32]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e2a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4313      	orrs	r3, r2
 8006e32:	d055      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8006e34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e3c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006e40:	d031      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8006e42:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006e46:	d82a      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e4c:	d02d      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8006e4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e52:	d824      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006e54:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006e58:	d029      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8006e5a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006e5e:	d81e      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e64:	d011      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8006e66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e6a:	d818      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d020      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8006e70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e74:	d113      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f003 f8cf 	bl	800a020 <RCCEx_PLL2_Config>
 8006e82:	4603      	mov	r3, r0
 8006e84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e88:	e014      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e8e:	3330      	adds	r3, #48	@ 0x30
 8006e90:	4618      	mov	r0, r3
 8006e92:	f003 f95d 	bl	800a150 <RCCEx_PLL3_Config>
 8006e96:	4603      	mov	r3, r0
 8006e98:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e9c:	e00a      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006ea4:	e006      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006ea6:	bf00      	nop
 8006ea8:	e004      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006eaa:	bf00      	nop
 8006eac:	e002      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006eae:	bf00      	nop
 8006eb0:	e000      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eb4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10d      	bne.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8006ebc:	4b88      	ldr	r3, [pc, #544]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ec2:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8006ec6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006eca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ece:	4984      	ldr	r1, [pc, #528]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006ed6:	e003      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006edc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006ee0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	2100      	movs	r1, #0
 8006eea:	61b9      	str	r1, [r7, #24]
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	d03d      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006efc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d81c      	bhi.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8006f08:	a201      	add	r2, pc, #4	@ (adr r2, 8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8006f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0e:	bf00      	nop
 8006f10:	08006f4b 	.word	0x08006f4b
 8006f14:	08006f21 	.word	0x08006f21
 8006f18:	08006f2f 	.word	0x08006f2f
 8006f1c:	08006f4b 	.word	0x08006f4b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f20:	4b6f      	ldr	r3, [pc, #444]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f24:	4a6e      	ldr	r2, [pc, #440]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f2a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006f2c:	e00e      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f32:	3308      	adds	r3, #8
 8006f34:	4618      	mov	r0, r3
 8006f36:	f003 f873 	bl	800a020 <RCCEx_PLL2_Config>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006f40:	e004      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006f48:	e000      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8006f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f4c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10d      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006f54:	4b62      	ldr	r3, [pc, #392]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006f56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f5a:	f023 0203 	bic.w	r2, r3, #3
 8006f5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f62:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006f66:	495e      	ldr	r1, [pc, #376]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006f6e:	e003      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f70:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f74:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	2100      	movs	r1, #0
 8006f82:	6139      	str	r1, [r7, #16]
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	617b      	str	r3, [r7, #20]
 8006f8a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4313      	orrs	r3, r2
 8006f92:	d03a      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006f94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa0:	d00e      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8006fa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa6:	d815      	bhi.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d017      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8006fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fb0:	d110      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb6:	4a4a      	ldr	r2, [pc, #296]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fbc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006fbe:	e00e      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f003 f82a 	bl	800a020 <RCCEx_PLL2_Config>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006fd2:	e004      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006fda:	e000      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8006fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fde:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10d      	bne.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8006fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ff0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ff4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006ff8:	4939      	ldr	r1, [pc, #228]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007000:	e003      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007002:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007006:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800700a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800700e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007012:	2100      	movs	r1, #0
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	f003 0310 	and.w	r3, r3, #16
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007020:	460b      	mov	r3, r1
 8007022:	4313      	orrs	r3, r2
 8007024:	d038      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007026:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800702a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800702e:	2b30      	cmp	r3, #48	@ 0x30
 8007030:	d01b      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8007032:	2b30      	cmp	r3, #48	@ 0x30
 8007034:	d815      	bhi.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8007036:	2b10      	cmp	r3, #16
 8007038:	d002      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800703a:	2b20      	cmp	r3, #32
 800703c:	d007      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800703e:	e010      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007040:	4b27      	ldr	r3, [pc, #156]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007044:	4a26      	ldr	r2, [pc, #152]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800704a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800704c:	e00e      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800704e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007052:	3330      	adds	r3, #48	@ 0x30
 8007054:	4618      	mov	r0, r3
 8007056:	f003 f87b 	bl	800a150 <RCCEx_PLL3_Config>
 800705a:	4603      	mov	r3, r0
 800705c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007060:	e004      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007068:	e000      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800706a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800706c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10d      	bne.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007074:	4b1a      	ldr	r3, [pc, #104]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007076:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800707a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800707e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007082:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8007086:	4916      	ldr	r1, [pc, #88]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007088:	4313      	orrs	r3, r2
 800708a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800708e:	e003      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007090:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007094:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007098:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a0:	2100      	movs	r1, #0
 80070a2:	6039      	str	r1, [r7, #0]
 80070a4:	f003 0308 	and.w	r3, r3, #8
 80070a8:	607b      	str	r3, [r7, #4]
 80070aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80070ae:	460b      	mov	r3, r1
 80070b0:	4313      	orrs	r3, r2
 80070b2:	d00c      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80070b4:	4b0a      	ldr	r3, [pc, #40]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80070b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80070be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070c2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80070c6:	4906      	ldr	r1, [pc, #24]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80070ce:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80070d8:	46bd      	mov	sp, r7
 80070da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070de:	bf00      	nop
 80070e0:	44020c00 	.word	0x44020c00

080070e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b08b      	sub	sp, #44	@ 0x2c
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80070ec:	4bae      	ldr	r3, [pc, #696]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80070ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80070f6:	4bac      	ldr	r3, [pc, #688]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80070f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fa:	f003 0303 	and.w	r3, r3, #3
 80070fe:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007100:	4ba9      	ldr	r3, [pc, #676]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007104:	0a1b      	lsrs	r3, r3, #8
 8007106:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800710a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800710c:	4ba6      	ldr	r3, [pc, #664]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800710e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007110:	091b      	lsrs	r3, r3, #4
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007118:	4ba3      	ldr	r3, [pc, #652]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800711a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711c:	08db      	lsrs	r3, r3, #3
 800711e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	fb02 f303 	mul.w	r3, r2, r3
 8007128:	ee07 3a90 	vmov	s15, r3
 800712c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007130:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 8126 	beq.w	8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	2b03      	cmp	r3, #3
 8007140:	d053      	beq.n	80071ea <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	2b03      	cmp	r3, #3
 8007146:	d86f      	bhi.n	8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d003      	beq.n	8007156 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	2b02      	cmp	r3, #2
 8007152:	d02b      	beq.n	80071ac <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007154:	e068      	b.n	8007228 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007156:	4b94      	ldr	r3, [pc, #592]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	08db      	lsrs	r3, r3, #3
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	4a92      	ldr	r2, [pc, #584]	@ (80073ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007162:	fa22 f303 	lsr.w	r3, r2, r3
 8007166:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	ee07 3a90 	vmov	s15, r3
 8007178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718a:	ed97 6a04 	vldr	s12, [r7, #16]
 800718e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800719e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80071aa:	e068      	b.n	800727e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80071ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	ee07 3a90 	vmov	s15, r3
 80071c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c8:	ed97 6a04 	vldr	s12, [r7, #16]
 80071cc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80071d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80071e8:	e049      	b.n	800727e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80073b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80071f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007206:	ed97 6a04 	vldr	s12, [r7, #16]
 800720a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800720e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800721a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800721e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007222:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007226:	e02a      	b.n	800727e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007228:	4b5f      	ldr	r3, [pc, #380]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	08db      	lsrs	r3, r3, #3
 800722e:	f003 0303 	and.w	r3, r3, #3
 8007232:	4a5e      	ldr	r2, [pc, #376]	@ (80073ac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007234:	fa22 f303 	lsr.w	r3, r2, r3
 8007238:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	ee07 3a90 	vmov	s15, r3
 8007240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	ee07 3a90 	vmov	s15, r3
 8007258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007260:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007278:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800727c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800727e:	4b4a      	ldr	r3, [pc, #296]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800728a:	d121      	bne.n	80072d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800728c:	4b46      	ldr	r3, [pc, #280]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800728e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d017      	beq.n	80072c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007298:	4b43      	ldr	r3, [pc, #268]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800729a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800729c:	0a5b      	lsrs	r3, r3, #9
 800729e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80072aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072ae:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80072b2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80072b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072be:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e006      	b.n	80072d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	e002      	b.n	80072d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072d6:	4b34      	ldr	r3, [pc, #208]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072e2:	d121      	bne.n	8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80072e4:	4b30      	ldr	r3, [pc, #192]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80072e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d017      	beq.n	8007320 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80072f0:	4b2d      	ldr	r3, [pc, #180]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80072f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072f4:	0c1b      	lsrs	r3, r3, #16
 80072f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007302:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007306:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800730a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800730e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007316:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	605a      	str	r2, [r3, #4]
 800731e:	e006      	b.n	800732e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	605a      	str	r2, [r3, #4]
 8007326:	e002      	b.n	800732e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800732e:	4b1e      	ldr	r3, [pc, #120]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007336:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800733a:	d121      	bne.n	8007380 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800733c:	4b1a      	ldr	r3, [pc, #104]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800733e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007340:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d017      	beq.n	8007378 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007348:	4b17      	ldr	r3, [pc, #92]	@ (80073a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800734a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800734c:	0e1b      	lsrs	r3, r3, #24
 800734e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800735a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800735e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007362:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800736a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800736e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007376:	e010      	b.n	800739a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	609a      	str	r2, [r3, #8]
}
 800737e:	e00c      	b.n	800739a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	609a      	str	r2, [r3, #8]
}
 8007386:	e008      	b.n	800739a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	609a      	str	r2, [r3, #8]
}
 800739a:	bf00      	nop
 800739c:	372c      	adds	r7, #44	@ 0x2c
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	44020c00 	.word	0x44020c00
 80073ac:	03d09000 	.word	0x03d09000
 80073b0:	46000000 	.word	0x46000000
 80073b4:	4a742400 	.word	0x4a742400
 80073b8:	4af42400 	.word	0x4af42400

080073bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80073bc:	b480      	push	{r7}
 80073be:	b08b      	sub	sp, #44	@ 0x2c
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80073c4:	4bae      	ldr	r3, [pc, #696]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80073c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073cc:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80073ce:	4bac      	ldr	r3, [pc, #688]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80073d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80073d8:	4ba9      	ldr	r3, [pc, #676]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80073da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073dc:	0a1b      	lsrs	r3, r3, #8
 80073de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073e2:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80073e4:	4ba6      	ldr	r3, [pc, #664]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80073e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e8:	091b      	lsrs	r3, r3, #4
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80073f0:	4ba3      	ldr	r3, [pc, #652]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80073f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f4:	08db      	lsrs	r3, r3, #3
 80073f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	fb02 f303 	mul.w	r3, r2, r3
 8007400:	ee07 3a90 	vmov	s15, r3
 8007404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007408:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	2b00      	cmp	r3, #0
 8007410:	f000 8126 	beq.w	8007660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	2b03      	cmp	r3, #3
 8007418:	d053      	beq.n	80074c2 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	2b03      	cmp	r3, #3
 800741e:	d86f      	bhi.n	8007500 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d003      	beq.n	800742e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	2b02      	cmp	r3, #2
 800742a:	d02b      	beq.n	8007484 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800742c:	e068      	b.n	8007500 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800742e:	4b94      	ldr	r3, [pc, #592]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	08db      	lsrs	r3, r3, #3
 8007434:	f003 0303 	and.w	r3, r3, #3
 8007438:	4a92      	ldr	r2, [pc, #584]	@ (8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800743a:	fa22 f303 	lsr.w	r3, r2, r3
 800743e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	ee07 3a90 	vmov	s15, r3
 8007446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	ee07 3a90 	vmov	s15, r3
 8007450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	ee07 3a90 	vmov	s15, r3
 800745e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007462:	ed97 6a04 	vldr	s12, [r7, #16]
 8007466:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800746a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800747a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007482:	e068      	b.n	8007556 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	ee07 3a90 	vmov	s15, r3
 800748a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800768c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8007492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	ee07 3a90 	vmov	s15, r3
 800749c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a0:	ed97 6a04 	vldr	s12, [r7, #16]
 80074a4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80074a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80074c0:	e049      	b.n	8007556 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	ee07 3a90 	vmov	s15, r3
 80074c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074cc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007690 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80074d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074de:	ed97 6a04 	vldr	s12, [r7, #16]
 80074e2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80074e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80074fe:	e02a      	b.n	8007556 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007500:	4b5f      	ldr	r3, [pc, #380]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	08db      	lsrs	r3, r3, #3
 8007506:	f003 0303 	and.w	r3, r3, #3
 800750a:	4a5e      	ldr	r2, [pc, #376]	@ (8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800750c:	fa22 f303 	lsr.w	r3, r2, r3
 8007510:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	ee07 3a90 	vmov	s15, r3
 8007518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	ee07 3a90 	vmov	s15, r3
 8007530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007534:	ed97 6a04 	vldr	s12, [r7, #16]
 8007538:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800753c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007540:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007544:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007548:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800754c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007550:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007554:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007556:	4b4a      	ldr	r3, [pc, #296]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800755e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007562:	d121      	bne.n	80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007564:	4b46      	ldr	r3, [pc, #280]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d017      	beq.n	80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007570:	4b43      	ldr	r3, [pc, #268]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007574:	0a5b      	lsrs	r3, r3, #9
 8007576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007582:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007586:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800758a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800758e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007596:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	e006      	b.n	80075ae <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	e002      	b.n	80075ae <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075ae:	4b34      	ldr	r3, [pc, #208]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075ba:	d121      	bne.n	8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80075bc:	4b30      	ldr	r3, [pc, #192]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80075be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d017      	beq.n	80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80075c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80075ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075cc:	0c1b      	lsrs	r3, r3, #16
 80075ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80075da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075de:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80075e2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80075e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ee:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	605a      	str	r2, [r3, #4]
 80075f6:	e006      	b.n	8007606 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	605a      	str	r2, [r3, #4]
 80075fe:	e002      	b.n	8007606 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007606:	4b1e      	ldr	r3, [pc, #120]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800760e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007612:	d121      	bne.n	8007658 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007614:	4b1a      	ldr	r3, [pc, #104]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007618:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d017      	beq.n	8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007620:	4b17      	ldr	r3, [pc, #92]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007624:	0e1b      	lsrs	r3, r3, #24
 8007626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007632:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007636:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800763a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800763e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007646:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800764e:	e010      	b.n	8007672 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	609a      	str	r2, [r3, #8]
}
 8007656:	e00c      	b.n	8007672 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	609a      	str	r2, [r3, #8]
}
 800765e:	e008      	b.n	8007672 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	609a      	str	r2, [r3, #8]
}
 8007672:	bf00      	nop
 8007674:	372c      	adds	r7, #44	@ 0x2c
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	44020c00 	.word	0x44020c00
 8007684:	03d09000 	.word	0x03d09000
 8007688:	46000000 	.word	0x46000000
 800768c:	4a742400 	.word	0x4a742400
 8007690:	4af42400 	.word	0x4af42400

08007694 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007694:	b480      	push	{r7}
 8007696:	b08b      	sub	sp, #44	@ 0x2c
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800769c:	4bae      	ldr	r3, [pc, #696]	@ (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800769e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80076a6:	4bac      	ldr	r3, [pc, #688]	@ (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80076a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80076b0:	4ba9      	ldr	r3, [pc, #676]	@ (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80076b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b4:	0a1b      	lsrs	r3, r3, #8
 80076b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076ba:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80076bc:	4ba6      	ldr	r3, [pc, #664]	@ (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80076be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c0:	091b      	lsrs	r3, r3, #4
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80076c8:	4ba3      	ldr	r3, [pc, #652]	@ (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80076ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076cc:	08db      	lsrs	r3, r3, #3
 80076ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	fb02 f303 	mul.w	r3, r2, r3
 80076d8:	ee07 3a90 	vmov	s15, r3
 80076dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 8126 	beq.w	8007938 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d053      	beq.n	800779a <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d86f      	bhi.n	80077d8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d003      	beq.n	8007706 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	2b02      	cmp	r3, #2
 8007702:	d02b      	beq.n	800775c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007704:	e068      	b.n	80077d8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007706:	4b94      	ldr	r3, [pc, #592]	@ (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	08db      	lsrs	r3, r3, #3
 800770c:	f003 0303 	and.w	r3, r3, #3
 8007710:	4a92      	ldr	r2, [pc, #584]	@ (800795c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007712:	fa22 f303 	lsr.w	r3, r2, r3
 8007716:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	ee07 3a90 	vmov	s15, r3
 8007728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773a:	ed97 6a04 	vldr	s12, [r7, #16]
 800773e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007960 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800774e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007756:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800775a:	e068      	b.n	800782e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	ee07 3a90 	vmov	s15, r3
 8007762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007766:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007964 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800776a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	ee07 3a90 	vmov	s15, r3
 8007774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007778:	ed97 6a04 	vldr	s12, [r7, #16]
 800777c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007960 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007788:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800778c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007794:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007798:	e049      	b.n	800782e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	ee07 3a90 	vmov	s15, r3
 80077a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007968 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80077a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80077ba:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007960 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80077be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80077d6:	e02a      	b.n	800782e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077d8:	4b5f      	ldr	r3, [pc, #380]	@ (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	08db      	lsrs	r3, r3, #3
 80077de:	f003 0303 	and.w	r3, r3, #3
 80077e2:	4a5e      	ldr	r2, [pc, #376]	@ (800795c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80077e4:	fa22 f303 	lsr.w	r3, r2, r3
 80077e8:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	ee07 3a90 	vmov	s15, r3
 80077f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	ee07 3a90 	vmov	s15, r3
 80077fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	ee07 3a90 	vmov	s15, r3
 8007808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007810:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007960 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007820:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007828:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800782c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800782e:	4b4a      	ldr	r3, [pc, #296]	@ (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800783a:	d121      	bne.n	8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800783c:	4b46      	ldr	r3, [pc, #280]	@ (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800783e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d017      	beq.n	8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007848:	4b43      	ldr	r3, [pc, #268]	@ (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800784a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800784c:	0a5b      	lsrs	r3, r3, #9
 800784e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007852:	ee07 3a90 	vmov	s15, r3
 8007856:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800785a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800785e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007862:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800786a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800786e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	e006      	b.n	8007886 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	e002      	b.n	8007886 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007886:	4b34      	ldr	r3, [pc, #208]	@ (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800788e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007892:	d121      	bne.n	80078d8 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007894:	4b30      	ldr	r3, [pc, #192]	@ (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d017      	beq.n	80078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80078a0:	4b2d      	ldr	r3, [pc, #180]	@ (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80078a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078a4:	0c1b      	lsrs	r3, r3, #16
 80078a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078aa:	ee07 3a90 	vmov	s15, r3
 80078ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80078b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078b6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80078ba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80078be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078c6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	605a      	str	r2, [r3, #4]
 80078ce:	e006      	b.n	80078de <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	605a      	str	r2, [r3, #4]
 80078d6:	e002      	b.n	80078de <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078de:	4b1e      	ldr	r3, [pc, #120]	@ (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078ea:	d121      	bne.n	8007930 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80078ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80078ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d017      	beq.n	8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80078f8:	4b17      	ldr	r3, [pc, #92]	@ (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80078fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078fc:	0e1b      	lsrs	r3, r3, #24
 80078fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800790a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800790e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007912:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800791a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800791e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007926:	e010      	b.n	800794a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	609a      	str	r2, [r3, #8]
}
 800792e:	e00c      	b.n	800794a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	609a      	str	r2, [r3, #8]
}
 8007936:	e008      	b.n	800794a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	609a      	str	r2, [r3, #8]
}
 800794a:	bf00      	nop
 800794c:	372c      	adds	r7, #44	@ 0x2c
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	44020c00 	.word	0x44020c00
 800795c:	03d09000 	.word	0x03d09000
 8007960:	46000000 	.word	0x46000000
 8007964:	4a742400 	.word	0x4a742400
 8007968:	4af42400 	.word	0x4af42400

0800796c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800796c:	b590      	push	{r4, r7, lr}
 800796e:	b08f      	sub	sp, #60	@ 0x3c
 8007970:	af00      	add	r7, sp, #0
 8007972:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007976:	e9d7 0100 	ldrd	r0, r1, [r7]
 800797a:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800797e:	4321      	orrs	r1, r4
 8007980:	d150      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007982:	4b26      	ldr	r3, [pc, #152]	@ (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007988:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800798c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800798e:	4b23      	ldr	r3, [pc, #140]	@ (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b02      	cmp	r3, #2
 800799a:	d108      	bne.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800799c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079a2:	d104      	bne.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80079a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079aa:	f002 bb2a 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80079ae:	4b1b      	ldr	r3, [pc, #108]	@ (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80079b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079bc:	d108      	bne.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079c4:	d104      	bne.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80079c6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80079ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80079cc:	f002 bb19 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80079d0:	4b12      	ldr	r3, [pc, #72]	@ (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079dc:	d119      	bne.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80079de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079e4:	d115      	bne.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80079e6:	4b0d      	ldr	r3, [pc, #52]	@ (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80079ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079f2:	d30a      	bcc.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80079f4:	4b09      	ldr	r3, [pc, #36]	@ (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	0a1b      	lsrs	r3, r3, #8
 80079fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079fe:	4a08      	ldr	r2, [pc, #32]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a04:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007a06:	f002 bafc 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007a0e:	f002 baf8 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a16:	f002 baf4 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a1a:	bf00      	nop
 8007a1c:	44020c00 	.word	0x44020c00
 8007a20:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007a24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a28:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8007a2c:	ea50 0104 	orrs.w	r1, r0, r4
 8007a30:	f001 8275 	beq.w	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8007a34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a38:	2801      	cmp	r0, #1
 8007a3a:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8007a3e:	f082 82dd 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a46:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8007a4a:	ea50 0104 	orrs.w	r1, r0, r4
 8007a4e:	f001 816c 	beq.w	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8007a52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a56:	2801      	cmp	r0, #1
 8007a58:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8007a5c:	f082 82ce 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a64:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8007a68:	ea50 0104 	orrs.w	r1, r0, r4
 8007a6c:	f001 8602 	beq.w	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8007a70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a74:	2801      	cmp	r0, #1
 8007a76:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8007a7a:	f082 82bf 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a82:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8007a86:	ea50 0104 	orrs.w	r1, r0, r4
 8007a8a:	f001 854c 	beq.w	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8007a8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a92:	2801      	cmp	r0, #1
 8007a94:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8007a98:	f082 82b0 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aa0:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8007aa4:	ea50 0104 	orrs.w	r1, r0, r4
 8007aa8:	f001 849e 	beq.w	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8007aac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ab0:	2801      	cmp	r0, #1
 8007ab2:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8007ab6:	f082 82a1 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007aba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007abe:	f1a1 0420 	sub.w	r4, r1, #32
 8007ac2:	ea50 0104 	orrs.w	r1, r0, r4
 8007ac6:	f001 83e8 	beq.w	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8007aca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ace:	2801      	cmp	r0, #1
 8007ad0:	f171 0120 	sbcs.w	r1, r1, #32
 8007ad4:	f082 8292 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007adc:	f1a1 0410 	sub.w	r4, r1, #16
 8007ae0:	ea50 0104 	orrs.w	r1, r0, r4
 8007ae4:	f002 8256 	beq.w	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aec:	2801      	cmp	r0, #1
 8007aee:	f171 0110 	sbcs.w	r1, r1, #16
 8007af2:	f082 8283 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007afa:	f1a1 0408 	sub.w	r4, r1, #8
 8007afe:	ea50 0104 	orrs.w	r1, r0, r4
 8007b02:	f002 81cc 	beq.w	8009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8007b06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b0a:	2801      	cmp	r0, #1
 8007b0c:	f171 0108 	sbcs.w	r1, r1, #8
 8007b10:	f082 8274 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b18:	1f0c      	subs	r4, r1, #4
 8007b1a:	ea50 0104 	orrs.w	r1, r0, r4
 8007b1e:	f001 8648 	beq.w	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8007b22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b26:	2801      	cmp	r0, #1
 8007b28:	f171 0104 	sbcs.w	r1, r1, #4
 8007b2c:	f082 8266 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b34:	1e8c      	subs	r4, r1, #2
 8007b36:	ea50 0104 	orrs.w	r1, r0, r4
 8007b3a:	f002 8143 	beq.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8007b3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b42:	2801      	cmp	r0, #1
 8007b44:	f171 0102 	sbcs.w	r1, r1, #2
 8007b48:	f082 8258 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b50:	1e4c      	subs	r4, r1, #1
 8007b52:	ea50 0104 	orrs.w	r1, r0, r4
 8007b56:	f002 80ce 	beq.w	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8007b5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b5e:	2801      	cmp	r0, #1
 8007b60:	f171 0101 	sbcs.w	r1, r1, #1
 8007b64:	f082 824a 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b6c:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8007b70:	4321      	orrs	r1, r4
 8007b72:	f002 8059 	beq.w	8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8007b76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b7a:	4cd9      	ldr	r4, [pc, #868]	@ (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007b7c:	42a0      	cmp	r0, r4
 8007b7e:	f171 0100 	sbcs.w	r1, r1, #0
 8007b82:	f082 823b 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b8a:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8007b8e:	4321      	orrs	r1, r4
 8007b90:	f001 87d9 	beq.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8007b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b98:	4cd2      	ldr	r4, [pc, #840]	@ (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007b9a:	42a0      	cmp	r0, r4
 8007b9c:	f171 0100 	sbcs.w	r1, r1, #0
 8007ba0:	f082 822c 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ba4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ba8:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8007bac:	4321      	orrs	r1, r4
 8007bae:	f001 8751 	beq.w	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8007bb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bb6:	4ccc      	ldr	r4, [pc, #816]	@ (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007bb8:	42a0      	cmp	r0, r4
 8007bba:	f171 0100 	sbcs.w	r1, r1, #0
 8007bbe:	f082 821d 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007bc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bc6:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8007bca:	4321      	orrs	r1, r4
 8007bcc:	f001 869a 	beq.w	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8007bd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bd4:	4cc5      	ldr	r4, [pc, #788]	@ (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8007bd6:	42a0      	cmp	r0, r4
 8007bd8:	f171 0100 	sbcs.w	r1, r1, #0
 8007bdc:	f082 820e 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007be4:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007be8:	4321      	orrs	r1, r4
 8007bea:	f001 8612 	beq.w	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8007bee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bf2:	4cbf      	ldr	r4, [pc, #764]	@ (8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007bf4:	42a0      	cmp	r0, r4
 8007bf6:	f171 0100 	sbcs.w	r1, r1, #0
 8007bfa:	f082 81ff 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c02:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8007c06:	4321      	orrs	r1, r4
 8007c08:	f002 817e 	beq.w	8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007c0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c10:	4cb8      	ldr	r4, [pc, #736]	@ (8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c12:	42a0      	cmp	r0, r4
 8007c14:	f171 0100 	sbcs.w	r1, r1, #0
 8007c18:	f082 81f0 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c20:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8007c24:	4321      	orrs	r1, r4
 8007c26:	f000 829e 	beq.w	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8007c2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c2e:	4cb2      	ldr	r4, [pc, #712]	@ (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007c30:	42a0      	cmp	r0, r4
 8007c32:	f171 0100 	sbcs.w	r1, r1, #0
 8007c36:	f082 81e1 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c3e:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8007c42:	4321      	orrs	r1, r4
 8007c44:	f000 826d 	beq.w	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007c48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c4c:	4cab      	ldr	r4, [pc, #684]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007c4e:	42a0      	cmp	r0, r4
 8007c50:	f171 0100 	sbcs.w	r1, r1, #0
 8007c54:	f082 81d2 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c5c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007c60:	4321      	orrs	r1, r4
 8007c62:	f001 800d 	beq.w	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8007c66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c6a:	4ca5      	ldr	r4, [pc, #660]	@ (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007c6c:	42a0      	cmp	r0, r4
 8007c6e:	f171 0100 	sbcs.w	r1, r1, #0
 8007c72:	f082 81c3 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c7a:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8007c7e:	4321      	orrs	r1, r4
 8007c80:	f000 81d0 	beq.w	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8007c84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c88:	4c9e      	ldr	r4, [pc, #632]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007c8a:	42a0      	cmp	r0, r4
 8007c8c:	f171 0100 	sbcs.w	r1, r1, #0
 8007c90:	f082 81b4 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c98:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8007c9c:	4321      	orrs	r1, r4
 8007c9e:	f000 8142 	beq.w	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8007ca2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ca6:	4c98      	ldr	r4, [pc, #608]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007ca8:	42a0      	cmp	r0, r4
 8007caa:	f171 0100 	sbcs.w	r1, r1, #0
 8007cae:	f082 81a5 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007cb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cb6:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8007cba:	4321      	orrs	r1, r4
 8007cbc:	f001 824e 	beq.w	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cc4:	4c91      	ldr	r4, [pc, #580]	@ (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007cc6:	42a0      	cmp	r0, r4
 8007cc8:	f171 0100 	sbcs.w	r1, r1, #0
 8007ccc:	f082 8196 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cd4:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8007cd8:	4321      	orrs	r1, r4
 8007cda:	f001 8197 	beq.w	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8007cde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ce2:	4c8b      	ldr	r4, [pc, #556]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007ce4:	42a0      	cmp	r0, r4
 8007ce6:	f171 0100 	sbcs.w	r1, r1, #0
 8007cea:	f082 8187 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007cee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cf2:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8007cf6:	4321      	orrs	r1, r4
 8007cf8:	f001 8154 	beq.w	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007cfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d00:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8007d04:	f171 0100 	sbcs.w	r1, r1, #0
 8007d08:	f082 8178 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d10:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007d14:	4321      	orrs	r1, r4
 8007d16:	f001 80b7 	beq.w	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007d1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d1e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8007d22:	42a0      	cmp	r0, r4
 8007d24:	f171 0100 	sbcs.w	r1, r1, #0
 8007d28:	f082 8168 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d30:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8007d34:	4321      	orrs	r1, r4
 8007d36:	f001 8064 	beq.w	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8007d3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d3e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8007d42:	42a0      	cmp	r0, r4
 8007d44:	f171 0100 	sbcs.w	r1, r1, #0
 8007d48:	f082 8158 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d50:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8007d54:	4321      	orrs	r1, r4
 8007d56:	f001 8011 	beq.w	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8007d5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d5e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8007d62:	42a0      	cmp	r0, r4
 8007d64:	f171 0100 	sbcs.w	r1, r1, #0
 8007d68:	f082 8148 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d70:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8007d74:	4321      	orrs	r1, r4
 8007d76:	f000 871e 	beq.w	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8007d7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d7e:	f241 0401 	movw	r4, #4097	@ 0x1001
 8007d82:	42a0      	cmp	r0, r4
 8007d84:	f171 0100 	sbcs.w	r1, r1, #0
 8007d88:	f082 8138 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d90:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8007d94:	4321      	orrs	r1, r4
 8007d96:	f000 86a8 	beq.w	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8007d9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d9e:	f640 0401 	movw	r4, #2049	@ 0x801
 8007da2:	42a0      	cmp	r0, r4
 8007da4:	f171 0100 	sbcs.w	r1, r1, #0
 8007da8:	f082 8128 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007dac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007db0:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8007db4:	4321      	orrs	r1, r4
 8007db6:	f000 8632 	beq.w	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8007dba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dbe:	f240 4401 	movw	r4, #1025	@ 0x401
 8007dc2:	42a0      	cmp	r0, r4
 8007dc4:	f171 0100 	sbcs.w	r1, r1, #0
 8007dc8:	f082 8118 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007dcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dd0:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8007dd4:	4321      	orrs	r1, r4
 8007dd6:	f000 85b0 	beq.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8007dda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dde:	f240 2401 	movw	r4, #513	@ 0x201
 8007de2:	42a0      	cmp	r0, r4
 8007de4:	f171 0100 	sbcs.w	r1, r1, #0
 8007de8:	f082 8108 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007dec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007df0:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8007df4:	4321      	orrs	r1, r4
 8007df6:	f000 8535 	beq.w	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007dfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dfe:	f240 1401 	movw	r4, #257	@ 0x101
 8007e02:	42a0      	cmp	r0, r4
 8007e04:	f171 0100 	sbcs.w	r1, r1, #0
 8007e08:	f082 80f8 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e10:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8007e14:	4321      	orrs	r1, r4
 8007e16:	f000 84ba 	beq.w	800878e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8007e1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e1e:	2881      	cmp	r0, #129	@ 0x81
 8007e20:	f171 0100 	sbcs.w	r1, r1, #0
 8007e24:	f082 80ea 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e2c:	2821      	cmp	r0, #33	@ 0x21
 8007e2e:	f171 0100 	sbcs.w	r1, r1, #0
 8007e32:	d26f      	bcs.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007e34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e38:	4301      	orrs	r1, r0
 8007e3a:	f002 80df 	beq.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e42:	1e42      	subs	r2, r0, #1
 8007e44:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007e48:	2a20      	cmp	r2, #32
 8007e4a:	f173 0100 	sbcs.w	r1, r3, #0
 8007e4e:	f082 80d5 	bcs.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e52:	2a1f      	cmp	r2, #31
 8007e54:	f202 80d2 	bhi.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e58:	a101      	add	r1, pc, #4	@ (adr r1, 8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007e5a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e5e:	bf00      	nop
 8007e60:	080081c1 	.word	0x080081c1
 8007e64:	0800828d 	.word	0x0800828d
 8007e68:	08009ffd 	.word	0x08009ffd
 8007e6c:	0800834d 	.word	0x0800834d
 8007e70:	08009ffd 	.word	0x08009ffd
 8007e74:	08009ffd 	.word	0x08009ffd
 8007e78:	08009ffd 	.word	0x08009ffd
 8007e7c:	0800841d 	.word	0x0800841d
 8007e80:	08009ffd 	.word	0x08009ffd
 8007e84:	08009ffd 	.word	0x08009ffd
 8007e88:	08009ffd 	.word	0x08009ffd
 8007e8c:	08009ffd 	.word	0x08009ffd
 8007e90:	08009ffd 	.word	0x08009ffd
 8007e94:	08009ffd 	.word	0x08009ffd
 8007e98:	08009ffd 	.word	0x08009ffd
 8007e9c:	080084ff 	.word	0x080084ff
 8007ea0:	08009ffd 	.word	0x08009ffd
 8007ea4:	08009ffd 	.word	0x08009ffd
 8007ea8:	08009ffd 	.word	0x08009ffd
 8007eac:	08009ffd 	.word	0x08009ffd
 8007eb0:	08009ffd 	.word	0x08009ffd
 8007eb4:	08009ffd 	.word	0x08009ffd
 8007eb8:	08009ffd 	.word	0x08009ffd
 8007ebc:	08009ffd 	.word	0x08009ffd
 8007ec0:	08009ffd 	.word	0x08009ffd
 8007ec4:	08009ffd 	.word	0x08009ffd
 8007ec8:	08009ffd 	.word	0x08009ffd
 8007ecc:	08009ffd 	.word	0x08009ffd
 8007ed0:	08009ffd 	.word	0x08009ffd
 8007ed4:	08009ffd 	.word	0x08009ffd
 8007ed8:	08009ffd 	.word	0x08009ffd
 8007edc:	080085d5 	.word	0x080085d5
 8007ee0:	80000001 	.word	0x80000001
 8007ee4:	40000001 	.word	0x40000001
 8007ee8:	20000001 	.word	0x20000001
 8007eec:	10000001 	.word	0x10000001
 8007ef0:	08000001 	.word	0x08000001
 8007ef4:	04000001 	.word	0x04000001
 8007ef8:	00800001 	.word	0x00800001
 8007efc:	00400001 	.word	0x00400001
 8007f00:	00200001 	.word	0x00200001
 8007f04:	00100001 	.word	0x00100001
 8007f08:	00080001 	.word	0x00080001
 8007f0c:	00040001 	.word	0x00040001
 8007f10:	00020001 	.word	0x00020001
 8007f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f18:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	f000 83c4 	beq.w	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007f22:	f002 b86b 	b.w	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007f26:	4ba1      	ldr	r3, [pc, #644]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f2c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007f30:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f38:	d036      	beq.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f40:	d86b      	bhi.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f48:	d02b      	beq.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f50:	d863      	bhi.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f58:	d01b      	beq.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f60:	d85b      	bhi.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d004      	beq.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f6e:	d008      	beq.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8007f70:	e053      	b.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f72:	f107 0320 	add.w	r3, r7, #32
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff f8b4 	bl	80070e4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f80:	e04e      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f82:	f107 0314 	add.w	r3, r7, #20
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff fa18 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f90:	e046      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f92:	f107 0308 	add.w	r3, r7, #8
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff fb7c 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007fa0:	e03e      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007fa2:	4b83      	ldr	r3, [pc, #524]	@ (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007fa4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007fa6:	e03b      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fa8:	4b80      	ldr	r3, [pc, #512]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007faa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fae:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fb4:	4b7d      	ldr	r3, [pc, #500]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0302 	and.w	r3, r3, #2
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d10c      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8007fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d109      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fc6:	4b79      	ldr	r3, [pc, #484]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	08db      	lsrs	r3, r3, #3
 8007fcc:	f003 0303 	and.w	r3, r3, #3
 8007fd0:	4a78      	ldr	r2, [pc, #480]	@ (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fd8:	e01e      	b.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fda:	4b74      	ldr	r3, [pc, #464]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fe2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fe6:	d106      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fee:	d102      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007ff0:	4b71      	ldr	r3, [pc, #452]	@ (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ff4:	e010      	b.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ff6:	4b6d      	ldr	r3, [pc, #436]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ffe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008002:	d106      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8008004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008006:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800800a:	d102      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800800c:	4b6b      	ldr	r3, [pc, #428]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800800e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008010:	e002      	b.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008016:	e003      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8008018:	e002      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800801a:	2300      	movs	r3, #0
 800801c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800801e:	bf00      	nop
          }
        }
        break;
 8008020:	f001 bfef 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008024:	4b61      	ldr	r3, [pc, #388]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800802a:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800802e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008032:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008036:	d036      	beq.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8008038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800803e:	d86b      	bhi.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008042:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008046:	d02b      	beq.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800804e:	d863      	bhi.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008056:	d01b      	beq.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800805e:	d85b      	bhi.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008062:	2b00      	cmp	r3, #0
 8008064:	d004      	beq.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008068:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800806c:	d008      	beq.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800806e:	e053      	b.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008070:	f107 0320 	add.w	r3, r7, #32
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff f835 	bl	80070e4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800807e:	e04e      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008080:	f107 0314 	add.w	r3, r7, #20
 8008084:	4618      	mov	r0, r3
 8008086:	f7ff f999 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800808e:	e046      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008090:	f107 0308 	add.w	r3, r7, #8
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff fafd 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800809e:	e03e      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80080a0:	4b43      	ldr	r3, [pc, #268]	@ (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80080a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80080a4:	e03b      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080a6:	4b41      	ldr	r3, [pc, #260]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80080a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080ac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80080b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080b2:	4b3e      	ldr	r3, [pc, #248]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0302 	and.w	r3, r3, #2
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d10c      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80080be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d109      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080c4:	4b39      	ldr	r3, [pc, #228]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	08db      	lsrs	r3, r3, #3
 80080ca:	f003 0303 	and.w	r3, r3, #3
 80080ce:	4a39      	ldr	r2, [pc, #228]	@ (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80080d0:	fa22 f303 	lsr.w	r3, r2, r3
 80080d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080d6:	e01e      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080d8:	4b34      	ldr	r3, [pc, #208]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080e4:	d106      	bne.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80080e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ec:	d102      	bne.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80080ee:	4b32      	ldr	r3, [pc, #200]	@ (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80080f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080f2:	e010      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080f4:	4b2d      	ldr	r3, [pc, #180]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008100:	d106      	bne.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8008102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008104:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008108:	d102      	bne.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800810a:	4b2c      	ldr	r3, [pc, #176]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800810c:	637b      	str	r3, [r7, #52]	@ 0x34
 800810e:	e002      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008114:	e003      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8008116:	e002      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8008118:	2300      	movs	r3, #0
 800811a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800811c:	bf00      	nop
          }
        }
        break;
 800811e:	f001 bf70 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008122:	4b22      	ldr	r3, [pc, #136]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008124:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800812c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800812e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008130:	2b00      	cmp	r3, #0
 8008132:	d108      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008134:	f107 0320 	add.w	r3, r7, #32
 8008138:	4618      	mov	r0, r3
 800813a:	f7fe ffd3 	bl	80070e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800813e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008140:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008142:	f001 bf5e 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8008146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008148:	2b40      	cmp	r3, #64	@ 0x40
 800814a:	d108      	bne.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800814c:	f107 0314 	add.w	r3, r7, #20
 8008150:	4618      	mov	r0, r3
 8008152:	f7ff f933 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800815a:	f001 bf52 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800815e:	2300      	movs	r3, #0
 8008160:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008162:	f001 bf4e 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8008166:	4b11      	ldr	r3, [pc, #68]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008168:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800816c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008170:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	2b00      	cmp	r3, #0
 8008176:	d108      	bne.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008178:	f107 0320 	add.w	r3, r7, #32
 800817c:	4618      	mov	r0, r3
 800817e:	f7fe ffb1 	bl	80070e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008184:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008186:	f001 bf3c 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800818a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818c:	2b80      	cmp	r3, #128	@ 0x80
 800818e:	d108      	bne.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008190:	f107 0314 	add.w	r3, r7, #20
 8008194:	4618      	mov	r0, r3
 8008196:	f7ff f911 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800819e:	f001 bf30 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081a6:	f001 bf2c 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081aa:	bf00      	nop
 80081ac:	44020c00 	.word	0x44020c00
 80081b0:	00bb8000 	.word	0x00bb8000
 80081b4:	03d09000 	.word	0x03d09000
 80081b8:	003d0900 	.word	0x003d0900
 80081bc:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80081c0:	4b9d      	ldr	r3, [pc, #628]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80081c6:	f003 0307 	and.w	r3, r3, #7
 80081ca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80081cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d104      	bne.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80081d2:	f7fc ffd1 	bl	8005178 <HAL_RCC_GetPCLK2Freq>
 80081d6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80081d8:	f001 bf13 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80081dc:	4b96      	ldr	r3, [pc, #600]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081e8:	d10a      	bne.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80081ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d107      	bne.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081f0:	f107 0314 	add.w	r3, r7, #20
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7ff f8e1 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081fe:	e043      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8008200:	4b8d      	ldr	r3, [pc, #564]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800820c:	d10a      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800820e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008210:	2b02      	cmp	r3, #2
 8008212:	d107      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008214:	f107 0308 	add.w	r3, r7, #8
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff fa3b 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	637b      	str	r3, [r7, #52]	@ 0x34
 8008222:	e031      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008224:	4b84      	ldr	r3, [pc, #528]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0302 	and.w	r3, r3, #2
 800822c:	2b02      	cmp	r3, #2
 800822e:	d10c      	bne.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8008230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008232:	2b03      	cmp	r3, #3
 8008234:	d109      	bne.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008236:	4b80      	ldr	r3, [pc, #512]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	08db      	lsrs	r3, r3, #3
 800823c:	f003 0303 	and.w	r3, r3, #3
 8008240:	4a7e      	ldr	r2, [pc, #504]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008242:	fa22 f303 	lsr.w	r3, r2, r3
 8008246:	637b      	str	r3, [r7, #52]	@ 0x34
 8008248:	e01e      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800824a:	4b7b      	ldr	r3, [pc, #492]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008256:	d105      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8008258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825a:	2b04      	cmp	r3, #4
 800825c:	d102      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800825e:	4b78      	ldr	r3, [pc, #480]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008260:	637b      	str	r3, [r7, #52]	@ 0x34
 8008262:	e011      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008264:	4b74      	ldr	r3, [pc, #464]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800826a:	f003 0302 	and.w	r3, r3, #2
 800826e:	2b02      	cmp	r3, #2
 8008270:	d106      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8008272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008274:	2b05      	cmp	r3, #5
 8008276:	d103      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8008278:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800827c:	637b      	str	r3, [r7, #52]	@ 0x34
 800827e:	e003      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008284:	f001 bebd 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008288:	f001 bebb 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800828c:	4b6a      	ldr	r3, [pc, #424]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800828e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008292:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008296:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829a:	2b00      	cmp	r3, #0
 800829c:	d104      	bne.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800829e:	f7fc ff55 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 80082a2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80082a4:	f001 bead 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80082a8:	4b63      	ldr	r3, [pc, #396]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082b4:	d10a      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80082b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b8:	2b08      	cmp	r3, #8
 80082ba:	d107      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082bc:	f107 0314 	add.w	r3, r7, #20
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7ff f87b 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ca:	e03d      	b.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80082cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ce:	2b10      	cmp	r3, #16
 80082d0:	d108      	bne.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082d2:	f107 0308 	add.w	r3, r7, #8
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7ff f9dc 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082e0:	f001 be8f 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80082e4:	4b54      	ldr	r3, [pc, #336]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0302 	and.w	r3, r3, #2
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d10c      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80082f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f2:	2b18      	cmp	r3, #24
 80082f4:	d109      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082f6:	4b50      	ldr	r3, [pc, #320]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	08db      	lsrs	r3, r3, #3
 80082fc:	f003 0303 	and.w	r3, r3, #3
 8008300:	4a4e      	ldr	r2, [pc, #312]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008302:	fa22 f303 	lsr.w	r3, r2, r3
 8008306:	637b      	str	r3, [r7, #52]	@ 0x34
 8008308:	e01e      	b.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800830a:	4b4b      	ldr	r3, [pc, #300]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008316:	d105      	bne.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831a:	2b20      	cmp	r3, #32
 800831c:	d102      	bne.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800831e:	4b48      	ldr	r3, [pc, #288]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008320:	637b      	str	r3, [r7, #52]	@ 0x34
 8008322:	e011      	b.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008324:	4b44      	ldr	r3, [pc, #272]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	2b02      	cmp	r3, #2
 8008330:	d106      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8008332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008334:	2b28      	cmp	r3, #40	@ 0x28
 8008336:	d103      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8008338:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800833c:	637b      	str	r3, [r7, #52]	@ 0x34
 800833e:	e003      	b.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008344:	f001 be5d 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008348:	f001 be5b 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800834c:	4b3a      	ldr	r3, [pc, #232]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800834e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008352:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008356:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835a:	2b00      	cmp	r3, #0
 800835c:	d104      	bne.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800835e:	f7fc fef5 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 8008362:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008364:	f001 be4d 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008368:	4b33      	ldr	r3, [pc, #204]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008370:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008374:	d10a      	bne.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8008376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008378:	2b40      	cmp	r3, #64	@ 0x40
 800837a:	d107      	bne.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800837c:	f107 0314 	add.w	r3, r7, #20
 8008380:	4618      	mov	r0, r3
 8008382:	f7ff f81b 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	637b      	str	r3, [r7, #52]	@ 0x34
 800838a:	e045      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800838c:	4b2a      	ldr	r3, [pc, #168]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008398:	d10a      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800839a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839c:	2b80      	cmp	r3, #128	@ 0x80
 800839e:	d107      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083a0:	f107 0308 	add.w	r3, r7, #8
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7ff f975 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ae:	e033      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80083b0:	4b21      	ldr	r3, [pc, #132]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d10c      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80083bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083be:	2bc0      	cmp	r3, #192	@ 0xc0
 80083c0:	d109      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083c2:	4b1d      	ldr	r3, [pc, #116]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	08db      	lsrs	r3, r3, #3
 80083c8:	f003 0303 	and.w	r3, r3, #3
 80083cc:	4a1b      	ldr	r2, [pc, #108]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80083ce:	fa22 f303 	lsr.w	r3, r2, r3
 80083d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80083d4:	e020      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80083d6:	4b18      	ldr	r3, [pc, #96]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083e2:	d106      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80083e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083ea:	d102      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 80083ec:	4b14      	ldr	r3, [pc, #80]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80083ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80083f0:	e012      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80083f2:	4b11      	ldr	r3, [pc, #68]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80083f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d107      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8008400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008402:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008406:	d103      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8008408:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800840c:	637b      	str	r3, [r7, #52]	@ 0x34
 800840e:	e003      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008414:	f001 bdf5 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008418:	f001 bdf3 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800841c:	4b06      	ldr	r3, [pc, #24]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800841e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008422:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008426:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10a      	bne.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800842e:	f7fc fe8d 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 8008432:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008434:	f001 bde5 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008438:	44020c00 	.word	0x44020c00
 800843c:	03d09000 	.word	0x03d09000
 8008440:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008444:	4ba0      	ldr	r3, [pc, #640]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800844c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008450:	d10b      	bne.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8008452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008458:	d107      	bne.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800845a:	f107 0314 	add.w	r3, r7, #20
 800845e:	4618      	mov	r0, r3
 8008460:	f7fe ffac 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	637b      	str	r3, [r7, #52]	@ 0x34
 8008468:	e047      	b.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800846a:	4b97      	ldr	r3, [pc, #604]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008472:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008476:	d10b      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8008478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800847e:	d107      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008480:	f107 0308 	add.w	r3, r7, #8
 8008484:	4618      	mov	r0, r3
 8008486:	f7ff f905 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	637b      	str	r3, [r7, #52]	@ 0x34
 800848e:	e034      	b.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008490:	4b8d      	ldr	r3, [pc, #564]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0302 	and.w	r3, r3, #2
 8008498:	2b02      	cmp	r3, #2
 800849a:	d10d      	bne.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800849c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80084a2:	d109      	bne.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084a4:	4b88      	ldr	r3, [pc, #544]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	08db      	lsrs	r3, r3, #3
 80084aa:	f003 0303 	and.w	r3, r3, #3
 80084ae:	4a87      	ldr	r2, [pc, #540]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80084b0:	fa22 f303 	lsr.w	r3, r2, r3
 80084b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80084b6:	e020      	b.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80084b8:	4b83      	ldr	r3, [pc, #524]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084c4:	d106      	bne.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80084c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084cc:	d102      	bne.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 80084ce:	4b80      	ldr	r3, [pc, #512]	@ (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80084d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084d2:	e012      	b.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80084d4:	4b7c      	ldr	r3, [pc, #496]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d107      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80084e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80084e8:	d103      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 80084ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f0:	e003      	b.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084f6:	f001 bd84 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80084fa:	f001 bd82 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80084fe:	4b72      	ldr	r3, [pc, #456]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008500:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008504:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008508:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800850a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850c:	2b00      	cmp	r3, #0
 800850e:	d104      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008510:	f7fc fe1c 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 8008514:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008516:	f001 bd74 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800851a:	4b6b      	ldr	r3, [pc, #428]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008522:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008526:	d10b      	bne.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8008528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800852e:	d107      	bne.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008530:	f107 0314 	add.w	r3, r7, #20
 8008534:	4618      	mov	r0, r3
 8008536:	f7fe ff41 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	637b      	str	r3, [r7, #52]	@ 0x34
 800853e:	e047      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008540:	4b61      	ldr	r3, [pc, #388]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008548:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800854c:	d10b      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008554:	d107      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008556:	f107 0308 	add.w	r3, r7, #8
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff f89a 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	637b      	str	r3, [r7, #52]	@ 0x34
 8008564:	e034      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008566:	4b58      	ldr	r3, [pc, #352]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b02      	cmp	r3, #2
 8008570:	d10d      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008574:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008578:	d109      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800857a:	4b53      	ldr	r3, [pc, #332]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	08db      	lsrs	r3, r3, #3
 8008580:	f003 0303 	and.w	r3, r3, #3
 8008584:	4a51      	ldr	r2, [pc, #324]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008586:	fa22 f303 	lsr.w	r3, r2, r3
 800858a:	637b      	str	r3, [r7, #52]	@ 0x34
 800858c:	e020      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800858e:	4b4e      	ldr	r3, [pc, #312]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800859a:	d106      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800859c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085a2:	d102      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80085a4:	4b4a      	ldr	r3, [pc, #296]	@ (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80085a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085a8:	e012      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80085aa:	4b47      	ldr	r3, [pc, #284]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80085ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085b0:	f003 0302 	and.w	r3, r3, #2
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d107      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80085be:	d103      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 80085c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085c6:	e003      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085cc:	f001 bd19 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80085d0:	f001 bd17 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80085d4:	4b3c      	ldr	r3, [pc, #240]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80085d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80085da:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80085de:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80085e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d104      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80085e6:	f7fc fdb1 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 80085ea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80085ec:	f001 bd09 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80085f0:	4b35      	ldr	r3, [pc, #212]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085fc:	d10b      	bne.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80085fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008604:	d107      	bne.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008606:	f107 0314 	add.w	r3, r7, #20
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fed6 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	637b      	str	r3, [r7, #52]	@ 0x34
 8008614:	e047      	b.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008616:	4b2c      	ldr	r3, [pc, #176]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800861e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008622:	d10b      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8008624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800862a:	d107      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800862c:	f107 0308 	add.w	r3, r7, #8
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff f82f 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	637b      	str	r3, [r7, #52]	@ 0x34
 800863a:	e034      	b.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800863c:	4b22      	ldr	r3, [pc, #136]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b02      	cmp	r3, #2
 8008646:	d10d      	bne.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8008648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800864e:	d109      	bne.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008650:	4b1d      	ldr	r3, [pc, #116]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	08db      	lsrs	r3, r3, #3
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	4a1c      	ldr	r2, [pc, #112]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800865c:	fa22 f303 	lsr.w	r3, r2, r3
 8008660:	637b      	str	r3, [r7, #52]	@ 0x34
 8008662:	e020      	b.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008664:	4b18      	ldr	r3, [pc, #96]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800866c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008670:	d106      	bne.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8008672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008674:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008678:	d102      	bne.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800867a:	4b15      	ldr	r3, [pc, #84]	@ (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800867c:	637b      	str	r3, [r7, #52]	@ 0x34
 800867e:	e012      	b.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008680:	4b11      	ldr	r3, [pc, #68]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	2b02      	cmp	r3, #2
 800868c:	d107      	bne.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008694:	d103      	bne.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8008696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800869a:	637b      	str	r3, [r7, #52]	@ 0x34
 800869c:	e003      	b.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086a2:	f001 bcae 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086a6:	f001 bcac 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80086aa:	4b07      	ldr	r3, [pc, #28]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80086ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80086b0:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 80086b4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80086b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10b      	bne.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80086bc:	f7fc fd46 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 80086c0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80086c2:	f001 bc9e 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086c6:	bf00      	nop
 80086c8:	44020c00 	.word	0x44020c00
 80086cc:	03d09000 	.word	0x03d09000
 80086d0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80086d4:	4ba0      	ldr	r3, [pc, #640]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086e0:	d10b      	bne.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 80086e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086e8:	d107      	bne.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ea:	f107 0314 	add.w	r3, r7, #20
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fe fe64 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086f8:	e047      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80086fa:	4b97      	ldr	r3, [pc, #604]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008706:	d10b      	bne.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800870e:	d107      	bne.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008710:	f107 0308 	add.w	r3, r7, #8
 8008714:	4618      	mov	r0, r3
 8008716:	f7fe ffbd 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	637b      	str	r3, [r7, #52]	@ 0x34
 800871e:	e034      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008720:	4b8d      	ldr	r3, [pc, #564]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b02      	cmp	r3, #2
 800872a:	d10d      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800872c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008732:	d109      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008734:	4b88      	ldr	r3, [pc, #544]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	08db      	lsrs	r3, r3, #3
 800873a:	f003 0303 	and.w	r3, r3, #3
 800873e:	4a87      	ldr	r2, [pc, #540]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008740:	fa22 f303 	lsr.w	r3, r2, r3
 8008744:	637b      	str	r3, [r7, #52]	@ 0x34
 8008746:	e020      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8008748:	4b83      	ldr	r3, [pc, #524]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008754:	d106      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8008756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008758:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800875c:	d102      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800875e:	4b80      	ldr	r3, [pc, #512]	@ (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008760:	637b      	str	r3, [r7, #52]	@ 0x34
 8008762:	e012      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8008764:	4b7c      	ldr	r3, [pc, #496]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b02      	cmp	r3, #2
 8008770:	d107      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8008772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008774:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008778:	d103      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800877a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800877e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008780:	e003      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008786:	f001 bc3c 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800878a:	f001 bc3a 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800878e:	4b72      	ldr	r3, [pc, #456]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008790:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008794:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008798:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800879a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879c:	2b00      	cmp	r3, #0
 800879e:	d104      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80087a0:	f7fc fcd4 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 80087a4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80087a6:	f001 bc2c 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80087aa:	4b6b      	ldr	r3, [pc, #428]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087b6:	d10b      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80087b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087be:	d107      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087c0:	f107 0314 	add.w	r3, r7, #20
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe fdf9 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ce:	e047      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 80087d0:	4b61      	ldr	r3, [pc, #388]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087dc:	d10b      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 80087de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087e4:	d107      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087e6:	f107 0308 	add.w	r3, r7, #8
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fe ff52 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f4:	e034      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80087f6:	4b58      	ldr	r3, [pc, #352]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0302 	and.w	r3, r3, #2
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d10d      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008804:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008808:	d109      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800880a:	4b53      	ldr	r3, [pc, #332]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	08db      	lsrs	r3, r3, #3
 8008810:	f003 0303 	and.w	r3, r3, #3
 8008814:	4a51      	ldr	r2, [pc, #324]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008816:	fa22 f303 	lsr.w	r3, r2, r3
 800881a:	637b      	str	r3, [r7, #52]	@ 0x34
 800881c:	e020      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800881e:	4b4e      	ldr	r3, [pc, #312]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800882a:	d106      	bne.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800882c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008832:	d102      	bne.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8008834:	4b4a      	ldr	r3, [pc, #296]	@ (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008836:	637b      	str	r3, [r7, #52]	@ 0x34
 8008838:	e012      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800883a:	4b47      	ldr	r3, [pc, #284]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800883c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008840:	f003 0302 	and.w	r3, r3, #2
 8008844:	2b02      	cmp	r3, #2
 8008846:	d107      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800884e:	d103      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8008850:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008854:	637b      	str	r3, [r7, #52]	@ 0x34
 8008856:	e003      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800885c:	f001 bbd1 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008860:	f001 bbcf 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8008864:	4b3c      	ldr	r3, [pc, #240]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008866:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800886a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800886e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8008870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008872:	2b00      	cmp	r3, #0
 8008874:	d104      	bne.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008876:	f7fc fc69 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 800887a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800887c:	f001 bbc1 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008880:	4b35      	ldr	r3, [pc, #212]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008888:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800888c:	d10b      	bne.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800888e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008894:	d107      	bne.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008896:	f107 0314 	add.w	r3, r7, #20
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe fd8e 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80088a4:	e047      	b.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80088a6:	4b2c      	ldr	r3, [pc, #176]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088b2:	d10b      	bne.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80088b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088ba:	d107      	bne.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088bc:	f107 0308 	add.w	r3, r7, #8
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fe fee7 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ca:	e034      	b.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80088cc:	4b22      	ldr	r3, [pc, #136]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0302 	and.w	r3, r3, #2
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d10d      	bne.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80088d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80088de:	d109      	bne.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	08db      	lsrs	r3, r3, #3
 80088e6:	f003 0303 	and.w	r3, r3, #3
 80088ea:	4a1c      	ldr	r2, [pc, #112]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80088ec:	fa22 f303 	lsr.w	r3, r2, r3
 80088f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80088f2:	e020      	b.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80088f4:	4b18      	ldr	r3, [pc, #96]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008900:	d106      	bne.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8008902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008904:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008908:	d102      	bne.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800890a:	4b15      	ldr	r3, [pc, #84]	@ (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800890c:	637b      	str	r3, [r7, #52]	@ 0x34
 800890e:	e012      	b.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008910:	4b11      	ldr	r3, [pc, #68]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	2b02      	cmp	r3, #2
 800891c:	d107      	bne.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800891e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008920:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008924:	d103      	bne.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8008926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800892a:	637b      	str	r3, [r7, #52]	@ 0x34
 800892c:	e003      	b.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800892e:	2300      	movs	r3, #0
 8008930:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008932:	f001 bb66 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008936:	f001 bb64 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800893a:	4b07      	ldr	r3, [pc, #28]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800893c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008940:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8008944:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8008946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008948:	2b00      	cmp	r3, #0
 800894a:	d10b      	bne.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800894c:	f7fc fbfe 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 8008950:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8008952:	f001 bb56 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008956:	bf00      	nop
 8008958:	44020c00 	.word	0x44020c00
 800895c:	03d09000 	.word	0x03d09000
 8008960:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8008964:	4ba1      	ldr	r3, [pc, #644]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800896c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008970:	d10b      	bne.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8008972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008974:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008978:	d107      	bne.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800897a:	f107 0314 	add.w	r3, r7, #20
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe fd1c 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	637b      	str	r3, [r7, #52]	@ 0x34
 8008988:	e047      	b.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800898a:	4b98      	ldr	r3, [pc, #608]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008992:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008996:	d10b      	bne.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8008998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800899e:	d107      	bne.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089a0:	f107 0308 	add.w	r3, r7, #8
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fe fe75 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ae:	e034      	b.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80089b0:	4b8e      	ldr	r3, [pc, #568]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0302 	and.w	r3, r3, #2
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d10d      	bne.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80089bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089be:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80089c2:	d109      	bne.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089c4:	4b89      	ldr	r3, [pc, #548]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	08db      	lsrs	r3, r3, #3
 80089ca:	f003 0303 	and.w	r3, r3, #3
 80089ce:	4a88      	ldr	r2, [pc, #544]	@ (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80089d0:	fa22 f303 	lsr.w	r3, r2, r3
 80089d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80089d6:	e020      	b.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80089d8:	4b84      	ldr	r3, [pc, #528]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089e4:	d106      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ec:	d102      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80089ee:	4b81      	ldr	r3, [pc, #516]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80089f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80089f2:	e012      	b.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80089f4:	4b7d      	ldr	r3, [pc, #500]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089fa:	f003 0302 	and.w	r3, r3, #2
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d107      	bne.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8008a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a04:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008a08:	d103      	bne.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8008a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a10:	e003      	b.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a16:	f001 baf4 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a1a:	f001 baf2 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8008a1e:	4b73      	ldr	r3, [pc, #460]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008a24:	f003 0307 	and.w	r3, r3, #7
 8008a28:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d104      	bne.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a30:	f7fc fb8c 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 8008a34:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a36:	f001 bae4 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8008a3a:	4b6c      	ldr	r3, [pc, #432]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a46:	d10a      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8008a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d107      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a4e:	f107 0314 	add.w	r3, r7, #20
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fe fcb2 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a5c:	e043      	b.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8008a5e:	4b63      	ldr	r3, [pc, #396]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a6a:	d10a      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d107      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a72:	f107 0308 	add.w	r3, r7, #8
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe fe0c 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a80:	e031      	b.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8008a82:	4b5a      	ldr	r3, [pc, #360]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d10c      	bne.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a90:	2b03      	cmp	r3, #3
 8008a92:	d109      	bne.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a94:	4b55      	ldr	r3, [pc, #340]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	08db      	lsrs	r3, r3, #3
 8008a9a:	f003 0303 	and.w	r3, r3, #3
 8008a9e:	4a54      	ldr	r2, [pc, #336]	@ (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aa6:	e01e      	b.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8008aa8:	4b50      	ldr	r3, [pc, #320]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ab4:	d105      	bne.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab8:	2b04      	cmp	r3, #4
 8008aba:	d102      	bne.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8008abc:	4b4d      	ldr	r3, [pc, #308]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ac0:	e011      	b.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8008ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ac8:	f003 0302 	and.w	r3, r3, #2
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d106      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad2:	2b05      	cmp	r3, #5
 8008ad4:	d103      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8008ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8008adc:	e003      	b.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ae2:	f001 ba8e 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ae6:	f001 ba8c 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8008aea:	4b40      	ldr	r3, [pc, #256]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008aec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008af0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008af4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8008af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d104      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008afc:	f7fc fb26 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 8008b00:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b02:	f001 ba7e 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8008b06:	4b39      	ldr	r3, [pc, #228]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b12:	d10a      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	2b10      	cmp	r3, #16
 8008b18:	d107      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b1a:	f107 0314 	add.w	r3, r7, #20
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe fc4c 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b28:	e043      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8008b2a:	4b30      	ldr	r3, [pc, #192]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b36:	d10a      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8008b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3a:	2b20      	cmp	r3, #32
 8008b3c:	d107      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b3e:	f107 0308 	add.w	r3, r7, #8
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe fda6 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b4c:	e031      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8008b4e:	4b27      	ldr	r3, [pc, #156]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0302 	and.w	r3, r3, #2
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d10c      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5c:	2b30      	cmp	r3, #48	@ 0x30
 8008b5e:	d109      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b60:	4b22      	ldr	r3, [pc, #136]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	08db      	lsrs	r3, r3, #3
 8008b66:	f003 0303 	and.w	r3, r3, #3
 8008b6a:	4a21      	ldr	r2, [pc, #132]	@ (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b72:	e01e      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8008b74:	4b1d      	ldr	r3, [pc, #116]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b80:	d105      	bne.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8008b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b84:	2b40      	cmp	r3, #64	@ 0x40
 8008b86:	d102      	bne.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8008b88:	4b1a      	ldr	r3, [pc, #104]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b8c:	e011      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8008b8e:	4b17      	ldr	r3, [pc, #92]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d106      	bne.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9e:	2b50      	cmp	r3, #80	@ 0x50
 8008ba0:	d103      	bne.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8008ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ba8:	e003      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bae:	f001 ba28 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bb2:	f001 ba26 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008bbc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008bc0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d104      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008bc8:	f7fc faec 	bl	80051a4 <HAL_RCC_GetPCLK3Freq>
 8008bcc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008bce:	f001 ba18 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008bd8:	d10e      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bda:	f107 0314 	add.w	r3, r7, #20
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe fbec 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008be8:	f001 ba0b 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bec:	44020c00 	.word	0x44020c00
 8008bf0:	03d09000 	.word	0x03d09000
 8008bf4:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bfe:	d108      	bne.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c00:	f107 0308 	add.w	r3, r7, #8
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fe fd45 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c0e:	f001 b9f8 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008c12:	4ba4      	ldr	r3, [pc, #656]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0302 	and.w	r3, r3, #2
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d10d      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c24:	d109      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c26:	4b9f      	ldr	r3, [pc, #636]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	08db      	lsrs	r3, r3, #3
 8008c2c:	f003 0303 	and.w	r3, r3, #3
 8008c30:	4a9d      	ldr	r2, [pc, #628]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008c32:	fa22 f303 	lsr.w	r3, r2, r3
 8008c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c38:	e020      	b.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008c3a:	4b9a      	ldr	r3, [pc, #616]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c46:	d106      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8008c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c4e:	d102      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8008c50:	4b96      	ldr	r3, [pc, #600]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c54:	e012      	b.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008c56:	4b93      	ldr	r3, [pc, #588]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d107      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8008c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c66:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008c6a:	d103      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8008c6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c72:	e003      	b.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c78:	f001 b9c3 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c7c:	f001 b9c1 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008c80:	4b88      	ldr	r3, [pc, #544]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c86:	f003 0307 	and.w	r3, r3, #7
 8008c8a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d104      	bne.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008c92:	f7fc fa3f 	bl	8005114 <HAL_RCC_GetHCLKFreq>
 8008c96:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008c98:	f001 b9b3 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d104      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8008ca2:	f7fc f90b 	bl	8004ebc <HAL_RCC_GetSysClockFreq>
 8008ca6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008ca8:	f001 b9ab 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d108      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cb2:	f107 0314 	add.w	r3, r7, #20
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fe fb80 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cc0:	f001 b99f 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008cc4:	4b77      	ldr	r3, [pc, #476]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ccc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cd0:	d105      	bne.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd4:	2b03      	cmp	r3, #3
 8008cd6:	d102      	bne.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8008cd8:	4b75      	ldr	r3, [pc, #468]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8008cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cdc:	e023      	b.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008cde:	4b71      	ldr	r3, [pc, #452]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d10c      	bne.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8008cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	d109      	bne.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cf0:	4b6c      	ldr	r3, [pc, #432]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	08db      	lsrs	r3, r3, #3
 8008cf6:	f003 0303 	and.w	r3, r3, #3
 8008cfa:	4a6b      	ldr	r2, [pc, #428]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8008d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d02:	e010      	b.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008d04:	4b67      	ldr	r3, [pc, #412]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d10:	d105      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d14:	2b05      	cmp	r3, #5
 8008d16:	d102      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008d18:	4b64      	ldr	r3, [pc, #400]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d1c:	e003      	b.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d22:	f001 b96e 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d26:	f001 b96c 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008d2a:	4b5e      	ldr	r3, [pc, #376]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d30:	f003 0308 	and.w	r3, r3, #8
 8008d34:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008d36:	4b5b      	ldr	r3, [pc, #364]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008d38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d106      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8008d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d103      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8008d4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d50:	e012      	b.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008d52:	4b54      	ldr	r3, [pc, #336]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d60:	d106      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8008d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d64:	2b08      	cmp	r3, #8
 8008d66:	d103      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8008d68:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008d6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d6e:	e003      	b.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008d74:	f001 b945 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d78:	f001 b943 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008d7c:	4b49      	ldr	r3, [pc, #292]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008d7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d86:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d104      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d8e:	f7fc f9dd 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 8008d92:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008d94:	f001 b935 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d9e:	d108      	bne.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008da0:	f107 0308 	add.w	r3, r7, #8
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fe fc75 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dae:	f001 b928 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008db2:	4b3c      	ldr	r3, [pc, #240]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d10d      	bne.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dc4:	d109      	bne.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008dc6:	4b37      	ldr	r3, [pc, #220]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	08db      	lsrs	r3, r3, #3
 8008dcc:	f003 0303 	and.w	r3, r3, #3
 8008dd0:	4a35      	ldr	r2, [pc, #212]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dd8:	e011      	b.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008dda:	4b32      	ldr	r3, [pc, #200]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008de2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008de6:	d106      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8008de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008dee:	d102      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8008df0:	4b2e      	ldr	r3, [pc, #184]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008df4:	e003      	b.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8008df6:	2300      	movs	r3, #0
 8008df8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dfa:	f001 b902 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008dfe:	f001 b900 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008e02:	4b28      	ldr	r3, [pc, #160]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008e04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e08:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008e0c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d104      	bne.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e14:	f7fc f99a 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 8008e18:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e1a:	f001 b8f2 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e24:	d108      	bne.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e26:	f107 0308 	add.w	r3, r7, #8
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fe fc32 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e34:	f001 b8e5 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008e38:	4b1a      	ldr	r3, [pc, #104]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0302 	and.w	r3, r3, #2
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d10d      	bne.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8008e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e46:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008e4a:	d109      	bne.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e4c:	4b15      	ldr	r3, [pc, #84]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	08db      	lsrs	r3, r3, #3
 8008e52:	f003 0303 	and.w	r3, r3, #3
 8008e56:	4a14      	ldr	r2, [pc, #80]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008e58:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e5e:	e011      	b.n	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008e60:	4b10      	ldr	r3, [pc, #64]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e6c:	d106      	bne.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e70:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008e74:	d102      	bne.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8008e76:	4b0d      	ldr	r3, [pc, #52]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e7a:	e003      	b.n	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e80:	f001 b8bf 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e84:	f001 b8bd 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008e88:	4b06      	ldr	r3, [pc, #24]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008e8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e8e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008e92:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10c      	bne.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008e9a:	f7fc f983 	bl	80051a4 <HAL_RCC_GetPCLK3Freq>
 8008e9e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008ea0:	f001 b8af 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ea4:	44020c00 	.word	0x44020c00
 8008ea8:	03d09000 	.word	0x03d09000
 8008eac:	003d0900 	.word	0x003d0900
 8008eb0:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008eba:	d108      	bne.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ebc:	f107 0308 	add.w	r3, r7, #8
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fe fbe7 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008eca:	f001 b89a 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008ece:	4b9f      	ldr	r3, [pc, #636]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0302 	and.w	r3, r3, #2
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d10d      	bne.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8008eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008edc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ee0:	d109      	bne.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ee2:	4b9a      	ldr	r3, [pc, #616]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	08db      	lsrs	r3, r3, #3
 8008ee8:	f003 0303 	and.w	r3, r3, #3
 8008eec:	4a98      	ldr	r2, [pc, #608]	@ (8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008eee:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ef4:	e011      	b.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008ef6:	4b95      	ldr	r3, [pc, #596]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f02:	d106      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8008f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008f0a:	d102      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008f0c:	4b91      	ldr	r3, [pc, #580]	@ (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f10:	e003      	b.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f16:	f001 b874 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f1a:	f001 b872 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008f1e:	4b8b      	ldr	r3, [pc, #556]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008f24:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008f28:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d104      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008f30:	f7fc f938 	bl	80051a4 <HAL_RCC_GetPCLK3Freq>
 8008f34:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008f36:	f001 b864 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f40:	d108      	bne.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f42:	f107 0308 	add.w	r3, r7, #8
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fba4 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f50:	f001 b857 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008f54:	4b7d      	ldr	r3, [pc, #500]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d10d      	bne.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8008f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f66:	d109      	bne.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f68:	4b78      	ldr	r3, [pc, #480]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	08db      	lsrs	r3, r3, #3
 8008f6e:	f003 0303 	and.w	r3, r3, #3
 8008f72:	4a77      	ldr	r2, [pc, #476]	@ (8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008f74:	fa22 f303 	lsr.w	r3, r2, r3
 8008f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7a:	e011      	b.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008f7c:	4b73      	ldr	r3, [pc, #460]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f88:	d106      	bne.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008f90:	d102      	bne.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8008f92:	4b70      	ldr	r3, [pc, #448]	@ (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f96:	e003      	b.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f9c:	f001 b831 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fa0:	f001 b82f 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008fa4:	4b69      	ldr	r3, [pc, #420]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008fa6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008faa:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008fae:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d104      	bne.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008fb6:	f7fc f8c9 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 8008fba:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008fbc:	f001 b821 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008fc6:	d108      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fc8:	f107 0308 	add.w	r3, r7, #8
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fe fb61 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fd6:	f001 b814 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008fda:	4b5c      	ldr	r3, [pc, #368]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d10e      	bne.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fec:	d10a      	bne.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fee:	4b57      	ldr	r3, [pc, #348]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	08db      	lsrs	r3, r3, #3
 8008ff4:	f003 0303 	and.w	r3, r3, #3
 8008ff8:	4a55      	ldr	r2, [pc, #340]	@ (8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8008ffe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009000:	f000 bfff 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009004:	2300      	movs	r3, #0
 8009006:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009008:	f000 bffb 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800900c:	4b4f      	ldr	r3, [pc, #316]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800900e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009012:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009016:	633b      	str	r3, [r7, #48]	@ 0x30
 8009018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800901e:	d056      	beq.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8009020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009022:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009026:	f200 808b 	bhi.w	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800902a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009030:	d03e      	beq.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8009032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009038:	f200 8082 	bhi.w	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800903c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009042:	d027      	beq.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8009044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009046:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800904a:	d879      	bhi.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800904c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009052:	d017      	beq.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8009054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009056:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800905a:	d871      	bhi.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800905c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905e:	2b00      	cmp	r3, #0
 8009060:	d004      	beq.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8009062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009064:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009068:	d004      	beq.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800906a:	e069      	b.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800906c:	f7fc f89a 	bl	80051a4 <HAL_RCC_GetPCLK3Freq>
 8009070:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009072:	e068      	b.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009074:	f107 0314 	add.w	r3, r7, #20
 8009078:	4618      	mov	r0, r3
 800907a:	f7fe f99f 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009082:	e060      	b.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009084:	f107 0308 	add.w	r3, r7, #8
 8009088:	4618      	mov	r0, r3
 800908a:	f7fe fb03 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009092:	e058      	b.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009094:	4b2d      	ldr	r3, [pc, #180]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009096:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800909a:	f003 0302 	and.w	r3, r3, #2
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d103      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80090a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090a6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80090a8:	e04d      	b.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090ae:	e04a      	b.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80090b0:	4b26      	ldr	r3, [pc, #152]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80090b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090be:	d103      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80090c0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80090c4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80090c6:	e03e      	b.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090cc:	e03b      	b.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090ce:	4b1f      	ldr	r3, [pc, #124]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80090d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090d4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80090d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090da:	4b1c      	ldr	r3, [pc, #112]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d10c      	bne.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80090e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d109      	bne.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090ec:	4b17      	ldr	r3, [pc, #92]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	08db      	lsrs	r3, r3, #3
 80090f2:	f003 0303 	and.w	r3, r3, #3
 80090f6:	4a16      	ldr	r2, [pc, #88]	@ (8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80090f8:	fa22 f303 	lsr.w	r3, r2, r3
 80090fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80090fe:	e01e      	b.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009100:	4b12      	ldr	r3, [pc, #72]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800910c:	d106      	bne.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800910e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009114:	d102      	bne.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009116:	4b0f      	ldr	r3, [pc, #60]	@ (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009118:	637b      	str	r3, [r7, #52]	@ 0x34
 800911a:	e010      	b.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800911c:	4b0b      	ldr	r3, [pc, #44]	@ (800914c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009124:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009128:	d106      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800912a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800912c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009130:	d102      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009132:	4b09      	ldr	r3, [pc, #36]	@ (8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8009134:	637b      	str	r3, [r7, #52]	@ 0x34
 8009136:	e002      	b.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800913c:	e003      	b.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800913e:	e002      	b.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009144:	bf00      	nop
          }
        }
        break;
 8009146:	f000 bf5c 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800914a:	bf00      	nop
 800914c:	44020c00 	.word	0x44020c00
 8009150:	03d09000 	.word	0x03d09000
 8009154:	003d0900 	.word	0x003d0900
 8009158:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800915c:	4b9e      	ldr	r3, [pc, #632]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800915e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009162:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009166:	633b      	str	r3, [r7, #48]	@ 0x30
 8009168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800916e:	d056      	beq.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8009170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009172:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009176:	f200 808b 	bhi.w	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800917a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009180:	d03e      	beq.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8009182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009184:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009188:	f200 8082 	bhi.w	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800918c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009192:	d027      	beq.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8009194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009196:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800919a:	d879      	bhi.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800919c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091a2:	d017      	beq.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80091a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091aa:	d871      	bhi.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80091ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d004      	beq.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80091b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091b8:	d004      	beq.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80091ba:	e069      	b.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80091bc:	f7fb ffc6 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 80091c0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80091c2:	e068      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091c4:	f107 0314 	add.w	r3, r7, #20
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fe f8f7 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091d2:	e060      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091d4:	f107 0308 	add.w	r3, r7, #8
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fe fa5b 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091e2:	e058      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80091e4:	4b7c      	ldr	r3, [pc, #496]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80091e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091ea:	f003 0302 	and.w	r3, r3, #2
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d103      	bne.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 80091f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091f6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80091f8:	e04d      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091fe:	e04a      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009200:	4b75      	ldr	r3, [pc, #468]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009206:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800920a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800920e:	d103      	bne.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8009210:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009214:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009216:	e03e      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009218:	2300      	movs	r3, #0
 800921a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800921c:	e03b      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800921e:	4b6e      	ldr	r3, [pc, #440]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009224:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009228:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800922a:	4b6b      	ldr	r3, [pc, #428]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 0302 	and.w	r3, r3, #2
 8009232:	2b02      	cmp	r3, #2
 8009234:	d10c      	bne.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8009236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009238:	2b00      	cmp	r3, #0
 800923a:	d109      	bne.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800923c:	4b66      	ldr	r3, [pc, #408]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	08db      	lsrs	r3, r3, #3
 8009242:	f003 0303 	and.w	r3, r3, #3
 8009246:	4a65      	ldr	r2, [pc, #404]	@ (80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009248:	fa22 f303 	lsr.w	r3, r2, r3
 800924c:	637b      	str	r3, [r7, #52]	@ 0x34
 800924e:	e01e      	b.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009250:	4b61      	ldr	r3, [pc, #388]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800925c:	d106      	bne.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800925e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009264:	d102      	bne.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009266:	4b5e      	ldr	r3, [pc, #376]	@ (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009268:	637b      	str	r3, [r7, #52]	@ 0x34
 800926a:	e010      	b.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800926c:	4b5a      	ldr	r3, [pc, #360]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009274:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009278:	d106      	bne.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800927a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800927c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009280:	d102      	bne.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009282:	4b58      	ldr	r3, [pc, #352]	@ (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009284:	637b      	str	r3, [r7, #52]	@ 0x34
 8009286:	e002      	b.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009288:	2300      	movs	r3, #0
 800928a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800928c:	e003      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800928e:	e002      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8009290:	2300      	movs	r3, #0
 8009292:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009294:	bf00      	nop
          }
        }
        break;
 8009296:	f000 beb4 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800929a:	4b4f      	ldr	r3, [pc, #316]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800929c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80092a0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80092a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80092a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80092ac:	d056      	beq.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80092ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80092b4:	f200 808b 	bhi.w	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80092b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80092be:	d03e      	beq.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80092c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80092c6:	f200 8082 	bhi.w	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80092ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80092d0:	d027      	beq.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 80092d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80092d8:	d879      	bhi.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80092da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092e0:	d017      	beq.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80092e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092e8:	d871      	bhi.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80092ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d004      	beq.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 80092f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092f6:	d004      	beq.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 80092f8:	e069      	b.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80092fa:	f7fb ff53 	bl	80051a4 <HAL_RCC_GetPCLK3Freq>
 80092fe:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009300:	e068      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009302:	f107 0314 	add.w	r3, r7, #20
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe f858 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009310:	e060      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009312:	f107 0308 	add.w	r3, r7, #8
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe f9bc 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009320:	e058      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009322:	4b2d      	ldr	r3, [pc, #180]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009328:	f003 0302 	and.w	r3, r3, #2
 800932c:	2b02      	cmp	r3, #2
 800932e:	d103      	bne.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8009330:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009334:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009336:	e04d      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009338:	2300      	movs	r3, #0
 800933a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800933c:	e04a      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800933e:	4b26      	ldr	r3, [pc, #152]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009348:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800934c:	d103      	bne.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800934e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009352:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009354:	e03e      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009356:	2300      	movs	r3, #0
 8009358:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800935a:	e03b      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800935c:	4b1e      	ldr	r3, [pc, #120]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800935e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009362:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009366:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009368:	4b1b      	ldr	r3, [pc, #108]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 0302 	and.w	r3, r3, #2
 8009370:	2b02      	cmp	r3, #2
 8009372:	d10c      	bne.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8009374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009376:	2b00      	cmp	r3, #0
 8009378:	d109      	bne.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800937a:	4b17      	ldr	r3, [pc, #92]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	08db      	lsrs	r3, r3, #3
 8009380:	f003 0303 	and.w	r3, r3, #3
 8009384:	4a15      	ldr	r2, [pc, #84]	@ (80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009386:	fa22 f303 	lsr.w	r3, r2, r3
 800938a:	637b      	str	r3, [r7, #52]	@ 0x34
 800938c:	e01e      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800938e:	4b12      	ldr	r3, [pc, #72]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009396:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800939a:	d106      	bne.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800939c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800939e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093a2:	d102      	bne.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80093a4:	4b0e      	ldr	r3, [pc, #56]	@ (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80093a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a8:	e010      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093aa:	4b0b      	ldr	r3, [pc, #44]	@ (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093b6:	d106      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80093b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093be:	d102      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80093c0:	4b08      	ldr	r3, [pc, #32]	@ (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80093c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c4:	e002      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80093c6:	2300      	movs	r3, #0
 80093c8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80093ca:	e003      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 80093cc:	e002      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093d2:	bf00      	nop
          }
        }
        break;
 80093d4:	f000 be15 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80093d8:	44020c00 	.word	0x44020c00
 80093dc:	03d09000 	.word	0x03d09000
 80093e0:	003d0900 	.word	0x003d0900
 80093e4:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80093e8:	4b9e      	ldr	r3, [pc, #632]	@ (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80093ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80093ee:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 80093f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80093f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80093fa:	d056      	beq.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 80093fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fe:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009402:	f200 808b 	bhi.w	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009408:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800940c:	d03e      	beq.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800940e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009410:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009414:	f200 8082 	bhi.w	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800941e:	d027      	beq.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8009420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009422:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009426:	d879      	bhi.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800942e:	d017      	beq.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8009430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009432:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009436:	d871      	bhi.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943a:	2b00      	cmp	r3, #0
 800943c:	d004      	beq.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800943e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009440:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009444:	d004      	beq.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8009446:	e069      	b.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009448:	f7fb feac 	bl	80051a4 <HAL_RCC_GetPCLK3Freq>
 800944c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800944e:	e068      	b.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009450:	f107 0314 	add.w	r3, r7, #20
 8009454:	4618      	mov	r0, r3
 8009456:	f7fd ffb1 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800945e:	e060      	b.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009460:	f107 0308 	add.w	r3, r7, #8
 8009464:	4618      	mov	r0, r3
 8009466:	f7fe f915 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800946e:	e058      	b.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009470:	4b7c      	ldr	r3, [pc, #496]	@ (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009476:	f003 0302 	and.w	r3, r3, #2
 800947a:	2b02      	cmp	r3, #2
 800947c:	d103      	bne.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800947e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009482:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009484:	e04d      	b.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800948a:	e04a      	b.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800948c:	4b75      	ldr	r3, [pc, #468]	@ (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800948e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009492:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009496:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800949a:	d103      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800949c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80094a0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80094a2:	e03e      	b.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094a8:	e03b      	b.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094aa:	4b6e      	ldr	r3, [pc, #440]	@ (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80094ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80094b0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80094b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094b6:	4b6b      	ldr	r3, [pc, #428]	@ (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 0302 	and.w	r3, r3, #2
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d10c      	bne.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 80094c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d109      	bne.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094c8:	4b66      	ldr	r3, [pc, #408]	@ (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	08db      	lsrs	r3, r3, #3
 80094ce:	f003 0303 	and.w	r3, r3, #3
 80094d2:	4a65      	ldr	r2, [pc, #404]	@ (8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80094d4:	fa22 f303 	lsr.w	r3, r2, r3
 80094d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094da:	e01e      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094dc:	4b61      	ldr	r3, [pc, #388]	@ (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094e8:	d106      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 80094ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094f0:	d102      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80094f2:	4b5e      	ldr	r3, [pc, #376]	@ (800966c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80094f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094f6:	e010      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094f8:	4b5a      	ldr	r3, [pc, #360]	@ (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009500:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009504:	d106      	bne.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8009506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009508:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800950c:	d102      	bne.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800950e:	4b58      	ldr	r3, [pc, #352]	@ (8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009510:	637b      	str	r3, [r7, #52]	@ 0x34
 8009512:	e002      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009514:	2300      	movs	r3, #0
 8009516:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009518:	e003      	b.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800951a:	e002      	b.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800951c:	2300      	movs	r3, #0
 800951e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009520:	bf00      	nop
          }
        }
        break;
 8009522:	f000 bd6e 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009526:	4b4f      	ldr	r3, [pc, #316]	@ (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009528:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800952c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009530:	633b      	str	r3, [r7, #48]	@ 0x30
 8009532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009534:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009538:	d056      	beq.n	80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800953a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009540:	f200 808b 	bhi.w	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009546:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800954a:	d03e      	beq.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800954c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009552:	f200 8082 	bhi.w	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009558:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800955c:	d027      	beq.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800955e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009560:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009564:	d879      	bhi.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009568:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800956c:	d017      	beq.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800956e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009570:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009574:	d871      	bhi.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009578:	2b00      	cmp	r3, #0
 800957a:	d004      	beq.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800957c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009582:	d004      	beq.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8009584:	e069      	b.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009586:	f7fb fe0d 	bl	80051a4 <HAL_RCC_GetPCLK3Freq>
 800958a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800958c:	e068      	b.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800958e:	f107 0314 	add.w	r3, r7, #20
 8009592:	4618      	mov	r0, r3
 8009594:	f7fd ff12 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800959c:	e060      	b.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800959e:	f107 0308 	add.w	r3, r7, #8
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe f876 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095ac:	e058      	b.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80095ae:	4b2d      	ldr	r3, [pc, #180]	@ (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80095b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095b4:	f003 0302 	and.w	r3, r3, #2
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d103      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 80095bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095c0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80095c2:	e04d      	b.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095c8:	e04a      	b.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80095ca:	4b26      	ldr	r3, [pc, #152]	@ (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80095cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095d8:	d103      	bne.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 80095da:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80095de:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80095e0:	e03e      	b.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80095e2:	2300      	movs	r3, #0
 80095e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095e6:	e03b      	b.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095e8:	4b1e      	ldr	r3, [pc, #120]	@ (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80095ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80095ee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80095f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095f4:	4b1b      	ldr	r3, [pc, #108]	@ (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 0302 	and.w	r3, r3, #2
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d10c      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8009600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009602:	2b00      	cmp	r3, #0
 8009604:	d109      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009606:	4b17      	ldr	r3, [pc, #92]	@ (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	08db      	lsrs	r3, r3, #3
 800960c:	f003 0303 	and.w	r3, r3, #3
 8009610:	4a15      	ldr	r2, [pc, #84]	@ (8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009612:	fa22 f303 	lsr.w	r3, r2, r3
 8009616:	637b      	str	r3, [r7, #52]	@ 0x34
 8009618:	e01e      	b.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800961a:	4b12      	ldr	r3, [pc, #72]	@ (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009622:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009626:	d106      	bne.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8009628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800962e:	d102      	bne.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009630:	4b0e      	ldr	r3, [pc, #56]	@ (800966c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009632:	637b      	str	r3, [r7, #52]	@ 0x34
 8009634:	e010      	b.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009636:	4b0b      	ldr	r3, [pc, #44]	@ (8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800963e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009642:	d106      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8009644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009646:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800964a:	d102      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800964c:	4b08      	ldr	r3, [pc, #32]	@ (8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800964e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009650:	e002      	b.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009656:	e003      	b.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8009658:	e002      	b.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800965a:	2300      	movs	r3, #0
 800965c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800965e:	bf00      	nop
          }
        }
        break;
 8009660:	f000 bccf 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009664:	44020c00 	.word	0x44020c00
 8009668:	03d09000 	.word	0x03d09000
 800966c:	003d0900 	.word	0x003d0900
 8009670:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8009674:	4b9e      	ldr	r3, [pc, #632]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009676:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800967a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800967e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009682:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009686:	d056      	beq.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8009688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800968e:	f200 808b 	bhi.w	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009698:	d03e      	beq.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800969a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096a0:	f200 8082 	bhi.w	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80096a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096aa:	d027      	beq.n	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80096ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096b2:	d879      	bhi.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80096b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096ba:	d017      	beq.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 80096bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096c2:	d871      	bhi.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80096c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d004      	beq.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 80096ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096d0:	d004      	beq.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 80096d2:	e069      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80096d4:	f7fb fd66 	bl	80051a4 <HAL_RCC_GetPCLK3Freq>
 80096d8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80096da:	e068      	b.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096dc:	f107 0314 	add.w	r3, r7, #20
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fd fe6b 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096ea:	e060      	b.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096ec:	f107 0308 	add.w	r3, r7, #8
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7fd ffcf 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096fa:	e058      	b.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80096fc:	4b7c      	ldr	r3, [pc, #496]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80096fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009702:	f003 0302 	and.w	r3, r3, #2
 8009706:	2b02      	cmp	r3, #2
 8009708:	d103      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800970a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800970e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009710:	e04d      	b.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009716:	e04a      	b.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009718:	4b75      	ldr	r3, [pc, #468]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800971a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800971e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009722:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009726:	d103      	bne.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8009728:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800972c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800972e:	e03e      	b.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009734:	e03b      	b.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009736:	4b6e      	ldr	r3, [pc, #440]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009738:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800973c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009740:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009742:	4b6b      	ldr	r3, [pc, #428]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0302 	and.w	r3, r3, #2
 800974a:	2b02      	cmp	r3, #2
 800974c:	d10c      	bne.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800974e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009750:	2b00      	cmp	r3, #0
 8009752:	d109      	bne.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009754:	4b66      	ldr	r3, [pc, #408]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	08db      	lsrs	r3, r3, #3
 800975a:	f003 0303 	and.w	r3, r3, #3
 800975e:	4a65      	ldr	r2, [pc, #404]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009760:	fa22 f303 	lsr.w	r3, r2, r3
 8009764:	637b      	str	r3, [r7, #52]	@ 0x34
 8009766:	e01e      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009768:	4b61      	ldr	r3, [pc, #388]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009774:	d106      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8009776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800977c:	d102      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800977e:	4b5e      	ldr	r3, [pc, #376]	@ (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009780:	637b      	str	r3, [r7, #52]	@ 0x34
 8009782:	e010      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009784:	4b5a      	ldr	r3, [pc, #360]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800978c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009790:	d106      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8009792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009798:	d102      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800979a:	4b58      	ldr	r3, [pc, #352]	@ (80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800979c:	637b      	str	r3, [r7, #52]	@ 0x34
 800979e:	e002      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80097a0:	2300      	movs	r3, #0
 80097a2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80097a4:	e003      	b.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80097a6:	e002      	b.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80097a8:	2300      	movs	r3, #0
 80097aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097ac:	bf00      	nop
          }
        }
        break;
 80097ae:	f000 bc28 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80097b2:	4b4f      	ldr	r3, [pc, #316]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80097b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097bc:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80097be:	4b4c      	ldr	r3, [pc, #304]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097ca:	d106      	bne.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 80097cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d103      	bne.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 80097d2:	4b4a      	ldr	r3, [pc, #296]	@ (80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80097d4:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80097d6:	f000 bc14 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80097da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097e0:	d108      	bne.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097e2:	f107 0320 	add.w	r3, r7, #32
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fd fc7c 	bl	80070e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097f0:	f000 bc07 	b.w	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80097f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097fa:	d107      	bne.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097fc:	f107 0314 	add.w	r3, r7, #20
 8009800:	4618      	mov	r0, r3
 8009802:	f7fd fddb 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800980a:	e3fa      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800980c:	2300      	movs	r3, #0
 800980e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009810:	e3f7      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009812:	4b37      	ldr	r3, [pc, #220]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009818:	f003 0307 	and.w	r3, r3, #7
 800981c:	633b      	str	r3, [r7, #48]	@ 0x30
 800981e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009820:	2b04      	cmp	r3, #4
 8009822:	d861      	bhi.n	80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009824:	a201      	add	r2, pc, #4	@ (adr r2, 800982c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8009826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982a:	bf00      	nop
 800982c:	08009841 	.word	0x08009841
 8009830:	08009851 	.word	0x08009851
 8009834:	08009861 	.word	0x08009861
 8009838:	08009871 	.word	0x08009871
 800983c:	08009877 	.word	0x08009877
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009840:	f107 0320 	add.w	r3, r7, #32
 8009844:	4618      	mov	r0, r3
 8009846:	f7fd fc4d 	bl	80070e4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800984a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800984e:	e04e      	b.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009850:	f107 0314 	add.w	r3, r7, #20
 8009854:	4618      	mov	r0, r3
 8009856:	f7fd fdb1 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800985e:	e046      	b.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009860:	f107 0308 	add.w	r3, r7, #8
 8009864:	4618      	mov	r0, r3
 8009866:	f7fd ff15 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800986e:	e03e      	b.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009870:	4b23      	ldr	r3, [pc, #140]	@ (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8009872:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009874:	e03b      	b.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009876:	4b1e      	ldr	r3, [pc, #120]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009878:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800987c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009880:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009882:	4b1b      	ldr	r3, [pc, #108]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f003 0302 	and.w	r3, r3, #2
 800988a:	2b02      	cmp	r3, #2
 800988c:	d10c      	bne.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800988e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009890:	2b00      	cmp	r3, #0
 8009892:	d109      	bne.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009894:	4b16      	ldr	r3, [pc, #88]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	08db      	lsrs	r3, r3, #3
 800989a:	f003 0303 	and.w	r3, r3, #3
 800989e:	4a15      	ldr	r2, [pc, #84]	@ (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80098a0:	fa22 f303 	lsr.w	r3, r2, r3
 80098a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80098a6:	e01e      	b.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098a8:	4b11      	ldr	r3, [pc, #68]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098b4:	d106      	bne.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80098b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098bc:	d102      	bne.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80098be:	4b0e      	ldr	r3, [pc, #56]	@ (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80098c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80098c2:	e010      	b.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098c4:	4b0a      	ldr	r3, [pc, #40]	@ (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098d0:	d106      	bne.n	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80098d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098d8:	d102      	bne.n	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80098da:	4b08      	ldr	r3, [pc, #32]	@ (80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80098dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80098de:	e002      	b.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80098e4:	e003      	b.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80098e6:	e002      	b.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098ec:	bf00      	nop
          }
        }
        break;
 80098ee:	e388      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80098f0:	44020c00 	.word	0x44020c00
 80098f4:	03d09000 	.word	0x03d09000
 80098f8:	003d0900 	.word	0x003d0900
 80098fc:	007a1200 	.word	0x007a1200
 8009900:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009904:	4ba9      	ldr	r3, [pc, #676]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800990a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800990e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009912:	2b20      	cmp	r3, #32
 8009914:	f200 809a 	bhi.w	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009918:	a201      	add	r2, pc, #4	@ (adr r2, 8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800991a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991e:	bf00      	nop
 8009920:	080099a5 	.word	0x080099a5
 8009924:	08009a4d 	.word	0x08009a4d
 8009928:	08009a4d 	.word	0x08009a4d
 800992c:	08009a4d 	.word	0x08009a4d
 8009930:	08009a4d 	.word	0x08009a4d
 8009934:	08009a4d 	.word	0x08009a4d
 8009938:	08009a4d 	.word	0x08009a4d
 800993c:	08009a4d 	.word	0x08009a4d
 8009940:	080099b5 	.word	0x080099b5
 8009944:	08009a4d 	.word	0x08009a4d
 8009948:	08009a4d 	.word	0x08009a4d
 800994c:	08009a4d 	.word	0x08009a4d
 8009950:	08009a4d 	.word	0x08009a4d
 8009954:	08009a4d 	.word	0x08009a4d
 8009958:	08009a4d 	.word	0x08009a4d
 800995c:	08009a4d 	.word	0x08009a4d
 8009960:	080099c5 	.word	0x080099c5
 8009964:	08009a4d 	.word	0x08009a4d
 8009968:	08009a4d 	.word	0x08009a4d
 800996c:	08009a4d 	.word	0x08009a4d
 8009970:	08009a4d 	.word	0x08009a4d
 8009974:	08009a4d 	.word	0x08009a4d
 8009978:	08009a4d 	.word	0x08009a4d
 800997c:	08009a4d 	.word	0x08009a4d
 8009980:	080099d5 	.word	0x080099d5
 8009984:	08009a4d 	.word	0x08009a4d
 8009988:	08009a4d 	.word	0x08009a4d
 800998c:	08009a4d 	.word	0x08009a4d
 8009990:	08009a4d 	.word	0x08009a4d
 8009994:	08009a4d 	.word	0x08009a4d
 8009998:	08009a4d 	.word	0x08009a4d
 800999c:	08009a4d 	.word	0x08009a4d
 80099a0:	080099db 	.word	0x080099db
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099a4:	f107 0320 	add.w	r3, r7, #32
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fd fb9b 	bl	80070e4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80099ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099b2:	e04e      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099b4:	f107 0314 	add.w	r3, r7, #20
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fd fcff 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099c2:	e046      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099c4:	f107 0308 	add.w	r3, r7, #8
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fd fe63 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099d2:	e03e      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80099d4:	4b76      	ldr	r3, [pc, #472]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80099d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099d8:	e03b      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099da:	4b74      	ldr	r3, [pc, #464]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80099dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80099e0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80099e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099e6:	4b71      	ldr	r3, [pc, #452]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0302 	and.w	r3, r3, #2
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d10c      	bne.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 80099f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d109      	bne.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80099f8:	4b6c      	ldr	r3, [pc, #432]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	08db      	lsrs	r3, r3, #3
 80099fe:	f003 0303 	and.w	r3, r3, #3
 8009a02:	4a6c      	ldr	r2, [pc, #432]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009a04:	fa22 f303 	lsr.w	r3, r2, r3
 8009a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a0a:	e01e      	b.n	8009a4a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a0c:	4b67      	ldr	r3, [pc, #412]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a18:	d106      	bne.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8009a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a20:	d102      	bne.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009a22:	4b65      	ldr	r3, [pc, #404]	@ (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a26:	e010      	b.n	8009a4a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a28:	4b60      	ldr	r3, [pc, #384]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a34:	d106      	bne.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8009a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a3c:	d102      	bne.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a42:	e002      	b.n	8009a4a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009a44:	2300      	movs	r3, #0
 8009a46:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009a48:	e003      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8009a4a:	e002      	b.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a50:	bf00      	nop
          }
        }
        break;
 8009a52:	e2d6      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009a54:	4b55      	ldr	r3, [pc, #340]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a5a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009a5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a66:	d031      	beq.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8009a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a6e:	d866      	bhi.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a72:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a74:	d027      	beq.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8009a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a78:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a7a:	d860      	bhi.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7e:	2b80      	cmp	r3, #128	@ 0x80
 8009a80:	d019      	beq.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8009a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a84:	2b80      	cmp	r3, #128	@ 0x80
 8009a86:	d85a      	bhi.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d003      	beq.n	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a90:	2b40      	cmp	r3, #64	@ 0x40
 8009a92:	d008      	beq.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8009a94:	e053      	b.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a96:	f107 0320 	add.w	r3, r7, #32
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fd fb22 	bl	80070e4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009aa4:	e04e      	b.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aa6:	f107 0314 	add.w	r3, r7, #20
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fd fc86 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ab4:	e046      	b.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ab6:	f107 0308 	add.w	r3, r7, #8
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fd fdea 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ac4:	e03e      	b.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009ac8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009aca:	e03b      	b.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009acc:	4b37      	ldr	r3, [pc, #220]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009ace:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ad2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ad8:	4b34      	ldr	r3, [pc, #208]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 0302 	and.w	r3, r3, #2
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d10c      	bne.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8009ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d109      	bne.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009aea:	4b30      	ldr	r3, [pc, #192]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	08db      	lsrs	r3, r3, #3
 8009af0:	f003 0303 	and.w	r3, r3, #3
 8009af4:	4a2f      	ldr	r2, [pc, #188]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009af6:	fa22 f303 	lsr.w	r3, r2, r3
 8009afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009afc:	e01e      	b.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009afe:	4b2b      	ldr	r3, [pc, #172]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b0a:	d106      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8009b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b12:	d102      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009b14:	4b28      	ldr	r3, [pc, #160]	@ (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b18:	e010      	b.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b1a:	4b24      	ldr	r3, [pc, #144]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b26:	d106      	bne.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8009b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b2e:	d102      	bne.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009b30:	4b22      	ldr	r3, [pc, #136]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b34:	e002      	b.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009b36:	2300      	movs	r3, #0
 8009b38:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009b3a:	e003      	b.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8009b3c:	e002      	b.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b42:	bf00      	nop
          }
        }
        break;
 8009b44:	e25d      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8009b46:	4b19      	ldr	r3, [pc, #100]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b4c:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009b50:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8009b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d103      	bne.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009b58:	f7fb fb0e 	bl	8005178 <HAL_RCC_GetPCLK2Freq>
 8009b5c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009b5e:	e250      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009b60:	4b12      	ldr	r3, [pc, #72]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b6c:	d10b      	bne.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b74:	d107      	bne.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b76:	f107 0314 	add.w	r3, r7, #20
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fd fc1e 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b84:	e04f      	b.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8009b86:	4b09      	ldr	r3, [pc, #36]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b92:	d115      	bne.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8009b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b9a:	d111      	bne.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b9c:	f107 0308 	add.w	r3, r7, #8
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fd fd77 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009baa:	e03c      	b.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8009bac:	44020c00 	.word	0x44020c00
 8009bb0:	00bb8000 	.word	0x00bb8000
 8009bb4:	03d09000 	.word	0x03d09000
 8009bb8:	003d0900 	.word	0x003d0900
 8009bbc:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009bc0:	4b94      	ldr	r3, [pc, #592]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 0302 	and.w	r3, r3, #2
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d10d      	bne.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8009bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bce:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009bd2:	d109      	bne.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bd4:	4b8f      	ldr	r3, [pc, #572]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	08db      	lsrs	r3, r3, #3
 8009bda:	f003 0303 	and.w	r3, r3, #3
 8009bde:	4a8e      	ldr	r2, [pc, #568]	@ (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009be0:	fa22 f303 	lsr.w	r3, r2, r3
 8009be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009be6:	e01e      	b.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009be8:	4b8a      	ldr	r3, [pc, #552]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bf4:	d106      	bne.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bfc:	d102      	bne.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8009bfe:	4b87      	ldr	r3, [pc, #540]	@ (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c02:	e010      	b.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009c04:	4b83      	ldr	r3, [pc, #524]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c10:	d106      	bne.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c14:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009c18:	d102      	bne.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8009c1a:	4b81      	ldr	r3, [pc, #516]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c1e:	e002      	b.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009c20:	2300      	movs	r3, #0
 8009c22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c24:	e1ed      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c26:	e1ec      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009c28:	4b7a      	ldr	r3, [pc, #488]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009c2e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009c32:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d103      	bne.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009c3a:	f7fb fab3 	bl	80051a4 <HAL_RCC_GetPCLK3Freq>
 8009c3e:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009c40:	e1df      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8009c42:	4b74      	ldr	r3, [pc, #464]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c4e:	d10b      	bne.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8009c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c56:	d107      	bne.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c58:	f107 0314 	add.w	r3, r7, #20
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fd fbad 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c66:	e045      	b.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8009c68:	4b6a      	ldr	r3, [pc, #424]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c74:	d10b      	bne.n	8009c8e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8009c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c7c:	d107      	bne.n	8009c8e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c7e:	f107 0308 	add.w	r3, r7, #8
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fd fd06 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c8c:	e032      	b.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8009c8e:	4b61      	ldr	r3, [pc, #388]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 0302 	and.w	r3, r3, #2
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d10d      	bne.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ca0:	d109      	bne.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	08db      	lsrs	r3, r3, #3
 8009ca8:	f003 0303 	and.w	r3, r3, #3
 8009cac:	4a5a      	ldr	r2, [pc, #360]	@ (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009cae:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cb4:	e01e      	b.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8009cb6:	4b57      	ldr	r3, [pc, #348]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cc2:	d106      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009cca:	d102      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8009ccc:	4b53      	ldr	r3, [pc, #332]	@ (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cd0:	e010      	b.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8009cd2:	4b50      	ldr	r3, [pc, #320]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cde:	d106      	bne.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8009ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009ce6:	d102      	bne.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8009ce8:	4b4d      	ldr	r3, [pc, #308]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cec:	e002      	b.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cf2:	e186      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009cf4:	e185      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009cf6:	4b47      	ldr	r3, [pc, #284]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009cfc:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009d00:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d103      	bne.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009d08:	f7fb fa36 	bl	8005178 <HAL_RCC_GetPCLK2Freq>
 8009d0c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009d0e:	e178      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009d10:	4b40      	ldr	r3, [pc, #256]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d1c:	d10b      	bne.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d24:	d107      	bne.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d26:	f107 0314 	add.w	r3, r7, #20
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fd fb46 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d34:	e045      	b.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8009d36:	4b37      	ldr	r3, [pc, #220]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d42:	d10b      	bne.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8009d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d4a:	d107      	bne.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d4c:	f107 0308 	add.w	r3, r7, #8
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7fd fc9f 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d5a:	e032      	b.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8009d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0302 	and.w	r3, r3, #2
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d10d      	bne.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8009d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009d6e:	d109      	bne.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d70:	4b28      	ldr	r3, [pc, #160]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	08db      	lsrs	r3, r3, #3
 8009d76:	f003 0303 	and.w	r3, r3, #3
 8009d7a:	4a27      	ldr	r2, [pc, #156]	@ (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d82:	e01e      	b.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8009d84:	4b23      	ldr	r3, [pc, #140]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d90:	d106      	bne.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8009d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d98:	d102      	bne.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8009d9a:	4b20      	ldr	r3, [pc, #128]	@ (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d9e:	e010      	b.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8009da0:	4b1c      	ldr	r3, [pc, #112]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009da8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dac:	d106      	bne.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8009dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009db4:	d102      	bne.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8009db6:	4b1a      	ldr	r3, [pc, #104]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009db8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dba:	e002      	b.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009dc0:	e11f      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009dc2:	e11e      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009dc4:	4b13      	ldr	r3, [pc, #76]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009dc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009dca:	f003 0303 	and.w	r3, r3, #3
 8009dce:	633b      	str	r3, [r7, #48]	@ 0x30
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd2:	2b03      	cmp	r3, #3
 8009dd4:	d85f      	bhi.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8009dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8009dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ddc:	08009ded 	.word	0x08009ded
 8009de0:	08009df5 	.word	0x08009df5
 8009de4:	08009e05 	.word	0x08009e05
 8009de8:	08009e25 	.word	0x08009e25

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009dec:	f7fb f992 	bl	8005114 <HAL_RCC_GetHCLKFreq>
 8009df0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009df2:	e053      	b.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009df4:	f107 0320 	add.w	r3, r7, #32
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fd f973 	bl	80070e4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e02:	e04b      	b.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e04:	f107 0314 	add.w	r3, r7, #20
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fd fad7 	bl	80073bc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e12:	e043      	b.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009e14:	44020c00 	.word	0x44020c00
 8009e18:	03d09000 	.word	0x03d09000
 8009e1c:	003d0900 	.word	0x003d0900
 8009e20:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e24:	4b79      	ldr	r3, [pc, #484]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e2a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e30:	4b76      	ldr	r3, [pc, #472]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0302 	and.w	r3, r3, #2
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d10c      	bne.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8009e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d109      	bne.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e42:	4b72      	ldr	r3, [pc, #456]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	08db      	lsrs	r3, r3, #3
 8009e48:	f003 0303 	and.w	r3, r3, #3
 8009e4c:	4a70      	ldr	r2, [pc, #448]	@ (800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8009e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e54:	e01e      	b.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e56:	4b6d      	ldr	r3, [pc, #436]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e62:	d106      	bne.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8009e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e6a:	d102      	bne.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009e6c:	4b69      	ldr	r3, [pc, #420]	@ (800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8009e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e70:	e010      	b.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e72:	4b66      	ldr	r3, [pc, #408]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e7e:	d106      	bne.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8009e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e86:	d102      	bne.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009e88:	4b63      	ldr	r3, [pc, #396]	@ (800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8009e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e8c:	e002      	b.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009e92:	e003      	b.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009e94:	e002      	b.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8009e96:	2300      	movs	r3, #0
 8009e98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e9a:	bf00      	nop
          }
        }
        break;
 8009e9c:	e0b1      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ea4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009ea8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009eaa:	4b58      	ldr	r3, [pc, #352]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009eb0:	f003 0302 	and.w	r3, r3, #2
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d106      	bne.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8009eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d103      	bne.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8009ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ec4:	e01f      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009ec6:	4b51      	ldr	r3, [pc, #324]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ed0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ed4:	d106      	bne.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed8:	2b40      	cmp	r3, #64	@ 0x40
 8009eda:	d103      	bne.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8009edc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ee2:	e010      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009ee4:	4b49      	ldr	r3, [pc, #292]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ef0:	d106      	bne.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef4:	2b80      	cmp	r3, #128	@ 0x80
 8009ef6:	d103      	bne.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8009ef8:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009efe:	e002      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009f00:	2300      	movs	r3, #0
 8009f02:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009f04:	e07d      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f06:	e07c      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009f08:	4b40      	ldr	r3, [pc, #256]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009f0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f0e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f12:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009f14:	4b3d      	ldr	r3, [pc, #244]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f20:	d105      	bne.n	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8009f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d102      	bne.n	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8009f28:	4b3c      	ldr	r3, [pc, #240]	@ (800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f2c:	e031      	b.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009f2e:	4b37      	ldr	r3, [pc, #220]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f3a:	d10a      	bne.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8009f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3e:	2b10      	cmp	r3, #16
 8009f40:	d107      	bne.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f42:	f107 0320 	add.w	r3, r7, #32
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fd f8cc 	bl	80070e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f50:	e01f      	b.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009f52:	4b2e      	ldr	r3, [pc, #184]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f58:	f003 0302 	and.w	r3, r3, #2
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d106      	bne.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8009f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f62:	2b20      	cmp	r3, #32
 8009f64:	d103      	bne.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8009f66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f6c:	e011      	b.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009f6e:	4b27      	ldr	r3, [pc, #156]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f7c:	d106      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f80:	2b30      	cmp	r3, #48	@ 0x30
 8009f82:	d103      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8009f84:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f8a:	e002      	b.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009f90:	e037      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f92:	e036      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009f94:	4b1d      	ldr	r3, [pc, #116]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009f96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009f9a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f9e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa2:	2b10      	cmp	r3, #16
 8009fa4:	d107      	bne.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fa6:	f107 0320 	add.w	r3, r7, #32
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fd f89a 	bl	80070e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009fb4:	e025      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009fb6:	4b15      	ldr	r3, [pc, #84]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fc2:	d10a      	bne.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc6:	2b20      	cmp	r3, #32
 8009fc8:	d107      	bne.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fca:	f107 0308 	add.w	r3, r7, #8
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fd fb60 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fd8:	e00f      	b.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009fda:	4b0c      	ldr	r3, [pc, #48]	@ (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fe6:	d105      	bne.n	8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fea:	2b30      	cmp	r3, #48	@ 0x30
 8009fec:	d102      	bne.n	8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8009fee:	4b0b      	ldr	r3, [pc, #44]	@ (800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ff2:	e002      	b.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009ff8:	e003      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009ffa:	e002      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a000:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800a002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a004:	4618      	mov	r0, r3
 800a006:	373c      	adds	r7, #60	@ 0x3c
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd90      	pop	{r4, r7, pc}
 800a00c:	44020c00 	.word	0x44020c00
 800a010:	03d09000 	.word	0x03d09000
 800a014:	003d0900 	.word	0x003d0900
 800a018:	007a1200 	.word	0x007a1200
 800a01c:	02dc6c00 	.word	0x02dc6c00

0800a020 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800a028:	4b48      	ldr	r3, [pc, #288]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a47      	ldr	r2, [pc, #284]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a02e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a032:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a034:	f7f7 ff18 	bl	8001e68 <HAL_GetTick>
 800a038:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a03a:	e008      	b.n	800a04e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a03c:	f7f7 ff14 	bl	8001e68 <HAL_GetTick>
 800a040:	4602      	mov	r2, r0
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	2b02      	cmp	r3, #2
 800a048:	d901      	bls.n	800a04e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e07a      	b.n	800a144 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a04e:	4b3f      	ldr	r3, [pc, #252]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1f0      	bne.n	800a03c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a05a:	4b3c      	ldr	r3, [pc, #240]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a05c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a05e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a062:	f023 0303 	bic.w	r3, r3, #3
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	6811      	ldr	r1, [r2, #0]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	6852      	ldr	r2, [r2, #4]
 800a06e:	0212      	lsls	r2, r2, #8
 800a070:	430a      	orrs	r2, r1
 800a072:	4936      	ldr	r1, [pc, #216]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a074:	4313      	orrs	r3, r2
 800a076:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	3b01      	subs	r3, #1
 800a07e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	3b01      	subs	r3, #1
 800a088:	025b      	lsls	r3, r3, #9
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	431a      	orrs	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	3b01      	subs	r3, #1
 800a094:	041b      	lsls	r3, r3, #16
 800a096:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a09a:	431a      	orrs	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	061b      	lsls	r3, r3, #24
 800a0a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a0a8:	4928      	ldr	r1, [pc, #160]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a0ae:	4b27      	ldr	r3, [pc, #156]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0b2:	f023 020c 	bic.w	r2, r3, #12
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	4924      	ldr	r1, [pc, #144]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a0c0:	4b22      	ldr	r3, [pc, #136]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c4:	f023 0220 	bic.w	r2, r3, #32
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	69db      	ldr	r3, [r3, #28]
 800a0cc:	491f      	ldr	r1, [pc, #124]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a0d2:	4b1e      	ldr	r3, [pc, #120]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a0d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0da:	491c      	ldr	r1, [pc, #112]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a0e0:	4b1a      	ldr	r3, [pc, #104]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e4:	4a19      	ldr	r2, [pc, #100]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a0e6:	f023 0310 	bic.w	r3, r3, #16
 800a0ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a0ec:	4b17      	ldr	r3, [pc, #92]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a0ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0f4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	6a12      	ldr	r2, [r2, #32]
 800a0fc:	00d2      	lsls	r2, r2, #3
 800a0fe:	4913      	ldr	r1, [pc, #76]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a100:	4313      	orrs	r3, r2
 800a102:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a104:	4b11      	ldr	r3, [pc, #68]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a108:	4a10      	ldr	r2, [pc, #64]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a10a:	f043 0310 	orr.w	r3, r3, #16
 800a10e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a110:	4b0e      	ldr	r3, [pc, #56]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a0d      	ldr	r2, [pc, #52]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a116:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a11a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a11c:	f7f7 fea4 	bl	8001e68 <HAL_GetTick>
 800a120:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a122:	e008      	b.n	800a136 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a124:	f7f7 fea0 	bl	8001e68 <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d901      	bls.n	800a136 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e006      	b.n	800a144 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a136:	4b05      	ldr	r3, [pc, #20]	@ (800a14c <RCCEx_PLL2_Config+0x12c>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0f0      	beq.n	800a124 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a142:	2300      	movs	r3, #0

}
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	44020c00 	.word	0x44020c00

0800a150 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a158:	4b48      	ldr	r3, [pc, #288]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a47      	ldr	r2, [pc, #284]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a15e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a162:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a164:	f7f7 fe80 	bl	8001e68 <HAL_GetTick>
 800a168:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a16a:	e008      	b.n	800a17e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a16c:	f7f7 fe7c 	bl	8001e68 <HAL_GetTick>
 800a170:	4602      	mov	r2, r0
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	2b02      	cmp	r3, #2
 800a178:	d901      	bls.n	800a17e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a17a:	2303      	movs	r3, #3
 800a17c:	e07a      	b.n	800a274 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a17e:	4b3f      	ldr	r3, [pc, #252]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1f0      	bne.n	800a16c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a18a:	4b3c      	ldr	r3, [pc, #240]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a18c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a18e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a192:	f023 0303 	bic.w	r3, r3, #3
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	6811      	ldr	r1, [r2, #0]
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	6852      	ldr	r2, [r2, #4]
 800a19e:	0212      	lsls	r2, r2, #8
 800a1a0:	430a      	orrs	r2, r1
 800a1a2:	4936      	ldr	r1, [pc, #216]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	630b      	str	r3, [r1, #48]	@ 0x30
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	025b      	lsls	r3, r3, #9
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	431a      	orrs	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	041b      	lsls	r3, r3, #16
 800a1c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a1ca:	431a      	orrs	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	695b      	ldr	r3, [r3, #20]
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	061b      	lsls	r3, r3, #24
 800a1d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a1d8:	4928      	ldr	r1, [pc, #160]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a1de:	4b27      	ldr	r3, [pc, #156]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a1e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1e2:	f023 020c 	bic.w	r2, r3, #12
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	4924      	ldr	r1, [pc, #144]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a1f0:	4b22      	ldr	r3, [pc, #136]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a1f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1f4:	f023 0220 	bic.w	r2, r3, #32
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	69db      	ldr	r3, [r3, #28]
 800a1fc:	491f      	ldr	r1, [pc, #124]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a1fe:	4313      	orrs	r3, r2
 800a200:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a202:	4b1e      	ldr	r3, [pc, #120]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a204:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a20a:	491c      	ldr	r1, [pc, #112]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a20c:	4313      	orrs	r3, r2
 800a20e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a210:	4b1a      	ldr	r3, [pc, #104]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a214:	4a19      	ldr	r2, [pc, #100]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a216:	f023 0310 	bic.w	r3, r3, #16
 800a21a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a21c:	4b17      	ldr	r3, [pc, #92]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a21e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a220:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a224:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	6a12      	ldr	r2, [r2, #32]
 800a22c:	00d2      	lsls	r2, r2, #3
 800a22e:	4913      	ldr	r1, [pc, #76]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a230:	4313      	orrs	r3, r2
 800a232:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a234:	4b11      	ldr	r3, [pc, #68]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a238:	4a10      	ldr	r2, [pc, #64]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a23a:	f043 0310 	orr.w	r3, r3, #16
 800a23e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a240:	4b0e      	ldr	r3, [pc, #56]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a0d      	ldr	r2, [pc, #52]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a24a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a24c:	f7f7 fe0c 	bl	8001e68 <HAL_GetTick>
 800a250:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a252:	e008      	b.n	800a266 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a254:	f7f7 fe08 	bl	8001e68 <HAL_GetTick>
 800a258:	4602      	mov	r2, r0
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d901      	bls.n	800a266 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e006      	b.n	800a274 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a266:	4b05      	ldr	r3, [pc, #20]	@ (800a27c <RCCEx_PLL3_Config+0x12c>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d0f0      	beq.n	800a254 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	44020c00 	.word	0x44020c00

0800a280 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	e08c      	b.n	800a3ac <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	7a5b      	ldrb	r3, [r3, #9]
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d105      	bne.n	800a2a8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7f6 ff18 	bl	80010d8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f022 0204 	bic.w	r2, r2, #4
 800a2bc:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6859      	ldr	r1, [r3, #4]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	4b3b      	ldr	r3, [pc, #236]	@ (800a3b4 <HAL_RNG_Init+0x134>)
 800a2c8:	430b      	orrs	r3, r1
 800a2ca:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800a2d4:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a37      	ldr	r2, [pc, #220]	@ (800a3b8 <HAL_RNG_Init+0x138>)
 800a2dc:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800a2ec:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a2ee:	f7f7 fdbb 	bl	8001e68 <HAL_GetTick>
 800a2f2:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a2f4:	e016      	b.n	800a324 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a2f6:	f7f7 fdb7 	bl	8001e68 <HAL_GetTick>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	2b04      	cmp	r3, #4
 800a302:	d90f      	bls.n	800a324 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a30e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a312:	d107      	bne.n	800a324 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2202      	movs	r2, #2
 800a31e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e043      	b.n	800a3ac <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a32e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a332:	d0e0      	beq.n	800a2f6 <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f042 0204 	orr.w	r2, r2, #4
 800a342:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a34e:	2b40      	cmp	r3, #64	@ 0x40
 800a350:	d104      	bne.n	800a35c <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2204      	movs	r2, #4
 800a356:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	e027      	b.n	800a3ac <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800a35c:	f7f7 fd84 	bl	8001e68 <HAL_GetTick>
 800a360:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a362:	e015      	b.n	800a390 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a364:	f7f7 fd80 	bl	8001e68 <HAL_GetTick>
 800a368:	4602      	mov	r2, r0
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	1ad3      	subs	r3, r2, r3
 800a36e:	2b04      	cmp	r3, #4
 800a370:	d90e      	bls.n	800a390 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	f003 0301 	and.w	r3, r3, #1
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d007      	beq.n	800a390 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2204      	movs	r2, #4
 800a384:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2202      	movs	r2, #2
 800a38a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e00d      	b.n	800a3ac <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	f003 0301 	and.w	r3, r3, #1
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d1e2      	bne.n	800a364 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3710      	adds	r7, #16
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	40f00e00 	.word	0x40f00e00
 800a3b8:	0003af66 	.word	0x0003af66

0800a3bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d071      	beq.n	800a4b2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d106      	bne.n	800a3e8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7f6 fed0 	bl	8001188 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2202      	movs	r2, #2
 800a3ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a3f0:	4b32      	ldr	r3, [pc, #200]	@ (800a4bc <HAL_RTC_Init+0x100>)
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f003 0310 	and.w	r3, r3, #16
 800a3f8:	2b10      	cmp	r3, #16
 800a3fa:	d051      	beq.n	800a4a0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a3fc:	4b2f      	ldr	r3, [pc, #188]	@ (800a4bc <HAL_RTC_Init+0x100>)
 800a3fe:	22ca      	movs	r2, #202	@ 0xca
 800a400:	625a      	str	r2, [r3, #36]	@ 0x24
 800a402:	4b2e      	ldr	r3, [pc, #184]	@ (800a4bc <HAL_RTC_Init+0x100>)
 800a404:	2253      	movs	r2, #83	@ 0x53
 800a406:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 f9a3 	bl	800a754 <RTC_EnterInitMode>
 800a40e:	4603      	mov	r3, r0
 800a410:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a412:	7bfb      	ldrb	r3, [r7, #15]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d13f      	bne.n	800a498 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a418:	4b28      	ldr	r3, [pc, #160]	@ (800a4bc <HAL_RTC_Init+0x100>)
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	4a27      	ldr	r2, [pc, #156]	@ (800a4bc <HAL_RTC_Init+0x100>)
 800a41e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800a422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a426:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a428:	4b24      	ldr	r3, [pc, #144]	@ (800a4bc <HAL_RTC_Init+0x100>)
 800a42a:	699a      	ldr	r2, [r3, #24]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6859      	ldr	r1, [r3, #4]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	4319      	orrs	r1, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	430b      	orrs	r3, r1
 800a43c:	491f      	ldr	r1, [pc, #124]	@ (800a4bc <HAL_RTC_Init+0x100>)
 800a43e:	4313      	orrs	r3, r2
 800a440:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68da      	ldr	r2, [r3, #12]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	041b      	lsls	r3, r3, #16
 800a44c:	491b      	ldr	r1, [pc, #108]	@ (800a4bc <HAL_RTC_Init+0x100>)
 800a44e:	4313      	orrs	r3, r2
 800a450:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a452:	4b1a      	ldr	r3, [pc, #104]	@ (800a4bc <HAL_RTC_Init+0x100>)
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a462:	430b      	orrs	r3, r1
 800a464:	4915      	ldr	r1, [pc, #84]	@ (800a4bc <HAL_RTC_Init+0x100>)
 800a466:	4313      	orrs	r3, r2
 800a468:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 f9ae 	bl	800a7cc <RTC_ExitInitMode>
 800a470:	4603      	mov	r3, r0
 800a472:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800a474:	7bfb      	ldrb	r3, [r7, #15]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d10e      	bne.n	800a498 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800a47a:	4b10      	ldr	r3, [pc, #64]	@ (800a4bc <HAL_RTC_Init+0x100>)
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a19      	ldr	r1, [r3, #32]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	69db      	ldr	r3, [r3, #28]
 800a48a:	4319      	orrs	r1, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	430b      	orrs	r3, r1
 800a492:	490a      	ldr	r1, [pc, #40]	@ (800a4bc <HAL_RTC_Init+0x100>)
 800a494:	4313      	orrs	r3, r2
 800a496:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a498:	4b08      	ldr	r3, [pc, #32]	@ (800a4bc <HAL_RTC_Init+0x100>)
 800a49a:	22ff      	movs	r2, #255	@ 0xff
 800a49c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a49e:	e001      	b.n	800a4a4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d103      	bne.n	800a4b2 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800a4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	44007800 	.word	0x44007800

0800a4c0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a4c0:	b590      	push	{r4, r7, lr}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d101      	bne.n	800a4da <HAL_RTC_SetTime+0x1a>
 800a4d6:	2302      	movs	r3, #2
 800a4d8:	e07e      	b.n	800a5d8 <HAL_RTC_SetTime+0x118>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2202      	movs	r2, #2
 800a4e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a4ea:	4b3d      	ldr	r3, [pc, #244]	@ (800a5e0 <HAL_RTC_SetTime+0x120>)
 800a4ec:	22ca      	movs	r2, #202	@ 0xca
 800a4ee:	625a      	str	r2, [r3, #36]	@ 0x24
 800a4f0:	4b3b      	ldr	r3, [pc, #236]	@ (800a5e0 <HAL_RTC_SetTime+0x120>)
 800a4f2:	2253      	movs	r2, #83	@ 0x53
 800a4f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f000 f92c 	bl	800a754 <RTC_EnterInitMode>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a500:	7cfb      	ldrb	r3, [r7, #19]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d159      	bne.n	800a5ba <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a506:	4b36      	ldr	r3, [pc, #216]	@ (800a5e0 <HAL_RTC_SetTime+0x120>)
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a50e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a512:	d04d      	beq.n	800a5b0 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d125      	bne.n	800a566 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a51a:	4b31      	ldr	r3, [pc, #196]	@ (800a5e0 <HAL_RTC_SetTime+0x120>)
 800a51c:	699b      	ldr	r3, [r3, #24]
 800a51e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a522:	2b00      	cmp	r3, #0
 800a524:	d102      	bne.n	800a52c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2200      	movs	r2, #0
 800a52a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	4618      	mov	r0, r3
 800a532:	f000 f989 	bl	800a848 <RTC_ByteToBcd2>
 800a536:	4603      	mov	r3, r0
 800a538:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	785b      	ldrb	r3, [r3, #1]
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 f982 	bl	800a848 <RTC_ByteToBcd2>
 800a544:	4603      	mov	r3, r0
 800a546:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a548:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	789b      	ldrb	r3, [r3, #2]
 800a54e:	4618      	mov	r0, r3
 800a550:	f000 f97a 	bl	800a848 <RTC_ByteToBcd2>
 800a554:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a556:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	78db      	ldrb	r3, [r3, #3]
 800a55e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a560:	4313      	orrs	r3, r2
 800a562:	617b      	str	r3, [r7, #20]
 800a564:	e017      	b.n	800a596 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a566:	4b1e      	ldr	r3, [pc, #120]	@ (800a5e0 <HAL_RTC_SetTime+0x120>)
 800a568:	699b      	ldr	r3, [r3, #24]
 800a56a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d102      	bne.n	800a578 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	2200      	movs	r2, #0
 800a576:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	785b      	ldrb	r3, [r3, #1]
 800a582:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a584:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a58a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	78db      	ldrb	r3, [r3, #3]
 800a590:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a592:	4313      	orrs	r3, r2
 800a594:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800a596:	4a12      	ldr	r2, [pc, #72]	@ (800a5e0 <HAL_RTC_SetTime+0x120>)
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a59e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a5a2:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800a5a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a5e0 <HAL_RTC_SetTime+0x120>)
 800a5a6:	699b      	ldr	r3, [r3, #24]
 800a5a8:	4a0d      	ldr	r2, [pc, #52]	@ (800a5e0 <HAL_RTC_SetTime+0x120>)
 800a5aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a5ae:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f000 f90b 	bl	800a7cc <RTC_ExitInitMode>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5ba:	4b09      	ldr	r3, [pc, #36]	@ (800a5e0 <HAL_RTC_SetTime+0x120>)
 800a5bc:	22ff      	movs	r2, #255	@ 0xff
 800a5be:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a5c0:	7cfb      	ldrb	r3, [r7, #19]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d103      	bne.n	800a5ce <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a5d6:	7cfb      	ldrb	r3, [r7, #19]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	371c      	adds	r7, #28
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd90      	pop	{r4, r7, pc}
 800a5e0:	44007800 	.word	0x44007800

0800a5e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a5e4:	b590      	push	{r4, r7, lr}
 800a5e6:	b087      	sub	sp, #28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d101      	bne.n	800a5fe <HAL_RTC_SetDate+0x1a>
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	e071      	b.n	800a6e2 <HAL_RTC_SetDate+0xfe>
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2201      	movs	r2, #1
 800a602:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2202      	movs	r2, #2
 800a60a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10e      	bne.n	800a632 <HAL_RTC_SetDate+0x4e>
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	785b      	ldrb	r3, [r3, #1]
 800a618:	f003 0310 	and.w	r3, r3, #16
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d008      	beq.n	800a632 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	785b      	ldrb	r3, [r3, #1]
 800a624:	f023 0310 	bic.w	r3, r3, #16
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	330a      	adds	r3, #10
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d11c      	bne.n	800a672 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	78db      	ldrb	r3, [r3, #3]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 f903 	bl	800a848 <RTC_ByteToBcd2>
 800a642:	4603      	mov	r3, r0
 800a644:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	785b      	ldrb	r3, [r3, #1]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 f8fc 	bl	800a848 <RTC_ByteToBcd2>
 800a650:	4603      	mov	r3, r0
 800a652:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a654:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	789b      	ldrb	r3, [r3, #2]
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 f8f4 	bl	800a848 <RTC_ByteToBcd2>
 800a660:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a662:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a66c:	4313      	orrs	r3, r2
 800a66e:	617b      	str	r3, [r7, #20]
 800a670:	e00e      	b.n	800a690 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	78db      	ldrb	r3, [r3, #3]
 800a676:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	785b      	ldrb	r3, [r3, #1]
 800a67c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a67e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a684:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a68c:	4313      	orrs	r3, r2
 800a68e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a690:	4b16      	ldr	r3, [pc, #88]	@ (800a6ec <HAL_RTC_SetDate+0x108>)
 800a692:	22ca      	movs	r2, #202	@ 0xca
 800a694:	625a      	str	r2, [r3, #36]	@ 0x24
 800a696:	4b15      	ldr	r3, [pc, #84]	@ (800a6ec <HAL_RTC_SetDate+0x108>)
 800a698:	2253      	movs	r2, #83	@ 0x53
 800a69a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f000 f859 	bl	800a754 <RTC_EnterInitMode>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a6a6:	7cfb      	ldrb	r3, [r7, #19]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10b      	bne.n	800a6c4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800a6ac:	4a0f      	ldr	r2, [pc, #60]	@ (800a6ec <HAL_RTC_SetDate+0x108>)
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a6b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a6b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f000 f886 	bl	800a7cc <RTC_ExitInitMode>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6c4:	4b09      	ldr	r3, [pc, #36]	@ (800a6ec <HAL_RTC_SetDate+0x108>)
 800a6c6:	22ff      	movs	r2, #255	@ 0xff
 800a6c8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a6ca:	7cfb      	ldrb	r3, [r7, #19]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d103      	bne.n	800a6d8 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a6e0:	7cfb      	ldrb	r3, [r7, #19]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	371c      	adds	r7, #28
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd90      	pop	{r4, r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	44007800 	.word	0x44007800

0800a6f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a6f8:	4b15      	ldr	r3, [pc, #84]	@ (800a750 <HAL_RTC_WaitForSynchro+0x60>)
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	4a14      	ldr	r2, [pc, #80]	@ (800a750 <HAL_RTC_WaitForSynchro+0x60>)
 800a6fe:	f023 0320 	bic.w	r3, r3, #32
 800a702:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a704:	f7f7 fbb0 	bl	8001e68 <HAL_GetTick>
 800a708:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a70a:	e013      	b.n	800a734 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a70c:	f7f7 fbac 	bl	8001e68 <HAL_GetTick>
 800a710:	4602      	mov	r2, r0
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a71a:	d90b      	bls.n	800a734 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a71c:	4b0c      	ldr	r3, [pc, #48]	@ (800a750 <HAL_RTC_WaitForSynchro+0x60>)
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	f003 0320 	and.w	r3, r3, #32
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10c      	bne.n	800a742 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2203      	movs	r2, #3
 800a72c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800a730:	2303      	movs	r3, #3
 800a732:	e008      	b.n	800a746 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a734:	4b06      	ldr	r3, [pc, #24]	@ (800a750 <HAL_RTC_WaitForSynchro+0x60>)
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	f003 0320 	and.w	r3, r3, #32
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d0e5      	beq.n	800a70c <HAL_RTC_WaitForSynchro+0x1c>
 800a740:	e000      	b.n	800a744 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800a742:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	44007800 	.word	0x44007800

0800a754 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a760:	4b19      	ldr	r3, [pc, #100]	@ (800a7c8 <RTC_EnterInitMode+0x74>)
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d128      	bne.n	800a7be <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a76c:	4b16      	ldr	r3, [pc, #88]	@ (800a7c8 <RTC_EnterInitMode+0x74>)
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	4a15      	ldr	r2, [pc, #84]	@ (800a7c8 <RTC_EnterInitMode+0x74>)
 800a772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a776:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800a778:	f7f7 fb76 	bl	8001e68 <HAL_GetTick>
 800a77c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a77e:	e013      	b.n	800a7a8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a780:	f7f7 fb72 	bl	8001e68 <HAL_GetTick>
 800a784:	4602      	mov	r2, r0
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a78e:	d90b      	bls.n	800a7a8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a790:	4b0d      	ldr	r3, [pc, #52]	@ (800a7c8 <RTC_EnterInitMode+0x74>)
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10f      	bne.n	800a7bc <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800a79c:	2303      	movs	r3, #3
 800a79e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2203      	movs	r2, #3
 800a7a4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a7a8:	4b07      	ldr	r3, [pc, #28]	@ (800a7c8 <RTC_EnterInitMode+0x74>)
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d104      	bne.n	800a7be <RTC_EnterInitMode+0x6a>
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	d1e2      	bne.n	800a780 <RTC_EnterInitMode+0x2c>
 800a7ba:	e000      	b.n	800a7be <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800a7bc:	bf00      	nop
        }
      }
    }
  }

  return status;
 800a7be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	44007800 	.word	0x44007800

0800a7cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a7d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a844 <RTC_ExitInitMode+0x78>)
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	4a19      	ldr	r2, [pc, #100]	@ (800a844 <RTC_ExitInitMode+0x78>)
 800a7de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7e2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a7e4:	4b17      	ldr	r3, [pc, #92]	@ (800a844 <RTC_ExitInitMode+0x78>)
 800a7e6:	699b      	ldr	r3, [r3, #24]
 800a7e8:	f003 0320 	and.w	r3, r3, #32
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10c      	bne.n	800a80a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7ff ff7d 	bl	800a6f0 <HAL_RTC_WaitForSynchro>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d01e      	beq.n	800a83a <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2203      	movs	r2, #3
 800a800:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a804:	2303      	movs	r3, #3
 800a806:	73fb      	strb	r3, [r7, #15]
 800a808:	e017      	b.n	800a83a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a80a:	4b0e      	ldr	r3, [pc, #56]	@ (800a844 <RTC_ExitInitMode+0x78>)
 800a80c:	699b      	ldr	r3, [r3, #24]
 800a80e:	4a0d      	ldr	r2, [pc, #52]	@ (800a844 <RTC_ExitInitMode+0x78>)
 800a810:	f023 0320 	bic.w	r3, r3, #32
 800a814:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7ff ff6a 	bl	800a6f0 <HAL_RTC_WaitForSynchro>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d005      	beq.n	800a82e <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2203      	movs	r2, #3
 800a826:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a82a:	2303      	movs	r3, #3
 800a82c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a82e:	4b05      	ldr	r3, [pc, #20]	@ (800a844 <RTC_ExitInitMode+0x78>)
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	4a04      	ldr	r2, [pc, #16]	@ (800a844 <RTC_ExitInitMode+0x78>)
 800a834:	f043 0320 	orr.w	r3, r3, #32
 800a838:	6193      	str	r3, [r2, #24]
  }
  return status;
 800a83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	44007800 	.word	0x44007800

0800a848 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	4603      	mov	r3, r0
 800a850:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800a852:	2300      	movs	r3, #0
 800a854:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800a856:	79fb      	ldrb	r3, [r7, #7]
 800a858:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800a85a:	e005      	b.n	800a868 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	3301      	adds	r3, #1
 800a860:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800a862:	7afb      	ldrb	r3, [r7, #11]
 800a864:	3b0a      	subs	r3, #10
 800a866:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800a868:	7afb      	ldrb	r3, [r7, #11]
 800a86a:	2b09      	cmp	r3, #9
 800a86c:	d8f6      	bhi.n	800a85c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	b2db      	uxtb	r3, r3
 800a872:	011b      	lsls	r3, r3, #4
 800a874:	b2da      	uxtb	r2, r3
 800a876:	7afb      	ldrb	r3, [r7, #11]
 800a878:	4313      	orrs	r3, r2
 800a87a:	b2db      	uxtb	r3, r3
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3714      	adds	r7, #20
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	4910      	ldr	r1, [pc, #64]	@ (800a8dc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800a89c:	4313      	orrs	r3, r2
 800a89e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	689a      	ldr	r2, [r3, #8]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	431a      	orrs	r2, r3
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	490c      	ldr	r1, [pc, #48]	@ (800a8e0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800a8b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a8e0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	6919      	ldr	r1, [r3, #16]
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	041b      	lsls	r3, r3, #16
 800a8c6:	430b      	orrs	r3, r1
 800a8c8:	4905      	ldr	r1, [pc, #20]	@ (800a8e0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	44007800 	.word	0x44007800
 800a8e0:	44007c00 	.word	0x44007c00

0800a8e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e162      	b.n	800abbc <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a70      	ldr	r2, [pc, #448]	@ (800aabc <HAL_SPI_Init+0x1d8>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d018      	beq.n	800a932 <HAL_SPI_Init+0x4e>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a6e      	ldr	r2, [pc, #440]	@ (800aac0 <HAL_SPI_Init+0x1dc>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d013      	beq.n	800a932 <HAL_SPI_Init+0x4e>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a6d      	ldr	r2, [pc, #436]	@ (800aac4 <HAL_SPI_Init+0x1e0>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d00e      	beq.n	800a932 <HAL_SPI_Init+0x4e>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a6b      	ldr	r2, [pc, #428]	@ (800aac8 <HAL_SPI_Init+0x1e4>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d009      	beq.n	800a932 <HAL_SPI_Init+0x4e>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a6a      	ldr	r2, [pc, #424]	@ (800aacc <HAL_SPI_Init+0x1e8>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d004      	beq.n	800a932 <HAL_SPI_Init+0x4e>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a68      	ldr	r2, [pc, #416]	@ (800aad0 <HAL_SPI_Init+0x1ec>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	e000      	b.n	800a934 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a932:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a5f      	ldr	r2, [pc, #380]	@ (800aabc <HAL_SPI_Init+0x1d8>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d018      	beq.n	800a976 <HAL_SPI_Init+0x92>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a5d      	ldr	r2, [pc, #372]	@ (800aac0 <HAL_SPI_Init+0x1dc>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d013      	beq.n	800a976 <HAL_SPI_Init+0x92>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a5c      	ldr	r2, [pc, #368]	@ (800aac4 <HAL_SPI_Init+0x1e0>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d00e      	beq.n	800a976 <HAL_SPI_Init+0x92>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a5a      	ldr	r2, [pc, #360]	@ (800aac8 <HAL_SPI_Init+0x1e4>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d009      	beq.n	800a976 <HAL_SPI_Init+0x92>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a59      	ldr	r2, [pc, #356]	@ (800aacc <HAL_SPI_Init+0x1e8>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d004      	beq.n	800a976 <HAL_SPI_Init+0x92>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a57      	ldr	r2, [pc, #348]	@ (800aad0 <HAL_SPI_Init+0x1ec>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d105      	bne.n	800a982 <HAL_SPI_Init+0x9e>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	2b0f      	cmp	r3, #15
 800a97c:	d901      	bls.n	800a982 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	e11c      	b.n	800abbc <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f91e 	bl	800abc4 <SPI_GetPacketSize>
 800a988:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a4b      	ldr	r2, [pc, #300]	@ (800aabc <HAL_SPI_Init+0x1d8>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d018      	beq.n	800a9c6 <HAL_SPI_Init+0xe2>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a49      	ldr	r2, [pc, #292]	@ (800aac0 <HAL_SPI_Init+0x1dc>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d013      	beq.n	800a9c6 <HAL_SPI_Init+0xe2>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a48      	ldr	r2, [pc, #288]	@ (800aac4 <HAL_SPI_Init+0x1e0>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d00e      	beq.n	800a9c6 <HAL_SPI_Init+0xe2>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a46      	ldr	r2, [pc, #280]	@ (800aac8 <HAL_SPI_Init+0x1e4>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d009      	beq.n	800a9c6 <HAL_SPI_Init+0xe2>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a45      	ldr	r2, [pc, #276]	@ (800aacc <HAL_SPI_Init+0x1e8>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d004      	beq.n	800a9c6 <HAL_SPI_Init+0xe2>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a43      	ldr	r2, [pc, #268]	@ (800aad0 <HAL_SPI_Init+0x1ec>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d102      	bne.n	800a9cc <HAL_SPI_Init+0xe8>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2b08      	cmp	r3, #8
 800a9ca:	d820      	bhi.n	800aa0e <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a9d0:	4a40      	ldr	r2, [pc, #256]	@ (800aad4 <HAL_SPI_Init+0x1f0>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d018      	beq.n	800aa08 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a3f      	ldr	r2, [pc, #252]	@ (800aad8 <HAL_SPI_Init+0x1f4>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d013      	beq.n	800aa08 <HAL_SPI_Init+0x124>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a3d      	ldr	r2, [pc, #244]	@ (800aadc <HAL_SPI_Init+0x1f8>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d00e      	beq.n	800aa08 <HAL_SPI_Init+0x124>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a3c      	ldr	r2, [pc, #240]	@ (800aae0 <HAL_SPI_Init+0x1fc>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d009      	beq.n	800aa08 <HAL_SPI_Init+0x124>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a3a      	ldr	r2, [pc, #232]	@ (800aae4 <HAL_SPI_Init+0x200>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d004      	beq.n	800aa08 <HAL_SPI_Init+0x124>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a39      	ldr	r2, [pc, #228]	@ (800aae8 <HAL_SPI_Init+0x204>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d104      	bne.n	800aa12 <HAL_SPI_Init+0x12e>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2b10      	cmp	r3, #16
 800aa0c:	d901      	bls.n	800aa12 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e0d4      	b.n	800abbc <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d106      	bne.n	800aa2c <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7f6 fc0e 	bl	8001248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2202      	movs	r2, #2
 800aa30:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f022 0201 	bic.w	r2, r2, #1
 800aa42:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800aa4e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	699b      	ldr	r3, [r3, #24]
 800aa54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa58:	d119      	bne.n	800aa8e <HAL_SPI_Init+0x1aa>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa62:	d103      	bne.n	800aa6c <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d008      	beq.n	800aa7e <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10c      	bne.n	800aa8e <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aa78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa7c:	d107      	bne.n	800aa8e <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800aa8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d028      	beq.n	800aaec <HAL_SPI_Init+0x208>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	2b06      	cmp	r3, #6
 800aaa0:	d924      	bls.n	800aaec <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	430a      	orrs	r2, r1
 800aab6:	601a      	str	r2, [r3, #0]
 800aab8:	e020      	b.n	800aafc <HAL_SPI_Init+0x218>
 800aaba:	bf00      	nop
 800aabc:	40014c00 	.word	0x40014c00
 800aac0:	50014c00 	.word	0x50014c00
 800aac4:	44002000 	.word	0x44002000
 800aac8:	54002000 	.word	0x54002000
 800aacc:	40015000 	.word	0x40015000
 800aad0:	50015000 	.word	0x50015000
 800aad4:	40013000 	.word	0x40013000
 800aad8:	50013000 	.word	0x50013000
 800aadc:	40003800 	.word	0x40003800
 800aae0:	50003800 	.word	0x50003800
 800aae4:	40003c00 	.word	0x40003c00
 800aae8:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aafa:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	69da      	ldr	r2, [r3, #28]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab04:	431a      	orrs	r2, r3
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	431a      	orrs	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab0e:	ea42 0103 	orr.w	r1, r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	68da      	ldr	r2, [r3, #12]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	430a      	orrs	r2, r1
 800ab1c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab26:	431a      	orrs	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	431a      	orrs	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	431a      	orrs	r2, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	431a      	orrs	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	431a      	orrs	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	431a      	orrs	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab50:	431a      	orrs	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	431a      	orrs	r2, r3
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab5c:	431a      	orrs	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab62:	431a      	orrs	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab68:	ea42 0103 	orr.w	r1, r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	430a      	orrs	r2, r1
 800ab76:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f022 0201 	bic.w	r2, r2, #1
 800ab86:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00a      	beq.n	800abaa <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	430a      	orrs	r2, r1
 800aba8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2201      	movs	r2, #1
 800abb6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abd0:	095b      	lsrs	r3, r3, #5
 800abd2:	3301      	adds	r3, #1
 800abd4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	3301      	adds	r3, #1
 800abdc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	3307      	adds	r3, #7
 800abe2:	08db      	lsrs	r3, r3, #3
 800abe4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	fb02 f303 	mul.w	r3, r2, r3
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr

0800abfa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b082      	sub	sp, #8
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d101      	bne.n	800ac0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e042      	b.n	800ac92 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d106      	bne.n	800ac24 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f7f6 fbce 	bl	80013c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2224      	movs	r2, #36	@ 0x24
 800ac28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f022 0201 	bic.w	r2, r2, #1
 800ac3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d002      	beq.n	800ac4a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fab5 	bl	800b1b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 f8c4 	bl	800add8 <UART_SetConfig>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d101      	bne.n	800ac5a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	e01b      	b.n	800ac92 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	685a      	ldr	r2, [r3, #4]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ac68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	689a      	ldr	r2, [r3, #8]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ac78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f042 0201 	orr.w	r2, r2, #1
 800ac88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fb34 	bl	800b2f8 <UART_CheckIdleState>
 800ac90:	4603      	mov	r3, r0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b08a      	sub	sp, #40	@ 0x28
 800ac9e:	af02      	add	r7, sp, #8
 800aca0:	60f8      	str	r0, [r7, #12]
 800aca2:	60b9      	str	r1, [r7, #8]
 800aca4:	603b      	str	r3, [r7, #0]
 800aca6:	4613      	mov	r3, r2
 800aca8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acb0:	2b20      	cmp	r3, #32
 800acb2:	f040 808b 	bne.w	800adcc <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <HAL_UART_Transmit+0x28>
 800acbc:	88fb      	ldrh	r3, [r7, #6]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800acc2:	2301      	movs	r3, #1
 800acc4:	e083      	b.n	800adce <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acd0:	2b80      	cmp	r3, #128	@ 0x80
 800acd2:	d107      	bne.n	800ace4 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	689a      	ldr	r2, [r3, #8]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ace2:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2221      	movs	r2, #33	@ 0x21
 800acf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800acf4:	f7f7 f8b8 	bl	8001e68 <HAL_GetTick>
 800acf8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	88fa      	ldrh	r2, [r7, #6]
 800acfe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	88fa      	ldrh	r2, [r7, #6]
 800ad06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad12:	d108      	bne.n	800ad26 <HAL_UART_Transmit+0x8c>
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d104      	bne.n	800ad26 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	61bb      	str	r3, [r7, #24]
 800ad24:	e003      	b.n	800ad2e <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ad2e:	e030      	b.n	800ad92 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	9300      	str	r3, [sp, #0]
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	2200      	movs	r2, #0
 800ad38:	2180      	movs	r1, #128	@ 0x80
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f000 fb86 	bl	800b44c <UART_WaitOnFlagUntilTimeout>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d005      	beq.n	800ad52 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2220      	movs	r2, #32
 800ad4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ad4e:	2303      	movs	r3, #3
 800ad50:	e03d      	b.n	800adce <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10b      	bne.n	800ad70 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	881b      	ldrh	r3, [r3, #0]
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	3302      	adds	r3, #2
 800ad6c:	61bb      	str	r3, [r7, #24]
 800ad6e:	e007      	b.n	800ad80 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	781a      	ldrb	r2, [r3, #0]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	b29a      	uxth	r2, r3
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d1c8      	bne.n	800ad30 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	2200      	movs	r2, #0
 800ada6:	2140      	movs	r1, #64	@ 0x40
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f000 fb4f 	bl	800b44c <UART_WaitOnFlagUntilTimeout>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d005      	beq.n	800adc0 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2220      	movs	r2, #32
 800adb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800adbc:	2303      	movs	r3, #3
 800adbe:	e006      	b.n	800adce <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2220      	movs	r2, #32
 800adc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	e000      	b.n	800adce <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800adcc:	2302      	movs	r3, #2
  }
}
 800adce:	4618      	mov	r0, r3
 800add0:	3720      	adds	r7, #32
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
	...

0800add8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800add8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800addc:	b094      	sub	sp, #80	@ 0x50
 800adde:	af00      	add	r7, sp, #0
 800ade0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ade8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	4b78      	ldr	r3, [pc, #480]	@ (800afd0 <UART_SetConfig+0x1f8>)
 800adee:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800adf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adf2:	689a      	ldr	r2, [r3, #8]
 800adf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adf6:	691b      	ldr	r3, [r3, #16]
 800adf8:	431a      	orrs	r2, r3
 800adfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	431a      	orrs	r2, r3
 800ae00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae02:	69db      	ldr	r3, [r3, #28]
 800ae04:	4313      	orrs	r3, r2
 800ae06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4971      	ldr	r1, [pc, #452]	@ (800afd4 <UART_SetConfig+0x1fc>)
 800ae10:	4019      	ands	r1, r3
 800ae12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae18:	430b      	orrs	r3, r1
 800ae1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ae26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae28:	68d9      	ldr	r1, [r3, #12]
 800ae2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	ea40 0301 	orr.w	r3, r0, r1
 800ae32:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae36:	699b      	ldr	r3, [r3, #24]
 800ae38:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	4b64      	ldr	r3, [pc, #400]	@ (800afd0 <UART_SetConfig+0x1f8>)
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d009      	beq.n	800ae58 <UART_SetConfig+0x80>
 800ae44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	4b63      	ldr	r3, [pc, #396]	@ (800afd8 <UART_SetConfig+0x200>)
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d004      	beq.n	800ae58 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae50:	6a1a      	ldr	r2, [r3, #32]
 800ae52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae54:	4313      	orrs	r3, r2
 800ae56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800ae62:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800ae66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae6c:	430b      	orrs	r3, r1
 800ae6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae76:	f023 000f 	bic.w	r0, r3, #15
 800ae7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae7c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ae7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	ea40 0301 	orr.w	r3, r0, r1
 800ae86:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	4b53      	ldr	r3, [pc, #332]	@ (800afdc <UART_SetConfig+0x204>)
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d102      	bne.n	800ae98 <UART_SetConfig+0xc0>
 800ae92:	2301      	movs	r3, #1
 800ae94:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae96:	e066      	b.n	800af66 <UART_SetConfig+0x18e>
 800ae98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	4b50      	ldr	r3, [pc, #320]	@ (800afe0 <UART_SetConfig+0x208>)
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d102      	bne.n	800aea8 <UART_SetConfig+0xd0>
 800aea2:	2302      	movs	r3, #2
 800aea4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aea6:	e05e      	b.n	800af66 <UART_SetConfig+0x18e>
 800aea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	4b4d      	ldr	r3, [pc, #308]	@ (800afe4 <UART_SetConfig+0x20c>)
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d102      	bne.n	800aeb8 <UART_SetConfig+0xe0>
 800aeb2:	2304      	movs	r3, #4
 800aeb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aeb6:	e056      	b.n	800af66 <UART_SetConfig+0x18e>
 800aeb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	4b4a      	ldr	r3, [pc, #296]	@ (800afe8 <UART_SetConfig+0x210>)
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d102      	bne.n	800aec8 <UART_SetConfig+0xf0>
 800aec2:	2308      	movs	r3, #8
 800aec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aec6:	e04e      	b.n	800af66 <UART_SetConfig+0x18e>
 800aec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	4b47      	ldr	r3, [pc, #284]	@ (800afec <UART_SetConfig+0x214>)
 800aece:	429a      	cmp	r2, r3
 800aed0:	d102      	bne.n	800aed8 <UART_SetConfig+0x100>
 800aed2:	2310      	movs	r3, #16
 800aed4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aed6:	e046      	b.n	800af66 <UART_SetConfig+0x18e>
 800aed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	4b44      	ldr	r3, [pc, #272]	@ (800aff0 <UART_SetConfig+0x218>)
 800aede:	429a      	cmp	r2, r3
 800aee0:	d102      	bne.n	800aee8 <UART_SetConfig+0x110>
 800aee2:	2320      	movs	r3, #32
 800aee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aee6:	e03e      	b.n	800af66 <UART_SetConfig+0x18e>
 800aee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	4b41      	ldr	r3, [pc, #260]	@ (800aff4 <UART_SetConfig+0x21c>)
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d102      	bne.n	800aef8 <UART_SetConfig+0x120>
 800aef2:	2340      	movs	r3, #64	@ 0x40
 800aef4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aef6:	e036      	b.n	800af66 <UART_SetConfig+0x18e>
 800aef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	4b3e      	ldr	r3, [pc, #248]	@ (800aff8 <UART_SetConfig+0x220>)
 800aefe:	429a      	cmp	r2, r3
 800af00:	d102      	bne.n	800af08 <UART_SetConfig+0x130>
 800af02:	2380      	movs	r3, #128	@ 0x80
 800af04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af06:	e02e      	b.n	800af66 <UART_SetConfig+0x18e>
 800af08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	4b3b      	ldr	r3, [pc, #236]	@ (800affc <UART_SetConfig+0x224>)
 800af0e:	429a      	cmp	r2, r3
 800af10:	d103      	bne.n	800af1a <UART_SetConfig+0x142>
 800af12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af16:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af18:	e025      	b.n	800af66 <UART_SetConfig+0x18e>
 800af1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	4b38      	ldr	r3, [pc, #224]	@ (800b000 <UART_SetConfig+0x228>)
 800af20:	429a      	cmp	r2, r3
 800af22:	d103      	bne.n	800af2c <UART_SetConfig+0x154>
 800af24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af2a:	e01c      	b.n	800af66 <UART_SetConfig+0x18e>
 800af2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	4b34      	ldr	r3, [pc, #208]	@ (800b004 <UART_SetConfig+0x22c>)
 800af32:	429a      	cmp	r2, r3
 800af34:	d103      	bne.n	800af3e <UART_SetConfig+0x166>
 800af36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af3c:	e013      	b.n	800af66 <UART_SetConfig+0x18e>
 800af3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	4b31      	ldr	r3, [pc, #196]	@ (800b008 <UART_SetConfig+0x230>)
 800af44:	429a      	cmp	r2, r3
 800af46:	d103      	bne.n	800af50 <UART_SetConfig+0x178>
 800af48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800af4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af4e:	e00a      	b.n	800af66 <UART_SetConfig+0x18e>
 800af50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	4b1e      	ldr	r3, [pc, #120]	@ (800afd0 <UART_SetConfig+0x1f8>)
 800af56:	429a      	cmp	r2, r3
 800af58:	d103      	bne.n	800af62 <UART_SetConfig+0x18a>
 800af5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af60:	e001      	b.n	800af66 <UART_SetConfig+0x18e>
 800af62:	2300      	movs	r3, #0
 800af64:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800af66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	4b19      	ldr	r3, [pc, #100]	@ (800afd0 <UART_SetConfig+0x1f8>)
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d005      	beq.n	800af7c <UART_SetConfig+0x1a4>
 800af70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	4b18      	ldr	r3, [pc, #96]	@ (800afd8 <UART_SetConfig+0x200>)
 800af76:	429a      	cmp	r2, r3
 800af78:	f040 8094 	bne.w	800b0a4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800af7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af7e:	2200      	movs	r2, #0
 800af80:	623b      	str	r3, [r7, #32]
 800af82:	627a      	str	r2, [r7, #36]	@ 0x24
 800af84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800af88:	f7fc fcf0 	bl	800796c <HAL_RCCEx_GetPeriphCLKFreq>
 800af8c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800af8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 80f7 	beq.w	800b184 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af9a:	4a1c      	ldr	r2, [pc, #112]	@ (800b00c <UART_SetConfig+0x234>)
 800af9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afa0:	461a      	mov	r2, r3
 800afa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afa4:	fbb3 f3f2 	udiv	r3, r3, r2
 800afa8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800afaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afac:	685a      	ldr	r2, [r3, #4]
 800afae:	4613      	mov	r3, r2
 800afb0:	005b      	lsls	r3, r3, #1
 800afb2:	4413      	add	r3, r2
 800afb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d305      	bcc.n	800afc6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800afba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800afc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d924      	bls.n	800b010 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800afcc:	e069      	b.n	800b0a2 <UART_SetConfig+0x2ca>
 800afce:	bf00      	nop
 800afd0:	44002400 	.word	0x44002400
 800afd4:	cfff69f3 	.word	0xcfff69f3
 800afd8:	54002400 	.word	0x54002400
 800afdc:	40013800 	.word	0x40013800
 800afe0:	40004400 	.word	0x40004400
 800afe4:	40004800 	.word	0x40004800
 800afe8:	40004c00 	.word	0x40004c00
 800afec:	40005000 	.word	0x40005000
 800aff0:	40006400 	.word	0x40006400
 800aff4:	40007800 	.word	0x40007800
 800aff8:	40007c00 	.word	0x40007c00
 800affc:	40008000 	.word	0x40008000
 800b000:	40006800 	.word	0x40006800
 800b004:	40006c00 	.word	0x40006c00
 800b008:	40008400 	.word	0x40008400
 800b00c:	08010864 	.word	0x08010864
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b012:	2200      	movs	r2, #0
 800b014:	61bb      	str	r3, [r7, #24]
 800b016:	61fa      	str	r2, [r7, #28]
 800b018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b01a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b01c:	4a64      	ldr	r2, [pc, #400]	@ (800b1b0 <UART_SetConfig+0x3d8>)
 800b01e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b022:	b29b      	uxth	r3, r3
 800b024:	2200      	movs	r2, #0
 800b026:	613b      	str	r3, [r7, #16]
 800b028:	617a      	str	r2, [r7, #20]
 800b02a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b02e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b032:	f7f5 f933 	bl	800029c <__aeabi_uldivmod>
 800b036:	4602      	mov	r2, r0
 800b038:	460b      	mov	r3, r1
 800b03a:	4610      	mov	r0, r2
 800b03c:	4619      	mov	r1, r3
 800b03e:	f04f 0200 	mov.w	r2, #0
 800b042:	f04f 0300 	mov.w	r3, #0
 800b046:	020b      	lsls	r3, r1, #8
 800b048:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b04c:	0202      	lsls	r2, r0, #8
 800b04e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b050:	6849      	ldr	r1, [r1, #4]
 800b052:	0849      	lsrs	r1, r1, #1
 800b054:	2000      	movs	r0, #0
 800b056:	460c      	mov	r4, r1
 800b058:	4605      	mov	r5, r0
 800b05a:	eb12 0804 	adds.w	r8, r2, r4
 800b05e:	eb43 0905 	adc.w	r9, r3, r5
 800b062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	60bb      	str	r3, [r7, #8]
 800b06a:	60fa      	str	r2, [r7, #12]
 800b06c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b070:	4640      	mov	r0, r8
 800b072:	4649      	mov	r1, r9
 800b074:	f7f5 f912 	bl	800029c <__aeabi_uldivmod>
 800b078:	4602      	mov	r2, r0
 800b07a:	460b      	mov	r3, r1
 800b07c:	4613      	mov	r3, r2
 800b07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b082:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b086:	d308      	bcc.n	800b09a <UART_SetConfig+0x2c2>
 800b088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b08a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b08e:	d204      	bcs.n	800b09a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800b090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b096:	60da      	str	r2, [r3, #12]
 800b098:	e003      	b.n	800b0a2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b0a0:	e070      	b.n	800b184 <UART_SetConfig+0x3ac>
 800b0a2:	e06f      	b.n	800b184 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a6:	69db      	ldr	r3, [r3, #28]
 800b0a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b0ac:	d13c      	bne.n	800b128 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b0ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	603b      	str	r3, [r7, #0]
 800b0b4:	607a      	str	r2, [r7, #4]
 800b0b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0ba:	f7fc fc57 	bl	800796c <HAL_RCCEx_GetPeriphCLKFreq>
 800b0be:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d05e      	beq.n	800b184 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ca:	4a39      	ldr	r2, [pc, #228]	@ (800b1b0 <UART_SetConfig+0x3d8>)
 800b0cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0d8:	005a      	lsls	r2, r3, #1
 800b0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	085b      	lsrs	r3, r3, #1
 800b0e0:	441a      	add	r2, r3
 800b0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ee:	2b0f      	cmp	r3, #15
 800b0f0:	d916      	bls.n	800b120 <UART_SetConfig+0x348>
 800b0f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0f8:	d212      	bcs.n	800b120 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	f023 030f 	bic.w	r3, r3, #15
 800b102:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b106:	085b      	lsrs	r3, r3, #1
 800b108:	b29b      	uxth	r3, r3
 800b10a:	f003 0307 	and.w	r3, r3, #7
 800b10e:	b29a      	uxth	r2, r3
 800b110:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b112:	4313      	orrs	r3, r2
 800b114:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b11c:	60da      	str	r2, [r3, #12]
 800b11e:	e031      	b.n	800b184 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b126:	e02d      	b.n	800b184 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b128:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b12a:	2200      	movs	r2, #0
 800b12c:	469a      	mov	sl, r3
 800b12e:	4693      	mov	fp, r2
 800b130:	4650      	mov	r0, sl
 800b132:	4659      	mov	r1, fp
 800b134:	f7fc fc1a 	bl	800796c <HAL_RCCEx_GetPeriphCLKFreq>
 800b138:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b13a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d021      	beq.n	800b184 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b144:	4a1a      	ldr	r2, [pc, #104]	@ (800b1b0 <UART_SetConfig+0x3d8>)
 800b146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b14a:	461a      	mov	r2, r3
 800b14c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b14e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	085b      	lsrs	r3, r3, #1
 800b158:	441a      	add	r2, r3
 800b15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b162:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b166:	2b0f      	cmp	r3, #15
 800b168:	d909      	bls.n	800b17e <UART_SetConfig+0x3a6>
 800b16a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b16c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b170:	d205      	bcs.n	800b17e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b174:	b29a      	uxth	r2, r3
 800b176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	60da      	str	r2, [r3, #12]
 800b17c:	e002      	b.n	800b184 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b186:	2201      	movs	r2, #1
 800b188:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18e:	2201      	movs	r2, #1
 800b190:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b196:	2200      	movs	r2, #0
 800b198:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19c:	2200      	movs	r2, #0
 800b19e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b1a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3750      	adds	r7, #80	@ 0x50
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1ae:	bf00      	nop
 800b1b0:	08010864 	.word	0x08010864

0800b1b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c0:	f003 0308 	and.w	r3, r3, #8
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00a      	beq.n	800b1de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	430a      	orrs	r2, r1
 800b1dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1e2:	f003 0301 	and.w	r3, r3, #1
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00a      	beq.n	800b200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	430a      	orrs	r2, r1
 800b1fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b204:	f003 0302 	and.w	r3, r3, #2
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00a      	beq.n	800b222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	430a      	orrs	r2, r1
 800b220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b226:	f003 0304 	and.w	r3, r3, #4
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00a      	beq.n	800b244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	430a      	orrs	r2, r1
 800b242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b248:	f003 0310 	and.w	r3, r3, #16
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d00a      	beq.n	800b266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	430a      	orrs	r2, r1
 800b264:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b26a:	f003 0320 	and.w	r3, r3, #32
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00a      	beq.n	800b288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	430a      	orrs	r2, r1
 800b286:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b28c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b290:	2b00      	cmp	r3, #0
 800b292:	d01a      	beq.n	800b2ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	430a      	orrs	r2, r1
 800b2a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2b2:	d10a      	bne.n	800b2ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	430a      	orrs	r2, r1
 800b2c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00a      	beq.n	800b2ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	430a      	orrs	r2, r1
 800b2ea:	605a      	str	r2, [r3, #4]
  }
}
 800b2ec:	bf00      	nop
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b098      	sub	sp, #96	@ 0x60
 800b2fc:	af02      	add	r7, sp, #8
 800b2fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b308:	f7f6 fdae 	bl	8001e68 <HAL_GetTick>
 800b30c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 0308 	and.w	r3, r3, #8
 800b318:	2b08      	cmp	r3, #8
 800b31a:	d12f      	bne.n	800b37c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b31c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b324:	2200      	movs	r2, #0
 800b326:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f88e 	bl	800b44c <UART_WaitOnFlagUntilTimeout>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d022      	beq.n	800b37c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b33e:	e853 3f00 	ldrex	r3, [r3]
 800b342:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b346:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b34a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	461a      	mov	r2, r3
 800b352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b354:	647b      	str	r3, [r7, #68]	@ 0x44
 800b356:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b358:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b35a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b35c:	e841 2300 	strex	r3, r2, [r1]
 800b360:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1e6      	bne.n	800b336 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2220      	movs	r2, #32
 800b36c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b378:	2303      	movs	r3, #3
 800b37a:	e063      	b.n	800b444 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f003 0304 	and.w	r3, r3, #4
 800b386:	2b04      	cmp	r3, #4
 800b388:	d149      	bne.n	800b41e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b38a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b392:	2200      	movs	r2, #0
 800b394:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f857 	bl	800b44c <UART_WaitOnFlagUntilTimeout>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d03c      	beq.n	800b41e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ac:	e853 3f00 	ldrex	r3, [r3]
 800b3b0:	623b      	str	r3, [r7, #32]
   return(result);
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3ca:	e841 2300 	strex	r3, r2, [r1]
 800b3ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1e6      	bne.n	800b3a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	3308      	adds	r3, #8
 800b3dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	e853 3f00 	ldrex	r3, [r3]
 800b3e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f023 0301 	bic.w	r3, r3, #1
 800b3ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	3308      	adds	r3, #8
 800b3f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3f6:	61fa      	str	r2, [r7, #28]
 800b3f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fa:	69b9      	ldr	r1, [r7, #24]
 800b3fc:	69fa      	ldr	r2, [r7, #28]
 800b3fe:	e841 2300 	strex	r3, r2, [r1]
 800b402:	617b      	str	r3, [r7, #20]
   return(result);
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1e5      	bne.n	800b3d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2220      	movs	r2, #32
 800b40e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b41a:	2303      	movs	r3, #3
 800b41c:	e012      	b.n	800b444 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2220      	movs	r2, #32
 800b422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2220      	movs	r2, #32
 800b42a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b442:	2300      	movs	r3, #0
}
 800b444:	4618      	mov	r0, r3
 800b446:	3758      	adds	r7, #88	@ 0x58
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	603b      	str	r3, [r7, #0]
 800b458:	4613      	mov	r3, r2
 800b45a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b45c:	e04f      	b.n	800b4fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b464:	d04b      	beq.n	800b4fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b466:	f7f6 fcff 	bl	8001e68 <HAL_GetTick>
 800b46a:	4602      	mov	r2, r0
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	69ba      	ldr	r2, [r7, #24]
 800b472:	429a      	cmp	r2, r3
 800b474:	d302      	bcc.n	800b47c <UART_WaitOnFlagUntilTimeout+0x30>
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d101      	bne.n	800b480 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e04e      	b.n	800b51e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f003 0304 	and.w	r3, r3, #4
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d037      	beq.n	800b4fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	2b80      	cmp	r3, #128	@ 0x80
 800b492:	d034      	beq.n	800b4fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	2b40      	cmp	r3, #64	@ 0x40
 800b498:	d031      	beq.n	800b4fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	69db      	ldr	r3, [r3, #28]
 800b4a0:	f003 0308 	and.w	r3, r3, #8
 800b4a4:	2b08      	cmp	r3, #8
 800b4a6:	d110      	bne.n	800b4ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2208      	movs	r2, #8
 800b4ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f000 f838 	bl	800b526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2208      	movs	r2, #8
 800b4ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e029      	b.n	800b51e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	69db      	ldr	r3, [r3, #28]
 800b4d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4d8:	d111      	bne.n	800b4fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 f81e 	bl	800b526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2220      	movs	r2, #32
 800b4ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e00f      	b.n	800b51e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	69da      	ldr	r2, [r3, #28]
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	4013      	ands	r3, r2
 800b508:	68ba      	ldr	r2, [r7, #8]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	bf0c      	ite	eq
 800b50e:	2301      	moveq	r3, #1
 800b510:	2300      	movne	r3, #0
 800b512:	b2db      	uxtb	r3, r3
 800b514:	461a      	mov	r2, r3
 800b516:	79fb      	ldrb	r3, [r7, #7]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d0a0      	beq.n	800b45e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b526:	b480      	push	{r7}
 800b528:	b095      	sub	sp, #84	@ 0x54
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b536:	e853 3f00 	ldrex	r3, [r3]
 800b53a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b542:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	461a      	mov	r2, r3
 800b54a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b54c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b54e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b550:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b552:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b554:	e841 2300 	strex	r3, r2, [r1]
 800b558:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1e6      	bne.n	800b52e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3308      	adds	r3, #8
 800b566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b568:	6a3b      	ldr	r3, [r7, #32]
 800b56a:	e853 3f00 	ldrex	r3, [r3]
 800b56e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b576:	f023 0301 	bic.w	r3, r3, #1
 800b57a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	3308      	adds	r3, #8
 800b582:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b584:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b586:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b58a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b58c:	e841 2300 	strex	r3, r2, [r1]
 800b590:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1e3      	bne.n	800b560 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d118      	bne.n	800b5d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	e853 3f00 	ldrex	r3, [r3]
 800b5ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	f023 0310 	bic.w	r3, r3, #16
 800b5b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5be:	61bb      	str	r3, [r7, #24]
 800b5c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c2:	6979      	ldr	r1, [r7, #20]
 800b5c4:	69ba      	ldr	r2, [r7, #24]
 800b5c6:	e841 2300 	strex	r3, r2, [r1]
 800b5ca:	613b      	str	r3, [r7, #16]
   return(result);
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1e6      	bne.n	800b5a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2220      	movs	r2, #32
 800b5d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b5e6:	bf00      	nop
 800b5e8:	3754      	adds	r7, #84	@ 0x54
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr

0800b5f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b5f2:	b480      	push	{r7}
 800b5f4:	b085      	sub	sp, #20
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b600:	2b01      	cmp	r3, #1
 800b602:	d101      	bne.n	800b608 <HAL_UARTEx_DisableFifoMode+0x16>
 800b604:	2302      	movs	r3, #2
 800b606:	e027      	b.n	800b658 <HAL_UARTEx_DisableFifoMode+0x66>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2224      	movs	r2, #36	@ 0x24
 800b614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f022 0201 	bic.w	r2, r2, #1
 800b62e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b636:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2220      	movs	r2, #32
 800b64a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3714      	adds	r7, #20
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b674:	2b01      	cmp	r3, #1
 800b676:	d101      	bne.n	800b67c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b678:	2302      	movs	r3, #2
 800b67a:	e02d      	b.n	800b6d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2224      	movs	r2, #36	@ 0x24
 800b688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f022 0201 	bic.w	r2, r2, #1
 800b6a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	430a      	orrs	r2, r1
 800b6b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 f84f 	bl	800b75c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2220      	movs	r2, #32
 800b6ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6d6:	2300      	movs	r3, #0
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d101      	bne.n	800b6f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	e02d      	b.n	800b754 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2224      	movs	r2, #36	@ 0x24
 800b704:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f022 0201 	bic.w	r2, r2, #1
 800b71e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	683a      	ldr	r2, [r7, #0]
 800b730:	430a      	orrs	r2, r1
 800b732:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 f811 	bl	800b75c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2220      	movs	r2, #32
 800b746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d108      	bne.n	800b77e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2201      	movs	r2, #1
 800b778:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b77c:	e031      	b.n	800b7e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b77e:	2308      	movs	r3, #8
 800b780:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b782:	2308      	movs	r3, #8
 800b784:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	0e5b      	lsrs	r3, r3, #25
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	f003 0307 	and.w	r3, r3, #7
 800b794:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	0f5b      	lsrs	r3, r3, #29
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	f003 0307 	and.w	r3, r3, #7
 800b7a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7a6:	7bbb      	ldrb	r3, [r7, #14]
 800b7a8:	7b3a      	ldrb	r2, [r7, #12]
 800b7aa:	4911      	ldr	r1, [pc, #68]	@ (800b7f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b7ac:	5c8a      	ldrb	r2, [r1, r2]
 800b7ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b7b2:	7b3a      	ldrb	r2, [r7, #12]
 800b7b4:	490f      	ldr	r1, [pc, #60]	@ (800b7f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b7b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7c4:	7bfb      	ldrb	r3, [r7, #15]
 800b7c6:	7b7a      	ldrb	r2, [r7, #13]
 800b7c8:	4909      	ldr	r1, [pc, #36]	@ (800b7f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b7ca:	5c8a      	ldrb	r2, [r1, r2]
 800b7cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b7d0:	7b7a      	ldrb	r2, [r7, #13]
 800b7d2:	4908      	ldr	r1, [pc, #32]	@ (800b7f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b7d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b7e2:	bf00      	nop
 800b7e4:	3714      	adds	r7, #20
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	0801087c 	.word	0x0801087c
 800b7f4:	08010884 	.word	0x08010884

0800b7f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b804:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b810:	f043 0201 	orr.w	r2, r3, #1
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	370c      	adds	r7, #12
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr

0800b826 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b826:	b084      	sub	sp, #16
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	f107 001c 	add.w	r0, r7, #28
 800b834:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d101      	bne.n	800b842 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e008      	b.n	800b854 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7ff ffd8 	bl	800b7f8 <USB_CoreReset>
 800b848:	4603      	mov	r3, r0
 800b84a:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800b852:	7bfb      	ldrb	r3, [r7, #15]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b85e:	b004      	add	sp, #16
 800b860:	4770      	bx	lr

0800b862 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b862:	b480      	push	{r7}
 800b864:	b085      	sub	sp, #20
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b870:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b874:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3714      	adds	r7, #20
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr

0800b88a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b88a:	b480      	push	{r7}
 800b88c:	b085      	sub	sp, #20
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b892:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b896:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	43db      	mvns	r3, r3
 800b8a0:	401a      	ands	r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3714      	adds	r7, #20
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	460b      	mov	r3, r1
 800b8be:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800b8c0:	78fb      	ldrb	r3, [r7, #3]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d106      	bne.n	800b8d4 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	641a      	str	r2, [r3, #64]	@ 0x40
 800b8d2:	e00b      	b.n	800b8ec <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800b8d4:	78fb      	ldrb	r3, [r7, #3]
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d106      	bne.n	800b8e8 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	641a      	str	r2, [r3, #64]	@ 0x40
 800b8e6:	e001      	b.n	800b8ec <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e000      	b.n	800b8ee <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	370c      	adds	r7, #12
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	f107 001c 	add.w	r0, r7, #28
 800b908:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b916:	f023 0201 	bic.w	r2, r3, #1
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800b91e:	2100      	movs	r1, #0
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7ff ffc7 	bl	800b8b4 <USB_SetCurrentMode>
 800b926:	4603      	mov	r3, r0
 800b928:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800b930:	7bfb      	ldrb	r3, [r7, #15]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b93c:	b004      	add	sp, #16
 800b93e:	4770      	bx	lr

0800b940 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b940:	b480      	push	{r7}
 800b942:	b09f      	sub	sp, #124	@ 0x7c
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b94a:	2300      	movs	r3, #0
 800b94c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4413      	add	r3, r2
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	4ba0      	ldr	r3, [pc, #640]	@ (800bbe0 <USB_ActivateEndpoint+0x2a0>)
 800b95e:	4013      	ands	r3, r2
 800b960:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	78db      	ldrb	r3, [r3, #3]
 800b966:	2b03      	cmp	r3, #3
 800b968:	d819      	bhi.n	800b99e <USB_ActivateEndpoint+0x5e>
 800b96a:	a201      	add	r2, pc, #4	@ (adr r2, 800b970 <USB_ActivateEndpoint+0x30>)
 800b96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b970:	0800b981 	.word	0x0800b981
 800b974:	0800b995 	.word	0x0800b995
 800b978:	0800b9a7 	.word	0x0800b9a7
 800b97c:	0800b98b 	.word	0x0800b98b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b980:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b982:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b986:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b988:	e00e      	b.n	800b9a8 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b98a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b98c:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b990:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b992:	e009      	b.n	800b9a8 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b994:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b99a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b99c:	e004      	b.n	800b9a8 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800b9a4:	e000      	b.n	800b9a8 <USB_ActivateEndpoint+0x68>
      break;
 800b9a6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	441a      	add	r2, r3
 800b9b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b9b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9bc:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4413      	add	r3, r2
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	4b86      	ldr	r3, [pc, #536]	@ (800bbe4 <USB_ActivateEndpoint+0x2a4>)
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	683a      	ldr	r2, [r7, #0]
 800b9d0:	7812      	ldrb	r2, [r2, #0]
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	441a      	add	r2, r3
 800b9e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9ea:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	7b1b      	ldrb	r3, [r3, #12]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f040 8177 	bne.w	800bce4 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	785b      	ldrb	r3, [r3, #1]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d079      	beq.n	800baf2 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	00db      	lsls	r3, r3, #3
 800ba04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	00db      	lsls	r3, r3, #3
 800ba14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba1c:	0c12      	lsrs	r2, r2, #16
 800ba1e:	0412      	lsls	r2, r2, #16
 800ba20:	601a      	str	r2, [r3, #0]
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	00db      	lsls	r3, r3, #3
 800ba28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba30:	6819      	ldr	r1, [r3, #0]
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	88db      	ldrh	r3, [r3, #6]
 800ba36:	089b      	lsrs	r3, r3, #2
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	009a      	lsls	r2, r3, #2
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	00db      	lsls	r3, r3, #3
 800ba42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba4a:	430a      	orrs	r2, r1
 800ba4c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4413      	add	r3, r2
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	61bb      	str	r3, [r7, #24]
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d013      	beq.n	800ba8e <USB_ActivateEndpoint+0x14e>
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	4413      	add	r3, r2
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	4b5c      	ldr	r3, [pc, #368]	@ (800bbe4 <USB_ActivateEndpoint+0x2a4>)
 800ba74:	4013      	ands	r3, r2
 800ba76:	617b      	str	r3, [r7, #20]
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	441a      	add	r2, r3
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ba8c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	78db      	ldrb	r3, [r3, #3]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d018      	beq.n	800bac8 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	4413      	add	r3, r2
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	4b51      	ldr	r3, [pc, #324]	@ (800bbe8 <USB_ActivateEndpoint+0x2a8>)
 800baa4:	4013      	ands	r3, r2
 800baa6:	60fb      	str	r3, [r7, #12]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f083 0320 	eor.w	r3, r3, #32
 800baae:	60fb      	str	r3, [r7, #12]
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	441a      	add	r2, r3
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bac4:	6013      	str	r3, [r2, #0]
 800bac6:	e28c      	b.n	800bfe2 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4413      	add	r3, r2
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	4b44      	ldr	r3, [pc, #272]	@ (800bbe8 <USB_ActivateEndpoint+0x2a8>)
 800bad6:	4013      	ands	r3, r2
 800bad8:	613b      	str	r3, [r7, #16]
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	441a      	add	r2, r3
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800baea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baee:	6013      	str	r3, [r2, #0]
 800baf0:	e277      	b.n	800bfe2 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	00db      	lsls	r3, r3, #3
 800baf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bafc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb00:	685a      	ldr	r2, [r3, #4]
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	00db      	lsls	r3, r3, #3
 800bb08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb10:	0c12      	lsrs	r2, r2, #16
 800bb12:	0412      	lsls	r2, r2, #16
 800bb14:	605a      	str	r2, [r3, #4]
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	00db      	lsls	r3, r3, #3
 800bb1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb24:	6859      	ldr	r1, [r3, #4]
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	88db      	ldrh	r3, [r3, #6]
 800bb2a:	089b      	lsrs	r3, r3, #2
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	009a      	lsls	r2, r3, #2
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	00db      	lsls	r3, r3, #3
 800bb36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb3e:	430a      	orrs	r2, r1
 800bb40:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	00db      	lsls	r3, r3, #3
 800bb48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb50:	685a      	ldr	r2, [r3, #4]
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	00db      	lsls	r3, r3, #3
 800bb58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb60:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800bb64:	605a      	str	r2, [r3, #4]
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d112      	bne.n	800bb94 <USB_ActivateEndpoint+0x254>
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	00db      	lsls	r3, r3, #3
 800bb74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb7c:	685a      	ldr	r2, [r3, #4]
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	00db      	lsls	r3, r3, #3
 800bb84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb8c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bb90:	605a      	str	r2, [r3, #4]
 800bb92:	e04d      	b.n	800bc30 <USB_ActivateEndpoint+0x2f0>
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	2b3e      	cmp	r3, #62	@ 0x3e
 800bb9a:	d827      	bhi.n	800bbec <USB_ActivateEndpoint+0x2ac>
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	085b      	lsrs	r3, r3, #1
 800bba2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	691b      	ldr	r3, [r3, #16]
 800bba8:	f003 0301 	and.w	r3, r3, #1
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <USB_ActivateEndpoint+0x276>
 800bbb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	00db      	lsls	r3, r3, #3
 800bbbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bbc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bbc4:	6859      	ldr	r1, [r3, #4]
 800bbc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbc8:	069a      	lsls	r2, r3, #26
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	00db      	lsls	r3, r3, #3
 800bbd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bbd4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bbd8:	430a      	orrs	r2, r1
 800bbda:	605a      	str	r2, [r3, #4]
 800bbdc:	e028      	b.n	800bc30 <USB_ActivateEndpoint+0x2f0>
 800bbde:	bf00      	nop
 800bbe0:	07ff898f 	.word	0x07ff898f
 800bbe4:	07ff8f8f 	.word	0x07ff8f8f
 800bbe8:	07ff8fbf 	.word	0x07ff8fbf
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	691b      	ldr	r3, [r3, #16]
 800bbf0:	095b      	lsrs	r3, r3, #5
 800bbf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	f003 031f 	and.w	r3, r3, #31
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d102      	bne.n	800bc06 <USB_ActivateEndpoint+0x2c6>
 800bc00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc02:	3b01      	subs	r3, #1
 800bc04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	00db      	lsls	r3, r3, #3
 800bc0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bc10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bc14:	685a      	ldr	r2, [r3, #4]
 800bc16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc18:	069b      	lsls	r3, r3, #26
 800bc1a:	431a      	orrs	r2, r3
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	00db      	lsls	r3, r3, #3
 800bc22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bc26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bc2a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bc2e:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	4413      	add	r3, r2
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d013      	beq.n	800bc70 <USB_ActivateEndpoint+0x330>
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	4b9c      	ldr	r3, [pc, #624]	@ (800bec8 <USB_ActivateEndpoint+0x588>)
 800bc56:	4013      	ands	r3, r2
 800bc58:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	441a      	add	r2, r3
 800bc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bc6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc6e:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d11c      	bne.n	800bcb2 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	4413      	add	r3, r2
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	4b91      	ldr	r3, [pc, #580]	@ (800becc <USB_ActivateEndpoint+0x58c>)
 800bc86:	4013      	ands	r3, r2
 800bc88:	61fb      	str	r3, [r7, #28]
 800bc8a:	69fb      	ldr	r3, [r7, #28]
 800bc8c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bc90:	61fb      	str	r3, [r7, #28]
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bc98:	61fb      	str	r3, [r7, #28]
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	441a      	add	r2, r3
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	e197      	b.n	800bfe2 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	4413      	add	r3, r2
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	4b83      	ldr	r3, [pc, #524]	@ (800becc <USB_ActivateEndpoint+0x58c>)
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	623b      	str	r3, [r7, #32]
 800bcc4:	6a3b      	ldr	r3, [r7, #32]
 800bcc6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bcca:	623b      	str	r3, [r7, #32]
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	441a      	add	r2, r3
 800bcd6:	6a3b      	ldr	r3, [r7, #32]
 800bcd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bce0:	6013      	str	r3, [r2, #0]
 800bce2:	e17e      	b.n	800bfe2 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	78db      	ldrb	r3, [r3, #3]
 800bce8:	2b02      	cmp	r3, #2
 800bcea:	d114      	bne.n	800bd16 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	4413      	add	r3, r2
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	4b73      	ldr	r3, [pc, #460]	@ (800bec8 <USB_ActivateEndpoint+0x588>)
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	663b      	str	r3, [r7, #96]	@ 0x60
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	441a      	add	r2, r3
 800bd08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd0a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800bd0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd12:	6013      	str	r3, [r2, #0]
 800bd14:	e013      	b.n	800bd3e <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4413      	add	r3, r2
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	4b6b      	ldr	r3, [pc, #428]	@ (800bed0 <USB_ActivateEndpoint+0x590>)
 800bd24:	4013      	ands	r3, r2
 800bd26:	667b      	str	r3, [r7, #100]	@ 0x64
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	441a      	add	r2, r3
 800bd32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd3c:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	00db      	lsls	r3, r3, #3
 800bd44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	00db      	lsls	r3, r3, #3
 800bd54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd5c:	0c12      	lsrs	r2, r2, #16
 800bd5e:	0412      	lsls	r2, r2, #16
 800bd60:	601a      	str	r2, [r3, #0]
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	00db      	lsls	r3, r3, #3
 800bd68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd70:	6819      	ldr	r1, [r3, #0]
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	891b      	ldrh	r3, [r3, #8]
 800bd76:	089b      	lsrs	r3, r3, #2
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	009a      	lsls	r2, r3, #2
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	00db      	lsls	r3, r3, #3
 800bd82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd8a:	430a      	orrs	r2, r1
 800bd8c:	601a      	str	r2, [r3, #0]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	00db      	lsls	r3, r3, #3
 800bd94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd9c:	685a      	ldr	r2, [r3, #4]
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	00db      	lsls	r3, r3, #3
 800bda4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bda8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bdac:	0c12      	lsrs	r2, r2, #16
 800bdae:	0412      	lsls	r2, r2, #16
 800bdb0:	605a      	str	r2, [r3, #4]
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	00db      	lsls	r3, r3, #3
 800bdb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bdc0:	6859      	ldr	r1, [r3, #4]
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	895b      	ldrh	r3, [r3, #10]
 800bdc6:	089b      	lsrs	r3, r3, #2
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	009a      	lsls	r2, r3, #2
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	00db      	lsls	r3, r3, #3
 800bdd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdd6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bdda:	430a      	orrs	r2, r1
 800bddc:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	785b      	ldrb	r3, [r3, #1]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d178      	bne.n	800bed8 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4413      	add	r3, r2
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	643b      	str	r3, [r7, #64]	@ 0x40
 800bdf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d013      	beq.n	800be26 <USB_ActivateEndpoint+0x4e6>
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	4413      	add	r3, r2
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	4b2f      	ldr	r3, [pc, #188]	@ (800bec8 <USB_ActivateEndpoint+0x588>)
 800be0c:	4013      	ands	r3, r2
 800be0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	441a      	add	r2, r3
 800be1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800be20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be24:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	4413      	add	r3, r2
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	63bb      	str	r3, [r7, #56]	@ 0x38
 800be34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d013      	beq.n	800be66 <USB_ActivateEndpoint+0x526>
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	4413      	add	r3, r2
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	4b1f      	ldr	r3, [pc, #124]	@ (800bec8 <USB_ActivateEndpoint+0x588>)
 800be4c:	4013      	ands	r3, r2
 800be4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	441a      	add	r2, r3
 800be5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800be64:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4413      	add	r3, r2
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	4b16      	ldr	r3, [pc, #88]	@ (800becc <USB_ActivateEndpoint+0x58c>)
 800be74:	4013      	ands	r3, r2
 800be76:	633b      	str	r3, [r7, #48]	@ 0x30
 800be78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be7a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800be7e:	633b      	str	r3, [r7, #48]	@ 0x30
 800be80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be82:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800be86:	633b      	str	r3, [r7, #48]	@ 0x30
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	441a      	add	r2, r3
 800be92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be9c:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	4413      	add	r3, r2
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	4b0a      	ldr	r3, [pc, #40]	@ (800bed4 <USB_ActivateEndpoint+0x594>)
 800beac:	4013      	ands	r3, r2
 800beae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	441a      	add	r2, r3
 800beba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bebc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bec4:	6013      	str	r3, [r2, #0]
 800bec6:	e08c      	b.n	800bfe2 <USB_ActivateEndpoint+0x6a2>
 800bec8:	07ff8f8f 	.word	0x07ff8f8f
 800becc:	07ffbf8f 	.word	0x07ffbf8f
 800bed0:	07ff8e8f 	.word	0x07ff8e8f
 800bed4:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4413      	add	r3, r2
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bee6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bee8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800beec:	2b00      	cmp	r3, #0
 800beee:	d013      	beq.n	800bf18 <USB_ActivateEndpoint+0x5d8>
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	4413      	add	r3, r2
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	4b3d      	ldr	r3, [pc, #244]	@ (800bff4 <USB_ActivateEndpoint+0x6b4>)
 800befe:	4013      	ands	r3, r2
 800bf00:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	441a      	add	r2, r3
 800bf0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bf12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf16:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	4413      	add	r3, r2
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	657b      	str	r3, [r7, #84]	@ 0x54
 800bf26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d013      	beq.n	800bf58 <USB_ActivateEndpoint+0x618>
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	4413      	add	r3, r2
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	4b2d      	ldr	r3, [pc, #180]	@ (800bff4 <USB_ActivateEndpoint+0x6b4>)
 800bf3e:	4013      	ands	r3, r2
 800bf40:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	441a      	add	r2, r3
 800bf4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf52:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bf56:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	78db      	ldrb	r3, [r3, #3]
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d018      	beq.n	800bf92 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4413      	add	r3, r2
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	4b22      	ldr	r3, [pc, #136]	@ (800bff8 <USB_ActivateEndpoint+0x6b8>)
 800bf6e:	4013      	ands	r3, r2
 800bf70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf74:	f083 0320 	eor.w	r3, r3, #32
 800bf78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	441a      	add	r2, r3
 800bf84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf8e:	6013      	str	r3, [r2, #0]
 800bf90:	e013      	b.n	800bfba <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	4413      	add	r3, r2
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	4b16      	ldr	r3, [pc, #88]	@ (800bff8 <USB_ActivateEndpoint+0x6b8>)
 800bfa0:	4013      	ands	r3, r2
 800bfa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	441a      	add	r2, r3
 800bfae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfb8:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	4413      	add	r3, r2
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	4b0d      	ldr	r3, [pc, #52]	@ (800bffc <USB_ActivateEndpoint+0x6bc>)
 800bfc8:	4013      	ands	r3, r2
 800bfca:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	441a      	add	r2, r3
 800bfd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfe0:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800bfe2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	377c      	adds	r7, #124	@ 0x7c
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	07ff8f8f 	.word	0x07ff8f8f
 800bff8:	07ff8fbf 	.word	0x07ff8fbf
 800bffc:	07ffbf8f 	.word	0x07ffbf8f

0800c000 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c000:	b480      	push	{r7}
 800c002:	b097      	sub	sp, #92	@ 0x5c
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	7b1b      	ldrb	r3, [r3, #12]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d16d      	bne.n	800c0ee <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	785b      	ldrb	r3, [r3, #1]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d034      	beq.n	800c084 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	4413      	add	r3, r2
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	613b      	str	r3, [r7, #16]
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d013      	beq.n	800c05a <USB_DeactivateEndpoint+0x5a>
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	4413      	add	r3, r2
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	4b6d      	ldr	r3, [pc, #436]	@ (800c1f4 <USB_DeactivateEndpoint+0x1f4>)
 800c040:	4013      	ands	r3, r2
 800c042:	60fb      	str	r3, [r7, #12]
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	441a      	add	r2, r3
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c054:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c058:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4413      	add	r3, r2
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	4b64      	ldr	r3, [pc, #400]	@ (800c1f8 <USB_DeactivateEndpoint+0x1f8>)
 800c068:	4013      	ands	r3, r2
 800c06a:	60bb      	str	r3, [r7, #8]
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	441a      	add	r2, r3
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c07c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c080:	6013      	str	r3, [r2, #0]
 800c082:	e139      	b.n	800c2f8 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	4413      	add	r3, r2
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	61fb      	str	r3, [r7, #28]
 800c092:	69fb      	ldr	r3, [r7, #28]
 800c094:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d013      	beq.n	800c0c4 <USB_DeactivateEndpoint+0xc4>
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4413      	add	r3, r2
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	4b52      	ldr	r3, [pc, #328]	@ (800c1f4 <USB_DeactivateEndpoint+0x1f4>)
 800c0aa:	4013      	ands	r3, r2
 800c0ac:	61bb      	str	r3, [r7, #24]
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	441a      	add	r2, r3
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c0be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0c2:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	4413      	add	r3, r2
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	4b4a      	ldr	r3, [pc, #296]	@ (800c1fc <USB_DeactivateEndpoint+0x1fc>)
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	617b      	str	r3, [r7, #20]
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	441a      	add	r2, r3
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0ea:	6013      	str	r3, [r2, #0]
 800c0ec:	e104      	b.n	800c2f8 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	785b      	ldrb	r3, [r3, #1]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	f040 8084 	bne.w	800c200 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	4413      	add	r3, r2
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c108:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d013      	beq.n	800c138 <USB_DeactivateEndpoint+0x138>
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4413      	add	r3, r2
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	4b35      	ldr	r3, [pc, #212]	@ (800c1f4 <USB_DeactivateEndpoint+0x1f4>)
 800c11e:	4013      	ands	r3, r2
 800c120:	637b      	str	r3, [r7, #52]	@ 0x34
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	441a      	add	r2, r3
 800c12c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c12e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c136:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	4413      	add	r3, r2
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	633b      	str	r3, [r7, #48]	@ 0x30
 800c146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d013      	beq.n	800c178 <USB_DeactivateEndpoint+0x178>
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	4413      	add	r3, r2
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	4b25      	ldr	r3, [pc, #148]	@ (800c1f4 <USB_DeactivateEndpoint+0x1f4>)
 800c15e:	4013      	ands	r3, r2
 800c160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	441a      	add	r2, r3
 800c16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c16e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c172:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c176:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	4413      	add	r3, r2
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	4b1b      	ldr	r3, [pc, #108]	@ (800c1f4 <USB_DeactivateEndpoint+0x1f4>)
 800c186:	4013      	ands	r3, r2
 800c188:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	441a      	add	r2, r3
 800c194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c19a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c19e:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	4413      	add	r3, r2
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	4b13      	ldr	r3, [pc, #76]	@ (800c1fc <USB_DeactivateEndpoint+0x1fc>)
 800c1ae:	4013      	ands	r3, r2
 800c1b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	441a      	add	r2, r3
 800c1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1c6:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4413      	add	r3, r2
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	4b08      	ldr	r3, [pc, #32]	@ (800c1f8 <USB_DeactivateEndpoint+0x1f8>)
 800c1d6:	4013      	ands	r3, r2
 800c1d8:	623b      	str	r3, [r7, #32]
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	441a      	add	r2, r3
 800c1e4:	6a3b      	ldr	r3, [r7, #32]
 800c1e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1ee:	6013      	str	r3, [r2, #0]
 800c1f0:	e082      	b.n	800c2f8 <USB_DeactivateEndpoint+0x2f8>
 800c1f2:	bf00      	nop
 800c1f4:	07ff8f8f 	.word	0x07ff8f8f
 800c1f8:	07ff8fbf 	.word	0x07ff8fbf
 800c1fc:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	4413      	add	r3, r2
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	657b      	str	r3, [r7, #84]	@ 0x54
 800c20e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c214:	2b00      	cmp	r3, #0
 800c216:	d013      	beq.n	800c240 <USB_DeactivateEndpoint+0x240>
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	4413      	add	r3, r2
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	4b38      	ldr	r3, [pc, #224]	@ (800c308 <USB_DeactivateEndpoint+0x308>)
 800c226:	4013      	ands	r3, r2
 800c228:	653b      	str	r3, [r7, #80]	@ 0x50
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	441a      	add	r2, r3
 800c234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c236:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c23e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c24e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c254:	2b00      	cmp	r3, #0
 800c256:	d013      	beq.n	800c280 <USB_DeactivateEndpoint+0x280>
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	4413      	add	r3, r2
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	4b28      	ldr	r3, [pc, #160]	@ (800c308 <USB_DeactivateEndpoint+0x308>)
 800c266:	4013      	ands	r3, r2
 800c268:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	441a      	add	r2, r3
 800c274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c276:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c27a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c27e:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4413      	add	r3, r2
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	4b1e      	ldr	r3, [pc, #120]	@ (800c308 <USB_DeactivateEndpoint+0x308>)
 800c28e:	4013      	ands	r3, r2
 800c290:	647b      	str	r3, [r7, #68]	@ 0x44
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	441a      	add	r2, r3
 800c29c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c29e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c2a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2a6:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	4b15      	ldr	r3, [pc, #84]	@ (800c30c <USB_DeactivateEndpoint+0x30c>)
 800c2b6:	4013      	ands	r3, r2
 800c2b8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	441a      	add	r2, r3
 800c2c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2ce:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	4413      	add	r3, r2
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	4b0c      	ldr	r3, [pc, #48]	@ (800c310 <USB_DeactivateEndpoint+0x310>)
 800c2de:	4013      	ands	r3, r2
 800c2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	441a      	add	r2, r3
 800c2ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2f6:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c2f8:	2300      	movs	r3, #0
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	375c      	adds	r7, #92	@ 0x5c
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	07ff8f8f 	.word	0x07ff8f8f
 800c30c:	07ff8fbf 	.word	0x07ff8fbf
 800c310:	07ffbf8f 	.word	0x07ffbf8f

0800c314 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b096      	sub	sp, #88	@ 0x58
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	785b      	ldrb	r3, [r3, #1]
 800c322:	2b01      	cmp	r3, #1
 800c324:	f040 84ed 	bne.w	800cd02 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	699a      	ldr	r2, [r3, #24]
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	691b      	ldr	r3, [r3, #16]
 800c330:	429a      	cmp	r2, r3
 800c332:	d903      	bls.n	800c33c <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	691b      	ldr	r3, [r3, #16]
 800c338:	657b      	str	r3, [r7, #84]	@ 0x54
 800c33a:	e002      	b.n	800c342 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	699b      	ldr	r3, [r3, #24]
 800c340:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	7b1b      	ldrb	r3, [r3, #12]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d12e      	bne.n	800c3a8 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	6959      	ldr	r1, [r3, #20]
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	88da      	ldrh	r2, [r3, #6]
 800c352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c354:	b29b      	uxth	r3, r3
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f001 f963 	bl	800d622 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	00db      	lsls	r3, r3, #3
 800c362:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c366:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	00db      	lsls	r3, r3, #3
 800c372:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c376:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c37a:	b292      	uxth	r2, r2
 800c37c:	601a      	str	r2, [r3, #0]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	00db      	lsls	r3, r3, #3
 800c384:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c388:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c38c:	6819      	ldr	r1, [r3, #0]
 800c38e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c390:	041a      	lsls	r2, r3, #16
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	00db      	lsls	r3, r3, #3
 800c398:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c39c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3a0:	430a      	orrs	r2, r1
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	f000 bc90 	b.w	800ccc8 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	78db      	ldrb	r3, [r3, #3]
 800c3ac:	2b02      	cmp	r3, #2
 800c3ae:	f040 8332 	bne.w	800ca16 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	6a1a      	ldr	r2, [r3, #32]
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	691b      	ldr	r3, [r3, #16]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	f240 82e4 	bls.w	800c988 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	4413      	add	r3, r2
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	4ba4      	ldr	r3, [pc, #656]	@ (800c660 <USB_EPStartXfer+0x34c>)
 800c3ce:	4013      	ands	r3, r2
 800c3d0:	613b      	str	r3, [r7, #16]
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	441a      	add	r2, r3
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c3e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3e6:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	6a1a      	ldr	r2, [r3, #32]
 800c3ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3ee:	1ad2      	subs	r2, r2, r3
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c404:	2b00      	cmp	r3, #0
 800c406:	f000 8161 	beq.w	800c6cc <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	785b      	ldrb	r3, [r3, #1]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d16a      	bne.n	800c4e8 <USB_EPStartXfer+0x1d4>
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	00db      	lsls	r3, r3, #3
 800c418:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c41c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c420:	685a      	ldr	r2, [r3, #4]
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	00db      	lsls	r3, r3, #3
 800c428:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c42c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c430:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c434:	605a      	str	r2, [r3, #4]
 800c436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d112      	bne.n	800c462 <USB_EPStartXfer+0x14e>
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	00db      	lsls	r3, r3, #3
 800c442:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c446:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	00db      	lsls	r3, r3, #3
 800c452:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c456:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c45a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c45e:	605a      	str	r2, [r3, #4]
 800c460:	e06a      	b.n	800c538 <USB_EPStartXfer+0x224>
 800c462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c464:	2b3e      	cmp	r3, #62	@ 0x3e
 800c466:	d81e      	bhi.n	800c4a6 <USB_EPStartXfer+0x192>
 800c468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c46a:	085b      	lsrs	r3, r3, #1
 800c46c:	653b      	str	r3, [r7, #80]	@ 0x50
 800c46e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c470:	f003 0301 	and.w	r3, r3, #1
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <USB_EPStartXfer+0x16a>
 800c478:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c47a:	3301      	adds	r3, #1
 800c47c:	653b      	str	r3, [r7, #80]	@ 0x50
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	00db      	lsls	r3, r3, #3
 800c484:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c488:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c48c:	6859      	ldr	r1, [r3, #4]
 800c48e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c490:	069a      	lsls	r2, r3, #26
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	00db      	lsls	r3, r3, #3
 800c498:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c49c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4a0:	430a      	orrs	r2, r1
 800c4a2:	605a      	str	r2, [r3, #4]
 800c4a4:	e048      	b.n	800c538 <USB_EPStartXfer+0x224>
 800c4a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4a8:	095b      	lsrs	r3, r3, #5
 800c4aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800c4ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4ae:	f003 031f 	and.w	r3, r3, #31
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d102      	bne.n	800c4bc <USB_EPStartXfer+0x1a8>
 800c4b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	00db      	lsls	r3, r3, #3
 800c4c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4ca:	685a      	ldr	r2, [r3, #4]
 800c4cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4ce:	069b      	lsls	r3, r3, #26
 800c4d0:	431a      	orrs	r2, r3
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	00db      	lsls	r3, r3, #3
 800c4d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4e0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c4e4:	605a      	str	r2, [r3, #4]
 800c4e6:	e027      	b.n	800c538 <USB_EPStartXfer+0x224>
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	785b      	ldrb	r3, [r3, #1]
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d123      	bne.n	800c538 <USB_EPStartXfer+0x224>
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	00db      	lsls	r3, r3, #3
 800c4f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	00db      	lsls	r3, r3, #3
 800c506:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c50a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c50e:	b292      	uxth	r2, r2
 800c510:	605a      	str	r2, [r3, #4]
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	00db      	lsls	r3, r3, #3
 800c518:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c51c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c520:	6859      	ldr	r1, [r3, #4]
 800c522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c524:	041a      	lsls	r2, r3, #16
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	00db      	lsls	r3, r3, #3
 800c52c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c530:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c534:	430a      	orrs	r2, r1
 800c536:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	895b      	ldrh	r3, [r3, #10]
 800c53c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	6959      	ldr	r1, [r3, #20]
 800c542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c544:	b29b      	uxth	r3, r3
 800c546:	8b7a      	ldrh	r2, [r7, #26]
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f001 f86a 	bl	800d622 <USB_WritePMA>
            ep->xfer_buff += len;
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	695a      	ldr	r2, [r3, #20]
 800c552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c554:	441a      	add	r2, r3
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	6a1a      	ldr	r2, [r3, #32]
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	429a      	cmp	r2, r3
 800c564:	d906      	bls.n	800c574 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	6a1a      	ldr	r2, [r3, #32]
 800c56a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c56c:	1ad2      	subs	r2, r2, r3
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	621a      	str	r2, [r3, #32]
 800c572:	e005      	b.n	800c580 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	6a1b      	ldr	r3, [r3, #32]
 800c578:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	2200      	movs	r2, #0
 800c57e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	785b      	ldrb	r3, [r3, #1]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d16d      	bne.n	800c664 <USB_EPStartXfer+0x350>
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	00db      	lsls	r3, r3, #3
 800c58e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c592:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	00db      	lsls	r3, r3, #3
 800c59e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5a6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c5aa:	601a      	str	r2, [r3, #0]
 800c5ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d112      	bne.n	800c5d8 <USB_EPStartXfer+0x2c4>
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	00db      	lsls	r3, r3, #3
 800c5b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	00db      	lsls	r3, r3, #3
 800c5c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5d0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c5d4:	601a      	str	r2, [r3, #0]
 800c5d6:	e06d      	b.n	800c6b4 <USB_EPStartXfer+0x3a0>
 800c5d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5da:	2b3e      	cmp	r3, #62	@ 0x3e
 800c5dc:	d81e      	bhi.n	800c61c <USB_EPStartXfer+0x308>
 800c5de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5e0:	085b      	lsrs	r3, r3, #1
 800c5e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5e6:	f003 0301 	and.w	r3, r3, #1
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d002      	beq.n	800c5f4 <USB_EPStartXfer+0x2e0>
 800c5ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	00db      	lsls	r3, r3, #3
 800c5fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c602:	6819      	ldr	r1, [r3, #0]
 800c604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c606:	069a      	lsls	r2, r3, #26
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	00db      	lsls	r3, r3, #3
 800c60e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c612:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c616:	430a      	orrs	r2, r1
 800c618:	601a      	str	r2, [r3, #0]
 800c61a:	e04b      	b.n	800c6b4 <USB_EPStartXfer+0x3a0>
 800c61c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c61e:	095b      	lsrs	r3, r3, #5
 800c620:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c624:	f003 031f 	and.w	r3, r3, #31
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d102      	bne.n	800c632 <USB_EPStartXfer+0x31e>
 800c62c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c62e:	3b01      	subs	r3, #1
 800c630:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	00db      	lsls	r3, r3, #3
 800c638:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c63c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c644:	069b      	lsls	r3, r3, #26
 800c646:	431a      	orrs	r2, r3
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	00db      	lsls	r3, r3, #3
 800c64e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c652:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c656:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c65a:	601a      	str	r2, [r3, #0]
 800c65c:	e02a      	b.n	800c6b4 <USB_EPStartXfer+0x3a0>
 800c65e:	bf00      	nop
 800c660:	07ff8f8f 	.word	0x07ff8f8f
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	785b      	ldrb	r3, [r3, #1]
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d123      	bne.n	800c6b4 <USB_EPStartXfer+0x3a0>
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	00db      	lsls	r3, r3, #3
 800c672:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c676:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	00db      	lsls	r3, r3, #3
 800c682:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c686:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c68a:	b292      	uxth	r2, r2
 800c68c:	601a      	str	r2, [r3, #0]
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	00db      	lsls	r3, r3, #3
 800c694:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c698:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c69c:	6819      	ldr	r1, [r3, #0]
 800c69e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6a0:	041a      	lsls	r2, r3, #16
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	00db      	lsls	r3, r3, #3
 800c6a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6b0:	430a      	orrs	r2, r1
 800c6b2:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	891b      	ldrh	r3, [r3, #8]
 800c6b8:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	6959      	ldr	r1, [r3, #20]
 800c6be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	8b7a      	ldrh	r2, [r7, #26]
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 ffac 	bl	800d622 <USB_WritePMA>
 800c6ca:	e2fd      	b.n	800ccc8 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	785b      	ldrb	r3, [r3, #1]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d16a      	bne.n	800c7aa <USB_EPStartXfer+0x496>
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	00db      	lsls	r3, r3, #3
 800c6da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	00db      	lsls	r3, r3, #3
 800c6ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6f2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c6f6:	601a      	str	r2, [r3, #0]
 800c6f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d112      	bne.n	800c724 <USB_EPStartXfer+0x410>
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	00db      	lsls	r3, r3, #3
 800c704:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c708:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	00db      	lsls	r3, r3, #3
 800c714:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c718:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c71c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c720:	601a      	str	r2, [r3, #0]
 800c722:	e06a      	b.n	800c7fa <USB_EPStartXfer+0x4e6>
 800c724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c726:	2b3e      	cmp	r3, #62	@ 0x3e
 800c728:	d81e      	bhi.n	800c768 <USB_EPStartXfer+0x454>
 800c72a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c72c:	085b      	lsrs	r3, r3, #1
 800c72e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c732:	f003 0301 	and.w	r3, r3, #1
 800c736:	2b00      	cmp	r3, #0
 800c738:	d002      	beq.n	800c740 <USB_EPStartXfer+0x42c>
 800c73a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c73c:	3301      	adds	r3, #1
 800c73e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	00db      	lsls	r3, r3, #3
 800c746:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c74a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c74e:	6819      	ldr	r1, [r3, #0]
 800c750:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c752:	069a      	lsls	r2, r3, #26
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	00db      	lsls	r3, r3, #3
 800c75a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c75e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c762:	430a      	orrs	r2, r1
 800c764:	601a      	str	r2, [r3, #0]
 800c766:	e048      	b.n	800c7fa <USB_EPStartXfer+0x4e6>
 800c768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c76a:	095b      	lsrs	r3, r3, #5
 800c76c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c76e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c770:	f003 031f 	and.w	r3, r3, #31
 800c774:	2b00      	cmp	r3, #0
 800c776:	d102      	bne.n	800c77e <USB_EPStartXfer+0x46a>
 800c778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c77a:	3b01      	subs	r3, #1
 800c77c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	00db      	lsls	r3, r3, #3
 800c784:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c788:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c790:	069b      	lsls	r3, r3, #26
 800c792:	431a      	orrs	r2, r3
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	00db      	lsls	r3, r3, #3
 800c79a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c79e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c7a6:	601a      	str	r2, [r3, #0]
 800c7a8:	e027      	b.n	800c7fa <USB_EPStartXfer+0x4e6>
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	785b      	ldrb	r3, [r3, #1]
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d123      	bne.n	800c7fa <USB_EPStartXfer+0x4e6>
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	00db      	lsls	r3, r3, #3
 800c7b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	00db      	lsls	r3, r3, #3
 800c7c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7d0:	b292      	uxth	r2, r2
 800c7d2:	601a      	str	r2, [r3, #0]
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	00db      	lsls	r3, r3, #3
 800c7da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7e2:	6819      	ldr	r1, [r3, #0]
 800c7e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7e6:	041a      	lsls	r2, r3, #16
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	00db      	lsls	r3, r3, #3
 800c7ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7f6:	430a      	orrs	r2, r1
 800c7f8:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	891b      	ldrh	r3, [r3, #8]
 800c7fe:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	6959      	ldr	r1, [r3, #20]
 800c804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c806:	b29b      	uxth	r3, r3
 800c808:	8b7a      	ldrh	r2, [r7, #26]
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 ff09 	bl	800d622 <USB_WritePMA>
            ep->xfer_buff += len;
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	695a      	ldr	r2, [r3, #20]
 800c814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c816:	441a      	add	r2, r3
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	6a1a      	ldr	r2, [r3, #32]
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	429a      	cmp	r2, r3
 800c826:	d906      	bls.n	800c836 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	6a1a      	ldr	r2, [r3, #32]
 800c82c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c82e:	1ad2      	subs	r2, r2, r3
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	621a      	str	r2, [r3, #32]
 800c834:	e005      	b.n	800c842 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	2200      	movs	r2, #0
 800c840:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	785b      	ldrb	r3, [r3, #1]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d16a      	bne.n	800c920 <USB_EPStartXfer+0x60c>
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	00db      	lsls	r3, r3, #3
 800c850:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c854:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c858:	685a      	ldr	r2, [r3, #4]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	00db      	lsls	r3, r3, #3
 800c860:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c864:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c868:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c86c:	605a      	str	r2, [r3, #4]
 800c86e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c870:	2b00      	cmp	r3, #0
 800c872:	d112      	bne.n	800c89a <USB_EPStartXfer+0x586>
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	00db      	lsls	r3, r3, #3
 800c87a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c87e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c882:	685a      	ldr	r2, [r3, #4]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	00db      	lsls	r3, r3, #3
 800c88a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c88e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c892:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c896:	605a      	str	r2, [r3, #4]
 800c898:	e06a      	b.n	800c970 <USB_EPStartXfer+0x65c>
 800c89a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c89c:	2b3e      	cmp	r3, #62	@ 0x3e
 800c89e:	d81e      	bhi.n	800c8de <USB_EPStartXfer+0x5ca>
 800c8a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8a2:	085b      	lsrs	r3, r3, #1
 800c8a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8a8:	f003 0301 	and.w	r3, r3, #1
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d002      	beq.n	800c8b6 <USB_EPStartXfer+0x5a2>
 800c8b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	00db      	lsls	r3, r3, #3
 800c8bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8c4:	6859      	ldr	r1, [r3, #4]
 800c8c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8c8:	069a      	lsls	r2, r3, #26
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	00db      	lsls	r3, r3, #3
 800c8d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8d8:	430a      	orrs	r2, r1
 800c8da:	605a      	str	r2, [r3, #4]
 800c8dc:	e048      	b.n	800c970 <USB_EPStartXfer+0x65c>
 800c8de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8e0:	095b      	lsrs	r3, r3, #5
 800c8e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8e6:	f003 031f 	and.w	r3, r3, #31
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d102      	bne.n	800c8f4 <USB_EPStartXfer+0x5e0>
 800c8ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	00db      	lsls	r3, r3, #3
 800c8fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c902:	685a      	ldr	r2, [r3, #4]
 800c904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c906:	069b      	lsls	r3, r3, #26
 800c908:	431a      	orrs	r2, r3
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	00db      	lsls	r3, r3, #3
 800c910:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c914:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c918:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c91c:	605a      	str	r2, [r3, #4]
 800c91e:	e027      	b.n	800c970 <USB_EPStartXfer+0x65c>
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	785b      	ldrb	r3, [r3, #1]
 800c924:	2b01      	cmp	r3, #1
 800c926:	d123      	bne.n	800c970 <USB_EPStartXfer+0x65c>
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	00db      	lsls	r3, r3, #3
 800c92e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c932:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c936:	685a      	ldr	r2, [r3, #4]
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	00db      	lsls	r3, r3, #3
 800c93e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c942:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c946:	b292      	uxth	r2, r2
 800c948:	605a      	str	r2, [r3, #4]
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	00db      	lsls	r3, r3, #3
 800c950:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c954:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c958:	6859      	ldr	r1, [r3, #4]
 800c95a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c95c:	041a      	lsls	r2, r3, #16
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	00db      	lsls	r3, r3, #3
 800c964:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c968:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c96c:	430a      	orrs	r2, r1
 800c96e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	895b      	ldrh	r3, [r3, #10]
 800c974:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	6959      	ldr	r1, [r3, #20]
 800c97a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	8b7a      	ldrh	r2, [r7, #26]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 fe4e 	bl	800d622 <USB_WritePMA>
 800c986:	e19f      	b.n	800ccc8 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	6a1b      	ldr	r3, [r3, #32]
 800c98c:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	4413      	add	r3, r2
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	4ba0      	ldr	r3, [pc, #640]	@ (800cc1c <USB_EPStartXfer+0x908>)
 800c99c:	4013      	ands	r3, r2
 800c99e:	617b      	str	r3, [r7, #20]
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	009b      	lsls	r3, r3, #2
 800c9a8:	441a      	add	r2, r3
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9b4:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	00db      	lsls	r3, r3, #3
 800c9bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	00db      	lsls	r3, r3, #3
 800c9cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9d4:	b292      	uxth	r2, r2
 800c9d6:	601a      	str	r2, [r3, #0]
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	00db      	lsls	r3, r3, #3
 800c9de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9e6:	6819      	ldr	r1, [r3, #0]
 800c9e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9ea:	041a      	lsls	r2, r3, #16
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	00db      	lsls	r3, r3, #3
 800c9f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9fa:	430a      	orrs	r2, r1
 800c9fc:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	891b      	ldrh	r3, [r3, #8]
 800ca02:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	6959      	ldr	r1, [r3, #20]
 800ca08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	8b7a      	ldrh	r2, [r7, #26]
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 fe07 	bl	800d622 <USB_WritePMA>
 800ca14:	e158      	b.n	800ccc8 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	6a1a      	ldr	r2, [r3, #32]
 800ca1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca1c:	1ad2      	subs	r2, r2, r3
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	4413      	add	r3, r2
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	f000 80a3 	beq.w	800cb7e <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	785b      	ldrb	r3, [r3, #1]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d16a      	bne.n	800cb16 <USB_EPStartXfer+0x802>
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	00db      	lsls	r3, r3, #3
 800ca46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca4e:	685a      	ldr	r2, [r3, #4]
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	00db      	lsls	r3, r3, #3
 800ca56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca5e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ca62:	605a      	str	r2, [r3, #4]
 800ca64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d112      	bne.n	800ca90 <USB_EPStartXfer+0x77c>
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	00db      	lsls	r3, r3, #3
 800ca70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca78:	685a      	ldr	r2, [r3, #4]
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	00db      	lsls	r3, r3, #3
 800ca80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca88:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ca8c:	605a      	str	r2, [r3, #4]
 800ca8e:	e06a      	b.n	800cb66 <USB_EPStartXfer+0x852>
 800ca90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca92:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca94:	d81e      	bhi.n	800cad4 <USB_EPStartXfer+0x7c0>
 800ca96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca98:	085b      	lsrs	r3, r3, #1
 800ca9a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca9e:	f003 0301 	and.w	r3, r3, #1
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d002      	beq.n	800caac <USB_EPStartXfer+0x798>
 800caa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caa8:	3301      	adds	r3, #1
 800caaa:	643b      	str	r3, [r7, #64]	@ 0x40
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	00db      	lsls	r3, r3, #3
 800cab2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cab6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caba:	6859      	ldr	r1, [r3, #4]
 800cabc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cabe:	069a      	lsls	r2, r3, #26
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	00db      	lsls	r3, r3, #3
 800cac6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cace:	430a      	orrs	r2, r1
 800cad0:	605a      	str	r2, [r3, #4]
 800cad2:	e048      	b.n	800cb66 <USB_EPStartXfer+0x852>
 800cad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cad6:	095b      	lsrs	r3, r3, #5
 800cad8:	643b      	str	r3, [r7, #64]	@ 0x40
 800cada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cadc:	f003 031f 	and.w	r3, r3, #31
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d102      	bne.n	800caea <USB_EPStartXfer+0x7d6>
 800cae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cae6:	3b01      	subs	r3, #1
 800cae8:	643b      	str	r3, [r7, #64]	@ 0x40
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	00db      	lsls	r3, r3, #3
 800caf0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caf4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caf8:	685a      	ldr	r2, [r3, #4]
 800cafa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cafc:	069b      	lsls	r3, r3, #26
 800cafe:	431a      	orrs	r2, r3
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	00db      	lsls	r3, r3, #3
 800cb06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb0e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cb12:	605a      	str	r2, [r3, #4]
 800cb14:	e027      	b.n	800cb66 <USB_EPStartXfer+0x852>
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	785b      	ldrb	r3, [r3, #1]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d123      	bne.n	800cb66 <USB_EPStartXfer+0x852>
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	00db      	lsls	r3, r3, #3
 800cb24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb2c:	685a      	ldr	r2, [r3, #4]
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	00db      	lsls	r3, r3, #3
 800cb34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb3c:	b292      	uxth	r2, r2
 800cb3e:	605a      	str	r2, [r3, #4]
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	00db      	lsls	r3, r3, #3
 800cb46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb4e:	6859      	ldr	r1, [r3, #4]
 800cb50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb52:	041a      	lsls	r2, r3, #16
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	00db      	lsls	r3, r3, #3
 800cb5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb62:	430a      	orrs	r2, r1
 800cb64:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	895b      	ldrh	r3, [r3, #10]
 800cb6a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	6959      	ldr	r1, [r3, #20]
 800cb70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	8b7a      	ldrh	r2, [r7, #26]
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 fd53 	bl	800d622 <USB_WritePMA>
 800cb7c:	e0a4      	b.n	800ccc8 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	785b      	ldrb	r3, [r3, #1]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d16d      	bne.n	800cc62 <USB_EPStartXfer+0x94e>
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	00db      	lsls	r3, r3, #3
 800cb8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	00db      	lsls	r3, r3, #3
 800cb9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cba0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cba4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cba8:	601a      	str	r2, [r3, #0]
 800cbaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d112      	bne.n	800cbd6 <USB_EPStartXfer+0x8c2>
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	00db      	lsls	r3, r3, #3
 800cbb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	00db      	lsls	r3, r3, #3
 800cbc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cbd2:	601a      	str	r2, [r3, #0]
 800cbd4:	e06d      	b.n	800ccb2 <USB_EPStartXfer+0x99e>
 800cbd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbd8:	2b3e      	cmp	r3, #62	@ 0x3e
 800cbda:	d821      	bhi.n	800cc20 <USB_EPStartXfer+0x90c>
 800cbdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbde:	085b      	lsrs	r3, r3, #1
 800cbe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbe4:	f003 0301 	and.w	r3, r3, #1
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d002      	beq.n	800cbf2 <USB_EPStartXfer+0x8de>
 800cbec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbee:	3301      	adds	r3, #1
 800cbf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	00db      	lsls	r3, r3, #3
 800cbf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc00:	6819      	ldr	r1, [r3, #0]
 800cc02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc04:	069a      	lsls	r2, r3, #26
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	00db      	lsls	r3, r3, #3
 800cc0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc14:	430a      	orrs	r2, r1
 800cc16:	601a      	str	r2, [r3, #0]
 800cc18:	e04b      	b.n	800ccb2 <USB_EPStartXfer+0x99e>
 800cc1a:	bf00      	nop
 800cc1c:	07ff8e8f 	.word	0x07ff8e8f
 800cc20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc22:	095b      	lsrs	r3, r3, #5
 800cc24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc28:	f003 031f 	and.w	r3, r3, #31
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d102      	bne.n	800cc36 <USB_EPStartXfer+0x922>
 800cc30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc32:	3b01      	subs	r3, #1
 800cc34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	00db      	lsls	r3, r3, #3
 800cc3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc48:	069b      	lsls	r3, r3, #26
 800cc4a:	431a      	orrs	r2, r3
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	00db      	lsls	r3, r3, #3
 800cc52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc5a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cc5e:	601a      	str	r2, [r3, #0]
 800cc60:	e027      	b.n	800ccb2 <USB_EPStartXfer+0x99e>
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	785b      	ldrb	r3, [r3, #1]
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d123      	bne.n	800ccb2 <USB_EPStartXfer+0x99e>
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	00db      	lsls	r3, r3, #3
 800cc70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	00db      	lsls	r3, r3, #3
 800cc80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc88:	b292      	uxth	r2, r2
 800cc8a:	601a      	str	r2, [r3, #0]
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	00db      	lsls	r3, r3, #3
 800cc92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc9a:	6819      	ldr	r1, [r3, #0]
 800cc9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc9e:	041a      	lsls	r2, r3, #16
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	00db      	lsls	r3, r3, #3
 800cca6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccaa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccae:	430a      	orrs	r2, r1
 800ccb0:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	891b      	ldrh	r3, [r3, #8]
 800ccb6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	6959      	ldr	r1, [r3, #20]
 800ccbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	8b7a      	ldrh	r2, [r7, #26]
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 fcad 	bl	800d622 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	4413      	add	r3, r2
 800ccd2:	681a      	ldr	r2, [r3, #0]
 800ccd4:	4b8b      	ldr	r3, [pc, #556]	@ (800cf04 <USB_EPStartXfer+0xbf0>)
 800ccd6:	4013      	ands	r3, r2
 800ccd8:	60fb      	str	r3, [r7, #12]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f083 0310 	eor.w	r3, r3, #16
 800cce0:	60fb      	str	r3, [r7, #12]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f083 0320 	eor.w	r3, r3, #32
 800cce8:	60fb      	str	r3, [r7, #12]
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	441a      	add	r2, r3
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccfe:	6013      	str	r3, [r2, #0]
 800cd00:	e36b      	b.n	800d3da <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	7b1b      	ldrb	r3, [r3, #12]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	f040 8081 	bne.w	800ce0e <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	699a      	ldr	r2, [r3, #24]
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	691b      	ldr	r3, [r3, #16]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d909      	bls.n	800cd2c <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	691b      	ldr	r3, [r3, #16]
 800cd1c:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	699a      	ldr	r2, [r3, #24]
 800cd22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd24:	1ad2      	subs	r2, r2, r3
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	619a      	str	r2, [r3, #24]
 800cd2a:	e005      	b.n	800cd38 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	699b      	ldr	r3, [r3, #24]
 800cd30:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	2200      	movs	r2, #0
 800cd36:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	00db      	lsls	r3, r3, #3
 800cd3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd46:	685a      	ldr	r2, [r3, #4]
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	00db      	lsls	r3, r3, #3
 800cd4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd56:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cd5a:	605a      	str	r2, [r3, #4]
 800cd5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d112      	bne.n	800cd88 <USB_EPStartXfer+0xa74>
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	00db      	lsls	r3, r3, #3
 800cd68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd70:	685a      	ldr	r2, [r3, #4]
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	00db      	lsls	r3, r3, #3
 800cd78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd80:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cd84:	605a      	str	r2, [r3, #4]
 800cd86:	e30c      	b.n	800d3a2 <USB_EPStartXfer+0x108e>
 800cd88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd8a:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd8c:	d81e      	bhi.n	800cdcc <USB_EPStartXfer+0xab8>
 800cd8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd90:	085b      	lsrs	r3, r3, #1
 800cd92:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd96:	f003 0301 	and.w	r3, r3, #1
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d002      	beq.n	800cda4 <USB_EPStartXfer+0xa90>
 800cd9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cda0:	3301      	adds	r3, #1
 800cda2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	00db      	lsls	r3, r3, #3
 800cdaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdb2:	6859      	ldr	r1, [r3, #4]
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb6:	069a      	lsls	r2, r3, #26
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	00db      	lsls	r3, r3, #3
 800cdbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdc6:	430a      	orrs	r2, r1
 800cdc8:	605a      	str	r2, [r3, #4]
 800cdca:	e2ea      	b.n	800d3a2 <USB_EPStartXfer+0x108e>
 800cdcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdce:	095b      	lsrs	r3, r3, #5
 800cdd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cdd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdd4:	f003 031f 	and.w	r3, r3, #31
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d102      	bne.n	800cde2 <USB_EPStartXfer+0xace>
 800cddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdde:	3b01      	subs	r3, #1
 800cde0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	00db      	lsls	r3, r3, #3
 800cde8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdf0:	685a      	ldr	r2, [r3, #4]
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf4:	069b      	lsls	r3, r3, #26
 800cdf6:	431a      	orrs	r2, r3
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	00db      	lsls	r3, r3, #3
 800cdfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce06:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ce0a:	605a      	str	r2, [r3, #4]
 800ce0c:	e2c9      	b.n	800d3a2 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	78db      	ldrb	r3, [r3, #3]
 800ce12:	2b02      	cmp	r3, #2
 800ce14:	f040 8176 	bne.w	800d104 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	785b      	ldrb	r3, [r3, #1]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d173      	bne.n	800cf08 <USB_EPStartXfer+0xbf4>
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	00db      	lsls	r3, r3, #3
 800ce26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	00db      	lsls	r3, r3, #3
 800ce36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce3e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ce42:	601a      	str	r2, [r3, #0]
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	691b      	ldr	r3, [r3, #16]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d112      	bne.n	800ce72 <USB_EPStartXfer+0xb5e>
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	00db      	lsls	r3, r3, #3
 800ce52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	00db      	lsls	r3, r3, #3
 800ce62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce6a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ce6e:	601a      	str	r2, [r3, #0]
 800ce70:	e073      	b.n	800cf5a <USB_EPStartXfer+0xc46>
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	691b      	ldr	r3, [r3, #16]
 800ce76:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce78:	d820      	bhi.n	800cebc <USB_EPStartXfer+0xba8>
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	691b      	ldr	r3, [r3, #16]
 800ce7e:	085b      	lsrs	r3, r3, #1
 800ce80:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	f003 0301 	and.w	r3, r3, #1
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d002      	beq.n	800ce94 <USB_EPStartXfer+0xb80>
 800ce8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce90:	3301      	adds	r3, #1
 800ce92:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	00db      	lsls	r3, r3, #3
 800ce9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cea2:	6819      	ldr	r1, [r3, #0]
 800cea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cea6:	069a      	lsls	r2, r3, #26
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	00db      	lsls	r3, r3, #3
 800ceae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ceb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ceb6:	430a      	orrs	r2, r1
 800ceb8:	601a      	str	r2, [r3, #0]
 800ceba:	e04e      	b.n	800cf5a <USB_EPStartXfer+0xc46>
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	691b      	ldr	r3, [r3, #16]
 800cec0:	095b      	lsrs	r3, r3, #5
 800cec2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	691b      	ldr	r3, [r3, #16]
 800cec8:	f003 031f 	and.w	r3, r3, #31
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d102      	bne.n	800ced6 <USB_EPStartXfer+0xbc2>
 800ced0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ced2:	3b01      	subs	r3, #1
 800ced4:	637b      	str	r3, [r7, #52]	@ 0x34
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	00db      	lsls	r3, r3, #3
 800cedc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cee0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cee8:	069b      	lsls	r3, r3, #26
 800ceea:	431a      	orrs	r2, r3
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	00db      	lsls	r3, r3, #3
 800cef2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cef6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cefa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cefe:	601a      	str	r2, [r3, #0]
 800cf00:	e02b      	b.n	800cf5a <USB_EPStartXfer+0xc46>
 800cf02:	bf00      	nop
 800cf04:	07ff8fbf 	.word	0x07ff8fbf
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	785b      	ldrb	r3, [r3, #1]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d124      	bne.n	800cf5a <USB_EPStartXfer+0xc46>
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	00db      	lsls	r3, r3, #3
 800cf16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	00db      	lsls	r3, r3, #3
 800cf26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf2e:	b292      	uxth	r2, r2
 800cf30:	601a      	str	r2, [r3, #0]
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	00db      	lsls	r3, r3, #3
 800cf38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf40:	6819      	ldr	r1, [r3, #0]
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	691b      	ldr	r3, [r3, #16]
 800cf46:	041a      	lsls	r2, r3, #16
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	00db      	lsls	r3, r3, #3
 800cf4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf56:	430a      	orrs	r2, r1
 800cf58:	601a      	str	r2, [r3, #0]
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	785b      	ldrb	r3, [r3, #1]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d170      	bne.n	800d044 <USB_EPStartXfer+0xd30>
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	00db      	lsls	r3, r3, #3
 800cf68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf70:	685a      	ldr	r2, [r3, #4]
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	00db      	lsls	r3, r3, #3
 800cf78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf80:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cf84:	605a      	str	r2, [r3, #4]
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	691b      	ldr	r3, [r3, #16]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d112      	bne.n	800cfb4 <USB_EPStartXfer+0xca0>
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	00db      	lsls	r3, r3, #3
 800cf94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf9c:	685a      	ldr	r2, [r3, #4]
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	00db      	lsls	r3, r3, #3
 800cfa4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfa8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cfb0:	605a      	str	r2, [r3, #4]
 800cfb2:	e070      	b.n	800d096 <USB_EPStartXfer+0xd82>
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	2b3e      	cmp	r3, #62	@ 0x3e
 800cfba:	d820      	bhi.n	800cffe <USB_EPStartXfer+0xcea>
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	691b      	ldr	r3, [r3, #16]
 800cfc0:	085b      	lsrs	r3, r3, #1
 800cfc2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	691b      	ldr	r3, [r3, #16]
 800cfc8:	f003 0301 	and.w	r3, r3, #1
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d002      	beq.n	800cfd6 <USB_EPStartXfer+0xcc2>
 800cfd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	633b      	str	r3, [r7, #48]	@ 0x30
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	00db      	lsls	r3, r3, #3
 800cfdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfe0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfe4:	6859      	ldr	r1, [r3, #4]
 800cfe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe8:	069a      	lsls	r2, r3, #26
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	00db      	lsls	r3, r3, #3
 800cff0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cff4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cff8:	430a      	orrs	r2, r1
 800cffa:	605a      	str	r2, [r3, #4]
 800cffc:	e04b      	b.n	800d096 <USB_EPStartXfer+0xd82>
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	691b      	ldr	r3, [r3, #16]
 800d002:	095b      	lsrs	r3, r3, #5
 800d004:	633b      	str	r3, [r7, #48]	@ 0x30
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	691b      	ldr	r3, [r3, #16]
 800d00a:	f003 031f 	and.w	r3, r3, #31
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d102      	bne.n	800d018 <USB_EPStartXfer+0xd04>
 800d012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d014:	3b01      	subs	r3, #1
 800d016:	633b      	str	r3, [r7, #48]	@ 0x30
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	00db      	lsls	r3, r3, #3
 800d01e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d022:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d026:	685a      	ldr	r2, [r3, #4]
 800d028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d02a:	069b      	lsls	r3, r3, #26
 800d02c:	431a      	orrs	r2, r3
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	00db      	lsls	r3, r3, #3
 800d034:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d038:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d03c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d040:	605a      	str	r2, [r3, #4]
 800d042:	e028      	b.n	800d096 <USB_EPStartXfer+0xd82>
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	785b      	ldrb	r3, [r3, #1]
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d124      	bne.n	800d096 <USB_EPStartXfer+0xd82>
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	00db      	lsls	r3, r3, #3
 800d052:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d056:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d05a:	685a      	ldr	r2, [r3, #4]
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	00db      	lsls	r3, r3, #3
 800d062:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d066:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d06a:	b292      	uxth	r2, r2
 800d06c:	605a      	str	r2, [r3, #4]
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	00db      	lsls	r3, r3, #3
 800d074:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d078:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d07c:	6859      	ldr	r1, [r3, #4]
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	691b      	ldr	r3, [r3, #16]
 800d082:	041a      	lsls	r2, r3, #16
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	00db      	lsls	r3, r3, #3
 800d08a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d08e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d092:	430a      	orrs	r2, r1
 800d094:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	69db      	ldr	r3, [r3, #28]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	f000 8181 	beq.w	800d3a2 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	4413      	add	r3, r2
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d0ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d0b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d004      	beq.n	800d0c2 <USB_EPStartXfer+0xdae>
 800d0b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d0ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d10b      	bne.n	800d0da <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d0c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d0c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	f040 816a 	bne.w	800d3a2 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d0ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d0d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	f040 8164 	bne.w	800d3a2 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	4413      	add	r3, r2
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	4b98      	ldr	r3, [pc, #608]	@ (800d348 <USB_EPStartXfer+0x1034>)
 800d0e8:	4013      	ands	r3, r2
 800d0ea:	623b      	str	r3, [r7, #32]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	441a      	add	r2, r3
 800d0f6:	6a3b      	ldr	r3, [r7, #32]
 800d0f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d100:	6013      	str	r3, [r2, #0]
 800d102:	e14e      	b.n	800d3a2 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	78db      	ldrb	r3, [r3, #3]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	f040 8148 	bne.w	800d39e <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	699a      	ldr	r2, [r3, #24]
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	691b      	ldr	r3, [r3, #16]
 800d116:	429a      	cmp	r2, r3
 800d118:	d909      	bls.n	800d12e <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	691b      	ldr	r3, [r3, #16]
 800d11e:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	699a      	ldr	r2, [r3, #24]
 800d124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d126:	1ad2      	subs	r2, r2, r3
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	619a      	str	r2, [r3, #24]
 800d12c:	e005      	b.n	800d13a <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	699b      	ldr	r3, [r3, #24]
 800d132:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	2200      	movs	r2, #0
 800d138:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	785b      	ldrb	r3, [r3, #1]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d16a      	bne.n	800d218 <USB_EPStartXfer+0xf04>
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	00db      	lsls	r3, r3, #3
 800d148:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d14c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	00db      	lsls	r3, r3, #3
 800d158:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d15c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d160:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d164:	601a      	str	r2, [r3, #0]
 800d166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d112      	bne.n	800d192 <USB_EPStartXfer+0xe7e>
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	00db      	lsls	r3, r3, #3
 800d172:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d176:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	00db      	lsls	r3, r3, #3
 800d182:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d186:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d18a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d18e:	601a      	str	r2, [r3, #0]
 800d190:	e06a      	b.n	800d268 <USB_EPStartXfer+0xf54>
 800d192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d194:	2b3e      	cmp	r3, #62	@ 0x3e
 800d196:	d81e      	bhi.n	800d1d6 <USB_EPStartXfer+0xec2>
 800d198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d19a:	085b      	lsrs	r3, r3, #1
 800d19c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d19e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1a0:	f003 0301 	and.w	r3, r3, #1
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d002      	beq.n	800d1ae <USB_EPStartXfer+0xe9a>
 800d1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	00db      	lsls	r3, r3, #3
 800d1b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1bc:	6819      	ldr	r1, [r3, #0]
 800d1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c0:	069a      	lsls	r2, r3, #26
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	00db      	lsls	r3, r3, #3
 800d1c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1d0:	430a      	orrs	r2, r1
 800d1d2:	601a      	str	r2, [r3, #0]
 800d1d4:	e048      	b.n	800d268 <USB_EPStartXfer+0xf54>
 800d1d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1d8:	095b      	lsrs	r3, r3, #5
 800d1da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1de:	f003 031f 	and.w	r3, r3, #31
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d102      	bne.n	800d1ec <USB_EPStartXfer+0xed8>
 800d1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e8:	3b01      	subs	r3, #1
 800d1ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	00db      	lsls	r3, r3, #3
 800d1f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1fe:	069b      	lsls	r3, r3, #26
 800d200:	431a      	orrs	r2, r3
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	00db      	lsls	r3, r3, #3
 800d208:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d20c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d210:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d214:	601a      	str	r2, [r3, #0]
 800d216:	e027      	b.n	800d268 <USB_EPStartXfer+0xf54>
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	785b      	ldrb	r3, [r3, #1]
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d123      	bne.n	800d268 <USB_EPStartXfer+0xf54>
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	00db      	lsls	r3, r3, #3
 800d226:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d22a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d22e:	681a      	ldr	r2, [r3, #0]
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	00db      	lsls	r3, r3, #3
 800d236:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d23a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d23e:	b292      	uxth	r2, r2
 800d240:	601a      	str	r2, [r3, #0]
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	00db      	lsls	r3, r3, #3
 800d248:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d24c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d250:	6819      	ldr	r1, [r3, #0]
 800d252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d254:	041a      	lsls	r2, r3, #16
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	00db      	lsls	r3, r3, #3
 800d25c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d260:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d264:	430a      	orrs	r2, r1
 800d266:	601a      	str	r2, [r3, #0]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	785b      	ldrb	r3, [r3, #1]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d16d      	bne.n	800d34c <USB_EPStartXfer+0x1038>
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	00db      	lsls	r3, r3, #3
 800d276:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d27a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d27e:	685a      	ldr	r2, [r3, #4]
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	00db      	lsls	r3, r3, #3
 800d286:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d28a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d28e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d292:	605a      	str	r2, [r3, #4]
 800d294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d296:	2b00      	cmp	r3, #0
 800d298:	d112      	bne.n	800d2c0 <USB_EPStartXfer+0xfac>
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	00db      	lsls	r3, r3, #3
 800d2a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2a8:	685a      	ldr	r2, [r3, #4]
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	00db      	lsls	r3, r3, #3
 800d2b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2b8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d2bc:	605a      	str	r2, [r3, #4]
 800d2be:	e070      	b.n	800d3a2 <USB_EPStartXfer+0x108e>
 800d2c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2c2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d2c4:	d81e      	bhi.n	800d304 <USB_EPStartXfer+0xff0>
 800d2c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2c8:	085b      	lsrs	r3, r3, #1
 800d2ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d2cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2ce:	f003 0301 	and.w	r3, r3, #1
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d002      	beq.n	800d2dc <USB_EPStartXfer+0xfc8>
 800d2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d8:	3301      	adds	r3, #1
 800d2da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	00db      	lsls	r3, r3, #3
 800d2e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2ea:	6859      	ldr	r1, [r3, #4]
 800d2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ee:	069a      	lsls	r2, r3, #26
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	00db      	lsls	r3, r3, #3
 800d2f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2fe:	430a      	orrs	r2, r1
 800d300:	605a      	str	r2, [r3, #4]
 800d302:	e04e      	b.n	800d3a2 <USB_EPStartXfer+0x108e>
 800d304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d306:	095b      	lsrs	r3, r3, #5
 800d308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d30a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d30c:	f003 031f 	and.w	r3, r3, #31
 800d310:	2b00      	cmp	r3, #0
 800d312:	d102      	bne.n	800d31a <USB_EPStartXfer+0x1006>
 800d314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d316:	3b01      	subs	r3, #1
 800d318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	00db      	lsls	r3, r3, #3
 800d320:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d324:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d328:	685a      	ldr	r2, [r3, #4]
 800d32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d32c:	069b      	lsls	r3, r3, #26
 800d32e:	431a      	orrs	r2, r3
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	00db      	lsls	r3, r3, #3
 800d336:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d33a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d33e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d342:	605a      	str	r2, [r3, #4]
 800d344:	e02d      	b.n	800d3a2 <USB_EPStartXfer+0x108e>
 800d346:	bf00      	nop
 800d348:	07ff8f8f 	.word	0x07ff8f8f
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	785b      	ldrb	r3, [r3, #1]
 800d350:	2b01      	cmp	r3, #1
 800d352:	d126      	bne.n	800d3a2 <USB_EPStartXfer+0x108e>
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	00db      	lsls	r3, r3, #3
 800d35a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d35e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d362:	685a      	ldr	r2, [r3, #4]
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	00db      	lsls	r3, r3, #3
 800d36a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d36e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d372:	b292      	uxth	r2, r2
 800d374:	605a      	str	r2, [r3, #4]
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	00db      	lsls	r3, r3, #3
 800d37c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d380:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d384:	6859      	ldr	r1, [r3, #4]
 800d386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d388:	041a      	lsls	r2, r3, #16
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	00db      	lsls	r3, r3, #3
 800d390:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d394:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d398:	430a      	orrs	r2, r1
 800d39a:	605a      	str	r2, [r3, #4]
 800d39c:	e001      	b.n	800d3a2 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800d39e:	2301      	movs	r3, #1
 800d3a0:	e01c      	b.n	800d3dc <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	4413      	add	r3, r2
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d3e4 <USB_EPStartXfer+0x10d0>)
 800d3b0:	4013      	ands	r3, r2
 800d3b2:	61fb      	str	r3, [r7, #28]
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d3ba:	61fb      	str	r3, [r7, #28]
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d3c2:	61fb      	str	r3, [r7, #28]
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	441a      	add	r2, r3
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3758      	adds	r7, #88	@ 0x58
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	07ffbf8f 	.word	0x07ffbf8f

0800d3e8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b085      	sub	sp, #20
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	785b      	ldrb	r3, [r3, #1]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d018      	beq.n	800d42c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4413      	add	r3, r2
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	4b19      	ldr	r3, [pc, #100]	@ (800d46c <USB_EPSetStall+0x84>)
 800d408:	4013      	ands	r3, r2
 800d40a:	60bb      	str	r3, [r7, #8]
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	f083 0310 	eor.w	r3, r3, #16
 800d412:	60bb      	str	r3, [r7, #8]
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	009b      	lsls	r3, r3, #2
 800d41c:	441a      	add	r2, r3
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d428:	6013      	str	r3, [r2, #0]
 800d42a:	e017      	b.n	800d45c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	4413      	add	r3, r2
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	4b0d      	ldr	r3, [pc, #52]	@ (800d470 <USB_EPSetStall+0x88>)
 800d43a:	4013      	ands	r3, r2
 800d43c:	60fb      	str	r3, [r7, #12]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d444:	60fb      	str	r3, [r7, #12]
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	009b      	lsls	r3, r3, #2
 800d44e:	441a      	add	r2, r3
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d45a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d45c:	2300      	movs	r3, #0
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3714      	adds	r7, #20
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr
 800d46a:	bf00      	nop
 800d46c:	07ff8fbf 	.word	0x07ff8fbf
 800d470:	07ffbf8f 	.word	0x07ffbf8f

0800d474 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d474:	b480      	push	{r7}
 800d476:	b089      	sub	sp, #36	@ 0x24
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	7b1b      	ldrb	r3, [r3, #12]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d17c      	bne.n	800d580 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	785b      	ldrb	r3, [r3, #1]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d03c      	beq.n	800d508 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	4413      	add	r3, r2
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	613b      	str	r3, [r7, #16]
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d013      	beq.n	800d4ce <USB_EPClearStall+0x5a>
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	009b      	lsls	r3, r3, #2
 800d4ae:	4413      	add	r3, r2
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	4b37      	ldr	r3, [pc, #220]	@ (800d590 <USB_EPClearStall+0x11c>)
 800d4b4:	4013      	ands	r3, r2
 800d4b6:	60fb      	str	r3, [r7, #12]
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	441a      	add	r2, r3
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d4c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d4cc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	78db      	ldrb	r3, [r3, #3]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d054      	beq.n	800d580 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	009b      	lsls	r3, r3, #2
 800d4de:	4413      	add	r3, r2
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	4b2c      	ldr	r3, [pc, #176]	@ (800d594 <USB_EPClearStall+0x120>)
 800d4e4:	4013      	ands	r3, r2
 800d4e6:	60bb      	str	r3, [r7, #8]
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	f083 0320 	eor.w	r3, r3, #32
 800d4ee:	60bb      	str	r3, [r7, #8]
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	441a      	add	r2, r3
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d504:	6013      	str	r3, [r2, #0]
 800d506:	e03b      	b.n	800d580 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	4413      	add	r3, r2
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	61fb      	str	r3, [r7, #28]
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d013      	beq.n	800d548 <USB_EPClearStall+0xd4>
 800d520:	687a      	ldr	r2, [r7, #4]
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	4413      	add	r3, r2
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	4b18      	ldr	r3, [pc, #96]	@ (800d590 <USB_EPClearStall+0x11c>)
 800d52e:	4013      	ands	r3, r2
 800d530:	61bb      	str	r3, [r7, #24]
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	441a      	add	r2, r3
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d546:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	4413      	add	r3, r2
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	4b10      	ldr	r3, [pc, #64]	@ (800d598 <USB_EPClearStall+0x124>)
 800d556:	4013      	ands	r3, r2
 800d558:	617b      	str	r3, [r7, #20]
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d560:	617b      	str	r3, [r7, #20]
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d568:	617b      	str	r3, [r7, #20]
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	441a      	add	r2, r3
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d57a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d57e:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d580:	2300      	movs	r3, #0
}
 800d582:	4618      	mov	r0, r3
 800d584:	3724      	adds	r7, #36	@ 0x24
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	07ff8f8f 	.word	0x07ff8f8f
 800d594:	07ff8fbf 	.word	0x07ff8fbf
 800d598:	07ffbf8f 	.word	0x07ffbf8f

0800d59c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d5a8:	78fb      	ldrb	r3, [r7, #3]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d102      	bne.n	800d5b4 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2280      	movs	r2, #128	@ 0x80
 800d5b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d5b4:	2300      	movs	r3, #0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	370c      	adds	r7, #12
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr

0800d5c2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800d5c2:	b480      	push	{r7}
 800d5c4:	b083      	sub	sp, #12
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5ce:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5f0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	370c      	adds	r7, #12
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr

0800d606 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800d606:	b480      	push	{r7}
 800d608:	b085      	sub	sp, #20
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d612:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d614:	68fb      	ldr	r3, [r7, #12]
}
 800d616:	4618      	mov	r0, r3
 800d618:	3714      	adds	r7, #20
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr

0800d622 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d622:	b480      	push	{r7}
 800d624:	b08b      	sub	sp, #44	@ 0x2c
 800d626:	af00      	add	r7, sp, #0
 800d628:	60f8      	str	r0, [r7, #12]
 800d62a:	60b9      	str	r1, [r7, #8]
 800d62c:	4611      	mov	r1, r2
 800d62e:	461a      	mov	r2, r3
 800d630:	460b      	mov	r3, r1
 800d632:	80fb      	strh	r3, [r7, #6]
 800d634:	4613      	mov	r3, r2
 800d636:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d638:	88bb      	ldrh	r3, [r7, #4]
 800d63a:	3303      	adds	r3, #3
 800d63c:	089b      	lsrs	r3, r3, #2
 800d63e:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d640:	88bb      	ldrh	r3, [r7, #4]
 800d642:	f003 0303 	and.w	r3, r3, #3
 800d646:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800d64c:	8afb      	ldrh	r3, [r7, #22]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d002      	beq.n	800d658 <USB_WritePMA+0x36>
  {
    NbWords--;
 800d652:	69bb      	ldr	r3, [r7, #24]
 800d654:	3b01      	subs	r3, #1
 800d656:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d658:	88fb      	ldrh	r3, [r7, #6]
 800d65a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d65e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d662:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800d664:	69bb      	ldr	r3, [r7, #24]
 800d666:	623b      	str	r3, [r7, #32]
 800d668:	e015      	b.n	800d696 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	69fb      	ldr	r3, [r7, #28]
 800d670:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	3304      	adds	r3, #4
 800d676:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	3301      	adds	r3, #1
 800d67c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	3301      	adds	r3, #1
 800d682:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	3301      	adds	r3, #1
 800d688:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	3301      	adds	r3, #1
 800d68e:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800d690:	6a3b      	ldr	r3, [r7, #32]
 800d692:	3b01      	subs	r3, #1
 800d694:	623b      	str	r3, [r7, #32]
 800d696:	6a3b      	ldr	r3, [r7, #32]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d1e6      	bne.n	800d66a <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800d69c:	8afb      	ldrh	r3, [r7, #22]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d01a      	beq.n	800d6d8 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	6a3b      	ldr	r3, [r7, #32]
 800d6ae:	00db      	lsls	r3, r3, #3
 800d6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d6b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800d6ba:	6a3b      	ldr	r3, [r7, #32]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	623b      	str	r3, [r7, #32]
      pBuf++;
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800d6c6:	8afb      	ldrh	r3, [r7, #22]
 800d6c8:	3b01      	subs	r3, #1
 800d6ca:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800d6cc:	8afb      	ldrh	r3, [r7, #22]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d1e9      	bne.n	800d6a6 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6d6:	601a      	str	r2, [r3, #0]
  }
}
 800d6d8:	bf00      	nop
 800d6da:	372c      	adds	r7, #44	@ 0x2c
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b08b      	sub	sp, #44	@ 0x2c
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	60b9      	str	r1, [r7, #8]
 800d6ee:	4611      	mov	r1, r2
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	80fb      	strh	r3, [r7, #6]
 800d6f6:	4613      	mov	r3, r2
 800d6f8:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d6fa:	88bb      	ldrh	r3, [r7, #4]
 800d6fc:	3303      	adds	r3, #3
 800d6fe:	089b      	lsrs	r3, r3, #2
 800d700:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d702:	88bb      	ldrh	r3, [r7, #4]
 800d704:	f003 0303 	and.w	r3, r3, #3
 800d708:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d70e:	88fb      	ldrh	r3, [r7, #6]
 800d710:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d714:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d718:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800d71a:	8b7b      	ldrh	r3, [r7, #26]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d002      	beq.n	800d726 <USB_ReadPMA+0x42>
  {
    NbWords--;
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	3b01      	subs	r3, #1
 800d724:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	627b      	str	r3, [r7, #36]	@ 0x24
 800d72a:	e015      	b.n	800d758 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800d72c:	6a3b      	ldr	r3, [r7, #32]
 800d72e:	681a      	ldr	r2, [r3, #0]
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800d734:	6a3b      	ldr	r3, [r7, #32]
 800d736:	3304      	adds	r3, #4
 800d738:	623b      	str	r3, [r7, #32]
    pBuf++;
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	3301      	adds	r3, #1
 800d73e:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	3301      	adds	r3, #1
 800d744:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	3301      	adds	r3, #1
 800d74a:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	3301      	adds	r3, #1
 800d750:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800d752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d754:	3b01      	subs	r3, #1
 800d756:	627b      	str	r3, [r7, #36]	@ 0x24
 800d758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d1e6      	bne.n	800d72c <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800d75e:	8b7b      	ldrh	r3, [r7, #26]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d017      	beq.n	800d794 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800d76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	00db      	lsls	r3, r3, #3
 800d770:	693a      	ldr	r2, [r7, #16]
 800d772:	fa22 f303 	lsr.w	r3, r2, r3
 800d776:	b2da      	uxtb	r2, r3
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	701a      	strb	r2, [r3, #0]
      count++;
 800d77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77e:	3301      	adds	r3, #1
 800d780:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	3301      	adds	r3, #1
 800d786:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800d788:	8b7b      	ldrh	r3, [r7, #26]
 800d78a:	3b01      	subs	r3, #1
 800d78c:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800d78e:	8b7b      	ldrh	r3, [r7, #26]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d1ea      	bne.n	800d76a <USB_ReadPMA+0x86>
  }
}
 800d794:	bf00      	nop
 800d796:	372c      	adds	r7, #44	@ 0x2c
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr

0800d7a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d7ac:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d7b0:	f000 ff5c 	bl	800e66c <USBD_static_malloc>
 800d7b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d109      	bne.n	800d7d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	32b0      	adds	r2, #176	@ 0xb0
 800d7c6:	2100      	movs	r1, #0
 800d7c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d7cc:	2302      	movs	r3, #2
 800d7ce:	e0d4      	b.n	800d97a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d7d0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d7d4:	2100      	movs	r1, #0
 800d7d6:	68f8      	ldr	r0, [r7, #12]
 800d7d8:	f002 fb38 	bl	800fe4c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	32b0      	adds	r2, #176	@ 0xb0
 800d7e6:	68f9      	ldr	r1, [r7, #12]
 800d7e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	32b0      	adds	r2, #176	@ 0xb0
 800d7f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	7c1b      	ldrb	r3, [r3, #16]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d138      	bne.n	800d87a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d808:	4b5e      	ldr	r3, [pc, #376]	@ (800d984 <USBD_CDC_Init+0x1e4>)
 800d80a:	7819      	ldrb	r1, [r3, #0]
 800d80c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d810:	2202      	movs	r2, #2
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 fe31 	bl	800e47a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d818:	4b5a      	ldr	r3, [pc, #360]	@ (800d984 <USBD_CDC_Init+0x1e4>)
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	f003 020f 	and.w	r2, r3, #15
 800d820:	6879      	ldr	r1, [r7, #4]
 800d822:	4613      	mov	r3, r2
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	4413      	add	r3, r2
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	440b      	add	r3, r1
 800d82c:	3324      	adds	r3, #36	@ 0x24
 800d82e:	2201      	movs	r2, #1
 800d830:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d832:	4b55      	ldr	r3, [pc, #340]	@ (800d988 <USBD_CDC_Init+0x1e8>)
 800d834:	7819      	ldrb	r1, [r3, #0]
 800d836:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d83a:	2202      	movs	r2, #2
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 fe1c 	bl	800e47a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d842:	4b51      	ldr	r3, [pc, #324]	@ (800d988 <USBD_CDC_Init+0x1e8>)
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	f003 020f 	and.w	r2, r3, #15
 800d84a:	6879      	ldr	r1, [r7, #4]
 800d84c:	4613      	mov	r3, r2
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	4413      	add	r3, r2
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	440b      	add	r3, r1
 800d856:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d85a:	2201      	movs	r2, #1
 800d85c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d85e:	4b4b      	ldr	r3, [pc, #300]	@ (800d98c <USBD_CDC_Init+0x1ec>)
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	f003 020f 	and.w	r2, r3, #15
 800d866:	6879      	ldr	r1, [r7, #4]
 800d868:	4613      	mov	r3, r2
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	4413      	add	r3, r2
 800d86e:	009b      	lsls	r3, r3, #2
 800d870:	440b      	add	r3, r1
 800d872:	3326      	adds	r3, #38	@ 0x26
 800d874:	2210      	movs	r2, #16
 800d876:	801a      	strh	r2, [r3, #0]
 800d878:	e035      	b.n	800d8e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d87a:	4b42      	ldr	r3, [pc, #264]	@ (800d984 <USBD_CDC_Init+0x1e4>)
 800d87c:	7819      	ldrb	r1, [r3, #0]
 800d87e:	2340      	movs	r3, #64	@ 0x40
 800d880:	2202      	movs	r2, #2
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 fdf9 	bl	800e47a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d888:	4b3e      	ldr	r3, [pc, #248]	@ (800d984 <USBD_CDC_Init+0x1e4>)
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	f003 020f 	and.w	r2, r3, #15
 800d890:	6879      	ldr	r1, [r7, #4]
 800d892:	4613      	mov	r3, r2
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	4413      	add	r3, r2
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	440b      	add	r3, r1
 800d89c:	3324      	adds	r3, #36	@ 0x24
 800d89e:	2201      	movs	r2, #1
 800d8a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d8a2:	4b39      	ldr	r3, [pc, #228]	@ (800d988 <USBD_CDC_Init+0x1e8>)
 800d8a4:	7819      	ldrb	r1, [r3, #0]
 800d8a6:	2340      	movs	r3, #64	@ 0x40
 800d8a8:	2202      	movs	r2, #2
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f000 fde5 	bl	800e47a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d8b0:	4b35      	ldr	r3, [pc, #212]	@ (800d988 <USBD_CDC_Init+0x1e8>)
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	f003 020f 	and.w	r2, r3, #15
 800d8b8:	6879      	ldr	r1, [r7, #4]
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	4413      	add	r3, r2
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	440b      	add	r3, r1
 800d8c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d8cc:	4b2f      	ldr	r3, [pc, #188]	@ (800d98c <USBD_CDC_Init+0x1ec>)
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	f003 020f 	and.w	r2, r3, #15
 800d8d4:	6879      	ldr	r1, [r7, #4]
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	4413      	add	r3, r2
 800d8dc:	009b      	lsls	r3, r3, #2
 800d8de:	440b      	add	r3, r1
 800d8e0:	3326      	adds	r3, #38	@ 0x26
 800d8e2:	2210      	movs	r2, #16
 800d8e4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d8e6:	4b29      	ldr	r3, [pc, #164]	@ (800d98c <USBD_CDC_Init+0x1ec>)
 800d8e8:	7819      	ldrb	r1, [r3, #0]
 800d8ea:	2308      	movs	r3, #8
 800d8ec:	2203      	movs	r2, #3
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 fdc3 	bl	800e47a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d8f4:	4b25      	ldr	r3, [pc, #148]	@ (800d98c <USBD_CDC_Init+0x1ec>)
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	f003 020f 	and.w	r2, r3, #15
 800d8fc:	6879      	ldr	r1, [r7, #4]
 800d8fe:	4613      	mov	r3, r2
 800d900:	009b      	lsls	r3, r3, #2
 800d902:	4413      	add	r3, r2
 800d904:	009b      	lsls	r3, r3, #2
 800d906:	440b      	add	r3, r1
 800d908:	3324      	adds	r3, #36	@ 0x24
 800d90a:	2201      	movs	r2, #1
 800d90c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2200      	movs	r2, #0
 800d912:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	33b0      	adds	r3, #176	@ 0xb0
 800d920:	009b      	lsls	r3, r3, #2
 800d922:	4413      	add	r3, r2
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2200      	movs	r2, #0
 800d92e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2200      	movs	r2, #0
 800d936:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d940:	2b00      	cmp	r3, #0
 800d942:	d101      	bne.n	800d948 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d944:	2302      	movs	r3, #2
 800d946:	e018      	b.n	800d97a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	7c1b      	ldrb	r3, [r3, #16]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d10a      	bne.n	800d966 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d950:	4b0d      	ldr	r3, [pc, #52]	@ (800d988 <USBD_CDC_Init+0x1e8>)
 800d952:	7819      	ldrb	r1, [r3, #0]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d95a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 fe56 	bl	800e610 <USBD_LL_PrepareReceive>
 800d964:	e008      	b.n	800d978 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d966:	4b08      	ldr	r3, [pc, #32]	@ (800d988 <USBD_CDC_Init+0x1e8>)
 800d968:	7819      	ldrb	r1, [r3, #0]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d970:	2340      	movs	r3, #64	@ 0x40
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f000 fe4c 	bl	800e610 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d978:	2300      	movs	r3, #0
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3710      	adds	r7, #16
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
 800d982:	bf00      	nop
 800d984:	200000b3 	.word	0x200000b3
 800d988:	200000b4 	.word	0x200000b4
 800d98c:	200000b5 	.word	0x200000b5

0800d990 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	460b      	mov	r3, r1
 800d99a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d99c:	4b3a      	ldr	r3, [pc, #232]	@ (800da88 <USBD_CDC_DeInit+0xf8>)
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 fd89 	bl	800e4ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d9a8:	4b37      	ldr	r3, [pc, #220]	@ (800da88 <USBD_CDC_DeInit+0xf8>)
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	f003 020f 	and.w	r2, r3, #15
 800d9b0:	6879      	ldr	r1, [r7, #4]
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	4413      	add	r3, r2
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	440b      	add	r3, r1
 800d9bc:	3324      	adds	r3, #36	@ 0x24
 800d9be:	2200      	movs	r2, #0
 800d9c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d9c2:	4b32      	ldr	r3, [pc, #200]	@ (800da8c <USBD_CDC_DeInit+0xfc>)
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f000 fd76 	bl	800e4ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d9ce:	4b2f      	ldr	r3, [pc, #188]	@ (800da8c <USBD_CDC_DeInit+0xfc>)
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	f003 020f 	and.w	r2, r3, #15
 800d9d6:	6879      	ldr	r1, [r7, #4]
 800d9d8:	4613      	mov	r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	4413      	add	r3, r2
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	440b      	add	r3, r1
 800d9e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d9ea:	4b29      	ldr	r3, [pc, #164]	@ (800da90 <USBD_CDC_DeInit+0x100>)
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f000 fd62 	bl	800e4ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d9f6:	4b26      	ldr	r3, [pc, #152]	@ (800da90 <USBD_CDC_DeInit+0x100>)
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	f003 020f 	and.w	r2, r3, #15
 800d9fe:	6879      	ldr	r1, [r7, #4]
 800da00:	4613      	mov	r3, r2
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	4413      	add	r3, r2
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	440b      	add	r3, r1
 800da0a:	3324      	adds	r3, #36	@ 0x24
 800da0c:	2200      	movs	r2, #0
 800da0e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800da10:	4b1f      	ldr	r3, [pc, #124]	@ (800da90 <USBD_CDC_DeInit+0x100>)
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	f003 020f 	and.w	r2, r3, #15
 800da18:	6879      	ldr	r1, [r7, #4]
 800da1a:	4613      	mov	r3, r2
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	4413      	add	r3, r2
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	440b      	add	r3, r1
 800da24:	3326      	adds	r3, #38	@ 0x26
 800da26:	2200      	movs	r2, #0
 800da28:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	32b0      	adds	r2, #176	@ 0xb0
 800da34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d01f      	beq.n	800da7c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	33b0      	adds	r3, #176	@ 0xb0
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	4413      	add	r3, r2
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	32b0      	adds	r2, #176	@ 0xb0
 800da5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da5e:	4618      	mov	r0, r3
 800da60:	f000 fe12 	bl	800e688 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	32b0      	adds	r2, #176	@ 0xb0
 800da6e:	2100      	movs	r1, #0
 800da70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2200      	movs	r2, #0
 800da78:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800da7c:	2300      	movs	r3, #0
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3708      	adds	r7, #8
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	200000b3 	.word	0x200000b3
 800da8c:	200000b4 	.word	0x200000b4
 800da90:	200000b5 	.word	0x200000b5

0800da94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b086      	sub	sp, #24
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	32b0      	adds	r2, #176	@ 0xb0
 800daa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800daae:	2300      	movs	r3, #0
 800dab0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dab2:	2300      	movs	r3, #0
 800dab4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800dab6:	2300      	movs	r3, #0
 800dab8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d101      	bne.n	800dac4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800dac0:	2303      	movs	r3, #3
 800dac2:	e0bf      	b.n	800dc44 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d050      	beq.n	800db72 <USBD_CDC_Setup+0xde>
 800dad0:	2b20      	cmp	r3, #32
 800dad2:	f040 80af 	bne.w	800dc34 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	88db      	ldrh	r3, [r3, #6]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d03a      	beq.n	800db54 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	b25b      	sxtb	r3, r3
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	da1b      	bge.n	800db20 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	33b0      	adds	r3, #176	@ 0xb0
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	4413      	add	r3, r2
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	689b      	ldr	r3, [r3, #8]
 800dafa:	683a      	ldr	r2, [r7, #0]
 800dafc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800dafe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800db00:	683a      	ldr	r2, [r7, #0]
 800db02:	88d2      	ldrh	r2, [r2, #6]
 800db04:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	88db      	ldrh	r3, [r3, #6]
 800db0a:	2b07      	cmp	r3, #7
 800db0c:	bf28      	it	cs
 800db0e:	2307      	movcs	r3, #7
 800db10:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	89fa      	ldrh	r2, [r7, #14]
 800db16:	4619      	mov	r1, r3
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f002 f8a8 	bl	800fc6e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800db1e:	e090      	b.n	800dc42 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	785a      	ldrb	r2, [r3, #1]
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	88db      	ldrh	r3, [r3, #6]
 800db2e:	2b3f      	cmp	r3, #63	@ 0x3f
 800db30:	d803      	bhi.n	800db3a <USBD_CDC_Setup+0xa6>
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	88db      	ldrh	r3, [r3, #6]
 800db36:	b2da      	uxtb	r2, r3
 800db38:	e000      	b.n	800db3c <USBD_CDC_Setup+0xa8>
 800db3a:	2240      	movs	r2, #64	@ 0x40
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800db42:	6939      	ldr	r1, [r7, #16]
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800db4a:	461a      	mov	r2, r3
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f002 f8ba 	bl	800fcc6 <USBD_CtlPrepareRx>
      break;
 800db52:	e076      	b.n	800dc42 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800db5a:	687a      	ldr	r2, [r7, #4]
 800db5c:	33b0      	adds	r3, #176	@ 0xb0
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	4413      	add	r3, r2
 800db62:	685b      	ldr	r3, [r3, #4]
 800db64:	689b      	ldr	r3, [r3, #8]
 800db66:	683a      	ldr	r2, [r7, #0]
 800db68:	7850      	ldrb	r0, [r2, #1]
 800db6a:	2200      	movs	r2, #0
 800db6c:	6839      	ldr	r1, [r7, #0]
 800db6e:	4798      	blx	r3
      break;
 800db70:	e067      	b.n	800dc42 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	785b      	ldrb	r3, [r3, #1]
 800db76:	2b0b      	cmp	r3, #11
 800db78:	d851      	bhi.n	800dc1e <USBD_CDC_Setup+0x18a>
 800db7a:	a201      	add	r2, pc, #4	@ (adr r2, 800db80 <USBD_CDC_Setup+0xec>)
 800db7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db80:	0800dbb1 	.word	0x0800dbb1
 800db84:	0800dc2d 	.word	0x0800dc2d
 800db88:	0800dc1f 	.word	0x0800dc1f
 800db8c:	0800dc1f 	.word	0x0800dc1f
 800db90:	0800dc1f 	.word	0x0800dc1f
 800db94:	0800dc1f 	.word	0x0800dc1f
 800db98:	0800dc1f 	.word	0x0800dc1f
 800db9c:	0800dc1f 	.word	0x0800dc1f
 800dba0:	0800dc1f 	.word	0x0800dc1f
 800dba4:	0800dc1f 	.word	0x0800dc1f
 800dba8:	0800dbdb 	.word	0x0800dbdb
 800dbac:	0800dc05 	.word	0x0800dc05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	2b03      	cmp	r3, #3
 800dbba:	d107      	bne.n	800dbcc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dbbc:	f107 030a 	add.w	r3, r7, #10
 800dbc0:	2202      	movs	r2, #2
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f002 f852 	bl	800fc6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dbca:	e032      	b.n	800dc32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dbcc:	6839      	ldr	r1, [r7, #0]
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f001 fecf 	bl	800f972 <USBD_CtlError>
            ret = USBD_FAIL;
 800dbd4:	2303      	movs	r3, #3
 800dbd6:	75fb      	strb	r3, [r7, #23]
          break;
 800dbd8:	e02b      	b.n	800dc32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	2b03      	cmp	r3, #3
 800dbe4:	d107      	bne.n	800dbf6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dbe6:	f107 030d 	add.w	r3, r7, #13
 800dbea:	2201      	movs	r2, #1
 800dbec:	4619      	mov	r1, r3
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f002 f83d 	bl	800fc6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dbf4:	e01d      	b.n	800dc32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dbf6:	6839      	ldr	r1, [r7, #0]
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f001 feba 	bl	800f972 <USBD_CtlError>
            ret = USBD_FAIL;
 800dbfe:	2303      	movs	r3, #3
 800dc00:	75fb      	strb	r3, [r7, #23]
          break;
 800dc02:	e016      	b.n	800dc32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	2b03      	cmp	r3, #3
 800dc0e:	d00f      	beq.n	800dc30 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800dc10:	6839      	ldr	r1, [r7, #0]
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f001 fead 	bl	800f972 <USBD_CtlError>
            ret = USBD_FAIL;
 800dc18:	2303      	movs	r3, #3
 800dc1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dc1c:	e008      	b.n	800dc30 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dc1e:	6839      	ldr	r1, [r7, #0]
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f001 fea6 	bl	800f972 <USBD_CtlError>
          ret = USBD_FAIL;
 800dc26:	2303      	movs	r3, #3
 800dc28:	75fb      	strb	r3, [r7, #23]
          break;
 800dc2a:	e002      	b.n	800dc32 <USBD_CDC_Setup+0x19e>
          break;
 800dc2c:	bf00      	nop
 800dc2e:	e008      	b.n	800dc42 <USBD_CDC_Setup+0x1ae>
          break;
 800dc30:	bf00      	nop
      }
      break;
 800dc32:	e006      	b.n	800dc42 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800dc34:	6839      	ldr	r1, [r7, #0]
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f001 fe9b 	bl	800f972 <USBD_CtlError>
      ret = USBD_FAIL;
 800dc3c:	2303      	movs	r3, #3
 800dc3e:	75fb      	strb	r3, [r7, #23]
      break;
 800dc40:	bf00      	nop
  }

  return (uint8_t)ret;
 800dc42:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3718      	adds	r7, #24
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b084      	sub	sp, #16
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	460b      	mov	r3, r1
 800dc56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dc5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	32b0      	adds	r2, #176	@ 0xb0
 800dc6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d101      	bne.n	800dc76 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800dc72:	2303      	movs	r3, #3
 800dc74:	e065      	b.n	800dd42 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	32b0      	adds	r2, #176	@ 0xb0
 800dc80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dc86:	78fb      	ldrb	r3, [r7, #3]
 800dc88:	f003 020f 	and.w	r2, r3, #15
 800dc8c:	6879      	ldr	r1, [r7, #4]
 800dc8e:	4613      	mov	r3, r2
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	4413      	add	r3, r2
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	440b      	add	r3, r1
 800dc98:	3318      	adds	r3, #24
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d02f      	beq.n	800dd00 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800dca0:	78fb      	ldrb	r3, [r7, #3]
 800dca2:	f003 020f 	and.w	r2, r3, #15
 800dca6:	6879      	ldr	r1, [r7, #4]
 800dca8:	4613      	mov	r3, r2
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	4413      	add	r3, r2
 800dcae:	009b      	lsls	r3, r3, #2
 800dcb0:	440b      	add	r3, r1
 800dcb2:	3318      	adds	r3, #24
 800dcb4:	681a      	ldr	r2, [r3, #0]
 800dcb6:	78fb      	ldrb	r3, [r7, #3]
 800dcb8:	f003 010f 	and.w	r1, r3, #15
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	440b      	add	r3, r1
 800dcc4:	00db      	lsls	r3, r3, #3
 800dcc6:	4403      	add	r3, r0
 800dcc8:	3324      	adds	r3, #36	@ 0x24
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	fbb2 f1f3 	udiv	r1, r2, r3
 800dcd0:	fb01 f303 	mul.w	r3, r1, r3
 800dcd4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d112      	bne.n	800dd00 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800dcda:	78fb      	ldrb	r3, [r7, #3]
 800dcdc:	f003 020f 	and.w	r2, r3, #15
 800dce0:	6879      	ldr	r1, [r7, #4]
 800dce2:	4613      	mov	r3, r2
 800dce4:	009b      	lsls	r3, r3, #2
 800dce6:	4413      	add	r3, r2
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	440b      	add	r3, r1
 800dcec:	3318      	adds	r3, #24
 800dcee:	2200      	movs	r2, #0
 800dcf0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dcf2:	78f9      	ldrb	r1, [r7, #3]
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 fc6e 	bl	800e5da <USBD_LL_Transmit>
 800dcfe:	e01f      	b.n	800dd40 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	2200      	movs	r2, #0
 800dd04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd0e:	687a      	ldr	r2, [r7, #4]
 800dd10:	33b0      	adds	r3, #176	@ 0xb0
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	4413      	add	r3, r2
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	691b      	ldr	r3, [r3, #16]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d010      	beq.n	800dd40 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	33b0      	adds	r3, #176	@ 0xb0
 800dd28:	009b      	lsls	r3, r3, #2
 800dd2a:	4413      	add	r3, r2
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	68ba      	ldr	r2, [r7, #8]
 800dd32:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800dd36:	68ba      	ldr	r2, [r7, #8]
 800dd38:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800dd3c:	78fa      	ldrb	r2, [r7, #3]
 800dd3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b084      	sub	sp, #16
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
 800dd52:	460b      	mov	r3, r1
 800dd54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	32b0      	adds	r2, #176	@ 0xb0
 800dd60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	32b0      	adds	r2, #176	@ 0xb0
 800dd70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d101      	bne.n	800dd7c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800dd78:	2303      	movs	r3, #3
 800dd7a:	e01a      	b.n	800ddb2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dd7c:	78fb      	ldrb	r3, [r7, #3]
 800dd7e:	4619      	mov	r1, r3
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f000 fc60 	bl	800e646 <USBD_LL_GetRxDataSize>
 800dd86:	4602      	mov	r2, r0
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	33b0      	adds	r3, #176	@ 0xb0
 800dd98:	009b      	lsls	r3, r3, #2
 800dd9a:	4413      	add	r3, r2
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	68db      	ldr	r3, [r3, #12]
 800dda0:	68fa      	ldr	r2, [r7, #12]
 800dda2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800dda6:	68fa      	ldr	r2, [r7, #12]
 800dda8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ddac:	4611      	mov	r1, r2
 800ddae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ddb0:	2300      	movs	r3, #0
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b084      	sub	sp, #16
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	32b0      	adds	r2, #176	@ 0xb0
 800ddcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d101      	bne.n	800dddc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ddd8:	2303      	movs	r3, #3
 800ddda:	e024      	b.n	800de26 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dde2:	687a      	ldr	r2, [r7, #4]
 800dde4:	33b0      	adds	r3, #176	@ 0xb0
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	4413      	add	r3, r2
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d019      	beq.n	800de24 <USBD_CDC_EP0_RxReady+0x6a>
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ddf6:	2bff      	cmp	r3, #255	@ 0xff
 800ddf8:	d014      	beq.n	800de24 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	33b0      	adds	r3, #176	@ 0xb0
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	4413      	add	r3, r2
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	689b      	ldr	r3, [r3, #8]
 800de0c:	68fa      	ldr	r2, [r7, #12]
 800de0e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800de12:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800de1a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	22ff      	movs	r2, #255	@ 0xff
 800de20:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800de24:	2300      	movs	r3, #0
}
 800de26:	4618      	mov	r0, r3
 800de28:	3710      	adds	r7, #16
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
	...

0800de30 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800de38:	2182      	movs	r1, #130	@ 0x82
 800de3a:	4818      	ldr	r0, [pc, #96]	@ (800de9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800de3c:	f000 ff63 	bl	800ed06 <USBD_GetEpDesc>
 800de40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800de42:	2101      	movs	r1, #1
 800de44:	4815      	ldr	r0, [pc, #84]	@ (800de9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800de46:	f000 ff5e 	bl	800ed06 <USBD_GetEpDesc>
 800de4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800de4c:	2181      	movs	r1, #129	@ 0x81
 800de4e:	4813      	ldr	r0, [pc, #76]	@ (800de9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800de50:	f000 ff59 	bl	800ed06 <USBD_GetEpDesc>
 800de54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d002      	beq.n	800de62 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	2210      	movs	r2, #16
 800de60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d006      	beq.n	800de76 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	2200      	movs	r2, #0
 800de6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800de70:	711a      	strb	r2, [r3, #4]
 800de72:	2200      	movs	r2, #0
 800de74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d006      	beq.n	800de8a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2200      	movs	r2, #0
 800de80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800de84:	711a      	strb	r2, [r3, #4]
 800de86:	2200      	movs	r2, #0
 800de88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2243      	movs	r2, #67	@ 0x43
 800de8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800de90:	4b02      	ldr	r3, [pc, #8]	@ (800de9c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800de92:	4618      	mov	r0, r3
 800de94:	3718      	adds	r7, #24
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	20000070 	.word	0x20000070

0800dea0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b086      	sub	sp, #24
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dea8:	2182      	movs	r1, #130	@ 0x82
 800deaa:	4818      	ldr	r0, [pc, #96]	@ (800df0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800deac:	f000 ff2b 	bl	800ed06 <USBD_GetEpDesc>
 800deb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800deb2:	2101      	movs	r1, #1
 800deb4:	4815      	ldr	r0, [pc, #84]	@ (800df0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800deb6:	f000 ff26 	bl	800ed06 <USBD_GetEpDesc>
 800deba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800debc:	2181      	movs	r1, #129	@ 0x81
 800debe:	4813      	ldr	r0, [pc, #76]	@ (800df0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dec0:	f000 ff21 	bl	800ed06 <USBD_GetEpDesc>
 800dec4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d002      	beq.n	800ded2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	2210      	movs	r2, #16
 800ded0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d006      	beq.n	800dee6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	2200      	movs	r2, #0
 800dedc:	711a      	strb	r2, [r3, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	f042 0202 	orr.w	r2, r2, #2
 800dee4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d006      	beq.n	800defa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2200      	movs	r2, #0
 800def0:	711a      	strb	r2, [r3, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	f042 0202 	orr.w	r2, r2, #2
 800def8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2243      	movs	r2, #67	@ 0x43
 800defe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800df00:	4b02      	ldr	r3, [pc, #8]	@ (800df0c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800df02:	4618      	mov	r0, r3
 800df04:	3718      	adds	r7, #24
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	20000070 	.word	0x20000070

0800df10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800df18:	2182      	movs	r1, #130	@ 0x82
 800df1a:	4818      	ldr	r0, [pc, #96]	@ (800df7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800df1c:	f000 fef3 	bl	800ed06 <USBD_GetEpDesc>
 800df20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800df22:	2101      	movs	r1, #1
 800df24:	4815      	ldr	r0, [pc, #84]	@ (800df7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800df26:	f000 feee 	bl	800ed06 <USBD_GetEpDesc>
 800df2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800df2c:	2181      	movs	r1, #129	@ 0x81
 800df2e:	4813      	ldr	r0, [pc, #76]	@ (800df7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800df30:	f000 fee9 	bl	800ed06 <USBD_GetEpDesc>
 800df34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d002      	beq.n	800df42 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	2210      	movs	r2, #16
 800df40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d006      	beq.n	800df56 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	2200      	movs	r2, #0
 800df4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800df50:	711a      	strb	r2, [r3, #4]
 800df52:	2200      	movs	r2, #0
 800df54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d006      	beq.n	800df6a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2200      	movs	r2, #0
 800df60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800df64:	711a      	strb	r2, [r3, #4]
 800df66:	2200      	movs	r2, #0
 800df68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2243      	movs	r2, #67	@ 0x43
 800df6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800df70:	4b02      	ldr	r3, [pc, #8]	@ (800df7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800df72:	4618      	mov	r0, r3
 800df74:	3718      	adds	r7, #24
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	20000070 	.word	0x20000070

0800df80 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	220a      	movs	r2, #10
 800df8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800df8e:	4b03      	ldr	r3, [pc, #12]	@ (800df9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800df90:	4618      	mov	r0, r3
 800df92:	370c      	adds	r7, #12
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr
 800df9c:	2000002c 	.word	0x2000002c

0800dfa0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d101      	bne.n	800dfb4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dfb0:	2303      	movs	r3, #3
 800dfb2:	e009      	b.n	800dfc8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	33b0      	adds	r3, #176	@ 0xb0
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	4413      	add	r3, r2
 800dfc2:	683a      	ldr	r2, [r7, #0]
 800dfc4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dfc6:	2300      	movs	r3, #0
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	370c      	adds	r7, #12
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr

0800dfd4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b087      	sub	sp, #28
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	60f8      	str	r0, [r7, #12]
 800dfdc:	60b9      	str	r1, [r7, #8]
 800dfde:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	32b0      	adds	r2, #176	@ 0xb0
 800dfea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d101      	bne.n	800dffa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dff6:	2303      	movs	r3, #3
 800dff8:	e008      	b.n	800e00c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	68ba      	ldr	r2, [r7, #8]
 800dffe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e00a:	2300      	movs	r3, #0
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	371c      	adds	r7, #28
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr

0800e018 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e018:	b480      	push	{r7}
 800e01a:	b085      	sub	sp, #20
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	32b0      	adds	r2, #176	@ 0xb0
 800e02c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e030:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d101      	bne.n	800e03c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e038:	2303      	movs	r3, #3
 800e03a:	e004      	b.n	800e046 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	683a      	ldr	r2, [r7, #0]
 800e040:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e044:	2300      	movs	r3, #0
}
 800e046:	4618      	mov	r0, r3
 800e048:	3714      	adds	r7, #20
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr
	...

0800e054 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b084      	sub	sp, #16
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	32b0      	adds	r2, #176	@ 0xb0
 800e066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e06a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	32b0      	adds	r2, #176	@ 0xb0
 800e076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d101      	bne.n	800e082 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e07e:	2303      	movs	r3, #3
 800e080:	e018      	b.n	800e0b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	7c1b      	ldrb	r3, [r3, #16]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d10a      	bne.n	800e0a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e08a:	4b0c      	ldr	r3, [pc, #48]	@ (800e0bc <USBD_CDC_ReceivePacket+0x68>)
 800e08c:	7819      	ldrb	r1, [r3, #0]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e094:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 fab9 	bl	800e610 <USBD_LL_PrepareReceive>
 800e09e:	e008      	b.n	800e0b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e0a0:	4b06      	ldr	r3, [pc, #24]	@ (800e0bc <USBD_CDC_ReceivePacket+0x68>)
 800e0a2:	7819      	ldrb	r1, [r3, #0]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e0aa:	2340      	movs	r3, #64	@ 0x40
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f000 faaf 	bl	800e610 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e0b2:	2300      	movs	r3, #0
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3710      	adds	r7, #16
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	200000b4 	.word	0x200000b4

0800e0c0 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	4905      	ldr	r1, [pc, #20]	@ (800e0dc <TEMPLATE_Init+0x1c>)
 800e0c8:	4805      	ldr	r0, [pc, #20]	@ (800e0e0 <TEMPLATE_Init+0x20>)
 800e0ca:	f7ff ff83 	bl	800dfd4 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e0ce:	4905      	ldr	r1, [pc, #20]	@ (800e0e4 <TEMPLATE_Init+0x24>)
 800e0d0:	4803      	ldr	r0, [pc, #12]	@ (800e0e0 <TEMPLATE_Init+0x20>)
 800e0d2:	f7ff ffa1 	bl	800e018 <USBD_CDC_SetRxBuffer>
      return (0);
 800e0d6:	2300      	movs	r3, #0
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	20000c98 	.word	0x20000c98
 800e0e0:	20000714 	.word	0x20000714
 800e0e4:	20000a98 	.word	0x20000a98

0800e0e8 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f6:	4770      	bx	lr

0800e0f8 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	4603      	mov	r3, r0
 800e100:	6039      	str	r1, [r7, #0]
 800e102:	71fb      	strb	r3, [r7, #7]
 800e104:	4613      	mov	r3, r2
 800e106:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800e108:	79fb      	ldrb	r3, [r7, #7]
 800e10a:	2b23      	cmp	r3, #35	@ 0x23
 800e10c:	f200 8098 	bhi.w	800e240 <TEMPLATE_Control+0x148>
 800e110:	a201      	add	r2, pc, #4	@ (adr r2, 800e118 <TEMPLATE_Control+0x20>)
 800e112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e116:	bf00      	nop
 800e118:	0800e241 	.word	0x0800e241
 800e11c:	0800e241 	.word	0x0800e241
 800e120:	0800e241 	.word	0x0800e241
 800e124:	0800e241 	.word	0x0800e241
 800e128:	0800e241 	.word	0x0800e241
 800e12c:	0800e241 	.word	0x0800e241
 800e130:	0800e241 	.word	0x0800e241
 800e134:	0800e241 	.word	0x0800e241
 800e138:	0800e241 	.word	0x0800e241
 800e13c:	0800e241 	.word	0x0800e241
 800e140:	0800e241 	.word	0x0800e241
 800e144:	0800e241 	.word	0x0800e241
 800e148:	0800e241 	.word	0x0800e241
 800e14c:	0800e241 	.word	0x0800e241
 800e150:	0800e241 	.word	0x0800e241
 800e154:	0800e241 	.word	0x0800e241
 800e158:	0800e241 	.word	0x0800e241
 800e15c:	0800e241 	.word	0x0800e241
 800e160:	0800e241 	.word	0x0800e241
 800e164:	0800e241 	.word	0x0800e241
 800e168:	0800e241 	.word	0x0800e241
 800e16c:	0800e241 	.word	0x0800e241
 800e170:	0800e241 	.word	0x0800e241
 800e174:	0800e241 	.word	0x0800e241
 800e178:	0800e241 	.word	0x0800e241
 800e17c:	0800e241 	.word	0x0800e241
 800e180:	0800e241 	.word	0x0800e241
 800e184:	0800e241 	.word	0x0800e241
 800e188:	0800e241 	.word	0x0800e241
 800e18c:	0800e241 	.word	0x0800e241
 800e190:	0800e241 	.word	0x0800e241
 800e194:	0800e241 	.word	0x0800e241
 800e198:	0800e1a9 	.word	0x0800e1a9
 800e19c:	0800e1ed 	.word	0x0800e1ed
 800e1a0:	0800e241 	.word	0x0800e241
 800e1a4:	0800e241 	.word	0x0800e241
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	021b      	lsls	r3, r3, #8
 800e1b6:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	3302      	adds	r3, #2
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e1c0:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	3303      	adds	r3, #3
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	061b      	lsls	r3, r3, #24
 800e1ca:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	4b20      	ldr	r3, [pc, #128]	@ (800e250 <TEMPLATE_Control+0x158>)
 800e1d0:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	791a      	ldrb	r2, [r3, #4]
 800e1d6:	4b1e      	ldr	r3, [pc, #120]	@ (800e250 <TEMPLATE_Control+0x158>)
 800e1d8:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	795a      	ldrb	r2, [r3, #5]
 800e1de:	4b1c      	ldr	r3, [pc, #112]	@ (800e250 <TEMPLATE_Control+0x158>)
 800e1e0:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	799a      	ldrb	r2, [r3, #6]
 800e1e6:	4b1a      	ldr	r3, [pc, #104]	@ (800e250 <TEMPLATE_Control+0x158>)
 800e1e8:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800e1ea:	e02a      	b.n	800e242 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800e1ec:	4b18      	ldr	r3, [pc, #96]	@ (800e250 <TEMPLATE_Control+0x158>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	b2da      	uxtb	r2, r3
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800e1f6:	4b16      	ldr	r3, [pc, #88]	@ (800e250 <TEMPLATE_Control+0x158>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	0a1a      	lsrs	r2, r3, #8
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	3301      	adds	r3, #1
 800e200:	b2d2      	uxtb	r2, r2
 800e202:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800e204:	4b12      	ldr	r3, [pc, #72]	@ (800e250 <TEMPLATE_Control+0x158>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	0c1a      	lsrs	r2, r3, #16
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	3302      	adds	r3, #2
 800e20e:	b2d2      	uxtb	r2, r2
 800e210:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800e212:	4b0f      	ldr	r3, [pc, #60]	@ (800e250 <TEMPLATE_Control+0x158>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	0e1a      	lsrs	r2, r3, #24
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	3303      	adds	r3, #3
 800e21c:	b2d2      	uxtb	r2, r2
 800e21e:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	3304      	adds	r3, #4
 800e224:	4a0a      	ldr	r2, [pc, #40]	@ (800e250 <TEMPLATE_Control+0x158>)
 800e226:	7912      	ldrb	r2, [r2, #4]
 800e228:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	3305      	adds	r3, #5
 800e22e:	4a08      	ldr	r2, [pc, #32]	@ (800e250 <TEMPLATE_Control+0x158>)
 800e230:	7952      	ldrb	r2, [r2, #5]
 800e232:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	3306      	adds	r3, #6
 800e238:	4a05      	ldr	r2, [pc, #20]	@ (800e250 <TEMPLATE_Control+0x158>)
 800e23a:	7992      	ldrb	r2, [r2, #6]
 800e23c:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800e23e:	e000      	b.n	800e242 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800e240:	bf00      	nop
  }

  return (0);
 800e242:	2300      	movs	r3, #0
}
 800e244:	4618      	mov	r0, r3
 800e246:	370c      	adds	r7, #12
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr
 800e250:	200000cc 	.word	0x200000cc

0800e254 <TEMPLATE_Receive>:
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
      return (USBD_OK);
}*/

static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800e260:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800e264:	6018      	str	r0, [r3, #0]
 800e266:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800e26a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800e26e:	6019      	str	r1, [r3, #0]
    // Null-terminate if possible
    char temp[LOG_BUFFER_SIZE];
    uint32_t copy_len = (*Len < sizeof(temp) - 1) ? *Len : (sizeof(temp) - 1);
 800e270:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800e274:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e280:	4293      	cmp	r3, r2
 800e282:	bf28      	it	cs
 800e284:	4613      	movcs	r3, r2
 800e286:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    memcpy(temp, Buf, copy_len);
 800e28a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800e28e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800e292:	f107 000c 	add.w	r0, r7, #12
 800e296:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 800e29a:	6819      	ldr	r1, [r3, #0]
 800e29c:	f001 fe0a 	bl	800feb4 <memcpy>
    temp[copy_len] = '\0';
 800e2a0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800e2a4:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 800e2a8:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800e2ac:	4413      	add	r3, r2
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	701a      	strb	r2, [r3, #0]

    log_info("Received USB data: \"%s\"", temp);
 800e2b2:	f107 030c 	add.w	r3, r7, #12
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	4805      	ldr	r0, [pc, #20]	@ (800e2d0 <TEMPLATE_Receive+0x7c>)
 800e2ba:	f7f2 f9e9 	bl	8000690 <log_info>

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e2be:	4805      	ldr	r0, [pc, #20]	@ (800e2d4 <TEMPLATE_Receive+0x80>)
 800e2c0:	f7ff fec8 	bl	800e054 <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 800e2c4:	2300      	movs	r3, #0
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	080107e0 	.word	0x080107e0
 800e2d4:	20000714 	.word	0x20000714

0800e2d8 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b085      	sub	sp, #20
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	60b9      	str	r1, [r7, #8]
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 800e2e6:	2300      	movs	r3, #0

}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3714      	adds	r7, #20
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800e308:	4619      	mov	r1, r3
 800e30a:	4610      	mov	r0, r2
 800e30c:	f000 faa5 	bl	800e85a <USBD_LL_SetupStage>
}
 800e310:	bf00      	nop
 800e312:	3708      	adds	r7, #8
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	460b      	mov	r3, r1
 800e322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800e32a:	78fa      	ldrb	r2, [r7, #3]
 800e32c:	6879      	ldr	r1, [r7, #4]
 800e32e:	4613      	mov	r3, r2
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	4413      	add	r3, r2
 800e334:	00db      	lsls	r3, r3, #3
 800e336:	440b      	add	r3, r1
 800e338:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	78fb      	ldrb	r3, [r7, #3]
 800e340:	4619      	mov	r1, r3
 800e342:	f000 fadf 	bl	800e904 <USBD_LL_DataOutStage>
}
 800e346:	bf00      	nop
 800e348:	3708      	adds	r7, #8
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e34e:	b580      	push	{r7, lr}
 800e350:	b082      	sub	sp, #8
 800e352:	af00      	add	r7, sp, #0
 800e354:	6078      	str	r0, [r7, #4]
 800e356:	460b      	mov	r3, r1
 800e358:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800e360:	78fa      	ldrb	r2, [r7, #3]
 800e362:	6879      	ldr	r1, [r7, #4]
 800e364:	4613      	mov	r3, r2
 800e366:	009b      	lsls	r3, r3, #2
 800e368:	4413      	add	r3, r2
 800e36a:	00db      	lsls	r3, r3, #3
 800e36c:	440b      	add	r3, r1
 800e36e:	3328      	adds	r3, #40	@ 0x28
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	78fb      	ldrb	r3, [r7, #3]
 800e374:	4619      	mov	r1, r3
 800e376:	f000 fb78 	bl	800ea6a <USBD_LL_DataInStage>
}
 800e37a:	bf00      	nop
 800e37c:	3708      	adds	r7, #8
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800e382:	b580      	push	{r7, lr}
 800e384:	b082      	sub	sp, #8
 800e386:	af00      	add	r7, sp, #0
 800e388:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e390:	4618      	mov	r0, r3
 800e392:	f000 fc7e 	bl	800ec92 <USBD_LL_SOF>
}
 800e396:	bf00      	nop
 800e398:	3708      	adds	r7, #8
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800e39e:	b580      	push	{r7, lr}
 800e3a0:	b084      	sub	sp, #16
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	79db      	ldrb	r3, [r3, #7]
 800e3ae:	2b02      	cmp	r3, #2
 800e3b0:	d001      	beq.n	800e3b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e3b2:	f7f2 fdd9 	bl	8000f68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e3bc:	7bfa      	ldrb	r2, [r7, #15]
 800e3be:	4611      	mov	r1, r2
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f000 fc56 	bl	800ec72 <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f000 fbfe 	bl	800ebce <USBD_LL_Reset>
}
 800e3d2:	bf00      	nop
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
	...

0800e3dc <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	4a19      	ldr	r2, [pc, #100]	@ (800e44c <USBD_LL_Init+0x70>)
 800e3e8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e3f2:	2340      	movs	r3, #64	@ 0x40
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	2100      	movs	r1, #0
 800e3f8:	f7f5 feec 	bl	80041d4 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e402:	2380      	movs	r3, #128	@ 0x80
 800e404:	2200      	movs	r2, #0
 800e406:	2180      	movs	r1, #128	@ 0x80
 800e408:	f7f5 fee4 	bl	80041d4 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e412:	23c0      	movs	r3, #192	@ 0xc0
 800e414:	2200      	movs	r2, #0
 800e416:	2181      	movs	r1, #129	@ 0x81
 800e418:	f7f5 fedc 	bl	80041d4 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e422:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e426:	2200      	movs	r2, #0
 800e428:	2101      	movs	r1, #1
 800e42a:	f7f5 fed3 	bl	80041d4 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e434:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800e438:	2200      	movs	r2, #0
 800e43a:	2182      	movs	r1, #130	@ 0x82
 800e43c:	f7f5 feca 	bl	80041d4 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800e440:	2300      	movs	r3, #0
}
 800e442:	4618      	mov	r0, r3
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	20000430 	.word	0x20000430

0800e450 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e45e:	4618      	mov	r0, r3
 800e460:	f7f4 fb9c 	bl	8002b9c <HAL_PCD_Start>
 800e464:	4603      	mov	r3, r0
 800e466:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800e468:	7bfb      	ldrb	r3, [r7, #15]
 800e46a:	4618      	mov	r0, r3
 800e46c:	f000 f916 	bl	800e69c <USBD_Get_USB_Status>
 800e470:	4603      	mov	r3, r0
}
 800e472:	4618      	mov	r0, r3
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}

0800e47a <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b084      	sub	sp, #16
 800e47e:	af00      	add	r7, sp, #0
 800e480:	6078      	str	r0, [r7, #4]
 800e482:	4608      	mov	r0, r1
 800e484:	4611      	mov	r1, r2
 800e486:	461a      	mov	r2, r3
 800e488:	4603      	mov	r3, r0
 800e48a:	70fb      	strb	r3, [r7, #3]
 800e48c:	460b      	mov	r3, r1
 800e48e:	70bb      	strb	r3, [r7, #2]
 800e490:	4613      	mov	r3, r2
 800e492:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e49a:	78bb      	ldrb	r3, [r7, #2]
 800e49c:	883a      	ldrh	r2, [r7, #0]
 800e49e:	78f9      	ldrb	r1, [r7, #3]
 800e4a0:	f7f4 fccb 	bl	8002e3a <HAL_PCD_EP_Open>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e4a8:	7bfb      	ldrb	r3, [r7, #15]
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f000 f8f6 	bl	800e69c <USBD_Get_USB_Status>
 800e4b0:	4603      	mov	r3, r0
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3710      	adds	r7, #16
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}

0800e4ba <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4ba:	b580      	push	{r7, lr}
 800e4bc:	b084      	sub	sp, #16
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4cc:	78fa      	ldrb	r2, [r7, #3]
 800e4ce:	4611      	mov	r1, r2
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7f4 fd13 	bl	8002efc <HAL_PCD_EP_Close>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e4da:	7bfb      	ldrb	r3, [r7, #15]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f000 f8dd 	bl	800e69c <USBD_Get_USB_Status>
 800e4e2:	4603      	mov	r3, r0
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3710      	adds	r7, #16
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4fe:	78fa      	ldrb	r2, [r7, #3]
 800e500:	4611      	mov	r1, r2
 800e502:	4618      	mov	r0, r3
 800e504:	f7f4 fdc6 	bl	8003094 <HAL_PCD_EP_SetStall>
 800e508:	4603      	mov	r3, r0
 800e50a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e50c:	7bfb      	ldrb	r3, [r7, #15]
 800e50e:	4618      	mov	r0, r3
 800e510:	f000 f8c4 	bl	800e69c <USBD_Get_USB_Status>
 800e514:	4603      	mov	r3, r0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3710      	adds	r7, #16
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}

0800e51e <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800e51e:	b580      	push	{r7, lr}
 800e520:	b084      	sub	sp, #16
 800e522:	af00      	add	r7, sp, #0
 800e524:	6078      	str	r0, [r7, #4]
 800e526:	460b      	mov	r3, r1
 800e528:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e530:	78fa      	ldrb	r2, [r7, #3]
 800e532:	4611      	mov	r1, r2
 800e534:	4618      	mov	r0, r3
 800e536:	f7f4 fe01 	bl	800313c <HAL_PCD_EP_ClrStall>
 800e53a:	4603      	mov	r3, r0
 800e53c:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e53e:	7bfb      	ldrb	r3, [r7, #15]
 800e540:	4618      	mov	r0, r3
 800e542:	f000 f8ab 	bl	800e69c <USBD_Get_USB_Status>
 800e546:	4603      	mov	r3, r0
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3710      	adds	r7, #16
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e550:	b480      	push	{r7}
 800e552:	b085      	sub	sp, #20
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	460b      	mov	r3, r1
 800e55a:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e562:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800e564:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	da0b      	bge.n	800e584 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e56c:	78fb      	ldrb	r3, [r7, #3]
 800e56e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e572:	68f9      	ldr	r1, [r7, #12]
 800e574:	4613      	mov	r3, r2
 800e576:	009b      	lsls	r3, r3, #2
 800e578:	4413      	add	r3, r2
 800e57a:	00db      	lsls	r3, r3, #3
 800e57c:	440b      	add	r3, r1
 800e57e:	3316      	adds	r3, #22
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	e00b      	b.n	800e59c <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e584:	78fb      	ldrb	r3, [r7, #3]
 800e586:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e58a:	68f9      	ldr	r1, [r7, #12]
 800e58c:	4613      	mov	r3, r2
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	4413      	add	r3, r2
 800e592:	00db      	lsls	r3, r3, #3
 800e594:	440b      	add	r3, r1
 800e596:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800e59a:	781b      	ldrb	r3, [r3, #0]
      }
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3714      	adds	r7, #20
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr

0800e5a8 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e5ba:	78fa      	ldrb	r2, [r7, #3]
 800e5bc:	4611      	mov	r1, r2
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7f4 fc17 	bl	8002df2 <HAL_PCD_SetAddress>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e5c8:	7bfb      	ldrb	r3, [r7, #15]
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f000 f866 	bl	800e69c <USBD_Get_USB_Status>
 800e5d0:	4603      	mov	r3, r0
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3710      	adds	r7, #16
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}

0800e5da <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800e5da:	b580      	push	{r7, lr}
 800e5dc:	b086      	sub	sp, #24
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	60f8      	str	r0, [r7, #12]
 800e5e2:	607a      	str	r2, [r7, #4]
 800e5e4:	603b      	str	r3, [r7, #0]
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e5f0:	7af9      	ldrb	r1, [r7, #11]
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	f7f4 fd15 	bl	8003024 <HAL_PCD_EP_Transmit>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800e5fe:	7dfb      	ldrb	r3, [r7, #23]
 800e600:	4618      	mov	r0, r3
 800e602:	f000 f84b 	bl	800e69c <USBD_Get_USB_Status>
 800e606:	4603      	mov	r3, r0
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3718      	adds	r7, #24
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b086      	sub	sp, #24
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	607a      	str	r2, [r7, #4]
 800e61a:	603b      	str	r3, [r7, #0]
 800e61c:	460b      	mov	r3, r1
 800e61e:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e626:	7af9      	ldrb	r1, [r7, #11]
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	f7f4 fcb0 	bl	8002f90 <HAL_PCD_EP_Receive>
 800e630:	4603      	mov	r3, r0
 800e632:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800e634:	7dfb      	ldrb	r3, [r7, #23]
 800e636:	4618      	mov	r0, r3
 800e638:	f000 f830 	bl	800e69c <USBD_Get_USB_Status>
 800e63c:	4603      	mov	r3, r0
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3718      	adds	r7, #24
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}

0800e646 <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e646:	b580      	push	{r7, lr}
 800e648:	b082      	sub	sp, #8
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
 800e64e:	460b      	mov	r3, r1
 800e650:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e658:	78fa      	ldrb	r2, [r7, #3]
 800e65a:	4611      	mov	r1, r2
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7f4 fcc9 	bl	8002ff4 <HAL_PCD_EP_GetRxCount>
 800e662:	4603      	mov	r3, r0
}
 800e664:	4618      	mov	r0, r3
 800e666:	3708      	adds	r7, #8
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}

0800e66c <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800e674:	4b03      	ldr	r3, [pc, #12]	@ (800e684 <USBD_static_malloc+0x18>)
}
 800e676:	4618      	mov	r0, r3
 800e678:	370c      	adds	r7, #12
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr
 800e682:	bf00      	nop
 800e684:	20000e98 	.word	0x20000e98

0800e688 <USBD_static_free>:

void USBD_static_free(void *p)
{
 800e688:	b480      	push	{r7}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800e690:	bf00      	nop
 800e692:	370c      	adds	r7, #12
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr

0800e69c <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b085      	sub	sp, #20
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800e6aa:	79fb      	ldrb	r3, [r7, #7]
 800e6ac:	2b03      	cmp	r3, #3
 800e6ae:	d817      	bhi.n	800e6e0 <USBD_Get_USB_Status+0x44>
 800e6b0:	a201      	add	r2, pc, #4	@ (adr r2, 800e6b8 <USBD_Get_USB_Status+0x1c>)
 800e6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b6:	bf00      	nop
 800e6b8:	0800e6c9 	.word	0x0800e6c9
 800e6bc:	0800e6cf 	.word	0x0800e6cf
 800e6c0:	0800e6d5 	.word	0x0800e6d5
 800e6c4:	0800e6db 	.word	0x0800e6db
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	73fb      	strb	r3, [r7, #15]
             break;
 800e6cc:	e00b      	b.n	800e6e6 <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800e6ce:	2303      	movs	r3, #3
 800e6d0:	73fb      	strb	r3, [r7, #15]
             break;
 800e6d2:	e008      	b.n	800e6e6 <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	73fb      	strb	r3, [r7, #15]
             break;
 800e6d8:	e005      	b.n	800e6e6 <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800e6da:	2303      	movs	r3, #3
 800e6dc:	73fb      	strb	r3, [r7, #15]
             break;
 800e6de:	e002      	b.n	800e6e6 <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800e6e0:	2303      	movs	r3, #3
 800e6e2:	73fb      	strb	r3, [r7, #15]
             break;
 800e6e4:	bf00      	nop
      }
      return usb_status;
 800e6e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3714      	adds	r7, #20
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr

0800e6f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b086      	sub	sp, #24
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	60b9      	str	r1, [r7, #8]
 800e6fe:	4613      	mov	r3, r2
 800e700:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d101      	bne.n	800e70c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e708:	2303      	movs	r3, #3
 800e70a:	e01f      	b.n	800e74c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2200      	movs	r2, #0
 800e710:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2200      	movs	r2, #0
 800e718:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2200      	movs	r2, #0
 800e720:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d003      	beq.n	800e732 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	68ba      	ldr	r2, [r7, #8]
 800e72e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2201      	movs	r2, #1
 800e736:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	79fa      	ldrb	r2, [r7, #7]
 800e73e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e740:	68f8      	ldr	r0, [r7, #12]
 800e742:	f7ff fe4b 	bl	800e3dc <USBD_LL_Init>
 800e746:	4603      	mov	r3, r0
 800e748:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e74a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3718      	adds	r7, #24
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e75e:	2300      	movs	r3, #0
 800e760:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d101      	bne.n	800e76c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e768:	2303      	movs	r3, #3
 800e76a:	e025      	b.n	800e7b8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	683a      	ldr	r2, [r7, #0]
 800e770:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	32ae      	adds	r2, #174	@ 0xae
 800e77e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e784:	2b00      	cmp	r3, #0
 800e786:	d00f      	beq.n	800e7a8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	32ae      	adds	r2, #174	@ 0xae
 800e792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e798:	f107 020e 	add.w	r2, r7, #14
 800e79c:	4610      	mov	r0, r2
 800e79e:	4798      	blx	r3
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e7ae:	1c5a      	adds	r2, r3, #1
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e7b6:	2300      	movs	r3, #0
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3710      	adds	r7, #16
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}

0800e7c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f7ff fe41 	bl	800e450 <USBD_LL_Start>
 800e7ce:	4603      	mov	r3, r0
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e7e0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	370c      	adds	r7, #12
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ec:	4770      	bx	lr

0800e7ee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b084      	sub	sp, #16
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	6078      	str	r0, [r7, #4]
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e804:	2b00      	cmp	r3, #0
 800e806:	d009      	beq.n	800e81c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	78fa      	ldrb	r2, [r7, #3]
 800e812:	4611      	mov	r1, r2
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	4798      	blx	r3
 800e818:	4603      	mov	r3, r0
 800e81a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3710      	adds	r7, #16
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}

0800e826 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e826:	b580      	push	{r7, lr}
 800e828:	b084      	sub	sp, #16
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	6078      	str	r0, [r7, #4]
 800e82e:	460b      	mov	r3, r1
 800e830:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e832:	2300      	movs	r3, #0
 800e834:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	78fa      	ldrb	r2, [r7, #3]
 800e840:	4611      	mov	r1, r2
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	4798      	blx	r3
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d001      	beq.n	800e850 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e84c:	2303      	movs	r3, #3
 800e84e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e850:	7bfb      	ldrb	r3, [r7, #15]
}
 800e852:	4618      	mov	r0, r3
 800e854:	3710      	adds	r7, #16
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}

0800e85a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b084      	sub	sp, #16
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
 800e862:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e86a:	6839      	ldr	r1, [r7, #0]
 800e86c:	4618      	mov	r0, r3
 800e86e:	f001 f846 	bl	800f8fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2201      	movs	r2, #1
 800e876:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e880:	461a      	mov	r2, r3
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e88e:	f003 031f 	and.w	r3, r3, #31
 800e892:	2b02      	cmp	r3, #2
 800e894:	d01a      	beq.n	800e8cc <USBD_LL_SetupStage+0x72>
 800e896:	2b02      	cmp	r3, #2
 800e898:	d822      	bhi.n	800e8e0 <USBD_LL_SetupStage+0x86>
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d002      	beq.n	800e8a4 <USBD_LL_SetupStage+0x4a>
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	d00a      	beq.n	800e8b8 <USBD_LL_SetupStage+0x5e>
 800e8a2:	e01d      	b.n	800e8e0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f000 fa9d 	bl	800edec <USBD_StdDevReq>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	73fb      	strb	r3, [r7, #15]
      break;
 800e8b6:	e020      	b.n	800e8fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e8be:	4619      	mov	r1, r3
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f000 fb05 	bl	800eed0 <USBD_StdItfReq>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	73fb      	strb	r3, [r7, #15]
      break;
 800e8ca:	e016      	b.n	800e8fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 fb67 	bl	800efa8 <USBD_StdEPReq>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	73fb      	strb	r3, [r7, #15]
      break;
 800e8de:	e00c      	b.n	800e8fa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e8e6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f7ff fdfc 	bl	800e4ec <USBD_LL_StallEP>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	73fb      	strb	r3, [r7, #15]
      break;
 800e8f8:	bf00      	nop
  }

  return ret;
 800e8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3710      	adds	r7, #16
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b086      	sub	sp, #24
 800e908:	af00      	add	r7, sp, #0
 800e90a:	60f8      	str	r0, [r7, #12]
 800e90c:	460b      	mov	r3, r1
 800e90e:	607a      	str	r2, [r7, #4]
 800e910:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e912:	2300      	movs	r3, #0
 800e914:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e916:	7afb      	ldrb	r3, [r7, #11]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d16e      	bne.n	800e9fa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e922:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e92a:	2b03      	cmp	r3, #3
 800e92c:	f040 8098 	bne.w	800ea60 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	689a      	ldr	r2, [r3, #8]
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	429a      	cmp	r2, r3
 800e93a:	d913      	bls.n	800e964 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	689a      	ldr	r2, [r3, #8]
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	68db      	ldr	r3, [r3, #12]
 800e944:	1ad2      	subs	r2, r2, r3
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	68da      	ldr	r2, [r3, #12]
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	689b      	ldr	r3, [r3, #8]
 800e952:	4293      	cmp	r3, r2
 800e954:	bf28      	it	cs
 800e956:	4613      	movcs	r3, r2
 800e958:	461a      	mov	r2, r3
 800e95a:	6879      	ldr	r1, [r7, #4]
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f001 f9cf 	bl	800fd00 <USBD_CtlContinueRx>
 800e962:	e07d      	b.n	800ea60 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e96a:	f003 031f 	and.w	r3, r3, #31
 800e96e:	2b02      	cmp	r3, #2
 800e970:	d014      	beq.n	800e99c <USBD_LL_DataOutStage+0x98>
 800e972:	2b02      	cmp	r3, #2
 800e974:	d81d      	bhi.n	800e9b2 <USBD_LL_DataOutStage+0xae>
 800e976:	2b00      	cmp	r3, #0
 800e978:	d002      	beq.n	800e980 <USBD_LL_DataOutStage+0x7c>
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	d003      	beq.n	800e986 <USBD_LL_DataOutStage+0x82>
 800e97e:	e018      	b.n	800e9b2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e980:	2300      	movs	r3, #0
 800e982:	75bb      	strb	r3, [r7, #22]
            break;
 800e984:	e018      	b.n	800e9b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e98c:	b2db      	uxtb	r3, r3
 800e98e:	4619      	mov	r1, r3
 800e990:	68f8      	ldr	r0, [r7, #12]
 800e992:	f000 f99e 	bl	800ecd2 <USBD_CoreFindIF>
 800e996:	4603      	mov	r3, r0
 800e998:	75bb      	strb	r3, [r7, #22]
            break;
 800e99a:	e00d      	b.n	800e9b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	68f8      	ldr	r0, [r7, #12]
 800e9a8:	f000 f9a0 	bl	800ecec <USBD_CoreFindEP>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	75bb      	strb	r3, [r7, #22]
            break;
 800e9b0:	e002      	b.n	800e9b8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	75bb      	strb	r3, [r7, #22]
            break;
 800e9b6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e9b8:	7dbb      	ldrb	r3, [r7, #22]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d119      	bne.n	800e9f2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	2b03      	cmp	r3, #3
 800e9c8:	d113      	bne.n	800e9f2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e9ca:	7dba      	ldrb	r2, [r7, #22]
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	32ae      	adds	r2, #174	@ 0xae
 800e9d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9d4:	691b      	ldr	r3, [r3, #16]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d00b      	beq.n	800e9f2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e9da:	7dba      	ldrb	r2, [r7, #22]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e9e2:	7dba      	ldrb	r2, [r7, #22]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	32ae      	adds	r2, #174	@ 0xae
 800e9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9ec:	691b      	ldr	r3, [r3, #16]
 800e9ee:	68f8      	ldr	r0, [r7, #12]
 800e9f0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	f001 f995 	bl	800fd22 <USBD_CtlSendStatus>
 800e9f8:	e032      	b.n	800ea60 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e9fa:	7afb      	ldrb	r3, [r7, #11]
 800e9fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	4619      	mov	r1, r3
 800ea04:	68f8      	ldr	r0, [r7, #12]
 800ea06:	f000 f971 	bl	800ecec <USBD_CoreFindEP>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea0e:	7dbb      	ldrb	r3, [r7, #22]
 800ea10:	2bff      	cmp	r3, #255	@ 0xff
 800ea12:	d025      	beq.n	800ea60 <USBD_LL_DataOutStage+0x15c>
 800ea14:	7dbb      	ldrb	r3, [r7, #22]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d122      	bne.n	800ea60 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	2b03      	cmp	r3, #3
 800ea24:	d117      	bne.n	800ea56 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ea26:	7dba      	ldrb	r2, [r7, #22]
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	32ae      	adds	r2, #174	@ 0xae
 800ea2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea30:	699b      	ldr	r3, [r3, #24]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d00f      	beq.n	800ea56 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ea36:	7dba      	ldrb	r2, [r7, #22]
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ea3e:	7dba      	ldrb	r2, [r7, #22]
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	32ae      	adds	r2, #174	@ 0xae
 800ea44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea48:	699b      	ldr	r3, [r3, #24]
 800ea4a:	7afa      	ldrb	r2, [r7, #11]
 800ea4c:	4611      	mov	r1, r2
 800ea4e:	68f8      	ldr	r0, [r7, #12]
 800ea50:	4798      	blx	r3
 800ea52:	4603      	mov	r3, r0
 800ea54:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ea56:	7dfb      	ldrb	r3, [r7, #23]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d001      	beq.n	800ea60 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ea5c:	7dfb      	ldrb	r3, [r7, #23]
 800ea5e:	e000      	b.n	800ea62 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ea60:	2300      	movs	r3, #0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3718      	adds	r7, #24
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b086      	sub	sp, #24
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	60f8      	str	r0, [r7, #12]
 800ea72:	460b      	mov	r3, r1
 800ea74:	607a      	str	r2, [r7, #4]
 800ea76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ea78:	7afb      	ldrb	r3, [r7, #11]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d16f      	bne.n	800eb5e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	3314      	adds	r3, #20
 800ea82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ea8a:	2b02      	cmp	r3, #2
 800ea8c:	d15a      	bne.n	800eb44 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	689a      	ldr	r2, [r3, #8]
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d914      	bls.n	800eac4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	689a      	ldr	r2, [r3, #8]
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	68db      	ldr	r3, [r3, #12]
 800eaa2:	1ad2      	subs	r2, r2, r3
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	689b      	ldr	r3, [r3, #8]
 800eaac:	461a      	mov	r2, r3
 800eaae:	6879      	ldr	r1, [r7, #4]
 800eab0:	68f8      	ldr	r0, [r7, #12]
 800eab2:	f001 f8f7 	bl	800fca4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eab6:	2300      	movs	r3, #0
 800eab8:	2200      	movs	r2, #0
 800eaba:	2100      	movs	r1, #0
 800eabc:	68f8      	ldr	r0, [r7, #12]
 800eabe:	f7ff fda7 	bl	800e610 <USBD_LL_PrepareReceive>
 800eac2:	e03f      	b.n	800eb44 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	68da      	ldr	r2, [r3, #12]
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	689b      	ldr	r3, [r3, #8]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d11c      	bne.n	800eb0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	685a      	ldr	r2, [r3, #4]
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ead8:	429a      	cmp	r2, r3
 800eada:	d316      	bcc.n	800eb0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	685a      	ldr	r2, [r3, #4]
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d20f      	bcs.n	800eb0a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800eaea:	2200      	movs	r2, #0
 800eaec:	2100      	movs	r1, #0
 800eaee:	68f8      	ldr	r0, [r7, #12]
 800eaf0:	f001 f8d8 	bl	800fca4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eafc:	2300      	movs	r3, #0
 800eafe:	2200      	movs	r2, #0
 800eb00:	2100      	movs	r1, #0
 800eb02:	68f8      	ldr	r0, [r7, #12]
 800eb04:	f7ff fd84 	bl	800e610 <USBD_LL_PrepareReceive>
 800eb08:	e01c      	b.n	800eb44 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb10:	b2db      	uxtb	r3, r3
 800eb12:	2b03      	cmp	r3, #3
 800eb14:	d10f      	bne.n	800eb36 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb1c:	68db      	ldr	r3, [r3, #12]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d009      	beq.n	800eb36 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2200      	movs	r2, #0
 800eb26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb30:	68db      	ldr	r3, [r3, #12]
 800eb32:	68f8      	ldr	r0, [r7, #12]
 800eb34:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb36:	2180      	movs	r1, #128	@ 0x80
 800eb38:	68f8      	ldr	r0, [r7, #12]
 800eb3a:	f7ff fcd7 	bl	800e4ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800eb3e:	68f8      	ldr	r0, [r7, #12]
 800eb40:	f001 f902 	bl	800fd48 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d03a      	beq.n	800ebc4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800eb4e:	68f8      	ldr	r0, [r7, #12]
 800eb50:	f7ff fe42 	bl	800e7d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2200      	movs	r2, #0
 800eb58:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800eb5c:	e032      	b.n	800ebc4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800eb5e:	7afb      	ldrb	r3, [r7, #11]
 800eb60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	4619      	mov	r1, r3
 800eb68:	68f8      	ldr	r0, [r7, #12]
 800eb6a:	f000 f8bf 	bl	800ecec <USBD_CoreFindEP>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eb72:	7dfb      	ldrb	r3, [r7, #23]
 800eb74:	2bff      	cmp	r3, #255	@ 0xff
 800eb76:	d025      	beq.n	800ebc4 <USBD_LL_DataInStage+0x15a>
 800eb78:	7dfb      	ldrb	r3, [r7, #23]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d122      	bne.n	800ebc4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	2b03      	cmp	r3, #3
 800eb88:	d11c      	bne.n	800ebc4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800eb8a:	7dfa      	ldrb	r2, [r7, #23]
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	32ae      	adds	r2, #174	@ 0xae
 800eb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb94:	695b      	ldr	r3, [r3, #20]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d014      	beq.n	800ebc4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800eb9a:	7dfa      	ldrb	r2, [r7, #23]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800eba2:	7dfa      	ldrb	r2, [r7, #23]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	32ae      	adds	r2, #174	@ 0xae
 800eba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebac:	695b      	ldr	r3, [r3, #20]
 800ebae:	7afa      	ldrb	r2, [r7, #11]
 800ebb0:	4611      	mov	r1, r2
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	4798      	blx	r3
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ebba:	7dbb      	ldrb	r3, [r7, #22]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d001      	beq.n	800ebc4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ebc0:	7dbb      	ldrb	r3, [r7, #22]
 800ebc2:	e000      	b.n	800ebc6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ebc4:	2300      	movs	r3, #0
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3718      	adds	r7, #24
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}

0800ebce <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ebce:	b580      	push	{r7, lr}
 800ebd0:	b084      	sub	sp, #16
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2201      	movs	r2, #1
 800ebde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2200      	movs	r2, #0
 800ebee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d014      	beq.n	800ec34 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d00e      	beq.n	800ec34 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	6852      	ldr	r2, [r2, #4]
 800ec22:	b2d2      	uxtb	r2, r2
 800ec24:	4611      	mov	r1, r2
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	4798      	blx	r3
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d001      	beq.n	800ec34 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ec30:	2303      	movs	r3, #3
 800ec32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec34:	2340      	movs	r3, #64	@ 0x40
 800ec36:	2200      	movs	r2, #0
 800ec38:	2100      	movs	r1, #0
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f7ff fc1d 	bl	800e47a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2201      	movs	r2, #1
 800ec44:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2240      	movs	r2, #64	@ 0x40
 800ec4c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec50:	2340      	movs	r3, #64	@ 0x40
 800ec52:	2200      	movs	r2, #0
 800ec54:	2180      	movs	r1, #128	@ 0x80
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f7ff fc0f 	bl	800e47a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2201      	movs	r2, #1
 800ec60:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2240      	movs	r2, #64	@ 0x40
 800ec66:	621a      	str	r2, [r3, #32]

  return ret;
 800ec68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3710      	adds	r7, #16
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ec72:	b480      	push	{r7}
 800ec74:	b083      	sub	sp, #12
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
 800ec7a:	460b      	mov	r3, r1
 800ec7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	78fa      	ldrb	r2, [r7, #3]
 800ec82:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ec84:	2300      	movs	r3, #0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	370c      	adds	r7, #12
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec90:	4770      	bx	lr

0800ec92 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ec92:	b580      	push	{r7, lr}
 800ec94:	b082      	sub	sp, #8
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eca0:	b2db      	uxtb	r3, r3
 800eca2:	2b03      	cmp	r3, #3
 800eca4:	d110      	bne.n	800ecc8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d00b      	beq.n	800ecc8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecb6:	69db      	ldr	r3, [r3, #28]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d005      	beq.n	800ecc8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecc2:	69db      	ldr	r3, [r3, #28]
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ecc8:	2300      	movs	r3, #0
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}

0800ecd2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ecd2:	b480      	push	{r7}
 800ecd4:	b083      	sub	sp, #12
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
 800ecda:	460b      	mov	r3, r1
 800ecdc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ecde:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	370c      	adds	r7, #12
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr

0800ecec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ecf8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	370c      	adds	r7, #12
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr

0800ed06 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ed06:	b580      	push	{r7, lr}
 800ed08:	b086      	sub	sp, #24
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	6078      	str	r0, [r7, #4]
 800ed0e:	460b      	mov	r3, r1
 800ed10:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	885b      	ldrh	r3, [r3, #2]
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	68fa      	ldr	r2, [r7, #12]
 800ed26:	7812      	ldrb	r2, [r2, #0]
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d91f      	bls.n	800ed6c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ed32:	e013      	b.n	800ed5c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ed34:	f107 030a 	add.w	r3, r7, #10
 800ed38:	4619      	mov	r1, r3
 800ed3a:	6978      	ldr	r0, [r7, #20]
 800ed3c:	f000 f81b 	bl	800ed76 <USBD_GetNextDesc>
 800ed40:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	785b      	ldrb	r3, [r3, #1]
 800ed46:	2b05      	cmp	r3, #5
 800ed48:	d108      	bne.n	800ed5c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	789b      	ldrb	r3, [r3, #2]
 800ed52:	78fa      	ldrb	r2, [r7, #3]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d008      	beq.n	800ed6a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	885b      	ldrh	r3, [r3, #2]
 800ed60:	b29a      	uxth	r2, r3
 800ed62:	897b      	ldrh	r3, [r7, #10]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d8e5      	bhi.n	800ed34 <USBD_GetEpDesc+0x2e>
 800ed68:	e000      	b.n	800ed6c <USBD_GetEpDesc+0x66>
          break;
 800ed6a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ed6c:	693b      	ldr	r3, [r7, #16]
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3718      	adds	r7, #24
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}

0800ed76 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ed76:	b480      	push	{r7}
 800ed78:	b085      	sub	sp, #20
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
 800ed7e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	881b      	ldrh	r3, [r3, #0]
 800ed88:	68fa      	ldr	r2, [r7, #12]
 800ed8a:	7812      	ldrb	r2, [r2, #0]
 800ed8c:	4413      	add	r3, r2
 800ed8e:	b29a      	uxth	r2, r3
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	461a      	mov	r2, r3
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800eda0:	68fb      	ldr	r3, [r7, #12]
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3714      	adds	r7, #20
 800eda6:	46bd      	mov	sp, r7
 800eda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edac:	4770      	bx	lr

0800edae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800edae:	b480      	push	{r7}
 800edb0:	b087      	sub	sp, #28
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	3301      	adds	r3, #1
 800edc4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800edcc:	8a3b      	ldrh	r3, [r7, #16]
 800edce:	021b      	lsls	r3, r3, #8
 800edd0:	b21a      	sxth	r2, r3
 800edd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800edd6:	4313      	orrs	r3, r2
 800edd8:	b21b      	sxth	r3, r3
 800edda:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800eddc:	89fb      	ldrh	r3, [r7, #14]
}
 800edde:	4618      	mov	r0, r3
 800ede0:	371c      	adds	r7, #28
 800ede2:	46bd      	mov	sp, r7
 800ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede8:	4770      	bx	lr
	...

0800edec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800edf6:	2300      	movs	r3, #0
 800edf8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ee02:	2b40      	cmp	r3, #64	@ 0x40
 800ee04:	d005      	beq.n	800ee12 <USBD_StdDevReq+0x26>
 800ee06:	2b40      	cmp	r3, #64	@ 0x40
 800ee08:	d857      	bhi.n	800eeba <USBD_StdDevReq+0xce>
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d00f      	beq.n	800ee2e <USBD_StdDevReq+0x42>
 800ee0e:	2b20      	cmp	r3, #32
 800ee10:	d153      	bne.n	800eeba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	32ae      	adds	r2, #174	@ 0xae
 800ee1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee20:	689b      	ldr	r3, [r3, #8]
 800ee22:	6839      	ldr	r1, [r7, #0]
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	4798      	blx	r3
 800ee28:	4603      	mov	r3, r0
 800ee2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ee2c:	e04a      	b.n	800eec4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	785b      	ldrb	r3, [r3, #1]
 800ee32:	2b09      	cmp	r3, #9
 800ee34:	d83b      	bhi.n	800eeae <USBD_StdDevReq+0xc2>
 800ee36:	a201      	add	r2, pc, #4	@ (adr r2, 800ee3c <USBD_StdDevReq+0x50>)
 800ee38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3c:	0800ee91 	.word	0x0800ee91
 800ee40:	0800eea5 	.word	0x0800eea5
 800ee44:	0800eeaf 	.word	0x0800eeaf
 800ee48:	0800ee9b 	.word	0x0800ee9b
 800ee4c:	0800eeaf 	.word	0x0800eeaf
 800ee50:	0800ee6f 	.word	0x0800ee6f
 800ee54:	0800ee65 	.word	0x0800ee65
 800ee58:	0800eeaf 	.word	0x0800eeaf
 800ee5c:	0800ee87 	.word	0x0800ee87
 800ee60:	0800ee79 	.word	0x0800ee79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ee64:	6839      	ldr	r1, [r7, #0]
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f000 fa3c 	bl	800f2e4 <USBD_GetDescriptor>
          break;
 800ee6c:	e024      	b.n	800eeb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ee6e:	6839      	ldr	r1, [r7, #0]
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f000 fba1 	bl	800f5b8 <USBD_SetAddress>
          break;
 800ee76:	e01f      	b.n	800eeb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ee78:	6839      	ldr	r1, [r7, #0]
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f000 fbe0 	bl	800f640 <USBD_SetConfig>
 800ee80:	4603      	mov	r3, r0
 800ee82:	73fb      	strb	r3, [r7, #15]
          break;
 800ee84:	e018      	b.n	800eeb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ee86:	6839      	ldr	r1, [r7, #0]
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 fc83 	bl	800f794 <USBD_GetConfig>
          break;
 800ee8e:	e013      	b.n	800eeb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ee90:	6839      	ldr	r1, [r7, #0]
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f000 fcb4 	bl	800f800 <USBD_GetStatus>
          break;
 800ee98:	e00e      	b.n	800eeb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ee9a:	6839      	ldr	r1, [r7, #0]
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 fce3 	bl	800f868 <USBD_SetFeature>
          break;
 800eea2:	e009      	b.n	800eeb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800eea4:	6839      	ldr	r1, [r7, #0]
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f000 fd07 	bl	800f8ba <USBD_ClrFeature>
          break;
 800eeac:	e004      	b.n	800eeb8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800eeae:	6839      	ldr	r1, [r7, #0]
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f000 fd5e 	bl	800f972 <USBD_CtlError>
          break;
 800eeb6:	bf00      	nop
      }
      break;
 800eeb8:	e004      	b.n	800eec4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800eeba:	6839      	ldr	r1, [r7, #0]
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 fd58 	bl	800f972 <USBD_CtlError>
      break;
 800eec2:	bf00      	nop
  }

  return ret;
 800eec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	3710      	adds	r7, #16
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop

0800eed0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eeda:	2300      	movs	r3, #0
 800eedc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eee6:	2b40      	cmp	r3, #64	@ 0x40
 800eee8:	d005      	beq.n	800eef6 <USBD_StdItfReq+0x26>
 800eeea:	2b40      	cmp	r3, #64	@ 0x40
 800eeec:	d852      	bhi.n	800ef94 <USBD_StdItfReq+0xc4>
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d001      	beq.n	800eef6 <USBD_StdItfReq+0x26>
 800eef2:	2b20      	cmp	r3, #32
 800eef4:	d14e      	bne.n	800ef94 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	3b01      	subs	r3, #1
 800ef00:	2b02      	cmp	r3, #2
 800ef02:	d840      	bhi.n	800ef86 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	889b      	ldrh	r3, [r3, #4]
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	2b01      	cmp	r3, #1
 800ef0c:	d836      	bhi.n	800ef7c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	889b      	ldrh	r3, [r3, #4]
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	4619      	mov	r1, r3
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f7ff fedb 	bl	800ecd2 <USBD_CoreFindIF>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ef20:	7bbb      	ldrb	r3, [r7, #14]
 800ef22:	2bff      	cmp	r3, #255	@ 0xff
 800ef24:	d01d      	beq.n	800ef62 <USBD_StdItfReq+0x92>
 800ef26:	7bbb      	ldrb	r3, [r7, #14]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d11a      	bne.n	800ef62 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ef2c:	7bba      	ldrb	r2, [r7, #14]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	32ae      	adds	r2, #174	@ 0xae
 800ef32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef36:	689b      	ldr	r3, [r3, #8]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d00f      	beq.n	800ef5c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ef3c:	7bba      	ldrb	r2, [r7, #14]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ef44:	7bba      	ldrb	r2, [r7, #14]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	32ae      	adds	r2, #174	@ 0xae
 800ef4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef4e:	689b      	ldr	r3, [r3, #8]
 800ef50:	6839      	ldr	r1, [r7, #0]
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	4798      	blx	r3
 800ef56:	4603      	mov	r3, r0
 800ef58:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ef5a:	e004      	b.n	800ef66 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ef5c:	2303      	movs	r3, #3
 800ef5e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ef60:	e001      	b.n	800ef66 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ef62:	2303      	movs	r3, #3
 800ef64:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	88db      	ldrh	r3, [r3, #6]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d110      	bne.n	800ef90 <USBD_StdItfReq+0xc0>
 800ef6e:	7bfb      	ldrb	r3, [r7, #15]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d10d      	bne.n	800ef90 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f000 fed4 	bl	800fd22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ef7a:	e009      	b.n	800ef90 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ef7c:	6839      	ldr	r1, [r7, #0]
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 fcf7 	bl	800f972 <USBD_CtlError>
          break;
 800ef84:	e004      	b.n	800ef90 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ef86:	6839      	ldr	r1, [r7, #0]
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 fcf2 	bl	800f972 <USBD_CtlError>
          break;
 800ef8e:	e000      	b.n	800ef92 <USBD_StdItfReq+0xc2>
          break;
 800ef90:	bf00      	nop
      }
      break;
 800ef92:	e004      	b.n	800ef9e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ef94:	6839      	ldr	r1, [r7, #0]
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f000 fceb 	bl	800f972 <USBD_CtlError>
      break;
 800ef9c:	bf00      	nop
  }

  return ret;
 800ef9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3710      	adds	r7, #16
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800efb2:	2300      	movs	r3, #0
 800efb4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	889b      	ldrh	r3, [r3, #4]
 800efba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	781b      	ldrb	r3, [r3, #0]
 800efc0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800efc4:	2b40      	cmp	r3, #64	@ 0x40
 800efc6:	d007      	beq.n	800efd8 <USBD_StdEPReq+0x30>
 800efc8:	2b40      	cmp	r3, #64	@ 0x40
 800efca:	f200 817f 	bhi.w	800f2cc <USBD_StdEPReq+0x324>
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d02a      	beq.n	800f028 <USBD_StdEPReq+0x80>
 800efd2:	2b20      	cmp	r3, #32
 800efd4:	f040 817a 	bne.w	800f2cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800efd8:	7bbb      	ldrb	r3, [r7, #14]
 800efda:	4619      	mov	r1, r3
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f7ff fe85 	bl	800ecec <USBD_CoreFindEP>
 800efe2:	4603      	mov	r3, r0
 800efe4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800efe6:	7b7b      	ldrb	r3, [r7, #13]
 800efe8:	2bff      	cmp	r3, #255	@ 0xff
 800efea:	f000 8174 	beq.w	800f2d6 <USBD_StdEPReq+0x32e>
 800efee:	7b7b      	ldrb	r3, [r7, #13]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f040 8170 	bne.w	800f2d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800eff6:	7b7a      	ldrb	r2, [r7, #13]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800effe:	7b7a      	ldrb	r2, [r7, #13]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	32ae      	adds	r2, #174	@ 0xae
 800f004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f008:	689b      	ldr	r3, [r3, #8]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	f000 8163 	beq.w	800f2d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f010:	7b7a      	ldrb	r2, [r7, #13]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	32ae      	adds	r2, #174	@ 0xae
 800f016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	6839      	ldr	r1, [r7, #0]
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	4798      	blx	r3
 800f022:	4603      	mov	r3, r0
 800f024:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f026:	e156      	b.n	800f2d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	785b      	ldrb	r3, [r3, #1]
 800f02c:	2b03      	cmp	r3, #3
 800f02e:	d008      	beq.n	800f042 <USBD_StdEPReq+0x9a>
 800f030:	2b03      	cmp	r3, #3
 800f032:	f300 8145 	bgt.w	800f2c0 <USBD_StdEPReq+0x318>
 800f036:	2b00      	cmp	r3, #0
 800f038:	f000 809b 	beq.w	800f172 <USBD_StdEPReq+0x1ca>
 800f03c:	2b01      	cmp	r3, #1
 800f03e:	d03c      	beq.n	800f0ba <USBD_StdEPReq+0x112>
 800f040:	e13e      	b.n	800f2c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	2b02      	cmp	r3, #2
 800f04c:	d002      	beq.n	800f054 <USBD_StdEPReq+0xac>
 800f04e:	2b03      	cmp	r3, #3
 800f050:	d016      	beq.n	800f080 <USBD_StdEPReq+0xd8>
 800f052:	e02c      	b.n	800f0ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f054:	7bbb      	ldrb	r3, [r7, #14]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d00d      	beq.n	800f076 <USBD_StdEPReq+0xce>
 800f05a:	7bbb      	ldrb	r3, [r7, #14]
 800f05c:	2b80      	cmp	r3, #128	@ 0x80
 800f05e:	d00a      	beq.n	800f076 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f060:	7bbb      	ldrb	r3, [r7, #14]
 800f062:	4619      	mov	r1, r3
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f7ff fa41 	bl	800e4ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f06a:	2180      	movs	r1, #128	@ 0x80
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f7ff fa3d 	bl	800e4ec <USBD_LL_StallEP>
 800f072:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f074:	e020      	b.n	800f0b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f076:	6839      	ldr	r1, [r7, #0]
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f000 fc7a 	bl	800f972 <USBD_CtlError>
              break;
 800f07e:	e01b      	b.n	800f0b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	885b      	ldrh	r3, [r3, #2]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d10e      	bne.n	800f0a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f088:	7bbb      	ldrb	r3, [r7, #14]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d00b      	beq.n	800f0a6 <USBD_StdEPReq+0xfe>
 800f08e:	7bbb      	ldrb	r3, [r7, #14]
 800f090:	2b80      	cmp	r3, #128	@ 0x80
 800f092:	d008      	beq.n	800f0a6 <USBD_StdEPReq+0xfe>
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	88db      	ldrh	r3, [r3, #6]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d104      	bne.n	800f0a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f09c:	7bbb      	ldrb	r3, [r7, #14]
 800f09e:	4619      	mov	r1, r3
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f7ff fa23 	bl	800e4ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 fe3b 	bl	800fd22 <USBD_CtlSendStatus>

              break;
 800f0ac:	e004      	b.n	800f0b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f0ae:	6839      	ldr	r1, [r7, #0]
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f000 fc5e 	bl	800f972 <USBD_CtlError>
              break;
 800f0b6:	bf00      	nop
          }
          break;
 800f0b8:	e107      	b.n	800f2ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	2b02      	cmp	r3, #2
 800f0c4:	d002      	beq.n	800f0cc <USBD_StdEPReq+0x124>
 800f0c6:	2b03      	cmp	r3, #3
 800f0c8:	d016      	beq.n	800f0f8 <USBD_StdEPReq+0x150>
 800f0ca:	e04b      	b.n	800f164 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f0cc:	7bbb      	ldrb	r3, [r7, #14]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d00d      	beq.n	800f0ee <USBD_StdEPReq+0x146>
 800f0d2:	7bbb      	ldrb	r3, [r7, #14]
 800f0d4:	2b80      	cmp	r3, #128	@ 0x80
 800f0d6:	d00a      	beq.n	800f0ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f0d8:	7bbb      	ldrb	r3, [r7, #14]
 800f0da:	4619      	mov	r1, r3
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f7ff fa05 	bl	800e4ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0e2:	2180      	movs	r1, #128	@ 0x80
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff fa01 	bl	800e4ec <USBD_LL_StallEP>
 800f0ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f0ec:	e040      	b.n	800f170 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f0ee:	6839      	ldr	r1, [r7, #0]
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f000 fc3e 	bl	800f972 <USBD_CtlError>
              break;
 800f0f6:	e03b      	b.n	800f170 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	885b      	ldrh	r3, [r3, #2]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d136      	bne.n	800f16e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f100:	7bbb      	ldrb	r3, [r7, #14]
 800f102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f106:	2b00      	cmp	r3, #0
 800f108:	d004      	beq.n	800f114 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f10a:	7bbb      	ldrb	r3, [r7, #14]
 800f10c:	4619      	mov	r1, r3
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f7ff fa05 	bl	800e51e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f000 fe04 	bl	800fd22 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f11a:	7bbb      	ldrb	r3, [r7, #14]
 800f11c:	4619      	mov	r1, r3
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f7ff fde4 	bl	800ecec <USBD_CoreFindEP>
 800f124:	4603      	mov	r3, r0
 800f126:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f128:	7b7b      	ldrb	r3, [r7, #13]
 800f12a:	2bff      	cmp	r3, #255	@ 0xff
 800f12c:	d01f      	beq.n	800f16e <USBD_StdEPReq+0x1c6>
 800f12e:	7b7b      	ldrb	r3, [r7, #13]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d11c      	bne.n	800f16e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f134:	7b7a      	ldrb	r2, [r7, #13]
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f13c:	7b7a      	ldrb	r2, [r7, #13]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	32ae      	adds	r2, #174	@ 0xae
 800f142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f146:	689b      	ldr	r3, [r3, #8]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d010      	beq.n	800f16e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f14c:	7b7a      	ldrb	r2, [r7, #13]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	32ae      	adds	r2, #174	@ 0xae
 800f152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f156:	689b      	ldr	r3, [r3, #8]
 800f158:	6839      	ldr	r1, [r7, #0]
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	4798      	blx	r3
 800f15e:	4603      	mov	r3, r0
 800f160:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f162:	e004      	b.n	800f16e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f164:	6839      	ldr	r1, [r7, #0]
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f000 fc03 	bl	800f972 <USBD_CtlError>
              break;
 800f16c:	e000      	b.n	800f170 <USBD_StdEPReq+0x1c8>
              break;
 800f16e:	bf00      	nop
          }
          break;
 800f170:	e0ab      	b.n	800f2ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	2b02      	cmp	r3, #2
 800f17c:	d002      	beq.n	800f184 <USBD_StdEPReq+0x1dc>
 800f17e:	2b03      	cmp	r3, #3
 800f180:	d032      	beq.n	800f1e8 <USBD_StdEPReq+0x240>
 800f182:	e097      	b.n	800f2b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f184:	7bbb      	ldrb	r3, [r7, #14]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d007      	beq.n	800f19a <USBD_StdEPReq+0x1f2>
 800f18a:	7bbb      	ldrb	r3, [r7, #14]
 800f18c:	2b80      	cmp	r3, #128	@ 0x80
 800f18e:	d004      	beq.n	800f19a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f190:	6839      	ldr	r1, [r7, #0]
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f000 fbed 	bl	800f972 <USBD_CtlError>
                break;
 800f198:	e091      	b.n	800f2be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f19a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	da0b      	bge.n	800f1ba <USBD_StdEPReq+0x212>
 800f1a2:	7bbb      	ldrb	r3, [r7, #14]
 800f1a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f1a8:	4613      	mov	r3, r2
 800f1aa:	009b      	lsls	r3, r3, #2
 800f1ac:	4413      	add	r3, r2
 800f1ae:	009b      	lsls	r3, r3, #2
 800f1b0:	3310      	adds	r3, #16
 800f1b2:	687a      	ldr	r2, [r7, #4]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	3304      	adds	r3, #4
 800f1b8:	e00b      	b.n	800f1d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f1ba:	7bbb      	ldrb	r3, [r7, #14]
 800f1bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f1c0:	4613      	mov	r3, r2
 800f1c2:	009b      	lsls	r3, r3, #2
 800f1c4:	4413      	add	r3, r2
 800f1c6:	009b      	lsls	r3, r3, #2
 800f1c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	4413      	add	r3, r2
 800f1d0:	3304      	adds	r3, #4
 800f1d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	2202      	movs	r2, #2
 800f1de:	4619      	mov	r1, r3
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f000 fd44 	bl	800fc6e <USBD_CtlSendData>
              break;
 800f1e6:	e06a      	b.n	800f2be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f1e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	da11      	bge.n	800f214 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f1f0:	7bbb      	ldrb	r3, [r7, #14]
 800f1f2:	f003 020f 	and.w	r2, r3, #15
 800f1f6:	6879      	ldr	r1, [r7, #4]
 800f1f8:	4613      	mov	r3, r2
 800f1fa:	009b      	lsls	r3, r3, #2
 800f1fc:	4413      	add	r3, r2
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	440b      	add	r3, r1
 800f202:	3324      	adds	r3, #36	@ 0x24
 800f204:	881b      	ldrh	r3, [r3, #0]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d117      	bne.n	800f23a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f20a:	6839      	ldr	r1, [r7, #0]
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f000 fbb0 	bl	800f972 <USBD_CtlError>
                  break;
 800f212:	e054      	b.n	800f2be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f214:	7bbb      	ldrb	r3, [r7, #14]
 800f216:	f003 020f 	and.w	r2, r3, #15
 800f21a:	6879      	ldr	r1, [r7, #4]
 800f21c:	4613      	mov	r3, r2
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	4413      	add	r3, r2
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	440b      	add	r3, r1
 800f226:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f22a:	881b      	ldrh	r3, [r3, #0]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d104      	bne.n	800f23a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f230:	6839      	ldr	r1, [r7, #0]
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f000 fb9d 	bl	800f972 <USBD_CtlError>
                  break;
 800f238:	e041      	b.n	800f2be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f23a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	da0b      	bge.n	800f25a <USBD_StdEPReq+0x2b2>
 800f242:	7bbb      	ldrb	r3, [r7, #14]
 800f244:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f248:	4613      	mov	r3, r2
 800f24a:	009b      	lsls	r3, r3, #2
 800f24c:	4413      	add	r3, r2
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	3310      	adds	r3, #16
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	4413      	add	r3, r2
 800f256:	3304      	adds	r3, #4
 800f258:	e00b      	b.n	800f272 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f25a:	7bbb      	ldrb	r3, [r7, #14]
 800f25c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f260:	4613      	mov	r3, r2
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	4413      	add	r3, r2
 800f266:	009b      	lsls	r3, r3, #2
 800f268:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f26c:	687a      	ldr	r2, [r7, #4]
 800f26e:	4413      	add	r3, r2
 800f270:	3304      	adds	r3, #4
 800f272:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f274:	7bbb      	ldrb	r3, [r7, #14]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d002      	beq.n	800f280 <USBD_StdEPReq+0x2d8>
 800f27a:	7bbb      	ldrb	r3, [r7, #14]
 800f27c:	2b80      	cmp	r3, #128	@ 0x80
 800f27e:	d103      	bne.n	800f288 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	2200      	movs	r2, #0
 800f284:	601a      	str	r2, [r3, #0]
 800f286:	e00e      	b.n	800f2a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f288:	7bbb      	ldrb	r3, [r7, #14]
 800f28a:	4619      	mov	r1, r3
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f7ff f95f 	bl	800e550 <USBD_LL_IsStallEP>
 800f292:	4603      	mov	r3, r0
 800f294:	2b00      	cmp	r3, #0
 800f296:	d003      	beq.n	800f2a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	2201      	movs	r2, #1
 800f29c:	601a      	str	r2, [r3, #0]
 800f29e:	e002      	b.n	800f2a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	2202      	movs	r2, #2
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f000 fcde 	bl	800fc6e <USBD_CtlSendData>
              break;
 800f2b2:	e004      	b.n	800f2be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f2b4:	6839      	ldr	r1, [r7, #0]
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f000 fb5b 	bl	800f972 <USBD_CtlError>
              break;
 800f2bc:	bf00      	nop
          }
          break;
 800f2be:	e004      	b.n	800f2ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f2c0:	6839      	ldr	r1, [r7, #0]
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 fb55 	bl	800f972 <USBD_CtlError>
          break;
 800f2c8:	bf00      	nop
      }
      break;
 800f2ca:	e005      	b.n	800f2d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f2cc:	6839      	ldr	r1, [r7, #0]
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f000 fb4f 	bl	800f972 <USBD_CtlError>
      break;
 800f2d4:	e000      	b.n	800f2d8 <USBD_StdEPReq+0x330>
      break;
 800f2d6:	bf00      	nop
  }

  return ret;
 800f2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3710      	adds	r7, #16
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
	...

0800f2e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b084      	sub	sp, #16
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	885b      	ldrh	r3, [r3, #2]
 800f2fe:	0a1b      	lsrs	r3, r3, #8
 800f300:	b29b      	uxth	r3, r3
 800f302:	3b01      	subs	r3, #1
 800f304:	2b06      	cmp	r3, #6
 800f306:	f200 8128 	bhi.w	800f55a <USBD_GetDescriptor+0x276>
 800f30a:	a201      	add	r2, pc, #4	@ (adr r2, 800f310 <USBD_GetDescriptor+0x2c>)
 800f30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f310:	0800f32d 	.word	0x0800f32d
 800f314:	0800f345 	.word	0x0800f345
 800f318:	0800f385 	.word	0x0800f385
 800f31c:	0800f55b 	.word	0x0800f55b
 800f320:	0800f55b 	.word	0x0800f55b
 800f324:	0800f4fb 	.word	0x0800f4fb
 800f328:	0800f527 	.word	0x0800f527
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	687a      	ldr	r2, [r7, #4]
 800f336:	7c12      	ldrb	r2, [r2, #16]
 800f338:	f107 0108 	add.w	r1, r7, #8
 800f33c:	4610      	mov	r0, r2
 800f33e:	4798      	blx	r3
 800f340:	60f8      	str	r0, [r7, #12]
      break;
 800f342:	e112      	b.n	800f56a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	7c1b      	ldrb	r3, [r3, #16]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d10d      	bne.n	800f368 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f354:	f107 0208 	add.w	r2, r7, #8
 800f358:	4610      	mov	r0, r2
 800f35a:	4798      	blx	r3
 800f35c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	3301      	adds	r3, #1
 800f362:	2202      	movs	r2, #2
 800f364:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f366:	e100      	b.n	800f56a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f370:	f107 0208 	add.w	r2, r7, #8
 800f374:	4610      	mov	r0, r2
 800f376:	4798      	blx	r3
 800f378:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	3301      	adds	r3, #1
 800f37e:	2202      	movs	r2, #2
 800f380:	701a      	strb	r2, [r3, #0]
      break;
 800f382:	e0f2      	b.n	800f56a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	885b      	ldrh	r3, [r3, #2]
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	2b05      	cmp	r3, #5
 800f38c:	f200 80ac 	bhi.w	800f4e8 <USBD_GetDescriptor+0x204>
 800f390:	a201      	add	r2, pc, #4	@ (adr r2, 800f398 <USBD_GetDescriptor+0xb4>)
 800f392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f396:	bf00      	nop
 800f398:	0800f3b1 	.word	0x0800f3b1
 800f39c:	0800f3e5 	.word	0x0800f3e5
 800f3a0:	0800f419 	.word	0x0800f419
 800f3a4:	0800f44d 	.word	0x0800f44d
 800f3a8:	0800f481 	.word	0x0800f481
 800f3ac:	0800f4b5 	.word	0x0800f4b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d00b      	beq.n	800f3d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	687a      	ldr	r2, [r7, #4]
 800f3c6:	7c12      	ldrb	r2, [r2, #16]
 800f3c8:	f107 0108 	add.w	r1, r7, #8
 800f3cc:	4610      	mov	r0, r2
 800f3ce:	4798      	blx	r3
 800f3d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f3d2:	e091      	b.n	800f4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f3d4:	6839      	ldr	r1, [r7, #0]
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f000 facb 	bl	800f972 <USBD_CtlError>
            err++;
 800f3dc:	7afb      	ldrb	r3, [r7, #11]
 800f3de:	3301      	adds	r3, #1
 800f3e0:	72fb      	strb	r3, [r7, #11]
          break;
 800f3e2:	e089      	b.n	800f4f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d00b      	beq.n	800f408 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	687a      	ldr	r2, [r7, #4]
 800f3fa:	7c12      	ldrb	r2, [r2, #16]
 800f3fc:	f107 0108 	add.w	r1, r7, #8
 800f400:	4610      	mov	r0, r2
 800f402:	4798      	blx	r3
 800f404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f406:	e077      	b.n	800f4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f408:	6839      	ldr	r1, [r7, #0]
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f000 fab1 	bl	800f972 <USBD_CtlError>
            err++;
 800f410:	7afb      	ldrb	r3, [r7, #11]
 800f412:	3301      	adds	r3, #1
 800f414:	72fb      	strb	r3, [r7, #11]
          break;
 800f416:	e06f      	b.n	800f4f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d00b      	beq.n	800f43c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f42a:	68db      	ldr	r3, [r3, #12]
 800f42c:	687a      	ldr	r2, [r7, #4]
 800f42e:	7c12      	ldrb	r2, [r2, #16]
 800f430:	f107 0108 	add.w	r1, r7, #8
 800f434:	4610      	mov	r0, r2
 800f436:	4798      	blx	r3
 800f438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f43a:	e05d      	b.n	800f4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f43c:	6839      	ldr	r1, [r7, #0]
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f000 fa97 	bl	800f972 <USBD_CtlError>
            err++;
 800f444:	7afb      	ldrb	r3, [r7, #11]
 800f446:	3301      	adds	r3, #1
 800f448:	72fb      	strb	r3, [r7, #11]
          break;
 800f44a:	e055      	b.n	800f4f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f452:	691b      	ldr	r3, [r3, #16]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d00b      	beq.n	800f470 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f45e:	691b      	ldr	r3, [r3, #16]
 800f460:	687a      	ldr	r2, [r7, #4]
 800f462:	7c12      	ldrb	r2, [r2, #16]
 800f464:	f107 0108 	add.w	r1, r7, #8
 800f468:	4610      	mov	r0, r2
 800f46a:	4798      	blx	r3
 800f46c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f46e:	e043      	b.n	800f4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f470:	6839      	ldr	r1, [r7, #0]
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f000 fa7d 	bl	800f972 <USBD_CtlError>
            err++;
 800f478:	7afb      	ldrb	r3, [r7, #11]
 800f47a:	3301      	adds	r3, #1
 800f47c:	72fb      	strb	r3, [r7, #11]
          break;
 800f47e:	e03b      	b.n	800f4f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f486:	695b      	ldr	r3, [r3, #20]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d00b      	beq.n	800f4a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f492:	695b      	ldr	r3, [r3, #20]
 800f494:	687a      	ldr	r2, [r7, #4]
 800f496:	7c12      	ldrb	r2, [r2, #16]
 800f498:	f107 0108 	add.w	r1, r7, #8
 800f49c:	4610      	mov	r0, r2
 800f49e:	4798      	blx	r3
 800f4a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4a2:	e029      	b.n	800f4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f4a4:	6839      	ldr	r1, [r7, #0]
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 fa63 	bl	800f972 <USBD_CtlError>
            err++;
 800f4ac:	7afb      	ldrb	r3, [r7, #11]
 800f4ae:	3301      	adds	r3, #1
 800f4b0:	72fb      	strb	r3, [r7, #11]
          break;
 800f4b2:	e021      	b.n	800f4f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4ba:	699b      	ldr	r3, [r3, #24]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d00b      	beq.n	800f4d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4c6:	699b      	ldr	r3, [r3, #24]
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	7c12      	ldrb	r2, [r2, #16]
 800f4cc:	f107 0108 	add.w	r1, r7, #8
 800f4d0:	4610      	mov	r0, r2
 800f4d2:	4798      	blx	r3
 800f4d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4d6:	e00f      	b.n	800f4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f4d8:	6839      	ldr	r1, [r7, #0]
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f000 fa49 	bl	800f972 <USBD_CtlError>
            err++;
 800f4e0:	7afb      	ldrb	r3, [r7, #11]
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	72fb      	strb	r3, [r7, #11]
          break;
 800f4e6:	e007      	b.n	800f4f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f4e8:	6839      	ldr	r1, [r7, #0]
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f000 fa41 	bl	800f972 <USBD_CtlError>
          err++;
 800f4f0:	7afb      	ldrb	r3, [r7, #11]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f4f6:	bf00      	nop
      }
      break;
 800f4f8:	e037      	b.n	800f56a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	7c1b      	ldrb	r3, [r3, #16]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d109      	bne.n	800f516 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f50a:	f107 0208 	add.w	r2, r7, #8
 800f50e:	4610      	mov	r0, r2
 800f510:	4798      	blx	r3
 800f512:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f514:	e029      	b.n	800f56a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f516:	6839      	ldr	r1, [r7, #0]
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f000 fa2a 	bl	800f972 <USBD_CtlError>
        err++;
 800f51e:	7afb      	ldrb	r3, [r7, #11]
 800f520:	3301      	adds	r3, #1
 800f522:	72fb      	strb	r3, [r7, #11]
      break;
 800f524:	e021      	b.n	800f56a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	7c1b      	ldrb	r3, [r3, #16]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d10d      	bne.n	800f54a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f536:	f107 0208 	add.w	r2, r7, #8
 800f53a:	4610      	mov	r0, r2
 800f53c:	4798      	blx	r3
 800f53e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	3301      	adds	r3, #1
 800f544:	2207      	movs	r2, #7
 800f546:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f548:	e00f      	b.n	800f56a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f54a:	6839      	ldr	r1, [r7, #0]
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f000 fa10 	bl	800f972 <USBD_CtlError>
        err++;
 800f552:	7afb      	ldrb	r3, [r7, #11]
 800f554:	3301      	adds	r3, #1
 800f556:	72fb      	strb	r3, [r7, #11]
      break;
 800f558:	e007      	b.n	800f56a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f55a:	6839      	ldr	r1, [r7, #0]
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f000 fa08 	bl	800f972 <USBD_CtlError>
      err++;
 800f562:	7afb      	ldrb	r3, [r7, #11]
 800f564:	3301      	adds	r3, #1
 800f566:	72fb      	strb	r3, [r7, #11]
      break;
 800f568:	bf00      	nop
  }

  if (err != 0U)
 800f56a:	7afb      	ldrb	r3, [r7, #11]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d11e      	bne.n	800f5ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	88db      	ldrh	r3, [r3, #6]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d016      	beq.n	800f5a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f578:	893b      	ldrh	r3, [r7, #8]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00e      	beq.n	800f59c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	88da      	ldrh	r2, [r3, #6]
 800f582:	893b      	ldrh	r3, [r7, #8]
 800f584:	4293      	cmp	r3, r2
 800f586:	bf28      	it	cs
 800f588:	4613      	movcs	r3, r2
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f58e:	893b      	ldrh	r3, [r7, #8]
 800f590:	461a      	mov	r2, r3
 800f592:	68f9      	ldr	r1, [r7, #12]
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f000 fb6a 	bl	800fc6e <USBD_CtlSendData>
 800f59a:	e009      	b.n	800f5b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f59c:	6839      	ldr	r1, [r7, #0]
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f000 f9e7 	bl	800f972 <USBD_CtlError>
 800f5a4:	e004      	b.n	800f5b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f000 fbbb 	bl	800fd22 <USBD_CtlSendStatus>
 800f5ac:	e000      	b.n	800f5b0 <USBD_GetDescriptor+0x2cc>
    return;
 800f5ae:	bf00      	nop
  }
}
 800f5b0:	3710      	adds	r7, #16
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop

0800f5b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b084      	sub	sp, #16
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	889b      	ldrh	r3, [r3, #4]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d131      	bne.n	800f62e <USBD_SetAddress+0x76>
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	88db      	ldrh	r3, [r3, #6]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d12d      	bne.n	800f62e <USBD_SetAddress+0x76>
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	885b      	ldrh	r3, [r3, #2]
 800f5d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f5d8:	d829      	bhi.n	800f62e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	885b      	ldrh	r3, [r3, #2]
 800f5de:	b2db      	uxtb	r3, r3
 800f5e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f5e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	2b03      	cmp	r3, #3
 800f5f0:	d104      	bne.n	800f5fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f5f2:	6839      	ldr	r1, [r7, #0]
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 f9bc 	bl	800f972 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5fa:	e01d      	b.n	800f638 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	7bfa      	ldrb	r2, [r7, #15]
 800f600:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f604:	7bfb      	ldrb	r3, [r7, #15]
 800f606:	4619      	mov	r1, r3
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f7fe ffcd 	bl	800e5a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f000 fb87 	bl	800fd22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f614:	7bfb      	ldrb	r3, [r7, #15]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d004      	beq.n	800f624 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2202      	movs	r2, #2
 800f61e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f622:	e009      	b.n	800f638 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2201      	movs	r2, #1
 800f628:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f62c:	e004      	b.n	800f638 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f62e:	6839      	ldr	r1, [r7, #0]
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f000 f99e 	bl	800f972 <USBD_CtlError>
  }
}
 800f636:	bf00      	nop
 800f638:	bf00      	nop
 800f63a:	3710      	adds	r7, #16
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b084      	sub	sp, #16
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f64a:	2300      	movs	r3, #0
 800f64c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	885b      	ldrh	r3, [r3, #2]
 800f652:	b2da      	uxtb	r2, r3
 800f654:	4b4e      	ldr	r3, [pc, #312]	@ (800f790 <USBD_SetConfig+0x150>)
 800f656:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f658:	4b4d      	ldr	r3, [pc, #308]	@ (800f790 <USBD_SetConfig+0x150>)
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	2b01      	cmp	r3, #1
 800f65e:	d905      	bls.n	800f66c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f660:	6839      	ldr	r1, [r7, #0]
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f000 f985 	bl	800f972 <USBD_CtlError>
    return USBD_FAIL;
 800f668:	2303      	movs	r3, #3
 800f66a:	e08c      	b.n	800f786 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f672:	b2db      	uxtb	r3, r3
 800f674:	2b02      	cmp	r3, #2
 800f676:	d002      	beq.n	800f67e <USBD_SetConfig+0x3e>
 800f678:	2b03      	cmp	r3, #3
 800f67a:	d029      	beq.n	800f6d0 <USBD_SetConfig+0x90>
 800f67c:	e075      	b.n	800f76a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f67e:	4b44      	ldr	r3, [pc, #272]	@ (800f790 <USBD_SetConfig+0x150>)
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d020      	beq.n	800f6c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f686:	4b42      	ldr	r3, [pc, #264]	@ (800f790 <USBD_SetConfig+0x150>)
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	461a      	mov	r2, r3
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f690:	4b3f      	ldr	r3, [pc, #252]	@ (800f790 <USBD_SetConfig+0x150>)
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	4619      	mov	r1, r3
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f7ff f8a9 	bl	800e7ee <USBD_SetClassConfig>
 800f69c:	4603      	mov	r3, r0
 800f69e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f6a0:	7bfb      	ldrb	r3, [r7, #15]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d008      	beq.n	800f6b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f6a6:	6839      	ldr	r1, [r7, #0]
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f000 f962 	bl	800f972 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2202      	movs	r2, #2
 800f6b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f6b6:	e065      	b.n	800f784 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f000 fb32 	bl	800fd22 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2203      	movs	r2, #3
 800f6c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f6c6:	e05d      	b.n	800f784 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f000 fb2a 	bl	800fd22 <USBD_CtlSendStatus>
      break;
 800f6ce:	e059      	b.n	800f784 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f6d0:	4b2f      	ldr	r3, [pc, #188]	@ (800f790 <USBD_SetConfig+0x150>)
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d112      	bne.n	800f6fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2202      	movs	r2, #2
 800f6dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f6e0:	4b2b      	ldr	r3, [pc, #172]	@ (800f790 <USBD_SetConfig+0x150>)
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f6ea:	4b29      	ldr	r3, [pc, #164]	@ (800f790 <USBD_SetConfig+0x150>)
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f7ff f898 	bl	800e826 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 fb13 	bl	800fd22 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f6fc:	e042      	b.n	800f784 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f6fe:	4b24      	ldr	r3, [pc, #144]	@ (800f790 <USBD_SetConfig+0x150>)
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	461a      	mov	r2, r3
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d02a      	beq.n	800f762 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	b2db      	uxtb	r3, r3
 800f712:	4619      	mov	r1, r3
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f7ff f886 	bl	800e826 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f71a:	4b1d      	ldr	r3, [pc, #116]	@ (800f790 <USBD_SetConfig+0x150>)
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	461a      	mov	r2, r3
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f724:	4b1a      	ldr	r3, [pc, #104]	@ (800f790 <USBD_SetConfig+0x150>)
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	4619      	mov	r1, r3
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f7ff f85f 	bl	800e7ee <USBD_SetClassConfig>
 800f730:	4603      	mov	r3, r0
 800f732:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f734:	7bfb      	ldrb	r3, [r7, #15]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d00f      	beq.n	800f75a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f73a:	6839      	ldr	r1, [r7, #0]
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f000 f918 	bl	800f972 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	b2db      	uxtb	r3, r3
 800f748:	4619      	mov	r1, r3
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f7ff f86b 	bl	800e826 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2202      	movs	r2, #2
 800f754:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f758:	e014      	b.n	800f784 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f000 fae1 	bl	800fd22 <USBD_CtlSendStatus>
      break;
 800f760:	e010      	b.n	800f784 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f000 fadd 	bl	800fd22 <USBD_CtlSendStatus>
      break;
 800f768:	e00c      	b.n	800f784 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f76a:	6839      	ldr	r1, [r7, #0]
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f000 f900 	bl	800f972 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f772:	4b07      	ldr	r3, [pc, #28]	@ (800f790 <USBD_SetConfig+0x150>)
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	4619      	mov	r1, r3
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f7ff f854 	bl	800e826 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f77e:	2303      	movs	r3, #3
 800f780:	73fb      	strb	r3, [r7, #15]
      break;
 800f782:	bf00      	nop
  }

  return ret;
 800f784:	7bfb      	ldrb	r3, [r7, #15]
}
 800f786:	4618      	mov	r0, r3
 800f788:	3710      	adds	r7, #16
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	200010b8 	.word	0x200010b8

0800f794 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	88db      	ldrh	r3, [r3, #6]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d004      	beq.n	800f7b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f7a6:	6839      	ldr	r1, [r7, #0]
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f000 f8e2 	bl	800f972 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f7ae:	e023      	b.n	800f7f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7b6:	b2db      	uxtb	r3, r3
 800f7b8:	2b02      	cmp	r3, #2
 800f7ba:	dc02      	bgt.n	800f7c2 <USBD_GetConfig+0x2e>
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	dc03      	bgt.n	800f7c8 <USBD_GetConfig+0x34>
 800f7c0:	e015      	b.n	800f7ee <USBD_GetConfig+0x5a>
 800f7c2:	2b03      	cmp	r3, #3
 800f7c4:	d00b      	beq.n	800f7de <USBD_GetConfig+0x4a>
 800f7c6:	e012      	b.n	800f7ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	3308      	adds	r3, #8
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	4619      	mov	r1, r3
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f000 fa49 	bl	800fc6e <USBD_CtlSendData>
        break;
 800f7dc:	e00c      	b.n	800f7f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	3304      	adds	r3, #4
 800f7e2:	2201      	movs	r2, #1
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f000 fa41 	bl	800fc6e <USBD_CtlSendData>
        break;
 800f7ec:	e004      	b.n	800f7f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f7ee:	6839      	ldr	r1, [r7, #0]
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f000 f8be 	bl	800f972 <USBD_CtlError>
        break;
 800f7f6:	bf00      	nop
}
 800f7f8:	bf00      	nop
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f810:	b2db      	uxtb	r3, r3
 800f812:	3b01      	subs	r3, #1
 800f814:	2b02      	cmp	r3, #2
 800f816:	d81e      	bhi.n	800f856 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	88db      	ldrh	r3, [r3, #6]
 800f81c:	2b02      	cmp	r3, #2
 800f81e:	d004      	beq.n	800f82a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f820:	6839      	ldr	r1, [r7, #0]
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f000 f8a5 	bl	800f972 <USBD_CtlError>
        break;
 800f828:	e01a      	b.n	800f860 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2201      	movs	r2, #1
 800f82e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f836:	2b00      	cmp	r3, #0
 800f838:	d005      	beq.n	800f846 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	f043 0202 	orr.w	r2, r3, #2
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	330c      	adds	r3, #12
 800f84a:	2202      	movs	r2, #2
 800f84c:	4619      	mov	r1, r3
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 fa0d 	bl	800fc6e <USBD_CtlSendData>
      break;
 800f854:	e004      	b.n	800f860 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f856:	6839      	ldr	r1, [r7, #0]
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f000 f88a 	bl	800f972 <USBD_CtlError>
      break;
 800f85e:	bf00      	nop
  }
}
 800f860:	bf00      	nop
 800f862:	3708      	adds	r7, #8
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}

0800f868 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	885b      	ldrh	r3, [r3, #2]
 800f876:	2b01      	cmp	r3, #1
 800f878:	d107      	bne.n	800f88a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2201      	movs	r2, #1
 800f87e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f000 fa4d 	bl	800fd22 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f888:	e013      	b.n	800f8b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	885b      	ldrh	r3, [r3, #2]
 800f88e:	2b02      	cmp	r3, #2
 800f890:	d10b      	bne.n	800f8aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	889b      	ldrh	r3, [r3, #4]
 800f896:	0a1b      	lsrs	r3, r3, #8
 800f898:	b29b      	uxth	r3, r3
 800f89a:	b2da      	uxtb	r2, r3
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 fa3d 	bl	800fd22 <USBD_CtlSendStatus>
}
 800f8a8:	e003      	b.n	800f8b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f8aa:	6839      	ldr	r1, [r7, #0]
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f000 f860 	bl	800f972 <USBD_CtlError>
}
 800f8b2:	bf00      	nop
 800f8b4:	3708      	adds	r7, #8
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}

0800f8ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8ba:	b580      	push	{r7, lr}
 800f8bc:	b082      	sub	sp, #8
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	6078      	str	r0, [r7, #4]
 800f8c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	3b01      	subs	r3, #1
 800f8ce:	2b02      	cmp	r3, #2
 800f8d0:	d80b      	bhi.n	800f8ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	885b      	ldrh	r3, [r3, #2]
 800f8d6:	2b01      	cmp	r3, #1
 800f8d8:	d10c      	bne.n	800f8f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f000 fa1d 	bl	800fd22 <USBD_CtlSendStatus>
      }
      break;
 800f8e8:	e004      	b.n	800f8f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f8ea:	6839      	ldr	r1, [r7, #0]
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f000 f840 	bl	800f972 <USBD_CtlError>
      break;
 800f8f2:	e000      	b.n	800f8f6 <USBD_ClrFeature+0x3c>
      break;
 800f8f4:	bf00      	nop
  }
}
 800f8f6:	bf00      	nop
 800f8f8:	3708      	adds	r7, #8
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}

0800f8fe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f8fe:	b580      	push	{r7, lr}
 800f900:	b084      	sub	sp, #16
 800f902:	af00      	add	r7, sp, #0
 800f904:	6078      	str	r0, [r7, #4]
 800f906:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	781a      	ldrb	r2, [r3, #0]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	3301      	adds	r3, #1
 800f918:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	781a      	ldrb	r2, [r3, #0]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	3301      	adds	r3, #1
 800f926:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f928:	68f8      	ldr	r0, [r7, #12]
 800f92a:	f7ff fa40 	bl	800edae <SWAPBYTE>
 800f92e:	4603      	mov	r3, r0
 800f930:	461a      	mov	r2, r3
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	3301      	adds	r3, #1
 800f93a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	3301      	adds	r3, #1
 800f940:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f942:	68f8      	ldr	r0, [r7, #12]
 800f944:	f7ff fa33 	bl	800edae <SWAPBYTE>
 800f948:	4603      	mov	r3, r0
 800f94a:	461a      	mov	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	3301      	adds	r3, #1
 800f954:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	3301      	adds	r3, #1
 800f95a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f95c:	68f8      	ldr	r0, [r7, #12]
 800f95e:	f7ff fa26 	bl	800edae <SWAPBYTE>
 800f962:	4603      	mov	r3, r0
 800f964:	461a      	mov	r2, r3
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	80da      	strh	r2, [r3, #6]
}
 800f96a:	bf00      	nop
 800f96c:	3710      	adds	r7, #16
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}

0800f972 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f972:	b580      	push	{r7, lr}
 800f974:	b082      	sub	sp, #8
 800f976:	af00      	add	r7, sp, #0
 800f978:	6078      	str	r0, [r7, #4]
 800f97a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f97c:	2180      	movs	r1, #128	@ 0x80
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f7fe fdb4 	bl	800e4ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f984:	2100      	movs	r1, #0
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f7fe fdb0 	bl	800e4ec <USBD_LL_StallEP>
}
 800f98c:	bf00      	nop
 800f98e:	3708      	adds	r7, #8
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b086      	sub	sp, #24
 800f998:	af00      	add	r7, sp, #0
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	60b9      	str	r1, [r7, #8]
 800f99e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d036      	beq.n	800fa18 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f9ae:	6938      	ldr	r0, [r7, #16]
 800f9b0:	f000 f836 	bl	800fa20 <USBD_GetLen>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	b29b      	uxth	r3, r3
 800f9ba:	005b      	lsls	r3, r3, #1
 800f9bc:	b29a      	uxth	r2, r3
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f9c2:	7dfb      	ldrb	r3, [r7, #23]
 800f9c4:	68ba      	ldr	r2, [r7, #8]
 800f9c6:	4413      	add	r3, r2
 800f9c8:	687a      	ldr	r2, [r7, #4]
 800f9ca:	7812      	ldrb	r2, [r2, #0]
 800f9cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800f9ce:	7dfb      	ldrb	r3, [r7, #23]
 800f9d0:	3301      	adds	r3, #1
 800f9d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f9d4:	7dfb      	ldrb	r3, [r7, #23]
 800f9d6:	68ba      	ldr	r2, [r7, #8]
 800f9d8:	4413      	add	r3, r2
 800f9da:	2203      	movs	r2, #3
 800f9dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800f9de:	7dfb      	ldrb	r3, [r7, #23]
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f9e4:	e013      	b.n	800fa0e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f9e6:	7dfb      	ldrb	r3, [r7, #23]
 800f9e8:	68ba      	ldr	r2, [r7, #8]
 800f9ea:	4413      	add	r3, r2
 800f9ec:	693a      	ldr	r2, [r7, #16]
 800f9ee:	7812      	ldrb	r2, [r2, #0]
 800f9f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	613b      	str	r3, [r7, #16]
    idx++;
 800f9f8:	7dfb      	ldrb	r3, [r7, #23]
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f9fe:	7dfb      	ldrb	r3, [r7, #23]
 800fa00:	68ba      	ldr	r2, [r7, #8]
 800fa02:	4413      	add	r3, r2
 800fa04:	2200      	movs	r2, #0
 800fa06:	701a      	strb	r2, [r3, #0]
    idx++;
 800fa08:	7dfb      	ldrb	r3, [r7, #23]
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d1e7      	bne.n	800f9e6 <USBD_GetString+0x52>
 800fa16:	e000      	b.n	800fa1a <USBD_GetString+0x86>
    return;
 800fa18:	bf00      	nop
  }
}
 800fa1a:	3718      	adds	r7, #24
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b085      	sub	sp, #20
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fa30:	e005      	b.n	800fa3e <USBD_GetLen+0x1e>
  {
    len++;
 800fa32:	7bfb      	ldrb	r3, [r7, #15]
 800fa34:	3301      	adds	r3, #1
 800fa36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d1f5      	bne.n	800fa32 <USBD_GetLen+0x12>
  }

  return len;
 800fa46:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3714      	adds	r7, #20
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr

0800fa54 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa54:	b480      	push	{r7}
 800fa56:	b083      	sub	sp, #12
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	6039      	str	r1, [r7, #0]
 800fa5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	2212      	movs	r2, #18
 800fa64:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800fa66:	4b03      	ldr	r3, [pc, #12]	@ (800fa74 <USBD_Class_DeviceDescriptor+0x20>)
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr
 800fa74:	200000f0 	.word	0x200000f0

0800fa78 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b083      	sub	sp, #12
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	4603      	mov	r3, r0
 800fa80:	6039      	str	r1, [r7, #0]
 800fa82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	2204      	movs	r2, #4
 800fa88:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 800fa8a:	4b03      	ldr	r3, [pc, #12]	@ (800fa98 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr
 800fa98:	20000104 	.word	0x20000104

0800fa9c <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	4603      	mov	r3, r0
 800faa4:	6039      	str	r1, [r7, #0]
 800faa6:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800faa8:	79fb      	ldrb	r3, [r7, #7]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d105      	bne.n	800faba <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800faae:	683a      	ldr	r2, [r7, #0]
 800fab0:	4907      	ldr	r1, [pc, #28]	@ (800fad0 <USBD_Class_ProductStrDescriptor+0x34>)
 800fab2:	4808      	ldr	r0, [pc, #32]	@ (800fad4 <USBD_Class_ProductStrDescriptor+0x38>)
 800fab4:	f7ff ff6e 	bl	800f994 <USBD_GetString>
 800fab8:	e004      	b.n	800fac4 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800faba:	683a      	ldr	r2, [r7, #0]
 800fabc:	4904      	ldr	r1, [pc, #16]	@ (800fad0 <USBD_Class_ProductStrDescriptor+0x34>)
 800fabe:	4805      	ldr	r0, [pc, #20]	@ (800fad4 <USBD_Class_ProductStrDescriptor+0x38>)
 800fac0:	f7ff ff68 	bl	800f994 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fac4:	4b02      	ldr	r3, [pc, #8]	@ (800fad0 <USBD_Class_ProductStrDescriptor+0x34>)
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3708      	adds	r7, #8
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
 800face:	bf00      	nop
 800fad0:	200010bc 	.word	0x200010bc
 800fad4:	080107f8 	.word	0x080107f8

0800fad8 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	4603      	mov	r3, r0
 800fae0:	6039      	str	r1, [r7, #0]
 800fae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fae4:	683a      	ldr	r2, [r7, #0]
 800fae6:	4904      	ldr	r1, [pc, #16]	@ (800faf8 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800fae8:	4804      	ldr	r0, [pc, #16]	@ (800fafc <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800faea:	f7ff ff53 	bl	800f994 <USBD_GetString>
  return USBD_StrDesc;
 800faee:	4b02      	ldr	r3, [pc, #8]	@ (800faf8 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3708      	adds	r7, #8
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	200010bc 	.word	0x200010bc
 800fafc:	08010810 	.word	0x08010810

0800fb00 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	4603      	mov	r3, r0
 800fb08:	6039      	str	r1, [r7, #0]
 800fb0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	221a      	movs	r2, #26
 800fb10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800fb12:	f000 f843 	bl	800fb9c <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800fb16:	4b02      	ldr	r3, [pc, #8]	@ (800fb20 <USBD_Class_SerialStrDescriptor+0x20>)
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	20000108 	.word	0x20000108

0800fb24 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	6039      	str	r1, [r7, #0]
 800fb2e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800fb30:	79fb      	ldrb	r3, [r7, #7]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d105      	bne.n	800fb42 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800fb36:	683a      	ldr	r2, [r7, #0]
 800fb38:	4907      	ldr	r1, [pc, #28]	@ (800fb58 <USBD_Class_ConfigStrDescriptor+0x34>)
 800fb3a:	4808      	ldr	r0, [pc, #32]	@ (800fb5c <USBD_Class_ConfigStrDescriptor+0x38>)
 800fb3c:	f7ff ff2a 	bl	800f994 <USBD_GetString>
 800fb40:	e004      	b.n	800fb4c <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800fb42:	683a      	ldr	r2, [r7, #0]
 800fb44:	4904      	ldr	r1, [pc, #16]	@ (800fb58 <USBD_Class_ConfigStrDescriptor+0x34>)
 800fb46:	4805      	ldr	r0, [pc, #20]	@ (800fb5c <USBD_Class_ConfigStrDescriptor+0x38>)
 800fb48:	f7ff ff24 	bl	800f994 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb4c:	4b02      	ldr	r3, [pc, #8]	@ (800fb58 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3708      	adds	r7, #8
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}
 800fb56:	bf00      	nop
 800fb58:	200010bc 	.word	0x200010bc
 800fb5c:	08010824 	.word	0x08010824

0800fb60 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b082      	sub	sp, #8
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	4603      	mov	r3, r0
 800fb68:	6039      	str	r1, [r7, #0]
 800fb6a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800fb6c:	79fb      	ldrb	r3, [r7, #7]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d105      	bne.n	800fb7e <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800fb72:	683a      	ldr	r2, [r7, #0]
 800fb74:	4907      	ldr	r1, [pc, #28]	@ (800fb94 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800fb76:	4808      	ldr	r0, [pc, #32]	@ (800fb98 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800fb78:	f7ff ff0c 	bl	800f994 <USBD_GetString>
 800fb7c:	e004      	b.n	800fb88 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800fb7e:	683a      	ldr	r2, [r7, #0]
 800fb80:	4904      	ldr	r1, [pc, #16]	@ (800fb94 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800fb82:	4805      	ldr	r0, [pc, #20]	@ (800fb98 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800fb84:	f7ff ff06 	bl	800f994 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb88:	4b02      	ldr	r3, [pc, #8]	@ (800fb94 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3708      	adds	r7, #8
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop
 800fb94:	200010bc 	.word	0x200010bc
 800fb98:	08010830 	.word	0x08010830

0800fb9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b084      	sub	sp, #16
 800fba0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800fba2:	4b0f      	ldr	r3, [pc, #60]	@ (800fbe0 <Get_SerialNum+0x44>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800fba8:	4b0e      	ldr	r3, [pc, #56]	@ (800fbe4 <Get_SerialNum+0x48>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800fbae:	4b0e      	ldr	r3, [pc, #56]	@ (800fbe8 <Get_SerialNum+0x4c>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fbb4:	68fa      	ldr	r2, [r7, #12]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	4413      	add	r3, r2
 800fbba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d009      	beq.n	800fbd6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 800fbc2:	2208      	movs	r2, #8
 800fbc4:	4909      	ldr	r1, [pc, #36]	@ (800fbec <Get_SerialNum+0x50>)
 800fbc6:	68f8      	ldr	r0, [r7, #12]
 800fbc8:	f000 f814 	bl	800fbf4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 800fbcc:	2204      	movs	r2, #4
 800fbce:	4908      	ldr	r1, [pc, #32]	@ (800fbf0 <Get_SerialNum+0x54>)
 800fbd0:	68b8      	ldr	r0, [r7, #8]
 800fbd2:	f000 f80f 	bl	800fbf4 <IntToUnicode>
  }
}
 800fbd6:	bf00      	nop
 800fbd8:	3710      	adds	r7, #16
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	08fff800 	.word	0x08fff800
 800fbe4:	08fff804 	.word	0x08fff804
 800fbe8:	08fff808 	.word	0x08fff808
 800fbec:	2000010a 	.word	0x2000010a
 800fbf0:	2000011a 	.word	0x2000011a

0800fbf4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b087      	sub	sp, #28
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	60f8      	str	r0, [r7, #12]
 800fbfc:	60b9      	str	r1, [r7, #8]
 800fbfe:	4613      	mov	r3, r2
 800fc00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800fc02:	2300      	movs	r3, #0
 800fc04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800fc06:	2300      	movs	r3, #0
 800fc08:	75fb      	strb	r3, [r7, #23]
 800fc0a:	e025      	b.n	800fc58 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	0f1b      	lsrs	r3, r3, #28
 800fc10:	2b09      	cmp	r3, #9
 800fc12:	d80a      	bhi.n	800fc2a <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	0f1b      	lsrs	r3, r3, #28
 800fc18:	b2da      	uxtb	r2, r3
 800fc1a:	7dfb      	ldrb	r3, [r7, #23]
 800fc1c:	005b      	lsls	r3, r3, #1
 800fc1e:	68b9      	ldr	r1, [r7, #8]
 800fc20:	440b      	add	r3, r1
 800fc22:	3230      	adds	r2, #48	@ 0x30
 800fc24:	b2d2      	uxtb	r2, r2
 800fc26:	701a      	strb	r2, [r3, #0]
 800fc28:	e009      	b.n	800fc3e <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	0f1b      	lsrs	r3, r3, #28
 800fc2e:	b2da      	uxtb	r2, r3
 800fc30:	7dfb      	ldrb	r3, [r7, #23]
 800fc32:	005b      	lsls	r3, r3, #1
 800fc34:	68b9      	ldr	r1, [r7, #8]
 800fc36:	440b      	add	r3, r1
 800fc38:	3237      	adds	r2, #55	@ 0x37
 800fc3a:	b2d2      	uxtb	r2, r2
 800fc3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	011b      	lsls	r3, r3, #4
 800fc42:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 800fc44:	7dfb      	ldrb	r3, [r7, #23]
 800fc46:	005b      	lsls	r3, r3, #1
 800fc48:	3301      	adds	r3, #1
 800fc4a:	68ba      	ldr	r2, [r7, #8]
 800fc4c:	4413      	add	r3, r2
 800fc4e:	2200      	movs	r2, #0
 800fc50:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800fc52:	7dfb      	ldrb	r3, [r7, #23]
 800fc54:	3301      	adds	r3, #1
 800fc56:	75fb      	strb	r3, [r7, #23]
 800fc58:	7dfa      	ldrb	r2, [r7, #23]
 800fc5a:	79fb      	ldrb	r3, [r7, #7]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d3d5      	bcc.n	800fc0c <IntToUnicode+0x18>
  }
}
 800fc60:	bf00      	nop
 800fc62:	bf00      	nop
 800fc64:	371c      	adds	r7, #28
 800fc66:	46bd      	mov	sp, r7
 800fc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6c:	4770      	bx	lr

0800fc6e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fc6e:	b580      	push	{r7, lr}
 800fc70:	b084      	sub	sp, #16
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	60f8      	str	r0, [r7, #12]
 800fc76:	60b9      	str	r1, [r7, #8]
 800fc78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	2202      	movs	r2, #2
 800fc7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	687a      	ldr	r2, [r7, #4]
 800fc8c:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	68ba      	ldr	r2, [r7, #8]
 800fc92:	2100      	movs	r1, #0
 800fc94:	68f8      	ldr	r0, [r7, #12]
 800fc96:	f7fe fca0 	bl	800e5da <USBD_LL_Transmit>

  return USBD_OK;
 800fc9a:	2300      	movs	r3, #0
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3710      	adds	r7, #16
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	68ba      	ldr	r2, [r7, #8]
 800fcb4:	2100      	movs	r1, #0
 800fcb6:	68f8      	ldr	r0, [r7, #12]
 800fcb8:	f7fe fc8f 	bl	800e5da <USBD_LL_Transmit>

  return USBD_OK;
 800fcbc:	2300      	movs	r3, #0
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3710      	adds	r7, #16
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}

0800fcc6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fcc6:	b580      	push	{r7, lr}
 800fcc8:	b084      	sub	sp, #16
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	60f8      	str	r0, [r7, #12]
 800fcce:	60b9      	str	r1, [r7, #8]
 800fcd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2203      	movs	r2, #3
 800fcd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	687a      	ldr	r2, [r7, #4]
 800fcde:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	687a      	ldr	r2, [r7, #4]
 800fce6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	68ba      	ldr	r2, [r7, #8]
 800fcee:	2100      	movs	r1, #0
 800fcf0:	68f8      	ldr	r0, [r7, #12]
 800fcf2:	f7fe fc8d 	bl	800e610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fcf6:	2300      	movs	r3, #0
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3710      	adds	r7, #16
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b084      	sub	sp, #16
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	60f8      	str	r0, [r7, #12]
 800fd08:	60b9      	str	r1, [r7, #8]
 800fd0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	68ba      	ldr	r2, [r7, #8]
 800fd10:	2100      	movs	r1, #0
 800fd12:	68f8      	ldr	r0, [r7, #12]
 800fd14:	f7fe fc7c 	bl	800e610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd18:	2300      	movs	r3, #0
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3710      	adds	r7, #16
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}

0800fd22 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fd22:	b580      	push	{r7, lr}
 800fd24:	b082      	sub	sp, #8
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2204      	movs	r2, #4
 800fd2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fd32:	2300      	movs	r3, #0
 800fd34:	2200      	movs	r2, #0
 800fd36:	2100      	movs	r1, #0
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f7fe fc4e 	bl	800e5da <USBD_LL_Transmit>

  return USBD_OK;
 800fd3e:	2300      	movs	r3, #0
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3708      	adds	r7, #8
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b082      	sub	sp, #8
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2205      	movs	r2, #5
 800fd54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd58:	2300      	movs	r3, #0
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	2100      	movs	r1, #0
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f7fe fc56 	bl	800e610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd64:	2300      	movs	r3, #0
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3708      	adds	r7, #8
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
	...

0800fd70 <sniprintf>:
 800fd70:	b40c      	push	{r2, r3}
 800fd72:	4b18      	ldr	r3, [pc, #96]	@ (800fdd4 <sniprintf+0x64>)
 800fd74:	b530      	push	{r4, r5, lr}
 800fd76:	1e0c      	subs	r4, r1, #0
 800fd78:	b09d      	sub	sp, #116	@ 0x74
 800fd7a:	681d      	ldr	r5, [r3, #0]
 800fd7c:	da08      	bge.n	800fd90 <sniprintf+0x20>
 800fd7e:	238b      	movs	r3, #139	@ 0x8b
 800fd80:	f04f 30ff 	mov.w	r0, #4294967295
 800fd84:	602b      	str	r3, [r5, #0]
 800fd86:	b01d      	add	sp, #116	@ 0x74
 800fd88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd8c:	b002      	add	sp, #8
 800fd8e:	4770      	bx	lr
 800fd90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fd94:	9002      	str	r0, [sp, #8]
 800fd96:	9006      	str	r0, [sp, #24]
 800fd98:	a902      	add	r1, sp, #8
 800fd9a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fd9e:	bf14      	ite	ne
 800fda0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fda4:	4623      	moveq	r3, r4
 800fda6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fda8:	4628      	mov	r0, r5
 800fdaa:	9304      	str	r3, [sp, #16]
 800fdac:	9307      	str	r3, [sp, #28]
 800fdae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fdb2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fdb6:	ab21      	add	r3, sp, #132	@ 0x84
 800fdb8:	9301      	str	r3, [sp, #4]
 800fdba:	f000 f9dd 	bl	8010178 <_svfiprintf_r>
 800fdbe:	1c43      	adds	r3, r0, #1
 800fdc0:	bfbc      	itt	lt
 800fdc2:	238b      	movlt	r3, #139	@ 0x8b
 800fdc4:	602b      	strlt	r3, [r5, #0]
 800fdc6:	2c00      	cmp	r4, #0
 800fdc8:	d0dd      	beq.n	800fd86 <sniprintf+0x16>
 800fdca:	9b02      	ldr	r3, [sp, #8]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	701a      	strb	r2, [r3, #0]
 800fdd0:	e7d9      	b.n	800fd86 <sniprintf+0x16>
 800fdd2:	bf00      	nop
 800fdd4:	20000124 	.word	0x20000124

0800fdd8 <_vsniprintf_r>:
 800fdd8:	b530      	push	{r4, r5, lr}
 800fdda:	4614      	mov	r4, r2
 800fddc:	b09b      	sub	sp, #108	@ 0x6c
 800fdde:	4605      	mov	r5, r0
 800fde0:	461a      	mov	r2, r3
 800fde2:	2c00      	cmp	r4, #0
 800fde4:	da05      	bge.n	800fdf2 <_vsniprintf_r+0x1a>
 800fde6:	238b      	movs	r3, #139	@ 0x8b
 800fde8:	6003      	str	r3, [r0, #0]
 800fdea:	f04f 30ff 	mov.w	r0, #4294967295
 800fdee:	b01b      	add	sp, #108	@ 0x6c
 800fdf0:	bd30      	pop	{r4, r5, pc}
 800fdf2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fdf6:	9100      	str	r1, [sp, #0]
 800fdf8:	9104      	str	r1, [sp, #16]
 800fdfa:	4669      	mov	r1, sp
 800fdfc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fe00:	bf14      	ite	ne
 800fe02:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fe06:	4623      	moveq	r3, r4
 800fe08:	9302      	str	r3, [sp, #8]
 800fe0a:	9305      	str	r3, [sp, #20]
 800fe0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fe10:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fe14:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fe16:	f000 f9af 	bl	8010178 <_svfiprintf_r>
 800fe1a:	1c43      	adds	r3, r0, #1
 800fe1c:	bfbc      	itt	lt
 800fe1e:	238b      	movlt	r3, #139	@ 0x8b
 800fe20:	602b      	strlt	r3, [r5, #0]
 800fe22:	2c00      	cmp	r4, #0
 800fe24:	d0e3      	beq.n	800fdee <_vsniprintf_r+0x16>
 800fe26:	9b00      	ldr	r3, [sp, #0]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	701a      	strb	r2, [r3, #0]
 800fe2c:	e7df      	b.n	800fdee <_vsniprintf_r+0x16>
	...

0800fe30 <vsniprintf>:
 800fe30:	b507      	push	{r0, r1, r2, lr}
 800fe32:	9300      	str	r3, [sp, #0]
 800fe34:	4613      	mov	r3, r2
 800fe36:	460a      	mov	r2, r1
 800fe38:	4601      	mov	r1, r0
 800fe3a:	4803      	ldr	r0, [pc, #12]	@ (800fe48 <vsniprintf+0x18>)
 800fe3c:	6800      	ldr	r0, [r0, #0]
 800fe3e:	f7ff ffcb 	bl	800fdd8 <_vsniprintf_r>
 800fe42:	b003      	add	sp, #12
 800fe44:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe48:	20000124 	.word	0x20000124

0800fe4c <memset>:
 800fe4c:	4402      	add	r2, r0
 800fe4e:	4603      	mov	r3, r0
 800fe50:	4293      	cmp	r3, r2
 800fe52:	d100      	bne.n	800fe56 <memset+0xa>
 800fe54:	4770      	bx	lr
 800fe56:	f803 1b01 	strb.w	r1, [r3], #1
 800fe5a:	e7f9      	b.n	800fe50 <memset+0x4>

0800fe5c <__errno>:
 800fe5c:	4b01      	ldr	r3, [pc, #4]	@ (800fe64 <__errno+0x8>)
 800fe5e:	6818      	ldr	r0, [r3, #0]
 800fe60:	4770      	bx	lr
 800fe62:	bf00      	nop
 800fe64:	20000124 	.word	0x20000124

0800fe68 <__libc_init_array>:
 800fe68:	b570      	push	{r4, r5, r6, lr}
 800fe6a:	4d0d      	ldr	r5, [pc, #52]	@ (800fea0 <__libc_init_array+0x38>)
 800fe6c:	2600      	movs	r6, #0
 800fe6e:	4c0d      	ldr	r4, [pc, #52]	@ (800fea4 <__libc_init_array+0x3c>)
 800fe70:	1b64      	subs	r4, r4, r5
 800fe72:	10a4      	asrs	r4, r4, #2
 800fe74:	42a6      	cmp	r6, r4
 800fe76:	d109      	bne.n	800fe8c <__libc_init_array+0x24>
 800fe78:	4d0b      	ldr	r5, [pc, #44]	@ (800fea8 <__libc_init_array+0x40>)
 800fe7a:	2600      	movs	r6, #0
 800fe7c:	4c0b      	ldr	r4, [pc, #44]	@ (800feac <__libc_init_array+0x44>)
 800fe7e:	f000 fc77 	bl	8010770 <_init>
 800fe82:	1b64      	subs	r4, r4, r5
 800fe84:	10a4      	asrs	r4, r4, #2
 800fe86:	42a6      	cmp	r6, r4
 800fe88:	d105      	bne.n	800fe96 <__libc_init_array+0x2e>
 800fe8a:	bd70      	pop	{r4, r5, r6, pc}
 800fe8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe90:	3601      	adds	r6, #1
 800fe92:	4798      	blx	r3
 800fe94:	e7ee      	b.n	800fe74 <__libc_init_array+0xc>
 800fe96:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe9a:	3601      	adds	r6, #1
 800fe9c:	4798      	blx	r3
 800fe9e:	e7f2      	b.n	800fe86 <__libc_init_array+0x1e>
 800fea0:	080108c8 	.word	0x080108c8
 800fea4:	080108c8 	.word	0x080108c8
 800fea8:	080108c8 	.word	0x080108c8
 800feac:	080108cc 	.word	0x080108cc

0800feb0 <__retarget_lock_acquire_recursive>:
 800feb0:	4770      	bx	lr

0800feb2 <__retarget_lock_release_recursive>:
 800feb2:	4770      	bx	lr

0800feb4 <memcpy>:
 800feb4:	440a      	add	r2, r1
 800feb6:	1e43      	subs	r3, r0, #1
 800feb8:	4291      	cmp	r1, r2
 800feba:	d100      	bne.n	800febe <memcpy+0xa>
 800febc:	4770      	bx	lr
 800febe:	b510      	push	{r4, lr}
 800fec0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fec4:	4291      	cmp	r1, r2
 800fec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800feca:	d1f9      	bne.n	800fec0 <memcpy+0xc>
 800fecc:	bd10      	pop	{r4, pc}
	...

0800fed0 <_free_r>:
 800fed0:	b538      	push	{r3, r4, r5, lr}
 800fed2:	4605      	mov	r5, r0
 800fed4:	2900      	cmp	r1, #0
 800fed6:	d041      	beq.n	800ff5c <_free_r+0x8c>
 800fed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fedc:	1f0c      	subs	r4, r1, #4
 800fede:	2b00      	cmp	r3, #0
 800fee0:	bfb8      	it	lt
 800fee2:	18e4      	addlt	r4, r4, r3
 800fee4:	f000 f8e0 	bl	80100a8 <__malloc_lock>
 800fee8:	4a1d      	ldr	r2, [pc, #116]	@ (800ff60 <_free_r+0x90>)
 800feea:	6813      	ldr	r3, [r2, #0]
 800feec:	b933      	cbnz	r3, 800fefc <_free_r+0x2c>
 800feee:	6063      	str	r3, [r4, #4]
 800fef0:	6014      	str	r4, [r2, #0]
 800fef2:	4628      	mov	r0, r5
 800fef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fef8:	f000 b8dc 	b.w	80100b4 <__malloc_unlock>
 800fefc:	42a3      	cmp	r3, r4
 800fefe:	d908      	bls.n	800ff12 <_free_r+0x42>
 800ff00:	6820      	ldr	r0, [r4, #0]
 800ff02:	1821      	adds	r1, r4, r0
 800ff04:	428b      	cmp	r3, r1
 800ff06:	bf01      	itttt	eq
 800ff08:	6819      	ldreq	r1, [r3, #0]
 800ff0a:	685b      	ldreq	r3, [r3, #4]
 800ff0c:	1809      	addeq	r1, r1, r0
 800ff0e:	6021      	streq	r1, [r4, #0]
 800ff10:	e7ed      	b.n	800feee <_free_r+0x1e>
 800ff12:	461a      	mov	r2, r3
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	b10b      	cbz	r3, 800ff1c <_free_r+0x4c>
 800ff18:	42a3      	cmp	r3, r4
 800ff1a:	d9fa      	bls.n	800ff12 <_free_r+0x42>
 800ff1c:	6811      	ldr	r1, [r2, #0]
 800ff1e:	1850      	adds	r0, r2, r1
 800ff20:	42a0      	cmp	r0, r4
 800ff22:	d10b      	bne.n	800ff3c <_free_r+0x6c>
 800ff24:	6820      	ldr	r0, [r4, #0]
 800ff26:	4401      	add	r1, r0
 800ff28:	1850      	adds	r0, r2, r1
 800ff2a:	6011      	str	r1, [r2, #0]
 800ff2c:	4283      	cmp	r3, r0
 800ff2e:	d1e0      	bne.n	800fef2 <_free_r+0x22>
 800ff30:	6818      	ldr	r0, [r3, #0]
 800ff32:	685b      	ldr	r3, [r3, #4]
 800ff34:	4408      	add	r0, r1
 800ff36:	6053      	str	r3, [r2, #4]
 800ff38:	6010      	str	r0, [r2, #0]
 800ff3a:	e7da      	b.n	800fef2 <_free_r+0x22>
 800ff3c:	d902      	bls.n	800ff44 <_free_r+0x74>
 800ff3e:	230c      	movs	r3, #12
 800ff40:	602b      	str	r3, [r5, #0]
 800ff42:	e7d6      	b.n	800fef2 <_free_r+0x22>
 800ff44:	6820      	ldr	r0, [r4, #0]
 800ff46:	1821      	adds	r1, r4, r0
 800ff48:	428b      	cmp	r3, r1
 800ff4a:	bf02      	ittt	eq
 800ff4c:	6819      	ldreq	r1, [r3, #0]
 800ff4e:	685b      	ldreq	r3, [r3, #4]
 800ff50:	1809      	addeq	r1, r1, r0
 800ff52:	6063      	str	r3, [r4, #4]
 800ff54:	bf08      	it	eq
 800ff56:	6021      	streq	r1, [r4, #0]
 800ff58:	6054      	str	r4, [r2, #4]
 800ff5a:	e7ca      	b.n	800fef2 <_free_r+0x22>
 800ff5c:	bd38      	pop	{r3, r4, r5, pc}
 800ff5e:	bf00      	nop
 800ff60:	20001300 	.word	0x20001300

0800ff64 <sbrk_aligned>:
 800ff64:	b570      	push	{r4, r5, r6, lr}
 800ff66:	4e0f      	ldr	r6, [pc, #60]	@ (800ffa4 <sbrk_aligned+0x40>)
 800ff68:	460c      	mov	r4, r1
 800ff6a:	4605      	mov	r5, r0
 800ff6c:	6831      	ldr	r1, [r6, #0]
 800ff6e:	b911      	cbnz	r1, 800ff76 <sbrk_aligned+0x12>
 800ff70:	f000 fbaa 	bl	80106c8 <_sbrk_r>
 800ff74:	6030      	str	r0, [r6, #0]
 800ff76:	4621      	mov	r1, r4
 800ff78:	4628      	mov	r0, r5
 800ff7a:	f000 fba5 	bl	80106c8 <_sbrk_r>
 800ff7e:	1c43      	adds	r3, r0, #1
 800ff80:	d103      	bne.n	800ff8a <sbrk_aligned+0x26>
 800ff82:	f04f 34ff 	mov.w	r4, #4294967295
 800ff86:	4620      	mov	r0, r4
 800ff88:	bd70      	pop	{r4, r5, r6, pc}
 800ff8a:	1cc4      	adds	r4, r0, #3
 800ff8c:	f024 0403 	bic.w	r4, r4, #3
 800ff90:	42a0      	cmp	r0, r4
 800ff92:	d0f8      	beq.n	800ff86 <sbrk_aligned+0x22>
 800ff94:	1a21      	subs	r1, r4, r0
 800ff96:	4628      	mov	r0, r5
 800ff98:	f000 fb96 	bl	80106c8 <_sbrk_r>
 800ff9c:	3001      	adds	r0, #1
 800ff9e:	d1f2      	bne.n	800ff86 <sbrk_aligned+0x22>
 800ffa0:	e7ef      	b.n	800ff82 <sbrk_aligned+0x1e>
 800ffa2:	bf00      	nop
 800ffa4:	200012fc 	.word	0x200012fc

0800ffa8 <_malloc_r>:
 800ffa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffac:	1ccd      	adds	r5, r1, #3
 800ffae:	4606      	mov	r6, r0
 800ffb0:	f025 0503 	bic.w	r5, r5, #3
 800ffb4:	3508      	adds	r5, #8
 800ffb6:	2d0c      	cmp	r5, #12
 800ffb8:	bf38      	it	cc
 800ffba:	250c      	movcc	r5, #12
 800ffbc:	2d00      	cmp	r5, #0
 800ffbe:	db01      	blt.n	800ffc4 <_malloc_r+0x1c>
 800ffc0:	42a9      	cmp	r1, r5
 800ffc2:	d904      	bls.n	800ffce <_malloc_r+0x26>
 800ffc4:	230c      	movs	r3, #12
 800ffc6:	6033      	str	r3, [r6, #0]
 800ffc8:	2000      	movs	r0, #0
 800ffca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80100a4 <_malloc_r+0xfc>
 800ffd2:	f000 f869 	bl	80100a8 <__malloc_lock>
 800ffd6:	f8d8 3000 	ldr.w	r3, [r8]
 800ffda:	461c      	mov	r4, r3
 800ffdc:	bb44      	cbnz	r4, 8010030 <_malloc_r+0x88>
 800ffde:	4629      	mov	r1, r5
 800ffe0:	4630      	mov	r0, r6
 800ffe2:	f7ff ffbf 	bl	800ff64 <sbrk_aligned>
 800ffe6:	1c43      	adds	r3, r0, #1
 800ffe8:	4604      	mov	r4, r0
 800ffea:	d158      	bne.n	801009e <_malloc_r+0xf6>
 800ffec:	f8d8 4000 	ldr.w	r4, [r8]
 800fff0:	4627      	mov	r7, r4
 800fff2:	2f00      	cmp	r7, #0
 800fff4:	d143      	bne.n	801007e <_malloc_r+0xd6>
 800fff6:	2c00      	cmp	r4, #0
 800fff8:	d04b      	beq.n	8010092 <_malloc_r+0xea>
 800fffa:	6823      	ldr	r3, [r4, #0]
 800fffc:	4639      	mov	r1, r7
 800fffe:	4630      	mov	r0, r6
 8010000:	eb04 0903 	add.w	r9, r4, r3
 8010004:	f000 fb60 	bl	80106c8 <_sbrk_r>
 8010008:	4581      	cmp	r9, r0
 801000a:	d142      	bne.n	8010092 <_malloc_r+0xea>
 801000c:	6821      	ldr	r1, [r4, #0]
 801000e:	4630      	mov	r0, r6
 8010010:	1a6d      	subs	r5, r5, r1
 8010012:	4629      	mov	r1, r5
 8010014:	f7ff ffa6 	bl	800ff64 <sbrk_aligned>
 8010018:	3001      	adds	r0, #1
 801001a:	d03a      	beq.n	8010092 <_malloc_r+0xea>
 801001c:	6823      	ldr	r3, [r4, #0]
 801001e:	442b      	add	r3, r5
 8010020:	6023      	str	r3, [r4, #0]
 8010022:	f8d8 3000 	ldr.w	r3, [r8]
 8010026:	685a      	ldr	r2, [r3, #4]
 8010028:	bb62      	cbnz	r2, 8010084 <_malloc_r+0xdc>
 801002a:	f8c8 7000 	str.w	r7, [r8]
 801002e:	e00f      	b.n	8010050 <_malloc_r+0xa8>
 8010030:	6822      	ldr	r2, [r4, #0]
 8010032:	1b52      	subs	r2, r2, r5
 8010034:	d420      	bmi.n	8010078 <_malloc_r+0xd0>
 8010036:	2a0b      	cmp	r2, #11
 8010038:	d917      	bls.n	801006a <_malloc_r+0xc2>
 801003a:	1961      	adds	r1, r4, r5
 801003c:	42a3      	cmp	r3, r4
 801003e:	6025      	str	r5, [r4, #0]
 8010040:	bf18      	it	ne
 8010042:	6059      	strne	r1, [r3, #4]
 8010044:	6863      	ldr	r3, [r4, #4]
 8010046:	bf08      	it	eq
 8010048:	f8c8 1000 	streq.w	r1, [r8]
 801004c:	5162      	str	r2, [r4, r5]
 801004e:	604b      	str	r3, [r1, #4]
 8010050:	4630      	mov	r0, r6
 8010052:	f000 f82f 	bl	80100b4 <__malloc_unlock>
 8010056:	f104 000b 	add.w	r0, r4, #11
 801005a:	1d23      	adds	r3, r4, #4
 801005c:	f020 0007 	bic.w	r0, r0, #7
 8010060:	1ac2      	subs	r2, r0, r3
 8010062:	bf1c      	itt	ne
 8010064:	1a1b      	subne	r3, r3, r0
 8010066:	50a3      	strne	r3, [r4, r2]
 8010068:	e7af      	b.n	800ffca <_malloc_r+0x22>
 801006a:	6862      	ldr	r2, [r4, #4]
 801006c:	42a3      	cmp	r3, r4
 801006e:	bf0c      	ite	eq
 8010070:	f8c8 2000 	streq.w	r2, [r8]
 8010074:	605a      	strne	r2, [r3, #4]
 8010076:	e7eb      	b.n	8010050 <_malloc_r+0xa8>
 8010078:	4623      	mov	r3, r4
 801007a:	6864      	ldr	r4, [r4, #4]
 801007c:	e7ae      	b.n	800ffdc <_malloc_r+0x34>
 801007e:	463c      	mov	r4, r7
 8010080:	687f      	ldr	r7, [r7, #4]
 8010082:	e7b6      	b.n	800fff2 <_malloc_r+0x4a>
 8010084:	461a      	mov	r2, r3
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	42a3      	cmp	r3, r4
 801008a:	d1fb      	bne.n	8010084 <_malloc_r+0xdc>
 801008c:	2300      	movs	r3, #0
 801008e:	6053      	str	r3, [r2, #4]
 8010090:	e7de      	b.n	8010050 <_malloc_r+0xa8>
 8010092:	230c      	movs	r3, #12
 8010094:	4630      	mov	r0, r6
 8010096:	6033      	str	r3, [r6, #0]
 8010098:	f000 f80c 	bl	80100b4 <__malloc_unlock>
 801009c:	e794      	b.n	800ffc8 <_malloc_r+0x20>
 801009e:	6005      	str	r5, [r0, #0]
 80100a0:	e7d6      	b.n	8010050 <_malloc_r+0xa8>
 80100a2:	bf00      	nop
 80100a4:	20001300 	.word	0x20001300

080100a8 <__malloc_lock>:
 80100a8:	4801      	ldr	r0, [pc, #4]	@ (80100b0 <__malloc_lock+0x8>)
 80100aa:	f7ff bf01 	b.w	800feb0 <__retarget_lock_acquire_recursive>
 80100ae:	bf00      	nop
 80100b0:	200012f8 	.word	0x200012f8

080100b4 <__malloc_unlock>:
 80100b4:	4801      	ldr	r0, [pc, #4]	@ (80100bc <__malloc_unlock+0x8>)
 80100b6:	f7ff befc 	b.w	800feb2 <__retarget_lock_release_recursive>
 80100ba:	bf00      	nop
 80100bc:	200012f8 	.word	0x200012f8

080100c0 <__ssputs_r>:
 80100c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100c4:	461f      	mov	r7, r3
 80100c6:	688e      	ldr	r6, [r1, #8]
 80100c8:	4682      	mov	sl, r0
 80100ca:	460c      	mov	r4, r1
 80100cc:	42be      	cmp	r6, r7
 80100ce:	4690      	mov	r8, r2
 80100d0:	680b      	ldr	r3, [r1, #0]
 80100d2:	d82d      	bhi.n	8010130 <__ssputs_r+0x70>
 80100d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80100d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80100dc:	d026      	beq.n	801012c <__ssputs_r+0x6c>
 80100de:	6965      	ldr	r5, [r4, #20]
 80100e0:	6909      	ldr	r1, [r1, #16]
 80100e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80100e6:	eba3 0901 	sub.w	r9, r3, r1
 80100ea:	1c7b      	adds	r3, r7, #1
 80100ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80100f0:	444b      	add	r3, r9
 80100f2:	106d      	asrs	r5, r5, #1
 80100f4:	429d      	cmp	r5, r3
 80100f6:	bf38      	it	cc
 80100f8:	461d      	movcc	r5, r3
 80100fa:	0553      	lsls	r3, r2, #21
 80100fc:	d527      	bpl.n	801014e <__ssputs_r+0x8e>
 80100fe:	4629      	mov	r1, r5
 8010100:	f7ff ff52 	bl	800ffa8 <_malloc_r>
 8010104:	4606      	mov	r6, r0
 8010106:	b360      	cbz	r0, 8010162 <__ssputs_r+0xa2>
 8010108:	464a      	mov	r2, r9
 801010a:	6921      	ldr	r1, [r4, #16]
 801010c:	f7ff fed2 	bl	800feb4 <memcpy>
 8010110:	89a3      	ldrh	r3, [r4, #12]
 8010112:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801011a:	81a3      	strh	r3, [r4, #12]
 801011c:	6126      	str	r6, [r4, #16]
 801011e:	444e      	add	r6, r9
 8010120:	6165      	str	r5, [r4, #20]
 8010122:	eba5 0509 	sub.w	r5, r5, r9
 8010126:	6026      	str	r6, [r4, #0]
 8010128:	463e      	mov	r6, r7
 801012a:	60a5      	str	r5, [r4, #8]
 801012c:	42be      	cmp	r6, r7
 801012e:	d900      	bls.n	8010132 <__ssputs_r+0x72>
 8010130:	463e      	mov	r6, r7
 8010132:	4632      	mov	r2, r6
 8010134:	4641      	mov	r1, r8
 8010136:	6820      	ldr	r0, [r4, #0]
 8010138:	f000 faac 	bl	8010694 <memmove>
 801013c:	68a3      	ldr	r3, [r4, #8]
 801013e:	2000      	movs	r0, #0
 8010140:	1b9b      	subs	r3, r3, r6
 8010142:	60a3      	str	r3, [r4, #8]
 8010144:	6823      	ldr	r3, [r4, #0]
 8010146:	4433      	add	r3, r6
 8010148:	6023      	str	r3, [r4, #0]
 801014a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801014e:	462a      	mov	r2, r5
 8010150:	f000 fad8 	bl	8010704 <_realloc_r>
 8010154:	4606      	mov	r6, r0
 8010156:	2800      	cmp	r0, #0
 8010158:	d1e0      	bne.n	801011c <__ssputs_r+0x5c>
 801015a:	6921      	ldr	r1, [r4, #16]
 801015c:	4650      	mov	r0, sl
 801015e:	f7ff feb7 	bl	800fed0 <_free_r>
 8010162:	230c      	movs	r3, #12
 8010164:	f04f 30ff 	mov.w	r0, #4294967295
 8010168:	f8ca 3000 	str.w	r3, [sl]
 801016c:	89a3      	ldrh	r3, [r4, #12]
 801016e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010172:	81a3      	strh	r3, [r4, #12]
 8010174:	e7e9      	b.n	801014a <__ssputs_r+0x8a>
	...

08010178 <_svfiprintf_r>:
 8010178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801017c:	4698      	mov	r8, r3
 801017e:	898b      	ldrh	r3, [r1, #12]
 8010180:	b09d      	sub	sp, #116	@ 0x74
 8010182:	4607      	mov	r7, r0
 8010184:	061b      	lsls	r3, r3, #24
 8010186:	460d      	mov	r5, r1
 8010188:	4614      	mov	r4, r2
 801018a:	d510      	bpl.n	80101ae <_svfiprintf_r+0x36>
 801018c:	690b      	ldr	r3, [r1, #16]
 801018e:	b973      	cbnz	r3, 80101ae <_svfiprintf_r+0x36>
 8010190:	2140      	movs	r1, #64	@ 0x40
 8010192:	f7ff ff09 	bl	800ffa8 <_malloc_r>
 8010196:	6028      	str	r0, [r5, #0]
 8010198:	6128      	str	r0, [r5, #16]
 801019a:	b930      	cbnz	r0, 80101aa <_svfiprintf_r+0x32>
 801019c:	230c      	movs	r3, #12
 801019e:	603b      	str	r3, [r7, #0]
 80101a0:	f04f 30ff 	mov.w	r0, #4294967295
 80101a4:	b01d      	add	sp, #116	@ 0x74
 80101a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101aa:	2340      	movs	r3, #64	@ 0x40
 80101ac:	616b      	str	r3, [r5, #20]
 80101ae:	2300      	movs	r3, #0
 80101b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80101b4:	f04f 0901 	mov.w	r9, #1
 80101b8:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 801035c <_svfiprintf_r+0x1e4>
 80101bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80101be:	2320      	movs	r3, #32
 80101c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80101c4:	2330      	movs	r3, #48	@ 0x30
 80101c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80101ca:	4623      	mov	r3, r4
 80101cc:	469a      	mov	sl, r3
 80101ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101d2:	b10a      	cbz	r2, 80101d8 <_svfiprintf_r+0x60>
 80101d4:	2a25      	cmp	r2, #37	@ 0x25
 80101d6:	d1f9      	bne.n	80101cc <_svfiprintf_r+0x54>
 80101d8:	ebba 0b04 	subs.w	fp, sl, r4
 80101dc:	d00b      	beq.n	80101f6 <_svfiprintf_r+0x7e>
 80101de:	465b      	mov	r3, fp
 80101e0:	4622      	mov	r2, r4
 80101e2:	4629      	mov	r1, r5
 80101e4:	4638      	mov	r0, r7
 80101e6:	f7ff ff6b 	bl	80100c0 <__ssputs_r>
 80101ea:	3001      	adds	r0, #1
 80101ec:	f000 80a7 	beq.w	801033e <_svfiprintf_r+0x1c6>
 80101f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101f2:	445a      	add	r2, fp
 80101f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80101f6:	f89a 3000 	ldrb.w	r3, [sl]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	f000 809f 	beq.w	801033e <_svfiprintf_r+0x1c6>
 8010200:	2300      	movs	r3, #0
 8010202:	f04f 32ff 	mov.w	r2, #4294967295
 8010206:	f10a 0a01 	add.w	sl, sl, #1
 801020a:	9304      	str	r3, [sp, #16]
 801020c:	9307      	str	r3, [sp, #28]
 801020e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010212:	931a      	str	r3, [sp, #104]	@ 0x68
 8010214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010218:	4654      	mov	r4, sl
 801021a:	2205      	movs	r2, #5
 801021c:	484f      	ldr	r0, [pc, #316]	@ (801035c <_svfiprintf_r+0x1e4>)
 801021e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010222:	f000 fa61 	bl	80106e8 <memchr>
 8010226:	9a04      	ldr	r2, [sp, #16]
 8010228:	b9d8      	cbnz	r0, 8010262 <_svfiprintf_r+0xea>
 801022a:	06d0      	lsls	r0, r2, #27
 801022c:	bf44      	itt	mi
 801022e:	2320      	movmi	r3, #32
 8010230:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010234:	0711      	lsls	r1, r2, #28
 8010236:	bf44      	itt	mi
 8010238:	232b      	movmi	r3, #43	@ 0x2b
 801023a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801023e:	f89a 3000 	ldrb.w	r3, [sl]
 8010242:	2b2a      	cmp	r3, #42	@ 0x2a
 8010244:	d015      	beq.n	8010272 <_svfiprintf_r+0xfa>
 8010246:	9a07      	ldr	r2, [sp, #28]
 8010248:	4654      	mov	r4, sl
 801024a:	2000      	movs	r0, #0
 801024c:	f04f 0c0a 	mov.w	ip, #10
 8010250:	4621      	mov	r1, r4
 8010252:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010256:	3b30      	subs	r3, #48	@ 0x30
 8010258:	2b09      	cmp	r3, #9
 801025a:	d94b      	bls.n	80102f4 <_svfiprintf_r+0x17c>
 801025c:	b1b0      	cbz	r0, 801028c <_svfiprintf_r+0x114>
 801025e:	9207      	str	r2, [sp, #28]
 8010260:	e014      	b.n	801028c <_svfiprintf_r+0x114>
 8010262:	eba0 0308 	sub.w	r3, r0, r8
 8010266:	46a2      	mov	sl, r4
 8010268:	fa09 f303 	lsl.w	r3, r9, r3
 801026c:	4313      	orrs	r3, r2
 801026e:	9304      	str	r3, [sp, #16]
 8010270:	e7d2      	b.n	8010218 <_svfiprintf_r+0xa0>
 8010272:	9b03      	ldr	r3, [sp, #12]
 8010274:	1d19      	adds	r1, r3, #4
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	9103      	str	r1, [sp, #12]
 801027c:	bfbb      	ittet	lt
 801027e:	425b      	neglt	r3, r3
 8010280:	f042 0202 	orrlt.w	r2, r2, #2
 8010284:	9307      	strge	r3, [sp, #28]
 8010286:	9307      	strlt	r3, [sp, #28]
 8010288:	bfb8      	it	lt
 801028a:	9204      	strlt	r2, [sp, #16]
 801028c:	7823      	ldrb	r3, [r4, #0]
 801028e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010290:	d10a      	bne.n	80102a8 <_svfiprintf_r+0x130>
 8010292:	7863      	ldrb	r3, [r4, #1]
 8010294:	2b2a      	cmp	r3, #42	@ 0x2a
 8010296:	d132      	bne.n	80102fe <_svfiprintf_r+0x186>
 8010298:	9b03      	ldr	r3, [sp, #12]
 801029a:	3402      	adds	r4, #2
 801029c:	1d1a      	adds	r2, r3, #4
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80102a4:	9203      	str	r2, [sp, #12]
 80102a6:	9305      	str	r3, [sp, #20]
 80102a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801036c <_svfiprintf_r+0x1f4>
 80102ac:	2203      	movs	r2, #3
 80102ae:	7821      	ldrb	r1, [r4, #0]
 80102b0:	4650      	mov	r0, sl
 80102b2:	f000 fa19 	bl	80106e8 <memchr>
 80102b6:	b138      	cbz	r0, 80102c8 <_svfiprintf_r+0x150>
 80102b8:	eba0 000a 	sub.w	r0, r0, sl
 80102bc:	2240      	movs	r2, #64	@ 0x40
 80102be:	9b04      	ldr	r3, [sp, #16]
 80102c0:	3401      	adds	r4, #1
 80102c2:	4082      	lsls	r2, r0
 80102c4:	4313      	orrs	r3, r2
 80102c6:	9304      	str	r3, [sp, #16]
 80102c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102cc:	2206      	movs	r2, #6
 80102ce:	4824      	ldr	r0, [pc, #144]	@ (8010360 <_svfiprintf_r+0x1e8>)
 80102d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80102d4:	f000 fa08 	bl	80106e8 <memchr>
 80102d8:	2800      	cmp	r0, #0
 80102da:	d036      	beq.n	801034a <_svfiprintf_r+0x1d2>
 80102dc:	4b21      	ldr	r3, [pc, #132]	@ (8010364 <_svfiprintf_r+0x1ec>)
 80102de:	bb1b      	cbnz	r3, 8010328 <_svfiprintf_r+0x1b0>
 80102e0:	9b03      	ldr	r3, [sp, #12]
 80102e2:	3307      	adds	r3, #7
 80102e4:	f023 0307 	bic.w	r3, r3, #7
 80102e8:	3308      	adds	r3, #8
 80102ea:	9303      	str	r3, [sp, #12]
 80102ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102ee:	4433      	add	r3, r6
 80102f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80102f2:	e76a      	b.n	80101ca <_svfiprintf_r+0x52>
 80102f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80102f8:	460c      	mov	r4, r1
 80102fa:	2001      	movs	r0, #1
 80102fc:	e7a8      	b.n	8010250 <_svfiprintf_r+0xd8>
 80102fe:	2300      	movs	r3, #0
 8010300:	3401      	adds	r4, #1
 8010302:	f04f 0c0a 	mov.w	ip, #10
 8010306:	4619      	mov	r1, r3
 8010308:	9305      	str	r3, [sp, #20]
 801030a:	4620      	mov	r0, r4
 801030c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010310:	3a30      	subs	r2, #48	@ 0x30
 8010312:	2a09      	cmp	r2, #9
 8010314:	d903      	bls.n	801031e <_svfiprintf_r+0x1a6>
 8010316:	2b00      	cmp	r3, #0
 8010318:	d0c6      	beq.n	80102a8 <_svfiprintf_r+0x130>
 801031a:	9105      	str	r1, [sp, #20]
 801031c:	e7c4      	b.n	80102a8 <_svfiprintf_r+0x130>
 801031e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010322:	4604      	mov	r4, r0
 8010324:	2301      	movs	r3, #1
 8010326:	e7f0      	b.n	801030a <_svfiprintf_r+0x192>
 8010328:	ab03      	add	r3, sp, #12
 801032a:	462a      	mov	r2, r5
 801032c:	a904      	add	r1, sp, #16
 801032e:	4638      	mov	r0, r7
 8010330:	9300      	str	r3, [sp, #0]
 8010332:	4b0d      	ldr	r3, [pc, #52]	@ (8010368 <_svfiprintf_r+0x1f0>)
 8010334:	f3af 8000 	nop.w
 8010338:	1c42      	adds	r2, r0, #1
 801033a:	4606      	mov	r6, r0
 801033c:	d1d6      	bne.n	80102ec <_svfiprintf_r+0x174>
 801033e:	89ab      	ldrh	r3, [r5, #12]
 8010340:	065b      	lsls	r3, r3, #25
 8010342:	f53f af2d 	bmi.w	80101a0 <_svfiprintf_r+0x28>
 8010346:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010348:	e72c      	b.n	80101a4 <_svfiprintf_r+0x2c>
 801034a:	ab03      	add	r3, sp, #12
 801034c:	462a      	mov	r2, r5
 801034e:	a904      	add	r1, sp, #16
 8010350:	4638      	mov	r0, r7
 8010352:	9300      	str	r3, [sp, #0]
 8010354:	4b04      	ldr	r3, [pc, #16]	@ (8010368 <_svfiprintf_r+0x1f0>)
 8010356:	f000 f87d 	bl	8010454 <_printf_i>
 801035a:	e7ed      	b.n	8010338 <_svfiprintf_r+0x1c0>
 801035c:	0801088c 	.word	0x0801088c
 8010360:	08010896 	.word	0x08010896
 8010364:	00000000 	.word	0x00000000
 8010368:	080100c1 	.word	0x080100c1
 801036c:	08010892 	.word	0x08010892

08010370 <_printf_common>:
 8010370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010374:	4616      	mov	r6, r2
 8010376:	4698      	mov	r8, r3
 8010378:	688a      	ldr	r2, [r1, #8]
 801037a:	4607      	mov	r7, r0
 801037c:	690b      	ldr	r3, [r1, #16]
 801037e:	460c      	mov	r4, r1
 8010380:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010384:	4293      	cmp	r3, r2
 8010386:	bfb8      	it	lt
 8010388:	4613      	movlt	r3, r2
 801038a:	6033      	str	r3, [r6, #0]
 801038c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010390:	b10a      	cbz	r2, 8010396 <_printf_common+0x26>
 8010392:	3301      	adds	r3, #1
 8010394:	6033      	str	r3, [r6, #0]
 8010396:	6823      	ldr	r3, [r4, #0]
 8010398:	0699      	lsls	r1, r3, #26
 801039a:	bf42      	ittt	mi
 801039c:	6833      	ldrmi	r3, [r6, #0]
 801039e:	3302      	addmi	r3, #2
 80103a0:	6033      	strmi	r3, [r6, #0]
 80103a2:	6825      	ldr	r5, [r4, #0]
 80103a4:	f015 0506 	ands.w	r5, r5, #6
 80103a8:	d106      	bne.n	80103b8 <_printf_common+0x48>
 80103aa:	f104 0a19 	add.w	sl, r4, #25
 80103ae:	68e3      	ldr	r3, [r4, #12]
 80103b0:	6832      	ldr	r2, [r6, #0]
 80103b2:	1a9b      	subs	r3, r3, r2
 80103b4:	42ab      	cmp	r3, r5
 80103b6:	dc2b      	bgt.n	8010410 <_printf_common+0xa0>
 80103b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80103bc:	6822      	ldr	r2, [r4, #0]
 80103be:	3b00      	subs	r3, #0
 80103c0:	bf18      	it	ne
 80103c2:	2301      	movne	r3, #1
 80103c4:	0692      	lsls	r2, r2, #26
 80103c6:	d430      	bmi.n	801042a <_printf_common+0xba>
 80103c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80103cc:	4641      	mov	r1, r8
 80103ce:	4638      	mov	r0, r7
 80103d0:	47c8      	blx	r9
 80103d2:	3001      	adds	r0, #1
 80103d4:	d023      	beq.n	801041e <_printf_common+0xae>
 80103d6:	6823      	ldr	r3, [r4, #0]
 80103d8:	341a      	adds	r4, #26
 80103da:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80103de:	f003 0306 	and.w	r3, r3, #6
 80103e2:	2b04      	cmp	r3, #4
 80103e4:	bf0a      	itet	eq
 80103e6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80103ea:	2500      	movne	r5, #0
 80103ec:	6833      	ldreq	r3, [r6, #0]
 80103ee:	f04f 0600 	mov.w	r6, #0
 80103f2:	bf08      	it	eq
 80103f4:	1aed      	subeq	r5, r5, r3
 80103f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80103fa:	bf08      	it	eq
 80103fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010400:	4293      	cmp	r3, r2
 8010402:	bfc4      	itt	gt
 8010404:	1a9b      	subgt	r3, r3, r2
 8010406:	18ed      	addgt	r5, r5, r3
 8010408:	42b5      	cmp	r5, r6
 801040a:	d11a      	bne.n	8010442 <_printf_common+0xd2>
 801040c:	2000      	movs	r0, #0
 801040e:	e008      	b.n	8010422 <_printf_common+0xb2>
 8010410:	2301      	movs	r3, #1
 8010412:	4652      	mov	r2, sl
 8010414:	4641      	mov	r1, r8
 8010416:	4638      	mov	r0, r7
 8010418:	47c8      	blx	r9
 801041a:	3001      	adds	r0, #1
 801041c:	d103      	bne.n	8010426 <_printf_common+0xb6>
 801041e:	f04f 30ff 	mov.w	r0, #4294967295
 8010422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010426:	3501      	adds	r5, #1
 8010428:	e7c1      	b.n	80103ae <_printf_common+0x3e>
 801042a:	18e1      	adds	r1, r4, r3
 801042c:	1c5a      	adds	r2, r3, #1
 801042e:	2030      	movs	r0, #48	@ 0x30
 8010430:	3302      	adds	r3, #2
 8010432:	4422      	add	r2, r4
 8010434:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010438:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801043c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010440:	e7c2      	b.n	80103c8 <_printf_common+0x58>
 8010442:	2301      	movs	r3, #1
 8010444:	4622      	mov	r2, r4
 8010446:	4641      	mov	r1, r8
 8010448:	4638      	mov	r0, r7
 801044a:	47c8      	blx	r9
 801044c:	3001      	adds	r0, #1
 801044e:	d0e6      	beq.n	801041e <_printf_common+0xae>
 8010450:	3601      	adds	r6, #1
 8010452:	e7d9      	b.n	8010408 <_printf_common+0x98>

08010454 <_printf_i>:
 8010454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010458:	7e0f      	ldrb	r7, [r1, #24]
 801045a:	4691      	mov	r9, r2
 801045c:	4680      	mov	r8, r0
 801045e:	460c      	mov	r4, r1
 8010460:	2f78      	cmp	r7, #120	@ 0x78
 8010462:	469a      	mov	sl, r3
 8010464:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010466:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801046a:	d807      	bhi.n	801047c <_printf_i+0x28>
 801046c:	2f62      	cmp	r7, #98	@ 0x62
 801046e:	d80a      	bhi.n	8010486 <_printf_i+0x32>
 8010470:	2f00      	cmp	r7, #0
 8010472:	f000 80d2 	beq.w	801061a <_printf_i+0x1c6>
 8010476:	2f58      	cmp	r7, #88	@ 0x58
 8010478:	f000 80b9 	beq.w	80105ee <_printf_i+0x19a>
 801047c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010480:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010484:	e03a      	b.n	80104fc <_printf_i+0xa8>
 8010486:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801048a:	2b15      	cmp	r3, #21
 801048c:	d8f6      	bhi.n	801047c <_printf_i+0x28>
 801048e:	a101      	add	r1, pc, #4	@ (adr r1, 8010494 <_printf_i+0x40>)
 8010490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010494:	080104ed 	.word	0x080104ed
 8010498:	08010501 	.word	0x08010501
 801049c:	0801047d 	.word	0x0801047d
 80104a0:	0801047d 	.word	0x0801047d
 80104a4:	0801047d 	.word	0x0801047d
 80104a8:	0801047d 	.word	0x0801047d
 80104ac:	08010501 	.word	0x08010501
 80104b0:	0801047d 	.word	0x0801047d
 80104b4:	0801047d 	.word	0x0801047d
 80104b8:	0801047d 	.word	0x0801047d
 80104bc:	0801047d 	.word	0x0801047d
 80104c0:	08010601 	.word	0x08010601
 80104c4:	0801052b 	.word	0x0801052b
 80104c8:	080105bb 	.word	0x080105bb
 80104cc:	0801047d 	.word	0x0801047d
 80104d0:	0801047d 	.word	0x0801047d
 80104d4:	08010623 	.word	0x08010623
 80104d8:	0801047d 	.word	0x0801047d
 80104dc:	0801052b 	.word	0x0801052b
 80104e0:	0801047d 	.word	0x0801047d
 80104e4:	0801047d 	.word	0x0801047d
 80104e8:	080105c3 	.word	0x080105c3
 80104ec:	6833      	ldr	r3, [r6, #0]
 80104ee:	1d1a      	adds	r2, r3, #4
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	6032      	str	r2, [r6, #0]
 80104f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80104f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80104fc:	2301      	movs	r3, #1
 80104fe:	e09d      	b.n	801063c <_printf_i+0x1e8>
 8010500:	6833      	ldr	r3, [r6, #0]
 8010502:	6820      	ldr	r0, [r4, #0]
 8010504:	1d19      	adds	r1, r3, #4
 8010506:	6031      	str	r1, [r6, #0]
 8010508:	0606      	lsls	r6, r0, #24
 801050a:	d501      	bpl.n	8010510 <_printf_i+0xbc>
 801050c:	681d      	ldr	r5, [r3, #0]
 801050e:	e003      	b.n	8010518 <_printf_i+0xc4>
 8010510:	0645      	lsls	r5, r0, #25
 8010512:	d5fb      	bpl.n	801050c <_printf_i+0xb8>
 8010514:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010518:	2d00      	cmp	r5, #0
 801051a:	da03      	bge.n	8010524 <_printf_i+0xd0>
 801051c:	232d      	movs	r3, #45	@ 0x2d
 801051e:	426d      	negs	r5, r5
 8010520:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010524:	4859      	ldr	r0, [pc, #356]	@ (801068c <_printf_i+0x238>)
 8010526:	230a      	movs	r3, #10
 8010528:	e011      	b.n	801054e <_printf_i+0xfa>
 801052a:	6821      	ldr	r1, [r4, #0]
 801052c:	6833      	ldr	r3, [r6, #0]
 801052e:	0608      	lsls	r0, r1, #24
 8010530:	f853 5b04 	ldr.w	r5, [r3], #4
 8010534:	d402      	bmi.n	801053c <_printf_i+0xe8>
 8010536:	0649      	lsls	r1, r1, #25
 8010538:	bf48      	it	mi
 801053a:	b2ad      	uxthmi	r5, r5
 801053c:	2f6f      	cmp	r7, #111	@ 0x6f
 801053e:	6033      	str	r3, [r6, #0]
 8010540:	4852      	ldr	r0, [pc, #328]	@ (801068c <_printf_i+0x238>)
 8010542:	bf14      	ite	ne
 8010544:	230a      	movne	r3, #10
 8010546:	2308      	moveq	r3, #8
 8010548:	2100      	movs	r1, #0
 801054a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801054e:	6866      	ldr	r6, [r4, #4]
 8010550:	2e00      	cmp	r6, #0
 8010552:	60a6      	str	r6, [r4, #8]
 8010554:	bfa2      	ittt	ge
 8010556:	6821      	ldrge	r1, [r4, #0]
 8010558:	f021 0104 	bicge.w	r1, r1, #4
 801055c:	6021      	strge	r1, [r4, #0]
 801055e:	b90d      	cbnz	r5, 8010564 <_printf_i+0x110>
 8010560:	2e00      	cmp	r6, #0
 8010562:	d04b      	beq.n	80105fc <_printf_i+0x1a8>
 8010564:	4616      	mov	r6, r2
 8010566:	fbb5 f1f3 	udiv	r1, r5, r3
 801056a:	fb03 5711 	mls	r7, r3, r1, r5
 801056e:	5dc7      	ldrb	r7, [r0, r7]
 8010570:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010574:	462f      	mov	r7, r5
 8010576:	460d      	mov	r5, r1
 8010578:	42bb      	cmp	r3, r7
 801057a:	d9f4      	bls.n	8010566 <_printf_i+0x112>
 801057c:	2b08      	cmp	r3, #8
 801057e:	d10b      	bne.n	8010598 <_printf_i+0x144>
 8010580:	6823      	ldr	r3, [r4, #0]
 8010582:	07df      	lsls	r7, r3, #31
 8010584:	d508      	bpl.n	8010598 <_printf_i+0x144>
 8010586:	6923      	ldr	r3, [r4, #16]
 8010588:	6861      	ldr	r1, [r4, #4]
 801058a:	4299      	cmp	r1, r3
 801058c:	bfde      	ittt	le
 801058e:	2330      	movle	r3, #48	@ 0x30
 8010590:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010594:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010598:	1b92      	subs	r2, r2, r6
 801059a:	6122      	str	r2, [r4, #16]
 801059c:	464b      	mov	r3, r9
 801059e:	aa03      	add	r2, sp, #12
 80105a0:	4621      	mov	r1, r4
 80105a2:	4640      	mov	r0, r8
 80105a4:	f8cd a000 	str.w	sl, [sp]
 80105a8:	f7ff fee2 	bl	8010370 <_printf_common>
 80105ac:	3001      	adds	r0, #1
 80105ae:	d14a      	bne.n	8010646 <_printf_i+0x1f2>
 80105b0:	f04f 30ff 	mov.w	r0, #4294967295
 80105b4:	b004      	add	sp, #16
 80105b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105ba:	6823      	ldr	r3, [r4, #0]
 80105bc:	f043 0320 	orr.w	r3, r3, #32
 80105c0:	6023      	str	r3, [r4, #0]
 80105c2:	2778      	movs	r7, #120	@ 0x78
 80105c4:	4832      	ldr	r0, [pc, #200]	@ (8010690 <_printf_i+0x23c>)
 80105c6:	6823      	ldr	r3, [r4, #0]
 80105c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80105cc:	061f      	lsls	r7, r3, #24
 80105ce:	6831      	ldr	r1, [r6, #0]
 80105d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80105d4:	d402      	bmi.n	80105dc <_printf_i+0x188>
 80105d6:	065f      	lsls	r7, r3, #25
 80105d8:	bf48      	it	mi
 80105da:	b2ad      	uxthmi	r5, r5
 80105dc:	6031      	str	r1, [r6, #0]
 80105de:	07d9      	lsls	r1, r3, #31
 80105e0:	bf44      	itt	mi
 80105e2:	f043 0320 	orrmi.w	r3, r3, #32
 80105e6:	6023      	strmi	r3, [r4, #0]
 80105e8:	b11d      	cbz	r5, 80105f2 <_printf_i+0x19e>
 80105ea:	2310      	movs	r3, #16
 80105ec:	e7ac      	b.n	8010548 <_printf_i+0xf4>
 80105ee:	4827      	ldr	r0, [pc, #156]	@ (801068c <_printf_i+0x238>)
 80105f0:	e7e9      	b.n	80105c6 <_printf_i+0x172>
 80105f2:	6823      	ldr	r3, [r4, #0]
 80105f4:	f023 0320 	bic.w	r3, r3, #32
 80105f8:	6023      	str	r3, [r4, #0]
 80105fa:	e7f6      	b.n	80105ea <_printf_i+0x196>
 80105fc:	4616      	mov	r6, r2
 80105fe:	e7bd      	b.n	801057c <_printf_i+0x128>
 8010600:	6833      	ldr	r3, [r6, #0]
 8010602:	6825      	ldr	r5, [r4, #0]
 8010604:	1d18      	adds	r0, r3, #4
 8010606:	6961      	ldr	r1, [r4, #20]
 8010608:	6030      	str	r0, [r6, #0]
 801060a:	062e      	lsls	r6, r5, #24
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	d501      	bpl.n	8010614 <_printf_i+0x1c0>
 8010610:	6019      	str	r1, [r3, #0]
 8010612:	e002      	b.n	801061a <_printf_i+0x1c6>
 8010614:	0668      	lsls	r0, r5, #25
 8010616:	d5fb      	bpl.n	8010610 <_printf_i+0x1bc>
 8010618:	8019      	strh	r1, [r3, #0]
 801061a:	2300      	movs	r3, #0
 801061c:	4616      	mov	r6, r2
 801061e:	6123      	str	r3, [r4, #16]
 8010620:	e7bc      	b.n	801059c <_printf_i+0x148>
 8010622:	6833      	ldr	r3, [r6, #0]
 8010624:	2100      	movs	r1, #0
 8010626:	1d1a      	adds	r2, r3, #4
 8010628:	6032      	str	r2, [r6, #0]
 801062a:	681e      	ldr	r6, [r3, #0]
 801062c:	6862      	ldr	r2, [r4, #4]
 801062e:	4630      	mov	r0, r6
 8010630:	f000 f85a 	bl	80106e8 <memchr>
 8010634:	b108      	cbz	r0, 801063a <_printf_i+0x1e6>
 8010636:	1b80      	subs	r0, r0, r6
 8010638:	6060      	str	r0, [r4, #4]
 801063a:	6863      	ldr	r3, [r4, #4]
 801063c:	6123      	str	r3, [r4, #16]
 801063e:	2300      	movs	r3, #0
 8010640:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010644:	e7aa      	b.n	801059c <_printf_i+0x148>
 8010646:	6923      	ldr	r3, [r4, #16]
 8010648:	4632      	mov	r2, r6
 801064a:	4649      	mov	r1, r9
 801064c:	4640      	mov	r0, r8
 801064e:	47d0      	blx	sl
 8010650:	3001      	adds	r0, #1
 8010652:	d0ad      	beq.n	80105b0 <_printf_i+0x15c>
 8010654:	6823      	ldr	r3, [r4, #0]
 8010656:	079b      	lsls	r3, r3, #30
 8010658:	d413      	bmi.n	8010682 <_printf_i+0x22e>
 801065a:	68e0      	ldr	r0, [r4, #12]
 801065c:	9b03      	ldr	r3, [sp, #12]
 801065e:	4298      	cmp	r0, r3
 8010660:	bfb8      	it	lt
 8010662:	4618      	movlt	r0, r3
 8010664:	e7a6      	b.n	80105b4 <_printf_i+0x160>
 8010666:	2301      	movs	r3, #1
 8010668:	4632      	mov	r2, r6
 801066a:	4649      	mov	r1, r9
 801066c:	4640      	mov	r0, r8
 801066e:	47d0      	blx	sl
 8010670:	3001      	adds	r0, #1
 8010672:	d09d      	beq.n	80105b0 <_printf_i+0x15c>
 8010674:	3501      	adds	r5, #1
 8010676:	68e3      	ldr	r3, [r4, #12]
 8010678:	9903      	ldr	r1, [sp, #12]
 801067a:	1a5b      	subs	r3, r3, r1
 801067c:	42ab      	cmp	r3, r5
 801067e:	dcf2      	bgt.n	8010666 <_printf_i+0x212>
 8010680:	e7eb      	b.n	801065a <_printf_i+0x206>
 8010682:	2500      	movs	r5, #0
 8010684:	f104 0619 	add.w	r6, r4, #25
 8010688:	e7f5      	b.n	8010676 <_printf_i+0x222>
 801068a:	bf00      	nop
 801068c:	0801089d 	.word	0x0801089d
 8010690:	080108ae 	.word	0x080108ae

08010694 <memmove>:
 8010694:	4288      	cmp	r0, r1
 8010696:	b510      	push	{r4, lr}
 8010698:	eb01 0402 	add.w	r4, r1, r2
 801069c:	d902      	bls.n	80106a4 <memmove+0x10>
 801069e:	4284      	cmp	r4, r0
 80106a0:	4623      	mov	r3, r4
 80106a2:	d807      	bhi.n	80106b4 <memmove+0x20>
 80106a4:	1e43      	subs	r3, r0, #1
 80106a6:	42a1      	cmp	r1, r4
 80106a8:	d008      	beq.n	80106bc <memmove+0x28>
 80106aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80106ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80106b2:	e7f8      	b.n	80106a6 <memmove+0x12>
 80106b4:	4402      	add	r2, r0
 80106b6:	4601      	mov	r1, r0
 80106b8:	428a      	cmp	r2, r1
 80106ba:	d100      	bne.n	80106be <memmove+0x2a>
 80106bc:	bd10      	pop	{r4, pc}
 80106be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80106c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80106c6:	e7f7      	b.n	80106b8 <memmove+0x24>

080106c8 <_sbrk_r>:
 80106c8:	b538      	push	{r3, r4, r5, lr}
 80106ca:	2300      	movs	r3, #0
 80106cc:	4d05      	ldr	r5, [pc, #20]	@ (80106e4 <_sbrk_r+0x1c>)
 80106ce:	4604      	mov	r4, r0
 80106d0:	4608      	mov	r0, r1
 80106d2:	602b      	str	r3, [r5, #0]
 80106d4:	f7f1 f83c 	bl	8001750 <_sbrk>
 80106d8:	1c43      	adds	r3, r0, #1
 80106da:	d102      	bne.n	80106e2 <_sbrk_r+0x1a>
 80106dc:	682b      	ldr	r3, [r5, #0]
 80106de:	b103      	cbz	r3, 80106e2 <_sbrk_r+0x1a>
 80106e0:	6023      	str	r3, [r4, #0]
 80106e2:	bd38      	pop	{r3, r4, r5, pc}
 80106e4:	200012f4 	.word	0x200012f4

080106e8 <memchr>:
 80106e8:	b2c9      	uxtb	r1, r1
 80106ea:	4603      	mov	r3, r0
 80106ec:	4402      	add	r2, r0
 80106ee:	b510      	push	{r4, lr}
 80106f0:	4293      	cmp	r3, r2
 80106f2:	4618      	mov	r0, r3
 80106f4:	d101      	bne.n	80106fa <memchr+0x12>
 80106f6:	2000      	movs	r0, #0
 80106f8:	e003      	b.n	8010702 <memchr+0x1a>
 80106fa:	7804      	ldrb	r4, [r0, #0]
 80106fc:	3301      	adds	r3, #1
 80106fe:	428c      	cmp	r4, r1
 8010700:	d1f6      	bne.n	80106f0 <memchr+0x8>
 8010702:	bd10      	pop	{r4, pc}

08010704 <_realloc_r>:
 8010704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010708:	4680      	mov	r8, r0
 801070a:	4615      	mov	r5, r2
 801070c:	460c      	mov	r4, r1
 801070e:	b921      	cbnz	r1, 801071a <_realloc_r+0x16>
 8010710:	4611      	mov	r1, r2
 8010712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010716:	f7ff bc47 	b.w	800ffa8 <_malloc_r>
 801071a:	b92a      	cbnz	r2, 8010728 <_realloc_r+0x24>
 801071c:	f7ff fbd8 	bl	800fed0 <_free_r>
 8010720:	2400      	movs	r4, #0
 8010722:	4620      	mov	r0, r4
 8010724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010728:	f000 f81a 	bl	8010760 <_malloc_usable_size_r>
 801072c:	4285      	cmp	r5, r0
 801072e:	4606      	mov	r6, r0
 8010730:	d802      	bhi.n	8010738 <_realloc_r+0x34>
 8010732:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010736:	d8f4      	bhi.n	8010722 <_realloc_r+0x1e>
 8010738:	4629      	mov	r1, r5
 801073a:	4640      	mov	r0, r8
 801073c:	f7ff fc34 	bl	800ffa8 <_malloc_r>
 8010740:	4607      	mov	r7, r0
 8010742:	2800      	cmp	r0, #0
 8010744:	d0ec      	beq.n	8010720 <_realloc_r+0x1c>
 8010746:	42b5      	cmp	r5, r6
 8010748:	462a      	mov	r2, r5
 801074a:	4621      	mov	r1, r4
 801074c:	bf28      	it	cs
 801074e:	4632      	movcs	r2, r6
 8010750:	f7ff fbb0 	bl	800feb4 <memcpy>
 8010754:	4621      	mov	r1, r4
 8010756:	4640      	mov	r0, r8
 8010758:	463c      	mov	r4, r7
 801075a:	f7ff fbb9 	bl	800fed0 <_free_r>
 801075e:	e7e0      	b.n	8010722 <_realloc_r+0x1e>

08010760 <_malloc_usable_size_r>:
 8010760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010764:	1f18      	subs	r0, r3, #4
 8010766:	2b00      	cmp	r3, #0
 8010768:	bfbc      	itt	lt
 801076a:	580b      	ldrlt	r3, [r1, r0]
 801076c:	18c0      	addlt	r0, r0, r3
 801076e:	4770      	bx	lr

08010770 <_init>:
 8010770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010772:	bf00      	nop
 8010774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010776:	bc08      	pop	{r3}
 8010778:	469e      	mov	lr, r3
 801077a:	4770      	bx	lr

0801077c <_fini>:
 801077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801077e:	bf00      	nop
 8010780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010782:	bc08      	pop	{r3}
 8010784:	469e      	mov	lr, r3
 8010786:	4770      	bx	lr
